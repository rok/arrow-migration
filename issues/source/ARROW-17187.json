{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13472952",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952",
    "key": "ARROW-17187",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17187/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot opened a new pull request, #14271:\nURL: https://github.com/apache/arrow/pull/14271\n\n   This PR is a more permanent fix for ARROW-16578 (#13415), which noted some very bad performance when calling `unique()` in a character vector created by us. In benchmarking a few other things and implementing some simpler altrep classes around the C Data interface (https://github.com/apache/arrow-nanoarrow/pull/50), I found a few other changes that may improve performance (will update as I experiment/benchmark this via the ursabot).\r\n   \r\n   For the STRING_ELT issue, the previous method may have been slow for a few reasons:\r\n   \r\n   - First, it used `BEGIN_CPP11` and `END_CPP11`, which stack-allocates an 8 kb error message array\r\n   - Second, it stack-allocates an `RStringViewer` for every string access. This is probably not that bad, but because it's not trivially destructible it couldn't be used without `BEGIN_CPP11`/`END_CPP11`, which allocates more than needed. I statically allocate one of these to solve this.\r\n   - Third, it was calling `GetOption()` (via creating the string viewer) on every string access\r\n   - Fourth, it `unwind_protect`ed for every string access.\r\n   \r\n   I'm also experimenting here with releasing a reference to the `std::shared_ptr<ChunkedArray>` when we materialize our ALTREP vectors. We use it for length/sum/min/max implementations but in most cases it's probably not used and is just taking up memory that could be released and used for something else.\n\n\n",
                    "created": "2022-09-28T17:56:35.242+0000",
                    "updated": "2022-09-28T17:56:35.242+0000",
                    "started": "2022-09-28T17:56:35.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813082",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#issuecomment-1261368944\n\n   @ursabot please benchmark lang=R\n\n\n",
                    "created": "2022-09-28T19:24:24.462+0000",
                    "updated": "2022-09-28T19:24:24.462+0000",
                    "started": "2022-09-28T19:24:24.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813096",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#issuecomment-1261369096\n\n   Benchmark runs are scheduled for baseline = eec94ff4047b9e1bbcf3da46f1c34e3687a171bb and contender = bffb3cf8ae6861311d45ddc2aa202d2fe2caa955. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Skipped :warning: Only ['Python'] langs are supported on ec2-t3-xlarge-us-east-2] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/62bf5c289e194ea7af10ae8ae406f95a...3ac8fa0cb3bc4df9b8014678978cebd4/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/175a959b85a5404384947ddb43526c24...78a0b38d8b9048438c5063ef7704f290/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/a5b51502622d4f609dc12da193e34406...dd1a717cb2e74955b23d9d705db6f27e/)\n   [Skipped :warning: Only ['C++', 'Java'] langs are supported on ursa-thinkcentre-m75q] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/20bf8d5ee7c44654acfb7849ea364afc...a462be8c9fcc4ead87654737461d17b7/)\n   Buildkite builds:\n   [Scheduled] [`bffb3cf8` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1607)\n   [Scheduled] [`bffb3cf8` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1590)\n   [Finished] [`eec94ff4` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1590)\n   [Scheduled] [`eec94ff4` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1606)\n   [Scheduled] [`eec94ff4` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1589)\n   [Scheduled] [`eec94ff4` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1602)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-09-28T19:24:34.384+0000",
                    "updated": "2022-09-28T19:24:34.384+0000",
                    "started": "2022-09-28T19:24:34.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813097",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r982788100\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -86,6 +86,8 @@ const std::shared_ptr<ChunkedArray>& GetChunkedArray(SEXP alt) {\n \n struct ArrayResolve {\n   ArrayResolve(const std::shared_ptr<ChunkedArray>& chunked_array, int64_t i) {\n+    // TODO: should probably use a binary search? Likely only matters in\n+    // chunked arrays where there are many chunks. Maybe Arrow has this already?\n\nReview Comment:\n   It does, look for ChunkedArrayResolver.\n\n\n\n",
                    "created": "2022-09-28T19:30:57.786+0000",
                    "updated": "2022-09-28T19:30:57.786+0000",
                    "started": "2022-09-28T19:30:57.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813098",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#issuecomment-1261397505\n\n   https://issues.apache.org/jira/browse/ARROW-17187\n\n\n",
                    "created": "2022-09-28T19:52:43.470+0000",
                    "updated": "2022-09-28T19:52:43.470+0000",
                    "started": "2022-09-28T19:52:43.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813102",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#issuecomment-1261397527\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-09-28T19:52:45.186+0000",
                    "updated": "2022-09-28T19:52:45.186+0000",
                    "started": "2022-09-28T19:52:45.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813103",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#issuecomment-1263962156\n\n   @ursabot please benchmark lang=R\n\n\n",
                    "created": "2022-09-30T19:52:23.500+0000",
                    "updated": "2022-09-30T19:52:23.500+0000",
                    "started": "2022-09-30T19:52:23.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813797",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/813798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#issuecomment-1263962219\n\n   Benchmark runs are scheduled for baseline = eec94ff4047b9e1bbcf3da46f1c34e3687a171bb and contender = 3ac747df1c4388d2cb70645366c5243dcf855b16. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Skipped :warning: Only ['Python'] langs are supported on ec2-t3-xlarge-us-east-2] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/62bf5c289e194ea7af10ae8ae406f95a...2625d20e094749d0ac30cb99dc5dc8ee/)\n   [Scheduled] [test-mac-arm](https://conbench.ursa.dev/compare/runs/175a959b85a5404384947ddb43526c24...c8922b1d9f2f495cb9b74073092a920c/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/a5b51502622d4f609dc12da193e34406...26a8e91e8263498b913ee7a95c9b2ed2/)\n   [Skipped :warning: Only ['C++', 'Java'] langs are supported on ursa-thinkcentre-m75q] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/20bf8d5ee7c44654acfb7849ea364afc...f2191911a69d485fa97468a2a9c4506b/)\n   Buildkite builds:\n   [Scheduled] [`3ac747df` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1624)\n   [Scheduled] [`3ac747df` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1607)\n   [Finished] [`eec94ff4` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1590)\n   [Finished] [`eec94ff4` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1606)\n   [Failed] [`eec94ff4` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1589)\n   [Finished] [`eec94ff4` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1602)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-09-30T19:52:28.221+0000",
                    "updated": "2022-09-30T19:52:28.221+0000",
                    "started": "2022-09-30T19:52:28.220+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813798",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/814230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r988555686\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -777,20 +822,39 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n     std::shared_ptr<Array> array_;\n     const StringArrayType* string_array_;\n     std::string stripped_string_;\n-    const bool strip_out_nuls_;\n+    bool strip_out_nuls_;\n     bool nul_was_stripped_;\n     std::string_view view_;\n   };\n \n-  // Get a single string, as a CHARSXP SEXP from data2.\n-  // Materialize if not done so yet, given that it is\n-  // likely that there will be another call from R if there is a call (e.g. unique()),\n-  // and getting a string from Array is much more costly than from data2.\n+  // Get a single string as a CHARSXP SEXP\n+  // Note that a previous version of this function used BEGIN_CPP11\n+  // and END_CPP11, which stack-allocates 8kb for the error message.\n+  // This is fine for top-level calls, but here\n   static SEXP Elt(SEXP alt, R_xlen_t i) {\n-    if (!Base::IsMaterialized(alt)) {\n-      Materialize(alt);\n+    if (Base::IsMaterialized(alt)) {\n+      return STRING_ELT(Representation(alt), i);\n     }\n-    return STRING_ELT(Representation(alt), i);\n+\n+    auto altrep_data = external_pointer<ArrowAltrepData>(R_altrep_data1(alt));\n+    auto resolve = altrep_data->locate(i);\n+    auto array = altrep_data->chunked_array->chunk(resolve.chunk_index);\n+    auto j = resolve.index_in_chunk;\n+\n+    SEXP s = NA_STRING;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.SetArray(array);\n+    // Note: we don't check GetBoolOption(\"arrow.skip_nul\", false) here\n+    // because it is too expensive to do so. We do set this value whenever\n+    // an altrep string; however, there is a chance that this value could\n+    // be out of date by the time a value in the vector is accessed.\n+    r_string_viewer.reset_null_was_stripped();\n+    s = r_string_viewer.Convert(j);\n+    if (r_string_viewer.nul_was_stripped()) {\n+      Rf_warning(\"Stripping '\\\\0' (nul) from character vector\");\n\nReview Comment:\n   one thing to consider about warnings is that they may be converted to errors (with `options(warn = 2)`) and so this (and maybe other uses) may end up jumping, possibly bypassing the destructor for `altrep_data`. \r\n   \r\n   Perhaps this could be done in a separate function: \r\n   \r\n   ```cpp\r\n        auto altrep_data = external_pointer<ArrowAltrepData>(R_altrep_data1(alt));\r\n        auto resolve = altrep_data->locate(i);\r\n        auto array = altrep_data->chunked_array->chunk(resolve.chunk_index);\r\n        auto j = resolve.index_in_chunk;\r\n   \r\n        SEXP s = NA_STRING;\r\n        RStringViewer& r_string_viewer = string_viewer();\r\n        r_string_viewer.SetArray(array);\r\n   ```\n\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -800,41 +864,35 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n       return Representation(alt);\n     }\n \n-    BEGIN_CPP11\n-\n     const auto& chunked_array = GetChunkedArray(alt);\n     SEXP data2 = PROTECT(Rf_allocVector(STRSXP, chunked_array->length()));\n     MARK_NOT_MUTABLE(data2);\n \n-    RStringViewer r_string_viewer;\n+    R_xlen_t i = 0;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.reset_null_was_stripped();\n+    r_string_viewer.set_strip_out_nuls(GetBoolOption(\"arrow.skip_nul\", false));\n+    for (const auto& array : chunked_array->chunks()) {\n+      r_string_viewer.SetArray(array);\n \n-    // r_string_viewer.Convert() might jump so we have to\n-    // wrap it in unwind_protect() to:\n-    // - correctly destruct the C++ objects\n-    // - resume the unwinding\n-    cpp11::unwind_protect([&]() {\n-      R_xlen_t i = 0;\n-      for (const auto& array : chunked_array->chunks()) {\n-        r_string_viewer.SetArray(array);\n-\n-        auto ni = array->length();\n-        for (R_xlen_t j = 0; j < ni; j++, i++) {\n-          SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n-        }\n+      auto ni = array->length();\n+      for (R_xlen_t j = 0; j < ni; j++, i++) {\n+        SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n       }\n+    }\n \n-      if (r_string_viewer.nul_was_stripped()) {\n-        cpp11::warning(\"Stripping '\\\\0' (nul) from character vector\");\n-      }\n-    });\n+    if (r_string_viewer.nul_was_stripped()) {\n+      Rf_warning(\"Stripping '\\\\0' (nul) from character vector\");\n\nReview Comment:\n   Are there any living C++ objects in this scope ?\n\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -777,20 +822,39 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n     std::shared_ptr<Array> array_;\n     const StringArrayType* string_array_;\n     std::string stripped_string_;\n-    const bool strip_out_nuls_;\n+    bool strip_out_nuls_;\n     bool nul_was_stripped_;\n     std::string_view view_;\n   };\n \n-  // Get a single string, as a CHARSXP SEXP from data2.\n-  // Materialize if not done so yet, given that it is\n-  // likely that there will be another call from R if there is a call (e.g. unique()),\n-  // and getting a string from Array is much more costly than from data2.\n+  // Get a single string as a CHARSXP SEXP\n+  // Note that a previous version of this function used BEGIN_CPP11\n+  // and END_CPP11, which stack-allocates 8kb for the error message.\n+  // This is fine for top-level calls, but here\n   static SEXP Elt(SEXP alt, R_xlen_t i) {\n-    if (!Base::IsMaterialized(alt)) {\n-      Materialize(alt);\n+    if (Base::IsMaterialized(alt)) {\n+      return STRING_ELT(Representation(alt), i);\n     }\n-    return STRING_ELT(Representation(alt), i);\n+\n+    auto altrep_data = external_pointer<ArrowAltrepData>(R_altrep_data1(alt));\n+    auto resolve = altrep_data->locate(i);\n+    auto array = altrep_data->chunked_array->chunk(resolve.chunk_index);\n+    auto j = resolve.index_in_chunk;\n+\n+    SEXP s = NA_STRING;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.SetArray(array);\n+    // Note: we don't check GetBoolOption(\"arrow.skip_nul\", false) here\n+    // because it is too expensive to do so. We do set this value whenever\n+    // an altrep string; however, there is a chance that this value could\n+    // be out of date by the time a value in the vector is accessed.\n+    r_string_viewer.reset_null_was_stripped();\n+    s = r_string_viewer.Convert(j);\n+    if (r_string_viewer.nul_was_stripped()) {\n+      Rf_warning(\"Stripping '\\\\0' (nul) from character vector\");\n\nReview Comment:\n   Or maybe `auto altrep_data` can be replaced by something that actually grabs the `ArrowAltrepData*`, e.g. \r\n   \r\n   ```cpp\r\n   ArrowAltrepData* altrep_data = external_pointer<ArrowAltrepData>(R_altrep_data1(alt)).get();\r\n   ```\r\n   \r\n   Then it's a pointer for sure, not a smart pointer that has a destructor\n\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -800,41 +864,35 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n       return Representation(alt);\n     }\n \n-    BEGIN_CPP11\n-\n     const auto& chunked_array = GetChunkedArray(alt);\n     SEXP data2 = PROTECT(Rf_allocVector(STRSXP, chunked_array->length()));\n     MARK_NOT_MUTABLE(data2);\n \n-    RStringViewer r_string_viewer;\n+    R_xlen_t i = 0;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.reset_null_was_stripped();\n+    r_string_viewer.set_strip_out_nuls(GetBoolOption(\"arrow.skip_nul\", false));\n+    for (const auto& array : chunked_array->chunks()) {\n+      r_string_viewer.SetArray(array);\n \n-    // r_string_viewer.Convert() might jump so we have to\n-    // wrap it in unwind_protect() to:\n-    // - correctly destruct the C++ objects\n-    // - resume the unwinding\n-    cpp11::unwind_protect([&]() {\n-      R_xlen_t i = 0;\n-      for (const auto& array : chunked_array->chunks()) {\n-        r_string_viewer.SetArray(array);\n-\n-        auto ni = array->length();\n-        for (R_xlen_t j = 0; j < ni; j++, i++) {\n-          SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n-        }\n+      auto ni = array->length();\n+      for (R_xlen_t j = 0; j < ni; j++, i++) {\n+        SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n\nReview Comment:\n   The `unwind_protect()` here was related to this comment: \"r_string_viewer.Convert() might jump...\" Is this no longer the case ?\n\n\n\n",
                    "created": "2022-10-06T05:32:55.634+0000",
                    "updated": "2022-10-06T05:32:55.634+0000",
                    "started": "2022-10-06T05:32:55.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814230",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/814403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r989165031\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -777,20 +822,39 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n     std::shared_ptr<Array> array_;\n     const StringArrayType* string_array_;\n     std::string stripped_string_;\n-    const bool strip_out_nuls_;\n+    bool strip_out_nuls_;\n     bool nul_was_stripped_;\n     std::string_view view_;\n   };\n \n-  // Get a single string, as a CHARSXP SEXP from data2.\n-  // Materialize if not done so yet, given that it is\n-  // likely that there will be another call from R if there is a call (e.g. unique()),\n-  // and getting a string from Array is much more costly than from data2.\n+  // Get a single string as a CHARSXP SEXP\n+  // Note that a previous version of this function used BEGIN_CPP11\n+  // and END_CPP11, which stack-allocates 8kb for the error message.\n+  // This is fine for top-level calls, but here\n   static SEXP Elt(SEXP alt, R_xlen_t i) {\n-    if (!Base::IsMaterialized(alt)) {\n-      Materialize(alt);\n+    if (Base::IsMaterialized(alt)) {\n+      return STRING_ELT(Representation(alt), i);\n     }\n-    return STRING_ELT(Representation(alt), i);\n+\n+    auto altrep_data = external_pointer<ArrowAltrepData>(R_altrep_data1(alt));\n+    auto resolve = altrep_data->locate(i);\n+    auto array = altrep_data->chunked_array->chunk(resolve.chunk_index);\n+    auto j = resolve.index_in_chunk;\n+\n+    SEXP s = NA_STRING;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.SetArray(array);\n+    // Note: we don't check GetBoolOption(\"arrow.skip_nul\", false) here\n+    // because it is too expensive to do so. We do set this value whenever\n+    // an altrep string; however, there is a chance that this value could\n+    // be out of date by the time a value in the vector is accessed.\n+    r_string_viewer.reset_null_was_stripped();\n+    s = r_string_viewer.Convert(j);\n+    if (r_string_viewer.nul_was_stripped()) {\n+      Rf_warning(\"Stripping '\\\\0' (nul) from character vector\");\n\nReview Comment:\n   I change these lines to `reinterpret_cast<ArrowAltrepData*>(R_ExternalPtrAddr(R_altrep_data1(alt)))`, since I forget exactly what the constructor for `external_pointer()` does.\n\n\n\n",
                    "created": "2022-10-06T15:02:58.075+0000",
                    "updated": "2022-10-06T15:02:58.075+0000",
                    "started": "2022-10-06T15:02:58.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814403",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/814405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r989169036\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -800,41 +864,35 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n       return Representation(alt);\n     }\n \n-    BEGIN_CPP11\n-\n     const auto& chunked_array = GetChunkedArray(alt);\n     SEXP data2 = PROTECT(Rf_allocVector(STRSXP, chunked_array->length()));\n     MARK_NOT_MUTABLE(data2);\n \n-    RStringViewer r_string_viewer;\n+    R_xlen_t i = 0;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.reset_null_was_stripped();\n+    r_string_viewer.set_strip_out_nuls(GetBoolOption(\"arrow.skip_nul\", false));\n+    for (const auto& array : chunked_array->chunks()) {\n+      r_string_viewer.SetArray(array);\n \n-    // r_string_viewer.Convert() might jump so we have to\n-    // wrap it in unwind_protect() to:\n-    // - correctly destruct the C++ objects\n-    // - resume the unwinding\n-    cpp11::unwind_protect([&]() {\n-      R_xlen_t i = 0;\n-      for (const auto& array : chunked_array->chunks()) {\n-        r_string_viewer.SetArray(array);\n-\n-        auto ni = array->length();\n-        for (R_xlen_t j = 0; j < ni; j++, i++) {\n-          SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n-        }\n+      auto ni = array->length();\n+      for (R_xlen_t j = 0; j < ni; j++, i++) {\n+        SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n\nReview Comment:\n   `Convert()` definitely still jumps...the gist of this change is to make the entire frame jump-safe (to my understanding, this means everything is trivially destructible). That doesn't mean I didn't miss something (or that my understanding of this is incorrect!).\n\n\n\n",
                    "created": "2022-10-06T15:06:28.264+0000",
                    "updated": "2022-10-06T15:06:28.264+0000",
                    "started": "2022-10-06T15:06:28.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814405",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/814406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r989172688\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -800,41 +864,35 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n       return Representation(alt);\n     }\n \n-    BEGIN_CPP11\n-\n     const auto& chunked_array = GetChunkedArray(alt);\n     SEXP data2 = PROTECT(Rf_allocVector(STRSXP, chunked_array->length()));\n     MARK_NOT_MUTABLE(data2);\n \n-    RStringViewer r_string_viewer;\n+    R_xlen_t i = 0;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.reset_null_was_stripped();\n+    r_string_viewer.set_strip_out_nuls(GetBoolOption(\"arrow.skip_nul\", false));\n+    for (const auto& array : chunked_array->chunks()) {\n+      r_string_viewer.SetArray(array);\n \n-    // r_string_viewer.Convert() might jump so we have to\n-    // wrap it in unwind_protect() to:\n-    // - correctly destruct the C++ objects\n-    // - resume the unwinding\n-    cpp11::unwind_protect([&]() {\n-      R_xlen_t i = 0;\n-      for (const auto& array : chunked_array->chunks()) {\n-        r_string_viewer.SetArray(array);\n-\n-        auto ni = array->length();\n-        for (R_xlen_t j = 0; j < ni; j++, i++) {\n-          SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n-        }\n+      auto ni = array->length();\n+      for (R_xlen_t j = 0; j < ni; j++, i++) {\n+        SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n       }\n+    }\n \n-      if (r_string_viewer.nul_was_stripped()) {\n-        cpp11::warning(\"Stripping '\\\\0' (nul) from character vector\");\n-      }\n-    });\n+    if (r_string_viewer.nul_was_stripped()) {\n+      Rf_warning(\"Stripping '\\\\0' (nul) from character vector\");\n\nReview Comment:\n   I re-went fixed a few `auto` variables that were resolving to `std::shared_ptr<Array>` to `const auto&`, which I *think* were the last remaining C++ objects with destructors.\n\n\n\n",
                    "created": "2022-10-06T15:09:48.420+0000",
                    "updated": "2022-10-06T15:09:48.420+0000",
                    "started": "2022-10-06T15:09:48.420+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814406",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/814609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r989930529\n\n\n##########\nr/src/altrep.cpp:\n##########\n@@ -800,41 +864,35 @@ struct AltrepVectorString : public AltrepVectorBase<AltrepVectorString<Type>> {\n       return Representation(alt);\n     }\n \n-    BEGIN_CPP11\n-\n     const auto& chunked_array = GetChunkedArray(alt);\n     SEXP data2 = PROTECT(Rf_allocVector(STRSXP, chunked_array->length()));\n     MARK_NOT_MUTABLE(data2);\n \n-    RStringViewer r_string_viewer;\n+    R_xlen_t i = 0;\n+    RStringViewer& r_string_viewer = string_viewer();\n+    r_string_viewer.reset_null_was_stripped();\n+    r_string_viewer.set_strip_out_nuls(GetBoolOption(\"arrow.skip_nul\", false));\n+    for (const auto& array : chunked_array->chunks()) {\n+      r_string_viewer.SetArray(array);\n \n-    // r_string_viewer.Convert() might jump so we have to\n-    // wrap it in unwind_protect() to:\n-    // - correctly destruct the C++ objects\n-    // - resume the unwinding\n-    cpp11::unwind_protect([&]() {\n-      R_xlen_t i = 0;\n-      for (const auto& array : chunked_array->chunks()) {\n-        r_string_viewer.SetArray(array);\n-\n-        auto ni = array->length();\n-        for (R_xlen_t j = 0; j < ni; j++, i++) {\n-          SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n-        }\n+      auto ni = array->length();\n+      for (R_xlen_t j = 0; j < ni; j++, i++) {\n+        SET_STRING_ELT(data2, i, r_string_viewer.Convert(j));\n\nReview Comment:\n   I see. That should be fine then. \n\n\n\n",
                    "created": "2022-10-07T10:16:39.162+0000",
                    "updated": "2022-10-07T10:16:39.162+0000",
                    "started": "2022-10-07T10:16:39.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814609",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/815322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r991510991\n\n\n##########\nr/tests/testthat/test-RecordBatch.R:\n##########\n@@ -642,14 +642,19 @@ test_that(\"Handling string data with embedded nuls\", {\n   batch_with_nul$b <- batch_with_nul$b$cast(utf8())\n \n   withr::with_options(list(arrow.skip_nul = TRUE), {\n-    expect_warning(\n-      expect_equal(\n-        as.data.frame(batch_with_nul)$b,\n-        c(\"person\", \"woman\", \"man\", \"camera\", \"tv\"),\n-        ignore_attr = TRUE\n-      ),\n-      \"Stripping '\\\\0' (nul) from character vector\",\n-      fixed = TRUE\n+    # Because expect_equal() may call identical(x, y) more than once,\n\nReview Comment:\n   \"may\"? Is it not deterministic? Why would it do the work multiple times?\r\n   \r\n   Would it help to change the test, like `expect_true(all(as.data.frame(batch_with_nul)$b == c(\"person\", \"woman\", \"man\", \"camera\", \"tv\")))`?\n\n\n\n##########\nr/tests/testthat/test-altrep.R:\n##########\n@@ -54,6 +80,54 @@ test_that(\"altrep vectors from int32 and dbl arrays with no nulls\", {\n   expect_false(is_arrow_altrep(as.vector(v_dbl$Slice(1))))\n })\n \n+test_that(\"element access methods for int32 ALTREP with no nulls\", {\n+  withr::local_options(list(arrow.use_altrep = TRUE))\n+  original <- 1:1000\n\nReview Comment:\n   Not that it matters much, but does this array need 1000 elements to test the behavior?\n\n\n\n##########\nr/src/array.cpp:\n##########\n@@ -69,7 +69,10 @@ void arrow::r::validate_slice_length(R_xlen_t length, int64_t available) {\n     cpp11::stop(\"Slice 'length' cannot be negative\");\n   }\n   if (length > available) {\n-    cpp11::warning(\"Slice 'length' greater than available length\");\n+    // For an unknown reason, cpp11::warning() crashes here; however, this\n+    // should throw an exception if Rf_warning() jumps, so we need\n+    // cpp11::safe[]().\n+    cpp11::safe[Rf_warning](\"Slice 'length' greater than available length\");\n\nReview Comment:\n   Oh I see, it's not just this warning, there are other warnings we care about.\n\n\n\n##########\nr/src/array.cpp:\n##########\n@@ -69,7 +69,10 @@ void arrow::r::validate_slice_length(R_xlen_t length, int64_t available) {\n     cpp11::stop(\"Slice 'length' cannot be negative\");\n   }\n   if (length > available) {\n-    cpp11::warning(\"Slice 'length' greater than available length\");\n+    // For an unknown reason, cpp11::warning() crashes here; however, this\n+    // should throw an exception if Rf_warning() jumps, so we need\n+    // cpp11::safe[]().\n+    cpp11::safe[Rf_warning](\"Slice 'length' greater than available length\");\n\nReview Comment:\n   If raising a warning could crash, should we just skip the warning?\n\n\n\n",
                    "created": "2022-10-10T17:37:33.886+0000",
                    "updated": "2022-10-10T17:37:33.886+0000",
                    "started": "2022-10-10T17:37:33.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815322",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/815867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r992900054\n\n\n##########\nr/tests/testthat/test-RecordBatch.R:\n##########\n@@ -642,14 +642,19 @@ test_that(\"Handling string data with embedded nuls\", {\n   batch_with_nul$b <- batch_with_nul$b$cast(utf8())\n \n   withr::with_options(list(arrow.skip_nul = TRUE), {\n-    expect_warning(\n-      expect_equal(\n-        as.data.frame(batch_with_nul)$b,\n-        c(\"person\", \"woman\", \"man\", \"camera\", \"tv\"),\n-        ignore_attr = TRUE\n-      ),\n-      \"Stripping '\\\\0' (nul) from character vector\",\n-      fixed = TRUE\n+    # Because expect_equal() may call identical(x, y) more than once,\n\nReview Comment:\n   I think I put 'may' in there to be non-committal since I'm not sure why it does this...it definitely materializes twice and the backtrace is definitely from `identical()` both times \ud83e\udd37 . I'll revisit the test on Monday!\n\n\n\n",
                    "created": "2022-10-12T01:33:15.828+0000",
                    "updated": "2022-10-12T01:33:15.828+0000",
                    "started": "2022-10-12T01:33:15.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815867",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/817776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#discussion_r997414990\n\n\n##########\nr/src/array.cpp:\n##########\n@@ -69,7 +69,10 @@ void arrow::r::validate_slice_length(R_xlen_t length, int64_t available) {\n     cpp11::stop(\"Slice 'length' cannot be negative\");\n   }\n   if (length > available) {\n-    cpp11::warning(\"Slice 'length' greater than available length\");\n+    // For an unknown reason, cpp11::warning() crashes here; however, this\n+    // should throw an exception if Rf_warning() jumps, so we need\n+    // cpp11::safe[]().\n+    cpp11::safe[Rf_warning](\"Slice 'length' greater than available length\");\n\nReview Comment:\n   I created https://github.com/r-lib/cpp11/issues/295 for this...I don't think this is an Arrow issue or a cpp11 issue, but that seemed like the most useful place to document it. In investigating this I also noticed that `cpp11::warning(std::string(\"Slice 'length' greater than available length\"))` is also fine (it's only the `const char*` version that crashes).\r\n   \r\n   I was able to rule out memory protection (in the altrep code)...you can cause the issue without ever creating an ALTREP vector (I tested using a dummy function that just calls `cpp11::warning()`).\n\n\n\n",
                    "created": "2022-10-17T19:06:30.104+0000",
                    "updated": "2022-10-17T19:06:30.104+0000",
                    "started": "2022-10-17T19:06:30.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817776",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/820518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot merged PR #14271:\nURL: https://github.com/apache/arrow/pull/14271\n\n\n",
                    "created": "2022-10-26T14:10:01.084+0000",
                    "updated": "2022-10-26T14:10:01.084+0000",
                    "started": "2022-10-26T14:10:01.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820518",
                    "issueId": "13472952"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/worklog/821515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #14271:\nURL: https://github.com/apache/arrow/pull/14271#issuecomment-1295202848\n\n   Benchmark runs are scheduled for baseline = 53023b3b8634f22f5ec8fd7b7035d98ed54f315e and contender = 21564cf3981a1da0662ccd495320a5127b693a1f. 21564cf3981a1da0662ccd495320a5127b693a1f is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/e95aafef15ed49b9a3c272e96e6d2d76...cc31234292ad44b1a9aa8996195cf5a6/)\n   [Failed :arrow_down:0.0% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/a4caeb72a9b442999ad644cc4287b6fd...db4f7250e2df46c49092c4e1706c342e/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/cdae57d0e81e48d68d7c7622e3f246d0...1046eed4fe3e43c1af547a91331787f7/)\n   [Finished :arrow_down:0.18% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/aabe63f542634dea877f79c7d91e3fa6...0e470d89c86c4998b5605b3cb9749d46/)\n   Buildkite builds:\n   [Finished] [`21564cf3` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1767)\n   [Failed] [`21564cf3` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1788)\n   [Finished] [`21564cf3` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1754)\n   [Finished] [`21564cf3` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1780)\n   [Finished] [`53023b3b` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1766)\n   [Failed] [`53023b3b` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1787)\n   [Finished] [`53023b3b` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1753)\n   [Finished] [`53023b3b` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1779)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-10-28T16:31:54.160+0000",
                    "updated": "2022-10-28T16:31:54.160+0000",
                    "started": "2022-10-28T16:31:54.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821515",
                    "issueId": "13472952"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@76696bd4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@782e607d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d91b9b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@56b717fe[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e3827b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7454192a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24d82a68[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4a3ec1ea[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45b432fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@117dee2e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74130d03[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@481eb3fa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 26 14:10:05 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-26T14:10:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17187/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-07-22T17:01:57.000+0000",
        "updated": "2022-10-28T16:31:54.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-16578 noted that there was a high cost to looping through an ALTREP character vector that we created in the arrow R package. The temporary workaround is to materialize whenever the first element is requested, which is much faster than our initial implementation but is probably not necessary given that other ALTREP character implementations appear to not have this issue:\r\n\r\n(Timings before merging ARROW-16578, which reduces the 5 second operation below to 0.05 seconds).\r\n\r\n{code:R}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n\r\ndf1 <- tibble::tibble(x=as.character(floor(runif(1000000) * 20)))\r\nwrite_parquet(df1,\"/tmp/test.parquet\")\r\ndf2 <- read_parquet(\"/tmp/test.parquet\")\r\nsystem.time(unique(df1$x))\r\n#>    user  system elapsed \r\n#>   0.022   0.001   0.023\r\nsystem.time(unique(df2$x))\r\n#>    user  system elapsed \r\n#>   4.529   0.680   5.226\r\n\r\n# the speed is almost certainly not due to ALTREP itself\r\n# but is probably something to do with our implementation\r\ntf <- tempfile()\r\nreadr::write_csv(df1, tf)\r\ndf3 <- vroom::vroom(tf, delim = \",\", altrep = TRUE)\r\n#> Rows: 1000000 Columns: 1\r\n#> \u2500\u2500 Column specification \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n#> Delimiter: \",\"\r\n#> dbl (1): x\r\n#> \r\n#> \u2139 Use `spec()` to retrieve the full column specification for this data.\r\n#> \u2139 Specify the column types or set `show_col_types = FALSE` to quiet this message.\r\n.Internal(inspect(df3$x))\r\n#> @2d2042048 14 REALSXP g0c0 [REF(65535)] vroom_dbl (len=1000000, materialized=F)\r\nsystem.time(unique(df3$x))\r\n#>    user  system elapsed \r\n#>   0.127   0.001   0.128\r\n.Internal(inspect(df3$x))\r\n#> @2d2042048 14 REALSXP g1c0 [MARK,REF(65535)] vroom_dbl (len=1000000, materialized=F)\r\n{code}\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Improve lazy ALTREP implementation for String",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472952/comment/17624494",
                    "id": "17624494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Issue resolved by pull request 14271\n[https://github.com/apache/arrow/pull/14271]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-10-26T14:10:05.484+0000",
                    "updated": "2022-10-26T14:10:05.484+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z173io:",
        "customfield_12314139": null
    }
}