{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13470556",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556",
    "key": "ARROW-17004",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12644431",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12644431",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13473378",
                    "key": "ARROW-17199",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13473378",
                    "fields": {
                        "summary": "[FlightRPC][C++][Java] Fix example Flight SQL servers",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17004/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/790167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request, #13589:\nURL: https://github.com/apache/arrow/pull/13589\n\n   This extends the arrow-jdbc adapter to also allow taking Arrow data and using it to bind JDBC PreparedStatement parameters, allowing you to \"round trip\" data to a certain extent. This was factored out of arrow-adbc since it's not strictly tied to ADBC. \n\n\n",
                    "created": "2022-07-12T20:43:55.927+0000",
                    "updated": "2022-07-12T20:43:55.927+0000",
                    "started": "2022-07-12T20:43:55.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790167",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/790168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1182484408\n\n   TODOs:\r\n   - [ ] Add documentation\r\n   - [ ] Are we handling time/timestamp types properly when time zones come into play?\r\n   - [ ] Add date support as well\n\n\n",
                    "created": "2022-07-12T20:44:53.956+0000",
                    "updated": "2022-07-12T20:44:53.956+0000",
                    "started": "2022-07-12T20:44:53.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790168",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/790532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1183511707\n\n   CC @toddfarmer @lwhite1 \r\n   \r\n   Not all types are supported here but a core set is. If the approach looks reasonable I can extend coverage to at least Decimal and Binary types.\n\n\n",
                    "created": "2022-07-13T17:50:21.037+0000",
                    "updated": "2022-07-13T17:50:21.037+0000",
                    "started": "2022-07-13T17:50:21.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790532",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/791057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1184674323\n\n   Overall, this looks really nice to me. \r\n   \r\n   One minor nit (not from the current change set): The statement on line 87 \"Currently, it is not possible to define a custom type conversion for a supported or unsupported type.\"  has me scratching my head a bit  Should it just say \"it is not possible to define a custom type conversion\"?  If there's a quick re-phrasing that helps, it might be worth adding.  \r\n   \n\n\n",
                    "created": "2022-07-14T16:56:44.404+0000",
                    "updated": "2022-07-14T16:56:44.404+0000",
                    "started": "2022-07-14T16:56:44.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "791057",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/791110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1184828224\n\n   Thanks for taking a look!\r\n   \r\n   Updated the docs, and implemented binders for binary types and decimals.\n\n\n",
                    "created": "2022-07-14T19:40:12.472+0000",
                    "updated": "2022-07-14T19:40:12.472+0000",
                    "started": "2022-07-14T19:40:12.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "791110",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/792877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1189432182\n\n   @emkornfield @liyafan82 @pitrou any opinions on having this functionality (binding Arrow data -> JDBC prepared statement parameters) here?\n\n\n",
                    "created": "2022-07-19T18:42:08.758+0000",
                    "updated": "2022-07-19T18:42:08.758+0000",
                    "started": "2022-07-19T18:42:08.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792877",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/792904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1189535103\n\n   Hmm, I'm out of my depth here, but I guess it looks useful? The main downside being the one-row-at-a-time mechanics, I suppose.\n\n\n",
                    "created": "2022-07-19T20:46:58.554+0000",
                    "updated": "2022-07-19T20:46:58.554+0000",
                    "started": "2022-07-19T20:46:58.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792904",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1190243917\n\n   Interesting work! Thanks. @lidavidm \r\n   I find an example for `executeUpdate`, does it also support `executeQuery`?\n\n\n",
                    "created": "2022-07-20T12:47:02.648+0000",
                    "updated": "2022-07-20T12:47:02.648+0000",
                    "started": "2022-07-20T12:47:02.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793221",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1190271595\n\n   > Interesting work! Thanks. @lidavidm I find an example for `executeUpdate`, does it also support `executeQuery`?\r\n   \r\n   Yes, or really, the only thing this module does is call `setString`, `setInteger`, etc. for you. It's up to the application to then call `executeQuery`, `addBatch`, etc. for maximum flexibility. For instance in ADBC it's used with `addBatch`/`executeBatch`:\r\n   \r\n   https://github.com/apache/arrow-adbc/blob/2485d7c3da217a7190f86128d769a7d0445755ab/java/driver/jdbc/src/main/java/org/apache/arrow/adbc/driver/jdbc/JdbcStatement.java#L160-L166\n\n\n",
                    "created": "2022-07-20T13:13:53.406+0000",
                    "updated": "2022-07-20T13:13:53.406+0000",
                    "started": "2022-07-20T13:13:53.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793231",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#issuecomment-1191377226\n\n   > > Interesting work! Thanks. @lidavidm I find an example for `executeUpdate`, does it also support `executeQuery`?\r\n   > \r\n   > Yes, or really, the only thing this module does is call `setString`, `setInteger`, etc. for you. It's up to the application to then call `executeQuery`, `addBatch`, etc. for maximum flexibility. For instance in ADBC it's used with `addBatch`/`executeBatch`:\r\n   > \r\n   > https://github.com/apache/arrow-adbc/blob/2485d7c3da217a7190f86128d769a7d0445755ab/java/driver/jdbc/src/main/java/org/apache/arrow/adbc/driver/jdbc/JdbcStatement.java#L160-L166\r\n   \r\n   Cool! I believe this is a super useful feature. I'd like to review it in the following days.\n\n\n",
                    "created": "2022-07-21T11:37:21.824+0000",
                    "updated": "2022-07-21T11:37:21.824+0000",
                    "started": "2022-07-21T11:37:21.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793688",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r926575775\n\n\n##########\ndocs/source/java/jdbc.rst:\n##########\n@@ -84,8 +84,8 @@ inconsistent scale. A RoundingMode can be set to handle these cases:\n      }\n    }\n \n-Currently, it is not possible to define a custom type conversion for a\n-supported or unsupported type.\n+Currently, it is not possible to override the type conversion for a\n+supported type, or define a new conversion for an unsupported type.\n\nReview Comment:\n   Sorry, I think we do support overriding the conversion now. Please see https://github.com/apache/arrow/blob/master/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowConfig.java#L76\n\n\n\n",
                    "created": "2022-07-21T11:43:47.684+0000",
                    "updated": "2022-07-21T11:43:47.684+0000",
                    "started": "2022-07-21T11:43:47.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793694",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r926579537\n\n\n##########\ndocs/source/java/jdbc.rst:\n##########\n@@ -172,3 +172,101 @@ The JDBC to Arrow type mapping can be obtained at runtime from\n .. _setArraySubTypeByColumnIndexMap: https://arrow.apache.org/docs/java/reference/org/apache/arrow/adapter/jdbc/JdbcToArrowConfigBuilder.html#setArraySubTypeByColumnIndexMap-java.util.Map-\n .. _setArraySubTypeByColumnNameMap: https://arrow.apache.org/docs/java/reference/org/apache/arrow/adapter/jdbc/JdbcToArrowConfigBuilder.html#setArraySubTypeByColumnNameMap-java.util.Map-\n .. _ARROW-17006: https://issues.apache.org/jira/browse/ARROW-17006\n+\n+VectorSchemaRoot to PreparedStatement Parameter Conversion\n+==========================================================\n+\n+The adapter can bind rows of Arrow data from a VectorSchemaRoot to\n+parameters of a JDBC PreparedStatement.  This can be accessed via the\n+JdbcParameterBinder class.  Each call to next() will bind parameters\n+from the next row of data, and then the application can execute the\n+statement, call addBatch(), etc. as desired.  Null values will lead to\n+a setNull call with an appropriate JDBC type code (listed below).\n+\n+.. code-block:: java\n+\n+   final JdbcParameterBinder binder =\n+       JdbcParameterBinder.builder(statement, root).bindAll().build();\n+   while (binder.next()) {\n+       statement.executeUpdate();\n+   }\n+   // Use a VectorLoader to update the root\n+   binder.reset();\n+   while (binder.next()) {\n+       statement.executeUpdate();\n+   }\n+\n+The mapping of vectors to parameters, the JDBC type code used by the\n+converters, and the type conversions themselves can all be customized:\n+\n+.. code-block:: java\n+\n+   final JdbcParameterBinder binder =\n+       JdbcParameterBinder.builder(statement, root)\n+           .bind(/*parameterIndex*/2, /*columnIndex*/0)\n+           .bind(/*parameterIndex*/1, customColumnBinderInstance)\n+           .build();\n+\n+Type Mapping\n+------------\n+\n+The Arrow to JDBC type mapping can be obtained at runtime via\n+a method on ColumnBinder.\n+\n++----------------------------+----------------------------+-------+\n+| Arrow Type                 | JDBC Type                  | Notes |\n++============================+============================+=======+\n+| Binary                     | VARBINARY (setBytes)       |       |\n++----------------------------+----------------------------+-------+\n+| Bool                       | BOOLEAN (setBoolean)       |       |\n++----------------------------+----------------------------+-------+\n+| Date32                     | DATE (setDate)             |       |\n++----------------------------+----------------------------+-------+\n+| Date64                     | DATE (setDate)             |       |\n++----------------------------+----------------------------+-------+\n+| Decimal128                 | DECIMAL (setBigDecimal)    |       |\n++----------------------------+----------------------------+-------+\n+| Decimal256                 | DECIMAL (setBigDecimal)    |       |\n++----------------------------+----------------------------+-------+\n+| FixedSizeBinary            | BINARY (setBytes)          |       |\n++----------------------------+----------------------------+-------+\n+| Float32                    | REAL (setFloat)            |       |\n++----------------------------+----------------------------+-------+\n+| Int8                       | TINYINT (setByte)          |       |\n++----------------------------+----------------------------+-------+\n+| Int16                      | SMALLINT (setShort)        |       |\n++----------------------------+----------------------------+-------+\n+| Int32                      | INTEGER (setInt)           |       |\n++----------------------------+----------------------------+-------+\n+| Int64                      | BIGINT (setLong)           |       |\n++----------------------------+----------------------------+-------+\n+| LargeBinary                | LONGVARBINARY (setBytes)   |       |\n++----------------------------+----------------------------+-------+\n+| LargeUtf8                  | LONGVARCHAR (setString)    | \\(1)  |\n++----------------------------+----------------------------+-------+\n+| Time[s]                    | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[ms]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[us]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[ns]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Timestamp[s]               | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[ms]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[us]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[ns]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Utf8                       | VARCHAR (setString)        |       |\n++----------------------------+----------------------------+-------+\n+\n+* \\(1) Strings longer than Integer.MAX_VALUE bytes (the maximum length\n+  of a Java ``byte[]``) will cause a runtime exception.\n+* \\(2) If the timestamp has a timezone, the JDBC type defaults to\n+  TIMESTAMP_WITH_TIMEZONE.  If the timestamp has no timezone,\n\nReview Comment:\n   what would happen when a timezone is absent, the program would thrown an exception?\n\n\n\n",
                    "created": "2022-07-21T11:48:38.018+0000",
                    "updated": "2022-07-21T11:48:38.018+0000",
                    "started": "2022-07-21T11:48:38.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793696",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r926583959\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcParameterBinder.java:\n##########\n@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.arrow.adapter.jdbc.binder.ColumnBinder;\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+/**\n+ * A binder binds JDBC prepared statement parameters to rows of Arrow data from a VectorSchemaRoot.\n+ */\n+public class JdbcParameterBinder {\n+  private final PreparedStatement statement;\n+  private final VectorSchemaRoot root;\n+  private final ColumnBinder[] binders;\n+  private final int[] parameterIndices;\n+  private int nextRowIndex;\n+\n+  JdbcParameterBinder(\n+      final PreparedStatement statement,\n+      final VectorSchemaRoot root,\n+      final ColumnBinder[] binders,\n+      int[] parameterIndices) {\n+    this.statement = statement;\n+    this.root = root;\n+    this.binders = binders;\n+    this.parameterIndices = parameterIndices;\n+    this.nextRowIndex = 0;\n+  }\n+\n+  /**\n+   * Initialize a binder with a builder.\n+   *\n+   * @param statement The statement to bind to. The binder does not maintain ownership of the statement.\n+   * @param root The root to pull data from. The binder does not maintain ownership of the root.\n\nReview Comment:\n   \"root\" -> \"vector schema root\" or \"record batch\"?\n\n\n\n",
                    "created": "2022-07-21T11:54:13.464+0000",
                    "updated": "2022-07-21T11:54:13.464+0000",
                    "started": "2022-07-21T11:54:13.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793698",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r926592543\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ColumnBinder.java:\n##########\n@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.apache.arrow.vector.FieldVector;\n+\n+/**\n+ * A helper to bind values from a wrapped Arrow vector to a JDBC PreparedStatement.\n+ */\n+public interface ColumnBinder {\n+  /**\n+   * Bind the given row to the given parameter.\n+   *\n+   * @param statement The statement to bind to.\n+   * @param parameterIndex The parameter to bind to (1-indexed)\n+   * @param rowIndex The row to bind values from (0-indexed)\n+   * @throws SQLException if an error occurs\n+   */\n+  void bind(PreparedStatement statement, int parameterIndex, int rowIndex) throws SQLException;\n+\n+  /**\n+   * Get the JDBC type code used by this binder.\n+   *\n+   * @return A type code from {@link java.sql.Types}.\n+   */\n+  int getJdbcType();\n+\n+  /**\n+   * Get the vector used by this binder.\n+   */\n+  FieldVector getVector();\n+\n+  /**\n+   * Create a column binder for a vector (handling nullability).\n+   */\n+  static ColumnBinder forVector(FieldVector vector) {\n+    final ColumnBinder binder = vector.getField().getType().accept(new ColumnBinderArrowTypeVisitor(vector));\n+    if (vector.getField().isNullable()) {\n+      return new NullableColumnBinder(binder);\n+    }\n+    return binder;\n+  }\n+\n+  /**\n+   * Create a column binder for a vector, overriding the JDBC type code used for null values.\n+   */\n+  static ColumnBinder forVector(FieldVector vector, int jdbcType) {\n+    final ColumnBinder binder = vector.getField().getType().accept(new ColumnBinderArrowTypeVisitor(vector, jdbcType));\n+    if (vector.getField().isNullable()) {\n+      return new NullableColumnBinder(binder);\n+    }\n+    return binder;\n+  }\n+}\n\nReview Comment:\n   can we combine the two methods into one? (by using null as jdbcType if a value is not specified)\n\n\n\n",
                    "created": "2022-07-21T12:04:39.321+0000",
                    "updated": "2022-07-21T12:04:39.321+0000",
                    "started": "2022-07-21T12:04:39.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793705",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r926620297\n\n\n##########\ndocs/source/java/jdbc.rst:\n##########\n@@ -84,8 +84,8 @@ inconsistent scale. A RoundingMode can be set to handle these cases:\n      }\n    }\n \n-Currently, it is not possible to define a custom type conversion for a\n-supported or unsupported type.\n+Currently, it is not possible to override the type conversion for a\n+supported type, or define a new conversion for an unsupported type.\n\nReview Comment:\n   What I mean is that you can't implement a custom Consumer and have it be used, all you can do is change what type is assumed by the existing converters. But I'll clarify this\n\n\n\n",
                    "created": "2022-07-21T12:34:47.172+0000",
                    "updated": "2022-07-21T12:34:47.172+0000",
                    "started": "2022-07-21T12:34:47.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793712",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/793713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r926620549\n\n\n##########\ndocs/source/java/jdbc.rst:\n##########\n@@ -172,3 +172,101 @@ The JDBC to Arrow type mapping can be obtained at runtime from\n .. _setArraySubTypeByColumnIndexMap: https://arrow.apache.org/docs/java/reference/org/apache/arrow/adapter/jdbc/JdbcToArrowConfigBuilder.html#setArraySubTypeByColumnIndexMap-java.util.Map-\n .. _setArraySubTypeByColumnNameMap: https://arrow.apache.org/docs/java/reference/org/apache/arrow/adapter/jdbc/JdbcToArrowConfigBuilder.html#setArraySubTypeByColumnNameMap-java.util.Map-\n .. _ARROW-17006: https://issues.apache.org/jira/browse/ARROW-17006\n+\n+VectorSchemaRoot to PreparedStatement Parameter Conversion\n+==========================================================\n+\n+The adapter can bind rows of Arrow data from a VectorSchemaRoot to\n+parameters of a JDBC PreparedStatement.  This can be accessed via the\n+JdbcParameterBinder class.  Each call to next() will bind parameters\n+from the next row of data, and then the application can execute the\n+statement, call addBatch(), etc. as desired.  Null values will lead to\n+a setNull call with an appropriate JDBC type code (listed below).\n+\n+.. code-block:: java\n+\n+   final JdbcParameterBinder binder =\n+       JdbcParameterBinder.builder(statement, root).bindAll().build();\n+   while (binder.next()) {\n+       statement.executeUpdate();\n+   }\n+   // Use a VectorLoader to update the root\n+   binder.reset();\n+   while (binder.next()) {\n+       statement.executeUpdate();\n+   }\n+\n+The mapping of vectors to parameters, the JDBC type code used by the\n+converters, and the type conversions themselves can all be customized:\n+\n+.. code-block:: java\n+\n+   final JdbcParameterBinder binder =\n+       JdbcParameterBinder.builder(statement, root)\n+           .bind(/*parameterIndex*/2, /*columnIndex*/0)\n+           .bind(/*parameterIndex*/1, customColumnBinderInstance)\n+           .build();\n+\n+Type Mapping\n+------------\n+\n+The Arrow to JDBC type mapping can be obtained at runtime via\n+a method on ColumnBinder.\n+\n++----------------------------+----------------------------+-------+\n+| Arrow Type                 | JDBC Type                  | Notes |\n++============================+============================+=======+\n+| Binary                     | VARBINARY (setBytes)       |       |\n++----------------------------+----------------------------+-------+\n+| Bool                       | BOOLEAN (setBoolean)       |       |\n++----------------------------+----------------------------+-------+\n+| Date32                     | DATE (setDate)             |       |\n++----------------------------+----------------------------+-------+\n+| Date64                     | DATE (setDate)             |       |\n++----------------------------+----------------------------+-------+\n+| Decimal128                 | DECIMAL (setBigDecimal)    |       |\n++----------------------------+----------------------------+-------+\n+| Decimal256                 | DECIMAL (setBigDecimal)    |       |\n++----------------------------+----------------------------+-------+\n+| FixedSizeBinary            | BINARY (setBytes)          |       |\n++----------------------------+----------------------------+-------+\n+| Float32                    | REAL (setFloat)            |       |\n++----------------------------+----------------------------+-------+\n+| Int8                       | TINYINT (setByte)          |       |\n++----------------------------+----------------------------+-------+\n+| Int16                      | SMALLINT (setShort)        |       |\n++----------------------------+----------------------------+-------+\n+| Int32                      | INTEGER (setInt)           |       |\n++----------------------------+----------------------------+-------+\n+| Int64                      | BIGINT (setLong)           |       |\n++----------------------------+----------------------------+-------+\n+| LargeBinary                | LONGVARBINARY (setBytes)   |       |\n++----------------------------+----------------------------+-------+\n+| LargeUtf8                  | LONGVARCHAR (setString)    | \\(1)  |\n++----------------------------+----------------------------+-------+\n+| Time[s]                    | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[ms]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[us]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[ns]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Timestamp[s]               | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[ms]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[us]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[ns]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Utf8                       | VARCHAR (setString)        |       |\n++----------------------------+----------------------------+-------+\n+\n+* \\(1) Strings longer than Integer.MAX_VALUE bytes (the maximum length\n+  of a Java ``byte[]``) will cause a runtime exception.\n+* \\(2) If the timestamp has a timezone, the JDBC type defaults to\n+  TIMESTAMP_WITH_TIMEZONE.  If the timestamp has no timezone,\n\nReview Comment:\n   It'll just call `setTimestamp(int, Timestamp)` instead of `setTimestamp(int, Timestamp, Calendar)`, I'll update the doc\n\n\n\n",
                    "created": "2022-07-21T12:35:07.185+0000",
                    "updated": "2022-07-21T12:35:07.185+0000",
                    "started": "2022-07-21T12:35:07.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793713",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/794153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r927493603\n\n\n##########\ndocs/source/java/jdbc.rst:\n##########\n@@ -84,8 +84,8 @@ inconsistent scale. A RoundingMode can be set to handle these cases:\n      }\n    }\n \n-Currently, it is not possible to define a custom type conversion for a\n-supported or unsupported type.\n+Currently, it is not possible to override the type conversion for a\n+supported type, or define a new conversion for an unsupported type.\n\nReview Comment:\n   Thanks.\n\n\n\n##########\ndocs/source/java/jdbc.rst:\n##########\n@@ -172,3 +172,101 @@ The JDBC to Arrow type mapping can be obtained at runtime from\n .. _setArraySubTypeByColumnIndexMap: https://arrow.apache.org/docs/java/reference/org/apache/arrow/adapter/jdbc/JdbcToArrowConfigBuilder.html#setArraySubTypeByColumnIndexMap-java.util.Map-\n .. _setArraySubTypeByColumnNameMap: https://arrow.apache.org/docs/java/reference/org/apache/arrow/adapter/jdbc/JdbcToArrowConfigBuilder.html#setArraySubTypeByColumnNameMap-java.util.Map-\n .. _ARROW-17006: https://issues.apache.org/jira/browse/ARROW-17006\n+\n+VectorSchemaRoot to PreparedStatement Parameter Conversion\n+==========================================================\n+\n+The adapter can bind rows of Arrow data from a VectorSchemaRoot to\n+parameters of a JDBC PreparedStatement.  This can be accessed via the\n+JdbcParameterBinder class.  Each call to next() will bind parameters\n+from the next row of data, and then the application can execute the\n+statement, call addBatch(), etc. as desired.  Null values will lead to\n+a setNull call with an appropriate JDBC type code (listed below).\n+\n+.. code-block:: java\n+\n+   final JdbcParameterBinder binder =\n+       JdbcParameterBinder.builder(statement, root).bindAll().build();\n+   while (binder.next()) {\n+       statement.executeUpdate();\n+   }\n+   // Use a VectorLoader to update the root\n+   binder.reset();\n+   while (binder.next()) {\n+       statement.executeUpdate();\n+   }\n+\n+The mapping of vectors to parameters, the JDBC type code used by the\n+converters, and the type conversions themselves can all be customized:\n+\n+.. code-block:: java\n+\n+   final JdbcParameterBinder binder =\n+       JdbcParameterBinder.builder(statement, root)\n+           .bind(/*parameterIndex*/2, /*columnIndex*/0)\n+           .bind(/*parameterIndex*/1, customColumnBinderInstance)\n+           .build();\n+\n+Type Mapping\n+------------\n+\n+The Arrow to JDBC type mapping can be obtained at runtime via\n+a method on ColumnBinder.\n+\n++----------------------------+----------------------------+-------+\n+| Arrow Type                 | JDBC Type                  | Notes |\n++============================+============================+=======+\n+| Binary                     | VARBINARY (setBytes)       |       |\n++----------------------------+----------------------------+-------+\n+| Bool                       | BOOLEAN (setBoolean)       |       |\n++----------------------------+----------------------------+-------+\n+| Date32                     | DATE (setDate)             |       |\n++----------------------------+----------------------------+-------+\n+| Date64                     | DATE (setDate)             |       |\n++----------------------------+----------------------------+-------+\n+| Decimal128                 | DECIMAL (setBigDecimal)    |       |\n++----------------------------+----------------------------+-------+\n+| Decimal256                 | DECIMAL (setBigDecimal)    |       |\n++----------------------------+----------------------------+-------+\n+| FixedSizeBinary            | BINARY (setBytes)          |       |\n++----------------------------+----------------------------+-------+\n+| Float32                    | REAL (setFloat)            |       |\n++----------------------------+----------------------------+-------+\n+| Int8                       | TINYINT (setByte)          |       |\n++----------------------------+----------------------------+-------+\n+| Int16                      | SMALLINT (setShort)        |       |\n++----------------------------+----------------------------+-------+\n+| Int32                      | INTEGER (setInt)           |       |\n++----------------------------+----------------------------+-------+\n+| Int64                      | BIGINT (setLong)           |       |\n++----------------------------+----------------------------+-------+\n+| LargeBinary                | LONGVARBINARY (setBytes)   |       |\n++----------------------------+----------------------------+-------+\n+| LargeUtf8                  | LONGVARCHAR (setString)    | \\(1)  |\n++----------------------------+----------------------------+-------+\n+| Time[s]                    | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[ms]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[us]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Time[ns]                   | TIME (setTime)             |       |\n++----------------------------+----------------------------+-------+\n+| Timestamp[s]               | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[ms]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[us]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Timestamp[ns]              | TIMESTAMP (setTimestamp)   | \\(2)  |\n++----------------------------+----------------------------+-------+\n+| Utf8                       | VARCHAR (setString)        |       |\n++----------------------------+----------------------------+-------+\n+\n+* \\(1) Strings longer than Integer.MAX_VALUE bytes (the maximum length\n+  of a Java ``byte[]``) will cause a runtime exception.\n+* \\(2) If the timestamp has a timezone, the JDBC type defaults to\n+  TIMESTAMP_WITH_TIMEZONE.  If the timestamp has no timezone,\n\nReview Comment:\n   Thanks for the clarification.\n\n\n\n",
                    "created": "2022-07-22T09:55:27.243+0000",
                    "updated": "2022-07-22T09:55:27.243+0000",
                    "started": "2022-07-22T09:55:27.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794153",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/794155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r927494803\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/BaseColumnBinder.java:\n##########\n@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import org.apache.arrow.vector.FieldVector;\n+\n+/**\n+ * Base class for ColumnBinder implementations.\n+ * @param <V> The concrete FieldVector subtype.\n+ */\n+public abstract class BaseColumnBinder<V extends FieldVector> implements ColumnBinder {\n+  protected V vector;\n+  protected int jdbcType;\n\nReview Comment:\n   can we declare the fields as `final`?\n\n\n\n",
                    "created": "2022-07-22T09:56:57.382+0000",
                    "updated": "2022-07-22T09:56:57.382+0000",
                    "started": "2022-07-22T09:56:57.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794155",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/794156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r927495679\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/BigIntBinder.java:\n##########\n@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+\n+import org.apache.arrow.vector.BigIntVector;\n+\n+/** A column binder for 8-bit integers. */\n+public class BigIntBinder extends BaseColumnBinder<BigIntVector> {\n+  public BigIntBinder(BigIntVector vector) {\n+    this(vector, Types.BIGINT);\n+  }\n+\n+  public BigIntBinder(BigIntVector vector, int jdbcType) {\n+    super(vector, jdbcType);\n\nReview Comment:\n   Is a type other than `Types.BIGINT` allowed here?\n\n\n\n",
                    "created": "2022-07-22T09:57:57.440+0000",
                    "updated": "2022-07-22T09:57:57.440+0000",
                    "started": "2022-07-22T09:57:57.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794156",
                    "issueId": "13470556"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/worklog/794158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on code in PR #13589:\nURL: https://github.com/apache/arrow/pull/13589#discussion_r927500029\n\n\n##########\njava/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/binder/ColumnBinderArrowTypeVisitor.java:\n##########\n@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.adapter.jdbc.binder;\n+\n+import java.sql.Types;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.BitVector;\n+import org.apache.arrow.vector.DateDayVector;\n+import org.apache.arrow.vector.DateMilliVector;\n+import org.apache.arrow.vector.Decimal256Vector;\n+import org.apache.arrow.vector.DecimalVector;\n+import org.apache.arrow.vector.FieldVector;\n+import org.apache.arrow.vector.FixedSizeBinaryVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.Float8Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.LargeVarBinaryVector;\n+import org.apache.arrow.vector.LargeVarCharVector;\n+import org.apache.arrow.vector.SmallIntVector;\n+import org.apache.arrow.vector.TimeMicroVector;\n+import org.apache.arrow.vector.TimeMilliVector;\n+import org.apache.arrow.vector.TimeNanoVector;\n+import org.apache.arrow.vector.TimeSecVector;\n+import org.apache.arrow.vector.TimeStampVector;\n+import org.apache.arrow.vector.TinyIntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+\n+/**\n+ * Visitor to create the base ColumnBinder for a vector.\n+ * <p>\n+ * To handle null values, wrap the returned binder in a {@link NullableColumnBinder}.\n+ */\n+public class ColumnBinderArrowTypeVisitor implements ArrowType.ArrowTypeVisitor<ColumnBinder> {\n+  private final FieldVector vector;\n+  private final Integer jdbcType;\n+\n+  /**\n+   * Create a binder using a custom JDBC type code.\n+   *\n+   * @param vector The vector that the binder will wrap.\n+   * @param jdbcType The JDBC type code (or null to use the default).\n+   */\n+  public ColumnBinderArrowTypeVisitor(FieldVector vector, Integer jdbcType) {\n+    this.vector = vector;\n+    this.jdbcType = jdbcType;\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.Null type) {\n+    throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.Struct type) {\n+    throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.List type) {\n+    throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.LargeList type) {\n+    throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.FixedSizeList type) {\n+    throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.Union type) {\n+    throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.Map type) {\n+    throw new UnsupportedOperationException(\"No column binder implemented for type \" + type);\n+  }\n+\n+  @Override\n+  public ColumnBinder visit(ArrowType.Int type) {\n+    switch (type.getBitWidth()) {\n+      case 8:\n+        if (type.getIsSigned()) {\n+          return jdbcType == null ? new TinyIntBinder((TinyIntVector) vector) :\n+              new TinyIntBinder((TinyIntVector) vector, jdbcType);\n+        } else {\n+          throw new UnsupportedOperationException(\n\nReview Comment:\n   Maybe we can extract this statement for all type widths, at the beginning of this method?\n\n\n\n",
                    "created": "2022-07-22T10:03:02.832+0000",
                    "updated": "2022-07-22T10:03:02.832+0000",
                    "started": "2022-07-22T10:03:02.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794158",
                    "issueId": "13470556"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3731f0aa[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1085676b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@982fe8c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@32877ee8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29f3439c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6fdef9d1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71b61c38[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@784f5cd8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b130fee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@539b672c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@120df6bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1026c1be[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 26 16:59:50 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-26T16:59:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17004/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-07-07T14:57:32.000+0000",
        "updated": "2022-07-26T19:11:46.000+0000",
        "timeoriginalestimate": null,
        "description": "arrow-jdbc can turn JDBC ResultSets into Arrow VectorSchemaRoots. However, it would also be useful to have the opposite: bind values from a VectorSchemaRoot to a PreparedStatement for inserting/updating data.\r\n\r\nThis is necessary for the ADBC project but isn't ADBC specific, so it could be added to arrow-jdbc. We should also document the type mapping it uses and how to customize the mapping.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Implement Arrow->JDBC prepared statement parameters for arrow-jdbc",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470556/comment/17571539",
                    "id": "17571539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13589\n[https://github.com/apache/arrow/pull/13589]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-07-26T16:59:50.445+0000",
                    "updated": "2022-07-26T16:59:50.445+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z16ork:",
        "customfield_12314139": null
    }
}