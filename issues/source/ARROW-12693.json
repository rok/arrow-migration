{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13377315",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315",
    "key": "ARROW-12693",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
            "name": "boshek",
            "key": "boshek",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Sam Albers",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
            "name": "boshek",
            "key": "boshek",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Sam Albers",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
            "name": "boshek",
            "key": "boshek",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Sam Albers",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12693/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/792368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek opened a new pull request, #13641:\nURL: https://github.com/apache/arrow/pull/13641\n\n   This implements are pretty thin version of `unique` and some tests:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(dplyr, warn.conflicts = FALSE)\r\n   \r\n   ir_ds <- arrow_table(iris) %>%\r\n     select(Species)\r\n   unique(ir_ds)\r\n   #> # A tibble: 3 \u00d7 1\r\n   #>   Species   \r\n   #>   <fct>     \r\n   #> 1 setosa    \r\n   #> 2 versicolor\r\n   #> 3 virginica\r\n   ```\n\n\n",
                    "created": "2022-07-18T22:06:53.354+0000",
                    "updated": "2022-07-18T22:06:53.354+0000",
                    "started": "2022-07-18T22:06:53.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792368",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/792369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#issuecomment-1188370012\n\n   https://issues.apache.org/jira/browse/ARROW-12693\n\n\n",
                    "created": "2022-07-18T22:07:14.257+0000",
                    "updated": "2022-07-18T22:07:14.257+0000",
                    "started": "2022-07-18T22:07:14.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792369",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/792370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#issuecomment-1188370032\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-07-18T22:07:15.539+0000",
                    "updated": "2022-07-18T22:07:15.539+0000",
                    "started": "2022-07-18T22:07:15.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792370",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r927933364\n\n\n##########\nr/tests/testthat/test-dataset.R:\n##########\n@@ -713,6 +713,26 @@ test_that(\"head/tail\", {\n   expect_error(tail(ds, -1)) # Not yet implemented\n })\n \n+\n+test_that(\"unique returns data.frames\", {\n+  ds <- open_dataset(dataset_dir)\n+  in_r_mem <- rbind(df1, df2)\n+\n+  expect_s3_class(unique(ds), \"data.frame\")\n+  ## order not set by distinct so some sorting required\n+  expect_equal(sort(unique(ds)$int), sort(unique(in_r_mem)$int))\n+\n+  ## on a arrow_dplyr_query\n\nReview Comment:\n   ```suggestion\r\n     # on a arrow_dplyr_query\r\n   ```\n\n\n\n##########\nr/tests/testthat/test-dataset.R:\n##########\n@@ -713,6 +713,26 @@ test_that(\"head/tail\", {\n   expect_error(tail(ds, -1)) # Not yet implemented\n })\n \n+\n+test_that(\"unique returns data.frames\", {\n+  ds <- open_dataset(dataset_dir)\n+  in_r_mem <- rbind(df1, df2)\n+\n+  expect_s3_class(unique(ds), \"data.frame\")\n+  ## order not set by distinct so some sorting required\n\nReview Comment:\n   ```suggestion\r\n     # order not set by distinct so some sorting required\r\n   ```\n\n\n\n##########\nr/tests/testthat/test-dataset.R:\n##########\n@@ -713,6 +713,26 @@ test_that(\"head/tail\", {\n   expect_error(tail(ds, -1)) # Not yet implemented\n })\n \n+\n+test_that(\"unique returns data.frames\", {\n+  ds <- open_dataset(dataset_dir)\n+  in_r_mem <- rbind(df1, df2)\n+\n+  expect_s3_class(unique(ds), \"data.frame\")\n+  ## order not set by distinct so some sorting required\n+  expect_equal(sort(unique(ds)$int), sort(unique(in_r_mem)$int))\n+\n+  ## on a arrow_dplyr_query\n+  adq_eg <- ds %>%\n+    select(fct) %>%\n+    unique()\n+  expect_s3_class(adq_eg, \"data.frame\")\n+\n+  expect_equal(unique(arrow_table(in_r_mem)), unique(in_r_mem))\n+  expect_equal(unique(as_record_batch_reader(in_r_mem)), unique(in_r_mem))\n+})\n\nReview Comment:\n   I would also expect a test for the errors (e.g., `expect_snapshot_error(unique(..., incomparables = TRUE))`)\n\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Is there a reason why we have to `collect()` here? I would have assumed that I would need an explicit collect but I don't know if there's a precedent (does dbplyr do this?).\n\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n\nReview Comment:\n   ```suggestion\r\n     if (isTRUE(incomparables)) {\r\n   ```\r\n   \r\n   (because the condition must evaluate to TRUE or FALSE or the user gets a confusing error)\n\n\n\n",
                    "created": "2022-07-22T19:33:31.614+0000",
                    "updated": "2022-07-22T19:33:31.614+0000",
                    "started": "2022-07-22T19:33:31.613+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794361",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r927973046\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   It comes [this](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568169&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17568169) here. I think it is a bit of a grey area. My thinking was that base don't fall into the lazy dbplyr paradigm but then I remember `head`. dbplyr does not have `unique` so I don't think there is a precedent:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(dplyr, warn.conflicts = FALSE)\r\n   \r\n   arrow_iris <- arrow_table(iris)\r\n   duckdb_iris <- to_duckdb(arrow_iris)\r\n   \r\n   ## head\r\n   head(arrow_iris)\r\n   #> Table\r\n   #> 6 rows x 5 columns\r\n   #> $Sepal.Length <double>\r\n   #> $Sepal.Width <double>\r\n   #> $Petal.Length <double>\r\n   #> $Petal.Width <double>\r\n   #> $Species <dictionary<values=string, indices=int8>>\r\n   #> \r\n   #> See $metadata for additional Schema metadata\r\n   head(duckdb_iris)\r\n   #> # Source:   SQL [6 x 5]\r\n   #> # Database: DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r\n   #>          <dbl>       <dbl>        <dbl>       <dbl> <chr>  \r\n   #> 1          5.1         3.5          1.4         0.2 setosa \r\n   #> 2          4.9         3            1.4         0.2 setosa \r\n   #> 3          4.7         3.2          1.3         0.2 setosa \r\n   #> 4          4.6         3.1          1.5         0.2 setosa \r\n   #> 5          5           3.6          1.4         0.2 setosa \r\n   #> 6          5.4         3.9          1.7         0.4 setosa\r\n   \r\n   ## distinct\r\n   distinct(arrow_iris)\r\n   #> Table (query)\r\n   #> Sepal.Length: double\r\n   #> Sepal.Width: double\r\n   #> Petal.Length: double\r\n   #> Petal.Width: double\r\n   #> Species: dictionary<values=string, indices=int8>\r\n   #> \r\n   #> See $.data for the source Arrow object\r\n   distinct(duckdb_iris)\r\n   #> # Source:   SQL [?? x 5]\r\n   #> # Database: DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r\n   #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>  \r\n   #>  1          5.1         3.5          1.4         0.2 setosa \r\n   #>  2          4.9         3            1.4         0.2 setosa \r\n   #>  3          4.7         3.2          1.3         0.2 setosa \r\n   #>  4          4.6         3.1          1.5         0.2 setosa \r\n   #>  5          5           3.6          1.4         0.2 setosa \r\n   #>  6          5.4         3.9          1.7         0.4 setosa \r\n   #>  7          4.6         3.4          1.4         0.3 setosa \r\n   #>  8          5           3.4          1.5         0.2 setosa \r\n   #>  9          4.4         2.9          1.4         0.2 setosa \r\n   #> 10          4.9         3.1          1.5         0.1 setosa \r\n   #> # \u2026 with more rows\r\n   #> # \u2139 Use `print(n = ...)` to see more rows\r\n   \r\n   ##\r\n   unique(duckdb_iris)\r\n   #> [[1]]\r\n   #> src:  DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #> tbls:\r\n   #> \r\n   #> [[2]]\r\n   #> From: arrow_001\r\n   #> <Table: arrow_001>\r\n   ```\r\n   \r\n   I don't think users will have an expectation here so we are probably free to decide. \n\n\n\n",
                    "created": "2022-07-22T20:36:49.630+0000",
                    "updated": "2022-07-22T20:36:49.630+0000",
                    "started": "2022-07-22T20:36:49.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794369",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r927982110\n\n\n##########\nr/tests/testthat/test-dataset.R:\n##########\n@@ -713,6 +713,26 @@ test_that(\"head/tail\", {\n   expect_error(tail(ds, -1)) # Not yet implemented\n })\n \n+\n+test_that(\"unique returns data.frames\", {\n+  ds <- open_dataset(dataset_dir)\n+  in_r_mem <- rbind(df1, df2)\n+\n+  expect_s3_class(unique(ds), \"data.frame\")\n+  ## order not set by distinct so some sorting required\n+  expect_equal(sort(unique(ds)$int), sort(unique(in_r_mem)$int))\n+\n+  ## on a arrow_dplyr_query\n+  adq_eg <- ds %>%\n+    select(fct) %>%\n+    unique()\n+  expect_s3_class(adq_eg, \"data.frame\")\n+\n+  expect_equal(unique(arrow_table(in_r_mem)), unique(in_r_mem))\n+  expect_equal(unique(as_record_batch_reader(in_r_mem)), unique(in_r_mem))\n+})\n\nReview Comment:\n   great thought\n\n\n\n",
                    "created": "2022-07-22T20:54:16.396+0000",
                    "updated": "2022-07-22T20:54:16.396+0000",
                    "started": "2022-07-22T20:54:16.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794373",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eitsupi commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928066536\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Since dtplyr does not do collect, perhaps it would be more consistent to not do collect here as well.\r\n   https://github.com/tidyverse/dtplyr/blob/2181de14668fdad46f5068b56bd34e440b3b6749/R/step-call.R#L208-L214\n\n\n\n",
                    "created": "2022-07-23T02:22:07.953+0000",
                    "updated": "2022-07-23T02:22:07.953+0000",
                    "started": "2022-07-23T02:22:07.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794439",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eitsupi commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928066536\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Since dtplyr does not do collect, perhaps it would be more consistent to not do collect here as well.\r\n   https://github.com/tidyverse/dtplyr/blob/2181de14668fdad46f5068b56bd34e440b3b6749/R/step-call.R#L208-L214\r\n   \r\n   ``` r\r\n   mtcars |> dtplyr::lazy_dt() |> unique()\r\n   #> Source: local data table [32 x 11]\r\n   #> Call:   unique(`_DT1`)\r\n   #>\r\n   #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\r\n   #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n   #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4\r\n   #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4\r\n   #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\r\n   #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\r\n   #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\r\n   #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\r\n   #> # \u2026 with 26 more rows\r\n   #>\r\n   #> # Use as.data.table()/as.data.frame()/as_tibble() to access results\r\n   ```\r\n   \r\n   <sup>Created on 2022-07-23 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n\n",
                    "created": "2022-07-23T02:23:43.019+0000",
                    "updated": "2022-07-23T02:23:43.019+0000",
                    "started": "2022-07-23T02:23:43.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794440",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eitsupi commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928066536\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Since dtplyr does not do collect, perhaps it would be more consistent to not do collect here as well.\r\n   https://github.com/tidyverse/dtplyr/blob/2181de14668fdad46f5068b56bd34e440b3b6749/R/step-call.R#L208-L214\r\n   \r\n   ``` r\r\n   mtcars |> dtplyr::lazy_dt() |> unique()\r\n   #> Source: local data table [32 x 11]\r\n   #> Call:   unique(`_DT1`)\r\n   #>\r\n   #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\r\n   #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n   #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4\r\n   #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4\r\n   #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\r\n   #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\r\n   #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\r\n   #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\r\n   #> # \u2026 with 26 more rows\r\n   #>\r\n   #> # Use as.data.table()/as.data.frame()/as_tibble() to access results\r\n   ```\r\n   \r\n   <sup>Created on 2022-07-23 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\r\n   \r\n   Because `unique` is not defined in dtplyr, it appears that `unique.default` is being called.\r\n   \n\n\n\n",
                    "created": "2022-07-23T02:33:54.121+0000",
                    "updated": "2022-07-23T02:33:54.121+0000",
                    "started": "2022-07-23T02:33:54.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794441",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eitsupi commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928066536\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Since dtplyr does not do collect, perhaps it would be more consistent to not do collect here as well.\r\n   https://github.com/tidyverse/dtplyr/blob/2181de14668fdad46f5068b56bd34e440b3b6749/R/step-call.R#L208-L214\r\n   \r\n   ``` r\r\n   mtcars |> dtplyr::lazy_dt() |> unique()\r\n   #> Source: local data table [32 x 11]\r\n   #> Call:   unique(`_DT1`)\r\n   #>\r\n   #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\r\n   #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n   #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4\r\n   #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4\r\n   #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\r\n   #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\r\n   #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\r\n   #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\r\n   #> # \u2026 with 26 more rows\r\n   #>\r\n   #> # Use as.data.table()/as.data.frame()/as_tibble() to access results\r\n   ```\r\n   \r\n   <sup>Created on 2022-07-23 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\r\n   \r\n   Because `unique` is not defined in dbplyr, it appears that `unique.default` is being called.\r\n   \n\n\n\n",
                    "created": "2022-07-23T02:34:29.147+0000",
                    "updated": "2022-07-23T02:34:29.147+0000",
                    "started": "2022-07-23T02:34:29.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794442",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eitsupi commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928066536\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Since dtplyr does not do collect, perhaps it would be more consistent to not do collect here as well.\r\n   https://github.com/tidyverse/dtplyr/blob/2181de14668fdad46f5068b56bd34e440b3b6749/R/step-call.R#L208-L214\r\n   \r\n   ``` r\r\n   mtcars |> dtplyr::lazy_dt() |> unique()\r\n   #> Source: local data table [32 x 11]\r\n   #> Call:   unique(`_DT1`)\r\n   #>\r\n   #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\r\n   #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n   #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4\r\n   #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4\r\n   #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\r\n   #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\r\n   #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\r\n   #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\r\n   #> # \u2026 with 26 more rows\r\n   #>\r\n   #> # Use as.data.table()/as.data.frame()/as_tibble() to access results\r\n   ```\r\n   \r\n   <sup>Created on 2022-07-23 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\r\n   \r\n   Because `unique` is not defined in dbplyr, it appears that `unique.default` is being called for `unique(arrow::to_duckdb())`\r\n   \n\n\n\n",
                    "created": "2022-07-23T02:34:59.209+0000",
                    "updated": "2022-07-23T02:34:59.209+0000",
                    "started": "2022-07-23T02:34:59.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794443",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eitsupi commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928066536\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Since dtplyr does not do collect, perhaps it would be more consistent to not do collect here as well.\r\n   https://github.com/tidyverse/dtplyr/blob/2181de14668fdad46f5068b56bd34e440b3b6749/R/step-call.R#L208-L214\r\n   \r\n   ``` r\r\n   mtcars |> dtplyr::lazy_dt() |> unique()\r\n   #> Source: local data table [32 x 11]\r\n   #> Call:   unique(`_DT1`)\r\n   #>\r\n   #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\r\n   #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n   #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4\r\n   #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4\r\n   #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\r\n   #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1\r\n   #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2\r\n   #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1\r\n   #> # \u2026 with 26 more rows\r\n   #>\r\n   #> # Use as.data.table()/as.data.frame()/as_tibble() to access results\r\n   ```\r\n   \r\n   <sup>Created on 2022-07-23 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\r\n   \n\n\n\n",
                    "created": "2022-07-23T02:35:39.279+0000",
                    "updated": "2022-07-23T02:35:39.279+0000",
                    "started": "2022-07-23T02:35:39.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794444",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r927973046\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   It comes from [this](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568169&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17568169) here. I think it is a bit of a grey area. My thinking was that base don't fall into the lazy dbplyr paradigm but then I remember `head`. dbplyr does not have `unique` so I don't think there is a precedent:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(dplyr, warn.conflicts = FALSE)\r\n   \r\n   arrow_iris <- arrow_table(iris)\r\n   duckdb_iris <- to_duckdb(arrow_iris)\r\n   \r\n   ## head\r\n   head(arrow_iris)\r\n   #> Table\r\n   #> 6 rows x 5 columns\r\n   #> $Sepal.Length <double>\r\n   #> $Sepal.Width <double>\r\n   #> $Petal.Length <double>\r\n   #> $Petal.Width <double>\r\n   #> $Species <dictionary<values=string, indices=int8>>\r\n   #> \r\n   #> See $metadata for additional Schema metadata\r\n   head(duckdb_iris)\r\n   #> # Source:   SQL [6 x 5]\r\n   #> # Database: DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r\n   #>          <dbl>       <dbl>        <dbl>       <dbl> <chr>  \r\n   #> 1          5.1         3.5          1.4         0.2 setosa \r\n   #> 2          4.9         3            1.4         0.2 setosa \r\n   #> 3          4.7         3.2          1.3         0.2 setosa \r\n   #> 4          4.6         3.1          1.5         0.2 setosa \r\n   #> 5          5           3.6          1.4         0.2 setosa \r\n   #> 6          5.4         3.9          1.7         0.4 setosa\r\n   \r\n   ## distinct\r\n   distinct(arrow_iris)\r\n   #> Table (query)\r\n   #> Sepal.Length: double\r\n   #> Sepal.Width: double\r\n   #> Petal.Length: double\r\n   #> Petal.Width: double\r\n   #> Species: dictionary<values=string, indices=int8>\r\n   #> \r\n   #> See $.data for the source Arrow object\r\n   distinct(duckdb_iris)\r\n   #> # Source:   SQL [?? x 5]\r\n   #> # Database: DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r\n   #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>  \r\n   #>  1          5.1         3.5          1.4         0.2 setosa \r\n   #>  2          4.9         3            1.4         0.2 setosa \r\n   #>  3          4.7         3.2          1.3         0.2 setosa \r\n   #>  4          4.6         3.1          1.5         0.2 setosa \r\n   #>  5          5           3.6          1.4         0.2 setosa \r\n   #>  6          5.4         3.9          1.7         0.4 setosa \r\n   #>  7          4.6         3.4          1.4         0.3 setosa \r\n   #>  8          5           3.4          1.5         0.2 setosa \r\n   #>  9          4.4         2.9          1.4         0.2 setosa \r\n   #> 10          4.9         3.1          1.5         0.1 setosa \r\n   #> # \u2026 with more rows\r\n   #> # \u2139 Use `print(n = ...)` to see more rows\r\n   \r\n   ##\r\n   unique(duckdb_iris)\r\n   #> [[1]]\r\n   #> src:  DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #> tbls:\r\n   #> \r\n   #> [[2]]\r\n   #> From: arrow_001\r\n   #> <Table: arrow_001>\r\n   ```\r\n   \r\n   I don't think users will have an expectation here so we are probably free to decide. \n\n\n\n",
                    "created": "2022-07-23T02:37:59.495+0000",
                    "updated": "2022-07-23T02:37:59.495+0000",
                    "started": "2022-07-23T02:37:59.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794445",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r927973046\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   It comes from [this](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568169&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17568169) here. I think it is a bit of a grey area. My thinking was that base fns don't fall into the lazy dbplyr paradigm but then I remembered `head`. dbplyr does not have `unique` so I don't think there is a precedent:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(dplyr, warn.conflicts = FALSE)\r\n   \r\n   arrow_iris <- arrow_table(iris)\r\n   duckdb_iris <- to_duckdb(arrow_iris)\r\n   \r\n   ## head\r\n   head(arrow_iris)\r\n   #> Table\r\n   #> 6 rows x 5 columns\r\n   #> $Sepal.Length <double>\r\n   #> $Sepal.Width <double>\r\n   #> $Petal.Length <double>\r\n   #> $Petal.Width <double>\r\n   #> $Species <dictionary<values=string, indices=int8>>\r\n   #> \r\n   #> See $metadata for additional Schema metadata\r\n   head(duckdb_iris)\r\n   #> # Source:   SQL [6 x 5]\r\n   #> # Database: DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r\n   #>          <dbl>       <dbl>        <dbl>       <dbl> <chr>  \r\n   #> 1          5.1         3.5          1.4         0.2 setosa \r\n   #> 2          4.9         3            1.4         0.2 setosa \r\n   #> 3          4.7         3.2          1.3         0.2 setosa \r\n   #> 4          4.6         3.1          1.5         0.2 setosa \r\n   #> 5          5           3.6          1.4         0.2 setosa \r\n   #> 6          5.4         3.9          1.7         0.4 setosa\r\n   \r\n   ## distinct\r\n   distinct(arrow_iris)\r\n   #> Table (query)\r\n   #> Sepal.Length: double\r\n   #> Sepal.Width: double\r\n   #> Petal.Length: double\r\n   #> Petal.Width: double\r\n   #> Species: dictionary<values=string, indices=int8>\r\n   #> \r\n   #> See $.data for the source Arrow object\r\n   distinct(duckdb_iris)\r\n   #> # Source:   SQL [?? x 5]\r\n   #> # Database: DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r\n   #>           <dbl>       <dbl>        <dbl>       <dbl> <chr>  \r\n   #>  1          5.1         3.5          1.4         0.2 setosa \r\n   #>  2          4.9         3            1.4         0.2 setosa \r\n   #>  3          4.7         3.2          1.3         0.2 setosa \r\n   #>  4          4.6         3.1          1.5         0.2 setosa \r\n   #>  5          5           3.6          1.4         0.2 setosa \r\n   #>  6          5.4         3.9          1.7         0.4 setosa \r\n   #>  7          4.6         3.4          1.4         0.3 setosa \r\n   #>  8          5           3.4          1.5         0.2 setosa \r\n   #>  9          4.4         2.9          1.4         0.2 setosa \r\n   #> 10          4.9         3.1          1.5         0.1 setosa \r\n   #> # \u2026 with more rows\r\n   #> # \u2139 Use `print(n = ...)` to see more rows\r\n   \r\n   ##\r\n   unique(duckdb_iris)\r\n   #> [[1]]\r\n   #> src:  DuckDB 0.3.5-dev1410 [root@Darwin 21.6.0:R 4.2.1/:memory:]\r\n   #> tbls:\r\n   #> \r\n   #> [[2]]\r\n   #> From: arrow_001\r\n   #> <Table: arrow_001>\r\n   ```\r\n   \r\n   I don't think users will have an expectation here so we are probably free to decide. \n\n\n\n",
                    "created": "2022-07-23T02:38:34.684+0000",
                    "updated": "2022-07-23T02:38:34.684+0000",
                    "started": "2022-07-23T02:38:34.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794446",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928781870\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   @nealrichardson do you have any strong opinions here? The dtplyr comparison seems relevant here and would suggest _not_ collecting first. \n\n\n\n",
                    "created": "2022-07-25T11:36:13.220+0000",
                    "updated": "2022-07-25T11:36:13.220+0000",
                    "started": "2022-07-25T11:36:13.218+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794847",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/794891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r928885064\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Perhaps `unique()` should return the same type as the input (except maybe for Dataset, where returning an arrow_dplyr_query is safer)? I don't think anybody would expect to `collect()` if doing `unique(some_table)`, but when a pipeline starts with a dataset I think it's reasonable to force an explicit collect at the end?\n\n\n\n",
                    "created": "2022-07-25T13:28:42.533+0000",
                    "updated": "2022-07-25T13:28:42.533+0000",
                    "started": "2022-07-25T13:28:42.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794891",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/795072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r929370719\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   I wonder if this might end up being confusing as `distinct` just returns `arrow_dplyr_query` no matter the input. Maybe we should just follow that implementation exactly. \n\n\n\n",
                    "created": "2022-07-25T22:53:23.063+0000",
                    "updated": "2022-07-25T22:53:23.063+0000",
                    "started": "2022-07-25T22:53:23.062+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "795072",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/795236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r929898573\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   I'm ok with always requiring an explicit collect(). That is the expectation that has been set, that you do things to a Dataset and it doesn't evaluate until you tell it to. I see the argument the other way too, but if we're going to err on one side or the other, it should probably be on the conservative, don't-run-a-big-query-until-I-say-so side.\n\n\n\n",
                    "created": "2022-07-26T12:24:44.990+0000",
                    "updated": "2022-07-26T12:24:44.990+0000",
                    "started": "2022-07-26T12:24:44.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "795236",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/795270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "boshek commented on code in PR #13641:\nURL: https://github.com/apache/arrow/pull/13641#discussion_r929965212\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -184,6 +184,29 @@ dim.arrow_dplyr_query <- function(x) {\n   c(rows, cols)\n }\n \n+#' @export\n+unique.arrow_dplyr_query <- function(x, incomparables = FALSE, fromLast = FALSE, ...) {\n+\n+  if (incomparables == TRUE) {\n+    arrow_not_supported(\"`unique()` with `incomparables = TRUE`\")\n+  }\n+\n+  if (fromLast == TRUE) {\n+    arrow_not_supported(\"`unique()` with `fromLast = TRUE`\")\n+  }\n+\n+  x <- dplyr::distinct(x)\n+  dplyr::collect(x)\n\nReview Comment:\n   Ok - I've modified to always return an arrow_dplyr_query. Tests might be overkill here but I wanted to test all inputs. \n\n\n\n",
                    "created": "2022-07-26T13:28:35.370+0000",
                    "updated": "2022-07-26T13:28:35.370+0000",
                    "started": "2022-07-26T13:28:35.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "795270",
                    "issueId": "13377315"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/worklog/795605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot merged PR #13641:\nURL: https://github.com/apache/arrow/pull/13641\n\n\n",
                    "created": "2022-07-27T11:01:26.473+0000",
                    "updated": "2022-07-27T11:01:26.473+0000",
                    "started": "2022-07-27T11:01:26.473+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "795605",
                    "issueId": "13377315"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1d6706f1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8c9f94f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7999c681[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3edd4b7c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@292088b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@15eb717c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22f1108e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@76a32907[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b6b4a6b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1545a0eb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f1aa7ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@509e4a58[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 27 11:01:31 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-27T11:01:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12693/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-05-07T21:01:31.000+0000",
        "updated": "2022-07-27T13:21:39.000+0000",
        "timeoriginalestimate": null,
        "description": "I am trying to see if I can leverage `unique` on a Dataset object. Imagining a much big dataset, I am trying to get away from this expensive pattern:\r\n{code:java}\r\nDataset %>%\r\n\u00a0 pull(col) %>%\r\n\u00a0 unique(){code}\r\nHowever when I try the option below it is not working quite how I'd expect. I'm actually not able to get any working (e.g. `arrow_mean`) so maybe I am misunderstanding how these are meant to work.\u00a0\r\n{code:java}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\ndir.create(\"iris\")\r\niris %>%\r\n group_by(Species) %>%\r\n write_dataset(\"iris\")\r\nds <- open_dataset(\"iris\")\r\nds %>%\r\n mutate(unique = arrow_unique(Species)) %>%\r\n collect()\r\n#> Error: Invalid: ExecuteScalarExpression cannot Execute non-scalar expression unique(\"setosa\")\r\nds %>%\r\n mutate(unique = arrow_unique(Petal.Width)) %>%\r\n collect()\r\n#> Error: Invalid: ExecuteScalarExpression cannot Execute non-scalar expression {Sepal.Length=Sepal.Length, Sepal.Width=Sepal.Width, Petal.Length=Petal.Length, Petal.Width=Petal.Width, Species=\"setosa\", unique=unique(Petal.Width)}\r\n\r\ncall_function(\"unique\", ds, \"Species\")\r\n#> Error: Argument 1 is of class FileSystemDataset but it must be one of \"Array\", \"ChunkedArray\", \"RecordBatch\", \"Table\", or \"Scalar\"\r\ncall_function(\"unique\", ds, \"Petal.Width\")\r\n#> Error: Argument 1 is of class FileSystemDataset but it must be one of \"Array\", \"ChunkedArray\", \"RecordBatch\", \"Table\", or \"Scalar\"\r\n\r\ncall_function(\"mean\", ds, \"Petal.Width\")\r\n#> Error: Argument 1 is of class FileSystemDataset but it must be one of \"Array\", \"ChunkedArray\", \"RecordBatch\", \"Table\", or \"Scalar\"\r\n\r\nsessioninfo::session_info()\r\n#> - Session info ---------------------------------------------------------------\r\n#> setting value \r\n#> version R version 4.0.5 (2021-03-31)\r\n#> os Windows 10 x64 \r\n#> system x86_64, mingw32 \r\n#> ui RTerm \r\n#> language (EN) \r\n#> collate English_Canada.1252 \r\n#> ctype English_Canada.1252 \r\n#> tz America/Los_Angeles \r\n#> date 2021-05-07 \r\n#> \r\n#> - Packages -------------------------------------------------------------------\r\n#> package * version date lib source \r\n#> arrow * 4.0.0 2021-04-27 [1] CRAN (R 4.0.5)\r\n#> assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0)\r\n#> backports 1.2.1 2020-12-09 [1] CRAN (R 4.0.3)\r\n#> bit 4.0.4 2020-08-04 [1] CRAN (R 4.0.2)\r\n#> bit64 4.0.5 2020-08-30 [1] CRAN (R 4.0.2)\r\n#> cli 2.5.0 2021-04-26 [1] CRAN (R 4.0.5)\r\n#> crayon 1.4.1 2021-02-08 [1] CRAN (R 4.0.3)\r\n#> DBI 1.1.1 2021-01-15 [1] CRAN (R 4.0.3)\r\n#> digest 0.6.27 2020-10-24 [1] CRAN (R 4.0.3)\r\n#> dplyr * 1.0.5 2021-03-05 [1] CRAN (R 4.0.5)\r\n#> ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.0.5)\r\n#> evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0)\r\n#> fansi 0.4.2 2021-01-15 [1] CRAN (R 4.0.3)\r\n#> fs 1.5.0 2020-07-31 [1] CRAN (R 4.0.2)\r\n#> generics 0.1.0 2020-10-31 [1] CRAN (R 4.0.3)\r\n#> glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2)\r\n#> highr 0.9 2021-04-16 [1] CRAN (R 4.0.4)\r\n#> htmltools 0.5.1.1 2021-01-22 [1] CRAN (R 4.0.3)\r\n#> knitr 1.33 2021-04-24 [1] CRAN (R 4.0.5)\r\n#> lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.4)\r\n#> magrittr 2.0.1 2020-11-17 [1] CRAN (R 4.0.3)\r\n#> pillar 1.6.0 2021-04-13 [1] CRAN (R 4.0.5)\r\n#> pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.0.0)\r\n#> purrr 0.3.4 2020-04-17 [1] CRAN (R 4.0.0)\r\n#> R.cache 0.15.0 2021-04-30 [1] CRAN (R 4.0.5)\r\n#> R.methodsS3 1.8.1 2020-08-26 [1] CRAN (R 4.0.2)\r\n#> R.oo 1.24.0 2020-08-26 [1] CRAN (R 4.0.2)\r\n#> R.utils 2.10.1 2020-08-26 [1] CRAN (R 4.0.2)\r\n#> R6 2.5.0 2020-10-28 [1] CRAN (R 4.0.3)\r\n#> reprex 2.0.0 2021-04-02 [1] CRAN (R 4.0.5)\r\n#> rlang 0.4.10 2020-12-30 [1] CRAN (R 4.0.3)\r\n#> rmarkdown 2.7 2021-02-19 [1] CRAN (R 4.0.4)\r\n#> sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 4.0.0)\r\n#> stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2)\r\n#> stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.2)\r\n#> styler 1.4.1 2021-03-30 [1] CRAN (R 4.0.4)\r\n#> tibble 3.1.1 2021-04-18 [1] CRAN (R 4.1.0)\r\n#> tidyselect 1.1.1 2021-04-30 [1] CRAN (R 4.0.5)\r\n#> utf8 1.2.1 2021-03-12 [1] CRAN (R 4.0.5)\r\n#> vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.0.5)\r\n#> withr 2.4.2 2021-04-18 [1] CRAN (R 4.0.4)\r\n#> xfun 0.22 2021-03-11 [1] CRAN (R 4.0.4)\r\n#> yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0)\r\n#> \r\n#> [1] C:/Users/salbers/R/win-library/4.0\r\n#> [2] C:/Program Files/R/R-4.0.5/library\r\n\r\n{code}\r\n{color:#172b4d}I am opening this a) because others may have run into the same issue and b) just in case this is actually a bug. Feel free to close immediately if this isn't the way these are supposed to work. {color}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] add unique() methods for ArrowTabular, datasets",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17341040",
                    "id": "17341040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks for sending this along! At this moment most aggregation functions like these aren't yet implemented through our dataset compute framework (there's still some work ongoing on the c++ side to enable these, and we anticipate some will be in the next release). \r\n\r\nWe probably should have been a bit more explicit about this in our error messages (e.g. catching the \"non-scalar expression\" error and mentioning that aggregates are not yet supported for datasets) or been a bit more clear in the documentation for `call_function` / `list_compute_functions` that not all compute functions can be used with datasets.\r\n\r\nLooking at your use case, it might be possible to see some benefits by not serializing into R before doing your unique call like below. Though this _will_ cause the dataset to be scanned and read into an arrow table. I wouldn't recommend this as a general work around (since it will be obsolete in 5.0, among other reasons!), but it might help in certain situations depending on what you're working on + where the bottlenecks are.\r\n\r\n{code:r}\r\nspecies_table <- ds %>% \r\n  select(Species) %>% \r\n  collect(as_data_frame = FALSE)\r\n\r\n# the `[[1]]` is to take the only column as an array.\r\nunique(species_table[[1]])\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-05-07T21:23:41.543+0000",
                    "updated": "2021-05-07T21:23:41.543+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17397315",
                    "id": "17397315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I also ran into something similar when trying to find the unique rows in a table:\r\n\r\n{code}\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\n\r\ntab <- InMemoryDataset$create(mtcars)\r\n\r\ntab %>% \r\n  select(mpg, gear) %>% \r\n  unique() %>%\r\n  collect()\r\n#> Error in UseMethod(\"collect\"): no applicable method for 'collect' applied to an object of class \"list\"\r\n{code}\r\n\r\nEven if we don't (yet) have the compute kernel to do this, we should error or warn + pull into R for this",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-11T12:28:10.461+0000",
                    "updated": "2021-08-11T12:28:10.461+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17568134",
                    "id": "17568134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I think we can use the same function as we use for {{distinct()}} now",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-18T17:34:22.015+0000",
                    "updated": "2022-07-18T17:34:22.015+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17568149",
                    "id": "17568149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
                        "name": "boshek",
                        "key": "boshek",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sam Albers",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Because this isn't a dplyr function, do you think this would automatically pull the vector into memory?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
                        "name": "boshek",
                        "key": "boshek",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sam Albers",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-18T18:13:59.639+0000",
                    "updated": "2022-07-18T18:13:59.639+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17568162",
                    "id": "17568162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
                        "name": "boshek",
                        "key": "boshek",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sam Albers",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I also wonder if it even worth implementing this. None (afaik) of the dbplyr backends implement anything for {{{}unique(){}}}. {{distinct()}} provides the same functionality. {{unique()}} falls a bit outside of the dplyr paradigm and I think there would be some expectation to support something like {{unique(some_arrow_table$variable)}} type syntax. If that syntax wasn't supported then one could still call {{unique()}} on a whole table but that would duplicate what {{distinct()}} does.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
                        "name": "boshek",
                        "key": "boshek",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sam Albers",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-18T18:38:53.520+0000",
                    "updated": "2022-07-18T18:38:53.520+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17568169",
                    "id": "17568169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> Because this isn't a dplyr function, do you think this would automatically pull the vector into memory?\r\n\r\nGood call, probably so.\r\n\r\n> I also wonder if it even worth implementing this.\r\n\r\nWell, the original issue reporter seemed to expect that it would work ;)\r\n\r\n> I think there would be some expectation to support something like\u00a0{{unique(some_arrow_table$variable)}}\r\n\r\nIIRC there is a feature request to support $ on query objects\r\n\r\n> one could still call\u00a0{{unique()}}\u00a0on a whole table but that would duplicate what\u00a0{{distinct()}}\u00a0does.\r\n\r\nIf it's not worth implementing, we could add {{unique.arrow_dplyr_query}} et al. that just raises an error telling you to call distinct() instead. But at that point, we might as well just wire it up to do distinct %>% collect, right?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-18T19:03:23.941+0000",
                    "updated": "2022-07-18T19:03:23.941+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17568225",
                    "id": "17568225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
                        "name": "boshek",
                        "key": "boshek",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sam Albers",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> Well, the original issue reporter seemed to expect that it would work ;)\r\n\r\nSo foolish he was. \r\n\r\n> feature request to support $ on query objects\r\n\r\nI wasn't able to find a specific ticket for that. I can create one though as I think it might something worth exploring.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=boshek",
                        "name": "boshek",
                        "key": "boshek",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Sam Albers",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-18T22:09:04.187+0000",
                    "updated": "2022-07-18T22:09:04.187+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377315/comment/17571842",
                    "id": "17571842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Issue resolved by pull request 13641\n[https://github.com/apache/arrow/pull/13641]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-07-27T11:01:31.771+0000",
                    "updated": "2022-07-27T11:01:31.771+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qu74:",
        "customfield_12314139": null
    }
}