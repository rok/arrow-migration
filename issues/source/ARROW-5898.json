{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13244041",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041",
    "key": "ARROW-5898",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5898/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/274781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844\n \n \n   This issue adds a functionality to efficiently compute  the hash code for a consecutive memory region. This functionality is important in practical scenarios because it helps:\r\n   \r\n   *Avoid unnecessary memory copy.\r\n   *Avoid repeated conversions between Java objects & Arrow buffers. \r\n   \r\n   Since the algorithm for calculating hash code has  significant performance implications, we need to design an interface so that different algorithms can be easily introduces as plug-ins.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T10:36:26.382+0000",
                    "updated": "2019-07-10T10:36:26.382+0000",
                    "started": "2019-07-10T10:36:26.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "274781",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/275242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r302392517\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/hash/ArrowBufHasher.java\n ##########\n @@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.hash;\n+\n+import java.nio.ByteOrder;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+\n+/**\n+ * Utility for calculating the hash code for a consecutive memory region.\n+ */\n+public abstract class ArrowBufHasher {\n+\n+  public static final boolean LITTLE_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;\n+\n+  /**\n+   * Calculates the hash code for a memory region.\n+   * @param buf the buffer for the memory region.\n+   * @param offset offset within the buffer for the memory region.\n+   * @param length length of the memory region.\n+   * @return the hash code.\n+   */\n+  public int hashCode(ArrowBuf buf, int offset, int length) {\n+    Preconditions.checkArgument(offset >= 0 && length >= 0 && offset + length <= buf.capacity());\n+\n+    int hashValue = 0;\n+    int index = 0;\n+    while (index + 8 <= length) {\n+      long longValue = buf.getLong(index + offset);\n \n Review comment:\n   can be replaced with PlatformDependent.getLong() interprets according to the platform endianess\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T07:12:49.867+0000",
                    "updated": "2019-07-11T07:12:49.867+0000",
                    "started": "2019-07-11T07:12:49.866+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275242",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/275248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r302408045\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/hash/ArrowBufHasher.java\n ##########\n @@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.hash;\n+\n+import java.nio.ByteOrder;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+\n+/**\n+ * Utility for calculating the hash code for a consecutive memory region.\n+ */\n+public abstract class ArrowBufHasher {\n+\n+  public static final boolean LITTLE_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;\n+\n+  /**\n+   * Calculates the hash code for a memory region.\n+   * @param buf the buffer for the memory region.\n+   * @param offset offset within the buffer for the memory region.\n+   * @param length length of the memory region.\n+   * @return the hash code.\n+   */\n+  public int hashCode(ArrowBuf buf, int offset, int length) {\n+    Preconditions.checkArgument(offset >= 0 && length >= 0 && offset + length <= buf.capacity());\n+\n+    int hashValue = 0;\n+    int index = 0;\n+    while (index + 8 <= length) {\n+      long longValue = buf.getLong(index + offset);\n \n Review comment:\n   @praveenbingo thanks a lot for your comments.\r\n   \r\n   Here we force the algorithm to interpret the data in little endian, in a platform independent way. This is to make sure that, if the data is sent from a little endian machine to a big endian machine, its hash code remain unchanged. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T07:54:41.046+0000",
                    "updated": "2019-07-11T07:54:41.046+0000",
                    "started": "2019-07-11T07:54:41.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275248",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/276453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#issuecomment-511265699\n \n \n   This functionality should be placed in the memory module to avoid potential cyclic dependency.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-15T03:38:57.921+0000",
                    "updated": "2019-07-15T03:38:57.921+0000",
                    "started": "2019-07-15T03:38:57.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "276453",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/278924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r304875162\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/hash/ArrowBufHasher.java\n ##########\n @@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.hash;\n+\n+import java.nio.ByteOrder;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+\n+/**\n+ * Utility for calculating the hash code for a consecutive memory region.\n+ */\n+public abstract class ArrowBufHasher {\n+\n+  public static final boolean LITTLE_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;\n+\n+  /**\n+   * Calculates the hash code for a memory region.\n+   * @param buf the buffer for the memory region.\n+   * @param offset offset within the buffer for the memory region.\n+   * @param length length of the memory region.\n+   * @return the hash code.\n+   */\n+  public int hashCode(ArrowBuf buf, int offset, int length) {\n+    Preconditions.checkArgument(offset >= 0 && length >= 0 && offset + length <= buf.capacity());\n+\n+    int hashValue = 0;\n+    int index = 0;\n+    while (index + 8 <= length) {\n+      long longValue = buf.getLong(index + offset);\n \n Review comment:\n   I see, sounds good.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T11:54:51.167+0000",
                    "updated": "2019-07-18T11:54:51.167+0000",
                    "started": "2019-07-18T11:54:51.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278924",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/278929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r304876364\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/DirectHasher.java\n ##########\n @@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+/**\n+ * Calculate hash code by directly returning the integers.\n+ * This is the default and the fastest way to get the hash code.\n+ * <p>\n+ *   Objects of class are stateless, so it can be shared between threads.\n+ * </p>\n+ */\n+public class DirectHasher extends ArrowBufHasher {\n+\n+  public static DirectHasher INSTANCE = new DirectHasher();\n+\n+  private static final int DEFAULT_SEED = 0;\n+\n+  private DirectHasher() {\n+\n+  }\n+\n+  @Override\n+  public int combineHashCode(int currentHashCode, int newHashCode) {\n+    return currentHashCode * 37 + newHashCode;\n+  }\n+\n+  @Override\n+  public int getByteHashCode(byte byteValue) {\n+    return Byte.hashCode(byteValue);\n+  }\n+\n+  @Override\n+  public int getIntHashCode(int intValue) {\n+    return Integer.hashCode(intValue);\n \n Review comment:\n   can avoid Integer.hashCode(..) since it returns the value as is anyways..\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T11:58:12.203+0000",
                    "updated": "2019-07-18T11:58:12.203+0000",
                    "started": "2019-07-18T11:58:12.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278929",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/278930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r304876544\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/DirectHasher.java\n ##########\n @@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+/**\n+ * Calculate hash code by directly returning the integers.\n+ * This is the default and the fastest way to get the hash code.\n+ * <p>\n+ *   Objects of class are stateless, so it can be shared between threads.\n+ * </p>\n+ */\n+public class DirectHasher extends ArrowBufHasher {\n+\n+  public static DirectHasher INSTANCE = new DirectHasher();\n+\n+  private static final int DEFAULT_SEED = 0;\n+\n+  private DirectHasher() {\n+\n+  }\n+\n+  @Override\n+  public int combineHashCode(int currentHashCode, int newHashCode) {\n+    return currentHashCode * 37 + newHashCode;\n+  }\n+\n+  @Override\n+  public int getByteHashCode(byte byteValue) {\n+    return Byte.hashCode(byteValue);\n \n Review comment:\n   same can directly do (int)byteValue..\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T11:58:47.827+0000",
                    "updated": "2019-07-18T11:58:47.827+0000",
                    "started": "2019-07-18T11:58:47.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278930",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/278940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r304884189\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/DirectHasher.java\n ##########\n @@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+/**\n+ * Calculate hash code by directly returning the integers.\n+ * This is the default and the fastest way to get the hash code.\n+ * <p>\n+ *   Objects of class are stateless, so it can be shared between threads.\n+ * </p>\n+ */\n+public class DirectHasher extends ArrowBufHasher {\n+\n+  public static DirectHasher INSTANCE = new DirectHasher();\n+\n+  private static final int DEFAULT_SEED = 0;\n+\n+  private DirectHasher() {\n+\n+  }\n+\n+  @Override\n+  public int combineHashCode(int currentHashCode, int newHashCode) {\n+    return currentHashCode * 37 + newHashCode;\n+  }\n+\n+  @Override\n+  public int getByteHashCode(byte byteValue) {\n+    return Byte.hashCode(byteValue);\n+  }\n+\n+  @Override\n+  public int getIntHashCode(int intValue) {\n+    return Integer.hashCode(intValue);\n \n Review comment:\n   Good cache. Thanks a lot.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T12:19:26.380+0000",
                    "updated": "2019-07-18T12:19:26.380+0000",
                    "started": "2019-07-18T12:19:26.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278940",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/278941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r304884258\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/DirectHasher.java\n ##########\n @@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+/**\n+ * Calculate hash code by directly returning the integers.\n+ * This is the default and the fastest way to get the hash code.\n+ * <p>\n+ *   Objects of class are stateless, so it can be shared between threads.\n+ * </p>\n+ */\n+public class DirectHasher extends ArrowBufHasher {\n+\n+  public static DirectHasher INSTANCE = new DirectHasher();\n+\n+  private static final int DEFAULT_SEED = 0;\n+\n+  private DirectHasher() {\n+\n+  }\n+\n+  @Override\n+  public int combineHashCode(int currentHashCode, int newHashCode) {\n+    return currentHashCode * 37 + newHashCode;\n+  }\n+\n+  @Override\n+  public int getByteHashCode(byte byteValue) {\n+    return Byte.hashCode(byteValue);\n \n Review comment:\n   Revised. Thank you.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T12:19:35.681+0000",
                    "updated": "2019-07-18T12:19:35.681+0000",
                    "started": "2019-07-18T12:19:35.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278941",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/278952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r304884189\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/DirectHasher.java\n ##########\n @@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+/**\n+ * Calculate hash code by directly returning the integers.\n+ * This is the default and the fastest way to get the hash code.\n+ * <p>\n+ *   Objects of class are stateless, so it can be shared between threads.\n+ * </p>\n+ */\n+public class DirectHasher extends ArrowBufHasher {\n+\n+  public static DirectHasher INSTANCE = new DirectHasher();\n+\n+  private static final int DEFAULT_SEED = 0;\n+\n+  private DirectHasher() {\n+\n+  }\n+\n+  @Override\n+  public int combineHashCode(int currentHashCode, int newHashCode) {\n+    return currentHashCode * 37 + newHashCode;\n+  }\n+\n+  @Override\n+  public int getByteHashCode(byte byteValue) {\n+    return Byte.hashCode(byteValue);\n+  }\n+\n+  @Override\n+  public int getIntHashCode(int intValue) {\n+    return Integer.hashCode(intValue);\n \n Review comment:\n   Good catch! Thanks a lot.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T12:32:58.359+0000",
                    "updated": "2019-07-18T12:32:58.359+0000",
                    "started": "2019-07-18T12:32:58.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278952",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/279505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tianchen92 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r305197224\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/DirectHasher.java\n ##########\n @@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+/**\n+ * Calculate hash code by directly returning the integers.\n+ * This is the default and the fastest way to get the hash code.\n+ * <p>\n+ *   Objects of class are stateless, so it can be shared between threads.\n+ * </p>\n+ */\n+public class DirectHasher extends ArrowBufHasher {\n+\n+  public static DirectHasher INSTANCE = new DirectHasher();\n+\n+  private static final int DEFAULT_SEED = 0;\n+\n+  private DirectHasher() {\n+\n+  }\n+\n+  @Override\n+  public int combineHashCode(int currentHashCode, int newHashCode) {\n+    return currentHashCode * 37 + newHashCode;\n+  }\n+\n+  @Override\n+  public int getByteHashCode(byte byteValue) {\n+    return (int) byteValue;\n+  }\n+\n+  @Override\n+  public int getIntHashCode(int intValue) {\n+    return intValue;\n+  }\n+\n+  @Override\n+  public int getLongHashCode(long longValue) {\n+    return Long.hashCode(longValue);\n+  }\n+\n+  @Override\n+  public int finalizeHashCode(int hashCode) {\n \n Review comment:\n   @emkornfield Since we hashCode & equals API already checked in, could we take a look at this PR? Something like finalizeHashCode is useful in actual applications.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-19T04:20:40.234+0000",
                    "updated": "2019-07-19T04:20:40.234+0000",
                    "started": "2019-07-19T04:20:40.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279505",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/279603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844\n \n \n   This issue adds a functionality to efficiently compute  the hash code for a consecutive memory region. This functionality is important in practical scenarios because it helps:\r\n   \r\n   *Avoid unnecessary memory copy.\r\n   *Avoid repeated conversions between Java objects & Arrow buffers. \r\n   \r\n   Since the algorithm for calculating hash code has  significant performance implications, we need to design an interface so that different algorithms can be easily introduces as plug-ins.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-19T09:11:22.181+0000",
                    "updated": "2019-07-19T09:11:22.181+0000",
                    "started": "2019-07-19T09:11:22.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279603",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/279604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-19T09:11:24.766+0000",
                    "updated": "2019-07-19T09:11:24.766+0000",
                    "started": "2019-07-19T09:11:24.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279604",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/279729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#issuecomment-513215804\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=h1) Report\n   > Merging [#4844](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/c1f25e849fa9b6108dd4f77af2707a72356dd25d?src=pr&el=desc) will **increase** coverage by `2.19%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4844/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4844      +/-   ##\n   ==========================================\n   + Coverage   87.44%   89.63%   +2.19%     \n   ==========================================\n     Files         995      661     -334     \n     Lines      140460    97082   -43378     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       122820    87016   -35804     \n   + Misses      17278    10066    -7212     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/gandiva/precompiled/arithmetic\\_ops\\_test.cc](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL3ByZWNvbXBpbGVkL2FyaXRobWV0aWNfb3BzX3Rlc3QuY2M=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/function\\_registry\\_arithmetic.cc](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2Z1bmN0aW9uX3JlZ2lzdHJ5X2FyaXRobWV0aWMuY2M=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/buffer-builder.h](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWZmZXItYnVpbGRlci5o) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [rust/datafusion/src/execution/projection.rs](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vcHJvamVjdGlvbi5ycw==) | | |\n   | [rust/datafusion/src/execution/filter.rs](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZmlsdGVyLnJz) | | |\n   | ... and [336 more](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=footer). Last update [c1f25e8...5e10ecc](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-19T12:47:50.588+0000",
                    "updated": "2019-07-19T12:47:50.588+0000",
                    "started": "2019-07-19T12:47:50.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279729",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/280048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r305568071\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/DirectHasher.java\n ##########\n @@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+/**\n+ * Calculate hash code by directly returning the integers.\n+ * This is the default and the fastest way to get the hash code.\n+ * <p>\n+ *   Objects of class are stateless, so it can be shared between threads.\n+ * </p>\n+ */\n+public class DirectHasher extends ArrowBufHasher {\n+\n+  public static DirectHasher INSTANCE = new DirectHasher();\n+\n+  private static final int DEFAULT_SEED = 0;\n+\n+  private DirectHasher() {\n+\n+  }\n+\n+  @Override\n+  public int combineHashCode(int currentHashCode, int newHashCode) {\n+    return currentHashCode * 37 + newHashCode;\n+  }\n+\n+  @Override\n+  public int getByteHashCode(byte byteValue) {\n+    return (int) byteValue;\n+  }\n+\n+  @Override\n+  public int getIntHashCode(int intValue) {\n+    return intValue;\n+  }\n+\n+  @Override\n+  public int getLongHashCode(long longValue) {\n+    return Long.hashCode(longValue);\n+  }\n+\n+  @Override\n+  public int finalizeHashCode(int hashCode) {\n \n Review comment:\n   @tianchen92 I'm not sure I understand the question exactly?  What were you thinking about doing with ti?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-20T05:14:09.499+0000",
                    "updated": "2019-07-20T05:14:09.499+0000",
                    "started": "2019-07-20T05:14:09.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280048",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/280050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r305568253\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/ArrowBufHasher.java\n ##########\n @@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+import static io.netty.util.internal.PlatformDependent.getByte;\n+import static io.netty.util.internal.PlatformDependent.getInt;\n+import static io.netty.util.internal.PlatformDependent.getLong;\n+\n+import java.nio.ByteOrder;\n+\n+import io.netty.buffer.ArrowBuf;\n+\n+/**\n+ * Utility for calculating the hash code for a consecutive memory region.\n+ */\n \n Review comment:\n   can you document how consumers are expected to use this class?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-20T05:22:00.381+0000",
                    "updated": "2019-07-20T05:22:00.381+0000",
                    "started": "2019-07-20T05:22:00.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280050",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/280051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r305568267\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/ArrowBufHasher.java\n ##########\n @@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+import static io.netty.util.internal.PlatformDependent.getByte;\n+import static io.netty.util.internal.PlatformDependent.getInt;\n+import static io.netty.util.internal.PlatformDependent.getLong;\n+\n+import java.nio.ByteOrder;\n+\n+import io.netty.buffer.ArrowBuf;\n+\n+/**\n+ * Utility for calculating the hash code for a consecutive memory region.\n+ */\n+public abstract class ArrowBufHasher {\n+\n+  public static final boolean LITTLE_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;\n+\n+  /**\n+   * Calculates the hash code for a memory region.\n+   * @param address start address of the memory region.\n+   * @param length length of the memory region.\n+   * @return the hash code.\n+   */\n+  public int hashCode(long address, int length) {\n+    int hashValue = 0;\n+    int index = 0;\n+    while (index + 8 <= length) {\n+      long longValue = getLong(address + index);\n+      if (!LITTLE_ENDIAN) {\n+        // assume the buffer is in little endian\n+        longValue = Long.reverseBytes(longValue);\n+      }\n+      int longHash = getLongHashCode(longValue);\n+      hashValue = combineHashCode(hashValue, longHash);\n+      index += 8;\n+    }\n+\n+    while (index + 4 <= length) {\n+      int intValue = getInt(address + index);\n+      if (!LITTLE_ENDIAN) {\n+        intValue = Integer.reverseBytes(intValue);\n+      }\n+      int intHash = getIntHashCode(intValue);\n+      hashValue = combineHashCode(hashValue, intHash);\n+      index += 4;\n+    }\n+\n+    while (index < length) {\n+      byte byteValue = getByte(address + index);\n+      int byteHash = getByteHashCode(byteValue);\n+      hashValue = combineHashCode(hashValue, byteHash);\n+      index += 1;\n+    }\n+\n+    return finalizeHashCode(hashValue);\n+  }\n+\n+  /**\n+   * Calculates the hash code for a memory region.\n+   * @param buf the buffer for the memory region.\n+   * @param offset offset within the buffer for the memory region.\n+   * @param length length of the memory region.\n+   * @return the hash code.\n+   */\n+  public int hashCode(ArrowBuf buf, int offset, int length) {\n+    buf.checkBytes(offset, offset + length);\n+    return hashCode(buf.memoryAddress() + offset, length);\n+  }\n+\n+  /**\n+   * Calculates the hash code by combining the existing hash code and a new hash code.\n+   * @param currentHashCode the existing hash code.\n+   * @param newHashCode the new hash code.\n+   * @return the combined hash code.\n+   */\n+  public abstract int combineHashCode(int currentHashCode, int newHashCode);\n \n Review comment:\n   should all of the abstract methods here be protected?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-20T05:22:35.169+0000",
                    "updated": "2019-07-20T05:22:35.169+0000",
                    "started": "2019-07-20T05:22:35.169+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280051",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/280219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r305666721\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/ArrowBufHasher.java\n ##########\n @@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+import static io.netty.util.internal.PlatformDependent.getByte;\n+import static io.netty.util.internal.PlatformDependent.getInt;\n+import static io.netty.util.internal.PlatformDependent.getLong;\n+\n+import java.nio.ByteOrder;\n+\n+import io.netty.buffer.ArrowBuf;\n+\n+/**\n+ * Utility for calculating the hash code for a consecutive memory region.\n+ */\n \n Review comment:\n   Sure. Good suggestion.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-22T04:01:36.323+0000",
                    "updated": "2019-07-22T04:01:36.323+0000",
                    "started": "2019-07-22T04:01:36.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280219",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/280220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#discussion_r305667379\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/util/hash/ArrowBufHasher.java\n ##########\n @@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.util.hash;\n+\n+import static io.netty.util.internal.PlatformDependent.getByte;\n+import static io.netty.util.internal.PlatformDependent.getInt;\n+import static io.netty.util.internal.PlatformDependent.getLong;\n+\n+import java.nio.ByteOrder;\n+\n+import io.netty.buffer.ArrowBuf;\n+\n+/**\n+ * Utility for calculating the hash code for a consecutive memory region.\n+ */\n+public abstract class ArrowBufHasher {\n+\n+  public static final boolean LITTLE_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.LITTLE_ENDIAN;\n+\n+  /**\n+   * Calculates the hash code for a memory region.\n+   * @param address start address of the memory region.\n+   * @param length length of the memory region.\n+   * @return the hash code.\n+   */\n+  public int hashCode(long address, int length) {\n+    int hashValue = 0;\n+    int index = 0;\n+    while (index + 8 <= length) {\n+      long longValue = getLong(address + index);\n+      if (!LITTLE_ENDIAN) {\n+        // assume the buffer is in little endian\n+        longValue = Long.reverseBytes(longValue);\n+      }\n+      int longHash = getLongHashCode(longValue);\n+      hashValue = combineHashCode(hashValue, longHash);\n+      index += 8;\n+    }\n+\n+    while (index + 4 <= length) {\n+      int intValue = getInt(address + index);\n+      if (!LITTLE_ENDIAN) {\n+        intValue = Integer.reverseBytes(intValue);\n+      }\n+      int intHash = getIntHashCode(intValue);\n+      hashValue = combineHashCode(hashValue, intHash);\n+      index += 4;\n+    }\n+\n+    while (index < length) {\n+      byte byteValue = getByte(address + index);\n+      int byteHash = getByteHashCode(byteValue);\n+      hashValue = combineHashCode(hashValue, byteHash);\n+      index += 1;\n+    }\n+\n+    return finalizeHashCode(hashValue);\n+  }\n+\n+  /**\n+   * Calculates the hash code for a memory region.\n+   * @param buf the buffer for the memory region.\n+   * @param offset offset within the buffer for the memory region.\n+   * @param length length of the memory region.\n+   * @return the hash code.\n+   */\n+  public int hashCode(ArrowBuf buf, int offset, int length) {\n+    buf.checkBytes(offset, offset + length);\n+    return hashCode(buf.memoryAddress() + offset, length);\n+  }\n+\n+  /**\n+   * Calculates the hash code by combining the existing hash code and a new hash code.\n+   * @param currentHashCode the existing hash code.\n+   * @param newHashCode the new hash code.\n+   * @return the combined hash code.\n+   */\n+  public abstract int combineHashCode(int currentHashCode, int newHashCode);\n \n Review comment:\n   I think for some scenarios, the users just want to know the hash code of a small memory segment (like 1-byte, 4-byte, or 8-byte segments). So making the methods public can be helpful for them. \r\n   \r\n   What do you think?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-22T04:06:25.682+0000",
                    "updated": "2019-07-22T04:06:25.682+0000",
                    "started": "2019-07-22T04:06:25.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280220",
                    "issueId": "13244041"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/worklog/280228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4844: ARROW-5898: [Java] Provide functionality to efficiently compute hash code for arbitrary memory segment\nURL: https://github.com/apache/arrow/pull/4844#issuecomment-513215804\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=h1) Report\n   > Merging [#4844](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/85fe33653b6ba8b72e1af2d64abb759aa7aa50e7?src=pr&el=desc) will **increase** coverage by `2.15%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4844/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4844      +/-   ##\n   ==========================================\n   + Coverage   87.46%   89.61%   +2.15%     \n   ==========================================\n     Files         994      660     -334     \n     Lines      140389    96546   -43843     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       122785    86518   -36267     \n   + Misses      17242    10028    -7214     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [rust/datafusion/src/execution/projection.rs](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vcHJvamVjdGlvbi5ycw==) | | |\n   | [rust/datafusion/src/execution/filter.rs](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZmlsdGVyLnJz) | | |\n   | [rust/arrow/src/csv/writer.rs](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY3N2L3dyaXRlci5ycw==) | | |\n   | [rust/datafusion/src/bin/main.rs](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9iaW4vbWFpbi5ycw==) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | ... and [324 more](https://codecov.io/gh/apache/arrow/pull/4844/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=footer). Last update [85fe336...8f8b6c5](https://codecov.io/gh/apache/arrow/pull/4844?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-22T04:42:29.284+0000",
                    "updated": "2019-07-22T04:42:29.284+0000",
                    "started": "2019-07-22T04:42:29.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280228",
                    "issueId": "13244041"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1cdf16cd[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c2acdfe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58bb7d09[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2241edd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@394987c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@36994258[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35c922b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@17390025[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62bbf285[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1ecce708[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@626ca2fc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3d8bbebc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 24 04:37:06 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-24T04:37:06.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5898/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-10T08:20:57.000+0000",
        "updated": "2019-08-01T22:39:42.000+0000",
        "timeoriginalestimate": null,
        "description": "This issue adds a functionality to\u00a0efficiently compute\u00a0 the hash code for\u00a0a consecutive memory region. This functionality is important in practical scenarios because it helps:\r\n * Avoid unnecessary memory copy.\r\n\r\n * Avoid repeated conversions between Java objects & Arrow buffers.\u00a0\r\n\r\nSince the algorithm for calculating hash code has\u00a0 significant performance implications, we need to design an interface so that different algorithms can be easily introduces as plug-ins.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Provide functionality to efficiently compute hash code for arbitrary memory segment",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244041/comment/16891598",
                    "id": "16891598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4844\n[https://github.com/apache/arrow/pull/4844]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-07-24T04:37:06.627+0000",
                    "updated": "2019-07-24T04:37:06.627+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z04irc:",
        "customfield_12314139": null
    }
}