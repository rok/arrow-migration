{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13233601",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601",
    "key": "ARROW-5336",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12591476",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12591476",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13311801",
                    "key": "ARROW-9150",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311801",
                    "fields": {
                        "summary": "Support Dictionary Unification with Concatenate",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12560849",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560849",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13182000",
                    "key": "ARROW-3144",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000",
                    "fields": {
                        "summary": "[C++] Move \"dictionary\" member from DictionaryType to ArrayData to allow for changing dictionaries between Array chunks",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5336/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/526959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace opened a new pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984\n\n\n   The dictionaries still need to have the same index & value types.  It is possible that concatenating two dictionaries still fails because the resulting dictionary has more values than its index type can represent.\r\n   \r\n   The unification will still fail if nulls are present in either dictionary.  The canonical approach seems to be representing nulls in the indices array with a validity bitmap.  The existing unifier had this constraint in place.  My guess is that this was to avoid making the memo table null-aware.  It could be handled without modification to the memo table by using a -1 index and so I could easily add this if desired.  I wasn't sure if support for this non-typical case justified the complexity.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T21:18:05.505+0000",
                    "updated": "2020-12-21T21:18:05.505+0000",
                    "started": "2020-12-21T21:18:05.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526959",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/526960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r546934934\n\n\n\n##########\nFile path: cpp/src/arrow/array/array_dict.cc\n##########\n@@ -44,6 +44,29 @@ namespace arrow {\n using internal::checked_cast;\n using internal::CopyBitmap;\n \n+struct MaxIndexAccessor {\n\nReview comment:\n       The DictionaryUnifier is typed to the value type of the dictionary but not the index type so I needed to create this utility for accessing the max possible value for a given index type.  I wasn't really sure where to put this.  There could also be a general purpose visitor for finding the min/max of all numeric types.  Also, do we have this capability anywhere else in the code base I could just leverage?  This is needed by DictionaryUnifierImpl::GetResultWithIndexType\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T21:20:30.222+0000",
                    "updated": "2020-12-21T21:20:30.222+0000",
                    "started": "2020-12-21T21:20:30.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526960",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/526961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r546936946\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n\nReview comment:\n       The rest of the concatenation functions simply memcpy'd the buffers.  However, the dictionary concatenation needs to map buffers to potentially new index values.  As a result, this function needs to know the type of the buffer for the reinterpret case on line 190.  Also, the fact that memo table indices are 32 bit and dictionary indices could be 64 bit is a potential problem but one that already existed and it seems unlikely that a dictionary array would be used when there are 4B unique values.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T21:25:55.037+0000",
                    "updated": "2020-12-21T21:25:55.037+0000",
                    "started": "2020-12-21T21:25:55.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526961",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/526962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r546937581\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n\nReview comment:\n       I wasn't sure if I should be doing it this way or use a pair of iterators.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T21:27:19.354+0000",
                    "updated": "2020-12-21T21:27:19.354+0000",
                    "started": "2020-12-21T21:27:19.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526962",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/526964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r546938189\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -225,6 +225,86 @@ TEST_F(ConcatenateTest, DictionaryType) {\n   });\n }\n \n+TEST_F(ConcatenateTest, DictionaryTypeDifferentDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  auto concat_expected = DictArrayFromJSON(\n+      dict_type, \"[1, 2, null, 3, 0, null, 8, 6, 5]\",\n+      \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypePartialOverlapDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B4\\\"]\");\n+  auto concat_expected =\n+      DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0, null, 6, 2, 5]\",\n+                        \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeDifferentSizeIndex) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto bigger_dict_type = dictionary(uint16(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[0]\", \"[\\\"A0\\\"]\");\n+  auto dict_two = DictArrayFromJSON(bigger_dict_type, \"[0]\", \"[\\\"B0\\\"]\");\n+  ASSERT_RAISES(Invalid, Concatenate({dict_one, dict_two}).status());\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeCantUnifyNullInDictionary) {\n\nReview comment:\n       This test doesn't add much but it is a handy placeholder in case we decide in the future to allow this type of construct.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T21:28:59.509+0000",
                    "updated": "2020-12-21T21:28:59.509+0000",
                    "started": "2020-12-21T21:28:59.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526964",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/526965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r546939256\n\n\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1367,6 +1367,12 @@ class ARROW_EXPORT DictionaryUnifier {\n   /// after this is called\n   virtual Status GetResult(std::shared_ptr<DataType>* out_type,\n                            std::shared_ptr<Array>* out_dict) = 0;\n+\n+  /// \\brief Return a result DictionaryType with the given index type.  If\n+  /// the index type is not large enough then an invalid status will be returned.\n+  /// The unifier cannot be used after this is called\n+  virtual Status GetResultWithIndexType(std::shared_ptr<DataType> index_type,\n\nReview comment:\n       This could be an overload but the behavior was different enough I felt it warranted its own name.  `GetResult` is not actually used in the code base anywhere but `DictionaryUnifier` is an exported type.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T21:31:36.389+0000",
                    "updated": "2020-12-21T21:31:36.389+0000",
                    "started": "2020-12-21T21:31:36.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526965",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/526974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#issuecomment-749218173\n\n\n   https://issues.apache.org/jira/browse/ARROW-5336\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T21:55:32.343+0000",
                    "updated": "2020-12-21T21:55:32.343+0000",
                    "started": "2020-12-21T21:55:32.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526974",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/530742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r551396579\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -225,6 +225,86 @@ TEST_F(ConcatenateTest, DictionaryType) {\n   });\n }\n \n+TEST_F(ConcatenateTest, DictionaryTypeDifferentDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  auto concat_expected = DictArrayFromJSON(\n+      dict_type, \"[1, 2, null, 3, 0, null, 8, 6, 5]\",\n+      \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypePartialOverlapDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B4\\\"]\");\n+  auto concat_expected =\n+      DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0, null, 6, 2, 5]\",\n+                        \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeDifferentSizeIndex) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto bigger_dict_type = dictionary(uint16(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[0]\", \"[\\\"A0\\\"]\");\n+  auto dict_two = DictArrayFromJSON(bigger_dict_type, \"[0]\", \"[\\\"B0\\\"]\");\n+  ASSERT_RAISES(Invalid, Concatenate({dict_one, dict_two}).status());\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeCantUnifyNullInDictionary) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[0, 1]\", \"[null, \\\"A\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[0, 1]\", \"[null, \\\"B\\\"]\");\n+  ASSERT_RAISES(Invalid, Concatenate({dict_one, dict_two}).status());\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeEnlargedIndices) {\n+  auto size = std::numeric_limits<uint8_t>::max() + 1;\n+  auto dict_type = dictionary(uint8(), uint16());\n+\n+  UInt8Builder index_builder;\n+  ASSERT_OK(index_builder.Reserve(size));\n+  for (auto i = 0; i < size; i++) {\n+    index_builder.UnsafeAppend(i);\n+  }\n+  ASSERT_OK_AND_ASSIGN(auto indices, index_builder.Finish());\n+\n+  UInt16Builder values_builder;\n+  ASSERT_OK(values_builder.Reserve(size));\n+  for (auto i = 0; i < size; i++) {\n+    values_builder.UnsafeAppend(i);\n+  }\n+  ASSERT_OK_AND_ASSIGN(auto dictionary_one, values_builder.Finish());\n+\n+  UInt16Builder values_builder_two;\n+  ASSERT_OK(values_builder_two.Reserve(size));\n+  for (auto i = size; i < 2 * size; i++) {\n\nReview comment:\n       Did you mean `i += 2`? Or simply `UnsafeAppend(i * 2)`?\n\n##########\nFile path: cpp/src/arrow/array/array_dict.cc\n##########\n@@ -44,6 +44,29 @@ namespace arrow {\n using internal::checked_cast;\n using internal::CopyBitmap;\n \n+struct MaxIndexAccessor {\n+  MaxIndexAccessor() {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T&) {\n+    return Status::Invalid(\"Dictionary index types must be integer types\");\n+  }\n+\n+  template <typename T>\n+  enable_if_integer<T, Status> Visit(const T&) {\n+    max_index_value_ = std::numeric_limits<typename T::c_type>::max();\n+    return Status::OK();\n+  }\n+\n+  int64_t max_index_value_ = 0;\n+};\n+\n+Result<int64_t> DictionaryIndexMaxValue(std::shared_ptr<DataType> index_type) {\n\nReview comment:\n       Returning `int64_t` is not right if the index type is `uint64_t`.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -274,7 +329,12 @@ class ConcatenateImpl {\n       ARROW_ASSIGN_OR_RAISE(auto index_buffers, Buffers(1, *fixed));\n       return ConcatenateBuffers(index_buffers, pool_).Value(&out_->buffers[1]);\n     } else {\n-      return Status::NotImplemented(\"Concat with dictionary unification NYI\");\n+      ARROW_ASSIGN_OR_RAISE(auto index_buffers, Buffers(1, *fixed));\n\nReview comment:\n       This seems common to both `if` branches.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n\nReview comment:\n       If `out_data` a `CType*`? If so, spell it out explicitly for clarity. (is a `reinterpret_cast` missing too?)\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1367,6 +1367,12 @@ class ARROW_EXPORT DictionaryUnifier {\n   /// after this is called\n   virtual Status GetResult(std::shared_ptr<DataType>* out_type,\n                            std::shared_ptr<Array>* out_dict) = 0;\n+\n+  /// \\brief Return a result DictionaryType with the given index type.  If\n+  /// the index type is not large enough then an invalid status will be returned.\n+  /// The unifier cannot be used after this is called\n+  virtual Status GetResultWithIndexType(std::shared_ptr<DataType> index_type,\n\nReview comment:\n       Isn't the docstring a bit off? It doesn't seem a `DictionaryType` is returned.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n+      auto old_indices = reinterpret_cast<const CType*>(buffer->data());\n+      auto indices_map = reinterpret_cast<int32_t*>(index_lookup_[i]->mutable_data());\n\nReview comment:\n       Why `mutable_data`? A `const` pointer should be sufficient here.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n+      auto old_indices = reinterpret_cast<const CType*>(buffer->data());\n+      auto indices_map = reinterpret_cast<int32_t*>(index_lookup_[i]->mutable_data());\n+      for (int64_t j = 0; j < buffer->size(); j++) {\n+        out_data[j] = indices_map[old_indices[j]];\n+      }\n+      out_data += buffer->size();\n+    }\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Buffer> out_;\n+  BufferVector& index_buffers_;\n\nReview comment:\n       Our [coding guidelines](https://arrow.apache.org/docs/developers/cpp/development.html#code-style-linting-and-ci) (mostly the Google C++ style guide) strongly recommend const-references.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n+      auto old_indices = reinterpret_cast<const CType*>(buffer->data());\n+      auto indices_map = reinterpret_cast<int32_t*>(index_lookup_[i]->mutable_data());\n+      for (int64_t j = 0; j < buffer->size(); j++) {\n+        out_data[j] = indices_map[old_indices[j]];\n\nReview comment:\n       There are transposition utilities in `util/int_util.h`. They may be more optimized than this scalar loop.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n\nReview comment:\n       Nit: `const auto&`? Though copying the `shared_ptr` is probably not a bottleneck here...\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n+      auto old_indices = reinterpret_cast<const CType*>(buffer->data());\n+      auto indices_map = reinterpret_cast<int32_t*>(index_lookup_[i]->mutable_data());\n+      for (int64_t j = 0; j < buffer->size(); j++) {\n+        out_data[j] = indices_map[old_indices[j]];\n+      }\n+      out_data += buffer->size();\n+    }\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<Buffer> out_;\n+  BufferVector& index_buffers_;\n+  std::vector<std::shared_ptr<Buffer>>& index_lookup_;\n\nReview comment:\n       Also const-ref. And why not use `BufferVector` here too?\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n\nReview comment:\n       While we are at it, can all non-public functions/classes in this module be put in the anonymous namespace? This reduces the number of exported symbols and can also open more optimization opportunities for the compiler.\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -225,6 +225,86 @@ TEST_F(ConcatenateTest, DictionaryType) {\n   });\n }\n \n+TEST_F(ConcatenateTest, DictionaryTypeDifferentDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n\nReview comment:\n       Hmm... can you test with index types larger than 1 byte? There may be an issue with them in the current impl (not sure).\n\n##########\nFile path: cpp/src/arrow/array/array_dict.cc\n##########\n@@ -44,6 +44,29 @@ namespace arrow {\n using internal::checked_cast;\n using internal::CopyBitmap;\n \n+struct MaxIndexAccessor {\n\nReview comment:\n       Which numeric type would you return for the min/max of all numeric types? Let's just stick with integers :-)\r\n   As for where to put it, `util/int_util.h` sounds like a decent place.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n\nReview comment:\n       Doing this is more readable than manually incrementing a pair of iterators in lockstep, IMHO.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T16:06:06.085+0000",
                    "updated": "2021-01-04T16:06:06.085+0000",
                    "started": "2021-01-04T16:06:06.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530742",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554217402\n\n\n\n##########\nFile path: cpp/src/arrow/array/array_dict.cc\n##########\n@@ -44,6 +44,29 @@ namespace arrow {\n using internal::checked_cast;\n using internal::CopyBitmap;\n \n+struct MaxIndexAccessor {\n\nReview comment:\n       Even better, it turns out `util/int_util.h` already had what I needed.  I switched to using `internal::IntegersCanFit`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T21:58:52.698+0000",
                    "updated": "2021-01-08T21:58:52.698+0000",
                    "started": "2021-01-08T21:58:52.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533256",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554217479\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T21:59:05.899+0000",
                    "updated": "2021-01-08T21:59:05.899+0000",
                    "started": "2021-01-08T21:59:05.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533257",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554217651\n\n\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1367,6 +1367,12 @@ class ARROW_EXPORT DictionaryUnifier {\n   /// after this is called\n   virtual Status GetResult(std::shared_ptr<DataType>* out_type,\n                            std::shared_ptr<Array>* out_dict) = 0;\n+\n+  /// \\brief Return a result DictionaryType with the given index type.  If\n+  /// the index type is not large enough then an invalid status will be returned.\n+  /// The unifier cannot be used after this is called\n+  virtual Status GetResultWithIndexType(std::shared_ptr<DataType> index_type,\n\nReview comment:\n       Correct, fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T21:59:39.003+0000",
                    "updated": "2021-01-08T21:59:39.003+0000",
                    "started": "2021-01-08T21:59:39.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533258",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554220491\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -225,6 +225,86 @@ TEST_F(ConcatenateTest, DictionaryType) {\n   });\n }\n \n+TEST_F(ConcatenateTest, DictionaryTypeDifferentDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  auto concat_expected = DictArrayFromJSON(\n+      dict_type, \"[1, 2, null, 3, 0, null, 8, 6, 5]\",\n+      \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypePartialOverlapDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B4\\\"]\");\n+  auto concat_expected =\n+      DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0, null, 6, 2, 5]\",\n+                        \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeDifferentSizeIndex) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto bigger_dict_type = dictionary(uint16(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[0]\", \"[\\\"A0\\\"]\");\n+  auto dict_two = DictArrayFromJSON(bigger_dict_type, \"[0]\", \"[\\\"B0\\\"]\");\n+  ASSERT_RAISES(Invalid, Concatenate({dict_one, dict_two}).status());\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeCantUnifyNullInDictionary) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[0, 1]\", \"[null, \\\"A\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[0, 1]\", \"[null, \\\"B\\\"]\");\n+  ASSERT_RAISES(Invalid, Concatenate({dict_one, dict_two}).status());\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeEnlargedIndices) {\n+  auto size = std::numeric_limits<uint8_t>::max() + 1;\n+  auto dict_type = dictionary(uint8(), uint16());\n+\n+  UInt8Builder index_builder;\n+  ASSERT_OK(index_builder.Reserve(size));\n+  for (auto i = 0; i < size; i++) {\n+    index_builder.UnsafeAppend(i);\n+  }\n+  ASSERT_OK_AND_ASSIGN(auto indices, index_builder.Finish());\n+\n+  UInt16Builder values_builder;\n+  ASSERT_OK(values_builder.Reserve(size));\n+  for (auto i = 0; i < size; i++) {\n+    values_builder.UnsafeAppend(i);\n+  }\n+  ASSERT_OK_AND_ASSIGN(auto dictionary_one, values_builder.Finish());\n+\n+  UInt16Builder values_builder_two;\n+  ASSERT_OK(values_builder_two.Reserve(size));\n+  for (auto i = size; i < 2 * size; i++) {\n\nReview comment:\n       I don't think `i*2` would work.  It's building up two arrays, the first has values [0,size) and the second has values [size,2*size).  I changed it a little so it is one loop if that is clearer.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T22:07:45.991+0000",
                    "updated": "2021-01-08T22:07:45.991+0000",
                    "started": "2021-01-08T22:07:45.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533262",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554220685\n\n\n\n##########\nFile path: cpp/src/arrow/array/array_dict.cc\n##########\n@@ -44,6 +44,29 @@ namespace arrow {\n using internal::checked_cast;\n using internal::CopyBitmap;\n \n+struct MaxIndexAccessor {\n+  MaxIndexAccessor() {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T&) {\n+    return Status::Invalid(\"Dictionary index types must be integer types\");\n+  }\n+\n+  template <typename T>\n+  enable_if_integer<T, Status> Visit(const T&) {\n+    max_index_value_ = std::numeric_limits<typename T::c_type>::max();\n+    return Status::OK();\n+  }\n+\n+  int64_t max_index_value_ = 0;\n+};\n+\n+Result<int64_t> DictionaryIndexMaxValue(std::shared_ptr<DataType> index_type) {\n\nReview comment:\n       Good catch.  N/A anymore since using int_util.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n+      auto old_indices = reinterpret_cast<const CType*>(buffer->data());\n+      auto indices_map = reinterpret_cast<int32_t*>(index_lookup_[i]->mutable_data());\n\nReview comment:\n       Fixed.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -274,7 +329,12 @@ class ConcatenateImpl {\n       ARROW_ASSIGN_OR_RAISE(auto index_buffers, Buffers(1, *fixed));\n       return ConcatenateBuffers(index_buffers, pool_).Value(&out_->buffers[1]);\n     } else {\n-      return Status::NotImplemented(\"Concat with dictionary unification NYI\");\n+      ARROW_ASSIGN_OR_RAISE(auto index_buffers, Buffers(1, *fixed));\n\nReview comment:\n       Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T22:08:45.706+0000",
                    "updated": "2021-01-08T22:08:45.706+0000",
                    "started": "2021-01-08T22:08:45.706+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533263",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554221000\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n\nReview comment:\n       Yes, the missing `reinterpret_cast` was a bug (as I think you noticed) for index types with more than one byte.  Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T22:09:08.749+0000",
                    "updated": "2021-01-08T22:09:08.749+0000",
                    "started": "2021-01-08T22:09:08.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533264",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554221067\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n\nReview comment:\n       Fixed anyways for consistency.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T22:09:21.913+0000",
                    "updated": "2021-01-08T22:09:21.913+0000",
                    "started": "2021-01-08T22:09:21.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533265",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554221218\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -225,6 +225,86 @@ TEST_F(ConcatenateTest, DictionaryType) {\n   });\n }\n \n+TEST_F(ConcatenateTest, DictionaryTypeDifferentDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n\nReview comment:\n       I added a test and there was an issue.  Both the missing reinterpret cast and the way I was computing size (# bytes vs. # elements)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T22:09:46.194+0000",
                    "updated": "2021-01-08T22:09:46.194+0000",
                    "started": "2021-01-08T22:09:46.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533267",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#issuecomment-757028786\n\n\n   Thanks for the insight @pitrou .  Your guess was right, there was a bug with multi-byte index types.  I believe I have addressed your concerns.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T22:24:21.049+0000",
                    "updated": "2021-01-08T22:24:21.049+0000",
                    "started": "2021-01-08T22:24:21.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533269",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#issuecomment-757028786\n\n\n   Thanks for the insight @pitrou .  Your guess was right, there was a bug with multi-byte index types.  I believe I have addressed your concerns.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:04:01.955+0000",
                    "updated": "2021-01-10T04:04:01.955+0000",
                    "started": "2021-01-10T04:04:01.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533634",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/533665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984#discussion_r554217402\n\n\n\n##########\nFile path: cpp/src/arrow/array/array_dict.cc\n##########\n@@ -44,6 +44,29 @@ namespace arrow {\n using internal::checked_cast;\n using internal::CopyBitmap;\n \n+struct MaxIndexAccessor {\n\nReview comment:\n       Even better, it turns out `util/int_util.h` already had what I needed.  I switched to using `internal::IntegersCanFit`.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n\nReview comment:\n       Done\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1367,6 +1367,12 @@ class ARROW_EXPORT DictionaryUnifier {\n   /// after this is called\n   virtual Status GetResult(std::shared_ptr<DataType>* out_type,\n                            std::shared_ptr<Array>* out_dict) = 0;\n+\n+  /// \\brief Return a result DictionaryType with the given index type.  If\n+  /// the index type is not large enough then an invalid status will be returned.\n+  /// The unifier cannot be used after this is called\n+  virtual Status GetResultWithIndexType(std::shared_ptr<DataType> index_type,\n\nReview comment:\n       Correct, fixed.\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -225,6 +225,86 @@ TEST_F(ConcatenateTest, DictionaryType) {\n   });\n }\n \n+TEST_F(ConcatenateTest, DictionaryTypeDifferentDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  auto concat_expected = DictArrayFromJSON(\n+      dict_type, \"[1, 2, null, 3, 0, null, 8, 6, 5]\",\n+      \"[\\\"A0\\\", \\\"A1\\\", \\\"A2\\\", \\\"A3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B2\\\", \\\"B3\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypePartialOverlapDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0]\",\n+                                    \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[null, 4, 2, 1]\",\n+                                    \"[\\\"B0\\\", \\\"B1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B4\\\"]\");\n+  auto concat_expected =\n+      DictArrayFromJSON(dict_type, \"[1, 2, null, 3, 0, null, 6, 2, 5]\",\n+                        \"[\\\"A0\\\", \\\"A1\\\", \\\"C2\\\", \\\"C3\\\", \\\"B0\\\", \\\"B1\\\", \\\"B4\\\"]\");\n+  ASSERT_OK_AND_ASSIGN(auto concat_actual, Concatenate({dict_one, dict_two}));\n+  AssertArraysEqual(*concat_expected, *concat_actual);\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeDifferentSizeIndex) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto bigger_dict_type = dictionary(uint16(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[0]\", \"[\\\"A0\\\"]\");\n+  auto dict_two = DictArrayFromJSON(bigger_dict_type, \"[0]\", \"[\\\"B0\\\"]\");\n+  ASSERT_RAISES(Invalid, Concatenate({dict_one, dict_two}).status());\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeCantUnifyNullInDictionary) {\n+  auto dict_type = dictionary(uint8(), utf8());\n+  auto dict_one = DictArrayFromJSON(dict_type, \"[0, 1]\", \"[null, \\\"A\\\"]\");\n+  auto dict_two = DictArrayFromJSON(dict_type, \"[0, 1]\", \"[null, \\\"B\\\"]\");\n+  ASSERT_RAISES(Invalid, Concatenate({dict_one, dict_two}).status());\n+}\n+\n+TEST_F(ConcatenateTest, DictionaryTypeEnlargedIndices) {\n+  auto size = std::numeric_limits<uint8_t>::max() + 1;\n+  auto dict_type = dictionary(uint8(), uint16());\n+\n+  UInt8Builder index_builder;\n+  ASSERT_OK(index_builder.Reserve(size));\n+  for (auto i = 0; i < size; i++) {\n+    index_builder.UnsafeAppend(i);\n+  }\n+  ASSERT_OK_AND_ASSIGN(auto indices, index_builder.Finish());\n+\n+  UInt16Builder values_builder;\n+  ASSERT_OK(values_builder.Reserve(size));\n+  for (auto i = 0; i < size; i++) {\n+    values_builder.UnsafeAppend(i);\n+  }\n+  ASSERT_OK_AND_ASSIGN(auto dictionary_one, values_builder.Finish());\n+\n+  UInt16Builder values_builder_two;\n+  ASSERT_OK(values_builder_two.Reserve(size));\n+  for (auto i = size; i < 2 * size; i++) {\n\nReview comment:\n       I don't think `i*2` would work.  It's building up two arrays, the first has values [0,size) and the second has values [size,2*size).  I changed it a little so it is one loop if that is clearer.\n\n##########\nFile path: cpp/src/arrow/array/array_dict.cc\n##########\n@@ -44,6 +44,29 @@ namespace arrow {\n using internal::checked_cast;\n using internal::CopyBitmap;\n \n+struct MaxIndexAccessor {\n+  MaxIndexAccessor() {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T&) {\n+    return Status::Invalid(\"Dictionary index types must be integer types\");\n+  }\n+\n+  template <typename T>\n+  enable_if_integer<T, Status> Visit(const T&) {\n+    max_index_value_ = std::numeric_limits<typename T::c_type>::max();\n+    return Status::OK();\n+  }\n+\n+  int64_t max_index_value_ = 0;\n+};\n+\n+Result<int64_t> DictionaryIndexMaxValue(std::shared_ptr<DataType> index_type) {\n\nReview comment:\n       Good catch.  N/A anymore since using int_util.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n+      auto old_indices = reinterpret_cast<const CType*>(buffer->data());\n+      auto indices_map = reinterpret_cast<int32_t*>(index_lookup_[i]->mutable_data());\n\nReview comment:\n       Fixed.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -274,7 +329,12 @@ class ConcatenateImpl {\n       ARROW_ASSIGN_OR_RAISE(auto index_buffers, Buffers(1, *fixed));\n       return ConcatenateBuffers(index_buffers, pool_).Value(&out_->buffers[1]);\n     } else {\n-      return Status::NotImplemented(\"Concat with dictionary unification NYI\");\n+      ARROW_ASSIGN_OR_RAISE(auto index_buffers, Buffers(1, *fixed));\n\nReview comment:\n       Fixed.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n\nReview comment:\n       Yes, the missing `reinterpret_cast` was a bug (as I think you noticed) for index types with more than one byte.  Fixed.\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -163,6 +163,46 @@ static Status PutOffsets(const std::shared_ptr<Buffer>& src, Offset first_offset\n   return Status::OK();\n }\n \n+struct DictionaryConcatenate {\n+  DictionaryConcatenate(BufferVector& index_buffers,\n+                        std::vector<std::shared_ptr<Buffer>>& index_lookup,\n+                        MemoryPool* pool)\n+      : out_(nullptr),\n+        index_buffers_(index_buffers),\n+        index_lookup_(index_lookup),\n+        pool_(pool) {}\n+\n+  template <typename T>\n+  enable_if_t<!is_integer_type<T>::value, Status> Visit(const T& t) {\n+    return Status::Invalid(\"Dictionary indices must be integral types\");\n+  }\n+\n+  template <typename T, typename CType = typename T::c_type>\n+  enable_if_integer<T, Status> Visit(const T& index_type) {\n+    int64_t out_length = 0;\n+    for (const auto& buffer : index_buffers_) {\n+      out_length += buffer->size();\n+    }\n+    ARROW_ASSIGN_OR_RAISE(out_, AllocateBuffer(out_length, pool_));\n+    auto out_data = out_->mutable_data();\n+    for (size_t i = 0; i < index_buffers_.size(); i++) {\n+      auto buffer = index_buffers_[i];\n\nReview comment:\n       Fixed anyways for consistency.\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -225,6 +225,86 @@ TEST_F(ConcatenateTest, DictionaryType) {\n   });\n }\n \n+TEST_F(ConcatenateTest, DictionaryTypeDifferentDictionaries) {\n+  auto dict_type = dictionary(uint8(), utf8());\n\nReview comment:\n       I added a test and there was an issue.  Both the missing reinterpret cast and the way I was computing size (# bytes vs. # elements)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:06:42.153+0000",
                    "updated": "2021-01-10T04:06:42.153+0000",
                    "started": "2021-01-10T04:06:42.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533665",
                    "issueId": "13233601"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/worklog/534149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8984:\nURL: https://github.com/apache/arrow/pull/8984\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-11T08:50:10.401+0000",
                    "updated": "2021-01-11T08:50:10.401+0000",
                    "started": "2021-01-11T08:50:10.401+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "534149",
                    "issueId": "13233601"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@622dbd6b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ee7b6cf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b5985e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@680b1782[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a046da9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2ba23997[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c738fce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3cf42ec5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55f475d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6fa0807f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fbd6fba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6222f48e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jan 11 08:49:57 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-01-11T08:49:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5336/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2019-05-15T21:21:38.000+0000",
        "updated": "2021-01-12T10:53:05.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently (as of ARROW-3144) if any dictionary is different, an error is returned",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement arrow::Concatenate for dictionary-encoded arrays with unequal dictionaries",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/comment/16931601",
                    "id": "16931601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~bkietz]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-17T16:06:06.666+0000",
                    "updated": "2019-09-17T16:06:06.666+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/comment/17060349",
                    "id": "17060349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~wesm] would it be acceptable to require that if two dictionaries differ then one must be a prefix of the other?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-16T16:23:17.810+0000",
                    "updated": "2020-03-16T16:23:17.810+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/comment/17133843",
                    "id": "17133843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~bkietz] do you plan to implement this for 1.0.0?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-12T02:09:50.234+0000",
                    "updated": "2020-06-12T02:09:50.234+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/comment/17251442",
                    "id": "17251442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~wesm] [~bkietz] I'm planning on taking this for 3.0.0 (after discussion with Ben).\u00a0 A few questions:\r\n\r\nThe I/O APIs and builder API make use of delta dictionaries.\u00a0 However, these seem to not be required in the `Array` itself.\u00a0 By the time we arrive at `Array` any \"deltaing\" has been taken care of.\u00a0 So I believe I do not have to worry about delta dictionaries for this correct?\r\n\r\nThere is an existing `DictionaryUnifier` which seems to be unused.\u00a0 There is some comment referring to `Transpose` but that method does not appear to make use of this.\u00a0 However, it appears it is a good place to start.\u00a0 Is there any reason this would not be so?\r\n\r\nThe existing `DictionaryUnifier`has a check on `null_count` with a message `Cannot yet unify dictionaries with nulls`.\u00a0 From what I've read `null_count` is only referring to the nulls in the array's buffer and not nulls in the array data's dictionary itself.\u00a0 I'm not sure how these would affect unification.\u00a0 These fields don't have an index in the dictionary so they can be safely ignored correct?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-12-18T02:04:20.788+0000",
                    "updated": "2020-12-18T02:04:20.788+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/comment/17251715",
                    "id": "17251715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "> By the time we arrive at `Array` any \"deltaing\" has been taken care of. So I believe I do not have to worry about delta dictionaries for this correct?\r\n\r\nThis is right.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-12-18T11:34:33.635+0000",
                    "updated": "2020-12-18T11:34:33.635+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/comment/17252084",
                    "id": "17252084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "So the unifier currently reassigns the index type to be as small as needed.\r\n\r\nPros:\r\n * Allows unification of arrays that don't have the same index type\r\n * Resulting dictionary will be as space efficient as possible\r\n\r\nCons:\r\n * Combining arrays could modify the type of the array\r\n * We don't tolerate differences in other types (e.g. we can't combine int8() with int16())\r\n\r\nRight now I'm planning on disabling this for concatenate.\u00a0 All incoming arrays must have identical value and index types and the resulting array will have the same value and index type.\u00a0 I will leave the capability in the unifier but allow for an index type to be specified that will override the auto-calculate.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-12-19T02:22:56.495+0000",
                    "updated": "2020-12-19T02:22:56.495+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601/comment/17262486",
                    "id": "17262486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8984\n[https://github.com/apache/arrow/pull/8984]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-01-11T08:49:57.602+0000",
                    "updated": "2021-01-11T08:49:57.602+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|z02qhs:",
        "customfield_12314139": null
    }
}