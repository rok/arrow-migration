{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13282844",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844",
    "key": "ARROW-7744",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12625023",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12625023",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13324045",
                    "key": "ARROW-9825",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324045",
                    "fields": {
                        "summary": "[FlightRPC] Add a \"Flight SQL\" extension on top of FlightRPC ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12628619",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12628619",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13417570",
                    "key": "ARROW-15111",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417570",
                    "fields": {
                        "summary": "[C++] Implement ODBC driver \"wrapper\" using FlightSQL",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12648503",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12648503",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13424739",
                    "key": "ARROW-15452",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424739",
                    "fields": {
                        "summary": "[FlightRPC][Java] JDBC driver for Flight SQL",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jduong",
            "name": "jduong",
            "key": "jduong",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "James Duong",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7744/votes",
            "votes": 2,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/381048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver\nURL: https://github.com/apache/arrow/pull/6343\n \n \n   This is a starting point for the Flight JDBC driver. The follow test passes, executing a query against the Rust `flight-server` example and fetching one value.\r\n   \r\n   ```java\r\n     @Test\r\n     public void executeQuery() throws SQLException {\r\n       try (Connection conn = driver.connect(\"jdbc:arrow://localhost:50051\", new Properties())) {\r\n         try (Statement stmt = conn.createStatement()) {\r\n           try (ResultSet rs = stmt.executeQuery(\"SELECT id FROM alltypes_plain\")) {\r\n             assertTrue(rs.next());\r\n             assertEquals(5, rs.getInt(1));\r\n           }\r\n         }\r\n       }\r\n     }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-03T16:04:05.133+0000",
                    "updated": "2020-02-03T16:04:05.133+0000",
                    "started": "2020-02-03T16:04:05.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "381048",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/381075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#issuecomment-581502956\n \n \n   https://issues.apache.org/jira/browse/ARROW-7744\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-03T16:37:46.531+0000",
                    "updated": "2020-02-03T16:37:46.531+0000",
                    "started": "2020-02-03T16:37:46.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "381075",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/384019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r376743628\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/Driver.java\n ##########\n @@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Driver.\n+ */\n+public class Driver implements java.sql.Driver {\n+\n+  private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Driver.class);\n+\n+  /** JDBC connection string prefix. */\n+  private static final String PREFIX = \"jdbc:arrow://\";\n \n Review comment:\n   Flight has a set of URI schemes (`grpc+tcp`, `grpc+tls`, etc), maybe those should be reflected?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T00:17:56.006+0000",
                    "updated": "2020-02-09T00:17:56.006+0000",
                    "started": "2020-02-09T00:17:56.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384019",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/384020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r376743674\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/Driver.java\n ##########\n @@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Driver.\n+ */\n+public class Driver implements java.sql.Driver {\n+\n+  private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Driver.class);\n+\n+  /** JDBC connection string prefix. */\n+  private static final String PREFIX = \"jdbc:arrow://\";\n+\n+  @Override\n+  public Connection connect(String url, Properties properties) throws SQLException {\n+    logger.info(\"connect() url={}\", url);\n+    //TODO this needs much more work to parse full URLs but this is enough to get end to end tests running\n \n Review comment:\n   [`java.net.URI`](https://docs.oracle.com/javase/7/docs/api/java/net/URI.html) should be able to do all the parsing.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T00:17:56.340+0000",
                    "updated": "2020-02-09T00:17:56.340+0000",
                    "started": "2020-02-09T00:17:56.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384020",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/384021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r376743703\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/Driver.java\n ##########\n @@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Driver.\n+ */\n+public class Driver implements java.sql.Driver {\n+\n+  private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Driver.class);\n+\n+  /** JDBC connection string prefix. */\n+  private static final String PREFIX = \"jdbc:arrow://\";\n \n Review comment:\n   Then the Flight URI (minus the jdbc prefix) could get passed to the `FlightConnection`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T00:17:56.349+0000",
                    "updated": "2020-02-09T00:17:56.349+0000",
                    "started": "2020-02-09T00:17:56.349+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384021",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/384022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r376743812\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightStatement.java\n ##########\n @@ -0,0 +1,275 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.CallOptions;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.Ticket;\n+import org.apache.arrow.memory.RootAllocator;\n+\n+/**\n+ * Statement.\n+ */\n+public class FlightStatement implements java.sql.Statement {\n+\n+  protected final FlightConnection flightConnection;\n+\n+  public FlightStatement(FlightConnection flightConnection) {\n+    this.flightConnection = flightConnection;\n+  }\n+\n+  @Override\n+  public ResultSet executeQuery(String query) throws SQLException {\n+\n+    FlightClient client = FlightClient.builder()\n+        .allocator(new RootAllocator(Long.MAX_VALUE))\n+        .location(Location.forGrpcInsecure(flightConnection.host, flightConnection.port))\n+        .build();\n+\n+    CallOption callOptions = CallOptions.timeout(5, TimeUnit.SECONDS);\n+\n+    Ticket ticket = new Ticket(query.getBytes());\n \n Review comment:\n   I don't think there's been a \"right way\" to use Flight but I think so far things call `GetFlightInfo` to get a ticket, then `DoGet` (isn't that how Dremio uses Flight for their database-like product?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T00:17:56.352+0000",
                    "updated": "2020-02-09T00:17:56.352+0000",
                    "started": "2020-02-09T00:17:56.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384022",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/384023",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r376743753\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightStatement.java\n ##########\n @@ -0,0 +1,275 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.CallOptions;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.Ticket;\n+import org.apache.arrow.memory.RootAllocator;\n+\n+/**\n+ * Statement.\n+ */\n+public class FlightStatement implements java.sql.Statement {\n+\n+  protected final FlightConnection flightConnection;\n+\n+  public FlightStatement(FlightConnection flightConnection) {\n+    this.flightConnection = flightConnection;\n+  }\n+\n+  @Override\n+  public ResultSet executeQuery(String query) throws SQLException {\n+\n+    FlightClient client = FlightClient.builder()\n \n Review comment:\n   Ideally this client should be able to live in the driver instance and get shared between statements.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T00:17:56.438+0000",
                    "updated": "2020-02-09T00:17:56.438+0000",
                    "started": "2020-02-09T00:17:56.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384023",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/384024",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r376743898\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightStatement.java\n ##########\n @@ -0,0 +1,275 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.CallOptions;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.Ticket;\n+import org.apache.arrow.memory.RootAllocator;\n+\n+/**\n+ * Statement.\n+ */\n+public class FlightStatement implements java.sql.Statement {\n+\n+  protected final FlightConnection flightConnection;\n+\n+  public FlightStatement(FlightConnection flightConnection) {\n+    this.flightConnection = flightConnection;\n+  }\n+\n+  @Override\n+  public ResultSet executeQuery(String query) throws SQLException {\n+\n+    FlightClient client = FlightClient.builder()\n+        .allocator(new RootAllocator(Long.MAX_VALUE))\n+        .location(Location.forGrpcInsecure(flightConnection.host, flightConnection.port))\n+        .build();\n+\n+    CallOption callOptions = CallOptions.timeout(5, TimeUnit.SECONDS);\n \n Review comment:\n   Note that this timeout is for the entire RPC, i.e. a query that takes more than 5 seconds (to stream all the data or something) would get cancelled. Unfortunately gRPC doesn't make it easy to have per-message timeouts.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-09T00:17:56.440+0000",
                    "updated": "2020-02-09T00:17:56.440+0000",
                    "started": "2020-02-09T00:17:56.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384024",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/384969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r377439707\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightStatement.java\n ##########\n @@ -0,0 +1,275 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.arrow.flight.CallOption;\n+import org.apache.arrow.flight.CallOptions;\n+import org.apache.arrow.flight.FlightClient;\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.flight.Location;\n+import org.apache.arrow.flight.Ticket;\n+import org.apache.arrow.memory.RootAllocator;\n+\n+/**\n+ * Statement.\n+ */\n+public class FlightStatement implements java.sql.Statement {\n+\n+  protected final FlightConnection flightConnection;\n+\n+  public FlightStatement(FlightConnection flightConnection) {\n+    this.flightConnection = flightConnection;\n+  }\n+\n+  @Override\n+  public ResultSet executeQuery(String query) throws SQLException {\n+\n+    FlightClient client = FlightClient.builder()\n+        .allocator(new RootAllocator(Long.MAX_VALUE))\n+        .location(Location.forGrpcInsecure(flightConnection.host, flightConnection.port))\n+        .build();\n+\n+    CallOption callOptions = CallOptions.timeout(5, TimeUnit.SECONDS);\n+\n+    Ticket ticket = new Ticket(query.getBytes());\n \n Review comment:\n   Thanks. I've been reading the Flight documentation again and I can see that this could make sense. However, this is all very specific to how the Flight server might implement support for arbitrary queries so I'm already running into questions about what makes sense to contribute to the Arrow repo versus just creating a JDBC driver directly for a particular Flight implementation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-11T04:11:29.881+0000",
                    "updated": "2020-02-11T04:11:29.881+0000",
                    "started": "2020-02-11T04:11:29.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "384969",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/386371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "julianhyde commented on issue #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#issuecomment-585528384\n \n \n   It's worth considering Calcite's Avatica as the basis for the JDBC driver.\r\n   \r\n   Avatica's remote driver has a pluggable RPC layer - existing implementations are JSON over HTTP and Protobuf - and I think Flight would slot in as a third.\r\n   \r\n   Avatica also has a local driver that shares a lot of code with the remote driver. That would allow people to switch between a Flight-based remote driver and a local driver, and see the same behavior.\r\n   \r\n   Not directly relevant to this effort, but I would love to use Arrow (even without Flight) as the bulk data format for other Avatica-based drivers. There are certainly Calcite clients who would like to receive a batch of rows as an Arrow blob rather than making thousands of calls to `ResultSet` methods just to pull the data through the membrane. Any JDBC client could call `resultSet.unwrap(ArrowBatch.class)` just on the off-chance that their driver supports direct access to the Arrow data.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-13T03:12:14.040+0000",
                    "updated": "2020-02-13T03:12:14.040+0000",
                    "started": "2020-02-13T03:12:14.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "386371",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/388106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#issuecomment-586721118\n \n \n   @julianhyde Thanks for the info. This does sound interesting and it would be great to see Avatica benefit from Arrow.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-16T15:46:08.147+0000",
                    "updated": "2020-02-16T15:46:08.147+0000",
                    "started": "2020-02-16T15:46:08.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "388106",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/389383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r381198086\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightResultSet.java\n ##########\n @@ -0,0 +1,1062 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+/**\n+ * ResultSet.\n+ */\n+public class FlightResultSet implements java.sql.ResultSet {\n+\n+  /** Stream of RecordBatch instances. */\n+  private final FlightStream stream;\n+\n+  /** The current record batch. */\n+  private VectorSchemaRoot root;\n+\n+  /** Current row index into the current batch. */\n+  private int batchIndex;\n+\n+  /** Current row index into the stream. */\n+  private int rowIndex = -1;\n+\n+  /** Cache whether the last accessor method encountered a null value. */\n+  private boolean wasNull;\n+\n+  /**\n+   * Create a ResultSet to wrap a FlightStream.\n+   */\n+  public FlightResultSet(final FlightStream stream) {\n+    this.stream = stream;\n+\n+    // fetch the first batch right away so we have meta-data\n+    getNextBatch();\n+  }\n+\n+  @Override\n+  public boolean next() throws SQLException {\n+    if (batchIndex + 1 == root.getRowCount()) {\n+      if (getNextBatch()) {\n+        batchIndex++;\n \n Review comment:\n   Here we should reset batchIndex to 0?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T10:17:12.150+0000",
                    "updated": "2020-02-19T10:17:12.150+0000",
                    "started": "2020-02-19T10:17:12.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389383",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/389385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r381200499\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightResultSet.java\n ##########\n @@ -0,0 +1,1062 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+/**\n+ * ResultSet.\n+ */\n+public class FlightResultSet implements java.sql.ResultSet {\n+\n+  /** Stream of RecordBatch instances. */\n+  private final FlightStream stream;\n+\n+  /** The current record batch. */\n+  private VectorSchemaRoot root;\n+\n+  /** Current row index into the current batch. */\n+  private int batchIndex;\n+\n+  /** Current row index into the stream. */\n+  private int rowIndex = -1;\n+\n+  /** Cache whether the last accessor method encountered a null value. */\n+  private boolean wasNull;\n+\n+  /**\n+   * Create a ResultSet to wrap a FlightStream.\n+   */\n+  public FlightResultSet(final FlightStream stream) {\n+    this.stream = stream;\n+\n+    // fetch the first batch right away so we have meta-data\n+    getNextBatch();\n+  }\n+\n+  @Override\n+  public boolean next() throws SQLException {\n+    if (batchIndex + 1 == root.getRowCount()) {\n+      if (getNextBatch()) {\n+        batchIndex++;\n+        rowIndex++;\n+        return true;\n+      } else {\n+        return false;\n+      }\n+    } else {\n+      batchIndex++;\n+      rowIndex++;\n+      return true;\n+    }\n+  }\n+\n+  private boolean getNextBatch() {\n+    batchIndex = -1;\n+    if (stream.next()) {\n+      root = stream.getRoot();\n+      return true;\n+    } else {\n+      root = null;\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex) throws SQLException {\n+    final Object value = this.root.getFieldVectors().get(columnIndex - 1).getObject(batchIndex);\n+    this.wasNull = value == null;\n+    return value;\n+  }\n+\n+  @Override\n+  public String getString(int i) throws SQLException {\n+    return ResultSetHelper.getString(getObject(i));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(int i) throws SQLException {\n+    return ResultSetHelper.getBoolean(getObject(i));\n+  }\n+\n+  @Override\n+  public boolean wasNull() throws SQLException {\n+    return wasNull;\n+  }\n+\n+  @Override\n+  public void close() throws SQLException {\n+    try {\n+      stream.close();\n+    } catch (Exception e) {\n+      throw new SQLException(e);\n+    }\n+  }\n+\n+  @Override\n+  public byte getByte(int i) throws SQLException {\n+    return ResultSetHelper.getByte(getObject(i));\n+  }\n+\n+  @Override\n+  public short getShort(int i) throws SQLException {\n+    return ResultSetHelper.getShort(getObject(i));\n+  }\n+\n+  @Override\n+  public int getInt(int i) throws SQLException {\n+    return ResultSetHelper.getInt(getObject(i));\n+  }\n+\n+  @Override\n+  public long getLong(int i) throws SQLException {\n+    return ResultSetHelper.getLong(getObject(i));\n+  }\n+\n+  @Override\n+  public float getFloat(int i) throws SQLException {\n+    return ResultSetHelper.getFloat(getObject(i));\n+  }\n+\n+  @Override\n+  public double getDouble(int i) throws SQLException {\n+    return ResultSetHelper.getDouble(getObject(i));\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(int i) throws SQLException {\n+    return ResultSetHelper.getBytes(getObject(i));\n+  }\n+\n+  @Override\n+  public Date getDate(int i) throws SQLException {\n+    return ResultSetHelper.getDate(getObject(i));\n+  }\n+\n+  @Override\n+  public Time getTime(int i) throws SQLException {\n+    return ResultSetHelper.getTime(getObject(i));\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(int i) throws SQLException {\n+    return ResultSetHelper.getTimestamp(getObject(i));\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getUnicodeStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getString(String columnName) throws SQLException {\n+    return ResultSetHelper.getString(getObject(columnName));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(String columnName) throws SQLException {\n+    return ResultSetHelper.getBoolean(getObject(columnName));\n+  }\n+\n+  @Override\n+  public byte getByte(String columnName) throws SQLException {\n+    return ResultSetHelper.getByte(getObject(columnName));\n+  }\n+\n+  @Override\n+  public short getShort(String columnName) throws SQLException {\n+    return ResultSetHelper.getShort(getObject(columnName));\n+  }\n+\n+  @Override\n+  public int getInt(String columnName) throws SQLException {\n+    return ResultSetHelper.getInt(getObject(columnName));\n \n Review comment:\n   There are boxing/unboxing overheads here, which should be eliminated in the future. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T10:21:26.617+0000",
                    "updated": "2020-02-19T10:21:26.617+0000",
                    "started": "2020-02-19T10:21:26.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389385",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/389387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r381202695\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightResultSet.java\n ##########\n @@ -0,0 +1,1062 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+/**\n+ * ResultSet.\n+ */\n+public class FlightResultSet implements java.sql.ResultSet {\n+\n+  /** Stream of RecordBatch instances. */\n+  private final FlightStream stream;\n+\n+  /** The current record batch. */\n+  private VectorSchemaRoot root;\n+\n+  /** Current row index into the current batch. */\n+  private int batchIndex;\n+\n+  /** Current row index into the stream. */\n+  private int rowIndex = -1;\n+\n+  /** Cache whether the last accessor method encountered a null value. */\n+  private boolean wasNull;\n+\n+  /**\n+   * Create a ResultSet to wrap a FlightStream.\n+   */\n+  public FlightResultSet(final FlightStream stream) {\n+    this.stream = stream;\n+\n+    // fetch the first batch right away so we have meta-data\n+    getNextBatch();\n+  }\n+\n+  @Override\n+  public boolean next() throws SQLException {\n+    if (batchIndex + 1 == root.getRowCount()) {\n+      if (getNextBatch()) {\n+        batchIndex++;\n+        rowIndex++;\n+        return true;\n+      } else {\n+        return false;\n+      }\n+    } else {\n+      batchIndex++;\n+      rowIndex++;\n+      return true;\n+    }\n+  }\n+\n+  private boolean getNextBatch() {\n+    batchIndex = -1;\n+    if (stream.next()) {\n+      root = stream.getRoot();\n+      return true;\n+    } else {\n+      root = null;\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex) throws SQLException {\n+    final Object value = this.root.getFieldVectors().get(columnIndex - 1).getObject(batchIndex);\n+    this.wasNull = value == null;\n+    return value;\n+  }\n+\n+  @Override\n+  public String getString(int i) throws SQLException {\n+    return ResultSetHelper.getString(getObject(i));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(int i) throws SQLException {\n+    return ResultSetHelper.getBoolean(getObject(i));\n+  }\n+\n+  @Override\n+  public boolean wasNull() throws SQLException {\n+    return wasNull;\n+  }\n+\n+  @Override\n+  public void close() throws SQLException {\n+    try {\n+      stream.close();\n+    } catch (Exception e) {\n+      throw new SQLException(e);\n+    }\n+  }\n+\n+  @Override\n+  public byte getByte(int i) throws SQLException {\n+    return ResultSetHelper.getByte(getObject(i));\n+  }\n+\n+  @Override\n+  public short getShort(int i) throws SQLException {\n+    return ResultSetHelper.getShort(getObject(i));\n+  }\n+\n+  @Override\n+  public int getInt(int i) throws SQLException {\n+    return ResultSetHelper.getInt(getObject(i));\n+  }\n+\n+  @Override\n+  public long getLong(int i) throws SQLException {\n+    return ResultSetHelper.getLong(getObject(i));\n+  }\n+\n+  @Override\n+  public float getFloat(int i) throws SQLException {\n+    return ResultSetHelper.getFloat(getObject(i));\n+  }\n+\n+  @Override\n+  public double getDouble(int i) throws SQLException {\n+    return ResultSetHelper.getDouble(getObject(i));\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(int i) throws SQLException {\n+    return ResultSetHelper.getBytes(getObject(i));\n+  }\n+\n+  @Override\n+  public Date getDate(int i) throws SQLException {\n+    return ResultSetHelper.getDate(getObject(i));\n+  }\n+\n+  @Override\n+  public Time getTime(int i) throws SQLException {\n+    return ResultSetHelper.getTime(getObject(i));\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(int i) throws SQLException {\n+    return ResultSetHelper.getTimestamp(getObject(i));\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getUnicodeStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getString(String columnName) throws SQLException {\n+    return ResultSetHelper.getString(getObject(columnName));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(String columnName) throws SQLException {\n+    return ResultSetHelper.getBoolean(getObject(columnName));\n+  }\n+\n+  @Override\n+  public byte getByte(String columnName) throws SQLException {\n+    return ResultSetHelper.getByte(getObject(columnName));\n+  }\n+\n+  @Override\n+  public short getShort(String columnName) throws SQLException {\n+    return ResultSetHelper.getShort(getObject(columnName));\n+  }\n+\n+  @Override\n+  public int getInt(String columnName) throws SQLException {\n+    return ResultSetHelper.getInt(getObject(columnName));\n+  }\n+\n+  @Override\n+  public long getLong(String columnName) throws SQLException {\n+    return ResultSetHelper.getLong(getObject(columnName));\n+  }\n+\n+  @Override\n+  public float getFloat(String columnName) throws SQLException {\n+    return ResultSetHelper.getFloat(getObject(columnName));\n+  }\n+\n+  @Override\n+  public double getDouble(String columnName) throws SQLException {\n+    return ResultSetHelper.getDouble(getObject(columnName));\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(String columnName) throws SQLException {\n+    return ResultSetHelper.getBytes(getObject(columnName));\n+  }\n+\n+  @Override\n+  public Date getDate(String columnName) throws SQLException {\n+    return ResultSetHelper.getDate(getObject(columnName));\n+  }\n+\n+  @Override\n+  public Time getTime(String columnName) throws SQLException {\n+    return ResultSetHelper.getTime(getObject(columnName));\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getUnicodeStream(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLWarning getWarnings() throws SQLException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void clearWarnings() throws SQLException {\n+  }\n+\n+  @Override\n+  public String getCursorName() throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public ResultSetMetaData getMetaData() throws SQLException {\n+    return new FlightResultSetMetaData(this.root.getFieldVectors());\n+  }\n+\n+  @Override\n+  public Object getObject(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int findColumn(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int i) throws SQLException {\n+    return ResultSetHelper.getBigDecimal(getObject(i));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n \n Review comment:\n   It seems this can also be implemented in a way similar to getBigDecimal(int i)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-19T10:25:25.939+0000",
                    "updated": "2020-02-19T10:25:25.939+0000",
                    "started": "2020-02-19T10:25:25.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389387",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/390788",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#issuecomment-589750651\n \n \n   @julianhyde Your proposal raises some interesting questions about dependencies between Avatica and Arrow. Should Arrow depend on Avatica or the other way around?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T17:22:16.919+0000",
                    "updated": "2020-02-21T17:22:16.919+0000",
                    "started": "2020-02-21T17:22:16.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390788",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/390789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#discussion_r382707185\n \n \n\n ##########\n File path: java/flight/flight-jdbc/src/main/java/org/apache/arrow/jdbc/FlightResultSet.java\n ##########\n @@ -0,0 +1,1062 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.jdbc;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.NClob;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.RowId;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Statement;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+import org.apache.arrow.flight.FlightStream;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+/**\n+ * ResultSet.\n+ */\n+public class FlightResultSet implements java.sql.ResultSet {\n+\n+  /** Stream of RecordBatch instances. */\n+  private final FlightStream stream;\n+\n+  /** The current record batch. */\n+  private VectorSchemaRoot root;\n+\n+  /** Current row index into the current batch. */\n+  private int batchIndex;\n+\n+  /** Current row index into the stream. */\n+  private int rowIndex = -1;\n+\n+  /** Cache whether the last accessor method encountered a null value. */\n+  private boolean wasNull;\n+\n+  /**\n+   * Create a ResultSet to wrap a FlightStream.\n+   */\n+  public FlightResultSet(final FlightStream stream) {\n+    this.stream = stream;\n+\n+    // fetch the first batch right away so we have meta-data\n+    getNextBatch();\n+  }\n+\n+  @Override\n+  public boolean next() throws SQLException {\n+    if (batchIndex + 1 == root.getRowCount()) {\n+      if (getNextBatch()) {\n+        batchIndex++;\n+        rowIndex++;\n+        return true;\n+      } else {\n+        return false;\n+      }\n+    } else {\n+      batchIndex++;\n+      rowIndex++;\n+      return true;\n+    }\n+  }\n+\n+  private boolean getNextBatch() {\n+    batchIndex = -1;\n+    if (stream.next()) {\n+      root = stream.getRoot();\n+      return true;\n+    } else {\n+      root = null;\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public Object getObject(int columnIndex) throws SQLException {\n+    final Object value = this.root.getFieldVectors().get(columnIndex - 1).getObject(batchIndex);\n+    this.wasNull = value == null;\n+    return value;\n+  }\n+\n+  @Override\n+  public String getString(int i) throws SQLException {\n+    return ResultSetHelper.getString(getObject(i));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(int i) throws SQLException {\n+    return ResultSetHelper.getBoolean(getObject(i));\n+  }\n+\n+  @Override\n+  public boolean wasNull() throws SQLException {\n+    return wasNull;\n+  }\n+\n+  @Override\n+  public void close() throws SQLException {\n+    try {\n+      stream.close();\n+    } catch (Exception e) {\n+      throw new SQLException(e);\n+    }\n+  }\n+\n+  @Override\n+  public byte getByte(int i) throws SQLException {\n+    return ResultSetHelper.getByte(getObject(i));\n+  }\n+\n+  @Override\n+  public short getShort(int i) throws SQLException {\n+    return ResultSetHelper.getShort(getObject(i));\n+  }\n+\n+  @Override\n+  public int getInt(int i) throws SQLException {\n+    return ResultSetHelper.getInt(getObject(i));\n+  }\n+\n+  @Override\n+  public long getLong(int i) throws SQLException {\n+    return ResultSetHelper.getLong(getObject(i));\n+  }\n+\n+  @Override\n+  public float getFloat(int i) throws SQLException {\n+    return ResultSetHelper.getFloat(getObject(i));\n+  }\n+\n+  @Override\n+  public double getDouble(int i) throws SQLException {\n+    return ResultSetHelper.getDouble(getObject(i));\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(int i) throws SQLException {\n+    return ResultSetHelper.getBytes(getObject(i));\n+  }\n+\n+  @Override\n+  public Date getDate(int i) throws SQLException {\n+    return ResultSetHelper.getDate(getObject(i));\n+  }\n+\n+  @Override\n+  public Time getTime(int i) throws SQLException {\n+    return ResultSetHelper.getTime(getObject(i));\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(int i) throws SQLException {\n+    return ResultSetHelper.getTimestamp(getObject(i));\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getUnicodeStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public String getString(String columnName) throws SQLException {\n+    return ResultSetHelper.getString(getObject(columnName));\n+  }\n+\n+  @Override\n+  public boolean getBoolean(String columnName) throws SQLException {\n+    return ResultSetHelper.getBoolean(getObject(columnName));\n+  }\n+\n+  @Override\n+  public byte getByte(String columnName) throws SQLException {\n+    return ResultSetHelper.getByte(getObject(columnName));\n+  }\n+\n+  @Override\n+  public short getShort(String columnName) throws SQLException {\n+    return ResultSetHelper.getShort(getObject(columnName));\n+  }\n+\n+  @Override\n+  public int getInt(String columnName) throws SQLException {\n+    return ResultSetHelper.getInt(getObject(columnName));\n+  }\n+\n+  @Override\n+  public long getLong(String columnName) throws SQLException {\n+    return ResultSetHelper.getLong(getObject(columnName));\n+  }\n+\n+  @Override\n+  public float getFloat(String columnName) throws SQLException {\n+    return ResultSetHelper.getFloat(getObject(columnName));\n+  }\n+\n+  @Override\n+  public double getDouble(String columnName) throws SQLException {\n+    return ResultSetHelper.getDouble(getObject(columnName));\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public byte[] getBytes(String columnName) throws SQLException {\n+    return ResultSetHelper.getBytes(getObject(columnName));\n+  }\n+\n+  @Override\n+  public Date getDate(String columnName) throws SQLException {\n+    return ResultSetHelper.getDate(getObject(columnName));\n+  }\n+\n+  @Override\n+  public Time getTime(String columnName) throws SQLException {\n+    return ResultSetHelper.getTime(getObject(columnName));\n+  }\n+\n+  @Override\n+  public Timestamp getTimestamp(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getAsciiStream(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getUnicodeStream(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public InputStream getBinaryStream(String columnName) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public SQLWarning getWarnings() throws SQLException {\n+    return null;\n+  }\n+\n+  @Override\n+  public void clearWarnings() throws SQLException {\n+  }\n+\n+  @Override\n+  public String getCursorName() throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public ResultSetMetaData getMetaData() throws SQLException {\n+    return new FlightResultSetMetaData(this.root.getFieldVectors());\n+  }\n+\n+  @Override\n+  public Object getObject(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public int findColumn(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(int i) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public Reader getCharacterStream(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(int i) throws SQLException {\n+    return ResultSetHelper.getBigDecimal(getObject(i));\n+  }\n+\n+  @Override\n+  public BigDecimal getBigDecimal(String s) throws SQLException {\n+    throw new SQLFeatureNotSupportedException();\n \n Review comment:\n   Yes there are a lot of methods to be implemented still. I just wanted to share an early draft to start a discussion.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T17:22:51.773+0000",
                    "updated": "2020-02-21T17:22:51.773+0000",
                    "started": "2020-02-21T17:22:51.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390789",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/411939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343#issuecomment-605657683\n \n \n   I'm closing this PR for now since it is stale. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-29T15:52:22.389+0000",
                    "updated": "2020-03-29T15:52:22.389+0000",
                    "started": "2020-03-29T15:52:22.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "411939",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/411940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6343: ARROW-7744: [Java] Implement Flight JDBC Driver [WIP]\nURL: https://github.com/apache/arrow/pull/6343\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-29T15:52:23.022+0000",
                    "updated": "2020-03-29T15:52:23.022+0000",
                    "started": "2020-03-29T15:52:23.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "411940",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/798202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13800:\nURL: https://github.com/apache/arrow/pull/13800#issuecomment-1205870394\n\n   https://issues.apache.org/jira/browse/ARROW-7744\n\n\n",
                    "created": "2022-08-04T23:21:30.481+0000",
                    "updated": "2022-08-04T23:21:30.481+0000",
                    "started": "2022-08-04T23:21:30.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798202",
                    "issueId": "13282844"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/worklog/798203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13800:\nURL: https://github.com/apache/arrow/pull/13800#issuecomment-1205870422\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-04T23:21:32.258+0000",
                    "updated": "2022-08-04T23:21:32.258+0000",
                    "started": "2022-08-04T23:21:32.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798203",
                    "issueId": "13282844"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2bc2ca3a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3dc40214[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@604b694f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7d8203f0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@382a80b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4ae3cf02[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7159d600[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1c29d658[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70eac252[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@24259892[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bf3b3c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@493a2df0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 14 18:38:43 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-14T18:38:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7744/watchers",
            "watchCount": 11,
            "isWatching": false
        },
        "created": "2020-02-02T15:09:33.000+0000",
        "updated": "2022-09-30T12:26:07.000+0000",
        "timeoriginalestimate": null,
        "description": "As a Java developer, I would like the ability to use JDBC to interact with Flight servers. For example, there is now an example in the Arrow repo to run a Flight server wrapping DataFusion and it supports executing SQL against CSV and Parquet files. I would like to be able to call this from Java.\r\n\r\nA flight Arrow JDBC driver would also then simplify developing integrations with other Apache projects, such as building a Spark V2 Data Source or a Drill storage plugin. It would also be directly usable from many BI tools.\r\n\r\nI propose that the class name of the driver should be \"org.apache.arrow.jdbc.Driver\" and the connection string should be \"jdbc:arrow://host:port?[properties]\". I'm purposely leaving \"flight\" out of these because I don't think it makes sense to support multiple protocols now that we have flight and it is easier for users to remember \"arrow\" rather than needing to know about the protocol. This is easy to change if there are objections.\r\n\r\nJDBC is designed around sending queries as strings and then receiving results. These strings could be SQL queries, JSON-encoded query plans, or something else. The JDBC driver will not make any assumptions about the format or dialect of these strings. Queries would be executed using the \"DoGet\" method.\r\n\r\nThe JDBC metadata functionality for reading schema information could possibly use ListFlights but I haven't looked into this part yet.\r\n\r\nI do expect that this JDBC driver will serve as a base that could be extended to add specific functionality for different Flight servers rather than attempt to support them all.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC][Java] Implement Flight SQL JDBC Driver",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/comment/17029327",
                    "id": "17029327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Given my previous experience with these APIs, I suggest you use Avatica as the basis for this rather than implementing by hand. I noticed you haven't done that in your WIP. Was it something you considered?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-02-03T21:57:15.583+0000",
                    "updated": "2020-02-03T21:59:38.949+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/comment/17029344",
                    "id": "17029344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Hi Jacques,\n\nI was wary of adding more dependencies unless/until they are really needed.\nI've implemented production JDBC drivers before, and there is definitely a\nbit of tedious work involved in implementing the result set type conversion\ncode and some of the associated metadata functionality but my gut feeling\nso far is that the long term burden would be less than designing around\nAvatica. Avatica seems to provide much more than we need with a server\nprocess, wire protocol, etc. It also has its own type system so we would\nhave to convert between Avatica and Arrow types. It seems preferable to\ndesign this from the ground up based on Arrow types? I also was not able to\nfind comprehensive documentation for building a JDBC driver like this with\nAvatica, which concerned me.\n\nI guess I could try and do a mini bake-off here and create a PR based on\nAvatica as well so we can compare the approaches. I can also ask some\nquestions on the appropriate mailing list about Avatica's suitability for\nthis use case.\n\nThanks,\n\nAndy.\n\n\n\n\n\n\n\nOn Mon, Feb 3, 2020 at 2:58 PM Jacques Nadeau (Jira) <jira@apache.org>\n\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-02-03T22:29:00.064+0000",
                    "updated": "2020-02-03T22:29:00.064+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/comment/17128444",
                    "id": "17128444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I haven't seen activity on this so removing from the 1.0.0 milestone for now",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-08T16:54:12.961+0000",
                    "updated": "2020-06-08T16:54:12.961+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/comment/17175819",
                    "id": "17175819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jkew",
                        "name": "jkew",
                        "key": "jkew",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "John Kew",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Given my experience as well; I think a pure java/flight/arrow version would be preferred, if only to reduce the number of dependencies. Primarily the\u00a0 advantage here of a JDBC driver is to explore lots of integration scenarios; so I suspect a light-weight approach would be ideal. While I really like calcite, for the purposes of flight I may explore Andy's original CL here as a start within Tableau as a wrapped up connector plugin to see what can be made of it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jkew",
                        "name": "jkew",
                        "key": "jkew",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "John Kew",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-11T20:16:07.377+0000",
                    "updated": "2020-08-11T20:16:07.377+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/comment/17181285",
                    "id": "17181285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "I am still interested in exploring this but have unassigned myself for now because it will be a long time before I can get to this.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-08-20T15:35:17.914+0000",
                    "updated": "2020-08-20T15:35:17.914+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13282844/comment/17604914",
                    "id": "17604914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13800\n[https://github.com/apache/arrow/pull/13800]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-09-14T18:38:43.090+0000",
                    "updated": "2022-09-14T18:38:43.090+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z0b2zk:",
        "customfield_12314139": null
    }
}