{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13151544",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544",
    "key": "ARROW-2445",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/5",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/trivial.svg",
            "name": "Trivial",
            "id": "5"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2445/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@77828068[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ca95aa[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51952f9c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@22197c1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15a5bb0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@8e75749[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70766006[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7ee77e56[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d333de1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1fdc6a11[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ce94fbc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@19399fb9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 12 09:38:02 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-12T09:37:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2445/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-11T02:14:39.000+0000",
        "updated": "2018-04-12T09:38:02.000+0000",
        "timeoriginalestimate": null,
        "description": "A first pass at adding rustdoc comments and made some struct fields private and added accessor methods.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add documentation and make some fields private",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16433305",
                    "id": "16433305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove opened a new pull request #1881: ARROW-2445: [Rust] Add documentation and make some fields private\nURL: https://github.com/apache/arrow/pull/1881\n \n \n   No functional changes.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T02:15:33.549+0000",
                    "updated": "2018-04-11T02:15:33.549+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16433306",
                    "id": "16433306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "PR: https://github.com/apache/arrow/pull/1881",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-04-11T02:15:41.286+0000",
                    "updated": "2018-04-11T02:15:41.286+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16433331",
                    "id": "16433331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "liurenjie1024 commented on a change in pull request #1881: ARROW-2445: [Rust] Add documentation and make some fields private\nURL: https://github.com/apache/arrow/pull/1881#discussion_r180619803\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -86,13 +90,25 @@ impl Array {\n         }\n     }\n \n+    /// Get a reference to the array data\n     pub fn data(&self) -> &ArrayData {\n         &self.data\n     }\n \n+    /// number of elements in the array\n     pub fn len(&self) -> usize {\n         self.len as usize\n     }\n+\n+    /// number of null elements in the array\n+    pub fn null_count(&self) -> usize {\n+        self.null_count as usize\n+    }\n+\n+    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n+    pub fn validity_bitmap(&self) -> &Option<Bitmap> {\n \n Review comment:\n   I don't think it's a good idea to expose validity bitmap directly to user. I think we should just add methods to test whether a position is set.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T02:55:56.664+0000",
                    "updated": "2018-04-11T02:55:56.664+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16433332",
                    "id": "16433332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "liurenjie1024 commented on a change in pull request #1881: ARROW-2445: [Rust] Add documentation and make some fields private\nURL: https://github.com/apache/arrow/pull/1881#discussion_r180619565\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -69,10 +69,14 @@ arraydata_from_primitive!(u32, UInt32);\n arraydata_from_primitive!(u64, UInt64);\n \n pub struct Array {\n-    pub len: i32,\n-    pub null_count: i32,\n-    pub validity_bitmap: Option<Bitmap>,\n-    pub data: ArrayData,\n+    /// number of elements in the array\n+    len: i32,\n+    /// number of null elements in the array\n+    null_count: i32,\n+    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n+    validity_bitmap: Option<Bitmap>,\n+    /// The array of elements\n+    data: ArrayData,\n \n Review comment:\n   Add a field for data type?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T02:55:56.710+0000",
                    "updated": "2018-04-11T02:55:56.710+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16433402",
                    "id": "16433402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1881: ARROW-2445: [Rust] Add documentation and make some fields private\nURL: https://github.com/apache/arrow/pull/1881#discussion_r180635435\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -86,13 +90,25 @@ impl Array {\n         }\n     }\n \n+    /// Get a reference to the array data\n     pub fn data(&self) -> &ArrayData {\n         &self.data\n     }\n \n+    /// number of elements in the array\n     pub fn len(&self) -> usize {\n         self.len as usize\n     }\n+\n+    /// number of null elements in the array\n+    pub fn null_count(&self) -> usize {\n+        self.null_count as usize\n+    }\n+\n+    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n+    pub fn validity_bitmap(&self) -> &Option<Bitmap> {\n \n Review comment:\n   We have seen some cases in C++ that it is beneficial in a lot of cases to work directly on the bitmap as the compiler can drastically speedup access to it using SIMD instructions.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T04:56:49.814+0000",
                    "updated": "2018-04-11T04:56:49.814+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16433961",
                    "id": "16433961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on a change in pull request #1881: ARROW-2445: [Rust] Add documentation and make some fields private\nURL: https://github.com/apache/arrow/pull/1881#discussion_r180766948\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -69,10 +69,14 @@ arraydata_from_primitive!(u32, UInt32);\n arraydata_from_primitive!(u64, UInt64);\n \n pub struct Array {\n-    pub len: i32,\n-    pub null_count: i32,\n-    pub validity_bitmap: Option<Bitmap>,\n-    pub data: ArrayData,\n+    /// number of elements in the array\n+    len: i32,\n+    /// number of null elements in the array\n+    null_count: i32,\n+    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n+    validity_bitmap: Option<Bitmap>,\n+    /// The array of elements\n+    data: ArrayData,\n \n Review comment:\n   Array is the physical memory storage and is separate from the meta-data describing the types.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T14:08:35.194+0000",
                    "updated": "2018-04-11T14:08:35.194+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16434898",
                    "id": "16434898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1881: ARROW-2445: [Rust] Add documentation and make some fields private\nURL: https://github.com/apache/arrow/pull/1881#issuecomment-380670267\n \n \n   @pitrou or @xhochy Could you please merge these changes?\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-12T03:55:45.580+0000",
                    "updated": "2018-04-12T03:55:45.580+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16435249",
                    "id": "16435249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1881\n[https://github.com/apache/arrow/pull/1881]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-12T09:37:57.512+0000",
                    "updated": "2018-04-12T09:37:57.512+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151544/comment/16435250",
                    "id": "16435250",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1881: ARROW-2445: [Rust] Add documentation and make some fields private\nURL: https://github.com/apache/arrow/pull/1881\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nindex 1b619d50ba..63d11308d0 100644\n--- a/rust/src/array.rs\n+++ b/rust/src/array.rs\n@@ -69,10 +69,14 @@ arraydata_from_primitive!(u32, UInt32);\n arraydata_from_primitive!(u64, UInt64);\n \n pub struct Array {\n-    pub len: i32,\n-    pub null_count: i32,\n-    pub validity_bitmap: Option<Bitmap>,\n-    pub data: ArrayData,\n+    /// number of elements in the array\n+    len: i32,\n+    /// number of null elements in the array\n+    null_count: i32,\n+    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n+    validity_bitmap: Option<Bitmap>,\n+    /// The array of elements\n+    data: ArrayData,\n }\n \n impl Array {\n@@ -86,13 +90,25 @@ impl Array {\n         }\n     }\n \n+    /// Get a reference to the array data\n     pub fn data(&self) -> &ArrayData {\n         &self.data\n     }\n \n+    /// number of elements in the array\n     pub fn len(&self) -> usize {\n         self.len as usize\n     }\n+\n+    /// number of null elements in the array\n+    pub fn null_count(&self) -> usize {\n+        self.null_count as usize\n+    }\n+\n+    /// If null_count is greater than zero then the validity_bitmap will be Some(Bitmap)\n+    pub fn validity_bitmap(&self) -> &Option<Bitmap> {\n+        &self.validity_bitmap\n+    }\n }\n \n macro_rules! array_from_primitive {\n@@ -208,17 +224,14 @@ mod tests {\n     fn test_utf8_offsets() {\n         let a = Array::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n         assert_eq!(4, a.len());\n-        match a.data() {\n-            &ArrayData::Utf8(List {\n-                ref data,\n-                ref offsets,\n-            }) => {\n-                assert_eq!(11, data.len());\n-                assert_eq!(0, *offsets.get(0));\n-                assert_eq!(4, *offsets.get(1));\n-                assert_eq!(6, *offsets.get(2));\n-                assert_eq!(7, *offsets.get(3));\n-                assert_eq!(11, *offsets.get(4));\n+        match *a.data() {\n+            ArrayData::Utf8(ref list) => {\n+                assert_eq!(11, list.data().len());\n+                assert_eq!(0, *list.offsets().get(0));\n+                assert_eq!(4, *list.offsets().get(1));\n+                assert_eq!(6, *list.offsets().get(2));\n+                assert_eq!(7, *list.offsets().get(3));\n+                assert_eq!(11, *list.offsets().get(4));\n             }\n             _ => panic!(),\n         }\n@@ -227,8 +240,8 @@ mod tests {\n     #[test]\n     fn test_utf8_slices() {\n         let a = Array::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n-        match a.data() {\n-            &ArrayData::Utf8(ref d) => {\n+        match *a.data() {\n+            ArrayData::Utf8(ref d) => {\n                 assert_eq!(4, d.len());\n                 assert_eq!(\"this\", str::from_utf8(d.slice(0)).unwrap());\n                 assert_eq!(\"is\", str::from_utf8(d.slice(1)).unwrap());\n@@ -255,8 +268,8 @@ mod tests {\n     fn test_from_i32() {\n         let a = Array::from(vec![15, 14, 13, 12, 11]);\n         assert_eq!(5, a.len());\n-        match a.data() {\n-            &ArrayData::Int32(ref b) => {\n+        match *a.data() {\n+            ArrayData::Int32(ref b) => {\n                 assert_eq!(vec![15, 14, 13, 12, 11], b.iter().collect::<Vec<i32>>());\n             }\n             _ => panic!(),\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nindex 85f57f68c3..5349c40ec2 100644\n--- a/rust/src/buffer.rs\n+++ b/rust/src/buffer.rs\n@@ -31,7 +31,9 @@ extern \"C\" {\n /// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n /// memory region is aligned at a 64-byte boundary\n pub struct Buffer<T> {\n+    /// Contiguous memory region holding instances of primitive T\n     data: *const T,\n+    /// Number of elements in the buffer\n     len: i32,\n }\n \n@@ -40,6 +42,7 @@ impl<T> Buffer<T> {\n         Buffer { data, len }\n     }\n \n+    /// Get the number of elements in the buffer\n     pub fn len(&self) -> i32 {\n         self.len\n     }\n@@ -96,6 +99,7 @@ impl<T> Drop for Buffer<T> {\n     }\n }\n \n+/// Iterator over the elements of a buffer\n pub struct BufferIterator<T> {\n     data: *const T,\n     len: i32,\ndiff --git a/rust/src/builder.rs b/rust/src/builder.rs\nindex 421b1a9a10..e354a2af33 100644\n--- a/rust/src/builder.rs\n+++ b/rust/src/builder.rs\n@@ -54,10 +54,12 @@ impl<T> Builder<T> {\n         }\n     }\n \n+    /// Get the number of elements in the builder\n     pub fn len(&self) -> usize {\n         self.len\n     }\n \n+    /// Get the capacity of the builder (number of elements)\n     pub fn capacity(&self) -> usize {\n         self.capacity\n     }\ndiff --git a/rust/src/datatypes.rs b/rust/src/datatypes.rs\nindex 7b4e3e8af4..58f5e8e47b 100644\n--- a/rust/src/datatypes.rs\n+++ b/rust/src/datatypes.rs\n@@ -19,6 +19,7 @@ use super::error::ArrowError;\n use serde_json::Value;\n use std::fmt;\n \n+/// Arrow data type\n #[derive(Debug, Clone, PartialEq)]\n pub enum DataType {\n     Boolean,\n@@ -38,6 +39,7 @@ pub enum DataType {\n }\n \n impl DataType {\n+    /// Parse a data type from a JSON representation\n     fn from(json: &Value) -> Result<DataType, ArrowError> {\n         //println!(\"DataType::from({:?})\", json);\n         match *json {\n@@ -106,6 +108,7 @@ impl DataType {\n         }\n     }\n \n+    /// Generate a JSON representation of the data type\n     pub fn to_json(&self) -> Value {\n         match *self {\n             DataType::Boolean => json!({\"name\": \"bool\"}),\n@@ -130,11 +133,12 @@ impl DataType {\n     }\n }\n \n+/// Arrow Field\n #[derive(Debug, Clone, PartialEq)]\n pub struct Field {\n-    pub name: String,\n-    pub data_type: DataType,\n-    pub nullable: bool,\n+    name: String,\n+    data_type: DataType,\n+    nullable: bool,\n }\n \n impl Field {\n@@ -146,6 +150,7 @@ impl Field {\n         }\n     }\n \n+    /// Parse a field definition from a JSON representation\n     pub fn from(json: &Value) -> Result<Self, ArrowError> {\n         //println!(\"Field::from({:?}\", json);\n         match *json {\n@@ -186,6 +191,7 @@ impl Field {\n         }\n     }\n \n+    /// Generate a JSON representation of the field\n     pub fn to_json(&self) -> Value {\n         json!({\n             \"name\": self.name,\n@@ -205,6 +211,7 @@ impl fmt::Display for Field {\n     }\n }\n \n+/// Arrow Schema\n #[derive(Debug, Clone)]\n pub struct Schema {\n     pub columns: Vec<Field>,\ndiff --git a/rust/src/list.rs b/rust/src/list.rs\nindex fad0ed372a..abc037063e 100644\n--- a/rust/src/list.rs\n+++ b/rust/src/list.rs\n@@ -20,16 +20,37 @@ use std::str;\n use super::buffer::Buffer;\n use super::list_builder::ListBuilder;\n \n+/// List<T> is a nested type in which each array slot contains a variable-size sequence of values of\n+/// the same type T\n pub struct List<T> {\n-    pub data: Buffer<T>,\n-    pub offsets: Buffer<i32>,\n+    /// Contiguous region of memory holding contents of the lists\n+    data: Buffer<T>,\n+    /// offsets to start of each array slot\n+    offsets: Buffer<i32>,\n }\n \n impl<T> List<T> {\n+    /// Create a List from raw parts\n+    pub fn from_raw_parts(data: Buffer<T>, offsets: Buffer<i32>) -> Self {\n+        List { data, offsets }\n+    }\n+\n+    /// Get the length of the List (number of array slots)\n     pub fn len(&self) -> i32 {\n         self.offsets.len() - 1\n     }\n \n+    /// Get a reference to the raw data in the list\n+    pub fn data(&self) -> &Buffer<T> {\n+        &self.data\n+    }\n+\n+    /// Get a reference to the offsets in the list\n+    pub fn offsets(&self) -> &Buffer<i32> {\n+        &self.offsets\n+    }\n+\n+    /// Get the contents of a single array slot\n     pub fn slice(&self, index: usize) -> &[T] {\n         let start = *self.offsets.get(index) as usize;\n         let end = *self.offsets.get(index + 1) as usize;\n@@ -37,6 +58,7 @@ impl<T> List<T> {\n     }\n }\n \n+/// Create a List<u8> from a Vec<String>\n impl From<Vec<String>> for List<u8> {\n     fn from(v: Vec<String>) -> Self {\n         let mut b: ListBuilder<u8> = ListBuilder::with_capacity(v.len());\n@@ -47,7 +69,7 @@ impl From<Vec<String>> for List<u8> {\n     }\n }\n \n-/// This method mostly just used for unit tests\n+/// Create a List<u8> from a Vec<&str>\n impl From<Vec<&'static str>> for List<u8> {\n     fn from(v: Vec<&'static str>) -> Self {\n         List::from(v.iter().map(|s| s.to_string()).collect::<Vec<String>>())\ndiff --git a/rust/src/list_builder.rs b/rust/src/list_builder.rs\nindex 0122e680e1..4c14ef8f51 100644\n--- a/rust/src/list_builder.rs\n+++ b/rust/src/list_builder.rs\n@@ -18,16 +18,19 @@\n use super::builder::*;\n use super::list::List;\n \n+/// Builder for List<T>\n pub struct ListBuilder<T> {\n     data: Builder<T>,\n     offsets: Builder<i32>,\n }\n \n impl<T> ListBuilder<T> {\n+    /// Create a ListBuilder with a default capacity\n     pub fn new() -> Self {\n         ListBuilder::with_capacity(64)\n     }\n \n+    /// Create a ListBuilder with the specified capacity\n     pub fn with_capacity(n: usize) -> Self {\n         let data = Builder::with_capacity(n);\n         let mut offsets = Builder::with_capacity(n);\n@@ -35,16 +38,15 @@ impl<T> ListBuilder<T> {\n         ListBuilder { data, offsets }\n     }\n \n+    /// Push one array slot to the builder\n     pub fn push(&mut self, slice: &[T]) {\n         self.data.push_slice(slice);\n         self.offsets.push(self.data.len() as i32);\n     }\n \n+    /// Create an immutable List<T> from the builder\n     pub fn finish(&mut self) -> List<T> {\n-        List {\n-            data: self.data.finish(),\n-            offsets: self.offsets.finish(),\n-        }\n+        List::from_raw_parts(self.data.finish(), self.offsets.finish())\n     }\n }\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-12T09:38:02.231+0000",
                    "updated": "2018-04-12T09:38:02.231+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|i3sed3:",
        "customfield_12314139": null
    }
}