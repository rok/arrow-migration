{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13334438",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438",
    "key": "ARROW-10236",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10236/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/497393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400\n\n\n   This is a proposed approach - if people like this approach I will write proper tests (to ensure that the cast kernel support and this function remain in sync).\r\n   \r\n   This PR brings DataFusion to parity with the type casting supported by arrow and allows DataFusion to plan all casts that are supported by the arrow cast kernel\r\n   \r\n   Previously the notions of coercion and casting were somewhat conflated. I have tried to clarify them in https://github.com/apache/arrow/pull/8399 and this PR. See also https://github.com/apache/arrow/pull/8340#discussion_r501257096 for more discussion.\r\n   \r\n   I personally want this functionality so when I add support for `DictionaryArray`  casts in Arrow (https://github.com/apache/arrow/pull/8346)  they can also be used in DataFusion.\r\n   \r\n   Codewise, I am concerned about the duplication in logic between this and cast.rs. However, the test I have in mind will ensure they don't get out of sync\r\n   \r\n   Questions for reviewers:\r\n   1) Would this code / test be better to include in the arrow cast kernel (cast.rs) itself? To keep the \"support\" matrix code closer to the implementation?\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T15:03:58.959+0000",
                    "updated": "2020-10-08T15:03:58.959+0000",
                    "started": "2020-10-08T15:03:58.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497393",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/497394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501795062\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/mod.rs\n##########\n@@ -323,12 +324,13 @@ impl Expr {\n     ///\n     /// # Errors\n     ///\n-    /// This function errors when it is impossible to cast the expression to the target [arrow::datatypes::DataType].\n+    /// This function errors when it is impossible to cast the\n+    /// expression to the target [arrow::datatypes::DataType].\n     pub fn cast_to(&self, cast_to_type: &DataType, schema: &Schema) -> Result<Expr> {\n         let this_type = self.get_type(schema)?;\n         if this_type == *cast_to_type {\n             Ok(self.clone())\n-        } else if can_coerce_from(cast_to_type, &this_type) {\n+        } else if can_cast_types(&this_type, cast_to_type) {\n\nReview comment:\n       the idea is to use a common `can_cast_types` function to detect valid casts at plan time, and make `can_cast_types` consistent with the arrow cast kernel\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T15:04:52.399+0000",
                    "updated": "2020-10-08T15:04:52.399+0000",
                    "started": "2020-10-08T15:04:52.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497394",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/497395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#issuecomment-705633631\n\n\n   https://issues.apache.org/jira/browse/ARROW-10236\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T15:07:00.264+0000",
                    "updated": "2020-10-08T15:07:00.264+0000",
                    "started": "2020-10-08T15:07:00.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497395",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/497404",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501802894\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n\nReview comment:\n       This is something that I have been thinking about: in DataFusion, because we use dynamically typed arrays, we often have to annotate which types are supported by each arrow kernel / operation.\r\n   \r\n   Thus, we need to duplicate these `match`es to enumerate the valid types accepted by the kernels, so that we error during planning.\r\n   \r\n   I wonder if these functions shouldn't be closer to the implementation (i.e. in the `arrow::compute::kernels`), or, alternatively, if we could find an idiom that would allow us to write these `match`es one time (again, in compute::kernel).\r\n   \r\n   It seems to me that the pattern is:\r\n   \r\n   for compute\r\n   ```\r\n   match array.data_type() {\r\n      ... => compute(array)\r\n   }\r\n   ```\r\n   for datatypes:\r\n   \r\n   ```\r\n   match datatype {\r\n       ... => return Some(return_datatype)\r\n   }\r\n   ```\r\n   \r\n   one idea would be to use\r\n   \r\n   ```\r\n   match datatype {\r\n       ... => return Some((closure_that_computes, return_datatype))\r\n   }\r\n   ```\r\n   \r\n   so that both use-cases could be written in a single match (and reduce the risk of mis-typing / change in one place without a change in another place).\r\n   \r\n   This comment is not specific to this PR, which I need to go through: I was just curious about your thoughts on this, since you have been touching in a couple of these recently.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T15:15:40.605+0000",
                    "updated": "2020-10-08T15:15:40.605+0000",
                    "started": "2020-10-08T15:15:40.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497404",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/497410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501812661\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n\nReview comment:\n       @jorgecarleitao  -- I think the idea of using a single `match` in cast.rs is a good one. I'll try and whip up a proposed PR with that pattern for discussion (though probably not until tomorrow morning US Eastern time, or the weekend)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T15:28:42.016+0000",
                    "updated": "2020-10-08T15:28:42.016+0000",
                    "started": "2020-10-08T15:28:42.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497410",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/497432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501850814\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n\nReview comment:\n       I was also going to suggest if we move `can_cast_types` to Arrow\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T16:24:01.177+0000",
                    "updated": "2020-10-08T16:24:01.177+0000",
                    "started": "2020-10-08T16:24:01.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497432",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/497433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501851945\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n+        (Struct(_), _) => false,\n+        (_, Struct(_)) => false,\n+        (List(list_from), List(list_to)) => can_cast_types(list_from, list_to),\n+        (List(_), _) => false,\n+        (_, List(list_to)) => can_cast_types(from_type, list_to),\n+        (Dictionary(_, from_value_type), Dictionary(_, to_value_type)) => {\n+            can_cast_types(from_value_type, to_value_type)\n+        }\n+        (Dictionary(_, value_type), _) => can_cast_types(value_type, to_type),\n+        (_, Dictionary(_, value_type)) => can_cast_types(from_type, value_type),\n+\n+        (_, Boolean) => is_numeric_type(from_type),\n+        (Boolean, _) => is_numeric_type(from_type) || from_type == &Utf8,\n+        (Utf8, _) => is_numeric_type(to_type),\n+        (_, Utf8) => is_numeric_type(from_type) || from_type == &Binary,\n+\n+        // start numeric casts\n+        (UInt8, UInt16) => true,\n+        (UInt8, UInt32) => true,\n+        (UInt8, UInt64) => true,\n+        (UInt8, Int8) => true,\n+        (UInt8, Int16) => true,\n+        (UInt8, Int32) => true,\n+        (UInt8, Int64) => true,\n+        (UInt8, Float32) => true,\n+        (UInt8, Float64) => true,\n+\n+        (UInt16, UInt8) => true,\n+        (UInt16, UInt32) => true,\n+        (UInt16, UInt64) => true,\n+        (UInt16, Int8) => true,\n+        (UInt16, Int16) => true,\n+        (UInt16, Int32) => true,\n+        (UInt16, Int64) => true,\n+        (UInt16, Float32) => true,\n+        (UInt16, Float64) => true,\n+\n+        (UInt32, UInt8) => true,\n+        (UInt32, UInt16) => true,\n+        (UInt32, UInt64) => true,\n+        (UInt32, Int8) => true,\n+        (UInt32, Int16) => true,\n+        (UInt32, Int32) => true,\n+        (UInt32, Int64) => true,\n+        (UInt32, Float32) => true,\n+        (UInt32, Float64) => true,\n+\n+        (UInt64, UInt8) => true,\n+        (UInt64, UInt16) => true,\n+        (UInt64, UInt32) => true,\n+        (UInt64, Int8) => true,\n+        (UInt64, Int16) => true,\n+        (UInt64, Int32) => true,\n+        (UInt64, Int64) => true,\n+        (UInt64, Float32) => true,\n+        (UInt64, Float64) => true,\n+\n+        (Int8, UInt8) => true,\n+        (Int8, UInt16) => true,\n+        (Int8, UInt32) => true,\n+        (Int8, UInt64) => true,\n+        (Int8, Int16) => true,\n+        (Int8, Int32) => true,\n+        (Int8, Int64) => true,\n+        (Int8, Float32) => true,\n+        (Int8, Float64) => true,\n+\n+        (Int16, UInt8) => true,\n+        (Int16, UInt16) => true,\n+        (Int16, UInt32) => true,\n+        (Int16, UInt64) => true,\n+        (Int16, Int8) => true,\n+        (Int16, Int32) => true,\n+        (Int16, Int64) => true,\n+        (Int16, Float32) => true,\n+        (Int16, Float64) => true,\n+\n+        (Int32, UInt8) => true,\n+        (Int32, UInt16) => true,\n+        (Int32, UInt32) => true,\n+        (Int32, UInt64) => true,\n+        (Int32, Int8) => true,\n+        (Int32, Int16) => true,\n+        (Int32, Int64) => true,\n+        (Int32, Float32) => true,\n+        (Int32, Float64) => true,\n+\n+        (Int64, UInt8) => true,\n+        (Int64, UInt16) => true,\n+        (Int64, UInt32) => true,\n+        (Int64, UInt64) => true,\n+        (Int64, Int8) => true,\n+        (Int64, Int16) => true,\n+        (Int64, Int32) => true,\n+        (Int64, Float32) => true,\n+        (Int64, Float64) => true,\n+\n+        (Float32, UInt8) => true,\n+        (Float32, UInt16) => true,\n+        (Float32, UInt32) => true,\n+        (Float32, UInt64) => true,\n+        (Float32, Int8) => true,\n+        (Float32, Int16) => true,\n+        (Float32, Int32) => true,\n+        (Float32, Int64) => true,\n+        (Float32, Float64) => true,\n+\n+        (Float64, UInt8) => true,\n+        (Float64, UInt16) => true,\n+        (Float64, UInt32) => true,\n+        (Float64, UInt64) => true,\n+        (Float64, Int8) => true,\n+        (Float64, Int16) => true,\n+        (Float64, Int32) => true,\n+        (Float64, Int64) => true,\n+        (Float64, Float32) => true,\n+        // end numeric casts\n+\n+        // temporal casts\n+        (Int32, Date32(_)) => true,\n+        (Int32, Time32(_)) => true,\n+        (Date32(_), Int32) => true,\n+        (Time32(_), Int32) => true,\n+        (Int64, Date64(_)) => true,\n+        (Int64, Time64(_)) => true,\n+        (Date64(_), Int64) => true,\n+        (Time64(_), Int64) => true,\n+        (Date32(DateUnit::Day), Date64(DateUnit::Millisecond)) => true,\n+        (Date64(DateUnit::Millisecond), Date32(DateUnit::Day)) => true,\n+        (Time32(TimeUnit::Second), Time32(TimeUnit::Millisecond)) => true,\n+        (Time32(TimeUnit::Millisecond), Time32(TimeUnit::Second)) => true,\n+        (Time32(_), Time64(_)) => true,\n+        (Time64(TimeUnit::Microsecond), Time64(TimeUnit::Nanosecond)) => true,\n+        (Time64(TimeUnit::Nanosecond), Time64(TimeUnit::Microsecond)) => true,\n+        (Time64(_), Time32(to_unit)) => match to_unit {\n+            TimeUnit::Second => true,\n+            TimeUnit::Millisecond => true,\n+            _ => false,\n+        },\n+        (Timestamp(_, _), Int64) => true,\n+        (Int64, Timestamp(_, _)) => true,\n+        (Timestamp(_, _), Timestamp(_, _)) => true,\n+        (Timestamp(_, _), Date32(_)) => true,\n+        (Timestamp(_, _), Date64(_)) => true,\n+        // date64 to timestamp might not make sense,\n+\n+        // end temporal casts\n+        (_, _) => false,\n+    }\n+}\n+\n+fn is_numeric_type(t: &DataType) -> bool {\n\nReview comment:\n       This is also something that can live in perhaps `arrow::util` or `arrow::datatype` (and be implemented as a trait member of `DataType`).\r\n   I needed to check if a datatype was listy or stringy, and the boilerplate was tedious.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T16:25:44.415+0000",
                    "updated": "2020-10-08T16:25:44.415+0000",
                    "started": "2020-10-08T16:25:44.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497433",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/498128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501850814\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n\nReview comment:\n       I was also going to suggest if we move `can_cast_types` to Arrow\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n+        (Struct(_), _) => false,\n+        (_, Struct(_)) => false,\n+        (List(list_from), List(list_to)) => can_cast_types(list_from, list_to),\n+        (List(_), _) => false,\n+        (_, List(list_to)) => can_cast_types(from_type, list_to),\n+        (Dictionary(_, from_value_type), Dictionary(_, to_value_type)) => {\n+            can_cast_types(from_value_type, to_value_type)\n+        }\n+        (Dictionary(_, value_type), _) => can_cast_types(value_type, to_type),\n+        (_, Dictionary(_, value_type)) => can_cast_types(from_type, value_type),\n+\n+        (_, Boolean) => is_numeric_type(from_type),\n+        (Boolean, _) => is_numeric_type(from_type) || from_type == &Utf8,\n+        (Utf8, _) => is_numeric_type(to_type),\n+        (_, Utf8) => is_numeric_type(from_type) || from_type == &Binary,\n+\n+        // start numeric casts\n+        (UInt8, UInt16) => true,\n+        (UInt8, UInt32) => true,\n+        (UInt8, UInt64) => true,\n+        (UInt8, Int8) => true,\n+        (UInt8, Int16) => true,\n+        (UInt8, Int32) => true,\n+        (UInt8, Int64) => true,\n+        (UInt8, Float32) => true,\n+        (UInt8, Float64) => true,\n+\n+        (UInt16, UInt8) => true,\n+        (UInt16, UInt32) => true,\n+        (UInt16, UInt64) => true,\n+        (UInt16, Int8) => true,\n+        (UInt16, Int16) => true,\n+        (UInt16, Int32) => true,\n+        (UInt16, Int64) => true,\n+        (UInt16, Float32) => true,\n+        (UInt16, Float64) => true,\n+\n+        (UInt32, UInt8) => true,\n+        (UInt32, UInt16) => true,\n+        (UInt32, UInt64) => true,\n+        (UInt32, Int8) => true,\n+        (UInt32, Int16) => true,\n+        (UInt32, Int32) => true,\n+        (UInt32, Int64) => true,\n+        (UInt32, Float32) => true,\n+        (UInt32, Float64) => true,\n+\n+        (UInt64, UInt8) => true,\n+        (UInt64, UInt16) => true,\n+        (UInt64, UInt32) => true,\n+        (UInt64, Int8) => true,\n+        (UInt64, Int16) => true,\n+        (UInt64, Int32) => true,\n+        (UInt64, Int64) => true,\n+        (UInt64, Float32) => true,\n+        (UInt64, Float64) => true,\n+\n+        (Int8, UInt8) => true,\n+        (Int8, UInt16) => true,\n+        (Int8, UInt32) => true,\n+        (Int8, UInt64) => true,\n+        (Int8, Int16) => true,\n+        (Int8, Int32) => true,\n+        (Int8, Int64) => true,\n+        (Int8, Float32) => true,\n+        (Int8, Float64) => true,\n+\n+        (Int16, UInt8) => true,\n+        (Int16, UInt16) => true,\n+        (Int16, UInt32) => true,\n+        (Int16, UInt64) => true,\n+        (Int16, Int8) => true,\n+        (Int16, Int32) => true,\n+        (Int16, Int64) => true,\n+        (Int16, Float32) => true,\n+        (Int16, Float64) => true,\n+\n+        (Int32, UInt8) => true,\n+        (Int32, UInt16) => true,\n+        (Int32, UInt32) => true,\n+        (Int32, UInt64) => true,\n+        (Int32, Int8) => true,\n+        (Int32, Int16) => true,\n+        (Int32, Int64) => true,\n+        (Int32, Float32) => true,\n+        (Int32, Float64) => true,\n+\n+        (Int64, UInt8) => true,\n+        (Int64, UInt16) => true,\n+        (Int64, UInt32) => true,\n+        (Int64, UInt64) => true,\n+        (Int64, Int8) => true,\n+        (Int64, Int16) => true,\n+        (Int64, Int32) => true,\n+        (Int64, Float32) => true,\n+        (Int64, Float64) => true,\n+\n+        (Float32, UInt8) => true,\n+        (Float32, UInt16) => true,\n+        (Float32, UInt32) => true,\n+        (Float32, UInt64) => true,\n+        (Float32, Int8) => true,\n+        (Float32, Int16) => true,\n+        (Float32, Int32) => true,\n+        (Float32, Int64) => true,\n+        (Float32, Float64) => true,\n+\n+        (Float64, UInt8) => true,\n+        (Float64, UInt16) => true,\n+        (Float64, UInt32) => true,\n+        (Float64, UInt64) => true,\n+        (Float64, Int8) => true,\n+        (Float64, Int16) => true,\n+        (Float64, Int32) => true,\n+        (Float64, Int64) => true,\n+        (Float64, Float32) => true,\n+        // end numeric casts\n+\n+        // temporal casts\n+        (Int32, Date32(_)) => true,\n+        (Int32, Time32(_)) => true,\n+        (Date32(_), Int32) => true,\n+        (Time32(_), Int32) => true,\n+        (Int64, Date64(_)) => true,\n+        (Int64, Time64(_)) => true,\n+        (Date64(_), Int64) => true,\n+        (Time64(_), Int64) => true,\n+        (Date32(DateUnit::Day), Date64(DateUnit::Millisecond)) => true,\n+        (Date64(DateUnit::Millisecond), Date32(DateUnit::Day)) => true,\n+        (Time32(TimeUnit::Second), Time32(TimeUnit::Millisecond)) => true,\n+        (Time32(TimeUnit::Millisecond), Time32(TimeUnit::Second)) => true,\n+        (Time32(_), Time64(_)) => true,\n+        (Time64(TimeUnit::Microsecond), Time64(TimeUnit::Nanosecond)) => true,\n+        (Time64(TimeUnit::Nanosecond), Time64(TimeUnit::Microsecond)) => true,\n+        (Time64(_), Time32(to_unit)) => match to_unit {\n+            TimeUnit::Second => true,\n+            TimeUnit::Millisecond => true,\n+            _ => false,\n+        },\n+        (Timestamp(_, _), Int64) => true,\n+        (Int64, Timestamp(_, _)) => true,\n+        (Timestamp(_, _), Timestamp(_, _)) => true,\n+        (Timestamp(_, _), Date32(_)) => true,\n+        (Timestamp(_, _), Date64(_)) => true,\n+        // date64 to timestamp might not make sense,\n+\n+        // end temporal casts\n+        (_, _) => false,\n+    }\n+}\n+\n+fn is_numeric_type(t: &DataType) -> bool {\n\nReview comment:\n       This is also something that can live in perhaps `arrow::util` or `arrow::datatype` (and be implemented as a trait member of `DataType`).\r\n   I needed to check if a datatype was listy or stringy, and the boilerplate was tedious.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:42:00.598+0000",
                    "updated": "2020-10-09T13:42:00.598+0000",
                    "started": "2020-10-09T13:42:00.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498128",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/498192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400\n\n\n   This is a proposed approach - if people like this approach I will write proper tests (to ensure that the cast kernel support and this function remain in sync).\r\n   \r\n   This PR brings DataFusion to parity with the type casting supported by arrow and allows DataFusion to plan all casts that are supported by the arrow cast kernel\r\n   \r\n   Previously the notions of coercion and casting were somewhat conflated. I have tried to clarify them in https://github.com/apache/arrow/pull/8399 and this PR. See also https://github.com/apache/arrow/pull/8340#discussion_r501257096 for more discussion.\r\n   \r\n   I personally want this functionality so when I add support for `DictionaryArray`  casts in Arrow (https://github.com/apache/arrow/pull/8346)  they can also be used in DataFusion.\r\n   \r\n   Codewise, I am concerned about the duplication in logic between this and cast.rs. However, the test I have in mind will ensure they don't get out of sync\r\n   \r\n   Questions for reviewers:\r\n   1) Would this code / test be better to include in the arrow cast kernel (cast.rs) itself? To keep the \"support\" matrix code closer to the implementation?\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:47:45.235+0000",
                    "updated": "2020-10-09T13:47:45.235+0000",
                    "started": "2020-10-09T13:47:45.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498192",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/498216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501802894\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n\nReview comment:\n       This is something that I have been thinking about: in DataFusion, because we use dynamically typed arrays, we often have to annotate which types are supported by each arrow kernel / operation.\r\n   \r\n   Thus, we need to duplicate these `match`es to enumerate the valid types accepted by the kernels, so that we error during planning.\r\n   \r\n   I wonder if these functions shouldn't be closer to the implementation (i.e. in the `arrow::compute::kernels`), or, alternatively, if we could find an idiom that would allow us to write these `match`es one time (again, in compute::kernel).\r\n   \r\n   It seems to me that the pattern is:\r\n   \r\n   for compute\r\n   ```\r\n   match array.data_type() {\r\n      ... => compute(array)\r\n   }\r\n   ```\r\n   for datatypes:\r\n   \r\n   ```\r\n   match datatype {\r\n       ... => return Some(return_datatype)\r\n   }\r\n   ```\r\n   \r\n   one idea would be to use\r\n   \r\n   ```\r\n   match datatype {\r\n       ... => return Some((closure_that_computes, return_datatype))\r\n   }\r\n   ```\r\n   \r\n   so that both use-cases could be written in a single match (and reduce the risk of mis-typing / change in one place without a change in another place).\r\n   \r\n   This comment is not specific to this PR, which I need to go through: I was just curious about your thoughts on this, since you have been touching in a couple of these recently.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T13:49:20.899+0000",
                    "updated": "2020-10-09T13:49:20.899+0000",
                    "started": "2020-10-09T13:49:20.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498216",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/498380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r501795062\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/mod.rs\n##########\n@@ -323,12 +324,13 @@ impl Expr {\n     ///\n     /// # Errors\n     ///\n-    /// This function errors when it is impossible to cast the expression to the target [arrow::datatypes::DataType].\n+    /// This function errors when it is impossible to cast the\n+    /// expression to the target [arrow::datatypes::DataType].\n     pub fn cast_to(&self, cast_to_type: &DataType, schema: &Schema) -> Result<Expr> {\n         let this_type = self.get_type(schema)?;\n         if this_type == *cast_to_type {\n             Ok(self.clone())\n-        } else if can_coerce_from(cast_to_type, &this_type) {\n+        } else if can_cast_types(&this_type, cast_to_type) {\n\nReview comment:\n       the idea is to use a common `can_cast_types` function to detect valid casts at plan time, and make `can_cast_types` consistent with the arrow cast kernel\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n\nReview comment:\n       @jorgecarleitao  -- I think the idea of using a single `match` in cast.rs is a good one. I'll try and whip up a proposed PR with that pattern for discussion (though probably not until tomorrow morning US Eastern time, or the weekend)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:02:32.181+0000",
                    "updated": "2020-10-09T14:02:32.181+0000",
                    "started": "2020-10-09T14:02:32.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498380",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/498425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#issuecomment-705633631\n\n\n   https://issues.apache.org/jira/browse/ARROW-10236\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:06:03.113+0000",
                    "updated": "2020-10-09T14:06:03.113+0000",
                    "started": "2020-10-09T14:06:03.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498425",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/499528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#issuecomment-707238239\n\n\n   Thanks for the nudge @jorgecarleitao  -- my plan is to move the code into arrow itself (and I was going to try some ideas to avoid the duplicate `case` statement). I haven't had as much time to work on this as I had hoped recently.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-12T17:02:14.279+0000",
                    "updated": "2020-10-12T17:02:14.279+0000",
                    "started": "2020-10-12T17:02:14.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499528",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/499966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T10:08:43.686+0000",
                    "updated": "2020-10-13T10:08:43.686+0000",
                    "started": "2020-10-13T10:08:43.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499966",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/499967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#issuecomment-707637676\n\n\n   To keep the PR list clean, I will close this one and open a new PR with the alternate proposed implementation\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T10:08:46.687+0000",
                    "updated": "2020-10-13T10:08:46.687+0000",
                    "started": "2020-10-13T10:08:46.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499967",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/500305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8400:\nURL: https://github.com/apache/arrow/pull/8400#discussion_r504278902\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/type_casting.rs\n##########\n@@ -0,0 +1,218 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides a way of checking what type casts are\n+//! supported at planning time for DataFusion. Since DataFusion uses\n+//! the Arrow `cast` compute kernel, the supported casts are the same\n+//! as the Arrow casts.\n+//!\n+//! The rules in this module are designed to be redundant with the\n+//! rules in the Arrow `cast` kernel. The redundancy is needed so that\n+//! DataFusion can generate an error at plan time rather than during\n+//! execution (which could happen many hours after execution starts,\n+//! when the query finally reaches that point)\n+//!\n+\n+use arrow::datatypes::*;\n+\n+/// Return true if a value of type `from_type` can be cast into a\n+/// value of `to_type`. Note that such as cast may be lossy. For\n+/// lossless type conversions, see the `type_coercion` module\n+///\n+/// See the module level documentation for more detail on casting\n+pub fn can_cast_types(from_type: &DataType, to_type: &DataType) -> bool {\n+    use self::DataType::*;\n+    if from_type == to_type {\n+        return true;\n+    }\n+\n+    // Note this is meant to mirror the structure in arrow/src/compute/kernels/cast.rs\n+    match (from_type, to_type) {\n\nReview comment:\n       @jorgecarleitao  and @nevi-me  -- here is the the pattern I came up with:\r\n   \r\n   ```rust\r\n   pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\r\n       let from_type = array.data_type();\r\n       let func = get_cast_function(from_type, to_type)?;\r\n       func(array)\r\n   }\r\n   \r\n   /// Returns true if the cast from `array.array` type is possible, false otherwise\r\n   pub fn can_cast(array: &ArrayRef, to_type: &DataType, ) -> bool {\r\n       let from_type = array.data_type();\r\n       get_cast_function(from_type, to_type).is_ok()\r\n   }\r\n   \r\n   \r\n   type CastFunction = Fn(&ArrayRef) -> Result<ArrayRef>;\r\n   \r\n   /// Returns a function that can cast `array` to `to_type`.\r\n   ///\r\n   /// All type checking for supported types should be done in\r\n   /// get_cast_func itself. Thus, if Ok(func) is returned, func(array)\r\n   /// should be able to succeed for arrays. In other words, Err(_)\r\n   /// should be returned by `get_cast_function`, NOT `func(array)` if\r\n   /// the types are incompatible.\r\n   ///\r\n   /// can_cast relies on this functionality\r\n   fn get_cast_function(from_type: &DataType, to_type: &DataType) -> Result<CastFunction> {\r\n       use DataType::*;\r\n   \r\n       // clone array if types are the same\r\n       if from_type == to_type {\r\n           return Ok(|array| { Ok(array.clone()) })\r\n       }\r\n   \r\n       match (from_type, to_type) {\r\n           (Struct(_), _) => Err(ArrowError::ComputeError(\r\n               \"Cannot cast from struct to other types\".to_string(),\r\n           )),\r\n           (_, Struct(_)) => Err(ArrowError::ComputeError(\r\n               \"Cannot cast to struct from other types\".to_string(),\r\n           )),\r\n           (List(_), List(ref to)) => Ok(|array| {\r\n               let data = array.data_ref();\r\n               let underlying_array = make_array(data.child_data()[0].clone());\r\n               let cast_array = cast(&underlying_array, &to)?;\r\n               let array_data = ArrayData::new(\r\n                   *to.clone(),\r\n                   array.len(),\r\n                   Some(cast_array.null_count()),\r\n                   cast_array\r\n                       .data()\r\n                       .null_bitmap()\r\n                       .clone()\r\n                       .map(|bitmap| bitmap.bits),\r\n                   array.offset(),\r\n                   // reuse offset buffer\r\n                   data.buffers().to_vec(),\r\n                   vec![cast_array.data()],\r\n               );\r\n               let list = ListArray::from(Arc::new(array_data));\r\n               Ok(Arc::new(list) as ArrayRef)\r\n           }),\r\n           (List(_), _) => Err(ArrowError::ComputeError(\r\n               \"Cannot cast list to non-list data types\".to_string(),\r\n           )),\r\n           (_, List(ref to)) => {\r\n               // cast primitive to list's primitive\r\n               let cast_func = get_cast_function(from_type, &to)?;\r\n               Ok(move |array| {\r\n                   let cast_array = cast_func(array, &to)?;\r\n                   // create offsets, where if array.len() = 2, we have [0,1,2]\r\n                   let offsets: Vec<i32> = (0..=array.len() as i32).collect();\r\n                   let value_offsets = Buffer::from(offsets[..].to_byte_slice());\r\n                   let list_data = ArrayData::new(\r\n                       *to.clone(),\r\n                       array.len(),\r\n                       Some(cast_array.null_count()),\r\n                       cast_array\r\n                           .data()\r\n                           .null_bitmap()\r\n                           .clone()\r\n                           .map(|bitmap| bitmap.bits),\r\n                       0,\r\n                       vec![value_offsets],\r\n                       vec![cast_array.data()],\r\n                   );\r\n                   let list_array = Arc::new(ListArray::from(Arc::new(list_data))) as ArrayRef;\r\n   \r\n                   Ok(list_array)\r\n               })\r\n           }\r\n   ...\r\n   ```\r\n   \r\n   While I think it would work, I am not sure I will have enough time. \r\n   \r\n   Instead, I will get a PR up that moves the `can_cast_types` (with duplicate `match`) to arrow and then try a separate refactoring PR to unify the two match arms\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T21:50:08.074+0000",
                    "updated": "2020-10-13T21:50:08.074+0000",
                    "started": "2020-10-13T21:50:08.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500305",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/500676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8460:\nURL: https://github.com/apache/arrow/pull/8460\n\n\n   This is a PR incorporating the feedback from @nevi-me  and @jorgecarleitao  from https://github.com/apache/arrow/pull/8400\r\n   \r\n   It adds\r\n   1. a `can_cast_types` function to the Arrow cast kernel (as suggested by @jorgecarleitao  / @nevi-me  in https://github.com/apache/arrow/pull/8400#discussion_r501850814) that encodes the valid type casting\r\n   2. A test that ensures `can_cast_types` and `cast` remain in sync\r\n   3. Bug fixes that the test above uncovered (I'll comment inline)\r\n   4. Change DataFuson to use `can_cast_types` so that it plans casting consistently with what arrow allows\r\n   \r\n   Previously the notions of coercion and casting were somewhat conflated in DataFusion. I have tried to clarify them in https://github.com/apache/arrow/pull/8399 and this PR. See also https://github.com/apache/arrow/pull/8340#discussion_r501257096 for more discussion.\r\n   \r\n   I am adding this functionality so DataFusion gains rudimentary support `DictionaryArray`.\r\n   \r\n   Codewise, I am concerned about the duplication in logic between the match statements in `cast` and `can_cast_types. I have some thoughts on how to unify them (see https://github.com/apache/arrow/pull/8400#discussion_r504278902), but I don't have time to implement that as it is a bigger change. I think this approach with some duplication is ok, and the test will ensure they remain in sync. \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T14:25:28.070+0000",
                    "updated": "2020-10-14T14:25:28.070+0000",
                    "started": "2020-10-14T14:25:28.070+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500676",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/500679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8460:\nURL: https://github.com/apache/arrow/pull/8460#discussion_r504721964\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/cast.rs\n##########\n@@ -356,11 +520,24 @@ pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n \n         // temporal casts\n         (Int32, Date32(_)) => cast_array_data::<Date32Type>(array, to_type.clone()),\n-        (Int32, Time32(_)) => cast_array_data::<Date32Type>(array, to_type.clone()),\n+        (Int32, Time32(TimeUnit::Second)) => {\n\nReview comment:\n       It is not possible to cast Int32 to a Time32(Microsecond) or Time32(Nanosecond)\n\n##########\nFile path: rust/arrow/src/compute/kernels/cast.rs\n##########\n@@ -549,7 +726,18 @@ pub fn cast(array: &ArrayRef, to_type: &DataType) -> Result<ArrayRef> {\n         (Timestamp(from_unit, _), Date64(_)) => {\n             let from_size = time_unit_multiple(&from_unit);\n             let to_size = MILLISECONDS;\n-            if from_size != to_size {\n+\n+            // Scale time_array by (to_size / from_size) using a\n\nReview comment:\n       Without this code, casting from a timestamp 32 -> Date64 would result in a divide by zero error (as `from_size / to_size` was `1 / 1000 == 0`\n\n##########\nFile path: rust/arrow/src/datatypes.rs\n##########\n@@ -1129,6 +1129,16 @@ impl DataType {\n             DataType::Dictionary(_, _) => json!({ \"name\": \"dictionary\"}),\n         }\n     }\n+\n+    /// Returns true if this type is numeric: (UInt*, Unit*, or Float*)\n+    pub fn is_numeric(t: &DataType) -> bool {\n\nReview comment:\n       As suggested by @nevi-me on https://github.com/apache/arrow/pull/8400#discussion_r501851945\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T14:27:55.396+0000",
                    "updated": "2020-10-14T14:27:55.396+0000",
                    "started": "2020-10-14T14:27:55.396+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500679",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/500685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8460:\nURL: https://github.com/apache/arrow/pull/8460#issuecomment-708444187\n\n\n   https://issues.apache.org/jira/browse/ARROW-10236\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T14:33:53.308+0000",
                    "updated": "2020-10-14T14:33:53.308+0000",
                    "started": "2020-10-14T14:33:53.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500685",
                    "issueId": "13334438"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/worklog/500691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8460:\nURL: https://github.com/apache/arrow/pull/8460#discussion_r504735006\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1985,9 +1982,10 @@ mod tests {\n \n     #[test]\n     fn invalid_cast() -> Result<()> {\n-        let schema = Schema::new(vec![Field::new(\"a\", DataType::Utf8, false)]);\n-        let result = cast(col(\"a\"), &schema, DataType::Int32);\n-        result.expect_err(\"Invalid CAST from Utf8 to Int32\");\n+        // Ensure a useful error happens at plan time if invalid casts are used\n\nReview comment:\n       It turns out that arrow can, in fact, cast from utf8 -> Int32\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T14:42:13.084+0000",
                    "updated": "2020-10-14T14:42:13.084+0000",
                    "started": "2020-10-14T14:42:13.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500691",
                    "issueId": "13334438"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1039843e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@372abf79[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4559cee0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@276a7045[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24414615[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@50a42aed[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b81c0d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2f1d7bba[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@142e1a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@70c05025[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2512a192[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6116ce21[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 16 05:12:09 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-16T05:12:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10236/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-08T14:55:25.000+0000",
        "updated": "2020-10-16T05:12:35.000+0000",
        "timeoriginalestimate": null,
        "description": "There are plan time checks for valid type casts in DataFusion that are designed to catch errors early before plan execution\r\n\r\nSadly the cast types that DataFusion thinks are valid is a significant subset of what the arrow cast kernel supports.  The goal of this ticket is to bring DataFusion to parity with the type casting supported by arrow and  allow DataFusion to plan all casts that are supported by the arrow cast kernel\r\n\r\n(I want this implicitly so when I add support for DictionaryArray casts in Arrow they also are part of DataFusion)\r\n\r\nPreviously the notions of coercion and casting were somewhat conflated. I have tried to clarify them in https://github.com/apache/arrow/pull/8399 as well\r\n\r\nFor more detail, see https://github.com/apache/arrow/pull/8340#discussion_r501257096 from [~jorgecarleitao]\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Make DataFusion casting rules consistent with cast kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334438/comment/17215190",
                    "id": "17215190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8460\n[https://github.com/apache/arrow/pull/8460]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-10-16T05:12:09.231+0000",
                    "updated": "2020-10-16T05:12:09.231+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jj54:",
        "customfield_12314139": null
    }
}