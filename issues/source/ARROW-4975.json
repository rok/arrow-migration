{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13222906",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906",
    "key": "ARROW-4975",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "good-first-issue",
            "good-second-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12563187",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12563187",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13239320",
                    "key": "ARROW-5594",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320",
                    "fields": {
                        "summary": "[C++] add support for UnionArrays to Take and Filter",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mbrobbel",
            "name": "mbrobbel",
            "key": "mbrobbel",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Matthijs Brobbel",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4975/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/689613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel opened a new pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843\n\n\n   This PR adds support for concatenation of union arrays. \r\n   \r\n   For sparse union arrays this is trivial: the type buffers and child arrays are concatenated like the other concatenate implementations.\r\n   For dense union arrays the following approach is used:\r\n   - The type buffers are concatenated.\r\n   - The child arrays are concatenated, but slicing is ignored. This makes building the offsets buffer more simple.\r\n   - For every input array the length of the different child arrays (concatenated up to that point) is tracked. By iterating over the types buffers these offsets can be applied to the values in the concatenated offsets buffer.\r\n   \r\n   Does this make sense or should we slice child arrays (when required) and reflect this in the concatenated offsets buffer?\r\n   \r\n   This PR also removes a check in `DenseUnionArray::Make` that rejected empty offsets buffers. This made it impossible to construct empty dense union arrays. I discussed removing this check with @bkietz. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T21:24:40.751+0000",
                    "updated": "2021-12-02T21:24:40.751+0000",
                    "started": "2021-12-02T21:24:40.750+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689613",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/689615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#issuecomment-985012749\n\n\n   https://issues.apache.org/jira/browse/ARROW-4975\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T21:24:55.582+0000",
                    "updated": "2021-12-02T21:24:55.582+0000",
                    "started": "2021-12-02T21:24:55.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689615",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/690082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#discussion_r762004969\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -364,27 +364,89 @@ TEST_F(ConcatenateTest, DictionaryTypeNullSlots) {\n   AssertArraysEqual(*expected, *concat_actual);\n }\n \n-TEST_F(ConcatenateTest, DISABLED_UnionType) {\n+TEST_F(ConcatenateTest, UnionType) {\n   // sparse mode\n   Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n+    auto foo = this->GeneratePrimitive<Int8Type>(size, 0);\n     auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n     auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n+    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, 0);\n     ASSERT_OK_AND_ASSIGN(*out, SparseUnionArray::Make(*type_ids, {foo, bar, baz}));\n   });\n   // dense mode\n-  Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n-    auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n-    auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n-    auto value_offsets = rng_.Numeric<Int32Type>(size, 0, size, 0);\n-    ASSERT_OK_AND_ASSIGN(\n-        *out, DenseUnionArray::Make(*type_ids, *value_offsets, {foo, bar, baz}));\n+  Check([this](int32_t size, double null_probabilities, std::shared_ptr<Array>* out) {\n+    *out = rng_.ArrayOf(dense_union({\n\nReview comment:\n       Why not use ArrayOf in both cases?\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -364,27 +364,89 @@ TEST_F(ConcatenateTest, DictionaryTypeNullSlots) {\n   AssertArraysEqual(*expected, *concat_actual);\n }\n \n-TEST_F(ConcatenateTest, DISABLED_UnionType) {\n+TEST_F(ConcatenateTest, UnionType) {\n   // sparse mode\n   Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n+    auto foo = this->GeneratePrimitive<Int8Type>(size, 0);\n     auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n     auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n+    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, 0);\n     ASSERT_OK_AND_ASSIGN(*out, SparseUnionArray::Make(*type_ids, {foo, bar, baz}));\n   });\n   // dense mode\n-  Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n-    auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n-    auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n-    auto value_offsets = rng_.Numeric<Int32Type>(size, 0, size, 0);\n-    ASSERT_OK_AND_ASSIGN(\n-        *out, DenseUnionArray::Make(*type_ids, *value_offsets, {foo, bar, baz}));\n+  Check([this](int32_t size, double null_probabilities, std::shared_ptr<Array>* out) {\n+    *out = rng_.ArrayOf(dense_union({\n+                            field(\"a\", uint32()),\n+                            field(\"b\", boolean()),\n+                            field(\"c\", int8()),\n+                        }),\n+                        size, null_probabilities);\n   });\n }\n \n+TEST_F(ConcatenateTest, DenseUnionTypeOverflow) {\n+  // Offset overflow\n+  auto type_ids = ArrayFromJSON(int8(), \"[0]\");\n+  auto offsets = ArrayFromJSON(int32(), \"[2147483646]\");\n+  auto child_array = ArrayFromJSON(uint8(), \"[0, 1]\");\n+  ASSERT_OK_AND_ASSIGN(auto array,\n+                       DenseUnionArray::Make(*type_ids, *offsets, {child_array}));\n+  ArrayVector arrays({array, array});\n+  ASSERT_RAISES(Invalid, Concatenate(arrays, default_memory_pool()));\n+\n+  // Length overflow\n+  auto type_ids_ok = ArrayFromJSON(int8(), \"[0]\");\n+  auto offsets_ok = ArrayFromJSON(int32(), \"[0]\");\n+  auto child_array_overflow =\n+      this->rng_.ArrayOf(null(), std::numeric_limits<int32_t>::max() - 1, 0.0);\n+  ASSERT_OK_AND_ASSIGN(\n+      auto array_overflow,\n+      DenseUnionArray::Make(*type_ids_ok, *offsets_ok, {child_array_overflow}));\n+  ArrayVector arrays_overflow({array_overflow, array_overflow});\n+  ASSERT_RAISES(Invalid, Concatenate(arrays_overflow, default_memory_pool()));\n+}\n+\n+TEST_F(ConcatenateTest, DenseUnionType) {\n+  auto type_ids = ArrayFromJSON(int8(), \"[0, 0, 1, 1, 0, 1]\");\n+  auto offsets = ArrayFromJSON(int32(), \"[0, 1, 0, 1, 2, 2]\");\n+  auto child_one = ArrayFromJSON(boolean(), \"[true, true, false]\");\n+  auto child_two = ArrayFromJSON(int8(), \"[1, 2, 3]\");\n+  ASSERT_OK_AND_ASSIGN(\n+      auto array, DenseUnionArray::Make(*type_ids, *offsets, {child_one, child_two}));\n+  ASSERT_OK(array->ValidateFull());\n+\n+  ArrayVector arrays({array, array});\n+  ASSERT_OK_AND_ASSIGN(auto concat_arrays, Concatenate(arrays, default_memory_pool()));\n+  ASSERT_OK(concat_arrays->ValidateFull());\n+\n+  auto type_ids_expected = ArrayFromJSON(int8(), \"[0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1]\");\n+  auto offsets_expected = ArrayFromJSON(int32(), \"[0, 1, 0, 1, 2, 2, 3, 4, 3, 4, 5, 5]\");\n+  auto child_one_expected =\n+      ArrayFromJSON(boolean(), \"[true, true, false, true, true, false]\");\n+  auto child_two_expected = ArrayFromJSON(int8(), \"[1, 2, 3, 1, 2, 3]\");\n+  ASSERT_OK_AND_ASSIGN(auto expected,\n+                       DenseUnionArray::Make(*type_ids_expected, *offsets_expected,\n+                                             {child_one_expected, child_two_expected}));\n+  ASSERT_OK(expected->ValidateFull());\n+  AssertArraysEqual(*expected, *concat_arrays);\n+\n+  ArrayVector sliced_arrays({array->Slice(1, 4), array});\n+  ASSERT_OK_AND_ASSIGN(auto concat_sliced_arrays,\n+                       Concatenate(sliced_arrays, default_memory_pool()));\n+  ASSERT_OK(concat_sliced_arrays->ValidateFull());\n+\n+  auto type_ids_sliced = ArrayFromJSON(int8(), \"[0, 1, 1, 0, 0, 0, 1, 1, 0, 1]\");\n+  auto offsets_sliced = ArrayFromJSON(int32(), \"[1, 0, 1, 2, 3, 4, 3, 4, 5, 5]\");\n+  auto child_one_sliced =\n+      ArrayFromJSON(boolean(), \"[true, true, false, true, true, false]\");\n+  auto child_two_sliced = ArrayFromJSON(int8(), \"[1, 2, 3, 1, 2, 3]\");\n+  ASSERT_OK_AND_ASSIGN(auto expected_sliced,\n+                       DenseUnionArray::Make(*type_ids_sliced, *offsets_sliced,\n+                                             {child_one_sliced, child_two_sliced}));\n+  ASSERT_OK(expected_sliced->ValidateFull());\n+  AssertArraysEqual(*expected_sliced, *concat_sliced_arrays);\n+}\n\nReview comment:\n       Can we also test concatenation of an array 1) which is not sliced, but whose children are sliced/have an offset? 2) which is sliced, whose children additionally have an offset?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-03T15:06:34.842+0000",
                    "updated": "2021-12-03T15:06:34.842+0000",
                    "started": "2021-12-03T15:06:34.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "690082",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/690318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#discussion_r762249811\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -364,27 +364,89 @@ TEST_F(ConcatenateTest, DictionaryTypeNullSlots) {\n   AssertArraysEqual(*expected, *concat_actual);\n }\n \n-TEST_F(ConcatenateTest, DISABLED_UnionType) {\n+TEST_F(ConcatenateTest, UnionType) {\n   // sparse mode\n   Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n+    auto foo = this->GeneratePrimitive<Int8Type>(size, 0);\n     auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n     auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n+    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, 0);\n     ASSERT_OK_AND_ASSIGN(*out, SparseUnionArray::Make(*type_ids, {foo, bar, baz}));\n   });\n   // dense mode\n-  Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n-    auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n-    auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n-    auto value_offsets = rng_.Numeric<Int32Type>(size, 0, size, 0);\n-    ASSERT_OK_AND_ASSIGN(\n-        *out, DenseUnionArray::Make(*type_ids, *value_offsets, {foo, bar, baz}));\n+  Check([this](int32_t size, double null_probabilities, std::shared_ptr<Array>* out) {\n+    *out = rng_.ArrayOf(dense_union({\n+                            field(\"a\", uint32()),\n+                            field(\"b\", boolean()),\n+                            field(\"c\", int8()),\n+                        }),\n+                        size, null_probabilities);\n   });\n }\n \n+TEST_F(ConcatenateTest, DenseUnionTypeOverflow) {\n+  // Offset overflow\n+  auto type_ids = ArrayFromJSON(int8(), \"[0]\");\n+  auto offsets = ArrayFromJSON(int32(), \"[2147483646]\");\n+  auto child_array = ArrayFromJSON(uint8(), \"[0, 1]\");\n+  ASSERT_OK_AND_ASSIGN(auto array,\n+                       DenseUnionArray::Make(*type_ids, *offsets, {child_array}));\n+  ArrayVector arrays({array, array});\n+  ASSERT_RAISES(Invalid, Concatenate(arrays, default_memory_pool()));\n+\n+  // Length overflow\n+  auto type_ids_ok = ArrayFromJSON(int8(), \"[0]\");\n+  auto offsets_ok = ArrayFromJSON(int32(), \"[0]\");\n+  auto child_array_overflow =\n+      this->rng_.ArrayOf(null(), std::numeric_limits<int32_t>::max() - 1, 0.0);\n+  ASSERT_OK_AND_ASSIGN(\n+      auto array_overflow,\n+      DenseUnionArray::Make(*type_ids_ok, *offsets_ok, {child_array_overflow}));\n+  ArrayVector arrays_overflow({array_overflow, array_overflow});\n+  ASSERT_RAISES(Invalid, Concatenate(arrays_overflow, default_memory_pool()));\n+}\n+\n+TEST_F(ConcatenateTest, DenseUnionType) {\n+  auto type_ids = ArrayFromJSON(int8(), \"[0, 0, 1, 1, 0, 1]\");\n+  auto offsets = ArrayFromJSON(int32(), \"[0, 1, 0, 1, 2, 2]\");\n+  auto child_one = ArrayFromJSON(boolean(), \"[true, true, false]\");\n+  auto child_two = ArrayFromJSON(int8(), \"[1, 2, 3]\");\n+  ASSERT_OK_AND_ASSIGN(\n+      auto array, DenseUnionArray::Make(*type_ids, *offsets, {child_one, child_two}));\n+  ASSERT_OK(array->ValidateFull());\n+\n+  ArrayVector arrays({array, array});\n+  ASSERT_OK_AND_ASSIGN(auto concat_arrays, Concatenate(arrays, default_memory_pool()));\n+  ASSERT_OK(concat_arrays->ValidateFull());\n+\n+  auto type_ids_expected = ArrayFromJSON(int8(), \"[0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1]\");\n+  auto offsets_expected = ArrayFromJSON(int32(), \"[0, 1, 0, 1, 2, 2, 3, 4, 3, 4, 5, 5]\");\n+  auto child_one_expected =\n+      ArrayFromJSON(boolean(), \"[true, true, false, true, true, false]\");\n+  auto child_two_expected = ArrayFromJSON(int8(), \"[1, 2, 3, 1, 2, 3]\");\n+  ASSERT_OK_AND_ASSIGN(auto expected,\n+                       DenseUnionArray::Make(*type_ids_expected, *offsets_expected,\n+                                             {child_one_expected, child_two_expected}));\n+  ASSERT_OK(expected->ValidateFull());\n+  AssertArraysEqual(*expected, *concat_arrays);\n+\n+  ArrayVector sliced_arrays({array->Slice(1, 4), array});\n+  ASSERT_OK_AND_ASSIGN(auto concat_sliced_arrays,\n+                       Concatenate(sliced_arrays, default_memory_pool()));\n+  ASSERT_OK(concat_sliced_arrays->ValidateFull());\n+\n+  auto type_ids_sliced = ArrayFromJSON(int8(), \"[0, 1, 1, 0, 0, 0, 1, 1, 0, 1]\");\n+  auto offsets_sliced = ArrayFromJSON(int32(), \"[1, 0, 1, 2, 3, 4, 3, 4, 5, 5]\");\n+  auto child_one_sliced =\n+      ArrayFromJSON(boolean(), \"[true, true, false, true, true, false]\");\n+  auto child_two_sliced = ArrayFromJSON(int8(), \"[1, 2, 3, 1, 2, 3]\");\n+  ASSERT_OK_AND_ASSIGN(auto expected_sliced,\n+                       DenseUnionArray::Make(*type_ids_sliced, *offsets_sliced,\n+                                             {child_one_sliced, child_two_sliced}));\n+  ASSERT_OK(expected_sliced->ValidateFull());\n+  AssertArraysEqual(*expected_sliced, *concat_sliced_arrays);\n\nReview comment:\n       I think for for most of these arrays it's acceptable and more readable to come straight from JSON\r\n   ```suggestion\r\n     AssertArraysEqual(*ArrayFromJSON(dense_union({field(\"\", boolean()), field(\"\", int8())}), R\"([\r\n       [0, true],\r\n       [1, 1],\r\n       [1, 2],\r\n       [0, true],\r\n       [0, false],\r\n       [0, true],\r\n       [1, 3],\r\n       [1, 1],\r\n       [0, true],\r\n       [1, 3]\r\n     ])\"), *concat_sliced_arrays);\r\n   ```\r\n   \r\n   The only case where you *need* to construct the dense union array with explicit children is when you're making an array with sliced children\n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -349,7 +350,90 @@ class ConcatenateImpl {\n   }\n \n   Status Visit(const UnionType& u) {\n-    return Status::NotImplemented(\"concatenation of \", u);\n+    // This implementation assumes that all input arrays are valid union arrays\n+    // with same number of variants.\n+\n+    // Concatenate the type buffers.\n+    ARROW_ASSIGN_OR_RAISE(auto type_buffers, Buffers(1, sizeof(int8_t)));\n+    RETURN_NOT_OK(ConcatenateBuffers(type_buffers, pool_).Value(&out_->buffers[1]));\n+\n+    // Concatenate the child data. For sparse unions the child data is sliced\n+    // based on the offset and length of the array data. For dense unions the\n+    // child data is not sliced because this makes constructing the concatenated\n+    // offsets buffer more simple. We could however choose to modify this and\n+    // slice the child arrays and reflect this in the concatenated offsets\n+    // buffer.\n+    switch (u.mode()) {\n+      case UnionMode::SPARSE: {\n+        for (int i = 0; i < u.num_fields(); i++) {\n+          ARROW_ASSIGN_OR_RAISE(auto child_data, ChildData(i));\n+          RETURN_NOT_OK(\n+              ConcatenateImpl(child_data, pool_).Concatenate(&out_->child_data[i]));\n+        }\n+        break;\n+      }\n+      case UnionMode::DENSE: {\n+        for (int i = 0; i < u.num_fields(); i++) {\n+          ArrayDataVector child_data(in_.size());\n+          for (size_t j = 0; j < in_.size(); j++) {\n+            child_data[j] = in_[j]->child_data[i];\n+          }\n+          RETURN_NOT_OK(\n+              ConcatenateImpl(child_data, pool_).Concatenate(&out_->child_data[i]));\n+        }\n+        break;\n+      }\n+    }\n+\n+    // Concatenate offsets buffers for dense union arrays.\n+    if (u.mode() == UnionMode::DENSE) {\n+      // The number of offset values is equal to the number of type_ids in the\n+      // concatenated type buffers.\n+      TypedBufferBuilder<int32_t> builder;\n+      RETURN_NOT_OK(builder.Reserve(out_->length));\n+\n+      // Initialize a vector for child array lengths. These are updated during\n+      // iteration over the input arrays to track the concatenated child array\n+      // lengths. These lengths are used as offsets for the concatenated offsets\n+      // buffer.\n+      std::vector<int32_t> offset_map(u.num_fields());\n+\n+      // Iterate over all input arrays.\n+      for (size_t i = 0; i < in_.size(); i++) {\n+        // Get sliced type ids and offsets.\n+        auto type_ids = in_[i]->GetValues<int8_t>(1);\n+        auto offset_values = in_[i]->GetValues<int32_t>(2);\n+\n+        // Iterate over all elements in the type buffer and append the updated\n+        // offset to the concatenated offsets buffer.\n+        for (auto j = 0; j < in_[i]->length; j++) {\n+          int32_t offset;\n+          if (internal::AddWithOverflow(offset_map[type_ids[j]], offset_values[j],\n\nReview comment:\n       Please rewrite the unit tests to use type_codes other than 0..n\n\n##########\nFile path: cpp/src/arrow/array/array_nested.cc\n##########\n@@ -708,10 +708,6 @@ DenseUnionArray::DenseUnionArray(std::shared_ptr<DataType> type, int64_t length,\n Result<std::shared_ptr<Array>> DenseUnionArray::Make(\n     const Array& type_ids, const Array& value_offsets, ArrayVector children,\n     std::vector<std::string> field_names, std::vector<type_code_t> type_codes) {\n-  if (value_offsets.length() == 0) {\n\nReview comment:\n       :+1: \n\n##########\nFile path: cpp/src/arrow/array/concatenate.cc\n##########\n@@ -349,7 +350,90 @@ class ConcatenateImpl {\n   }\n \n   Status Visit(const UnionType& u) {\n-    return Status::NotImplemented(\"concatenation of \", u);\n+    // This implementation assumes that all input arrays are valid union arrays\n+    // with same number of variants.\n+\n+    // Concatenate the type buffers.\n+    ARROW_ASSIGN_OR_RAISE(auto type_buffers, Buffers(1, sizeof(int8_t)));\n+    RETURN_NOT_OK(ConcatenateBuffers(type_buffers, pool_).Value(&out_->buffers[1]));\n+\n+    // Concatenate the child data. For sparse unions the child data is sliced\n+    // based on the offset and length of the array data. For dense unions the\n+    // child data is not sliced because this makes constructing the concatenated\n+    // offsets buffer more simple. We could however choose to modify this and\n+    // slice the child arrays and reflect this in the concatenated offsets\n+    // buffer.\n+    switch (u.mode()) {\n+      case UnionMode::SPARSE: {\n+        for (int i = 0; i < u.num_fields(); i++) {\n+          ARROW_ASSIGN_OR_RAISE(auto child_data, ChildData(i));\n+          RETURN_NOT_OK(\n+              ConcatenateImpl(child_data, pool_).Concatenate(&out_->child_data[i]));\n+        }\n+        break;\n+      }\n+      case UnionMode::DENSE: {\n+        for (int i = 0; i < u.num_fields(); i++) {\n+          ArrayDataVector child_data(in_.size());\n+          for (size_t j = 0; j < in_.size(); j++) {\n+            child_data[j] = in_[j]->child_data[i];\n+          }\n+          RETURN_NOT_OK(\n+              ConcatenateImpl(child_data, pool_).Concatenate(&out_->child_data[i]));\n+        }\n+        break;\n+      }\n+    }\n+\n+    // Concatenate offsets buffers for dense union arrays.\n+    if (u.mode() == UnionMode::DENSE) {\n+      // The number of offset values is equal to the number of type_ids in the\n+      // concatenated type buffers.\n+      TypedBufferBuilder<int32_t> builder;\n+      RETURN_NOT_OK(builder.Reserve(out_->length));\n+\n+      // Initialize a vector for child array lengths. These are updated during\n+      // iteration over the input arrays to track the concatenated child array\n+      // lengths. These lengths are used as offsets for the concatenated offsets\n+      // buffer.\n+      std::vector<int32_t> offset_map(u.num_fields());\n+\n+      // Iterate over all input arrays.\n+      for (size_t i = 0; i < in_.size(); i++) {\n+        // Get sliced type ids and offsets.\n+        auto type_ids = in_[i]->GetValues<int8_t>(1);\n+        auto offset_values = in_[i]->GetValues<int32_t>(2);\n+\n+        // Iterate over all elements in the type buffer and append the updated\n+        // offset to the concatenated offsets buffer.\n+        for (auto j = 0; j < in_[i]->length; j++) {\n+          int32_t offset;\n+          if (internal::AddWithOverflow(offset_map[type_ids[j]], offset_values[j],\n\nReview comment:\n       Unfortunately, union type ids are slightly subtler than this: the values in the type ids buffer are drawn from UnionType::type_codes and are not necessarily a valid index into child_data. For example, consider the an array of `dense_union<int32=2, string=5>`. This array's type_ids buffer would be `[2, 5, 2]` to indicate int, string, int\r\n   \r\n   UnionType::child_ids is a convenient mapping from type_id to child_data index\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-03T21:00:25.597+0000",
                    "updated": "2021-12-03T21:00:25.597+0000",
                    "started": "2021-12-03T21:00:25.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "690318",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/690842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel commented on a change in pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#discussion_r762817626\n\n\n\n##########\nFile path: cpp/src/arrow/array/concatenate_test.cc\n##########\n@@ -364,27 +364,89 @@ TEST_F(ConcatenateTest, DictionaryTypeNullSlots) {\n   AssertArraysEqual(*expected, *concat_actual);\n }\n \n-TEST_F(ConcatenateTest, DISABLED_UnionType) {\n+TEST_F(ConcatenateTest, UnionType) {\n   // sparse mode\n   Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n+    auto foo = this->GeneratePrimitive<Int8Type>(size, 0);\n     auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n     auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n+    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, 0);\n     ASSERT_OK_AND_ASSIGN(*out, SparseUnionArray::Make(*type_ids, {foo, bar, baz}));\n   });\n   // dense mode\n-  Check([this](int32_t size, double null_probability, std::shared_ptr<Array>* out) {\n-    auto foo = this->GeneratePrimitive<Int8Type>(size, null_probability);\n-    auto bar = this->GeneratePrimitive<DoubleType>(size, null_probability);\n-    auto baz = this->GeneratePrimitive<BooleanType>(size, null_probability);\n-    auto type_ids = rng_.Numeric<Int8Type>(size, 0, 2, null_probability);\n-    auto value_offsets = rng_.Numeric<Int32Type>(size, 0, size, 0);\n-    ASSERT_OK_AND_ASSIGN(\n-        *out, DenseUnionArray::Make(*type_ids, *value_offsets, {foo, bar, baz}));\n+  Check([this](int32_t size, double null_probabilities, std::shared_ptr<Array>* out) {\n+    *out = rng_.ArrayOf(dense_union({\n\nReview comment:\n       The test already existed for both sparse and dense unions. However for the dense union it didn't generate valid arrays, so I updated that to use `ArrayOf`. I'll also update the sparse union generation to use `ArrayOf`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-06T09:10:09.295+0000",
                    "updated": "2021-12-06T09:10:09.295+0000",
                    "started": "2021-12-06T09:10:09.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "690842",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/691143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#issuecomment-986908740\n\n\n   merging\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-06T15:57:10.214+0000",
                    "updated": "2021-12-06T15:57:10.214+0000",
                    "started": "2021-12-06T15:57:10.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "691143",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/691145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-06T15:58:34.377+0000",
                    "updated": "2021-12-06T15:58:34.377+0000",
                    "started": "2021-12-06T15:58:34.377+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "691145",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/691147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#issuecomment-986912639\n\n\n   Benchmark runs are scheduled for baseline = e903a214525dd6dcd8e57b20958a65dc678be47d and contender = a93c493c67e7b74a1baaaf71e77f25fef918199d. a93c493c67e7b74a1baaaf71e77f25fef918199d is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/89857c42550f4903a244a2f783bb61eb...b0aeb70e8555447c83305022954580da/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/c0e15726323e46e390cee6b4762c8e81...f59a8a163beb4d089cebf6edaf7cae2f/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/156f2d729e094b829bd68c8e58efbdc2...25832d3d9e974e279e72939c942a2ccd/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-06T16:01:10.422+0000",
                    "updated": "2021-12-06T16:01:10.422+0000",
                    "started": "2021-12-06T16:01:10.422+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "691147",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/691171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#issuecomment-986912639\n\n\n   Benchmark runs are scheduled for baseline = e903a214525dd6dcd8e57b20958a65dc678be47d and contender = a93c493c67e7b74a1baaaf71e77f25fef918199d. a93c493c67e7b74a1baaaf71e77f25fef918199d is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/89857c42550f4903a244a2f783bb61eb...b0aeb70e8555447c83305022954580da/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/c0e15726323e46e390cee6b4762c8e81...f59a8a163beb4d089cebf6edaf7cae2f/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/156f2d729e094b829bd68c8e58efbdc2...25832d3d9e974e279e72939c942a2ccd/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-06T16:21:31.383+0000",
                    "updated": "2021-12-06T16:21:31.383+0000",
                    "started": "2021-12-06T16:21:31.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "691171",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/691267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#issuecomment-986912639\n\n\n   Benchmark runs are scheduled for baseline = e903a214525dd6dcd8e57b20958a65dc678be47d and contender = a93c493c67e7b74a1baaaf71e77f25fef918199d. a93c493c67e7b74a1baaaf71e77f25fef918199d is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/89857c42550f4903a244a2f783bb61eb...b0aeb70e8555447c83305022954580da/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/c0e15726323e46e390cee6b4762c8e81...f59a8a163beb4d089cebf6edaf7cae2f/)\n   [Finished :arrow_down:0.49% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/156f2d729e094b829bd68c8e58efbdc2...25832d3d9e974e279e72939c942a2ccd/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-06T18:21:27.034+0000",
                    "updated": "2021-12-06T18:21:27.034+0000",
                    "started": "2021-12-06T18:21:27.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "691267",
                    "issueId": "13222906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/worklog/691299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11843:\nURL: https://github.com/apache/arrow/pull/11843#issuecomment-986912639\n\n\n   Benchmark runs are scheduled for baseline = e903a214525dd6dcd8e57b20958a65dc678be47d and contender = a93c493c67e7b74a1baaaf71e77f25fef918199d. a93c493c67e7b74a1baaaf71e77f25fef918199d is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/89857c42550f4903a244a2f783bb61eb...b0aeb70e8555447c83305022954580da/)\n   [Finished :arrow_down:0.9% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/c0e15726323e46e390cee6b4762c8e81...f59a8a163beb4d089cebf6edaf7cae2f/)\n   [Finished :arrow_down:0.49% :arrow_up:0.09%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/156f2d729e094b829bd68c8e58efbdc2...25832d3d9e974e279e72939c942a2ccd/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-06T19:11:24.554+0000",
                    "updated": "2021-12-06T19:11:24.554+0000",
                    "started": "2021-12-06T19:11:24.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "691299",
                    "issueId": "13222906"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@458b83ca[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3beb0d26[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1cf3220e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7f128e8b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b8c9e02[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3528f97f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30ce4e86[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5bc3f8c2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74900136[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@601edda[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44f929e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@b8cc57[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Dec 06 15:58:32 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-06T15:58:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4975/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-03-20T17:56:55.000+0000",
        "updated": "2021-12-06T19:11:25.000+0000",
        "timeoriginalestimate": null,
        "description": "https://github.com/apache/arrow/pull/3746 adds support for concatenation of arrays, but UnionArrays are not supported.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Support concatenation of UnionArrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/comment/17448225",
                    "id": "17448225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "This should be almost trivial for sparse unions and would require a bit more care for dense unions.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-11-23T19:05:54.749+0000",
                    "updated": "2021-11-23T19:05:54.749+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906/comment/17454103",
                    "id": "17454103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11843\n[https://github.com/apache/arrow/pull/11843]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-06T15:58:32.180+0000",
                    "updated": "2021-12-06T15:58:32.180+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z00x2w:",
        "customfield_12314139": null
    }
}