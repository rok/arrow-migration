{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13239223",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223",
    "key": "ARROW-5581",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 40200,
            "total": 40200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5581/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 71,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/259411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542\n \n \n   Data sorting is an important and common feature. For this issue, we provide the basic interfaces for vector sorting. Users can implement customized sorting algorithms by extending our interfaces. In addition, we also give initial sorting implementations for both fixed-width and variable-width vectors.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T09:48:55.423+0000",
                    "updated": "2019-06-13T09:48:55.423+0000",
                    "started": "2019-06-13T09:48:55.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259411",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/259464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#issuecomment-501649848\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=h1) Report\n   > Merging [#4542](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/25b4a46805a3be01c83e53a92524d4d7b021c74d?src=pr&el=desc) will **increase** coverage by `0.98%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4542/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4542      +/-   ##\n   ==========================================\n   + Coverage   88.55%   89.53%   +0.98%     \n   ==========================================\n     Files         796      646     -150     \n     Lines      103239    91405   -11834     \n     Branches     1253        0    -1253     \n   ==========================================\n   - Hits        91425    81841    -9584     \n   + Misses      11569     9564    -2005     \n   + Partials      245        0     -245\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `97.66% <0%> (-0.94%)` | :arrow_down: |\n   | [go/arrow/ipc/writer.go](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL3dyaXRlci5nbw==) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | [js/src/Arrow.node.ts](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-anMvc3JjL0Fycm93Lm5vZGUudHM=) | | |\n   | [js/src/schema.ts](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-anMvc3JjL3NjaGVtYS50cw==) | | |\n   | [go/arrow/type\\_traits\\_boolean.go](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfYm9vbGVhbi5nbw==) | | |\n   | ... and [144 more](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=footer). Last update [25b4a46...f675c78](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T10:41:01.804+0000",
                    "updated": "2019-06-13T10:41:01.804+0000",
                    "started": "2019-06-13T10:41:01.803+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259464",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#issuecomment-501649848\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=h1) Report\n   > Merging [#4542](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/25b4a46805a3be01c83e53a92524d4d7b021c74d?src=pr&el=desc) will **increase** coverage by `0.92%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4542/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4542      +/-   ##\n   ==========================================\n   + Coverage   88.55%   89.48%   +0.92%     \n   ==========================================\n     Files         796      648     -148     \n     Lines      103239    91702   -11537     \n     Branches     1253        0    -1253     \n   ==========================================\n   - Hits        91425    82059    -9366     \n   + Misses      11569     9643    -1926     \n   + Partials      245        0     -245\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/vendored/datetime/date.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92ZW5kb3JlZC9kYXRldGltZS9kYXRlLmg=) | `26.35% <0%> (-4.28%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `97.66% <0%> (-0.94%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_flight.py](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9mbGlnaHQucHk=) | `79.26% <0%> (-0.82%)` | :arrow_down: |\n   | [cpp/src/arrow/ipc/metadata-internal.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGEtaW50ZXJuYWwuY2M=) | `87.46% <0%> (-0.12%)` | :arrow_down: |\n   | [cpp/src/arrow/pretty\\_print.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQuY2M=) | `83.18% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/flight/test-util.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9mbGlnaHQvdGVzdC11dGlsLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/vendored/datetime/tz.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92ZW5kb3JlZC9kYXRldGltZS90ei5o) | `43.47% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/vendored/datetime/tz\\_private.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92ZW5kb3JlZC9kYXRldGltZS90el9wcml2YXRlLmg=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/precompiled/epoch\\_time\\_point.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL3ByZWNvbXBpbGVkL2Vwb2NoX3RpbWVfcG9pbnQuaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/pretty\\_print-test.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQtdGVzdC5jYw==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [170 more](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=footer). Last update [25b4a46...6f9e8ec](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T03:35:10.903+0000",
                    "updated": "2019-06-14T03:35:10.903+0000",
                    "started": "2019-06-14T03:35:10.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260100",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#issuecomment-501649848\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=h1) Report\n   > Merging [#4542](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/25b4a46805a3be01c83e53a92524d4d7b021c74d?src=pr&el=desc) will **increase** coverage by `0.92%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4542/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4542      +/-   ##\n   ==========================================\n   + Coverage   88.55%   89.47%   +0.92%     \n   ==========================================\n     Files         796      648     -148     \n     Lines      103239    91702   -11537     \n     Branches     1253        0    -1253     \n   ==========================================\n   - Hits        91425    82053    -9372     \n   + Misses      11569     9649    -1920     \n   + Partials      245        0     -245\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/vendored/datetime/date.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92ZW5kb3JlZC9kYXRldGltZS9kYXRlLmg=) | `26.35% <0%> (-4.28%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_flight.py](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9mbGlnaHQucHk=) | `79.26% <0%> (-0.82%)` | :arrow_down: |\n   | [cpp/src/arrow/ipc/metadata-internal.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGEtaW50ZXJuYWwuY2M=) | `87.46% <0%> (-0.12%)` | :arrow_down: |\n   | [cpp/src/arrow/pretty\\_print.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQuY2M=) | `83.18% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/flight/test-util.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9mbGlnaHQvdGVzdC11dGlsLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/vendored/datetime/tz.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92ZW5kb3JlZC9kYXRldGltZS90ei5o) | `43.47% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/vendored/datetime/tz\\_private.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92ZW5kb3JlZC9kYXRldGltZS90el9wcml2YXRlLmg=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/precompiled/epoch\\_time\\_point.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL3ByZWNvbXBpbGVkL2Vwb2NoX3RpbWVfcG9pbnQuaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/pretty\\_print-test.cc](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQtdGVzdC5jYw==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/flight/types.h](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9mbGlnaHQvdHlwZXMuaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [166 more](https://codecov.io/gh/apache/arrow/pull/4542/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=footer). Last update [25b4a46...6f9e8ec](https://codecov.io/gh/apache/arrow/pull/4542?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T03:45:21.417+0000",
                    "updated": "2019-06-14T03:45:21.417+0000",
                    "started": "2019-06-14T03:45:21.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260103",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293670228\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java\n ##########\n @@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+\n+/**\n+ * Default comparator implementations for different types of vectors.\n+ */\n+public class DefaultVectorComparators {\n+\n+  /**\n+   * Default comparator for 32-bit integers.\n+   * The comparison is based on int values, with null comes first.\n+   */\n+  public static class IntComparator extends VectorValueComparator<IntVector> {\n+\n+    public IntComparator() {\n+      super(4);\n+    }\n+\n+    @Override\n+    public IntVector newVector(BufferAllocator allocator) {\n+      return  new IntVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n+      boolean isNull1 = vector1.isNull(index1);\n+      boolean isNull2 = vector2.isNull(index2);\n+\n+      if (isNull1 || isNull2) {\n+        if (isNull1 && isNull2) {\n+          return 0;\n+        } else if (isNull1) {\n+          // null is smaller\n+          return -1;\n+        } else {\n+          return 1;\n+        }\n+      }\n+\n+      int value1 = vector1.get(index1);\n+      int value2 = vector2.get(index2);\n+      return value1 - value2;\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for varchars.\n+   * The comparison is in lexicographic order, with null comes first.\n+   */\n+  public static class VarCharComparator extends VectorValueComparator<VarCharVector> {\n+\n+    @Override\n+    public VarCharVector newVector(BufferAllocator allocator) {\n+      return new VarCharVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n+      NullableVarCharHolder holder1 = new NullableVarCharHolder();\n+      NullableVarCharHolder holder2 = new NullableVarCharHolder();\n+\n+      vector1.get(index1, holder1);\n+      vector2.get(index2, holder2);\n+\n+      if (holder1.isSet == 0 || holder2.isSet == 0) {\n+        if (holder1.isSet == 0 && holder2.isSet == 0) {\n+          return 0;\n+        } else if (holder1.isSet == 0) {\n+          // null is smaller\n+          return -1;\n+        } else {\n+          return 1;\n+        }\n+      }\n+\n+      int length1 = holder1.end - holder1.start;\n+      int length2 = holder2.end - holder2.start;\n+\n+      for (int i = 0; i < length1 && i < length2; i++) {\n \n Review comment:\n   it might be slightly faster to take the minimum of length and only compare that in the loop check?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T06:12:26.080+0000",
                    "updated": "2019-06-14T06:12:26.080+0000",
                    "started": "2019-06-14T06:12:26.079+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260135",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293670983\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VectorSorter.java\n ##########\n @@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Basic interface for sorting a vector.\n+ * @param <V> the vector type.\n+ */\n+public interface VectorSorter<V extends ValueVector> {\n+\n+  /**\n+   * Sort the vector by the given criteria.\n+   * The sort can be in-place or out-of-place, depending on the algorithm.\n \n Review comment:\n   Is there a reason you chose this interface instead of separating it into two (InplaceVectorSorter and OutOfPlaceVectorSorter)?   Or at least two different methods?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T06:31:03.354+0000",
                    "updated": "2019-06-14T06:31:03.354+0000",
                    "started": "2019-06-14T06:31:03.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260140",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293673487\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VariableWidthVectorSorter.java\n ##########\n @@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import static org.apache.arrow.vector.BaseVariableWidthVector.OFFSET_WIDTH;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVectorHelper;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.PlatformDependent;\n+\n+/**\n+ * Default sorter for variable-width vectors.\n+ * It is an out-of-place sort, with time complexity O(n*log(n)).\n+ * @param <V> vector type.\n+ */\n+public class VariableWidthVectorSorter<V extends BaseVariableWidthVector> implements VectorSorter<V> {\n+\n+  @Override\n+  public V sort(V srcVector, VectorValueComparator<V> comparator) {\n+    comparator.attachVector(srcVector);\n+\n+    // create the output vector\n+    V dstVector = comparator.newVector(srcVector.getAllocator());\n+    dstVector.allocateNew(srcVector.getByteCapacity(), srcVector.getValueCount());\n+\n+    // buffers referenced in the sort\n+    ArrowBuf srcValueBuffer = srcVector.getDataBuffer();\n+    ArrowBuf srcOffsetBuffer = srcVector.getOffsetBuffer();\n+    ArrowBuf dstValidityBuffer = dstVector.getValidityBuffer();\n+    ArrowBuf dstValueBuffer = dstVector.getDataBuffer();\n+    ArrowBuf dstOffsetBuffer = dstVector.getOffsetBuffer();\n+\n+    // sort value indices\n+    List<Integer> sortedIndices = IntStream.range(0, srcVector.getValueCount()).boxed().collect(Collectors.toList());\n \n Review comment:\n   I think there might be some value of separating out the functionality into two components (and then potentially wrapping the two):\r\n   1.  Returning a ValueVector of indices indicating the sort order.\r\n   2.  Given a ValueVector of indices a utlity to copy the data from those indices into a new ValueVector (and a utility to swap them in place for fixed width types.\r\n   \r\n   What do you think?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T06:31:03.440+0000",
                    "updated": "2019-06-14T06:31:03.440+0000",
                    "started": "2019-06-14T06:31:03.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260141",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293672238\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VariableWidthVectorSorter.java\n ##########\n @@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import static org.apache.arrow.vector.BaseVariableWidthVector.OFFSET_WIDTH;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVectorHelper;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.PlatformDependent;\n+\n+/**\n+ * Default sorter for variable-width vectors.\n+ * It is an out-of-place sort, with time complexity O(n*log(n)).\n+ * @param <V> vector type.\n+ */\n+public class VariableWidthVectorSorter<V extends BaseVariableWidthVector> implements VectorSorter<V> {\n+\n+  @Override\n+  public V sort(V srcVector, VectorValueComparator<V> comparator) {\n+    comparator.attachVector(srcVector);\n+\n+    // create the output vector\n+    V dstVector = comparator.newVector(srcVector.getAllocator());\n+    dstVector.allocateNew(srcVector.getByteCapacity(), srcVector.getValueCount());\n+\n+    // buffers referenced in the sort\n+    ArrowBuf srcValueBuffer = srcVector.getDataBuffer();\n+    ArrowBuf srcOffsetBuffer = srcVector.getOffsetBuffer();\n+    ArrowBuf dstValidityBuffer = dstVector.getValidityBuffer();\n+    ArrowBuf dstValueBuffer = dstVector.getDataBuffer();\n+    ArrowBuf dstOffsetBuffer = dstVector.getOffsetBuffer();\n+\n+    // sort value indices\n+    List<Integer> sortedIndices = IntStream.range(0, srcVector.getValueCount()).boxed().collect(Collectors.toList());\n+    sortedIndices.sort((index1, index2) -> comparator.compare(index1.intValue(), index2.intValue()));\n \n Review comment:\n   this approach seems like it might have non-trivial overhead for boxing/unboxing when getting converting to the primitive integer for the index to retrieve.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T06:31:03.525+0000",
                    "updated": "2019-06-14T06:31:03.525+0000",
                    "started": "2019-06-14T06:31:03.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260142",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293672307\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VectorValueComparator.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import java.util.Comparator;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Compare two values at the given indices in the vectors.\n+ * This is used for vector sorting.\n+ * @param <V> type of the vector.\n+ */\n+public abstract class VectorValueComparator<V extends ValueVector> implements Comparator<Integer> {\n+\n+  /**\n+   * The first vector to compare.\n+   */\n+  protected V vector1;\n+\n+  /**\n+   * The second vector to compare.\n+   */\n+  protected V vector2;\n+\n+  /**\n+   * Width of the vector value. For variable-length vectors, this value makes no sense.\n+   */\n+  protected int valueWidth;\n+\n+  /**\n+   * Constructor for variable-width vectors.\n+   */\n+  protected VectorValueComparator() {\n+\n+  }\n+\n+  /**\n+   * Constructor for fixed-width vectors.\n+   * @param valueWidth the record width (in bytes).\n+   */\n+  protected VectorValueComparator(int valueWidth) {\n+    this.valueWidth = valueWidth;\n+  }\n+\n+  public int getValueWidth() {\n+    return valueWidth;\n+  }\n+\n+  /**\n+   * Attach both vectors to compare to the same input vector.\n+   * @param vector the vector to attach.\n+   */\n+  public void attachVector(V vector) {\n+    this.vector1 = vector;\n+    this.vector2 = vector;\n+  }\n+\n+  /**\n+   * Attach vectors to compare.\n+   * @param vector1 the first vector to compare.\n+   * @param vector2 the second vector to compare.\n+   */\n+  public void attachVectors(V vector1, V vector2) {\n+    this.vector1 = vector1;\n+    this.vector2 = vector2;\n+  }\n+\n+  /**\n+   * Create a new vector with the same type. This can be used for out-of-place sort.\n+   * @param allocator the allocator for creating the new vector.\n+   * @return the new vector.\n+   */\n+  public abstract V newVector(BufferAllocator allocator);\n \n Review comment:\n   i am not sure if this should be a public method - the idea to support in-place and out of place is good, but not sure if this should be a public method.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T07:10:13.488+0000",
                    "updated": "2019-06-14T07:10:13.488+0000",
                    "started": "2019-06-14T07:10:13.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260172",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293681004\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java\n ##########\n @@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+\n+/**\n+ * Default comparator implementations for different types of vectors.\n+ */\n+public class DefaultVectorComparators {\n+\n+  /**\n+   * Default comparator for 32-bit integers.\n+   * The comparison is based on int values, with null comes first.\n+   */\n+  public static class IntComparator extends VectorValueComparator<IntVector> {\n+\n+    public IntComparator() {\n+      super(4);\n+    }\n+\n+    @Override\n+    public IntVector newVector(BufferAllocator allocator) {\n+      return  new IntVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n \n Review comment:\n   any reason to use the object type and not the primitive..if it is because of java comparator definition, i would probably not use it..this might incur a lot of performance overhead..\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T07:10:13.564+0000",
                    "updated": "2019-06-14T07:10:13.564+0000",
                    "started": "2019-06-14T07:10:13.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260173",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293681879\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java\n ##########\n @@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+\n+/**\n+ * Default comparator implementations for different types of vectors.\n+ */\n+public class DefaultVectorComparators {\n+\n+  /**\n+   * Default comparator for 32-bit integers.\n+   * The comparison is based on int values, with null comes first.\n+   */\n+  public static class IntComparator extends VectorValueComparator<IntVector> {\n+\n+    public IntComparator() {\n+      super(4);\n+    }\n+\n+    @Override\n+    public IntVector newVector(BufferAllocator allocator) {\n+      return  new IntVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n+      boolean isNull1 = vector1.isNull(index1);\n+      boolean isNull2 = vector2.isNull(index2);\n+\n+      if (isNull1 || isNull2) {\n \n Review comment:\n   do you think we should support a fast path for non-nullable vectors..\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T07:10:13.630+0000",
                    "updated": "2019-06-14T07:10:13.630+0000",
                    "started": "2019-06-14T07:10:13.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260174",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293747654\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java\n ##########\n @@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+\n+/**\n+ * Default comparator implementations for different types of vectors.\n+ */\n+public class DefaultVectorComparators {\n+\n+  /**\n+   * Default comparator for 32-bit integers.\n+   * The comparison is based on int values, with null comes first.\n+   */\n+  public static class IntComparator extends VectorValueComparator<IntVector> {\n+\n+    public IntComparator() {\n+      super(4);\n+    }\n+\n+    @Override\n+    public IntVector newVector(BufferAllocator allocator) {\n+      return  new IntVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n+      boolean isNull1 = vector1.isNull(index1);\n+      boolean isNull2 = vector2.isNull(index2);\n+\n+      if (isNull1 || isNull2) {\n+        if (isNull1 && isNull2) {\n+          return 0;\n+        } else if (isNull1) {\n+          // null is smaller\n+          return -1;\n+        } else {\n+          return 1;\n+        }\n+      }\n+\n+      int value1 = vector1.get(index1);\n+      int value2 = vector2.get(index2);\n+      return value1 - value2;\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for varchars.\n+   * The comparison is in lexicographic order, with null comes first.\n+   */\n+  public static class VarCharComparator extends VectorValueComparator<VarCharVector> {\n+\n+    @Override\n+    public VarCharVector newVector(BufferAllocator allocator) {\n+      return new VarCharVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n+      NullableVarCharHolder holder1 = new NullableVarCharHolder();\n+      NullableVarCharHolder holder2 = new NullableVarCharHolder();\n+\n+      vector1.get(index1, holder1);\n+      vector2.get(index2, holder2);\n+\n+      if (holder1.isSet == 0 || holder2.isSet == 0) {\n+        if (holder1.isSet == 0 && holder2.isSet == 0) {\n+          return 0;\n+        } else if (holder1.isSet == 0) {\n+          // null is smaller\n+          return -1;\n+        } else {\n+          return 1;\n+        }\n+      }\n+\n+      int length1 = holder1.end - holder1.start;\n+      int length2 = holder2.end - holder2.start;\n+\n+      for (int i = 0; i < length1 && i < length2; i++) {\n \n Review comment:\n   Good point. Resolved accordingly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:15:44.393+0000",
                    "updated": "2019-06-14T10:15:44.393+0000",
                    "started": "2019-06-14T10:15:44.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260276",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#issuecomment-502055658\n \n \n   > Thank you for doing this. A few high level comments that I think are worth discussing (changes might not be necessary).\r\n   > \r\n   > Also, I'm considering if we should maybe make a separate mavan package for manipulation utilities (or at least maybe staring something like \"org.apache.arrow.vector.processing.sort\" or \"org.apache.arrow.vector.compute.sort\" or something similar so that other types of manipulation can be added and be more easily discoverable. Do you have any thoughts on this?\r\n   \r\n   Good suggestion.\r\n   \r\n   It makes the code structure much clearer to separate the code for data structures (vectors) and the algorithms (sorters) on them. \r\n   \r\n   In the new commits, I have placed the sort related code into a separate maven package named \"algorithm\". \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:19:26.749+0000",
                    "updated": "2019-06-14T10:19:26.749+0000",
                    "started": "2019-06-14T10:19:26.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260277",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293750324\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VectorSorter.java\n ##########\n @@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Basic interface for sorting a vector.\n+ * @param <V> the vector type.\n+ */\n+public interface VectorSorter<V extends ValueVector> {\n+\n+  /**\n+   * Sort the vector by the given criteria.\n+   * The sort can be in-place or out-of-place, depending on the algorithm.\n \n Review comment:\n   Good question.\r\n   \r\n   I think it is important that there be a uniform way of sorting a vector, so that for some scenarios, the underlying sorting algorithms can be hidden from the caller of the sorter.\r\n   \r\n   The uniform sorting API means:\r\n   1. There must be a common base class/interface for the sorters.\r\n   2. There should be a uniform sorting method.\r\n   \r\n   In the new commits, I have added a method to the interface (isInPlace) to distinguish between in-place and out-of-place sorters. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:24:40.383+0000",
                    "updated": "2019-06-14T10:24:40.383+0000",
                    "started": "2019-06-14T10:24:40.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260278",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293750324\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VectorSorter.java\n ##########\n @@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Basic interface for sorting a vector.\n+ * @param <V> the vector type.\n+ */\n+public interface VectorSorter<V extends ValueVector> {\n+\n+  /**\n+   * Sort the vector by the given criteria.\n+   * The sort can be in-place or out-of-place, depending on the algorithm.\n \n Review comment:\n   Good question.\r\n   \r\n   I think it is important that there be a uniform way of sorting a vector, so that for some scenarios, the underlying sorting algorithms can be hidden from the caller of the sorter.\r\n   \r\n   The uniform sorting API means:\r\n   1. There must be a common base class/interface for the sorters.\r\n   2. There should be a uniform sorting method.\r\n   \r\n   In the new commits, I have added a method to the interface (isInPlace) to distinguish between in-place and out-of-place sorters. \r\n   \r\n   Do you think it reasonable?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:25:15.482+0000",
                    "updated": "2019-06-14T10:25:15.482+0000",
                    "started": "2019-06-14T10:25:15.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260279",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293750737\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VariableWidthVectorSorter.java\n ##########\n @@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import static org.apache.arrow.vector.BaseVariableWidthVector.OFFSET_WIDTH;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVectorHelper;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.PlatformDependent;\n+\n+/**\n+ * Default sorter for variable-width vectors.\n+ * It is an out-of-place sort, with time complexity O(n*log(n)).\n+ * @param <V> vector type.\n+ */\n+public class VariableWidthVectorSorter<V extends BaseVariableWidthVector> implements VectorSorter<V> {\n+\n+  @Override\n+  public V sort(V srcVector, VectorValueComparator<V> comparator) {\n+    comparator.attachVector(srcVector);\n+\n+    // create the output vector\n+    V dstVector = comparator.newVector(srcVector.getAllocator());\n+    dstVector.allocateNew(srcVector.getByteCapacity(), srcVector.getValueCount());\n+\n+    // buffers referenced in the sort\n+    ArrowBuf srcValueBuffer = srcVector.getDataBuffer();\n+    ArrowBuf srcOffsetBuffer = srcVector.getOffsetBuffer();\n+    ArrowBuf dstValidityBuffer = dstVector.getValidityBuffer();\n+    ArrowBuf dstValueBuffer = dstVector.getDataBuffer();\n+    ArrowBuf dstOffsetBuffer = dstVector.getOffsetBuffer();\n+\n+    // sort value indices\n+    List<Integer> sortedIndices = IntStream.range(0, srcVector.getValueCount()).boxed().collect(Collectors.toList());\n+    sortedIndices.sort((index1, index2) -> comparator.compare(index1.intValue(), index2.intValue()));\n \n Review comment:\n   Good suggestion.\r\n   In the new commits, there is no longer boxing/unboxing for the index.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:25:50.719+0000",
                    "updated": "2019-06-14T10:25:50.719+0000",
                    "started": "2019-06-14T10:25:50.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260280",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293752022\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VariableWidthVectorSorter.java\n ##########\n @@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import static org.apache.arrow.vector.BaseVariableWidthVector.OFFSET_WIDTH;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVectorHelper;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.PlatformDependent;\n+\n+/**\n+ * Default sorter for variable-width vectors.\n+ * It is an out-of-place sort, with time complexity O(n*log(n)).\n+ * @param <V> vector type.\n+ */\n+public class VariableWidthVectorSorter<V extends BaseVariableWidthVector> implements VectorSorter<V> {\n+\n+  @Override\n+  public V sort(V srcVector, VectorValueComparator<V> comparator) {\n+    comparator.attachVector(srcVector);\n+\n+    // create the output vector\n+    V dstVector = comparator.newVector(srcVector.getAllocator());\n+    dstVector.allocateNew(srcVector.getByteCapacity(), srcVector.getValueCount());\n+\n+    // buffers referenced in the sort\n+    ArrowBuf srcValueBuffer = srcVector.getDataBuffer();\n+    ArrowBuf srcOffsetBuffer = srcVector.getOffsetBuffer();\n+    ArrowBuf dstValidityBuffer = dstVector.getValidityBuffer();\n+    ArrowBuf dstValueBuffer = dstVector.getDataBuffer();\n+    ArrowBuf dstOffsetBuffer = dstVector.getOffsetBuffer();\n+\n+    // sort value indices\n+    List<Integer> sortedIndices = IntStream.range(0, srcVector.getValueCount()).boxed().collect(Collectors.toList());\n \n Review comment:\n   This is a good point. \r\n   In the new commits, I have extracted the logic for sorting indices into a separate utility class named IndexSorter, which is based on quick sort.\r\n   \r\n   Also, please note that not all sorting algorithms are based on the above 2 step paradigm. Some algorithms can be implemented by the 2 step paradigm, but the performance is not optimal.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:30:14.619+0000",
                    "updated": "2019-06-14T10:30:14.619+0000",
                    "started": "2019-06-14T10:30:14.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260281",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293752340\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/VectorValueComparator.java\n ##########\n @@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import java.util.Comparator;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.ValueVector;\n+\n+/**\n+ * Compare two values at the given indices in the vectors.\n+ * This is used for vector sorting.\n+ * @param <V> type of the vector.\n+ */\n+public abstract class VectorValueComparator<V extends ValueVector> implements Comparator<Integer> {\n+\n+  /**\n+   * The first vector to compare.\n+   */\n+  protected V vector1;\n+\n+  /**\n+   * The second vector to compare.\n+   */\n+  protected V vector2;\n+\n+  /**\n+   * Width of the vector value. For variable-length vectors, this value makes no sense.\n+   */\n+  protected int valueWidth;\n+\n+  /**\n+   * Constructor for variable-width vectors.\n+   */\n+  protected VectorValueComparator() {\n+\n+  }\n+\n+  /**\n+   * Constructor for fixed-width vectors.\n+   * @param valueWidth the record width (in bytes).\n+   */\n+  protected VectorValueComparator(int valueWidth) {\n+    this.valueWidth = valueWidth;\n+  }\n+\n+  public int getValueWidth() {\n+    return valueWidth;\n+  }\n+\n+  /**\n+   * Attach both vectors to compare to the same input vector.\n+   * @param vector the vector to attach.\n+   */\n+  public void attachVector(V vector) {\n+    this.vector1 = vector;\n+    this.vector2 = vector;\n+  }\n+\n+  /**\n+   * Attach vectors to compare.\n+   * @param vector1 the first vector to compare.\n+   * @param vector2 the second vector to compare.\n+   */\n+  public void attachVectors(V vector1, V vector2) {\n+    this.vector1 = vector1;\n+    this.vector2 = vector2;\n+  }\n+\n+  /**\n+   * Create a new vector with the same type. This can be used for out-of-place sort.\n+   * @param allocator the allocator for creating the new vector.\n+   * @return the new vector.\n+   */\n+  public abstract V newVector(BufferAllocator allocator);\n \n Review comment:\n   This method may be called in the sorter classes, so we make it public. What is your concern for this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:31:32.219+0000",
                    "updated": "2019-06-14T10:31:32.219+0000",
                    "started": "2019-06-14T10:31:32.218+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260282",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293752566\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java\n ##########\n @@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+\n+/**\n+ * Default comparator implementations for different types of vectors.\n+ */\n+public class DefaultVectorComparators {\n+\n+  /**\n+   * Default comparator for 32-bit integers.\n+   * The comparison is based on int values, with null comes first.\n+   */\n+  public static class IntComparator extends VectorValueComparator<IntVector> {\n+\n+    public IntComparator() {\n+      super(4);\n+    }\n+\n+    @Override\n+    public IntVector newVector(BufferAllocator allocator) {\n+      return  new IntVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n \n Review comment:\n   Good suggestion.\r\n   There is no need to use java comparator. I have revised it accordingly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:32:18.074+0000",
                    "updated": "2019-06-14T10:32:18.074+0000",
                    "started": "2019-06-14T10:32:18.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260283",
                    "issueId": "13239223"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/worklog/260284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4542: [ARROW-5581][Java] Provide interfaces and initial implementations for vector sorting\nURL: https://github.com/apache/arrow/pull/4542#discussion_r293752948\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java\n ##########\n @@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.sort;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.holders.NullableVarCharHolder;\n+\n+/**\n+ * Default comparator implementations for different types of vectors.\n+ */\n+public class DefaultVectorComparators {\n+\n+  /**\n+   * Default comparator for 32-bit integers.\n+   * The comparison is based on int values, with null comes first.\n+   */\n+  public static class IntComparator extends VectorValueComparator<IntVector> {\n+\n+    public IntComparator() {\n+      super(4);\n+    }\n+\n+    @Override\n+    public IntVector newVector(BufferAllocator allocator) {\n+      return  new IntVector(\"\", allocator);\n+    }\n+\n+    @Override\n+    public int compare(Integer index1, Integer index2) {\n+      boolean isNull1 = vector1.isNull(index1);\n+      boolean isNull2 = vector2.isNull(index2);\n+\n+      if (isNull1 || isNull2) {\n \n Review comment:\n   Good suggestion. I have provided some fast path for the non-nullable vectors. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-14T10:33:35.345+0000",
                    "updated": "2019-06-14T10:33:35.345+0000",
                    "started": "2019-06-14T10:33:35.345+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "260284",
                    "issueId": "13239223"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 40200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5a500569[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e32c4b7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37de412f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f213c1f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d204824[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1b1ca97e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e8e440b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@8194a01[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f7424e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@795e5c97[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55dce1ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1757e053[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 40200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 24 14:08:22 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-24T14:08:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5581/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-06-13T09:42:44.000+0000",
        "updated": "2019-06-25T02:41:02.000+0000",
        "timeoriginalestimate": null,
        "description": "Data sorting is an important and common feature. For this issue, we provide the basic interfaces for vector sorting. Users can implement customized sorting algorithms by extending our interfaces. In addition, we also give initial sorting implementations for both fixed-width and variable-width vectors. ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 40200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Provide interfaces and initial implementations for vector sorting",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239223/comment/16871225",
                    "id": "16871225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4542\n[https://github.com/apache/arrow/pull/4542]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-06-24T14:08:22.759+0000",
                    "updated": "2019-06-24T14:08:22.759+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z03p3k:",
        "customfield_12314139": null
    }
}