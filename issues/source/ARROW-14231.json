{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13405013",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013",
    "key": "ARROW-14231",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12631107",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12631107",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13417509",
                    "key": "ARROW-15105",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417509",
                    "fields": {
                        "summary": "[R] unsupported timestamp cast in CSV with tz element",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12624172",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12624172",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13375060",
                    "key": "ARROW-12540",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375060",
                    "fields": {
                        "summary": "[C++] Implement cast from date32[day] to utf8 ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12626159",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12626159",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13410895",
                    "key": "ARROW-14643",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13410895",
                    "fields": {
                        "summary": "[C++] Support cast from timestamp[UTC] to string on Windows",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12624238",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12624238",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13395133",
                    "key": "ARROW-13625",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395133",
                    "fields": {
                        "summary": "[C++][CSV] Timestamp parsing should accept any valid ISO 8601 without requiring custom parse strings",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14231/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/660488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#issuecomment-934631146\n\n\n   https://issues.apache.org/jira/browse/ARROW-14231\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T17:50:27.923+0000",
                    "updated": "2021-10-05T17:50:27.923+0000",
                    "started": "2021-10-05T17:50:27.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660488",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/660786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723038079\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1547,8 +1547,56 @@ TEST(Cast, TimestampToString) {\n     CheckCast(\n         ArrayFromJSON(timestamp(TimeUnit::SECOND), \"[-30610224000, -5364662400]\"),\n         ArrayFromJSON(string_type, R\"([\"1000-01-01 00:00:00\", \"1800-01-01 00:00:00\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::SECOND, \"UTC\"), \"[-30610224000, -5364662400]\"),\n+        ArrayFromJSON(string_type, R\"([\"1000-01-01 00:00:00\", \"1800-01-01 00:00:00\"])\"));\n\nReview comment:\n       Shouldn't we keep some indication of that it has a time zone (was an instant) in the case of UTC as well? (otherwise a roundtrip to csv would give a native timestamp without timezone for UTC, but a timestamp with timezone (UTC) for non-UTC timezones)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T09:06:54.309+0000",
                    "updated": "2021-10-06T09:06:54.309+0000",
                    "started": "2021-10-06T09:06:54.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660786",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/660870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723161225\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1547,8 +1547,56 @@ TEST(Cast, TimestampToString) {\n     CheckCast(\n         ArrayFromJSON(timestamp(TimeUnit::SECOND), \"[-30610224000, -5364662400]\"),\n         ArrayFromJSON(string_type, R\"([\"1000-01-01 00:00:00\", \"1800-01-01 00:00:00\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::SECOND, \"UTC\"), \"[-30610224000, -5364662400]\"),\n+        ArrayFromJSON(string_type, R\"([\"1000-01-01 00:00:00\", \"1800-01-01 00:00:00\"])\"));\n\nReview comment:\n       Ah, yeah, you're right. I'll fix that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T11:48:30.768+0000",
                    "updated": "2021-10-06T11:48:30.768+0000",
                    "started": "2021-10-06T11:48:30.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660870",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/660956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723343926\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       Do we actually want to append the timezone and localize the timestamp? Pretty-printing currently doesn't.\r\n   \r\n   I don't know what the user expects here (we may actually need to make this customizable at some point :-)).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T14:41:15.065+0000",
                    "updated": "2021-10-06T14:41:15.065+0000",
                    "started": "2021-10-06T14:41:15.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660956",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723430171\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       At least, Pandas does:\r\n   \r\n   ```\r\n   >>> print(pd.DataFrame({\"a\": [pd.Timestamp(\"1968-11-30 13:30:45.123456789\", tz=\"America/Phoenix\")]}).to_csv())\r\n   ,a\r\n   0,1968-11-30 13:30:45.123456789-07:00\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T15:59:57.395+0000",
                    "updated": "2021-10-06T15:59:57.395+0000",
                    "started": "2021-10-06T15:59:57.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661022",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723439715\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       Ah, I see. I wonder if those files are roundtrippable (is our CSV reader able to read them?).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T16:07:19.087+0000",
                    "updated": "2021-10-06T16:07:19.087+0000",
                    "started": "2021-10-06T16:07:19.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661033",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723447917\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       Nope! Good thing you pointed that out. I'll dig a bit.\r\n   \r\n   ```\r\n   /home/lidavidm/Code/upstream/arrow-14231/cpp/src/arrow/csv/converter_test.cc:68: Failure\r\n   Failed\r\n   '_error_or_value12.status()' failed with Invalid: CSV conversion error to timestamp[ns, tz=UTC]: invalid value '1970-01-01 00:00:00+0000'\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T16:13:43.942+0000",
                    "updated": "2021-10-06T16:13:43.942+0000",
                    "started": "2021-10-06T16:13:43.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661035",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723458399\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       >  Pretty-printing currently doesn't.\r\n   \r\n   Personally, I find this a \"bug\" in our current pretty printing (I find it rather confusing that it doesn't show at all that you have timezone-aware timestamps)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T16:21:58.776+0000",
                    "updated": "2021-10-06T16:21:58.776+0000",
                    "started": "2021-10-06T16:21:58.776+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661039",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723461696\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       And we have https://issues.apache.org/jira/browse/ARROW-13625 (and the linked issues) about the parsing side not yet supporting timezones\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T16:24:27.350+0000",
                    "updated": "2021-10-06T16:24:27.350+0000",
                    "started": "2021-10-06T16:24:27.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661040",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723467309\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       Cool, we can tackle the reading side separately then :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T16:28:44.225+0000",
                    "updated": "2021-10-06T16:28:44.225+0000",
                    "started": "2021-10-06T16:28:44.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661044",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r723468201\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       Thanks for digging those up!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-06T16:29:17.682+0000",
                    "updated": "2021-10-06T16:29:17.682+0000",
                    "started": "2021-10-06T16:29:17.682+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661045",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/661745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#issuecomment-937966754\n\n\n   Rebased on top of the recent temporal kernel refactoring.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T16:38:00.230+0000",
                    "updated": "2021-10-07T16:38:00.230+0000",
                    "started": "2021-10-07T16:38:00.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "661745",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/662372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#issuecomment-937966754\n\n\n   Rebased on top of the recent temporal kernel refactoring.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-07T23:39:25.427+0000",
                    "updated": "2021-10-07T23:39:25.427+0000",
                    "started": "2021-10-07T23:39:25.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "662372",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/677063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#issuecomment-961981659\n\n\n   This and ARROW-12820/#11358 now pass CI and should handle both reading/writing of timestamps with timezones.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T15:16:33.973+0000",
                    "updated": "2021-11-05T15:16:33.973+0000",
                    "started": "2021-11-05T15:16:33.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677063",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/677496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#issuecomment-961981659\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T20:01:57.398+0000",
                    "updated": "2021-11-05T20:01:57.398+0000",
                    "started": "2021-11-05T20:01:57.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677496",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/678583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r744876204\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -105,6 +106,105 @@ struct TemporalToStringCastFunctor {\n   }\n };\n \n+template <typename O>\n+struct TemporalToStringCastFunctor<O, TimestampType> {\n+  using value_type = typename TypeTraits<TimestampType>::CType;\n+  using BuilderType = typename TypeTraits<O>::BuilderType;\n+  using FormatterType = StringFormatter<TimestampType>;\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    DCHECK(out->is_array());\n+    const ArrayData& input = *batch[0].array();\n+    ArrayData* output = out->mutable_array();\n+    return Convert(ctx, input, output);\n+  }\n+\n+  static Status Convert(KernelContext* ctx, const ArrayData& input, ArrayData* output) {\n+    const auto& timezone = GetInputTimezone(*input.type);\n+    const auto& ty = checked_cast<const TimestampType&>(*input.type);\n+    BuilderType builder(input.type, ctx->memory_pool());\n+\n+    // Preallocate\n+    int64_t string_length = 19;  // YYYY-MM-DD HH:MM:SS\n+    if (ty.unit() == TimeUnit::MILLI) {\n+      string_length += 4;  // .SSS\n+    } else if (ty.unit() == TimeUnit::MICRO) {\n+      string_length += 7;  // .SSSSSS\n+    } else if (ty.unit() == TimeUnit::NANO) {\n+      string_length += 10;  // .SSSSSSSSS\n+    }\n+    if (!timezone.empty()) string_length += 5;  // +0000\n+    RETURN_NOT_OK(builder.Reserve(input.length));\n+    RETURN_NOT_OK(\n+        builder.ReserveData((input.length - input.GetNullCount()) * string_length));\n+\n+    if (timezone.empty()) {\n+      FormatterType formatter(input.type);\n+      RETURN_NOT_OK(VisitArrayDataInline<TimestampType>(\n+          input,\n+          [&](value_type v) {\n+            return formatter(v, [&](util::string_view v) { return builder.Append(v); });\n+          },\n+          [&]() {\n+            builder.UnsafeAppendNull();\n+            return Status::OK();\n+          }));\n+    } else {\n+#ifdef _WIN32\n+      // TODO(ARROW-13168):\n+      return Status::NotImplemented(\n+          \"Casting a timestamp with time zone to string is not yet supported on \"\n+          \"Windows.\");\n+#else\n+      switch (ty.unit()) {\n+        case TimeUnit::SECOND:\n+          RETURN_NOT_OK(ConvertZoned<std::chrono::seconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MILLI:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::milliseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::MICRO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::microseconds>(input, timezone, &builder));\n+          break;\n+        case TimeUnit::NANO:\n+          RETURN_NOT_OK(\n+              ConvertZoned<std::chrono::nanoseconds>(input, timezone, &builder));\n+          break;\n+        default:\n+          DCHECK(false);\n+          return Status::NotImplemented(\"Unimplemented time unit\");\n+      }\n+#endif\n+    }\n+    std::shared_ptr<Array> output_array;\n+    RETURN_NOT_OK(builder.Finish(&output_array));\n+    *output = std::move(*output_array->data());\n+    return Status::OK();\n+  }\n+\n+  template <typename Duration>\n+  static Status ConvertZoned(const ArrayData& input, const std::string& timezone,\n+                             BuilderType* builder) {\n+    static std::string kFormatString = \"%Y-%m-%d %H:%M:%S%z\";\n\nReview comment:\n       Nit, but `static const std::string` perhaps?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T16:11:06.026+0000",
                    "updated": "2021-11-08T16:11:06.026+0000",
                    "started": "2021-11-08T16:11:06.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678583",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/678586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r744879899\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1547,8 +1547,77 @@ TEST(Cast, TimestampToString) {\n     CheckCast(\n         ArrayFromJSON(timestamp(TimeUnit::SECOND), \"[-30610224000, -5364662400]\"),\n         ArrayFromJSON(string_type, R\"([\"1000-01-01 00:00:00\", \"1800-01-01 00:00:00\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::MILLI), \"[-30610224000000, -5364662400000]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00.000\", \"1800-01-01 00:00:00.000\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::MICRO),\n+                      \"[-30610224000000000, -5364662400000000]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00.000000\", \"1800-01-01 00:00:00.000000\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::NANO),\n+                      \"[-596933876543210988, 349837323456789012]\"),\n+        ArrayFromJSON(\n+            string_type,\n+            R\"([\"1951-02-01 01:02:03.456789012\", \"1981-02-01 01:02:03.456789012\"])\"));\n+  }\n+}\n+\n+#ifndef _WIN32\n+TEST(Cast, TimestampWithZoneToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::SECOND, \"UTC\"), \"[-30610224000, -5364662400]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00+0000\", \"1800-01-01 00:00:00+0000\"])\"));\n\nReview comment:\n       Shouldn't it be \"Z\" rather than \"+0000\" for UTC timestamps? \r\n   See Wikipedia: https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T16:15:17.651+0000",
                    "updated": "2021-11-08T16:15:17.651+0000",
                    "started": "2021-11-08T16:15:17.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678586",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/678606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r744901079\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1547,8 +1547,77 @@ TEST(Cast, TimestampToString) {\n     CheckCast(\n         ArrayFromJSON(timestamp(TimeUnit::SECOND), \"[-30610224000, -5364662400]\"),\n         ArrayFromJSON(string_type, R\"([\"1000-01-01 00:00:00\", \"1800-01-01 00:00:00\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::MILLI), \"[-30610224000000, -5364662400000]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00.000\", \"1800-01-01 00:00:00.000\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::MICRO),\n+                      \"[-30610224000000000, -5364662400000000]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00.000000\", \"1800-01-01 00:00:00.000000\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::NANO),\n+                      \"[-596933876543210988, 349837323456789012]\"),\n+        ArrayFromJSON(\n+            string_type,\n+            R\"([\"1951-02-01 01:02:03.456789012\", \"1981-02-01 01:02:03.456789012\"])\"));\n+  }\n+}\n+\n+#ifndef _WIN32\n+TEST(Cast, TimestampWithZoneToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::SECOND, \"UTC\"), \"[-30610224000, -5364662400]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00+0000\", \"1800-01-01 00:00:00+0000\"])\"));\n\nReview comment:\n       Ah good point. I've fixed this + added a UTC timestamp to the CSV writer test as well.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-08T16:38:23.864+0000",
                    "updated": "2021-11-08T16:38:23.864+0000",
                    "started": "2021-11-08T16:38:23.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "678606",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/679198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328#discussion_r745847212\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1553,8 +1553,77 @@ TEST(Cast, TimestampToString) {\n     CheckCast(\n         ArrayFromJSON(timestamp(TimeUnit::SECOND), \"[-30610224000, -5364662400]\"),\n         ArrayFromJSON(string_type, R\"([\"1000-01-01 00:00:00\", \"1800-01-01 00:00:00\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::MILLI), \"[-30610224000000, -5364662400000]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00.000\", \"1800-01-01 00:00:00.000\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::MICRO),\n+                      \"[-30610224000000000, -5364662400000000]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00.000000\", \"1800-01-01 00:00:00.000000\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::NANO),\n+                      \"[-596933876543210988, 349837323456789012]\"),\n+        ArrayFromJSON(\n+            string_type,\n+            R\"([\"1951-02-01 01:02:03.456789012\", \"1981-02-01 01:02:03.456789012\"])\"));\n+  }\n+}\n+\n+#ifndef _WIN32\n+TEST(Cast, TimestampWithZoneToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::SECOND, \"UTC\"), \"[-30610224000, -5364662400]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1000-01-01 00:00:00Z\", \"1800-01-01 00:00:00Z\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::SECOND, \"America/Phoenix\"),\n+                      \"[-34226955, 1456767743]\"),\n+        ArrayFromJSON(string_type,\n+                      R\"([\"1968-11-30 13:30:45-0700\", \"2016-02-29 10:42:23-0700\"])\"));\n+\n+    CheckCast(ArrayFromJSON(timestamp(TimeUnit::MILLI, \"America/Phoenix\"),\n+                            \"[-34226955877, 1456767743456]\"),\n+              ArrayFromJSON(\n+                  string_type,\n+                  R\"([\"1968-11-30 13:30:44.123-0700\", \"2016-02-29 10:42:23.456-0700\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::MICRO, \"America/Phoenix\"),\n+                      \"[-34226955877000, 1456767743456789]\"),\n+        ArrayFromJSON(\n+            string_type,\n+            R\"([\"1968-11-30 13:30:44.123000-0700\", \"2016-02-29 10:42:23.456789-0700\"])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(timestamp(TimeUnit::NANO, \"America/Phoenix\"),\n+                      \"[-34226955876543211, 1456767743456789246]\"),\n+        ArrayFromJSON(\n+            string_type,\n+            R\"([\"1968-11-30 13:30:44.123456789-0700\", \"2016-02-29 10:42:23.456789246-0700\"])\"));\n   }\n }\n+#else\n+// TODO(ARROW-13168): we lack tzdb on Windows\n+TEST(Cast, TimestampWithZoneToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    ASSERT_RAISES(NotImplemented, Cast(ArrayFromJSON(timestamp(TimeUnit::SECOND, \"UTC\"),\n+                                                     \"[-34226955, 1456767743]\"),\n+                                       CastOptions::Safe(string_type)));\n\nReview comment:\n       UTC could probably be made to work on Windows, can you perhaps create a followup JIRA for that?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-09T17:28:01.050+0000",
                    "updated": "2021-11-09T17:28:01.050+0000",
                    "started": "2021-11-09T17:28:01.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679198",
                    "issueId": "13405013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/worklog/679199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #11328:\nURL: https://github.com/apache/arrow/pull/11328\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-09T17:28:24.281+0000",
                    "updated": "2021-11-09T17:28:24.281+0000",
                    "started": "2021-11-09T17:28:24.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "679199",
                    "issueId": "13405013"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3ace5acf[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@308f90b9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a998408[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@16dfcdba[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c69d3f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@239abc05[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3535d5ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5def6cbb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fab92ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@19a77189[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@224ef02[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2408d149[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 09 17:28:24 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-09T17:28:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14231/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-10-05T15:54:38.000+0000",
        "updated": "2022-01-12T19:01:47.000+0000",
        "timeoriginalestimate": null,
        "description": "The R code below creates a simple data frame containing a datetime (timestamp) object, but when I try to save this to disk I get an \"unsupported cast\" error.\r\n\r\n{code:r}\r\nlibrary(arrow)\r\ndf <- tibble::tibble(datetime = as.POSIXct(c(\"2020-07-20 16:20\", NA), tz = \"UTC\"))\r\nwrite_csv_arrow(df, \"df.csv\")\r\n# Error: NotImplemented: Unsupported cast from timestamp[us, tz=UTC] to utf8 using function cast_string\r\n# /home/nic2/arrow/cpp/src/arrow/compute/function.cc:215  DispatchBest(&inputs)\r\n# /home/nic2/arrow/cpp/src/arrow/compute/cast.cc:229  Cast(Datum(value), to_type, options, ctx)\r\n# /home/nic2/arrow/cpp/src/arrow/csv/writer.cc:101  compute::Cast(data, utf8(), compute::CastOptions(), &ctx)\r\n# /home/nic2/arrow/cpp/src/arrow/csv/writer.cc:395  column_populators_[col]->UpdateRowLengths(*batch.column(col), offsets_.data())\r\n# /home/nic2/arrow/cpp/src/arrow/csv/writer.cc:324  TranslateMinimalBatch(*batch)\r\n# /home/nic2/arrow/cpp/src/arrow/csv/writer.cc:434  writer->WriteTable(table)\r\n{code}\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Can't cast from timestamp to utf8 when saving CSV",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13405013/comment/17441297",
                    "id": "17441297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11328\n[https://github.com/apache/arrow/pull/11328]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-11-09T17:28:24.086+0000",
                    "updated": "2021-11-09T17:28:24.086+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0vkx4:",
        "customfield_12314139": null
    }
}