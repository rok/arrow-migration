{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13103427",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427",
    "key": "ARROW-1569",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589301",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589301",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1569/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/695047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel opened a new pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937\n\n\n   Initially I tried to implement this as a `ScalarAggregateFunction` (as suggested in the issue), however given that there is no way to express sensitivity to order, it's currently not possible to correctly implement the `ScalarAggregator::MergeFrom` function. This is now implemented as a `VectorFunction`.\r\n   \r\n   I'm still working on supporting more types:\r\n   - [x] Booleans\r\n   - [x] Signed and unsigned integer types\r\n   - [ ] Floating point types (I'm trying to figure out what I can re-use)\r\n   - [ ] Temporal types\r\n   - [ ] Decimal types\r\n   \r\n   I'll create two follow-up JIRA issues to:\r\n   \r\n   - Add support for UTF8 arrays (via lexicographical order):\r\n   ```\r\n   Input: utf8\r\n   [\r\n     \"a\",\r\n     \"b\",\r\n     \"c\"\r\n   ]\r\n   \r\n   Output: struct<increasing:boolean, strictly_decreasing:boolean, decreasing:boolean, strictly_decreasing:boolean>\r\n   {increasing: true, strictly_increasing: true, decreasing: false, strictly_decreasing: false}\r\n   ```\r\n   \r\n   - Implement this function for list arrays with well-ordered element types:\r\n   ```\r\n   Input: list<uint8>\r\n   [\r\n     [1, 2, 3],\r\n     [3, 3, 2],\r\n     [1, 2, 1, 2]\r\n   ]\r\n   \r\n   Output list<struct<increasing:boolean, strictly_decreasing:boolean, decreasing:boolean, strictly_decreasing:boolean>>\r\n   [\r\n     {increasing: true, strictly_increasing: true, decreasing: false, strictly_decreasing: false},\r\n     {increasing: false, strictly_increasing: false, decreasing: true, strictly_decreasing: false},\r\n     {increasing: false, stirctly_increasing: false, decreasing: false, strictly_decreasing: false}\r\n   ]\r\n   ```\r\n   \r\n   cc @bkietz\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-13T13:29:36.483+0000",
                    "updated": "2021-12-13T13:29:36.483+0000",
                    "started": "2021-12-13T13:29:36.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "695047",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/695055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#issuecomment-992486275\n\n\n   https://issues.apache.org/jira/browse/ARROW-1569\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-13T13:40:25.785+0000",
                    "updated": "2021-12-13T13:40:25.785+0000",
                    "started": "2021-12-13T13:40:25.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "695055",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/695342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r768106150\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -188,6 +188,29 @@ class ARROW_EXPORT PartitionNthOptions : public FunctionOptions {\n   NullPlacement null_placement;\n };\n \n+/// \\brief Options for IsMonotonic\n+class ARROW_EXPORT IsMonotonicOptions : public FunctionOptions {\n+ public:\n+  enum NullHandling {\n+    // Ignore nulls.\n\nReview comment:\n       Please use /// to allow doxygen to detect docstrings\r\n   ```suggestion\r\n       /// Ignore nulls.\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -188,6 +188,29 @@ class ARROW_EXPORT PartitionNthOptions : public FunctionOptions {\n   NullPlacement null_placement;\n };\n \n+/// \\brief Options for IsMonotonic\n+class ARROW_EXPORT IsMonotonicOptions : public FunctionOptions {\n+ public:\n+  enum NullHandling {\n+    // Ignore nulls.\n+    IGNORE,\n+    // Use min value of element type as the value of nulls.\n+    MIN,\n+    // Use max value of element type as the value of nulls.\n+    MAX,\n+  };\n+\n+  explicit IsMonotonicOptions(NullHandling null_handling = IGNORE,\n+                              EqualOptions equal_options = EqualOptions::Defaults());\n+  constexpr static char const kTypeName[] = \"IsMonotonicOptions\";\n+  static IsMonotonicOptions Defaults() { return IsMonotonicOptions(); }\n+\n+  // Define how nulls are handled.\n+  NullHandling null_handling;\n+  // Options for equality comparisons. Used for floats.\n+  EqualOptions equal_options;\n\nReview comment:\n       Instead of reusing this here, please add a separate enumeration for nan handling (`nans_equal` seems to be the only field you're using here). `is_monotonic_to_within_tolerance` sounds like a separate (floating-point-only) function.\r\n   \r\n   (Adding to the confusion here is: based on naming, `EqualOptions` looks like a subclass of `FunctionOptions` but isn't)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-13T20:42:57.605+0000",
                    "updated": "2021-12-13T20:42:57.605+0000",
                    "started": "2021-12-13T20:42:57.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "695342",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r770940279\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n\nReview comment:\n       Ideally, `isnan()` should only be used in floating-point-enabled functions, so maybe you can function overload (using enable-if) the code blocks that use `isnan()` too generically.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n\nReview comment:\n       AFAIK, the number of arguments to a function are validated in the compute layer mechanism. When the [`IsMonotonic` function is registered, it specifies a single input argument](https://github.com/apache/arrow/pull/11937/files#diff-011285d7622074d16c9075007d23066a4fbb31fd9bb95c596dab315ed0ca038aR273), so this should be already guaranteed.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n\nReview comment:\n       There exists support for [floating-point comparisons](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compare.cc#L74-L89), maybe you can reuse this here.\r\n   Also, this check is not considering sign bit for special cases such as: signed zeros and signed Inf.\r\n   Ex. `{ -0.0, 0.0 } != { 0.0, -0.0 }`.\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -188,6 +188,35 @@ class ARROW_EXPORT PartitionNthOptions : public FunctionOptions {\n   NullPlacement null_placement;\n };\n \n+/// \\brief Options for IsMonotonic\n+class ARROW_EXPORT IsMonotonicOptions : public FunctionOptions {\n+ public:\n+  enum NullHandling {\n+    /// Ignore nulls.\n+    IGNORE_NULLS,\n+    /// Use min value of element type as the value of nulls.\n+    /// -Inf for floating point numbers.\n+    USE_MIN_VALUE,\n+    /// Use max value of element type as the value of nulls.\n+    /// Inf for floating point numbers.\n+    USE_MAX_VALUE\n+  };\n\nReview comment:\n       [Ordering of nulls and NaNs were also discussed in the sorting function](https://github.com/apache/arrow/pull/11212/files#diff-d8e3089c085273e425a5106e77566f2e1348c483a79eeb544a4c9ee0e8327f34R89-R96). I would expect that `IsMonotonic` and sorting function are consistent. That is, if a sort operation is performed first, then the corresponding `IsMonotonic` should result in true.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n+    return Status::Invalid(\"IsMonotonic expects a single datum (array) as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure there is at least one input datum.\n+  Datum input = batch[0];\n+\n+  // Validate input datum type (useful for direct invocation only).\n+  if (!input.is_array()) {\n+    return Status::Invalid(\"IsMonotonic expects array datum as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure that the input datum is an array.\n+  const std::shared_ptr<ArrayData>& array_data = input.array();\n+  ArrayType array(array_data);\n+\n+  // Return early if there are NaNs, zero elements or one element in the array.\n\nReview comment:\n       Not sure the NaN comment applies here.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n+    return Status::Invalid(\"IsMonotonic expects a single datum (array) as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure there is at least one input datum.\n+  Datum input = batch[0];\n+\n+  // Validate input datum type (useful for direct invocation only).\n+  if (!input.is_array()) {\n+    return Status::Invalid(\"IsMonotonic expects array datum as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure that the input datum is an array.\n+  const std::shared_ptr<ArrayData>& array_data = input.array();\n+  ArrayType array(array_data);\n+\n+  // Return early if there are NaNs, zero elements or one element in the array.\n+  // And return early if there are only nulls.\n+  if (array.length() <= 1 || array.null_count() == array.length()) {\n+    if (std::any_of(array.begin(), array.end(), isnan<DataType>)) {\n\nReview comment:\n       Everything in this functions seems general enough to handle most data types, except for `isnan`. Maybe specialize this code block.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T22:28:20.879+0000",
                    "updated": "2021-12-16T22:28:20.879+0000",
                    "started": "2021-12-16T22:28:20.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697553",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r770964847\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n+    return Status::Invalid(\"IsMonotonic expects a single datum (array) as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure there is at least one input datum.\n+  Datum input = batch[0];\n+\n+  // Validate input datum type (useful for direct invocation only).\n+  if (!input.is_array()) {\n+    return Status::Invalid(\"IsMonotonic expects array datum as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure that the input datum is an array.\n+  const std::shared_ptr<ArrayData>& array_data = input.array();\n+  ArrayType array(array_data);\n+\n+  // Return early if there are NaNs, zero elements or one element in the array.\n+  // And return early if there are only nulls.\n+  if (array.length() <= 1 || array.null_count() == array.length()) {\n+    if (std::any_of(array.begin(), array.end(), isnan<DataType>)) {\n+      return IsMonotonicOutput(false, false, false, false, out);\n+    } else {\n+      // It is strictly increasing if there are zero or one elements or when nulls are\n+      // ignored.\n+      bool strictly =\n+          array.length() <= 1 ||\n+          options.null_handling == IsMonotonicOptions::NullHandling::IGNORE_NULLS;\n+      return IsMonotonicOutput(true, strictly, true, strictly, out);\n+    }\n+  }\n+\n+  // Set null value based on option.\n+  const CType null_value =\n+      options.null_handling == IsMonotonicOptions::NullHandling::USE_MIN_VALUE\n+          ? min<DataType>()\n+          : max<DataType>();\n+\n+  bool increasing = true, strictly_increasing = true, decreasing = true,\n+       strictly_decreasing = true;\n+\n+  // Safety:\n+  // - Made sure that the length is at least 2 above.\n+  for (auto a = array.begin(), b = ++array.begin(); b != array.end();) {\n+    auto current = *a;\n+    auto next = *b;\n+\n+    // Handle nulls.\n+    if (options.null_handling == IsMonotonicOptions::NullHandling::IGNORE_NULLS) {\n+      // Forward both iterators to search for a non-null value. The loop exit\n+      // condition prevents reading past the end.\n+      if (!current.has_value()) {\n+        ++a;\n+        ++b;\n+        continue;\n+      }\n+      // Once we have a value for current we should also make sure that next has a\n+      // value. The loop exit condition prevents reading past the end.\n+      if (!next.has_value()) {\n+        ++b;\n+        continue;\n+      }\n+    } else {\n+      // Based on the function options set null values to min/max.\n+      current = current.value_or(null_value);\n+      next = next.value_or(null_value);\n\nReview comment:\n       Are these local copies being modified, correct? An Boolean function should not modify its inputs.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T22:31:11.000+0000",
                    "updated": "2021-12-16T22:31:11.000+0000",
                    "started": "2021-12-16T22:31:11.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697556",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#issuecomment-996249724\n\n\n   Some general comments:\r\n   * `IsMonotonic` needs to be consistent with corresponding [sorting functions](https://arrow.apache.org/docs/cpp/compute.html#sorts-and-partitions), such that `IsMonotonic(input) == (Sort(input) == input)`.\r\n   * Currently `IsMonotonic` outputs a struct describing the monotonic properties of the data. Would it make sense to provide a wrapper function that receives `FunctionOptions` with a single requested monotonic behavior? For example, `IsMonotonic(input, MonotonicOptions.StrictlyIncreasing)`\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T22:41:54.222+0000",
                    "updated": "2021-12-16T22:41:54.222+0000",
                    "started": "2021-12-16T22:41:54.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697563",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#issuecomment-996249724\n\n\n   Some general comments:\r\n   * `IsMonotonic` needs to be consistent with corresponding [sorting functions](https://arrow.apache.org/docs/cpp/compute.html#sorts-and-partitions), such that `IsMonotonic(input) == (Sort(input) == input)`.\r\n   * Currently `IsMonotonic` outputs a struct describing the monotonic properties of the data. What your thoughts on having a convenience wrapper function that receives `FunctionOptions` with a single requested monotonic behavior? For example, `IsMonotonic(input, MonotonicOptions.StrictlyIncreasing)`. This would provide a more readable API for client code and bypass the need to unpack the `StructScalar` output to check the corresponding monotonic behavior of interest.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T22:46:51.778+0000",
                    "updated": "2021-12-16T22:46:51.778+0000",
                    "started": "2021-12-16T22:46:51.777+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697565",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r770988896\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n\nReview comment:\n       \r\n   @pitrou Should we consider signed zero/Inf here? Not sure if sorting function does it. In any case, consistency is desired and can be resolved in a follow-up JIRA.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T23:24:38.072+0000",
                    "updated": "2021-12-16T23:24:38.072+0000",
                    "started": "2021-12-16T23:24:38.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697589",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r771264722\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n\nReview comment:\n       Directly invocation of this kernel is not possible through the public API, however internally this function could be invoked directly and skip those checks. @bkietz what do you suggest?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T10:07:42.337+0000",
                    "updated": "2021-12-17T10:07:42.337+0000",
                    "started": "2021-12-17T10:07:42.336+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697802",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r771266725\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n+    return Status::Invalid(\"IsMonotonic expects a single datum (array) as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure there is at least one input datum.\n+  Datum input = batch[0];\n+\n+  // Validate input datum type (useful for direct invocation only).\n+  if (!input.is_array()) {\n+    return Status::Invalid(\"IsMonotonic expects array datum as input\");\n+  }\n+\n+  // Safety:\n+  // - Made sure that the input datum is an array.\n+  const std::shared_ptr<ArrayData>& array_data = input.array();\n+  ArrayType array(array_data);\n+\n+  // Return early if there are NaNs, zero elements or one element in the array.\n+  // And return early if there are only nulls.\n+  if (array.length() <= 1 || array.null_count() == array.length()) {\n+    if (std::any_of(array.begin(), array.end(), isnan<DataType>)) {\n\nReview comment:\n       What would that look like?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T10:08:48.274+0000",
                    "updated": "2021-12-17T10:08:48.274+0000",
                    "started": "2021-12-17T10:08:48.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697803",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r771275206\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n\nReview comment:\n       Sorting doesn't, AFAIR. Signed zeros are considered equal, I'm not sure there's any particular reason to deviate from that (what are the use cases for this kernel?).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T10:18:52.763+0000",
                    "updated": "2021-12-17T10:18:52.763+0000",
                    "started": "2021-12-17T10:18:52.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697808",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r771354239\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -188,6 +188,35 @@ class ARROW_EXPORT PartitionNthOptions : public FunctionOptions {\n   NullPlacement null_placement;\n };\n \n+/// \\brief Options for IsMonotonic\n+class ARROW_EXPORT IsMonotonicOptions : public FunctionOptions {\n+ public:\n+  enum NullHandling {\n+    /// Ignore nulls.\n+    IGNORE_NULLS,\n+    /// Use min value of element type as the value of nulls.\n+    /// -Inf for floating point numbers.\n+    USE_MIN_VALUE,\n+    /// Use max value of element type as the value of nulls.\n+    /// Inf for floating point numbers.\n+    USE_MAX_VALUE\n+  };\n\nReview comment:\n       Yes, I agree that a sort before invoking this kernel should result in true for the corresponding check. However I feel the null handling variants are a bit confusing: `AtStart` defines `NaN > null` and `AtEnd` defines `NaN < null`. Also, the sorting kernel can ignore equality, but this kernels considers it to check if values are unique (strictly increasing/decreasing).\r\n   \r\n   I think if we want to allow users to define order of unordered values (both for sorting and this kernel) we need something like this:\r\n   ```c++\r\n   bool compare_nulls = false; // default: any null results in false outputs (or error in case of sort)\r\n   bool compare_nans = false; // default: any nan results in false outputs (or error in case of sort)\r\n   \r\n   // these are not needed when sorting\r\n   bool nulls_equal = false; // when nulls are compared, are they considered equal?\r\n   bool nans_equal = false; // when nans are compared, are they considered equal?\r\n   \r\n   // when both nulls and nans are compared\r\n   enum Ordering { Less, Equal, Greater }\r\n   Ordering nan_compared_with_null; // when comparing nulls and nans, what ordering should be used?\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T12:22:48.518+0000",
                    "updated": "2021-12-17T12:22:48.518+0000",
                    "started": "2021-12-17T12:22:48.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697865",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel commented on pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#issuecomment-996683557\n\n\n   >     * `IsMonotonic` needs to be consistent with corresponding [sorting functions](https://arrow.apache.org/docs/cpp/compute.html#sorts-and-partitions), such that `IsMonotonic(input) == (Sort(input) == input)`.\r\n   \r\n   I agree.\r\n   \r\n   >     * Currently `IsMonotonic` outputs a struct describing the monotonic properties of the data. What your thoughts on having a convenience wrapper function that receives `FunctionOptions` with a single requested monotonic behavior? For example, `IsMonotonic(input, MonotonicOptions.StrictlyIncreasing)`. This would provide a more readable API for client code and bypass the need to unpack the `StructScalar` output to check the corresponding monotonic behavior of interest.\r\n   \r\n   I initially set it up like that but @bkietz suggested to output a struct scalar instead.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T12:24:45.222+0000",
                    "updated": "2021-12-17T12:24:45.222+0000",
                    "started": "2021-12-17T12:24:45.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697867",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/697869",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel edited a comment on pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#issuecomment-996683557\n\n\n   >     * `IsMonotonic` needs to be consistent with corresponding [sorting functions](https://arrow.apache.org/docs/cpp/compute.html#sorts-and-partitions), such that `IsMonotonic(input) == (Sort(input) == input)`.\r\n   \r\n   I agree.\r\n   \r\n   >     * Currently `IsMonotonic` outputs a struct describing the monotonic properties of the data. What your thoughts on having a convenience wrapper function that receives `FunctionOptions` with a single requested monotonic behavior? For example, `IsMonotonic(input, MonotonicOptions.StrictlyIncreasing)`. This would provide a more readable API for client code and bypass the need to unpack the `StructScalar` output to check the corresponding monotonic behavior of interest.\r\n   \r\n   I initially set it up like that but @bkietz suggested to output a struct scalar instead (like the min/max kernel).\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T12:33:50.537+0000",
                    "updated": "2021-12-17T12:33:50.537+0000",
                    "started": "2021-12-17T12:33:50.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697869",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/698031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r770940279\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n\nReview comment:\n       Ideally, `isnan()` should only be used in floating-point-enabled functions, so maybe you can function overload (using enable-if magic) the code blocks that use `isnan()` in a more generic manner.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T18:19:32.313+0000",
                    "updated": "2021-12-17T18:19:32.313+0000",
                    "started": "2021-12-17T18:19:32.313+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698031",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/698032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r770941630\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n\nReview comment:\n       AFAIK, the number of arguments to a function are validated in the compute layer mechanism. When the [`IsMonotonic` function is registered, it specifies a single input argument](https://github.com/apache/arrow/pull/11937/files#diff-011285d7622074d16c9075007d23066a4fbb31fd9bb95c596dab315ed0ca038aR273), so this should already be guaranteed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T18:19:47.049+0000",
                    "updated": "2021-12-17T18:19:47.049+0000",
                    "started": "2021-12-17T18:19:47.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698032",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/698033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r771598458\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_is_monotonic.cc\n##########\n@@ -0,0 +1,321 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate_internal.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/util/optional.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+namespace {\n+// ----------------------------------------------------------------------\n+// IsMonotonic implementation\n+\n+using IsMonotonicState = OptionsWrapper<IsMonotonicOptions>;\n+\n+Status IsMonotonicOutput(bool increasing, bool strictly_increasing, bool decreasing,\n+                         bool strictly_decreasing, Datum* out) {\n+  ARROW_ASSIGN_OR_RAISE(\n+      *out, StructScalar::Make({std::make_shared<BooleanScalar>(increasing),\n+                                std::make_shared<BooleanScalar>(strictly_increasing),\n+                                std::make_shared<BooleanScalar>(decreasing),\n+                                std::make_shared<BooleanScalar>(strictly_decreasing)},\n+                               {\"increasing\", \"strictly_increasing\", \"decreasing\",\n+                                \"strictly_decreasing\"}));\n+  return Status::OK();\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  // Short circuit for NaNs.\n+  // https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN\n+  if (std::isnan(current) || std::isnan(next)) {\n+    *increasing = false;\n+    *strictly_increasing = false;\n+    *decreasing = false;\n+    *strictly_decreasing = false;\n+  } else {\n+    bool equal =\n+        // Approximately equal within some error bound (epsilon).\n+        (options.floating_approximate &&\n+         (fabs(current - next) <=\n+          static_cast<typename DataType::c_type>(options.epsilon))) ||\n+        // Or exactly equal.\n+        current == next;\n+    if (*increasing) {\n+      if (!(equal || next > current)) {\n+        *increasing = false;\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*decreasing) {\n+      if (!(equal || next < current)) {\n+        *decreasing = false;\n+        *strictly_decreasing = false;\n+      }\n+    }\n+    if (*strictly_increasing) {\n+      if (equal || !(next > current)) {\n+        *strictly_increasing = false;\n+      }\n+    }\n+    if (*strictly_decreasing) {\n+      if (equal || !(next < current)) {\n+        *strictly_decreasing = false;\n+      }\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType> IsMonotonicCheck(\n+    const typename DataType::c_type& current, const typename DataType::c_type& next,\n+    bool* increasing, bool* strictly_increasing, bool* decreasing,\n+    bool* strictly_decreasing, const IsMonotonicOptions& options) {\n+  if (*increasing) {\n+    if (!(next >= current)) {\n+      *increasing = false;\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*strictly_increasing) {\n+    if (!(next > current)) {\n+      *strictly_increasing = false;\n+    }\n+  }\n+  if (*decreasing) {\n+    if (!(next <= current)) {\n+      *decreasing = false;\n+      *strictly_decreasing = false;\n+    }\n+  }\n+  if (*strictly_decreasing) {\n+    if (!(next < current)) {\n+      *strictly_decreasing = false;\n+    }\n+  }\n+}\n+\n+template <typename DataType>\n+enable_if_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return opt.has_value() && std::isnan(opt.value());\n+}\n+\n+template <typename DataType>\n+enable_if_not_floating_point<DataType, bool> isnan(\n+    const util::optional<typename DataType::c_type>& opt) {\n+  return false;\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> min() {\n+  return -std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::infinity();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> min() {\n+  return std::numeric_limits<typename DataType::c_type>::min();\n+}\n+\n+template <typename DataType>\n+constexpr enable_if_not_floating_point<DataType, typename DataType::c_type> max() {\n+  return std::numeric_limits<typename DataType::c_type>::max();\n+}\n+\n+template <typename DataType>\n+Status IsMonotonic(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+  using ArrayType = typename TypeTraits<DataType>::ArrayType;\n+  using CType = typename TypeTraits<DataType>::CType;\n+\n+  auto options = IsMonotonicState::Get(ctx);\n+\n+  // Check batch size\n+  if (batch.values.size() != 1) {\n\nReview comment:\n       IMHO, this check is trivial, it doesn't hurt having it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T18:20:44.782+0000",
                    "updated": "2021-12-17T18:20:44.782+0000",
                    "started": "2021-12-17T18:20:44.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698033",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/698035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#issuecomment-996249724\n\n\n   Some general comments:\r\n   * `IsMonotonic` needs to be consistent with corresponding [sorting functions](https://arrow.apache.org/docs/cpp/compute.html#sorts-and-partitions), such that `IsMonotonic(input) == (Sort(input) == input)`.\r\n   * Currently `IsMonotonic` outputs a struct describing the monotonic properties of the data. What are your thoughts on having a convenience wrapper function that receives `FunctionOptions` with a single requested monotonic behavior? For example, `IsMonotonic(input, MonotonicOptions.StrictlyIncreasing)`. This would provide a more readable API for client code and bypass the need to unpack the `StructScalar` output to check the corresponding monotonic behavior of interest.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T18:22:12.467+0000",
                    "updated": "2021-12-17T18:22:12.467+0000",
                    "started": "2021-12-17T18:22:12.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698035",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/698047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r771604225\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -188,6 +188,35 @@ class ARROW_EXPORT PartitionNthOptions : public FunctionOptions {\n   NullPlacement null_placement;\n };\n \n+/// \\brief Options for IsMonotonic\n+class ARROW_EXPORT IsMonotonicOptions : public FunctionOptions {\n+ public:\n+  enum NullHandling {\n+    /// Ignore nulls.\n+    IGNORE_NULLS,\n\nReview comment:\n       Based on the other enum names, use only `IGNORE`, since `enum NullHandling` already specifies this is for nulls.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T18:32:21.450+0000",
                    "updated": "2021-12-17T18:32:21.450+0000",
                    "started": "2021-12-17T18:32:21.450+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698047",
                    "issueId": "13103427"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/worklog/698083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel commented on a change in pull request #11937:\nURL: https://github.com/apache/arrow/pull/11937#discussion_r771651816\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -188,6 +188,35 @@ class ARROW_EXPORT PartitionNthOptions : public FunctionOptions {\n   NullPlacement null_placement;\n };\n \n+/// \\brief Options for IsMonotonic\n+class ARROW_EXPORT IsMonotonicOptions : public FunctionOptions {\n+ public:\n+  enum NullHandling {\n+    /// Ignore nulls.\n+    IGNORE_NULLS,\n\nReview comment:\n       I had that initially, but IGNORE caused compilation issues on Windows.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T19:38:18.586+0000",
                    "updated": "2021-12-17T19:38:18.586+0000",
                    "started": "2021-12-17T19:38:18.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698083",
                    "issueId": "13103427"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@38480745[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58e1d642[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@563cc8f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@b957ba[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55287f25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4f06f9ed[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fcd9bf4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@35831730[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@234497f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5b75cbe6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4874f947[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@65634dee[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:23 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1569/watchers",
            "watchCount": 3,
            "isWatching": true
        },
        "created": "2017-09-19T22:34:13.000+0000",
        "updated": "2022-07-12T14:04:23.000+0000",
        "timeoriginalestimate": null,
        "description": "These kernels must offer some stateful variant so that monotonicity can be determined across chunked arrays",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Kernel functions for determining monotonicity (ascending or descending) for well-ordered types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/comment/17116051",
                    "id": "17116051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This can be implemented as a {{ScalarAggregateFunction}}. We should consider how to enable aggregate functions to short-circuit",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-25T14:09:09.101+0000",
                    "updated": "2020-05-25T14:09:09.101+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/comment/17448173",
                    "id": "17448173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~icook] What is your take on the usefulness of this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-11-23T18:12:39.196+0000",
                    "updated": "2021-11-23T18:12:39.196+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103427/comment/17565583",
                    "id": "17565583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:23.982+0000",
                    "updated": "2022-07-12T14:04:23.982+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3k9nb:",
        "customfield_12314139": null
    }
}