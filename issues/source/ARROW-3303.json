{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13186903",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903",
    "key": "ARROW-3303",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3303/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/171880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T12:20:15.142+0000",
                    "updated": "2018-12-04T12:20:15.142+0000",
                    "started": "2018-12-04T12:20:15.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171880",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/171922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#issuecomment-444127256\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=h1) Report\n   > Merging [#3084](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/0729cb771bd51f60423b52d44a50bddc45653d90?src=pr&el=desc) will **increase** coverage by `1.11%`.\n   > The diff coverage is `99%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3084/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3084      +/-   ##\n   ==========================================\n   + Coverage   87.12%   88.23%   +1.11%     \n   ==========================================\n     Files         492      436      -56     \n     Lines       69104    65786    -3318     \n   ==========================================\n   - Hits        60205    58049    -2156     \n   + Misses       8800     7737    -1063     \n   + Partials       99        0      -99\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/decimal.h](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuaA==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/pretty\\_print-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQtdGVzdC5jYw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/decimal.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuY2M=) | `88.07% <100%> (+0.1%)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/ipc-json-simple-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvaXBjLWpzb24tc2ltcGxlLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/test-util.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuY2M=) | `61.63% <100%> (+2.14%)` | :arrow_up: |\n   | [cpp/src/arrow/array-dict-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS1kaWN0LXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `98.09% <100%> (+0.03%)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/json-simple.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1zaW1wbGUuY2M=) | `96.75% <96.75%> (\u00f8)` | |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `98.91% <0%> (-0.55%)` | :arrow_down: |\n   | ... and [63 more](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=footer). Last update [0729cb7...244f663](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T14:52:57.695+0000",
                    "updated": "2018-12-04T14:52:57.695+0000",
                    "started": "2018-12-04T14:52:57.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171922",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238720669\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -134,6 +134,7 @@ if (NOT ARROW_BOOST_HEADER_ONLY)\n   )\n endif()\n \n+# XXX Always build JSON if required for testing?\n \n Review comment:\n   I think it make sense to move `ArrayFromJson` into test-util.h and make tests depends on rapidjson?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T18:49:19.928+0000",
                    "updated": "2018-12-04T18:49:19.928+0000",
                    "started": "2018-12-04T18:49:19.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172004",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238725486\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/ipc-json-simple-test.cc\n ##########\n @@ -0,0 +1,615 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#if defined(_MSC_VER)\n+// \"warning C4307: '+': integral constant overflow\"\n+#pragma warning(disable : 4307)\n+#endif\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+// Avoid undefined behaviour on signed overflow\n+template <typename Signed>\n+Signed SafeSignedAdd(Signed u, Signed v) {\n+  using Unsigned = typename std::make_unsigned<Signed>::type;\n+  return static_cast<Signed>(static_cast<Unsigned>(u) + static_cast<Unsigned>(v));\n+}\n+\n+// Special case for 8-bit ints (must output their decimal value, not the\n+// corresponding ASCII character)\n+void JSONArrayInternal(std::ostream* ss, int8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+void JSONArrayInternal(std::ostream* ss, uint8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+template <typename Value>\n+void JSONArrayInternal(std::ostream* ss, const Value& value) {\n+  *ss << value;\n+}\n+\n+template <typename Value, typename... Tail>\n+void JSONArrayInternal(std::ostream* ss, const Value& value, Tail... tail) {\n+  JSONArrayInternal(ss, value);\n+  *ss << \", \";\n+  JSONArrayInternal(ss, std::forward<Tail>(tail)...);\n+}\n+\n+template <typename... Args>\n+std::string JSONArray(Args... args) {\n+  std::stringstream ss;\n+  ss << \"[\";\n+  JSONArrayInternal(&ss, std::forward<Args>(args)...);\n+  ss << \"]\";\n+  return ss.str();\n+}\n+\n+TEST(TestHelper, JSONArray) {\n+  // Test the JSONArray helper func\n+  std::string s =\n+      JSONArray(123, -4.5, static_cast<int8_t>(-12), static_cast<uint8_t>(34));\n+  ASSERT_EQ(s, \"[123, -4.5, -12, 34]\");\n+  s = JSONArray(9223372036854775807LL, 9223372036854775808ULL, -9223372036854775807LL - 1,\n+                18446744073709551615ULL);\n+  ASSERT_EQ(s,\n+            \"[9223372036854775807, 9223372036854775808, -9223372036854775808, \"\n+            \"18446744073709551615]\");\n+}\n+\n+TEST(TestHelper, SafeSignedAdd) {\n+  ASSERT_EQ(0, SafeSignedAdd<int8_t>(-128, -128));\n+  ASSERT_EQ(1, SafeSignedAdd<int8_t>(-128, -127));\n+  ASSERT_EQ(-128, SafeSignedAdd<int8_t>(1, 127));\n+  ASSERT_EQ(-2147483648LL, SafeSignedAdd<int32_t>(1, 2147483647));\n+}\n+\n+template <typename T>\n+class TestIntegers : public ::testing::Test {};\n+\n+TYPED_TEST_CASE_P(TestIntegers);\n+\n+TYPED_TEST_P(TestIntegers, Basics) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> expected, actual;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n \n Review comment:\n   I think the pattern\r\n   ```\r\n     ASSERT_OK(ArrayFromJSON(type, \"[false, true, false]\", &actual));\r\n     ASSERT_OK(ValidateArray(*actual));\r\n     ArrayFromVector<BooleanType, bool>({false, true, false}, &expected);\r\n     AssertArraysEqual(*expected, *actual);\r\n   ```\r\n   is repeated enough time (for primitive types) to warrant an explicit function/macro. I'm actually looking.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T18:49:19.933+0000",
                    "updated": "2018-12-04T18:49:19.933+0000",
                    "started": "2018-12-04T18:49:19.932+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172005",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238768701\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/ipc-json-simple-test.cc\n ##########\n @@ -0,0 +1,615 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#if defined(_MSC_VER)\n+// \"warning C4307: '+': integral constant overflow\"\n+#pragma warning(disable : 4307)\n+#endif\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+// Avoid undefined behaviour on signed overflow\n+template <typename Signed>\n+Signed SafeSignedAdd(Signed u, Signed v) {\n+  using Unsigned = typename std::make_unsigned<Signed>::type;\n+  return static_cast<Signed>(static_cast<Unsigned>(u) + static_cast<Unsigned>(v));\n+}\n+\n+// Special case for 8-bit ints (must output their decimal value, not the\n+// corresponding ASCII character)\n+void JSONArrayInternal(std::ostream* ss, int8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+void JSONArrayInternal(std::ostream* ss, uint8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+template <typename Value>\n+void JSONArrayInternal(std::ostream* ss, const Value& value) {\n+  *ss << value;\n+}\n+\n+template <typename Value, typename... Tail>\n+void JSONArrayInternal(std::ostream* ss, const Value& value, Tail... tail) {\n+  JSONArrayInternal(ss, value);\n+  *ss << \", \";\n+  JSONArrayInternal(ss, std::forward<Tail>(tail)...);\n+}\n+\n+template <typename... Args>\n+std::string JSONArray(Args... args) {\n+  std::stringstream ss;\n+  ss << \"[\";\n+  JSONArrayInternal(&ss, std::forward<Args>(args)...);\n+  ss << \"]\";\n+  return ss.str();\n+}\n+\n+TEST(TestHelper, JSONArray) {\n+  // Test the JSONArray helper func\n+  std::string s =\n+      JSONArray(123, -4.5, static_cast<int8_t>(-12), static_cast<uint8_t>(34));\n+  ASSERT_EQ(s, \"[123, -4.5, -12, 34]\");\n+  s = JSONArray(9223372036854775807LL, 9223372036854775808ULL, -9223372036854775807LL - 1,\n+                18446744073709551615ULL);\n+  ASSERT_EQ(s,\n+            \"[9223372036854775807, 9223372036854775808, -9223372036854775808, \"\n+            \"18446744073709551615]\");\n+}\n+\n+TEST(TestHelper, SafeSignedAdd) {\n+  ASSERT_EQ(0, SafeSignedAdd<int8_t>(-128, -128));\n+  ASSERT_EQ(1, SafeSignedAdd<int8_t>(-128, -127));\n+  ASSERT_EQ(-128, SafeSignedAdd<int8_t>(1, 127));\n+  ASSERT_EQ(-2147483648LL, SafeSignedAdd<int32_t>(1, 2147483647));\n+}\n+\n+template <typename T>\n+class TestIntegers : public ::testing::Test {};\n+\n+TYPED_TEST_CASE_P(TestIntegers);\n+\n+TYPED_TEST_P(TestIntegers, Basics) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> expected, actual;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, 0, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, null, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({true, false, true}, {4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  // Test limits\n+  const auto min_val = std::numeric_limits<c_type>::min();\n+  const auto max_val = std::numeric_limits<c_type>::max();\n+  std::string json_string = JSONArray(0, 1, min_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, min_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  json_string = JSONArray(0, 1, max_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, max_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TYPED_TEST_P(TestIntegers, Errors) {\n+  using T = TypeParam;\n+\n+  std::shared_ptr<Array> array;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n \n Review comment:\n   There's also `auto type = TypeTraits<T>::type_singleton()`, might be the more idiomatic way. \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T18:49:20.030+0000",
                    "updated": "2018-12-04T18:49:20.030+0000",
                    "started": "2018-12-04T18:49:20.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172006",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238790096\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -0,0 +1,485 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <sstream>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/ipc/json-internal.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/decimal.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+static constexpr auto kParseFlags = rj::kParseFullPrecisionFlag | rj::kParseNanAndInfFlag;\n+\n+static Status JSONTypeError(const char* expected_type, rj::Type json_type) {\n+  std::stringstream ss;\n+  ss << \"Expected \" << expected_type << \" or null, got type \" << json_type;\n+  return Status::Invalid(ss.str());\n+}\n+\n+class Converter {\n+ public:\n+  virtual ~Converter() = default;\n+\n+  virtual Status Init() { return Status::OK(); }\n+\n+  virtual Status AppendValue(const rj::Value& json_obj) = 0;\n+\n+  virtual Status AppendNull() = 0;\n+\n+  virtual Status AppendValues(const rj::Value& json_array) = 0;\n+\n+  virtual std::shared_ptr<ArrayBuilder> builder() = 0;\n+\n+  virtual Status Finish(std::shared_ptr<Array>* out) {\n+    auto builder = this->builder();\n+    if (builder->length() == 0) {\n+      // Make sure the builder was initialized\n+      RETURN_NOT_OK(builder->Resize(1));\n+    }\n+    return builder->Finish(out);\n+  }\n+\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+};\n+\n+Status GetConverter(const std::shared_ptr<DataType>&, std::shared_ptr<Converter>* out);\n+\n+// CRTP\n+template <class Derived>\n+class ConcreteConverter : public Converter {\n+ public:\n+  Status AppendValues(const rj::Value& json_array) override {\n+    auto self = static_cast<Derived*>(this);\n+    if (!json_array.IsArray()) {\n+      return JSONTypeError(\"array\", json_array.GetType());\n+    }\n+    auto size = json_array.Size();\n+    for (uint32_t i = 0; i < size; ++i) {\n+      RETURN_NOT_OK(self->AppendValue(json_array[i]));\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+// TODO : dates and times?\n+// TODO : binary / fixed size binary?\n+\n+// ------------------------------------------------------------------------\n+// Converter for null arrays\n+\n+class NullConverter : public ConcreteConverter<NullConverter> {\n+ public:\n+  explicit NullConverter(const std::shared_ptr<DataType>& type) {\n+    type_ = type;\n+    builder_ = std::make_shared<NullBuilder>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    return JSONTypeError(\"null\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<NullBuilder> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for boolean arrays\n+\n+class BooleanConverter : public ConcreteConverter<BooleanConverter> {\n+ public:\n+  explicit BooleanConverter(const std::shared_ptr<DataType>& type) {\n+    type_ = type;\n+    builder_ = std::make_shared<BooleanBuilder>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsBool()) {\n+      return builder_->Append(json_obj.GetBool());\n+    }\n+    return JSONTypeError(\"boolean\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<BooleanBuilder> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for int arrays\n+\n+template <typename Type>\n+class IntegerConverter : public ConcreteConverter<IntegerConverter<Type>> {\n+  using c_type = typename Type::c_type;\n+  static constexpr auto is_signed = std::is_signed<c_type>::value;\n+\n+ public:\n+  explicit IntegerConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    builder_ = std::make_shared<NumericBuilder<Type>>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    return AppendNumber(json_obj);\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  // Append signed integer value\n+  template <typename Integer = c_type>\n+  typename std::enable_if<std::is_signed<Integer>::value, Status>::type AppendNumber(\n+      const rj::Value& json_obj) {\n+    if (json_obj.IsInt64()) {\n+      int64_t v64 = json_obj.GetInt64();\n+      c_type v = static_cast<c_type>(v64);\n+      if (v == v64) {\n+        return builder_->Append(v);\n+      } else {\n+        std::stringstream ss;\n+        ss << \"Value \" << v64 << \" out of bounds for \" << this->type_->ToString();\n+        return Status::Invalid(ss.str());\n+      }\n+    } else {\n+      return JSONTypeError(\"signed int\", json_obj.GetType());\n+    }\n+  }\n+\n+  // Append unsigned integer value\n+  template <typename Integer = c_type>\n+  typename std::enable_if<std::is_unsigned<Integer>::value, Status>::type AppendNumber(\n+      const rj::Value& json_obj) {\n+    if (json_obj.IsUint64()) {\n+      uint64_t v64 = json_obj.GetUint64();\n+      c_type v = static_cast<c_type>(v64);\n+      if (v == v64) {\n+        return builder_->Append(v);\n+      } else {\n+        std::stringstream ss;\n+        ss << \"Value \" << v64 << \" out of bounds for \" << this->type_->ToString();\n+        return Status::Invalid(ss.str());\n+      }\n+      return builder_->Append(v);\n+    } else {\n+      return JSONTypeError(\"unsigned int\", json_obj.GetType());\n+    }\n+  }\n+\n+  std::shared_ptr<NumericBuilder<Type>> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for float arrays\n+\n+template <typename Type>\n+class FloatConverter : public ConcreteConverter<FloatConverter<Type>> {\n+  using c_type = typename Type::c_type;\n+\n+ public:\n+  explicit FloatConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    builder_ = std::make_shared<NumericBuilder<Type>>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsNumber()) {\n+      c_type v = static_cast<c_type>(json_obj.GetDouble());\n+      return builder_->Append(v);\n+    } else {\n+      return JSONTypeError(\"number\", json_obj.GetType());\n+    }\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<NumericBuilder<Type>> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for decimal arrays\n+\n+class DecimalConverter : public ConcreteConverter<DecimalConverter> {\n+ public:\n+  explicit DecimalConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    decimal_type_ = checked_cast<Decimal128Type*>(type.get());\n+    builder_ = std::make_shared<DecimalBuilder>(type);\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsString()) {\n+      int32_t precision, scale;\n+      Decimal128 d;\n+      auto view = util::string_view(json_obj.GetString(), json_obj.GetStringLength());\n+      RETURN_NOT_OK(Decimal128::FromString(view, &d, &precision, &scale));\n+      if (scale != decimal_type_->scale()) {\n+        std::stringstream ss;\n+        ss << \"Invalid scale for decimal: expected \" << decimal_type_->scale() << \", got \"\n+           << scale;\n+        return Status::Invalid(ss.str());\n+      }\n+      return builder_->Append(d);\n+    }\n+    return JSONTypeError(\"decimal string\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<DecimalBuilder> builder_;\n+  Decimal128Type* decimal_type_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for string arrays\n+\n+class StringConverter : public ConcreteConverter<StringConverter> {\n+ public:\n+  explicit StringConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    builder_ = std::make_shared<BinaryBuilder>(type, default_memory_pool());\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsString()) {\n+      auto view = util::string_view(json_obj.GetString(), json_obj.GetStringLength());\n+      return builder_->Append(view);\n+    } else {\n+      return JSONTypeError(\"string\", json_obj.GetType());\n+    }\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<BinaryBuilder> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for list arrays\n+\n+class ListConverter : public ConcreteConverter<ListConverter> {\n+ public:\n+  explicit ListConverter(const std::shared_ptr<DataType>& type) { type_ = type; }\n+\n+  Status Init() override {\n+    const auto& list_type = checked_cast<const ListType&>(*type_);\n+    RETURN_NOT_OK(GetConverter(list_type.value_type(), &child_converter_));\n+    auto child_builder = child_converter_->builder();\n+    builder_ = std::make_shared<ListBuilder>(default_memory_pool(), child_builder, type_);\n+    return Status::OK();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    RETURN_NOT_OK(builder_->Append());\n+    // Extend the child converter with this JSON array\n+    return child_converter_->AppendValues(json_obj);\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<ListBuilder> builder_;\n+  std::shared_ptr<Converter> child_converter_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for struct arrays\n+\n+class StructConverter : public ConcreteConverter<StructConverter> {\n+ public:\n+  explicit StructConverter(const std::shared_ptr<DataType>& type) { type_ = type; }\n+\n+  Status Init() override {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders;\n+    for (const auto& field : type_->children()) {\n+      std::shared_ptr<Converter> child_converter;\n+      RETURN_NOT_OK(GetConverter(field->type(), &child_converter));\n+      child_converters_.push_back(child_converter);\n+      child_builders.push_back(child_converter->builder());\n+    }\n+    builder_ = std::make_shared<StructBuilder>(type_, default_memory_pool(),\n+                                               std::move(child_builders));\n+    return Status::OK();\n+  }\n+\n+  Status AppendNull() override {\n+    for (auto& converter : child_converters_) {\n+      RETURN_NOT_OK(converter->AppendNull());\n+    }\n+    return builder_->AppendNull();\n+  }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return AppendNull();\n+    }\n+    if (json_obj.IsArray()) {\n+      auto size = json_obj.Size();\n+      auto expected_size = static_cast<uint32_t>(type_->num_children());\n+      if (size != expected_size) {\n+        std::stringstream ss;\n+        ss << \"Expected array of size \" << expected_size << \", got array of size \"\n+           << size;\n+        return Status::Invalid(ss.str());\n+      }\n+      for (uint32_t i = 0; i < size; ++i) {\n+        RETURN_NOT_OK(child_converters_[i]->AppendValue(json_obj[i]));\n+      }\n+      return builder_->Append();\n+    }\n+    return JSONTypeError(\"array\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<StructBuilder> builder_;\n+  std::vector<std::shared_ptr<Converter>> child_converters_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// General conversion functions\n+\n+Status GetConverter(const std::shared_ptr<DataType>& type,\n+                    std::shared_ptr<Converter>* out) {\n+  std::shared_ptr<Converter> res;\n+\n+#define SIMPLE_CONVERTER_CASE(ID, CLASS) \\\n+  case ID:                               \\\n+    res = std::make_shared<CLASS>(type); \\\n+    break;\n+\n+  switch (type->id()) {\n+    SIMPLE_CONVERTER_CASE(Type::INT8, IntegerConverter<Int8Type>)\n+    SIMPLE_CONVERTER_CASE(Type::INT16, IntegerConverter<Int16Type>)\n+    SIMPLE_CONVERTER_CASE(Type::INT32, IntegerConverter<Int32Type>)\n+    SIMPLE_CONVERTER_CASE(Type::INT64, IntegerConverter<Int64Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT8, IntegerConverter<UInt8Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT16, IntegerConverter<UInt16Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT32, IntegerConverter<UInt32Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT64, IntegerConverter<UInt64Type>)\n+    SIMPLE_CONVERTER_CASE(Type::NA, NullConverter)\n+    SIMPLE_CONVERTER_CASE(Type::BOOL, BooleanConverter)\n+    SIMPLE_CONVERTER_CASE(Type::FLOAT, FloatConverter<FloatType>)\n+    SIMPLE_CONVERTER_CASE(Type::DOUBLE, FloatConverter<DoubleType>)\n+    SIMPLE_CONVERTER_CASE(Type::LIST, ListConverter)\n+    SIMPLE_CONVERTER_CASE(Type::STRUCT, StructConverter)\n+    SIMPLE_CONVERTER_CASE(Type::STRING, StringConverter)\n+    SIMPLE_CONVERTER_CASE(Type::DECIMAL, DecimalConverter)\n+    default: {\n+      std::stringstream ss;\n+      ss << \"JSON conversion to \" << type->ToString() << \" not implemented\";\n+      return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+#undef SIMPLE_CONVERTER_CASE\n+\n+  RETURN_NOT_OK(res->Init());\n+  *out = res;\n+  return Status::OK();\n+}\n+\n+Status ArrayFromJSON(const std::shared_ptr<DataType>& type,\n+                     const util::string_view& json_string, std::shared_ptr<Array>* out) {\n+  std::shared_ptr<Converter> converter;\n+  RETURN_NOT_OK(GetConverter(type, &converter));\n+\n+  rj::Document json_doc;\n+  json_doc.Parse<kParseFlags>(json_string.data(), json_string.length());\n+  if (json_doc.HasParseError()) {\n+    std::stringstream ss;\n+    ss << \"JSON parse error at offset \" << json_doc.GetErrorOffset() << \": \"\n+       << GetParseError_En(json_doc.GetParseError());\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  // The JSON document should be an array, append it\n+  RETURN_NOT_OK(converter->AppendValues(json_doc));\n+  return converter->Finish(out);\n+}\n+\n+Status ArrayFromJSON(const std::shared_ptr<DataType>& type,\n+                     const std::string& json_string, std::shared_ptr<Array>* out) {\n+  return ArrayFromJSON(type, util::string_view(json_string), out);\n+}\n+\n+Status ArrayFromJSON(const std::shared_ptr<DataType>& type, const char* json_string,\n+                     std::shared_ptr<Array>* out) {\n+  return ArrayFromJSON(type, std::string(json_string), out);\n \n Review comment:\n   Any reason for using `std::string` instead of `string_view`, this would remove one copy of the full string.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T18:49:20.167+0000",
                    "updated": "2018-12-04T18:49:20.167+0000",
                    "started": "2018-12-04T18:49:20.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172007",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238784952\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/ipc-json-simple-test.cc\n ##########\n @@ -0,0 +1,615 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#if defined(_MSC_VER)\n+// \"warning C4307: '+': integral constant overflow\"\n+#pragma warning(disable : 4307)\n+#endif\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+// Avoid undefined behaviour on signed overflow\n+template <typename Signed>\n+Signed SafeSignedAdd(Signed u, Signed v) {\n+  using Unsigned = typename std::make_unsigned<Signed>::type;\n+  return static_cast<Signed>(static_cast<Unsigned>(u) + static_cast<Unsigned>(v));\n+}\n+\n+// Special case for 8-bit ints (must output their decimal value, not the\n+// corresponding ASCII character)\n+void JSONArrayInternal(std::ostream* ss, int8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+void JSONArrayInternal(std::ostream* ss, uint8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+template <typename Value>\n+void JSONArrayInternal(std::ostream* ss, const Value& value) {\n+  *ss << value;\n+}\n+\n+template <typename Value, typename... Tail>\n+void JSONArrayInternal(std::ostream* ss, const Value& value, Tail... tail) {\n+  JSONArrayInternal(ss, value);\n+  *ss << \", \";\n+  JSONArrayInternal(ss, std::forward<Tail>(tail)...);\n+}\n+\n+template <typename... Args>\n+std::string JSONArray(Args... args) {\n+  std::stringstream ss;\n+  ss << \"[\";\n+  JSONArrayInternal(&ss, std::forward<Args>(args)...);\n+  ss << \"]\";\n+  return ss.str();\n+}\n+\n+TEST(TestHelper, JSONArray) {\n+  // Test the JSONArray helper func\n+  std::string s =\n+      JSONArray(123, -4.5, static_cast<int8_t>(-12), static_cast<uint8_t>(34));\n+  ASSERT_EQ(s, \"[123, -4.5, -12, 34]\");\n+  s = JSONArray(9223372036854775807LL, 9223372036854775808ULL, -9223372036854775807LL - 1,\n+                18446744073709551615ULL);\n+  ASSERT_EQ(s,\n+            \"[9223372036854775807, 9223372036854775808, -9223372036854775808, \"\n+            \"18446744073709551615]\");\n+}\n+\n+TEST(TestHelper, SafeSignedAdd) {\n+  ASSERT_EQ(0, SafeSignedAdd<int8_t>(-128, -128));\n+  ASSERT_EQ(1, SafeSignedAdd<int8_t>(-128, -127));\n+  ASSERT_EQ(-128, SafeSignedAdd<int8_t>(1, 127));\n+  ASSERT_EQ(-2147483648LL, SafeSignedAdd<int32_t>(1, 2147483647));\n+}\n+\n+template <typename T>\n+class TestIntegers : public ::testing::Test {};\n+\n+TYPED_TEST_CASE_P(TestIntegers);\n+\n+TYPED_TEST_P(TestIntegers, Basics) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> expected, actual;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, 0, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, null, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({true, false, true}, {4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  // Test limits\n+  const auto min_val = std::numeric_limits<c_type>::min();\n+  const auto max_val = std::numeric_limits<c_type>::max();\n+  std::string json_string = JSONArray(0, 1, min_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, min_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  json_string = JSONArray(0, 1, max_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, max_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TYPED_TEST_P(TestIntegers, Errors) {\n+  using T = TypeParam;\n+\n+  std::shared_ptr<Array> array;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"0\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"{}\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0.0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"0\\\"]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[0]]\", &array));\n+}\n+\n+TYPED_TEST_P(TestIntegers, OutOfBounds) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> array;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  if (type->id() == Type::UINT64) {\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[18446744073709551616]\", &array));\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[-1]\", &array));\n+  } else if (type->id() == Type::INT64) {\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[9223372036854775808]\", &array));\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[-9223372036854775809]\", &array));\n+  } else if (std::is_signed<c_type>::value) {\n+    const auto lower = SafeSignedAdd<int64_t>(std::numeric_limits<c_type>::min(), -1);\n+    const auto upper = SafeSignedAdd<int64_t>(std::numeric_limits<c_type>::max(), +1);\n+    auto json_string = JSONArray(lower);\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, json_string, &array));\n+    json_string = JSONArray(upper);\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, json_string, &array));\n+  } else {\n+    const auto upper = static_cast<uint64_t>(std::numeric_limits<c_type>::max()) + 1;\n+    auto json_string = JSONArray(upper);\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, json_string, &array));\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[-1]\", &array));\n+  }\n+}\n+\n+REGISTER_TYPED_TEST_CASE_P(TestIntegers, Basics, Errors, OutOfBounds);\n+\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt8, TestIntegers, Int8Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt16, TestIntegers, Int16Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt32, TestIntegers, Int32Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt64, TestIntegers, Int64Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt8, TestIntegers, UInt8Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt16, TestIntegers, UInt16Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt32, TestIntegers, UInt32Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt64, TestIntegers, UInt64Type);\n+\n+TEST(TestNull, Basics) {\n+  std::shared_ptr<DataType> type = null();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  expected = std::make_shared<NullArray>(0);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  expected = std::make_shared<NullArray>(2);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestNull, Errors) {\n+  std::shared_ptr<DataType> type = null();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[]]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[NaN]\", &array));\n+}\n+\n+TEST(TestBoolean, Basics) {\n+  std::shared_ptr<DataType> type = boolean();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<BooleanType, bool>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[false, true, false]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<BooleanType, bool>({false, true, false}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[false, true, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<BooleanType, bool>({true, true, false}, {false, true, false},\n+                                     &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestBoolean, Errors) {\n+  std::shared_ptr<DataType> type = boolean();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"true\\\"]\", &array));\n+}\n+\n+TEST(TestFloat, Basics) {\n+  std::shared_ptr<DataType> type = float32();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<FloatType>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[1, 2.5, -3e4]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<FloatType>({1.0f, 2.5f, -3.0e4f}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[-0.0, Inf, -Inf, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<FloatType>({true, true, true, false},\n+                             {-0.0f, INFINITY, -INFINITY, 0.0f}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  // Check NaN separately as AssertArraysEqual simply memcmp's array contents\n+  // and NaNs can have many bit representations.\n+  ASSERT_OK(ArrayFromJSON(type, \"[NaN]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  float value = checked_cast<FloatArray&>(*actual).Value(0);\n+  ASSERT_TRUE(std::isnan(value));\n+}\n+\n+TEST(TestFloat, Errors) {\n+  std::shared_ptr<DataType> type = float32();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[true]\", &array));\n+}\n+\n+TEST(TestDouble, Basics) {\n+  std::shared_ptr<DataType> type = float64();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<DoubleType>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[1, 2.5, -3e4]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<DoubleType>({1.0, 2.5, -3.0e4}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[-0.0, Inf, -Inf, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<DoubleType>({true, true, true, false},\n+                              {-0.0, INFINITY, -INFINITY, 0.0f}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[NaN]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  double value = checked_cast<DoubleArray&>(*actual).Value(0);\n+  ASSERT_TRUE(std::isnan(value));\n+}\n+\n+TEST(TestDouble, Errors) {\n+  std::shared_ptr<DataType> type = float64();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[true]\", &array));\n+}\n+\n+TEST(TestString, Basics) {\n+  std::shared_ptr<DataType> type = utf8();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<StringType, std::string>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"\\\", \\\"foo\\\"]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<StringType, std::string>({\"\", \"foo\"}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"\\\", null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<StringType, std::string>({true, false}, {\"\", \"\"}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestString, Errors) {\n+  std::shared_ptr<DataType> type = utf8();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[]]\", &array));\n+}\n+\n+TEST(TestDecimal, Basics) {\n+  std::shared_ptr<DataType> type = decimal(10, 4);\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    Decimal128Builder builder(type);\n+    ASSERT_OK(builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"123.4567\\\", \\\"-78.9000\\\"]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    Decimal128Builder builder(type);\n+    ASSERT_OK(builder.Append(Decimal128(1234567)));\n+    ASSERT_OK(builder.Append(Decimal128(-789000)));\n+    ASSERT_OK(builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"123.4567\\\", null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    Decimal128Builder builder(type);\n+    ASSERT_OK(builder.Append(Decimal128(1234567)));\n+    ASSERT_OK(builder.AppendNull());\n+    ASSERT_OK(builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestDecimal, Errors) {\n+  std::shared_ptr<DataType> type = decimal(10, 4);\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[12.3456]\", &array));\n+  // Bad scale\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"12.345\\\"]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"12.34560\\\"]\", &array));\n+}\n+\n+TEST(TestList, IntegerList) {\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<DataType> type = list(int64());\n+  std::shared_ptr<Array> offsets, values, expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0}, &offsets);\n+  ArrayFromVector<Int64Type>({}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[4, 5], [], [6]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 2, 2, 3}, &offsets);\n+  ArrayFromVector<Int64Type>({4, 5, 6}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[], [null], [6, null]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 3}, &offsets);\n+  auto is_valid = std::vector<bool>{false, true, false};\n+  ArrayFromVector<Int64Type>(is_valid, {0, 6, 0}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, [], null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    std::unique_ptr<ArrayBuilder> builder;\n+    ASSERT_OK(MakeBuilder(pool, type, &builder));\n+    auto& list_builder = checked_cast<ListBuilder&>(*builder);\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestList, IntegerListErrors) {\n+  std::shared_ptr<DataType> type = list(int64());\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[0.0]]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[9223372036854775808]]\", &array));\n+}\n+\n+TEST(TestList, NullList) {\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<DataType> type = list(null());\n+  std::shared_ptr<Array> offsets, values, expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0}, &offsets);\n+  values = std::make_shared<NullArray>(0);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[], [null], [null, null]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 3}, &offsets);\n+  values = std::make_shared<NullArray>(3);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, [], null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    std::unique_ptr<ArrayBuilder> builder;\n+    ASSERT_OK(MakeBuilder(pool, type, &builder));\n+    auto& list_builder = checked_cast<ListBuilder&>(*builder);\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestList, IntegerListList) {\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<DataType> type = list(list(uint8()));\n+  std::shared_ptr<Array> offsets, values, nested, expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[[4], [5, 6]], [[7, 8, 9]]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 1, 3, 6}, &offsets);\n+  ArrayFromVector<UInt8Type>({4, 5, 6, 7, 8, 9}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &nested));\n+  ArrayFromVector<Int32Type>({0, 2, 3}, &offsets);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *nested, pool, &expected));\n+  ASSERT_EQ(actual->length(), 2);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[], [[]], [[4], [], [5, 6]], [[7, 8, 9]]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 1, 3, 6}, &offsets);\n+  ArrayFromVector<UInt8Type>({4, 5, 6, 7, 8, 9}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &nested));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 4, 5}, &offsets);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *nested, pool, &expected));\n+  ASSERT_EQ(actual->length(), 4);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, [null], [[null]]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    std::unique_ptr<ArrayBuilder> builder;\n+    ASSERT_OK(MakeBuilder(pool, type, &builder));\n+    auto& list_builder = checked_cast<ListBuilder&>(*builder);\n+    auto& child_builder = checked_cast<ListBuilder&>(*list_builder.value_builder());\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(child_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(child_builder.Append());\n+    ASSERT_OK(list_builder.Finish(&expected));\n+  }\n+}\n+\n+TEST(TestStruct, SimpleStruct) {\n+  auto field_a = field(\"a\", int8());\n+  auto field_b = field(\"b\", boolean());\n+  std::shared_ptr<DataType> type = struct_({field_a, field_b});\n+  std::shared_ptr<Array> a, b, expected, actual;\n+  std::shared_ptr<Buffer> null_bitmap;\n+  std::vector<bool> is_valid;\n+  std::vector<std::shared_ptr<Array>> children;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int8Type>({}, &a);\n+  ArrayFromVector<BooleanType, bool>({}, &b);\n+  children.assign({a, b});\n+  expected = std::make_shared<StructArray>(type, 0, children);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[5, true], [6, false]]\", &actual));\n \n Review comment:\n   While verbose, it would be natural to see and/or expect `[{\"a\": 5, \"b\": true}, {\"b\": false, \"a\": 6}]`. Such that you can re-order fields in the json.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T18:49:20.191+0000",
                    "updated": "2018-12-04T18:49:20.191+0000",
                    "started": "2018-12-04T18:49:20.190+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172008",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238725486\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/ipc-json-simple-test.cc\n ##########\n @@ -0,0 +1,615 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#if defined(_MSC_VER)\n+// \"warning C4307: '+': integral constant overflow\"\n+#pragma warning(disable : 4307)\n+#endif\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+// Avoid undefined behaviour on signed overflow\n+template <typename Signed>\n+Signed SafeSignedAdd(Signed u, Signed v) {\n+  using Unsigned = typename std::make_unsigned<Signed>::type;\n+  return static_cast<Signed>(static_cast<Unsigned>(u) + static_cast<Unsigned>(v));\n+}\n+\n+// Special case for 8-bit ints (must output their decimal value, not the\n+// corresponding ASCII character)\n+void JSONArrayInternal(std::ostream* ss, int8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+void JSONArrayInternal(std::ostream* ss, uint8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+template <typename Value>\n+void JSONArrayInternal(std::ostream* ss, const Value& value) {\n+  *ss << value;\n+}\n+\n+template <typename Value, typename... Tail>\n+void JSONArrayInternal(std::ostream* ss, const Value& value, Tail... tail) {\n+  JSONArrayInternal(ss, value);\n+  *ss << \", \";\n+  JSONArrayInternal(ss, std::forward<Tail>(tail)...);\n+}\n+\n+template <typename... Args>\n+std::string JSONArray(Args... args) {\n+  std::stringstream ss;\n+  ss << \"[\";\n+  JSONArrayInternal(&ss, std::forward<Args>(args)...);\n+  ss << \"]\";\n+  return ss.str();\n+}\n+\n+TEST(TestHelper, JSONArray) {\n+  // Test the JSONArray helper func\n+  std::string s =\n+      JSONArray(123, -4.5, static_cast<int8_t>(-12), static_cast<uint8_t>(34));\n+  ASSERT_EQ(s, \"[123, -4.5, -12, 34]\");\n+  s = JSONArray(9223372036854775807LL, 9223372036854775808ULL, -9223372036854775807LL - 1,\n+                18446744073709551615ULL);\n+  ASSERT_EQ(s,\n+            \"[9223372036854775807, 9223372036854775808, -9223372036854775808, \"\n+            \"18446744073709551615]\");\n+}\n+\n+TEST(TestHelper, SafeSignedAdd) {\n+  ASSERT_EQ(0, SafeSignedAdd<int8_t>(-128, -128));\n+  ASSERT_EQ(1, SafeSignedAdd<int8_t>(-128, -127));\n+  ASSERT_EQ(-128, SafeSignedAdd<int8_t>(1, 127));\n+  ASSERT_EQ(-2147483648LL, SafeSignedAdd<int32_t>(1, 2147483647));\n+}\n+\n+template <typename T>\n+class TestIntegers : public ::testing::Test {};\n+\n+TYPED_TEST_CASE_P(TestIntegers);\n+\n+TYPED_TEST_P(TestIntegers, Basics) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> expected, actual;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n \n Review comment:\n   I think the pattern\r\n   ```\r\n     ASSERT_OK(ArrayFromJSON(type, \"[false, true, false]\", &actual));\r\n     ASSERT_OK(ValidateArray(*actual));\r\n     ArrayFromVector<BooleanType, bool>({false, true, false}, &expected);\r\n     AssertArraysEqual(*expected, *actual);\r\n   ```\r\n   is repeated enough time (for primitive types) to warrant an explicit function/macro.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-04T18:50:06.028+0000",
                    "updated": "2018-12-04T18:50:06.028+0000",
                    "started": "2018-12-04T18:50:06.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172009",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238995178\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -134,6 +134,7 @@ if (NOT ARROW_BOOST_HEADER_ONLY)\n   )\n endif()\n \n+# XXX Always build JSON if required for testing?\n \n Review comment:\n   I think `ArrayFromJSON` may be more useful than just for testing. Our other JSON format is verbose and less intuitive.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T09:52:04.048+0000",
                    "updated": "2018-12-05T09:52:04.048+0000",
                    "started": "2018-12-05T09:52:04.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172204",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238995235\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/ipc-json-simple-test.cc\n ##########\n @@ -0,0 +1,615 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#if defined(_MSC_VER)\n+// \"warning C4307: '+': integral constant overflow\"\n+#pragma warning(disable : 4307)\n+#endif\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+// Avoid undefined behaviour on signed overflow\n+template <typename Signed>\n+Signed SafeSignedAdd(Signed u, Signed v) {\n+  using Unsigned = typename std::make_unsigned<Signed>::type;\n+  return static_cast<Signed>(static_cast<Unsigned>(u) + static_cast<Unsigned>(v));\n+}\n+\n+// Special case for 8-bit ints (must output their decimal value, not the\n+// corresponding ASCII character)\n+void JSONArrayInternal(std::ostream* ss, int8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+void JSONArrayInternal(std::ostream* ss, uint8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+template <typename Value>\n+void JSONArrayInternal(std::ostream* ss, const Value& value) {\n+  *ss << value;\n+}\n+\n+template <typename Value, typename... Tail>\n+void JSONArrayInternal(std::ostream* ss, const Value& value, Tail... tail) {\n+  JSONArrayInternal(ss, value);\n+  *ss << \", \";\n+  JSONArrayInternal(ss, std::forward<Tail>(tail)...);\n+}\n+\n+template <typename... Args>\n+std::string JSONArray(Args... args) {\n+  std::stringstream ss;\n+  ss << \"[\";\n+  JSONArrayInternal(&ss, std::forward<Args>(args)...);\n+  ss << \"]\";\n+  return ss.str();\n+}\n+\n+TEST(TestHelper, JSONArray) {\n+  // Test the JSONArray helper func\n+  std::string s =\n+      JSONArray(123, -4.5, static_cast<int8_t>(-12), static_cast<uint8_t>(34));\n+  ASSERT_EQ(s, \"[123, -4.5, -12, 34]\");\n+  s = JSONArray(9223372036854775807LL, 9223372036854775808ULL, -9223372036854775807LL - 1,\n+                18446744073709551615ULL);\n+  ASSERT_EQ(s,\n+            \"[9223372036854775807, 9223372036854775808, -9223372036854775808, \"\n+            \"18446744073709551615]\");\n+}\n+\n+TEST(TestHelper, SafeSignedAdd) {\n+  ASSERT_EQ(0, SafeSignedAdd<int8_t>(-128, -128));\n+  ASSERT_EQ(1, SafeSignedAdd<int8_t>(-128, -127));\n+  ASSERT_EQ(-128, SafeSignedAdd<int8_t>(1, 127));\n+  ASSERT_EQ(-2147483648LL, SafeSignedAdd<int32_t>(1, 2147483647));\n+}\n+\n+template <typename T>\n+class TestIntegers : public ::testing::Test {};\n+\n+TYPED_TEST_CASE_P(TestIntegers);\n+\n+TYPED_TEST_P(TestIntegers, Basics) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> expected, actual;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n \n Review comment:\n   Yes, I'll take a look.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T09:52:12.249+0000",
                    "updated": "2018-12-05T09:52:12.249+0000",
                    "started": "2018-12-05T09:52:12.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172205",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238995288\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/ipc-json-simple-test.cc\n ##########\n @@ -0,0 +1,615 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#if defined(_MSC_VER)\n+// \"warning C4307: '+': integral constant overflow\"\n+#pragma warning(disable : 4307)\n+#endif\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+// Avoid undefined behaviour on signed overflow\n+template <typename Signed>\n+Signed SafeSignedAdd(Signed u, Signed v) {\n+  using Unsigned = typename std::make_unsigned<Signed>::type;\n+  return static_cast<Signed>(static_cast<Unsigned>(u) + static_cast<Unsigned>(v));\n+}\n+\n+// Special case for 8-bit ints (must output their decimal value, not the\n+// corresponding ASCII character)\n+void JSONArrayInternal(std::ostream* ss, int8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+void JSONArrayInternal(std::ostream* ss, uint8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+template <typename Value>\n+void JSONArrayInternal(std::ostream* ss, const Value& value) {\n+  *ss << value;\n+}\n+\n+template <typename Value, typename... Tail>\n+void JSONArrayInternal(std::ostream* ss, const Value& value, Tail... tail) {\n+  JSONArrayInternal(ss, value);\n+  *ss << \", \";\n+  JSONArrayInternal(ss, std::forward<Tail>(tail)...);\n+}\n+\n+template <typename... Args>\n+std::string JSONArray(Args... args) {\n+  std::stringstream ss;\n+  ss << \"[\";\n+  JSONArrayInternal(&ss, std::forward<Args>(args)...);\n+  ss << \"]\";\n+  return ss.str();\n+}\n+\n+TEST(TestHelper, JSONArray) {\n+  // Test the JSONArray helper func\n+  std::string s =\n+      JSONArray(123, -4.5, static_cast<int8_t>(-12), static_cast<uint8_t>(34));\n+  ASSERT_EQ(s, \"[123, -4.5, -12, 34]\");\n+  s = JSONArray(9223372036854775807LL, 9223372036854775808ULL, -9223372036854775807LL - 1,\n+                18446744073709551615ULL);\n+  ASSERT_EQ(s,\n+            \"[9223372036854775807, 9223372036854775808, -9223372036854775808, \"\n+            \"18446744073709551615]\");\n+}\n+\n+TEST(TestHelper, SafeSignedAdd) {\n+  ASSERT_EQ(0, SafeSignedAdd<int8_t>(-128, -128));\n+  ASSERT_EQ(1, SafeSignedAdd<int8_t>(-128, -127));\n+  ASSERT_EQ(-128, SafeSignedAdd<int8_t>(1, 127));\n+  ASSERT_EQ(-2147483648LL, SafeSignedAdd<int32_t>(1, 2147483647));\n+}\n+\n+template <typename T>\n+class TestIntegers : public ::testing::Test {};\n+\n+TYPED_TEST_CASE_P(TestIntegers);\n+\n+TYPED_TEST_P(TestIntegers, Basics) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> expected, actual;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, 0, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, null, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({true, false, true}, {4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  // Test limits\n+  const auto min_val = std::numeric_limits<c_type>::min();\n+  const auto max_val = std::numeric_limits<c_type>::max();\n+  std::string json_string = JSONArray(0, 1, min_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, min_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  json_string = JSONArray(0, 1, max_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, max_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TYPED_TEST_P(TestIntegers, Errors) {\n+  using T = TypeParam;\n+\n+  std::shared_ptr<Array> array;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n \n Review comment:\n   Indeed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T09:52:23.487+0000",
                    "updated": "2018-12-05T09:52:23.487+0000",
                    "started": "2018-12-05T09:52:23.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172206",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172207",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238995378\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/ipc-json-simple-test.cc\n ##########\n @@ -0,0 +1,615 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cmath>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstring>\n+#include <limits>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#if defined(_MSC_VER)\n+// \"warning C4307: '+': integral constant overflow\"\n+#pragma warning(disable : 4307)\n+#endif\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+// Avoid undefined behaviour on signed overflow\n+template <typename Signed>\n+Signed SafeSignedAdd(Signed u, Signed v) {\n+  using Unsigned = typename std::make_unsigned<Signed>::type;\n+  return static_cast<Signed>(static_cast<Unsigned>(u) + static_cast<Unsigned>(v));\n+}\n+\n+// Special case for 8-bit ints (must output their decimal value, not the\n+// corresponding ASCII character)\n+void JSONArrayInternal(std::ostream* ss, int8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+void JSONArrayInternal(std::ostream* ss, uint8_t value) {\n+  *ss << static_cast<int16_t>(value);\n+}\n+\n+template <typename Value>\n+void JSONArrayInternal(std::ostream* ss, const Value& value) {\n+  *ss << value;\n+}\n+\n+template <typename Value, typename... Tail>\n+void JSONArrayInternal(std::ostream* ss, const Value& value, Tail... tail) {\n+  JSONArrayInternal(ss, value);\n+  *ss << \", \";\n+  JSONArrayInternal(ss, std::forward<Tail>(tail)...);\n+}\n+\n+template <typename... Args>\n+std::string JSONArray(Args... args) {\n+  std::stringstream ss;\n+  ss << \"[\";\n+  JSONArrayInternal(&ss, std::forward<Args>(args)...);\n+  ss << \"]\";\n+  return ss.str();\n+}\n+\n+TEST(TestHelper, JSONArray) {\n+  // Test the JSONArray helper func\n+  std::string s =\n+      JSONArray(123, -4.5, static_cast<int8_t>(-12), static_cast<uint8_t>(34));\n+  ASSERT_EQ(s, \"[123, -4.5, -12, 34]\");\n+  s = JSONArray(9223372036854775807LL, 9223372036854775808ULL, -9223372036854775807LL - 1,\n+                18446744073709551615ULL);\n+  ASSERT_EQ(s,\n+            \"[9223372036854775807, 9223372036854775808, -9223372036854775808, \"\n+            \"18446744073709551615]\");\n+}\n+\n+TEST(TestHelper, SafeSignedAdd) {\n+  ASSERT_EQ(0, SafeSignedAdd<int8_t>(-128, -128));\n+  ASSERT_EQ(1, SafeSignedAdd<int8_t>(-128, -127));\n+  ASSERT_EQ(-128, SafeSignedAdd<int8_t>(1, 127));\n+  ASSERT_EQ(-2147483648LL, SafeSignedAdd<int32_t>(1, 2147483647));\n+}\n+\n+template <typename T>\n+class TestIntegers : public ::testing::Test {};\n+\n+TYPED_TEST_CASE_P(TestIntegers);\n+\n+TYPED_TEST_P(TestIntegers, Basics) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> expected, actual;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, 0, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[4, null, 5]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<T>({true, false, true}, {4, 0, 5}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  // Test limits\n+  const auto min_val = std::numeric_limits<c_type>::min();\n+  const auto max_val = std::numeric_limits<c_type>::max();\n+  std::string json_string = JSONArray(0, 1, min_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, min_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  json_string = JSONArray(0, 1, max_val);\n+  ASSERT_OK(ArrayFromJSON(type, json_string, &actual));\n+  ArrayFromVector<T>({0, 1, max_val}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TYPED_TEST_P(TestIntegers, Errors) {\n+  using T = TypeParam;\n+\n+  std::shared_ptr<Array> array;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"0\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"{}\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0.0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"0\\\"]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[0]]\", &array));\n+}\n+\n+TYPED_TEST_P(TestIntegers, OutOfBounds) {\n+  using T = TypeParam;\n+  using c_type = typename T::c_type;\n+\n+  std::shared_ptr<Array> array;\n+  std::shared_ptr<DataType> type = std::make_shared<T>();\n+\n+  if (type->id() == Type::UINT64) {\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[18446744073709551616]\", &array));\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[-1]\", &array));\n+  } else if (type->id() == Type::INT64) {\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[9223372036854775808]\", &array));\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[-9223372036854775809]\", &array));\n+  } else if (std::is_signed<c_type>::value) {\n+    const auto lower = SafeSignedAdd<int64_t>(std::numeric_limits<c_type>::min(), -1);\n+    const auto upper = SafeSignedAdd<int64_t>(std::numeric_limits<c_type>::max(), +1);\n+    auto json_string = JSONArray(lower);\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, json_string, &array));\n+    json_string = JSONArray(upper);\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, json_string, &array));\n+  } else {\n+    const auto upper = static_cast<uint64_t>(std::numeric_limits<c_type>::max()) + 1;\n+    auto json_string = JSONArray(upper);\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, json_string, &array));\n+    ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[-1]\", &array));\n+  }\n+}\n+\n+REGISTER_TYPED_TEST_CASE_P(TestIntegers, Basics, Errors, OutOfBounds);\n+\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt8, TestIntegers, Int8Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt16, TestIntegers, Int16Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt32, TestIntegers, Int32Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestInt64, TestIntegers, Int64Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt8, TestIntegers, UInt8Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt16, TestIntegers, UInt16Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt32, TestIntegers, UInt32Type);\n+INSTANTIATE_TYPED_TEST_CASE_P(TestUInt64, TestIntegers, UInt64Type);\n+\n+TEST(TestNull, Basics) {\n+  std::shared_ptr<DataType> type = null();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  expected = std::make_shared<NullArray>(0);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  expected = std::make_shared<NullArray>(2);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestNull, Errors) {\n+  std::shared_ptr<DataType> type = null();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[]]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[NaN]\", &array));\n+}\n+\n+TEST(TestBoolean, Basics) {\n+  std::shared_ptr<DataType> type = boolean();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<BooleanType, bool>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[false, true, false]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<BooleanType, bool>({false, true, false}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[false, true, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<BooleanType, bool>({true, true, false}, {false, true, false},\n+                                     &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestBoolean, Errors) {\n+  std::shared_ptr<DataType> type = boolean();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"true\\\"]\", &array));\n+}\n+\n+TEST(TestFloat, Basics) {\n+  std::shared_ptr<DataType> type = float32();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<FloatType>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[1, 2.5, -3e4]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<FloatType>({1.0f, 2.5f, -3.0e4f}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[-0.0, Inf, -Inf, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<FloatType>({true, true, true, false},\n+                             {-0.0f, INFINITY, -INFINITY, 0.0f}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  // Check NaN separately as AssertArraysEqual simply memcmp's array contents\n+  // and NaNs can have many bit representations.\n+  ASSERT_OK(ArrayFromJSON(type, \"[NaN]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  float value = checked_cast<FloatArray&>(*actual).Value(0);\n+  ASSERT_TRUE(std::isnan(value));\n+}\n+\n+TEST(TestFloat, Errors) {\n+  std::shared_ptr<DataType> type = float32();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[true]\", &array));\n+}\n+\n+TEST(TestDouble, Basics) {\n+  std::shared_ptr<DataType> type = float64();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<DoubleType>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[1, 2.5, -3e4]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<DoubleType>({1.0, 2.5, -3.0e4}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[-0.0, Inf, -Inf, null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<DoubleType>({true, true, true, false},\n+                              {-0.0, INFINITY, -INFINITY, 0.0f}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[NaN]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  double value = checked_cast<DoubleArray&>(*actual).Value(0);\n+  ASSERT_TRUE(std::isnan(value));\n+}\n+\n+TEST(TestDouble, Errors) {\n+  std::shared_ptr<DataType> type = float64();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[true]\", &array));\n+}\n+\n+TEST(TestString, Basics) {\n+  std::shared_ptr<DataType> type = utf8();\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<StringType, std::string>({}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"\\\", \\\"foo\\\"]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<StringType, std::string>({\"\", \"foo\"}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"\\\", null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<StringType, std::string>({true, false}, {\"\", \"\"}, &expected);\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestString, Errors) {\n+  std::shared_ptr<DataType> type = utf8();\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[]]\", &array));\n+}\n+\n+TEST(TestDecimal, Basics) {\n+  std::shared_ptr<DataType> type = decimal(10, 4);\n+  std::shared_ptr<Array> expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    Decimal128Builder builder(type);\n+    ASSERT_OK(builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"123.4567\\\", \\\"-78.9000\\\"]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    Decimal128Builder builder(type);\n+    ASSERT_OK(builder.Append(Decimal128(1234567)));\n+    ASSERT_OK(builder.Append(Decimal128(-789000)));\n+    ASSERT_OK(builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[\\\"123.4567\\\", null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    Decimal128Builder builder(type);\n+    ASSERT_OK(builder.Append(Decimal128(1234567)));\n+    ASSERT_OK(builder.AppendNull());\n+    ASSERT_OK(builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestDecimal, Errors) {\n+  std::shared_ptr<DataType> type = decimal(10, 4);\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[12.3456]\", &array));\n+  // Bad scale\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"12.345\\\"]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[\\\"12.34560\\\"]\", &array));\n+}\n+\n+TEST(TestList, IntegerList) {\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<DataType> type = list(int64());\n+  std::shared_ptr<Array> offsets, values, expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0}, &offsets);\n+  ArrayFromVector<Int64Type>({}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[4, 5], [], [6]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 2, 2, 3}, &offsets);\n+  ArrayFromVector<Int64Type>({4, 5, 6}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[], [null], [6, null]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 3}, &offsets);\n+  auto is_valid = std::vector<bool>{false, true, false};\n+  ArrayFromVector<Int64Type>(is_valid, {0, 6, 0}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, [], null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    std::unique_ptr<ArrayBuilder> builder;\n+    ASSERT_OK(MakeBuilder(pool, type, &builder));\n+    auto& list_builder = checked_cast<ListBuilder&>(*builder);\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestList, IntegerListErrors) {\n+  std::shared_ptr<DataType> type = list(int64());\n+  std::shared_ptr<Array> array;\n+\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[0]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[0.0]]\", &array));\n+  ASSERT_RAISES(Invalid, ArrayFromJSON(type, \"[[9223372036854775808]]\", &array));\n+}\n+\n+TEST(TestList, NullList) {\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<DataType> type = list(null());\n+  std::shared_ptr<Array> offsets, values, expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0}, &offsets);\n+  values = std::make_shared<NullArray>(0);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[], [null], [null, null]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 3}, &offsets);\n+  values = std::make_shared<NullArray>(3);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &expected));\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, [], null]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    std::unique_ptr<ArrayBuilder> builder;\n+    ASSERT_OK(MakeBuilder(pool, type, &builder));\n+    auto& list_builder = checked_cast<ListBuilder&>(*builder);\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Finish(&expected));\n+  }\n+  AssertArraysEqual(*expected, *actual);\n+}\n+\n+TEST(TestList, IntegerListList) {\n+  auto pool = default_memory_pool();\n+  std::shared_ptr<DataType> type = list(list(uint8()));\n+  std::shared_ptr<Array> offsets, values, nested, expected, actual;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[[4], [5, 6]], [[7, 8, 9]]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 1, 3, 6}, &offsets);\n+  ArrayFromVector<UInt8Type>({4, 5, 6, 7, 8, 9}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &nested));\n+  ArrayFromVector<Int32Type>({0, 2, 3}, &offsets);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *nested, pool, &expected));\n+  ASSERT_EQ(actual->length(), 2);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[], [[]], [[4], [], [5, 6]], [[7, 8, 9]]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 1, 3, 6}, &offsets);\n+  ArrayFromVector<UInt8Type>({4, 5, 6, 7, 8, 9}, &values);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *values, pool, &nested));\n+  ArrayFromVector<Int32Type>({0, 0, 1, 4, 5}, &offsets);\n+  ASSERT_OK(ListArray::FromArrays(*offsets, *nested, pool, &expected));\n+  ASSERT_EQ(actual->length(), 4);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[null, [null], [[null]]]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  {\n+    std::unique_ptr<ArrayBuilder> builder;\n+    ASSERT_OK(MakeBuilder(pool, type, &builder));\n+    auto& list_builder = checked_cast<ListBuilder&>(*builder);\n+    auto& child_builder = checked_cast<ListBuilder&>(*list_builder.value_builder());\n+    ASSERT_OK(list_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(child_builder.AppendNull());\n+    ASSERT_OK(list_builder.Append());\n+    ASSERT_OK(child_builder.Append());\n+    ASSERT_OK(list_builder.Finish(&expected));\n+  }\n+}\n+\n+TEST(TestStruct, SimpleStruct) {\n+  auto field_a = field(\"a\", int8());\n+  auto field_b = field(\"b\", boolean());\n+  std::shared_ptr<DataType> type = struct_({field_a, field_b});\n+  std::shared_ptr<Array> a, b, expected, actual;\n+  std::shared_ptr<Buffer> null_bitmap;\n+  std::vector<bool> is_valid;\n+  std::vector<std::shared_ptr<Array>> children;\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[]\", &actual));\n+  ASSERT_OK(ValidateArray(*actual));\n+  ArrayFromVector<Int8Type>({}, &a);\n+  ArrayFromVector<BooleanType, bool>({}, &b);\n+  children.assign({a, b});\n+  expected = std::make_shared<StructArray>(type, 0, children);\n+  AssertArraysEqual(*expected, *actual);\n+\n+  ASSERT_OK(ArrayFromJSON(type, \"[[5, true], [6, false]]\", &actual));\n \n Review comment:\n   Ok, I can add this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T09:52:37.609+0000",
                    "updated": "2018-12-05T09:52:37.609+0000",
                    "started": "2018-12-05T09:52:37.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172207",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r238995500\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -0,0 +1,485 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <sstream>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/ipc/json-internal.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/decimal.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+static constexpr auto kParseFlags = rj::kParseFullPrecisionFlag | rj::kParseNanAndInfFlag;\n+\n+static Status JSONTypeError(const char* expected_type, rj::Type json_type) {\n+  std::stringstream ss;\n+  ss << \"Expected \" << expected_type << \" or null, got type \" << json_type;\n+  return Status::Invalid(ss.str());\n+}\n+\n+class Converter {\n+ public:\n+  virtual ~Converter() = default;\n+\n+  virtual Status Init() { return Status::OK(); }\n+\n+  virtual Status AppendValue(const rj::Value& json_obj) = 0;\n+\n+  virtual Status AppendNull() = 0;\n+\n+  virtual Status AppendValues(const rj::Value& json_array) = 0;\n+\n+  virtual std::shared_ptr<ArrayBuilder> builder() = 0;\n+\n+  virtual Status Finish(std::shared_ptr<Array>* out) {\n+    auto builder = this->builder();\n+    if (builder->length() == 0) {\n+      // Make sure the builder was initialized\n+      RETURN_NOT_OK(builder->Resize(1));\n+    }\n+    return builder->Finish(out);\n+  }\n+\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+};\n+\n+Status GetConverter(const std::shared_ptr<DataType>&, std::shared_ptr<Converter>* out);\n+\n+// CRTP\n+template <class Derived>\n+class ConcreteConverter : public Converter {\n+ public:\n+  Status AppendValues(const rj::Value& json_array) override {\n+    auto self = static_cast<Derived*>(this);\n+    if (!json_array.IsArray()) {\n+      return JSONTypeError(\"array\", json_array.GetType());\n+    }\n+    auto size = json_array.Size();\n+    for (uint32_t i = 0; i < size; ++i) {\n+      RETURN_NOT_OK(self->AppendValue(json_array[i]));\n+    }\n+    return Status::OK();\n+  }\n+};\n+\n+// TODO : dates and times?\n+// TODO : binary / fixed size binary?\n+\n+// ------------------------------------------------------------------------\n+// Converter for null arrays\n+\n+class NullConverter : public ConcreteConverter<NullConverter> {\n+ public:\n+  explicit NullConverter(const std::shared_ptr<DataType>& type) {\n+    type_ = type;\n+    builder_ = std::make_shared<NullBuilder>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    return JSONTypeError(\"null\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<NullBuilder> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for boolean arrays\n+\n+class BooleanConverter : public ConcreteConverter<BooleanConverter> {\n+ public:\n+  explicit BooleanConverter(const std::shared_ptr<DataType>& type) {\n+    type_ = type;\n+    builder_ = std::make_shared<BooleanBuilder>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsBool()) {\n+      return builder_->Append(json_obj.GetBool());\n+    }\n+    return JSONTypeError(\"boolean\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<BooleanBuilder> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for int arrays\n+\n+template <typename Type>\n+class IntegerConverter : public ConcreteConverter<IntegerConverter<Type>> {\n+  using c_type = typename Type::c_type;\n+  static constexpr auto is_signed = std::is_signed<c_type>::value;\n+\n+ public:\n+  explicit IntegerConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    builder_ = std::make_shared<NumericBuilder<Type>>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    return AppendNumber(json_obj);\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  // Append signed integer value\n+  template <typename Integer = c_type>\n+  typename std::enable_if<std::is_signed<Integer>::value, Status>::type AppendNumber(\n+      const rj::Value& json_obj) {\n+    if (json_obj.IsInt64()) {\n+      int64_t v64 = json_obj.GetInt64();\n+      c_type v = static_cast<c_type>(v64);\n+      if (v == v64) {\n+        return builder_->Append(v);\n+      } else {\n+        std::stringstream ss;\n+        ss << \"Value \" << v64 << \" out of bounds for \" << this->type_->ToString();\n+        return Status::Invalid(ss.str());\n+      }\n+    } else {\n+      return JSONTypeError(\"signed int\", json_obj.GetType());\n+    }\n+  }\n+\n+  // Append unsigned integer value\n+  template <typename Integer = c_type>\n+  typename std::enable_if<std::is_unsigned<Integer>::value, Status>::type AppendNumber(\n+      const rj::Value& json_obj) {\n+    if (json_obj.IsUint64()) {\n+      uint64_t v64 = json_obj.GetUint64();\n+      c_type v = static_cast<c_type>(v64);\n+      if (v == v64) {\n+        return builder_->Append(v);\n+      } else {\n+        std::stringstream ss;\n+        ss << \"Value \" << v64 << \" out of bounds for \" << this->type_->ToString();\n+        return Status::Invalid(ss.str());\n+      }\n+      return builder_->Append(v);\n+    } else {\n+      return JSONTypeError(\"unsigned int\", json_obj.GetType());\n+    }\n+  }\n+\n+  std::shared_ptr<NumericBuilder<Type>> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for float arrays\n+\n+template <typename Type>\n+class FloatConverter : public ConcreteConverter<FloatConverter<Type>> {\n+  using c_type = typename Type::c_type;\n+\n+ public:\n+  explicit FloatConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    builder_ = std::make_shared<NumericBuilder<Type>>();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsNumber()) {\n+      c_type v = static_cast<c_type>(json_obj.GetDouble());\n+      return builder_->Append(v);\n+    } else {\n+      return JSONTypeError(\"number\", json_obj.GetType());\n+    }\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<NumericBuilder<Type>> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for decimal arrays\n+\n+class DecimalConverter : public ConcreteConverter<DecimalConverter> {\n+ public:\n+  explicit DecimalConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    decimal_type_ = checked_cast<Decimal128Type*>(type.get());\n+    builder_ = std::make_shared<DecimalBuilder>(type);\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsString()) {\n+      int32_t precision, scale;\n+      Decimal128 d;\n+      auto view = util::string_view(json_obj.GetString(), json_obj.GetStringLength());\n+      RETURN_NOT_OK(Decimal128::FromString(view, &d, &precision, &scale));\n+      if (scale != decimal_type_->scale()) {\n+        std::stringstream ss;\n+        ss << \"Invalid scale for decimal: expected \" << decimal_type_->scale() << \", got \"\n+           << scale;\n+        return Status::Invalid(ss.str());\n+      }\n+      return builder_->Append(d);\n+    }\n+    return JSONTypeError(\"decimal string\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<DecimalBuilder> builder_;\n+  Decimal128Type* decimal_type_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for string arrays\n+\n+class StringConverter : public ConcreteConverter<StringConverter> {\n+ public:\n+  explicit StringConverter(const std::shared_ptr<DataType>& type) {\n+    this->type_ = type;\n+    builder_ = std::make_shared<BinaryBuilder>(type, default_memory_pool());\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    if (json_obj.IsString()) {\n+      auto view = util::string_view(json_obj.GetString(), json_obj.GetStringLength());\n+      return builder_->Append(view);\n+    } else {\n+      return JSONTypeError(\"string\", json_obj.GetType());\n+    }\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<BinaryBuilder> builder_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for list arrays\n+\n+class ListConverter : public ConcreteConverter<ListConverter> {\n+ public:\n+  explicit ListConverter(const std::shared_ptr<DataType>& type) { type_ = type; }\n+\n+  Status Init() override {\n+    const auto& list_type = checked_cast<const ListType&>(*type_);\n+    RETURN_NOT_OK(GetConverter(list_type.value_type(), &child_converter_));\n+    auto child_builder = child_converter_->builder();\n+    builder_ = std::make_shared<ListBuilder>(default_memory_pool(), child_builder, type_);\n+    return Status::OK();\n+  }\n+\n+  Status AppendNull() override { return builder_->AppendNull(); }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return builder_->AppendNull();\n+    }\n+    RETURN_NOT_OK(builder_->Append());\n+    // Extend the child converter with this JSON array\n+    return child_converter_->AppendValues(json_obj);\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<ListBuilder> builder_;\n+  std::shared_ptr<Converter> child_converter_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// Converter for struct arrays\n+\n+class StructConverter : public ConcreteConverter<StructConverter> {\n+ public:\n+  explicit StructConverter(const std::shared_ptr<DataType>& type) { type_ = type; }\n+\n+  Status Init() override {\n+    std::vector<std::shared_ptr<ArrayBuilder>> child_builders;\n+    for (const auto& field : type_->children()) {\n+      std::shared_ptr<Converter> child_converter;\n+      RETURN_NOT_OK(GetConverter(field->type(), &child_converter));\n+      child_converters_.push_back(child_converter);\n+      child_builders.push_back(child_converter->builder());\n+    }\n+    builder_ = std::make_shared<StructBuilder>(type_, default_memory_pool(),\n+                                               std::move(child_builders));\n+    return Status::OK();\n+  }\n+\n+  Status AppendNull() override {\n+    for (auto& converter : child_converters_) {\n+      RETURN_NOT_OK(converter->AppendNull());\n+    }\n+    return builder_->AppendNull();\n+  }\n+\n+  Status AppendValue(const rj::Value& json_obj) override {\n+    if (json_obj.IsNull()) {\n+      return AppendNull();\n+    }\n+    if (json_obj.IsArray()) {\n+      auto size = json_obj.Size();\n+      auto expected_size = static_cast<uint32_t>(type_->num_children());\n+      if (size != expected_size) {\n+        std::stringstream ss;\n+        ss << \"Expected array of size \" << expected_size << \", got array of size \"\n+           << size;\n+        return Status::Invalid(ss.str());\n+      }\n+      for (uint32_t i = 0; i < size; ++i) {\n+        RETURN_NOT_OK(child_converters_[i]->AppendValue(json_obj[i]));\n+      }\n+      return builder_->Append();\n+    }\n+    return JSONTypeError(\"array\", json_obj.GetType());\n+  }\n+\n+  std::shared_ptr<ArrayBuilder> builder() override { return builder_; }\n+\n+ protected:\n+  std::shared_ptr<StructBuilder> builder_;\n+  std::vector<std::shared_ptr<Converter>> child_converters_;\n+};\n+\n+// ------------------------------------------------------------------------\n+// General conversion functions\n+\n+Status GetConverter(const std::shared_ptr<DataType>& type,\n+                    std::shared_ptr<Converter>* out) {\n+  std::shared_ptr<Converter> res;\n+\n+#define SIMPLE_CONVERTER_CASE(ID, CLASS) \\\n+  case ID:                               \\\n+    res = std::make_shared<CLASS>(type); \\\n+    break;\n+\n+  switch (type->id()) {\n+    SIMPLE_CONVERTER_CASE(Type::INT8, IntegerConverter<Int8Type>)\n+    SIMPLE_CONVERTER_CASE(Type::INT16, IntegerConverter<Int16Type>)\n+    SIMPLE_CONVERTER_CASE(Type::INT32, IntegerConverter<Int32Type>)\n+    SIMPLE_CONVERTER_CASE(Type::INT64, IntegerConverter<Int64Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT8, IntegerConverter<UInt8Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT16, IntegerConverter<UInt16Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT32, IntegerConverter<UInt32Type>)\n+    SIMPLE_CONVERTER_CASE(Type::UINT64, IntegerConverter<UInt64Type>)\n+    SIMPLE_CONVERTER_CASE(Type::NA, NullConverter)\n+    SIMPLE_CONVERTER_CASE(Type::BOOL, BooleanConverter)\n+    SIMPLE_CONVERTER_CASE(Type::FLOAT, FloatConverter<FloatType>)\n+    SIMPLE_CONVERTER_CASE(Type::DOUBLE, FloatConverter<DoubleType>)\n+    SIMPLE_CONVERTER_CASE(Type::LIST, ListConverter)\n+    SIMPLE_CONVERTER_CASE(Type::STRUCT, StructConverter)\n+    SIMPLE_CONVERTER_CASE(Type::STRING, StringConverter)\n+    SIMPLE_CONVERTER_CASE(Type::DECIMAL, DecimalConverter)\n+    default: {\n+      std::stringstream ss;\n+      ss << \"JSON conversion to \" << type->ToString() << \" not implemented\";\n+      return Status::NotImplemented(ss.str());\n+    }\n+  }\n+\n+#undef SIMPLE_CONVERTER_CASE\n+\n+  RETURN_NOT_OK(res->Init());\n+  *out = res;\n+  return Status::OK();\n+}\n+\n+Status ArrayFromJSON(const std::shared_ptr<DataType>& type,\n+                     const util::string_view& json_string, std::shared_ptr<Array>* out) {\n+  std::shared_ptr<Converter> converter;\n+  RETURN_NOT_OK(GetConverter(type, &converter));\n+\n+  rj::Document json_doc;\n+  json_doc.Parse<kParseFlags>(json_string.data(), json_string.length());\n+  if (json_doc.HasParseError()) {\n+    std::stringstream ss;\n+    ss << \"JSON parse error at offset \" << json_doc.GetErrorOffset() << \": \"\n+       << GetParseError_En(json_doc.GetParseError());\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  // The JSON document should be an array, append it\n+  RETURN_NOT_OK(converter->AppendValues(json_doc));\n+  return converter->Finish(out);\n+}\n+\n+Status ArrayFromJSON(const std::shared_ptr<DataType>& type,\n+                     const std::string& json_string, std::shared_ptr<Array>* out) {\n+  return ArrayFromJSON(type, util::string_view(json_string), out);\n+}\n+\n+Status ArrayFromJSON(const std::shared_ptr<DataType>& type, const char* json_string,\n+                     std::shared_ptr<Array>* out) {\n+  return ArrayFromJSON(type, std::string(json_string), out);\n \n Review comment:\n   Hmm... good point, casting to `string_view` should work.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T09:53:00.099+0000",
                    "updated": "2018-12-05T09:53:00.099+0000",
                    "started": "2018-12-05T09:53:00.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172208",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#issuecomment-444442318\n \n \n   @fsaintjacques  I've addressed your comments now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T10:48:06.560+0000",
                    "updated": "2018-12-05T10:48:06.560+0000",
                    "started": "2018-12-05T10:48:06.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172224",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r239016044\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -134,6 +134,7 @@ if (NOT ARROW_BOOST_HEADER_ONLY)\n   )\n endif()\n \n+# XXX Always build JSON if required for testing?\n \n Review comment:\n   @wesm What do you think about the requirement to build IPC for testing?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T10:48:34.853+0000",
                    "updated": "2018-12-05T10:48:34.853+0000",
                    "started": "2018-12-05T10:48:34.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172225",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#issuecomment-444127256\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=h1) Report\n   > Merging [#3084](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/2f4af266baca7e35497a0323cfb612a9549f725a?src=pr&el=desc) will **increase** coverage by `1.19%`.\n   > The diff coverage is `99%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3084/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3084      +/-   ##\n   ==========================================\n   + Coverage   87.04%   88.23%   +1.19%     \n   ==========================================\n     Files         492      436      -56     \n     Lines       69104    65786    -3318     \n   ==========================================\n   - Hits        60153    58049    -2104     \n   + Misses       8850     7737    -1113     \n   + Partials      101        0     -101\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/decimal.h](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuaA==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/pretty\\_print-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQtdGVzdC5jYw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/decimal.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuY2M=) | `88.07% <100%> (+0.1%)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/ipc-json-simple-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvaXBjLWpzb24tc2ltcGxlLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/test-util.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuY2M=) | `61.63% <100%> (+2.14%)` | :arrow_up: |\n   | [cpp/src/arrow/array-dict-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS1kaWN0LXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `98.09% <100%> (+0.03%)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/json-simple.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1zaW1wbGUuY2M=) | `96.75% <96.75%> (\u00f8)` | |\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `72.03% <0%> (-0.95%)` | :arrow_down: |\n   | ... and [63 more](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=footer). Last update [2f4af26...59c4c28](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T11:35:36.722+0000",
                    "updated": "2018-12-05T11:35:36.722+0000",
                    "started": "2018-12-05T11:35:36.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172242",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r239077246\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -134,6 +134,7 @@ if (NOT ARROW_BOOST_HEADER_ONLY)\n   )\n endif()\n \n+# XXX Always build JSON if required for testing?\n \n Review comment:\n   That's fine with me. RapidJSON isn't a heavy dependency\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T14:06:44.480+0000",
                    "updated": "2018-12-05T14:06:44.480+0000",
                    "started": "2018-12-05T14:06:44.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172290",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/172328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#issuecomment-444127256\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=h1) Report\n   > Merging [#3084](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/0afb975fb55aeb04bc1034678fd3dca33b7c7c0e?src=pr&el=desc) will **increase** coverage by `1.19%`.\n   > The diff coverage is `99%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3084/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3084      +/-   ##\n   ==========================================\n   + Coverage   87.04%   88.23%   +1.19%     \n   ==========================================\n     Files         492      436      -56     \n     Lines       69104    65786    -3318     \n   ==========================================\n   - Hits        60154    58049    -2105     \n   + Misses       8849     7737    -1112     \n   + Partials      101        0     -101\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/decimal.h](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuaA==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/pretty\\_print-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQtdGVzdC5jYw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/decimal.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2RlY2ltYWwuY2M=) | `88.07% <100%> (+0.1%)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/ipc-json-simple-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvaXBjLWpzb24tc2ltcGxlLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/test-util.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuY2M=) | `61.63% <100%> (+2.14%)` | :arrow_up: |\n   | [cpp/src/arrow/array-dict-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS1kaWN0LXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `98.09% <100%> (+0.03%)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/json-simple.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1zaW1wbGUuY2M=) | `96.75% <96.75%> (\u00f8)` | |\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `72.03% <0%> (-0.95%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `98.91% <0%> (-0.55%)` | :arrow_down: |\n   | ... and [64 more](https://codecov.io/gh/apache/arrow/pull/3084/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=footer). Last update [0afb975...1b9f4b5](https://codecov.io/gh/apache/arrow/pull/3084?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T15:41:08.651+0000",
                    "updated": "2018-12-05T15:41:08.651+0000",
                    "started": "2018-12-05T15:41:08.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172328",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/173289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r240048936\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/CMakeLists.txt\n ##########\n @@ -85,6 +86,7 @@ install(FILES\n   dictionary.h\n   feather.h\n   json.h\n \n Review comment:\n   We may want to rename this `json.h` to make it clear that the format is for integration testing, but not much else\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T19:26:37.682+0000",
                    "updated": "2018-12-09T19:26:37.682+0000",
                    "started": "2018-12-09T19:26:37.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173289",
                    "issueId": "13186903"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/worklog/173290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3084: ARROW-3303: [C++] API for creating arrays from simple JSON string\nURL: https://github.com/apache/arrow/pull/3084#discussion_r240049157\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -0,0 +1,508 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <sstream>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/ipc/json-internal.h\"\n+#include \"arrow/ipc/json-simple.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/decimal.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/string_view.h\"\n+\n+namespace arrow {\n+namespace ipc {\n+namespace internal {\n+namespace json {\n+\n+using ::arrow::internal::checked_cast;\n+\n+static constexpr auto kParseFlags = rj::kParseFullPrecisionFlag | rj::kParseNanAndInfFlag;\n+\n+static Status JSONTypeError(const char* expected_type, rj::Type json_type) {\n+  std::stringstream ss;\n+  ss << \"Expected \" << expected_type << \" or null, got type \" << json_type;\n+  return Status::Invalid(ss.str());\n+}\n+\n+class Converter {\n+ public:\n+  virtual ~Converter() = default;\n+\n+  virtual Status Init() { return Status::OK(); }\n+\n+  virtual Status AppendValue(const rj::Value& json_obj) = 0;\n+\n+  virtual Status AppendNull() = 0;\n+\n+  virtual Status AppendValues(const rj::Value& json_array) = 0;\n+\n+  virtual std::shared_ptr<ArrayBuilder> builder() = 0;\n+\n+  virtual Status Finish(std::shared_ptr<Array>* out) {\n+    auto builder = this->builder();\n+    if (builder->length() == 0) {\n+      // Make sure the builder was initialized\n+      RETURN_NOT_OK(builder->Resize(1));\n+    }\n+    return builder->Finish(out);\n+  }\n+\n+ protected:\n+  std::shared_ptr<DataType> type_;\n+};\n+\n+Status GetConverter(const std::shared_ptr<DataType>&, std::shared_ptr<Converter>* out);\n+\n+// CRTP\n+template <class Derived>\n+class ConcreteConverter : public Converter {\n+ public:\n+  Status AppendValues(const rj::Value& json_array) override {\n+    auto self = static_cast<Derived*>(this);\n+    if (!json_array.IsArray()) {\n+      return JSONTypeError(\"array\", json_array.GetType());\n+    }\n+    auto size = json_array.Size();\n+    for (uint32_t i = 0; i < size; ++i) {\n+      RETURN_NOT_OK(self->AppendValue(json_array[i]));\n \n Review comment:\n   General question here -- with CRTP generally the method invoked is not virtual so there is no possibility of a non-inline call. I don't know whether the compiler will inline the implementation here or invoke the virtual. I recently changed this in python_to_arrow.cc so that there is `AppendSingle` (inline) and `AppendSingleVirtual` \r\n   \r\n   https://github.com/apache/arrow/blob/master/cpp/src/arrow/python/python_to_arrow.cc#L78\r\n   \r\n   cc @fsaintjacques @xhochy @bkietz @cpcloud in case you know the answer\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T19:26:37.708+0000",
                    "updated": "2018-12-09T19:26:37.708+0000",
                    "started": "2018-12-09T19:26:37.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173290",
                    "issueId": "13186903"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@38af101f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d225911[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bf253fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@14777743[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fa1d221[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@58f09e67[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31f4433f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1e16e72d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fa70e14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4378b821[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5006e6ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@79805c68[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Dec 09 19:28:41 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-09T19:28:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3303/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-09-23T19:37:22.000+0000",
        "updated": "2018-12-10T11:38:59.000+0000",
        "timeoriginalestimate": null,
        "description": "In addition to making it easier to generate random data as described in ARROW-2329, I think it would be useful to reduce some of the boilerplate associated with writing down explicit test cases. The benefits of this will be especially pronounced when writing nested arrays. \r\n\r\nExample code that could be improved this way:\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/array-test.cc#L3271\r\n\r\nRather than having a ton of hand-written assertions, we could compare with the expected true dataset. Of course, this itself has to be tested endogenously, but I think we can write enough tests for the JSON parser bit to be able to have confidence in tests that are written with it",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Enable example arrays to be written with a simplified JSON representation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/comment/16701921",
                    "id": "16701921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Do you have an idea what the JSON could look like?\r\n\r\nLet's try to sketch examples. Simple int32 array:\r\n{code:json}\r\n{\r\n\"type\": \"int32\",\r\n\"values\": [4,5,-1,0]\r\n}\r\n{code}\r\n\r\nWith nulls:\r\n{code:json}\r\n{\r\n\"type\": \"int32\",\r\n\"values\": [0,null,-111,234]\r\n}\r\n{code}\r\n\r\nA second-granularity timestamp array:\r\n{code:json}\r\n{\r\n\"type\": \"timestamp[s]\",\r\n\"values\": [1543409509]\r\n}\r\n{code}\r\n\r\nA list(float64) array with nulls:\r\n{code:json}\r\n{\r\n\"type\": \"list(float64)\",\r\n\"values\": [null, [1.5, 2.5, 3.0], [null, 34.5]]\r\n}\r\n{code}\r\n\r\nSo the API would look like:\r\n{code:c++}\r\nStatus ArrayFromJSON(const std::string& json_string, std::shared_ptr<Array>* out);\r\n{code}\r\n\r\nAnother possibility would be to pass the type programmatically:\r\n{code:c++}\r\nStatus ArrayFromJSON(const DataType*, const std::string& json_string, std::shared_ptr<Array>* out);\r\n{code}\r\n\r\nIn this case the JSON string would be much simpler, e.g.:\r\n{code:json}\r\n[0,null,-111,234]\r\n{code}\r\n\r\nSo you could have a one-liner or almost:\r\n{code:c++}\r\nASSERT_OK(ArrayFromJSON(int64(), \"[0,null,-111,234]\", &array1));\r\nASSERT_OK(ArrayFromJSON(list(int64()), \"[null, [1,2,3], [4, null, 6]]\", &array2));\r\n{code}\r\n\r\nActually both APIs could be useful, depending on the situation...\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-28T14:03:44.389+0000",
                    "updated": "2018-11-28T14:03:44.389+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/comment/16703367",
                    "id": "16703367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Probably the last one would be the simplest that would be of value, then you don't have to implement a parser for data types (though at some point, it would be useful to have a string syntax for writing schemas and getting them parsed). In the arrow_testing library we could additionally add some sugar (which uses gtest APIs internally) so that we can write\r\n\r\n{code}\r\nauto arr = test::Int64::FromJSON(\"[0, null, 1, 2]\");\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-29T15:35:02.587+0000",
                    "updated": "2018-11-29T15:35:02.587+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186903/comment/16714070",
                    "id": "16714070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3084\n[https://github.com/apache/arrow/pull/3084]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-09T19:28:41.277+0000",
                    "updated": "2018-12-09T19:28:41.277+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yeev:",
        "customfield_12314139": null
    }
}