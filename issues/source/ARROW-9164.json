{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13312053",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053",
    "key": "ARROW-9164",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12598168",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12598168",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13316704",
                    "key": "ARROW-9465",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316704",
                    "fields": {
                        "summary": "[Python] Improve ergonomics of compute functions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
                            "id": "5",
                            "description": "General wishlist item.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Wish",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9164/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/500185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457\n\n\n   Also re-use the embedded documentations in Python to generate nicer signatures and docstrings.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T17:14:12.844+0000",
                    "updated": "2020-10-13T17:14:12.844+0000",
                    "started": "2020-10-13T17:14:12.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500185",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/500188",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#issuecomment-707891501\n\n\n   https://issues.apache.org/jira/browse/ARROW-9164\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T17:20:28.008+0000",
                    "updated": "2020-10-13T17:20:28.008+0000",
                    "started": "2020-10-13T17:20:28.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500188",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/500846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r504966687\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+\n+def _wrap_function(name, func):\n+    option_class = _get_options_class(func)\n+    arg_names = _get_arg_names(func)\n+    args_sig = ', '.join(arg_names)\n+\n+    # Generate templated wrapper, so that the signature matches\n+    # the documented argument names.\n+    ns = {}\n     if option_class is not None:\n-        def wrapper(left, right, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([left, right], options, memory_pool)\n+        template = _wrapper_options_template\n     else:\n-        def wrapper(left, right, *, memory_pool=None):\n-            return func.call([left, right], None, memory_pool)\n+        template = _wrapper_template\n+    exec(template.format(func_name=name, args_sig=args_sig), globals(), ns)\n\nReview comment:\n       Wouldn't it be better to set the `__signature__` property instead? \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T20:55:38.682+0000",
                    "updated": "2020-10-14T20:55:38.682+0000",
                    "started": "2020-10-14T20:55:38.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500846",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/500847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r504891193\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -47,34 +47,60 @@\n import pyarrow as pa\n \n \n+def _get_arg_names(func):\n+    arg_names = func._doc.arg_names\n+    if not arg_names:\n+        if func.arity == 1:\n+            arg_names = [\"arg\"]\n+        elif func.arity == 2:\n+            arg_names = [\"left\", \"right\"]\n+        else:\n+            raise NotImplementedError(\n+                \"unsupported arity: {}\".format(func.arity))\n\nReview comment:\n       I think it'd probably be better to keep this as simple as possible:\r\n   ```suggestion\r\n       if not arg_names:\r\n           arg_names = [\"arg{}\".format(i) for i in range(func.arity)]\r\n   ```\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -93,20 +119,10 @@ def _decorate_compute_function(wrapper, exposed_name, func, option_class):\n     return wrapper\n \n \n-_option_classes = {\n-    # TODO: export the option class name from C++ metadata?\n-    'cast': CastOptions,\n-    'filter': FilterOptions,\n-    'index_in': SetLookupOptions,\n-    'is_in': SetLookupOptions,\n-    'match_substring': MatchSubstringOptions,\n-    'min_max': MinMaxOptions,\n-    'partition_nth_indices': PartitionNthOptions,\n-    'stddev': VarianceOptions,\n-    'strptime': StrptimeOptions,\n-    'take': TakeOptions,\n-    'variance': VarianceOptions,\n-}\n+def _get_options_class(func):\n+    class_name = func._doc.options_class\n+    # XXX should we raise if the class isn't exposed in Python?\n+    return globals().get(class_name) if class_name else None\n\nReview comment:\n       I think we should definitely raise\r\n   ```suggestion\r\n       klass =  globals().get(func._doc.options_class, None)\r\n       if klass is not None:\r\n           return klass\r\n       raise NotImplemented(\"Accessing options for {} from python\".format(func))\r\n   ```\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n\nReview comment:\n       I guess there isn't a way to accomplish this without `exec()` but these wrappers seem brittle in the extreme. Could we minimize the exec'd code by setting `__wrapped__ = eval('lambda {}: None'.format(args_sig))` to get the arguments right, then set `__name__`, `__qualname__` etc directly?\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+\n+def _wrap_function(name, func):\n+    option_class = _get_options_class(func)\n+    arg_names = _get_arg_names(func)\n+    args_sig = ', '.join(arg_names)\n+\n\nReview comment:\n       ```suggestion\r\n           if option_class is None:\r\n               def wrapper(*args, *, memory_pool=None):\r\n                   return func.call(args, None, memory_pool)\r\n               wrapped_template = 'lambda {}, *, memory_pool=None: ()'\r\n           else:\r\n               def wrapper(*args, *, options=None, memory_pool=None, **kwargs):\r\n                   options = _handle_options(name, option_class, options, kwargs)\r\n                   return func.call(args, options, memory_pool)\r\n               wrapped_template = 'lambda {}, *, options=None, memory_pool=None, **kwargs: ()'\r\n   \r\n           wrapper.__name__ = name\r\n           wrapper.__qualname__ = name\r\n           wrapper.__wrapped__ = eval(wrapped_template.format(args_sig))\r\n   ```\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -47,34 +47,60 @@\n import pyarrow as pa\n \n \n+def _get_arg_names(func):\n+    arg_names = func._doc.arg_names\n+    if not arg_names:\n+        if func.arity == 1:\n+            arg_names = [\"arg\"]\n+        elif func.arity == 2:\n+            arg_names = [\"left\", \"right\"]\n+        else:\n+            raise NotImplementedError(\n+                \"unsupported arity: {}\".format(func.arity))\n+\n+    return arg_names\n+\n+\n def _decorate_compute_function(wrapper, exposed_name, func, option_class):\n     wrapper.__arrow_compute_function__ = dict(name=func.name,\n                                               arity=func.arity)\n     wrapper.__name__ = exposed_name\n     wrapper.__qualname__ = exposed_name\n \n-    # TODO (ARROW-9164): expose actual docstring from C++\n     doc_pieces = []\n-    arg_str = \"arguments\" if func.arity > 1 else \"argument\"\n+\n+    cpp_doc = func._doc\n+    summary = cpp_doc.summary\n+    if not summary:\n+        arg_str = \"arguments\" if func.arity > 1 else \"argument\"\n+        summary = (\"Call compute function {!r} with the given {}\"\n+                   .format(func.name, arg_str))\n+\n+    description = cpp_doc.description\n+    arg_names = _get_arg_names(func)\n+\n     doc_pieces.append(\"\"\"\\\n-        Call compute function {!r} with the given {}.\n+        {}.\n+\n+        \"\"\".format(summary))\n \n+    if description:\n+        doc_pieces.append(\"{}\\n\\n\".format(description))\n+\n+    doc_pieces.append(\"\"\"\\\n         Parameters\n         ----------\n-        \"\"\".format(func.name, arg_str))\n+        \"\"\")\n \n-    if func.arity == 1:\n+    for arg_name in arg_names:\n+        if func.kind in ('vector', 'scalar_aggregate'):\n+            arg_type = 'Array-like'\n+        else:\n+            arg_type = 'Array-like or scalar-like'\n\nReview comment:\n       I suppose at some point we'll want to expose `KernelSignature` or otherwise examine what inputs the kernels actually accept in order to generate this more rigorously\n\n##########\nFile path: cpp/src/arrow/compute/function.h\n##########\n@@ -137,19 +169,23 @@ class ARROW_EXPORT Function {\n   /// that default_options() is valid to pass to Execute as options.\n   const FunctionOptions* default_options() const { return default_options_; }\n \n+  virtual Status Validate() const;\n+\n  protected:\n-  Function(std::string name, Function::Kind kind, const Arity& arity,\n+  Function(std::string name, Function::Kind kind, const Arity& arity, FunctionDoc doc,\n            const FunctionOptions* default_options)\n       : name_(std::move(name)),\n         kind_(kind),\n         arity_(arity),\n+        doc_(std::move(doc)),\n         default_options_(default_options) {}\n \n   Status CheckArity(int passed_num_args) const;\n \n   std::string name_;\n   Function::Kind kind_;\n   Arity arity_;\n+  FunctionDoc doc_;\n   const FunctionOptions* default_options_ = NULLPTR;\n\nReview comment:\n       Since all `FunctionDoc` instances are statically allocated, we could just refer to them with non-owning pointers:\r\n   ```suggestion\r\n     Function(std::string name, Function::Kind kind, const Arity& arity,\r\n              const FunctionOptions* default_options,\r\n              const FunctionDoc* doc = FunctionDoc::empty())\r\n         : name_(std::move(name)),\r\n           kind_(kind),\r\n           arity_(arity),\r\n           default_options_(default_options),\r\n           doc_(doc) {}\r\n   \r\n     Status CheckArity(int passed_num_args) const;\r\n   \r\n     std::string name_;\r\n     Function::Kind kind_;\r\n     Arity arity_;\r\n     const FunctionOptions* default_options_ = NULLPTR;\r\n     const FunctionDoc* doc_;\r\n   ```\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n\nReview comment:\n       Maybe we could set the `__signature__` property?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T20:57:35.216+0000",
                    "updated": "2020-10-14T20:57:35.216+0000",
                    "started": "2020-10-14T20:57:35.216+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500847",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505564859\n\n\n\n##########\nFile path: cpp/src/arrow/compute/function.h\n##########\n@@ -137,19 +169,23 @@ class ARROW_EXPORT Function {\n   /// that default_options() is valid to pass to Execute as options.\n   const FunctionOptions* default_options() const { return default_options_; }\n \n+  virtual Status Validate() const;\n+\n  protected:\n-  Function(std::string name, Function::Kind kind, const Arity& arity,\n+  Function(std::string name, Function::Kind kind, const Arity& arity, FunctionDoc doc,\n            const FunctionOptions* default_options)\n       : name_(std::move(name)),\n         kind_(kind),\n         arity_(arity),\n+        doc_(std::move(doc)),\n         default_options_(default_options) {}\n \n   Status CheckArity(int passed_num_args) const;\n \n   std::string name_;\n   Function::Kind kind_;\n   Arity arity_;\n+  FunctionDoc doc_;\n   const FunctionOptions* default_options_ = NULLPTR;\n\nReview comment:\n       Why not, do you think there's any chance of them being dynamically generated?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T13:58:29.710+0000",
                    "updated": "2020-10-15T13:58:29.710+0000",
                    "started": "2020-10-15T13:58:29.709+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501103",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505565340\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -47,34 +47,60 @@\n import pyarrow as pa\n \n \n+def _get_arg_names(func):\n+    arg_names = func._doc.arg_names\n+    if not arg_names:\n+        if func.arity == 1:\n+            arg_names = [\"arg\"]\n+        elif func.arity == 2:\n+            arg_names = [\"left\", \"right\"]\n+        else:\n+            raise NotImplementedError(\n+                \"unsupported arity: {}\".format(func.arity))\n+\n+    return arg_names\n+\n+\n def _decorate_compute_function(wrapper, exposed_name, func, option_class):\n     wrapper.__arrow_compute_function__ = dict(name=func.name,\n                                               arity=func.arity)\n     wrapper.__name__ = exposed_name\n     wrapper.__qualname__ = exposed_name\n \n-    # TODO (ARROW-9164): expose actual docstring from C++\n     doc_pieces = []\n-    arg_str = \"arguments\" if func.arity > 1 else \"argument\"\n+\n+    cpp_doc = func._doc\n+    summary = cpp_doc.summary\n+    if not summary:\n+        arg_str = \"arguments\" if func.arity > 1 else \"argument\"\n+        summary = (\"Call compute function {!r} with the given {}\"\n+                   .format(func.name, arg_str))\n+\n+    description = cpp_doc.description\n+    arg_names = _get_arg_names(func)\n+\n     doc_pieces.append(\"\"\"\\\n-        Call compute function {!r} with the given {}.\n+        {}.\n+\n+        \"\"\".format(summary))\n \n+    if description:\n+        doc_pieces.append(\"{}\\n\\n\".format(description))\n+\n+    doc_pieces.append(\"\"\"\\\n         Parameters\n         ----------\n-        \"\"\".format(func.name, arg_str))\n+        \"\"\")\n \n-    if func.arity == 1:\n+    for arg_name in arg_names:\n+        if func.kind in ('vector', 'scalar_aggregate'):\n+            arg_type = 'Array-like'\n+        else:\n+            arg_type = 'Array-like or scalar-like'\n\nReview comment:\n       Perhaps, yes.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T13:59:03.687+0000",
                    "updated": "2020-10-15T13:59:03.687+0000",
                    "started": "2020-10-15T13:59:03.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501104",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501105",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505566689\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n\nReview comment:\n       We can use `__signature__`, which should work for documentation but some error messages will be less nice when the wrong number of arguments is given (because the interpreter doesn't inspect `__signature__` when functions are called).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T14:00:39.197+0000",
                    "updated": "2020-10-15T14:00:39.197+0000",
                    "started": "2020-10-15T14:00:39.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501105",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505568854\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -47,34 +47,60 @@\n import pyarrow as pa\n \n \n+def _get_arg_names(func):\n+    arg_names = func._doc.arg_names\n+    if not arg_names:\n+        if func.arity == 1:\n+            arg_names = [\"arg\"]\n+        elif func.arity == 2:\n+            arg_names = [\"left\", \"right\"]\n+        else:\n+            raise NotImplementedError(\n+                \"unsupported arity: {}\".format(func.arity))\n\nReview comment:\n       Since this is only a fallback for functions which don't defined a documentation, I agree.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T14:03:17.860+0000",
                    "updated": "2020-10-15T14:03:17.860+0000",
                    "started": "2020-10-15T14:03:17.860+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501106",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505527509\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_var_std.cc\n##########\n@@ -180,20 +180,38 @@ void AddVarStdKernels(KernelInit init,\n   }\n }\n \n+FunctionDoc stddev_doc{\n+    \"Calculate the standard deviation of a numeric array\",\n+    (\"The number of degrees of freedom can be controlled using VarianceOptions.\\n\"\n+     \"By default (`ddof` = 0), the population standard deviation is calculated.\\n\"\n+     \"Nulls are ignored.  If there are not enough non-null values in the array\\n\"\n+     \"to satisfy `ddof`, an error is returned.\"),\n\nReview comment:\n       At least on the Python side, it seems that null is returned instead of an error?\r\n   \r\n   ```\r\n   In [19]: pc.stddev(pa.array([], pa.float64()))\r\n   Out[19]: <pyarrow.DoubleScalar: None>\r\n   ```\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -277,29 +278,80 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunction(std::string name) {\n // Like MakeArithmeticFunction, but for arithmetic ops that need to run\n // only on non-null output.\n template <typename Op>\n-std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name) {\n-  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary());\n+std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n+                                                              FunctionDoc doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary(), std::move(doc));\n   for (const auto& ty : NumericTypes()) {\n     auto exec = NumericEqualTypesBinary<ScalarBinaryNotNullEqualTypes, Op>(ty);\n     DCHECK_OK(func->AddKernel({ty, ty}, ty, exec));\n   }\n   return func;\n }\n \n+FunctionDoc add_doc{\"Add the elements of two arrays\",\n\nReview comment:\n       Not necessarily two \"arrays\" .. Can also be scalar(s), etc. Now, not sure how to clearly rephrase this while still being concise but also not overly generic (like \"objects\"), so maybe keeping as arrays is fine. \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_boolean.cc\n##########\n@@ -171,21 +171,67 @@ void MakeFunction(std::string name, int arity, ArrayKernelExec exec,\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+FunctionDoc invert_doc{\"Invert boolean values\", \"\", {\"values\"}};\n+\n+FunctionDoc and_doc{\"Logical 'and' boolean values\",\n+                    (\"When a null is encountered is either input, a null is output.\\n\"\n+                     \"For a different null behavior, see function \\\"and_kleene\\\".\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc or_doc{\"Logical 'or' boolean values\",\n+                   (\"When a null is encountered is either input, a null is output.\\n\"\n+                    \"For a different null behavior, see function \\\"or_kleene\\\".\"),\n+                   {\"x\", \"y\"}};\n+\n+FunctionDoc xor_doc{\"Logical 'xor' boolean values\",\n+                    (\"When a null is encountered is either input, a null is output.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc and_kleene_doc{\n+    \"Logical 'and' boolean values (Kleene logic)\",\n+    (\"This function behaves as follows with nulls:\\n\\n\"\n+     \"- true and null = null\\n\"\n+     \"- null and true = null\\n\"\n+     \"- false and null = false\\n\"\n+     \"- null and false = false\\n\"\n+     \"- null and null = null\\n\"\n+     \"\\n\"\n+     \"In other words, in this context a null value really means \\\"unknown\\\",\\n\"\n+     \"and an unknown value 'and' false is always false.\\n\"\n+     \"For a different null behavior, see function \\\"and\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc or_kleene_doc{\n+    \"Logical 'or' boolean values (Kleene logic)\",\n+    (\"This function behaves as follows with nulls:\\n\\n\"\n+     \"- true or null = true\\n\"\n+     \"- null and true = true\\n\"\n+     \"- false and null = null\\n\"\n+     \"- null and false = null\\n\"\n+     \"- null and null = null\\n\"\n+     \"\\n\"\n+     \"In other words, in this context a null value really means \\\"unknown\\\",\\n\"\n+     \"and an unknown value 'or' true is always true.\\n\"\n+     \"For a different null behavior, see function \\\"and\\\".\"),\n\nReview comment:\n       ```suggestion\r\n        \"For a different null behavior, see function \\\"or\\\".\"),\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_nested.cc\n##########\n@@ -65,18 +65,33 @@ Result<ValueDescr> ValuesType(KernelContext*, const std::vector<ValueDescr>& arg\n   return ValueDescr::Array(list_type.value_type());\n }\n \n+FunctionDoc list_flatten_doc(\n+    \"Flatten list values\",\n+    (\"`lists` must have a list-like type.\\n\"\n+     \"Return an array with the top list level flattened.\\n\"\n+     \"Top-level null values in `lists` do not emit anything in the input.\"),\n+    {\"lists\"});\n+\n+FunctionDoc list_parent_indices_doc(\n+    \"Compute parent indices of nested list values\",\n+    (\"`lists` must have a list-like type.\\n\"\n+     \"For each value in each list of `lists`, the top-level list index\\n\"\n\nReview comment:\n       Not for this PR, but I think that for conceptually more complex functions (like this one, for me), it might be useful to include a small example. But that might get verbose to write in this form ..\r\n   \r\n   For example, for this case: `[[1, 2], [3, 4, 5], [6]]` returns `[0, 0, 1, 1, 1, 2]`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -302,19 +299,38 @@ void AddSortingKernels(VectorKernel base, VectorFunction* func) {\n   }\n }\n \n+FunctionDoc sort_indices_doc(\n+    \"Return the indices that would sort an array\",\n+    (\"Compute an array of indices that define a non-stable sort\\n\"\n+     \"of the input array.  Null values are considered greater than any\\n\"\n+     \"other value and are therefore sorted at the end of the array.\"),\n+    {\"array\"});\n+\n+FunctionDoc partition_nth_indices_doc(\n+    \"Return the indices that would partition an array around a pivot\",\n+    (\"Compute an array of indices that define a non-stable partition\\n\"\n+     \"around the `N`th smallest element of the input array.\\n\"\n\nReview comment:\n       I think what you wrote in the compute.rst guide is clearer:\r\n   \r\n   > * \\(1) The output is an array of indices into the input array, that define\r\n     a partial sort such that the *N*'th index points to the *N*'th element\r\n     in sorted order, and all indices before the *N*'th point to elements\r\n     less or equal to elements at or after the *N*'th (similar to\r\n     :func:`std::nth_element`).  *N* is given in\r\n     :member:`PartitionNthOptions::pivot`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -277,29 +278,80 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunction(std::string name) {\n // Like MakeArithmeticFunction, but for arithmetic ops that need to run\n // only on non-null output.\n template <typename Op>\n-std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name) {\n-  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary());\n+std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n+                                                              FunctionDoc doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary(), std::move(doc));\n   for (const auto& ty : NumericTypes()) {\n     auto exec = NumericEqualTypesBinary<ScalarBinaryNotNullEqualTypes, Op>(ty);\n     DCHECK_OK(func->AddKernel({ty, ty}, ty, exec));\n   }\n   return func;\n }\n \n+FunctionDoc add_doc{\"Add the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"add_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc add_checked_doc{\n+    \"Add the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"add\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_doc{\"Substract the elements of an array from another\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"subtract_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_checked_doc{\n+    \"Substract the elements of an array from another\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"subtract\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_doc{\"Multiply the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"multiply_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_checked_doc{\n+    \"Multiply the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"multiply\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc div_doc{\"Divide the elements of an array by another\",\n+                    (\"An error is returned when trying to divide by zero.\\n\"\n\nReview comment:\n       This seems the case when dividing integers:\r\n   \r\n   ```\r\n   In [29]: pc.divide([1, 2], 0)\r\n   ...\r\n   ArrowInvalid: divide by zero\r\n   ```\r\n   \r\n   but not when dividing floats:\r\n   \r\n   ```\r\n   In [28]: pc.divide([1., 2], 0.)\r\n   Out[28]: \r\n   <pyarrow.lib.DoubleArray object at 0x7fab75767588>\r\n   [\r\n     inf,\r\n     inf\r\n   ]\r\n   ```\r\n   \r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_boolean.cc\n##########\n@@ -171,21 +171,67 @@ void MakeFunction(std::string name, int arity, ArrayKernelExec exec,\n   DCHECK_OK(registry->AddFunction(std::move(func)));\n }\n \n+FunctionDoc invert_doc{\"Invert boolean values\", \"\", {\"values\"}};\n+\n+FunctionDoc and_doc{\"Logical 'and' boolean values\",\n+                    (\"When a null is encountered is either input, a null is output.\\n\"\n\nReview comment:\n       ```suggestion\r\n                       (\"When a null is encountered in either input, a null is output.\\n\"\r\n   ```\r\n   \r\n   and same for the 2 docstrings below\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -123,13 +123,21 @@ void IsNullExec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n   }\n }\n \n+FunctionDoc is_valid_doc(\n+    \"Return true if non-null\",\n+    (\"For each input value, emit true iff the value is valid (non-null).\"), {\"input\"});\n\nReview comment:\n       Regarding the argument name, for other unary functions above (where the input values were not of a specific type, like strings or lists), also \"values\" was used. Do we want to try to be somewhat consistent here? \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -277,29 +278,80 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunction(std::string name) {\n // Like MakeArithmeticFunction, but for arithmetic ops that need to run\n // only on non-null output.\n template <typename Op>\n-std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name) {\n-  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary());\n+std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n+                                                              FunctionDoc doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary(), std::move(doc));\n   for (const auto& ty : NumericTypes()) {\n     auto exec = NumericEqualTypesBinary<ScalarBinaryNotNullEqualTypes, Op>(ty);\n     DCHECK_OK(func->AddKernel({ty, ty}, ty, exec));\n   }\n   return func;\n }\n \n+FunctionDoc add_doc{\"Add the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"add_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc add_checked_doc{\n+    \"Add the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"add\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_doc{\"Substract the elements of an array from another\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"subtract_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_checked_doc{\n+    \"Substract the elements of an array from another\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"subtract\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_doc{\"Multiply the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"multiply_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_checked_doc{\n+    \"Multiply the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"multiply\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc div_doc{\"Divide the elements of an array by another\",\n+                    (\"An error is returned when trying to divide by zero.\\n\"\n+                     \"However, integer overflow will silently wrap around.\\n\"\n+                     \"Use function \\\"divide_checked\\\" if you want integer\\n\"\n+                     \"overflow to also return an error.\"),\n+                    {\"dividend\", \"divisor\"}};\n+\n+FunctionDoc div_checked_doc{\n+    \"Divide the elements of an array by another\",\n+    (\"An error is returned when trying to divide by zero, or when\\n\"\n+     \"integer overflow is encountered.\\n\"),\n\nReview comment:\n       ```suggestion\r\n        \"integer overflow is encountered.\"),\r\n   ```\r\n   \r\n   (the others don't end with a newline, and in python this results in two blank lines)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -302,19 +299,38 @@ void AddSortingKernels(VectorKernel base, VectorFunction* func) {\n   }\n }\n \n+FunctionDoc sort_indices_doc(\n+    \"Return the indices that would sort an array\",\n+    (\"Compute an array of indices that define a non-stable sort\\n\"\n+     \"of the input array.  Null values are considered greater than any\\n\"\n+     \"other value and are therefore sorted at the end of the array.\"),\n\nReview comment:\n       I wanted to comment to maybe mention NaN as well (also sorted last, but before null). But apparently my expectation is not true, we don't really have well-defined sort behavior with NaNs present. Will open a JIRA about that\r\n   \r\n   For example\r\n   \r\n   ```\r\n   In [39]: arr = pa.array([2, 1, np.nan, 2, 1])\r\n   \r\n   In [40]: pc.take(arr, pc.sort_indices(arr))\r\n   Out[40]: \r\n   <pyarrow.lib.DoubleArray object at 0x7fc693d07c48>\r\n   [\r\n     1,\r\n     2,\r\n     nan,\r\n     1,\r\n     2\r\n   ]\r\n   \r\n   In [41]: arr = pa.array([2, 1, np.nan, 2, np.nan, 1])\r\n   \r\n   In [42]: pc.take(arr, pc.sort_indices(arr))\r\n   Out[42]: \r\n   <pyarrow.lib.DoubleArray object at 0x7fc693d10348>\r\n   [\r\n     1,\r\n     1,\r\n     2,\r\n     nan,\r\n     2,\r\n     nan\r\n   ]\r\n   ```\r\n   \r\n   (for which I can't really infer the logic)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -302,19 +299,38 @@ void AddSortingKernels(VectorKernel base, VectorFunction* func) {\n   }\n }\n \n+FunctionDoc sort_indices_doc(\n+    \"Return the indices that would sort an array\",\n+    (\"Compute an array of indices that define a non-stable sort\\n\"\n+     \"of the input array.  Null values are considered greater than any\\n\"\n+     \"other value and are therefore sorted at the end of the array.\"),\n+    {\"array\"});\n+\n+FunctionDoc partition_nth_indices_doc(\n+    \"Return the indices that would partition an array around a pivot\",\n+    (\"Compute an array of indices that define a non-stable partition\\n\"\n+     \"around the `N`th smallest element of the input array.\\n\"\n\nReview comment:\n       For me it's not fully clear what this \"partition around the Nth smallest element\" means.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -277,29 +278,80 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunction(std::string name) {\n // Like MakeArithmeticFunction, but for arithmetic ops that need to run\n // only on non-null output.\n template <typename Op>\n-std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name) {\n-  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary());\n+std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n+                                                              FunctionDoc doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary(), std::move(doc));\n   for (const auto& ty : NumericTypes()) {\n     auto exec = NumericEqualTypesBinary<ScalarBinaryNotNullEqualTypes, Op>(ty);\n     DCHECK_OK(func->AddKernel({ty, ty}, ty, exec));\n   }\n   return func;\n }\n \n+FunctionDoc add_doc{\"Add the elements of two arrays\",\n\nReview comment:\n       Just checked, for np.add ufunc, they use \"Add arguments element-wise\"\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -277,29 +278,80 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunction(std::string name) {\n // Like MakeArithmeticFunction, but for arithmetic ops that need to run\n // only on non-null output.\n template <typename Op>\n-std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name) {\n-  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary());\n+std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n+                                                              FunctionDoc doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary(), std::move(doc));\n   for (const auto& ty : NumericTypes()) {\n     auto exec = NumericEqualTypesBinary<ScalarBinaryNotNullEqualTypes, Op>(ty);\n     DCHECK_OK(func->AddKernel({ty, ty}, ty, exec));\n   }\n   return func;\n }\n \n+FunctionDoc add_doc{\"Add the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"add_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc add_checked_doc{\n+    \"Add the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"add\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_doc{\"Substract the elements of an array from another\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"subtract_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_checked_doc{\n+    \"Substract the elements of an array from another\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"subtract\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_doc{\"Multiply the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"multiply_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_checked_doc{\n+    \"Multiply the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"multiply\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc div_doc{\"Divide the elements of an array by another\",\n+                    (\"An error is returned when trying to divide by zero.\\n\"\n\nReview comment:\n       It might also be worth to mention that integer division doesn't return floats, but is basically a \"rounded\" division (also not a floor division it seems)\r\n   \r\n   (if this is intentional, of course)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T14:09:43.966+0000",
                    "updated": "2020-10-15T14:09:43.966+0000",
                    "started": "2020-10-15T14:09:43.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501110",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501137",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505667275\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_var_std.cc\n##########\n@@ -180,20 +180,38 @@ void AddVarStdKernels(KernelInit init,\n   }\n }\n \n+FunctionDoc stddev_doc{\n+    \"Calculate the standard deviation of a numeric array\",\n+    (\"The number of degrees of freedom can be controlled using VarianceOptions.\\n\"\n+     \"By default (`ddof` = 0), the population standard deviation is calculated.\\n\"\n+     \"Nulls are ignored.  If there are not enough non-null values in the array\\n\"\n+     \"to satisfy `ddof`, an error is returned.\"),\n\nReview comment:\n       Hmm, looks like you're right. I misread the tests.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:11:22.323+0000",
                    "updated": "2020-10-15T16:11:22.323+0000",
                    "started": "2020-10-15T16:11:22.323+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501137",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505671134\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -277,29 +278,80 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunction(std::string name) {\n // Like MakeArithmeticFunction, but for arithmetic ops that need to run\n // only on non-null output.\n template <typename Op>\n-std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name) {\n-  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary());\n+std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n+                                                              FunctionDoc doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Binary(), std::move(doc));\n   for (const auto& ty : NumericTypes()) {\n     auto exec = NumericEqualTypesBinary<ScalarBinaryNotNullEqualTypes, Op>(ty);\n     DCHECK_OK(func->AddKernel({ty, ty}, ty, exec));\n   }\n   return func;\n }\n \n+FunctionDoc add_doc{\"Add the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"add_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc add_checked_doc{\n+    \"Add the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"add\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_doc{\"Substract the elements of an array from another\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"subtract_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc sub_checked_doc{\n+    \"Substract the elements of an array from another\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"subtract\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_doc{\"Multiply the elements of two arrays\",\n+                    (\"Results will wrap around on integer overflow.\\n\"\n+                     \"Use function \\\"multiply_checked\\\" if you want overflow\\n\"\n+                     \"to return an error.\"),\n+                    {\"x\", \"y\"}};\n+\n+FunctionDoc mul_checked_doc{\n+    \"Multiply the elements of two arrays\",\n+    (\"This function returns an error on overflow.  For a variant that\\n\"\n+     \"doesn't fail on overflow, use function \\\"multiply\\\".\"),\n+    {\"x\", \"y\"}};\n+\n+FunctionDoc div_doc{\"Divide the elements of an array by another\",\n+                    (\"An error is returned when trying to divide by zero.\\n\"\n\nReview comment:\n       Right, will do.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:17:09.359+0000",
                    "updated": "2020-10-15T16:17:09.359+0000",
                    "started": "2020-10-15T16:17:09.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501138",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505672267\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_nested.cc\n##########\n@@ -65,18 +65,33 @@ Result<ValueDescr> ValuesType(KernelContext*, const std::vector<ValueDescr>& arg\n   return ValueDescr::Array(list_type.value_type());\n }\n \n+FunctionDoc list_flatten_doc(\n+    \"Flatten list values\",\n+    (\"`lists` must have a list-like type.\\n\"\n+     \"Return an array with the top list level flattened.\\n\"\n+     \"Top-level null values in `lists` do not emit anything in the input.\"),\n+    {\"lists\"});\n+\n+FunctionDoc list_parent_indices_doc(\n+    \"Compute parent indices of nested list values\",\n+    (\"`lists` must have a list-like type.\\n\"\n+     \"For each value in each list of `lists`, the top-level list index\\n\"\n\nReview comment:\n       Yes, it's not obvious how to make this too unwiedly to write.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:18:53.821+0000",
                    "updated": "2020-10-15T16:18:53.821+0000",
                    "started": "2020-10-15T16:18:53.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501139",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505674797\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -302,19 +299,38 @@ void AddSortingKernels(VectorKernel base, VectorFunction* func) {\n   }\n }\n \n+FunctionDoc sort_indices_doc(\n+    \"Return the indices that would sort an array\",\n+    (\"Compute an array of indices that define a non-stable sort\\n\"\n+     \"of the input array.  Null values are considered greater than any\\n\"\n+     \"other value and are therefore sorted at the end of the array.\"),\n+    {\"array\"});\n+\n+FunctionDoc partition_nth_indices_doc(\n+    \"Return the indices that would partition an array around a pivot\",\n+    (\"Compute an array of indices that define a non-stable partition\\n\"\n+     \"around the `N`th smallest element of the input array.\\n\"\n\nReview comment:\n       Will improve this, thank you.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:23:02.596+0000",
                    "updated": "2020-10-15T16:23:02.596+0000",
                    "started": "2020-10-15T16:23:02.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501141",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505684699\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -93,20 +119,10 @@ def _decorate_compute_function(wrapper, exposed_name, func, option_class):\n     return wrapper\n \n \n-_option_classes = {\n-    # TODO: export the option class name from C++ metadata?\n-    'cast': CastOptions,\n-    'filter': FilterOptions,\n-    'index_in': SetLookupOptions,\n-    'is_in': SetLookupOptions,\n-    'match_substring': MatchSubstringOptions,\n-    'min_max': MinMaxOptions,\n-    'partition_nth_indices': PartitionNthOptions,\n-    'stddev': VarianceOptions,\n-    'strptime': StrptimeOptions,\n-    'take': TakeOptions,\n-    'variance': VarianceOptions,\n-}\n+def _get_options_class(func):\n+    class_name = func._doc.options_class\n+    # XXX should we raise if the class isn't exposed in Python?\n+    return globals().get(class_name) if class_name else None\n\nReview comment:\n       I made it emit a warning instead. Raising is not very friendly towards C++ developers that don't know Python.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:37:22.827+0000",
                    "updated": "2020-10-15T16:37:22.827+0000",
                    "started": "2020-10-15T16:37:22.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501152",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505685027\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n\nReview comment:\n       I'm keeping the generated wrappers for now.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:37:50.159+0000",
                    "updated": "2020-10-15T16:37:50.159+0000",
                    "started": "2020-10-15T16:37:50.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501154",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505685579\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n\nReview comment:\n       That can be added to the wrappers, though: `assert len(args) == func.arity`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:38:45.427+0000",
                    "updated": "2020-10-15T16:38:45.427+0000",
                    "started": "2020-10-15T16:38:45.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501155",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505689048\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+\n+def _wrap_function(name, func):\n+    option_class = _get_options_class(func)\n+    arg_names = _get_arg_names(func)\n+    args_sig = ', '.join(arg_names)\n+\n\nReview comment:\n       Hmm, I didn't know that `__wrapped__` was taken up by `inspect.signature`. Interesting. I'd rather examine this later though.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:44:17.572+0000",
                    "updated": "2020-10-15T16:44:17.572+0000",
                    "started": "2020-10-15T16:44:17.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501160",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505690052\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -130,32 +146,38 @@ def _handle_options(name, option_class, options, kwargs):\n     return options\n \n \n-def _simple_unary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n-    if option_class is not None:\n-        def wrapper(arg, *, options=None, memory_pool=None, **kwargs):\n-            options = _handle_options(name, option_class, options, kwargs)\n-            return func.call([arg], options, memory_pool)\n-    else:\n-        def wrapper(arg, *, memory_pool=None):\n-            return func.call([arg], None, memory_pool)\n-\n-    return _decorate_compute_function(wrapper, name, func, option_class)\n-\n-\n-def _simple_binary_function(name):\n-    func = get_function(name)\n-    option_class = _option_classes.get(name)\n-\n+_wrapper_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, memory_pool=None):\n+            return func.call([{args_sig}], None, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+_wrapper_options_template = dedent(\"\"\"\\\n+    def make_wrapper(func, option_class):\n+        def {func_name}({args_sig}, *, options=None, memory_pool=None,\n+                        **kwargs):\n+            options = _handle_options({func_name!r}, option_class, options,\n+                                      kwargs)\n+            return func.call([{args_sig}], options, memory_pool)\n+        return {func_name}\n+    \"\"\")\n+\n+\n+def _wrap_function(name, func):\n+    option_class = _get_options_class(func)\n+    arg_names = _get_arg_names(func)\n+    args_sig = ', '.join(arg_names)\n+\n\nReview comment:\n       ARROW-10316\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:45:47.382+0000",
                    "updated": "2020-10-15T16:45:47.382+0000",
                    "started": "2020-10-15T16:45:47.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501162",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#issuecomment-709454642\n\n\n   @nealrichardson @kou This may help for R and Ruby.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T16:50:08.549+0000",
                    "updated": "2020-10-15T16:50:08.549+0000",
                    "started": "2020-10-15T16:50:08.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501166",
                    "issueId": "13312053"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/worklog/501182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8457:\nURL: https://github.com/apache/arrow/pull/8457#discussion_r505698824\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -302,19 +299,38 @@ void AddSortingKernels(VectorKernel base, VectorFunction* func) {\n   }\n }\n \n+FunctionDoc sort_indices_doc(\n+    \"Return the indices that would sort an array\",\n+    (\"Compute an array of indices that define a non-stable sort\\n\"\n+     \"of the input array.  Null values are considered greater than any\\n\"\n+     \"other value and are therefore sorted at the end of the array.\"),\n\nReview comment:\n       I think NaN is just not handled, and its presence makes all comparisons return false.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T17:00:02.971+0000",
                    "updated": "2020-10-15T17:00:02.971+0000",
                    "started": "2020-10-15T17:00:02.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501182",
                    "issueId": "13312053"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@320fca14[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44ccc251[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e179e52[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@c6b1f8b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fdc3c15[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@28a45955[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a53a71d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6e90609b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6022d5c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6ac64668[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d8a7f62[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@20734af0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 19 12:55:29 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-19T12:55:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9164/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2020-06-17T20:45:33.000+0000",
        "updated": "2020-10-19T12:55:59.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Provide APIs for adding \"docstrings\" to arrow::compute::Function classes that can be accessed by bindings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/comment/17193672",
                    "id": "17193672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Also, as additional metadata, the name of the options class (if any) would be useful.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-09-10T15:21:47.622+0000",
                    "updated": "2020-09-10T15:21:47.622+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312053/comment/17216699",
                    "id": "17216699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8457\n[https://github.com/apache/arrow/pull/8457]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-10-19T12:55:29.349+0000",
                    "updated": "2020-10-19T12:55:29.349+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fyds:",
        "customfield_12314139": null
    }
}