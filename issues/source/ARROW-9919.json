{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13326141",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141",
    "key": "ARROW-9919",
    "fields": {
        "parent": {
            "id": "13326140",
            "key": "ARROW-9918",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13326140",
            "fields": {
                "summary": "[Rust] [DataFusion] Favor \"from\" to create arrays for improved performance",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9919/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116\n\n\n   This PR improves speed of all math operations by 15% (on default batch size), and changes the scaling (to faster) of how these operations scale with batch size.\r\n   \r\n   See main issue here: ARROW-9918\r\n   \r\n   This has a big contribution from @yordan-pavlov, that initially reported the issue on ARROW-8908 for literal arrays.\r\n   \r\n   Benchmarks (on my computer, before and after the second commit):\r\n   \r\n   ```\r\n   sqrt_20_12              time:   [34.422 ms 34.503 ms 34.584 ms]                       \r\n                           change: [-16.333% -16.055% -15.806%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   \r\n   sqrt_22_12              time:   [150.13 ms 150.79 ms 151.42 ms]                       \r\n                           change: [-16.281% -15.488% -14.779%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   \r\n   sqrt_22_14              time:   [151.45 ms 151.68 ms 151.90 ms]                       \r\n                           change: [-18.233% -16.919% -15.888%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T07:27:10.440+0000",
                    "updated": "2020-09-05T07:27:10.440+0000",
                    "started": "2020-09-05T07:27:10.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479304",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-687567384\n\n\n   https://issues.apache.org/jira/browse/ARROW-9919\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T07:43:18.132+0000",
                    "updated": "2020-09-05T07:43:18.132+0000",
                    "started": "2020-09-05T07:43:18.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479305",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r483940437\n\n\n\n##########\nFile path: rust/datafusion/benches/math_query_sql.rs\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#[macro_use]\n+extern crate criterion;\n+use criterion::Criterion;\n+\n+use std::sync::Arc;\n+\n+extern crate arrow;\n+extern crate datafusion;\n+\n+use arrow::{\n+    array::{Float32Array, Float64Array},\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+use datafusion::error::Result;\n+\n+use datafusion::datasource::MemTable;\n+use datafusion::execution::context::ExecutionContext;\n+\n+fn query(ctx: &mut ExecutionContext, sql: &str) {\n+    // execute the query\n+    let df = ctx.sql(&sql).unwrap();\n+    let results = df.collect().unwrap();\n+\n+    // display the relation\n+    for _batch in results {}\n+}\n+\n+fn create_context(array_len: usize, batch_size: usize) -> Result<ExecutionContext> {\n+    // define a schema.\n+    let schema = Arc::new(Schema::new(vec![\n+        Field::new(\"f32\", DataType::Float32, false),\n+        Field::new(\"f64\", DataType::Float64, false),\n+    ]));\n+\n+    // define data.\n+    let batches = (0..array_len / batch_size)\n+        .map(|i| {\n+            RecordBatch::try_new(\n+                schema.clone(),\n+                vec![\n+                    Arc::new(Float32Array::from(vec![i as f32; batch_size])),\n+                    Arc::new(Float64Array::from(vec![i as f64; batch_size])),\n+                ],\n+            )\n+            .unwrap()\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let mut ctx = ExecutionContext::new();\n+\n+    // declare a table in memory. In spark API, this corresponds to createDataFrame(...).\n+    let provider = MemTable::new(schema, vec![batches])?;\n+    ctx.register_table(\"t\", Box::new(provider));\n+\n+    Ok(ctx)\n+}\n+\n+fn criterion_benchmark(c: &mut Criterion) {\n+    c.bench_function(\"sqrt_20_12\", |b| {\n\nReview comment:\n       BTW these benchmarks were taking ~ 200s on my laptop -- I think you can probably show a similar improvement with smaller dataset sizes (aka I think we should reduce the number of iterations and/or datasize so the benchmarks run in ~10sec - 20sec)\n\n##########\nFile path: rust/datafusion/benches/math_query_sql.rs\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#[macro_use]\n+extern crate criterion;\n+use criterion::Criterion;\n+\n+use std::sync::Arc;\n+\n+extern crate arrow;\n+extern crate datafusion;\n+\n+use arrow::{\n+    array::{Float32Array, Float64Array},\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+use datafusion::error::Result;\n+\n+use datafusion::datasource::MemTable;\n+use datafusion::execution::context::ExecutionContext;\n+\n+fn query(ctx: &mut ExecutionContext, sql: &str) {\n+    // execute the query\n+    let df = ctx.sql(&sql).unwrap();\n+    let results = df.collect().unwrap();\n+\n+    // display the relation\n+    for _batch in results {}\n+}\n+\n+fn create_context(array_len: usize, batch_size: usize) -> Result<ExecutionContext> {\n+    // define a schema.\n+    let schema = Arc::new(Schema::new(vec![\n+        Field::new(\"f32\", DataType::Float32, false),\n+        Field::new(\"f64\", DataType::Float64, false),\n+    ]));\n+\n+    // define data.\n+    let batches = (0..array_len / batch_size)\n+        .map(|i| {\n+            RecordBatch::try_new(\n+                schema.clone(),\n+                vec![\n+                    Arc::new(Float32Array::from(vec![i as f32; batch_size])),\n+                    Arc::new(Float64Array::from(vec![i as f64; batch_size])),\n+                ],\n+            )\n+            .unwrap()\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let mut ctx = ExecutionContext::new();\n+\n+    // declare a table in memory. In spark API, this corresponds to createDataFrame(...).\n+    let provider = MemTable::new(schema, vec![batches])?;\n+    ctx.register_table(\"t\", Box::new(provider));\n+\n+    Ok(ctx)\n+}\n+\n+fn criterion_benchmark(c: &mut Criterion) {\n+    c.bench_function(\"sqrt_20_12\", |b| {\n\nReview comment:\n       ```\r\n   alamb@ip-192-168-1-129:~/Software/arrow/rust$ ARROW_TEST_DATA=`pwd`/../testing/data cargo bench --bench math_query_sql\r\n       Finished bench [optimized] target(s) in 0.15s\r\n        Running target/release/deps/math_query_sql-8428878a7376985f\r\n   Gnuplot not found, using plotters backend\r\n   Benchmarking sqrt_20_12: Warming up for 3.0000 s\r\n   Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 179.8s or reduce sample count to 10.\r\n   Benchmarking sqrt_20_12: Collecting 100 samples in estimated 179.78 s (5050 iterations)\r\n   ...\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T11:12:47.235+0000",
                    "updated": "2020-09-05T11:12:47.235+0000",
                    "started": "2020-09-05T11:12:47.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479317",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479330",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r483954060\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       You could likely improve performance further by computing without checking nullity of array, and then building the array using the input bitmask.\r\n   \r\n   I'm away from home, so I don't have a PC to check with; but look at the pattern that most of the compute functions follow.\r\n   \r\n   Removing the if/else allows the compiler to vectorise the loop.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T14:11:44.892+0000",
                    "updated": "2020-09-05T14:11:44.892+0000",
                    "started": "2020-09-05T14:11:44.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479330",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-687635427\n\n\n   Wow, very cool.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T16:55:46.468+0000",
                    "updated": "2020-09-05T16:55:46.468+0000",
                    "started": "2020-09-05T16:55:46.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479341",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r483971257\n\n\n\n##########\nFile path: rust/datafusion/benches/math_query_sql.rs\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#[macro_use]\n+extern crate criterion;\n+use criterion::Criterion;\n+\n+use std::sync::Arc;\n+\n+extern crate arrow;\n+extern crate datafusion;\n+\n+use arrow::{\n+    array::{Float32Array, Float64Array},\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+use datafusion::error::Result;\n+\n+use datafusion::datasource::MemTable;\n+use datafusion::execution::context::ExecutionContext;\n+\n+fn query(ctx: &mut ExecutionContext, sql: &str) {\n+    // execute the query\n+    let df = ctx.sql(&sql).unwrap();\n+    let results = df.collect().unwrap();\n+\n+    // display the relation\n+    for _batch in results {}\n+}\n+\n+fn create_context(array_len: usize, batch_size: usize) -> Result<ExecutionContext> {\n+    // define a schema.\n+    let schema = Arc::new(Schema::new(vec![\n+        Field::new(\"f32\", DataType::Float32, false),\n+        Field::new(\"f64\", DataType::Float64, false),\n+    ]));\n+\n+    // define data.\n+    let batches = (0..array_len / batch_size)\n+        .map(|i| {\n+            RecordBatch::try_new(\n+                schema.clone(),\n+                vec![\n+                    Arc::new(Float32Array::from(vec![i as f32; batch_size])),\n+                    Arc::new(Float64Array::from(vec![i as f64; batch_size])),\n+                ],\n+            )\n+            .unwrap()\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let mut ctx = ExecutionContext::new();\n+\n+    // declare a table in memory. In spark API, this corresponds to createDataFrame(...).\n+    let provider = MemTable::new(schema, vec![batches])?;\n+    ctx.register_table(\"t\", Box::new(provider));\n+\n+    Ok(ctx)\n+}\n+\n+fn criterion_benchmark(c: &mut Criterion) {\n+    c.bench_function(\"sqrt_20_12\", |b| {\n\nReview comment:\n       I agree. I will reduce samples. I needed them for the perform the scaling, which often only shows up in larger due to fixed costs.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T17:34:31.864+0000",
                    "updated": "2020-09-05T17:34:31.864+0000",
                    "started": "2020-09-05T17:34:31.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479351",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r483971257\n\n\n\n##########\nFile path: rust/datafusion/benches/math_query_sql.rs\n##########\n@@ -0,0 +1,100 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#[macro_use]\n+extern crate criterion;\n+use criterion::Criterion;\n+\n+use std::sync::Arc;\n+\n+extern crate arrow;\n+extern crate datafusion;\n+\n+use arrow::{\n+    array::{Float32Array, Float64Array},\n+    datatypes::{DataType, Field, Schema},\n+    record_batch::RecordBatch,\n+};\n+use datafusion::error::Result;\n+\n+use datafusion::datasource::MemTable;\n+use datafusion::execution::context::ExecutionContext;\n+\n+fn query(ctx: &mut ExecutionContext, sql: &str) {\n+    // execute the query\n+    let df = ctx.sql(&sql).unwrap();\n+    let results = df.collect().unwrap();\n+\n+    // display the relation\n+    for _batch in results {}\n+}\n+\n+fn create_context(array_len: usize, batch_size: usize) -> Result<ExecutionContext> {\n+    // define a schema.\n+    let schema = Arc::new(Schema::new(vec![\n+        Field::new(\"f32\", DataType::Float32, false),\n+        Field::new(\"f64\", DataType::Float64, false),\n+    ]));\n+\n+    // define data.\n+    let batches = (0..array_len / batch_size)\n+        .map(|i| {\n+            RecordBatch::try_new(\n+                schema.clone(),\n+                vec![\n+                    Arc::new(Float32Array::from(vec![i as f32; batch_size])),\n+                    Arc::new(Float64Array::from(vec![i as f64; batch_size])),\n+                ],\n+            )\n+            .unwrap()\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let mut ctx = ExecutionContext::new();\n+\n+    // declare a table in memory. In spark API, this corresponds to createDataFrame(...).\n+    let provider = MemTable::new(schema, vec![batches])?;\n+    ctx.register_table(\"t\", Box::new(provider));\n+\n+    Ok(ctx)\n+}\n+\n+fn criterion_benchmark(c: &mut Criterion) {\n+    c.bench_function(\"sqrt_20_12\", |b| {\n\nReview comment:\n       I agree. I will reduce sizes. I needed them for the perform the scaling, which often only shows up in larger due to fixed costs.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-05T17:34:44.879+0000",
                    "updated": "2020-09-05T17:34:44.879+0000",
                    "started": "2020-09-05T17:34:44.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479352",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r484110960\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       @nevi-me, doesn't the performance depend on the density of nulls? For low density, vectorise wins, for high density, loop wins.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-06T20:31:34.599+0000",
                    "updated": "2020-09-06T20:31:34.599+0000",
                    "started": "2020-09-06T20:31:34.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479429",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-687998129\n\n\n   I mentioned this over on [ARROW-9921](https://github.com/apache/arrow/pull/8117) but I don't think we intended to use `From<Vec<_>>` for anything other that testing originally.\r\n   \r\n   I thought that we needed to use the functions from [memory](https://github.com/apache/arrow/blob/master/rust/arrow/src/memory.rs) to allocate (control alignment and padding) but this allows the `Vec` to allocate (via `collect`).  I think you would want to ensure that all arrays are allocated with a consistent alignment, i.e. use memory.rs.\r\n   \r\n   From the spec:\r\n   > Implementations are recommended to allocate memory on aligned addresses (multiple of 8- or 64-bytes) and pad (overallocate) to a length that is a multiple of 8 or 64 bytes. When serializing Arrow data for interprocess communication, these alignment and padding requirements are enforced\r\n   \r\n   This approach might be fine for an application in the wild (that won't use IPC) but DataFusion is part of the Arrow project itself and so *should* follow the rules/recommendations, thoughts?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T03:04:57.606+0000",
                    "updated": "2020-09-07T03:04:57.606+0000",
                    "started": "2020-09-07T03:04:57.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479460",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-688034629\n\n\n   @paddyhoran , thanks a lot for the feedback, it really helps to understand a bit better the context, as I am not aware of those practices.\r\n   \r\n   I do think that both builders and `from` use `memory.rs`. For primitive types, \r\n   \r\n   * the builder uses a `BufferBuilder` and `BooleanBufferBuilder`, which in turn uses `memory` [here](https://github.com/apache/arrow/blob/master/rust/arrow/src/array/builder.rs#L463)\r\n   * the `from` uses `Buffer`, which uses `memory` [here](https://github.com/apache/arrow/blob/master/rust/arrow/src/array/array.rs#L737)\r\n   \r\n   There are two main differences between the two:\r\n   \r\n   * A) `from` requires an intermediary allocation (to vec), while the builder does not (uses a MutableBuffer).\r\n   * B) `builder` assess whether it needs to change capacity on every item, while `from` does not.\r\n   \r\n   Specifically, `from` uses `Buffer::from(data.to_byte_slice())`, while the `builder` uses `for datum in data builder.append(datum); builder.finish()`. Therefore, `builders` perform checks on its capacity to ensure that each `append` does not require a `resize` (see impl of `append`, `BufferBuilderTrait<T> for BufferBuilder`, that has a `reserve(1)?` on it, and `advance`, used in nulls, that has a `resize` on it).\r\n   \r\n   My hypothesis for this performance change is that B) is more CPU intensive than A).\r\n   \r\n   One the solution is to offer an API to the `Builder`s to not perform those checks when the user already set the capacity. This would address `B)` and would avoid an intermediary allocation.\r\n   \r\n   In this direction, one idea is to support appending from an `ExactSizeIterator` (e.g. `append_iter`) and use `size_hint` to not perform bound checks on every item.\r\n   \r\n   -----------------------\r\n   \r\n   A common operation we have in the readers and compute is\r\n   \r\n   ```\r\n   rows: &[Value];\r\n   \r\n   for row in rows {\r\n       match some_operation(row) {\r\n            Some(item) => builder.append(item)\r\n            None => builder.append_null()\r\n       }\r\n   }\r\n   ```\r\n   \r\n   which is a basically an `ExactSizeIterator`. However, in the example above, the `builder` has no way of knowing that the new append won't go beyond the reserved size (and thus it checks).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T04:56:31.206+0000",
                    "updated": "2020-09-07T04:56:31.206+0000",
                    "started": "2020-09-07T04:56:31.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479474",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-688034629\n\n\n   @paddyhoran , thanks a lot for the feedback, it really helps to understand a bit better the context, as I am not aware of those practices.\r\n   \r\n   I do think that both builders and `from` use `memory.rs`. For primitive types, \r\n   \r\n   * the builder uses a `BufferBuilder` and `BooleanBufferBuilder`, which in turn uses `memory` [here](https://github.com/apache/arrow/blob/master/rust/arrow/src/array/builder.rs#L463)\r\n   * the `from` uses `Buffer`, which uses `memory` [here](https://github.com/apache/arrow/blob/master/rust/arrow/src/array/array.rs#L737)\r\n   \r\n   There are two main differences between the two:\r\n   \r\n   * A) `from` requires an intermediary allocation (to vec), while the builder does not (uses a MutableBuffer).\r\n   * B) `builder` assess whether it needs to change capacity on every item, while `from` does not.\r\n   \r\n   Specifically, `from` uses `Buffer::from(data.to_byte_slice())`, while the `builder` uses `for datum in data builder.append(datum); builder.finish()`. Therefore, `builders` perform checks on its capacity to ensure that each `append` does not require a `resize` (see impl of `append`, `BufferBuilderTrait<T> for BufferBuilder`, that has a `reserve(1)?` on it, and `advance`, used in nulls, that has a `resize` on it).\r\n   \r\n   My hypothesis for this performance change is that B) is more CPU intensive than A).\r\n   \r\n   One solution is to offer an API to the `Builder`s to not perform those checks when the user already set the capacity. This would address `B)` and would avoid an intermediary allocation.\r\n   \r\n   In this direction, one idea is to support appending from an `ExactSizeIterator` (e.g. `append_iter`) and use `size_hint` to not perform bound checks on every item.\r\n   \r\n   -----------------------\r\n   \r\n   A common operation we have in the readers and compute is\r\n   \r\n   ```\r\n   rows: &[Value];\r\n   \r\n   for row in rows {\r\n       match some_operation(row) {\r\n            Some(item) => builder.append(item)\r\n            None => builder.append_null()\r\n       }\r\n   }\r\n   ```\r\n   \r\n   which is a basically an `ExactSizeIterator`. However, in the example above, the `builder` has no way of knowing that the new append won't go beyond the reserved size (and thus it checks).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T04:57:45.131+0000",
                    "updated": "2020-09-07T04:57:45.131+0000",
                    "started": "2020-09-07T04:57:45.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479475",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-688034629\n\n\n   @paddyhoran , thanks a lot for the feedback, it really helps to understand a bit better the context, as I am not aware of those practices.\r\n   \r\n   I do think that both builders and `from` use `memory.rs`. For primitive types, \r\n   \r\n   * the builder uses a `BufferBuilder` and `BooleanBufferBuilder`, which in turn uses `memory` [here](https://github.com/apache/arrow/blob/master/rust/arrow/src/array/builder.rs#L463)\r\n   * the `from` uses `Buffer`, which uses `memory` [here](https://github.com/apache/arrow/blob/master/rust/arrow/src/array/array.rs#L737)\r\n   \r\n   There are two main differences between the two:\r\n   \r\n   * A) `from` requires an intermediary allocation (to vec), while the builder does not (uses a MutableBuffer).\r\n   * B) `builder` assess whether it needs to change capacity on every item, while `from` does not.\r\n   \r\n   Specifically, `from` uses `Buffer::from(data.to_byte_slice())`, while the `builder` uses `for datum in data builder.append(datum); builder.finish()`. Therefore, `builders` perform checks on its capacity to ensure that each `append` does not require a `resize` (see impl of `append`, `BufferBuilderTrait<T> for BufferBuilder`, that has a `reserve(1)?` on it, and `advance`, used in nulls, that has a `resize` on it).\r\n   \r\n   My hypothesis for this performance change is that B) is more CPU intensive than A).\r\n   \r\n   One solution is to offer an API to the `Builder`s to not perform those checks when the user already set the capacity. This would address `B)` and would avoid an intermediary allocation.\r\n   \r\n   In this direction, one idea is to support appending from an `ExactSizeIterator` (e.g. `append_iter`) and use `size_hint` to not perform bound checks on every item.\r\n   \r\n   -----------------------\r\n   \r\n   A common operation we have in the readers is\r\n   \r\n   ```\r\n   rows: &[Value];\r\n   \r\n   for row in rows {\r\n       match some_operation(row) {\r\n            Some(item) => builder.append(item)\r\n            None => builder.append_null()\r\n       }\r\n   }\r\n   ```\r\n   \r\n   in compute\r\n   \r\n   ```\r\n   rows: &[Value];\r\n   \r\n   for row in rows {\r\n       match row {\r\n            Some(item) => builder.append(some_operation(item))\r\n            None => builder.append_null()\r\n       }\r\n   }\r\n   ```\r\n   \r\n   (with a different syntax, but the logic is this one)\r\n   \r\n   which is a basically an `ExactSizeIterator`. However, in the example above, the `builder` has no way of knowing that the new append won't go beyond the reserved size (and thus it checks).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T05:02:01.287+0000",
                    "updated": "2020-09-07T05:02:01.287+0000",
                    "started": "2020-09-07T05:02:01.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479476",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-688252444\n\n\n   Hey @jorgecarleitao,\r\n   \r\n   Sorry, my info was wrong.  As you said `<From<Vec<_>>` does do a full copy of the underlying data which uses memory.rs [here](https://github.com/apache/arrow/blob/master/rust/arrow/src/buffer.rs#L274).  I was not aware of this.  \r\n   \r\n   I think you are right that there are a lot of improvements to be made to the builders, we should be able to get better performance out of them as they should be able to act like a `Vec` where the correct alignment is enforced so that no copy is needed.\r\n   \r\n   Anyway, sorry for the noise and thank you for the detailed explanation.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T11:05:51.750+0000",
                    "updated": "2020-09-07T11:05:51.750+0000",
                    "started": "2020-09-07T11:05:51.750+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479586",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r484477474\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       > @nevi-me, doesn't the performance depend on the density of nulls? For low density, vectorise wins, for high density, loop wins.\r\n   \r\n   I'd think that it wouldn't depend on nullness as you'd be removing the branching altogether. I'll have a look\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T14:52:59.774+0000",
                    "updated": "2020-09-07T14:52:59.774+0000",
                    "started": "2020-09-07T14:52:59.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479666",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r484493616\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       Here's what I'm getting if I remove the loop. A further 85-90% improvement on top of your change (on Ryzen 3700x).\r\n   \r\n   The change requires making 1 function and 1 field public though, so maybe we can find some way of working around that.\r\n   \r\n   ```rust\r\n   sqrt_20_12              time:   [2.5142 ms 2.6041 ms 2.6987 ms]\r\n                           change: [-90.546% -90.184% -89.809%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   \r\n   sqrt_22_12              time:   [15.254 ms 15.532 ms 15.817 ms]\r\n                           change: [-85.989% -85.707% -85.436%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   \r\n   sqrt_22_14              time:   [12.698 ms 12.919 ms 13.158 ms]\r\n                           change: [-87.515% -87.306% -87.069%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     4 (4.00%) high mild\r\n   ```\r\n   \r\n   Code\r\n   \r\n   ```rust\r\n   macro_rules! compute_op {\r\n       ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\r\n           let len = $ARRAY.len();\r\n           let result = (0..len)\r\n               .map(|i| $ARRAY.value(i).$FUNC() as f64)\r\n               .collect::<Vec<f64>>();\r\n           let data = ArrayData::new(\r\n               DataType::Float64,\r\n               len,\r\n               None,\r\n               // this is nasty, not sure of how to do it better, maybe we could introduce a fn that does this?\r\n               $ARRAY\r\n                   .data()\r\n                   .null_bitmap()\r\n                   .clone()\r\n                   .map(|bitmap| bitmap.bits),\r\n               0,\r\n               vec![Buffer::from(result.to_byte_slice())],\r\n               vec![],\r\n           );\r\n           Ok(make_array(Arc::new(data)))\r\n       }};\r\n   }\r\n   ``` \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T15:29:25.415+0000",
                    "updated": "2020-09-07T15:29:25.415+0000",
                    "started": "2020-09-07T15:29:25.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479673",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#issuecomment-688394965\n\n\n   @paddyhoran @jorgecarleitao @andygrove  PTAL at my suggestion before merging (https://github.com/apache/arrow/pull/8116#discussion_r484493616)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T15:31:08.622+0000",
                    "updated": "2020-09-07T15:31:08.622+0000",
                    "started": "2020-09-07T15:31:08.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479674",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r484498652\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       ![Shut up and take my money](https://static.wikia.nocookie.net/memepediadankmemes/images/8/80/Acb.jpg/revision/latest/scale-to-width-down/340?cb=20180822064733)\r\n   \r\n   Now, seriously, I think that we should merge this change instead of mine (maybe keep the benchmark commit).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T15:42:04.569+0000",
                    "updated": "2020-09-07T15:42:04.569+0000",
                    "started": "2020-09-07T15:42:04.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479680",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r484534336\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       I can push my changes if you don't mind cleaning them up\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T17:50:31.490+0000",
                    "updated": "2020-09-07T17:50:31.490+0000",
                    "started": "2020-09-07T17:50:31.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479730",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r484544619\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       Sure, Let's do it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-07T18:49:40.688+0000",
                    "updated": "2020-09-07T18:49:40.688+0000",
                    "started": "2020-09-07T18:49:40.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479751",
                    "issueId": "13326141"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/worklog/479931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8116:\nURL: https://github.com/apache/arrow/pull/8116#discussion_r484750341\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/math_expressions.rs\n##########\n@@ -19,23 +19,25 @@\n \n use crate::error::{ExecutionError, Result};\n \n-use arrow::array::{Array, ArrayRef, Float32Array, Float64Array, Float64Builder};\n+use arrow::array::{Array, ArrayRef, Float32Array, Float64Array};\n \n use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n macro_rules! compute_op {\n     ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n-        let mut builder = Float64Builder::new($ARRAY.len());\n-        for i in 0..$ARRAY.len() {\n-            if $ARRAY.is_null(i) {\n-                builder.append_null()?;\n-            } else {\n-                builder.append_value($ARRAY.value(i).$FUNC() as f64)?;\n-            }\n-        }\n-        Ok(Arc::new(builder.finish()))\n+        let result: Float64Array = (0..$ARRAY.len())\n+            .map(|i| {\n\nReview comment:\n       Done, found a cleaner way of getting the null buffer in the end\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-08T08:40:22.104+0000",
                    "updated": "2020-09-08T08:40:22.104+0000",
                    "started": "2020-09-08T08:40:22.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "479931",
                    "issueId": "13326141"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@42f50fc2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26fb931b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4178c8e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3be1e896[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b29ba66[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5a1b1fa5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5da3ab8f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@69b24df5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f3e302f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1d5ae25a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d65ddad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2643ee11[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 08 09:05:41 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-08T09:05:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9919/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-05T07:21:22.000+0000",
        "updated": "2020-09-08T09:06:19.000+0000",
        "timeoriginalestimate": null,
        "description": "See main issue.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Math functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326141/comment/17192058",
                    "id": "17192058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8116\n[https://github.com/apache/arrow/pull/8116]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-09-08T09:05:41.852+0000",
                    "updated": "2020-09-08T09:05:41.852+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0icxs:",
        "customfield_12314139": null
    }
}