{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13427626",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626",
    "key": "ARROW-15639",
    "fields": {
        "parent": {
            "id": "13427619",
            "key": "ARROW-15635",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13427619",
            "fields": {
                "summary": "[C++][Python] UDF Integration ",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                    "id": "3",
                    "description": "A task that needs to be done.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                    "name": "Task",
                    "subtask": false,
                    "avatarId": 21148
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 208200,
            "total": 208200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 208200,
            "total": 208200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15639/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 347,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/738734",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590\n\n\n   WIP draft PR for Scalar UDF integration\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-09T13:25:17.634+0000",
                    "updated": "2022-03-09T13:25:17.634+0000",
                    "started": "2022-03-09T13:25:17.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "738734",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/738737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#issuecomment-1062923344\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-09T13:30:28.853+0000",
                    "updated": "2022-03-09T13:30:28.853+0000",
                    "started": "2022-03-09T13:30:28.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "738737",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831714645\n\n\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This example showcases various ways to work with Datasets. It's\n+// intended to be paired with the documentation.\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: cpp/src/arrow/python/udf.h\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/python/platform.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/function.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/util/cpu_info.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/pyarrow.h\"\n+#include \"arrow/python/visibility.h\"\n+\n+namespace cp = arrow::compute;\n+\n+namespace arrow {\n+\n+namespace py {\n+\n+#define DECLARE_CALL_UDF(TYPE_NAME, FUNCTION_SUFFIX, CONVERT_SUFFIX)               \\\n+  ARROW_PYTHON_EXPORT Status exec_function_##FUNCTION_SUFFIX(const cp::ExecBatch&, \\\n+                                                             PyObject*, int, Datum*);\n+\n+DECLARE_CALL_UDF(Scalar, scalar, scalar)\n+DECLARE_CALL_UDF(Array, array, make_array)\n\nReview comment:\n       This macro isn't saving us much at all.  Can we do away with it?\n\n##########\nFile path: cpp/src/arrow/python/udf.h\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/python/platform.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/function.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/util/cpu_info.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/pyarrow.h\"\n+#include \"arrow/python/visibility.h\"\n+\n+namespace cp = arrow::compute;\n+\n+namespace arrow {\n+\n+namespace py {\n+\n+#define DECLARE_CALL_UDF(TYPE_NAME, FUNCTION_SUFFIX, CONVERT_SUFFIX)               \\\n+  ARROW_PYTHON_EXPORT Status exec_function_##FUNCTION_SUFFIX(const cp::ExecBatch&, \\\n+                                                             PyObject*, int, Datum*);\n+\n+DECLARE_CALL_UDF(Scalar, scalar, scalar)\n+DECLARE_CALL_UDF(Array, array, make_array)\n+\n+#undef DECLARE_CALL_UDF\n+\n+class ARROW_PYTHON_EXPORT UdfBuilder {\n\nReview comment:\n       I think I'd rather see an options object (`UdfOptions`) and a function `Status RegisterScalarUdf(PyObject* function, const UdfOptions& udf_options);`\r\n   \r\n   The options object could then be a plain struct with public fields.\r\n   \n\n##########\nFile path: cpp/src/arrow/python/udf.cc\n##########\n@@ -0,0 +1,126 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/python/udf.h\"\n+\n+#include <cstddef>\n+#include <memory>\n+#include <sstream>\n+\n+#include \"arrow/compute/function.h\"\n+#include \"arrow/python/common.h\"\n+\n+namespace cp = arrow::compute;\n+\n+namespace arrow {\n+\n+namespace py {\n+\n+#define DEFINE_CALL_UDF(TYPE_NAME, FUNCTION_SUFFIX, CONVERT_SUFFIX)                      \\\n\nReview comment:\n       This is clever but we generally try to avoid macros when possible (this is to allow you to write the function once instead of two very similar versions right?) as they make reading the code a bit more difficult.  I'm a little on the fence regarding this macro because we only have two invocations.\r\n   \r\n   CC @pitrou for a second opinion\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n+        )\n+    in_types: List[InputType]\n+        list of InputType objects which defines the input \n+        types for the function\n+    out_type: DataType\n+        output type of the function\n+    callback: callable\n+        user defined function \n+    mem_allocation: str\n+        memory allocation mode \n+        \"preallocate\" or \"no_preallocate\"\n\nReview comment:\n       What does this mean?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n+        )\n+    in_types: List[InputType]\n+        list of InputType objects which defines the input \n+        types for the function\n+    out_type: DataType\n+        output type of the function\n+    callback: callable\n+        user defined function \n+    mem_allocation: str\n+        memory allocation mode \n+        \"preallocate\" or \"no_preallocate\"\n+    null_handling: str\n+        null handling mode\n+        one of \"intersect\", \"computed_preallocate\",\n+        \"computed_no_preallocate\", \n+        \"output_not_null\"\n\nReview comment:\n       What does this mean?\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+// Demonstrate registering an user-defined Arrow compute function outside of the Arrow\n\nReview comment:\n       ```suggestion\r\n   // Demonstrate registering a user-defined Arrow compute function outside of the Arrow\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n\nReview comment:\n       Same comment as before.  It seems we have too many `#include`\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This example showcases various ways to work with Datasets. It's\n+// intended to be paired with the documentation.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n\nReview comment:\n       We aren't stellar at IWYU but we should try and maintain it for our example code.  I think we also need...\r\n   \r\n   ```\r\n   #include <type_traits> // for std::enable_if\r\n   #include <vector> // for std::vector\r\n   ```\n\n##########\nFile path: cpp/src/arrow/python/udf.cc\n##########\n@@ -0,0 +1,126 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/python/udf.h\"\n+\n+#include <cstddef>\n+#include <memory>\n+#include <sstream>\n+\n+#include \"arrow/compute/function.h\"\n+#include \"arrow/python/common.h\"\n+\n+namespace cp = arrow::compute;\n+\n+namespace arrow {\n+\n+namespace py {\n+\n+#define DEFINE_CALL_UDF(TYPE_NAME, FUNCTION_SUFFIX, CONVERT_SUFFIX)                      \\\n+  Status exec_function_##FUNCTION_SUFFIX(const cp::ExecBatch& batch, PyObject* function, \\\n+                                         int num_args, Datum* out) {                     \\\n+    std::shared_ptr<TYPE_NAME> c_res_data;                                               \\\n+    PyObject* arg_tuple = PyTuple_New(num_args);                                         \\\n+    for (int arg_id = 0; arg_id < num_args; arg_id++) {                                  \\\n+      if (!batch[arg_id].is_##FUNCTION_SUFFIX()) {                                       \\\n+        return Status::Invalid(\"Input type and data type doesn't match\");                \\\n+      }                                                                                  \\\n+      auto c_data = batch[arg_id].CONVERT_SUFFIX();                                      \\\n+      PyObject* data = wrap_##FUNCTION_SUFFIX(c_data);                                   \\\n+      PyTuple_SetItem(arg_tuple, arg_id, data);                                          \\\n+    }                                                                                    \\\n+    PyObject* result = PyObject_CallObject(function, arg_tuple);                         \\\n+    if (result == NULL) {                                                                \\\n+      return Status::ExecutionError(\"Error occured in computation\");                     \\\n+    }                                                                                    \\\n+    auto res = unwrap_##FUNCTION_SUFFIX(result);                                         \\\n+    if (!res.status().ok()) {                                                            \\\n+      return res.status();                                                               \\\n+    }                                                                                    \\\n+    c_res_data = res.ValueOrDie();                                                       \\\n+    auto datum = new Datum(c_res_data);                                                  \\\n+    *out = *datum;                                                                       \\\n+    return Status::OK();                                                                 \\\n+  }\n+\n+DEFINE_CALL_UDF(Scalar, scalar, scalar)\n+DEFINE_CALL_UDF(Array, array, make_array)\n+\n+#undef DEFINE_CALL_UDF\n+\n+Status VerifyArityAndInput(cp::Arity arity, const cp::ExecBatch& batch) {\n+  bool match = (uint64_t)arity.num_args == batch.values.size();\n+  if (!match) {\n+    return Status::Invalid(\n+        \"Function Arity and Input data shape doesn't match, expceted {}\");\n\nReview comment:\n       ```suggestion\r\n           \"Function Arity and Input data shape doesn't match, expected {}\");\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+// Demonstrate registering an user-defined Arrow compute function outside of the Arrow\n+// source tree\n+\n+namespace cp = ::arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::RecordBatch>> GetSampleRecordBatch(\n+    const arrow::ArrayVector array_vector, const arrow::FieldVector& field_vector) {\n+  std::shared_ptr<arrow::RecordBatch> record_batch;\n+  ARROW_ASSIGN_OR_RAISE(auto struct_result,\n+                        arrow::StructArray::Make(array_vector, field_vector));\n+  return record_batch->FromStructArray(struct_result);\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {\n+      arrow::field(\"a\", arrow::int64()), arrow::field(\"x\", arrow::int64()),\n+      arrow::field(\"y\", arrow::int64()), arrow::field(\"z\", arrow::int64()),\n+      arrow::field(\"b\", arrow::boolean())};\n+\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({1, 2, 3, 4, 5, 6}));\n+  ARROW_ASSIGN_OR_RAISE(auto x,\n+                        GetArrayDataSample<arrow::Int64Type>({21, 22, 23, 24, 25, 26}));\n+  ARROW_ASSIGN_OR_RAISE(auto y,\n+                        GetArrayDataSample<arrow::Int64Type>({31, 32, 33, 34, 35, 36}));\n+  ARROW_ASSIGN_OR_RAISE(auto z,\n+                        GetArrayDataSample<arrow::Int64Type>({41, 42, 43, 44, 45, 46}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array, GetArrayDataSample<arrow::BooleanType>(\n+                                             {false, true, false, true, true, false}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, x, y, z, bool_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 6);\n+\n+  return table;\n+}\n+\n+class UDFOptionsType : public cp::FunctionOptionsType {\n+  const char* type_name() const override { return \"UDFOptionsType\"; }\n+  std::string Stringify(const cp::FunctionOptions&) const override {\n+    return \"UDFOptionsType\";\n+  }\n+  bool Compare(const cp::FunctionOptions&, const cp::FunctionOptions&) const override {\n+    return true;\n+  }\n+  std::unique_ptr<cp::FunctionOptions> Copy(const cp::FunctionOptions&) const override;\n+};\n+\n+cp::FunctionOptionsType* GetUDFOptionsType() {\n+  static UDFOptionsType options_type;\n+  return &options_type;\n+}\n+\n+class UDFOptions : public cp::FunctionOptions {\n+ public:\n+  UDFOptions() : cp::FunctionOptions(GetUDFOptionsType()) {}\n+};\n+\n+std::unique_ptr<cp::FunctionOptions> UDFOptionsType::Copy(\n+    const cp::FunctionOptions&) const {\n+  return std::unique_ptr<cp::FunctionOptions>(new UDFOptions());\n+}\n+\n+class ExampleNodeOptions : public cp::ExecNodeOptions {};\n+\n+// a basic ExecNode which ignores all input batches\n+class ExampleNode : public cp::ExecNode {\n+ public:\n+  ExampleNode(ExecNode* input, const ExampleNodeOptions&)\n+      : ExecNode(/*plan=*/input->plan(), /*inputs=*/{input},\n+                 /*input_labels=*/{\"ignored\"},\n+                 /*output_schema=*/input->output_schema(), /*num_outputs=*/1) {}\n+\n+  const char* kind_name() const override { return \"ExampleNode\"; }\n+\n+  arrow::Status StartProducing() override {\n+    outputs_[0]->InputFinished(this, 0);\n+    return arrow::Status::OK();\n+  }\n+\n+  void ResumeProducing(ExecNode* output) override {}\n+  void PauseProducing(ExecNode* output) override {}\n+\n+  void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+  void StopProducing() override { inputs_[0]->StopProducing(); }\n+\n+  void InputReceived(ExecNode* input, cp::ExecBatch batch) override {}\n+  void ErrorReceived(ExecNode* input, arrow::Status error) override {}\n+  void InputFinished(ExecNode* input, int total_batches) override {}\n+\n+  arrow::Future<> finished() override { return inputs_[0]->finished(); }\n+};\n+\n+arrow::Result<cp::ExecNode*> ExampleExecNodeFactory(cp::ExecPlan* plan,\n+                                                    std::vector<cp::ExecNode*> inputs,\n+                                                    const cp::ExecNodeOptions& options) {\n+  const auto& example_options =\n+      arrow::internal::checked_cast<const ExampleNodeOptions&>(options);\n+\n+  return plan->EmplaceNode<ExampleNode>(inputs[0], example_options);\n+}\n+\n+const cp::FunctionDoc func_doc{\n+    \"User-defined-function usage to demonstrate registering an out-of-tree function\",\n+    \"returns x + y + z\",\n+    {\"x\", \"y\", \"z\"},\n+    \"UDFOptions\"};\n+\n+arrow::Status Execute() {\n+  const std::string name = \"x+x\";\n+  auto func = std::make_shared<cp::ScalarFunction>(name, cp::Arity::Ternary(), &func_doc);\n+\n+  auto exec_func = [](cp::KernelContext* ctx, const cp::ExecBatch& batch,\n\nReview comment:\n       Can you make this an actual function instead of a lambda?\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This example showcases various ways to work with Datasets. It's\n+// intended to be paired with the documentation.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+namespace cp = arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {arrow::field(\"a\", arrow::int64()),\n+                       arrow::field(\"b\", arrow::boolean()),\n+                       arrow::field(\"c\", arrow::int64())};\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({0, 1, 2, 0, 4, 1, 0, 5}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array,\n+                        GetArrayDataSample<arrow::BooleanType>(\n+                            {false, true, false, true, true, false, true, false}));\n+  ARROW_ASSIGN_OR_RAISE(auto data_array, GetArrayDataSample<arrow::Int64Type>(\n+                                             {10, 11, 12, 10, 11, 11, 10, 15}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, bool_array, data_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 8);\n+\n+  return table;\n+}\n+\n+arrow::Status DoAggregate() {\n+  auto maybe_plan = cp::ExecPlan::Make();\n+  ABORT_ON_FAILURE(maybe_plan.status());\n+  auto plan = maybe_plan.ValueOrDie();\n+  cp::ExecContext exec_context(arrow::default_memory_pool(),\n+                               ::arrow::internal::GetCpuThreadPool());\n+\n+  ARROW_ASSIGN_OR_RAISE(auto table, GetTable());\n+\n+  std::cout << \"Source Table\" << std::endl;\n+\n+  std::cout << table->ToString() << std::endl;\n+\n+  std::shared_ptr<arrow::Table> out;\n+  cp::CountOptions options(cp::CountOptions::ONLY_VALID);\n+  auto aggregate_options = cp::AggregateNodeOptions{/*aggregates=*/{{\"sum\", &options}},\n+                                                    /*targets=*/{\"c\"},\n+                                                    /*names=*/{\"count(c)\"},\n+                                                    /*keys=*/{}};\n+  auto schema = arrow::schema({arrow::field(\"count(c)\", arrow::int64())});\n+\n+  ABORT_ON_FAILURE(cp::Declaration::Sequence(\n+                       {\n+                           {\"table_source\", cp::TableSourceNodeOptions{table, 2}},\n+                           {\"aggregate\", aggregate_options},\n+                           {\"table_sink\", cp::TableSinkNodeOptions{&out, schema}},\n+                       })\n+                       .AddToPlan(plan.get())\n+                       .status());\n+\n+  ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+  std::cout << \"Output Table Data : \" << std::endl;\n+  std::cout << out->ToString() << std::endl;\n+\n+  auto future = plan->finished();\n+\n+  return future.status();\n+}\n+\n+int main(int argc, char** argv) {\n\nReview comment:\n       How is this example different than `SourceScalarAggregateSinkExample`?  I don't know that it needs to be but I'm wondering the motivation here.\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -199,6 +202,135 @@ FunctionDoc = namedtuple(\n      \"options_required\"))\n \n \n+cdef wrap_arity(const CArity c_arity):\n+    \"\"\"\n+    Wrap a C++ Arity in an Arity object\n+    \"\"\"\n+    cdef Arity arity = Arity.__new__(Arity)\n+    arity.init(c_arity)\n+    return arity\n+\n+\n+cdef wrap_input_type(const CInputType c_input_type):\n+    \"\"\"\n+    Wrap a C++ InputType in an InputType object\n+    \"\"\"\n+    cdef InputType input_type = InputType.__new__(InputType)\n+    input_type.init(c_input_type)\n+    return input_type\n+\n+\n+cdef class InputType(_Weakrefable):\n+    \"\"\"\n+    An interface for defining input-types for streaming execution engine\n+    applications. \n+    \"\"\"\n+\n+    def __init__(self):\n+        raise TypeError(\"Cannot use constructor to initialize InputType\")\n+\n+    cdef void init(self, const CInputType &input_type):\n+        self.input_type = input_type\n+\n+    @staticmethod\n+    def scalar(data_type):\n+        \"\"\"\n+        create a scalar input type of the given data type\n+\n+        Parameter\n+        ---------\n+        data_type: DataType\n+\n+        Examples\n+        --------\n+\n+        >>> import pyarrow as pa\n+        >>> from pyarrow.compute import InputType\n+        >>> in_type = InputType.scalar(pa.int32())\n+        <pyarrow._compute.InputType object at 0x1029fdcb0>\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CDataType] c_data_type\n+            CInputType c_input_type\n+        c_data_type = pyarrow_unwrap_data_type(data_type)\n+        c_input_type = CInputType.Scalar(c_data_type)\n+        return wrap_input_type(c_input_type)\n+\n+    @staticmethod\n+    def array(data_type):\n+        \"\"\"\n+        create an array input type of the given data type\n+\n+        Parameter\n+        ---------\n+        data_type: DataType\n+\n+        Examples\n+        --------\n+\n+        >>> import pyarrow as pa\n+        >>> from pyarrow.compute import InputType\n+        >>> in_type = InputType.array(pa.int32())\n+        <pyarrow._compute.InputType object at 0x102ba4850>\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CDataType] c_data_type\n+            CInputType c_input_type\n+        c_data_type = pyarrow_unwrap_data_type(data_type)\n+        c_input_type = CInputType.Array(c_data_type)\n+        return wrap_input_type(c_input_type)\n+\n+\n+cdef class Arity(_Weakrefable):\n\nReview comment:\n       Why can't arity just be an integer?\n\n##########\nFile path: python/examples/udf/udf_example.py\n##########\n@@ -0,0 +1,322 @@\n+from typing import List\n+import pyarrow as pa\n+from pyarrow import compute as pc\n+from pyarrow.compute import register_function\n+from pyarrow.compute import Arity, InputType\n+\n+\n+def get_function_doc(summary: str, desc: str, arg_names: List[str],\n+                     options_class: str, options_required: bool = False):\n+    func_doc = {}\n+    func_doc[\"summary\"] = summary\n+    func_doc[\"description\"] = desc\n+    func_doc[\"arg_names\"] = arg_names\n+    func_doc[\"options_class\"] = options_class\n+    func_doc[\"options_required\"] = False\n+    return func_doc\n+\n+\n+\"\"\"\n+Array Usage\n+\"\"\"\n+\n+# Example 1: Array Unary\n+print(\"=\" * 80)\n+print(\"Example 1: Array Unary\")\n+print(\"=\" * 80)\n+\n+\n+def add_constant(array):\n+    return pc.call_function(\"add\", [array, 1])\n+\n+\n+func_name_1 = \"py_add_func\"\n+arity_1 = Arity.unary()\n+in_types_1 = [InputType.array(pa.int64())]\n+out_type_1 = pa.int64()\n+doc_1 = get_function_doc(\"add function\", \"test add function\",\n+                         [\"value\"], \"None\")\n\nReview comment:\n       ```suggestion\r\n   doc_1 = get_function_doc(\"add one function\", \"adds one to values\",\r\n                            [\"value\"], \"None\")\r\n   ```\r\n   Let's pretend this is a real case instead of \"test add function\" to make it more clear the intent of the field.\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       Since this PR is for scalar UDF could we add this example in a separate PR?\n\n##########\nFile path: python/examples/udf/udf_example.py\n##########\n@@ -0,0 +1,322 @@\n+from typing import List\n+import pyarrow as pa\n+from pyarrow import compute as pc\n+from pyarrow.compute import register_function\n+from pyarrow.compute import Arity, InputType\n+\n+\n+def get_function_doc(summary: str, desc: str, arg_names: List[str],\n+                     options_class: str, options_required: bool = False):\n+    func_doc = {}\n+    func_doc[\"summary\"] = summary\n+    func_doc[\"description\"] = desc\n+    func_doc[\"arg_names\"] = arg_names\n+    func_doc[\"options_class\"] = options_class\n+    func_doc[\"options_required\"] = False\n+    return func_doc\n+\n+\n+\"\"\"\n+Array Usage\n+\"\"\"\n+\n+# Example 1: Array Unary\n+print(\"=\" * 80)\n+print(\"Example 1: Array Unary\")\n+print(\"=\" * 80)\n+\n+\n+def add_constant(array):\n+    return pc.call_function(\"add\", [array, 1])\n\nReview comment:\n       ```suggestion\r\n   def add_one(array):\r\n       return pc.call_function(\"add\", [array, 1])\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+// Demonstrate registering an user-defined Arrow compute function outside of the Arrow\n+// source tree\n+\n+namespace cp = ::arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::RecordBatch>> GetSampleRecordBatch(\n+    const arrow::ArrayVector array_vector, const arrow::FieldVector& field_vector) {\n+  std::shared_ptr<arrow::RecordBatch> record_batch;\n+  ARROW_ASSIGN_OR_RAISE(auto struct_result,\n+                        arrow::StructArray::Make(array_vector, field_vector));\n+  return record_batch->FromStructArray(struct_result);\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {\n+      arrow::field(\"a\", arrow::int64()), arrow::field(\"x\", arrow::int64()),\n+      arrow::field(\"y\", arrow::int64()), arrow::field(\"z\", arrow::int64()),\n+      arrow::field(\"b\", arrow::boolean())};\n+\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({1, 2, 3, 4, 5, 6}));\n+  ARROW_ASSIGN_OR_RAISE(auto x,\n+                        GetArrayDataSample<arrow::Int64Type>({21, 22, 23, 24, 25, 26}));\n+  ARROW_ASSIGN_OR_RAISE(auto y,\n+                        GetArrayDataSample<arrow::Int64Type>({31, 32, 33, 34, 35, 36}));\n+  ARROW_ASSIGN_OR_RAISE(auto z,\n+                        GetArrayDataSample<arrow::Int64Type>({41, 42, 43, 44, 45, 46}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array, GetArrayDataSample<arrow::BooleanType>(\n+                                             {false, true, false, true, true, false}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, x, y, z, bool_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 6);\n+\n+  return table;\n+}\n+\n+class UDFOptionsType : public cp::FunctionOptionsType {\n+  const char* type_name() const override { return \"UDFOptionsType\"; }\n+  std::string Stringify(const cp::FunctionOptions&) const override {\n+    return \"UDFOptionsType\";\n+  }\n+  bool Compare(const cp::FunctionOptions&, const cp::FunctionOptions&) const override {\n+    return true;\n+  }\n+  std::unique_ptr<cp::FunctionOptions> Copy(const cp::FunctionOptions&) const override;\n+};\n+\n+cp::FunctionOptionsType* GetUDFOptionsType() {\n+  static UDFOptionsType options_type;\n+  return &options_type;\n+}\n+\n+class UDFOptions : public cp::FunctionOptions {\n+ public:\n+  UDFOptions() : cp::FunctionOptions(GetUDFOptionsType()) {}\n+};\n+\n+std::unique_ptr<cp::FunctionOptions> UDFOptionsType::Copy(\n+    const cp::FunctionOptions&) const {\n+  return std::unique_ptr<cp::FunctionOptions>(new UDFOptions());\n+}\n+\n+class ExampleNodeOptions : public cp::ExecNodeOptions {};\n+\n+// a basic ExecNode which ignores all input batches\n+class ExampleNode : public cp::ExecNode {\n+ public:\n+  ExampleNode(ExecNode* input, const ExampleNodeOptions&)\n+      : ExecNode(/*plan=*/input->plan(), /*inputs=*/{input},\n+                 /*input_labels=*/{\"ignored\"},\n+                 /*output_schema=*/input->output_schema(), /*num_outputs=*/1) {}\n+\n+  const char* kind_name() const override { return \"ExampleNode\"; }\n+\n+  arrow::Status StartProducing() override {\n+    outputs_[0]->InputFinished(this, 0);\n+    return arrow::Status::OK();\n+  }\n+\n+  void ResumeProducing(ExecNode* output) override {}\n+  void PauseProducing(ExecNode* output) override {}\n+\n+  void StopProducing(ExecNode* output) override { inputs_[0]->StopProducing(this); }\n+  void StopProducing() override { inputs_[0]->StopProducing(); }\n+\n+  void InputReceived(ExecNode* input, cp::ExecBatch batch) override {}\n+  void ErrorReceived(ExecNode* input, arrow::Status error) override {}\n+  void InputFinished(ExecNode* input, int total_batches) override {}\n+\n+  arrow::Future<> finished() override { return inputs_[0]->finished(); }\n+};\n+\n+arrow::Result<cp::ExecNode*> ExampleExecNodeFactory(cp::ExecPlan* plan,\n+                                                    std::vector<cp::ExecNode*> inputs,\n+                                                    const cp::ExecNodeOptions& options) {\n+  const auto& example_options =\n+      arrow::internal::checked_cast<const ExampleNodeOptions&>(options);\n+\n+  return plan->EmplaceNode<ExampleNode>(inputs[0], example_options);\n+}\n+\n+const cp::FunctionDoc func_doc{\n+    \"User-defined-function usage to demonstrate registering an out-of-tree function\",\n+    \"returns x + y + z\",\n+    {\"x\", \"y\", \"z\"},\n+    \"UDFOptions\"};\n+\n+arrow::Status Execute() {\n+  const std::string name = \"x+x\";\n\nReview comment:\n       Why `x+x` and not `x+y+z`  Or maybe `add_three` or something so it's obvious the difference between the projected field name (the key in your expression dictionary passed into project) and the function name (what is passed into `call`).\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -479,6 +611,9 @@ cdef class FunctionRegistry(_Weakrefable):\n             func = GetResultValue(self.registry.GetFunction(c_name))\n         return wrap_function(func)\n \n+    def register_function(self, name, arity, input_types, output_type, function_kind):\n+        pass\n+\n\nReview comment:\n       What's this?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n\nReview comment:\n       ```suggestion\r\n       Register a user-defined-function \r\n   ```\r\n   What's `(function)`?\n\n##########\nFile path: python/examples/udf/udf_example.py\n##########\n@@ -0,0 +1,322 @@\n+from typing import List\n+import pyarrow as pa\n+from pyarrow import compute as pc\n+from pyarrow.compute import register_function\n+from pyarrow.compute import Arity, InputType\n+\n+\n+def get_function_doc(summary: str, desc: str, arg_names: List[str],\n+                     options_class: str, options_required: bool = False):\n+    func_doc = {}\n+    func_doc[\"summary\"] = summary\n+    func_doc[\"description\"] = desc\n+    func_doc[\"arg_names\"] = arg_names\n+    func_doc[\"options_class\"] = options_class\n+    func_doc[\"options_required\"] = False\n+    return func_doc\n+\n+\n+\"\"\"\n+Array Usage\n+\"\"\"\n+\n+# Example 1: Array Unary\n+print(\"=\" * 80)\n+print(\"Example 1: Array Unary\")\n+print(\"=\" * 80)\n+\n+\n+def add_constant(array):\n+    return pc.call_function(\"add\", [array, 1])\n+\n+\n+func_name_1 = \"py_add_func\"\n\nReview comment:\n       ```suggestion\r\n   func_name_1 = \"py_add_one_func\"\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+// Demonstrate registering an user-defined Arrow compute function outside of the Arrow\n+// source tree\n+\n+namespace cp = ::arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::RecordBatch>> GetSampleRecordBatch(\n+    const arrow::ArrayVector array_vector, const arrow::FieldVector& field_vector) {\n+  std::shared_ptr<arrow::RecordBatch> record_batch;\n+  ARROW_ASSIGN_OR_RAISE(auto struct_result,\n+                        arrow::StructArray::Make(array_vector, field_vector));\n+  return record_batch->FromStructArray(struct_result);\n+}\n\nReview comment:\n       Is this used?\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n\nReview comment:\n       Does this need to be unique?  Can I register multiple functions with different arity / in_types but the same name?\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+// Demonstrate registering an user-defined Arrow compute function outside of the Arrow\n+// source tree\n+\n+namespace cp = ::arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::RecordBatch>> GetSampleRecordBatch(\n+    const arrow::ArrayVector array_vector, const arrow::FieldVector& field_vector) {\n+  std::shared_ptr<arrow::RecordBatch> record_batch;\n+  ARROW_ASSIGN_OR_RAISE(auto struct_result,\n+                        arrow::StructArray::Make(array_vector, field_vector));\n+  return record_batch->FromStructArray(struct_result);\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {\n+      arrow::field(\"a\", arrow::int64()), arrow::field(\"x\", arrow::int64()),\n+      arrow::field(\"y\", arrow::int64()), arrow::field(\"z\", arrow::int64()),\n+      arrow::field(\"b\", arrow::boolean())};\n+\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({1, 2, 3, 4, 5, 6}));\n+  ARROW_ASSIGN_OR_RAISE(auto x,\n+                        GetArrayDataSample<arrow::Int64Type>({21, 22, 23, 24, 25, 26}));\n+  ARROW_ASSIGN_OR_RAISE(auto y,\n+                        GetArrayDataSample<arrow::Int64Type>({31, 32, 33, 34, 35, 36}));\n+  ARROW_ASSIGN_OR_RAISE(auto z,\n+                        GetArrayDataSample<arrow::Int64Type>({41, 42, 43, 44, 45, 46}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array, GetArrayDataSample<arrow::BooleanType>(\n+                                             {false, true, false, true, true, false}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, x, y, z, bool_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 6);\n+\n+  return table;\n+}\n+\n+class UDFOptionsType : public cp::FunctionOptionsType {\n+  const char* type_name() const override { return \"UDFOptionsType\"; }\n+  std::string Stringify(const cp::FunctionOptions&) const override {\n+    return \"UDFOptionsType\";\n+  }\n+  bool Compare(const cp::FunctionOptions&, const cp::FunctionOptions&) const override {\n+    return true;\n+  }\n+  std::unique_ptr<cp::FunctionOptions> Copy(const cp::FunctionOptions&) const override;\n\nReview comment:\n       Where's the implementation?\n\n##########\nFile path: python/examples/udf/udf_example.py\n##########\n@@ -0,0 +1,322 @@\n+from typing import List\n+import pyarrow as pa\n+from pyarrow import compute as pc\n+from pyarrow.compute import register_function\n+from pyarrow.compute import Arity, InputType\n+\n+\n+def get_function_doc(summary: str, desc: str, arg_names: List[str],\n+                     options_class: str, options_required: bool = False):\n+    func_doc = {}\n+    func_doc[\"summary\"] = summary\n+    func_doc[\"description\"] = desc\n+    func_doc[\"arg_names\"] = arg_names\n+    func_doc[\"options_class\"] = options_class\n+    func_doc[\"options_required\"] = False\n+    return func_doc\n+\n+\n+\"\"\"\n+Array Usage\n+\"\"\"\n+\n+# Example 1: Array Unary\n+print(\"=\" * 80)\n+print(\"Example 1: Array Unary\")\n+print(\"=\" * 80)\n+\n+\n+def add_constant(array):\n+    return pc.call_function(\"add\", [array, 1])\n+\n+\n+func_name_1 = \"py_add_func\"\n+arity_1 = Arity.unary()\n\nReview comment:\n       Can we use scopes or something to get rid of all these variable suffixes?  E.g.\r\n   \r\n   ```\r\n   def array_unary_example():\r\n     func_name = ...\r\n     arity = ...\r\n   ```\n\n##########\nFile path: python/pyarrow/public-api.pxi\n##########\n@@ -25,11 +25,9 @@ from pyarrow.includes.libarrow cimport (CArray, CDataType, CField,\n # You cannot assign something to a dereferenced pointer in Cython thus these\n # methods don't use Status to indicate a successful operation.\n \n-\n\nReview comment:\n       Let's avoid formatting changes to unrelated files\n\n##########\nFile path: python/pyarrow/tests/test_udf.py\n##########\n@@ -0,0 +1,289 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from typing import List\n+\n+import pytest\n+\n+import pyarrow as pa\n+from pyarrow import compute as pc\n+from pyarrow.compute import register_function\n+from pyarrow.compute import Arity, InputType\n+\n+\n+def get_function_doc(summary: str, desc: str, arg_names: List[str],\n+                     options_class: str, options_required: bool = False):\n+    func_doc = {}\n+    func_doc[\"summary\"] = summary\n+    func_doc[\"description\"] = desc\n+    func_doc[\"arg_names\"] = arg_names\n+    func_doc[\"options_class\"] = options_class\n+    func_doc[\"options_required\"] = False\n+    return func_doc\n+\n+# scalar unary function data\n+\n+\n+unary_doc = get_function_doc(\"add function\",\n+                             \"test add function\",\n+                             [\"scalar1\"],\n+                             \"None\")\n+\n+\n+def unary_function(scalar1):\n\nReview comment:\n       We should eventually add tests for negative cases as well (missing arguments, invalid values, etc.)\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n+        )\n+    in_types: List[InputType]\n+        list of InputType objects which defines the input \n+        types for the function\n+    out_type: DataType\n+        output type of the function\n+    callback: callable\n+        user defined function \n\nReview comment:\n       What does this function get passed in?  What does it need to return?  We can find this information out from the examples but this seems a little sparse.\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This example showcases various ways to work with Datasets. It's\n+// intended to be paired with the documentation.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n\nReview comment:\n       Seems odd that I would still need to `#include` this many files.  I think it should be sufficient to do:\r\n   ```\r\n   #include <arrow/api.h>\r\n   #include <arrow/compute/api.h>\r\n   #include <arrow/compute/exec/exec_plan.h> // ARROW-15263\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n\nReview comment:\n       ```\r\n   #include <vector> // std::vector\r\n   #include <string> // std::string\r\n   #include <utility> // std::move\r\n   ```\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n\nReview comment:\n       It's ok to do this in pieces but can we just leave these keys out instead of saying \"not supported yet\"?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:15:33.008+0000",
                    "updated": "2022-03-22T03:15:33.008+0000",
                    "started": "2022-03-22T03:15:33.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745553",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831735697\n\n\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       Yes indeed. I also added a note just in-case it is not related. Will add in a minor PR. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:21:34.814+0000",
                    "updated": "2022-03-22T03:21:34.814+0000",
                    "started": "2022-03-22T03:21:34.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745554",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831736619\n\n\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This example showcases various ways to work with Datasets. It's\n+// intended to be paired with the documentation.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+namespace cp = arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {arrow::field(\"a\", arrow::int64()),\n+                       arrow::field(\"b\", arrow::boolean()),\n+                       arrow::field(\"c\", arrow::int64())};\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({0, 1, 2, 0, 4, 1, 0, 5}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array,\n+                        GetArrayDataSample<arrow::BooleanType>(\n+                            {false, true, false, true, true, false, true, false}));\n+  ARROW_ASSIGN_OR_RAISE(auto data_array, GetArrayDataSample<arrow::Int64Type>(\n+                                             {10, 11, 12, 10, 11, 11, 10, 15}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, bool_array, data_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 8);\n+\n+  return table;\n+}\n+\n+arrow::Status DoAggregate() {\n+  auto maybe_plan = cp::ExecPlan::Make();\n+  ABORT_ON_FAILURE(maybe_plan.status());\n+  auto plan = maybe_plan.ValueOrDie();\n+  cp::ExecContext exec_context(arrow::default_memory_pool(),\n+                               ::arrow::internal::GetCpuThreadPool());\n+\n+  ARROW_ASSIGN_OR_RAISE(auto table, GetTable());\n+\n+  std::cout << \"Source Table\" << std::endl;\n+\n+  std::cout << table->ToString() << std::endl;\n+\n+  std::shared_ptr<arrow::Table> out;\n+  cp::CountOptions options(cp::CountOptions::ONLY_VALID);\n+  auto aggregate_options = cp::AggregateNodeOptions{/*aggregates=*/{{\"sum\", &options}},\n+                                                    /*targets=*/{\"c\"},\n+                                                    /*names=*/{\"count(c)\"},\n+                                                    /*keys=*/{}};\n+  auto schema = arrow::schema({arrow::field(\"count(c)\", arrow::int64())});\n+\n+  ABORT_ON_FAILURE(cp::Declaration::Sequence(\n+                       {\n+                           {\"table_source\", cp::TableSourceNodeOptions{table, 2}},\n+                           {\"aggregate\", aggregate_options},\n+                           {\"table_sink\", cp::TableSinkNodeOptions{&out, schema}},\n+                       })\n+                       .AddToPlan(plan.get())\n+                       .status());\n+\n+  ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+  std::cout << \"Output Table Data : \" << std::endl;\n+  std::cout << out->ToString() << std::endl;\n+\n+  auto future = plan->finished();\n+\n+  return future.status();\n+}\n+\n+int main(int argc, char** argv) {\n\nReview comment:\n       Yes, that's a good point. I thought that aggregations could be a little more interesting topic for many users. That's why I wrote a separate one. I can extend this one further with a good use case, if that is a better contribution than the current one. And can do a separate PR for that. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:24:22.401+0000",
                    "updated": "2022-03-22T03:24:22.401+0000",
                    "started": "2022-03-22T03:24:22.401+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745555",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831738103\n\n\n\n##########\nFile path: cpp/src/arrow/python/udf.cc\n##########\n@@ -0,0 +1,126 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/python/udf.h\"\n+\n+#include <cstddef>\n+#include <memory>\n+#include <sstream>\n+\n+#include \"arrow/compute/function.h\"\n+#include \"arrow/python/common.h\"\n+\n+namespace cp = arrow::compute;\n+\n+namespace arrow {\n+\n+namespace py {\n+\n+#define DEFINE_CALL_UDF(TYPE_NAME, FUNCTION_SUFFIX, CONVERT_SUFFIX)                      \\\n\nReview comment:\n       I see your point. I also thought about this a few times, I ended up writing almost the same code for the two cases that's why I thought of simplying it. It's hard to read and debug as well. I definitely can fallback to the original version of that function implementation. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:28:17.281+0000",
                    "updated": "2022-03-22T03:28:17.281+0000",
                    "started": "2022-03-22T03:28:17.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745556",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745557",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831738300\n\n\n\n##########\nFile path: cpp/src/arrow/python/udf.h\n##########\n@@ -0,0 +1,112 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/python/platform.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+\n+#include \"arrow/compute/api_scalar.h\"\n+#include \"arrow/compute/cast.h\"\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/compute/function.h\"\n+#include \"arrow/compute/registry.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/util/cpu_info.h\"\n+#include \"arrow/util/logging.h\"\n+\n+#include \"arrow/python/common.h\"\n+#include \"arrow/python/pyarrow.h\"\n+#include \"arrow/python/visibility.h\"\n+\n+namespace cp = arrow::compute;\n+\n+namespace arrow {\n+\n+namespace py {\n+\n+#define DECLARE_CALL_UDF(TYPE_NAME, FUNCTION_SUFFIX, CONVERT_SUFFIX)               \\\n+  ARROW_PYTHON_EXPORT Status exec_function_##FUNCTION_SUFFIX(const cp::ExecBatch&, \\\n+                                                             PyObject*, int, Datum*);\n+\n+DECLARE_CALL_UDF(Scalar, scalar, scalar)\n+DECLARE_CALL_UDF(Array, array, make_array)\n+\n+#undef DECLARE_CALL_UDF\n+\n+class ARROW_PYTHON_EXPORT UdfBuilder {\n\nReview comment:\n       Sure, I we can add that option. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:28:49.817+0000",
                    "updated": "2022-03-22T03:28:49.817+0000",
                    "started": "2022-03-22T03:28:49.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745557",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831739519\n\n\n\n##########\nFile path: python/examples/udf/udf_example.py\n##########\n@@ -0,0 +1,322 @@\n+from typing import List\n+import pyarrow as pa\n+from pyarrow import compute as pc\n+from pyarrow.compute import register_function\n+from pyarrow.compute import Arity, InputType\n+\n+\n+def get_function_doc(summary: str, desc: str, arg_names: List[str],\n+                     options_class: str, options_required: bool = False):\n+    func_doc = {}\n+    func_doc[\"summary\"] = summary\n+    func_doc[\"description\"] = desc\n+    func_doc[\"arg_names\"] = arg_names\n+    func_doc[\"options_class\"] = options_class\n+    func_doc[\"options_required\"] = False\n+    return func_doc\n+\n+\n+\"\"\"\n+Array Usage\n+\"\"\"\n+\n+# Example 1: Array Unary\n+print(\"=\" * 80)\n+print(\"Example 1: Array Unary\")\n+print(\"=\" * 80)\n+\n+\n+def add_constant(array):\n+    return pc.call_function(\"add\", [array, 1])\n+\n+\n+func_name_1 = \"py_add_func\"\n+arity_1 = Arity.unary()\n+in_types_1 = [InputType.array(pa.int64())]\n+out_type_1 = pa.int64()\n+doc_1 = get_function_doc(\"add function\", \"test add function\",\n+                         [\"value\"], \"None\")\n\nReview comment:\n       of course. that's better. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:32:23.422+0000",
                    "updated": "2022-03-22T03:32:23.422+0000",
                    "started": "2022-03-22T03:32:23.422+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745558",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831740573\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -199,6 +202,135 @@ FunctionDoc = namedtuple(\n      \"options_required\"))\n \n \n+cdef wrap_arity(const CArity c_arity):\n+    \"\"\"\n+    Wrap a C++ Arity in an Arity object\n+    \"\"\"\n+    cdef Arity arity = Arity.__new__(Arity)\n+    arity.init(c_arity)\n+    return arity\n+\n+\n+cdef wrap_input_type(const CInputType c_input_type):\n+    \"\"\"\n+    Wrap a C++ InputType in an InputType object\n+    \"\"\"\n+    cdef InputType input_type = InputType.__new__(InputType)\n+    input_type.init(c_input_type)\n+    return input_type\n+\n+\n+cdef class InputType(_Weakrefable):\n+    \"\"\"\n+    An interface for defining input-types for streaming execution engine\n+    applications. \n+    \"\"\"\n+\n+    def __init__(self):\n+        raise TypeError(\"Cannot use constructor to initialize InputType\")\n+\n+    cdef void init(self, const CInputType &input_type):\n+        self.input_type = input_type\n+\n+    @staticmethod\n+    def scalar(data_type):\n+        \"\"\"\n+        create a scalar input type of the given data type\n+\n+        Parameter\n+        ---------\n+        data_type: DataType\n+\n+        Examples\n+        --------\n+\n+        >>> import pyarrow as pa\n+        >>> from pyarrow.compute import InputType\n+        >>> in_type = InputType.scalar(pa.int32())\n+        <pyarrow._compute.InputType object at 0x1029fdcb0>\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CDataType] c_data_type\n+            CInputType c_input_type\n+        c_data_type = pyarrow_unwrap_data_type(data_type)\n+        c_input_type = CInputType.Scalar(c_data_type)\n+        return wrap_input_type(c_input_type)\n+\n+    @staticmethod\n+    def array(data_type):\n+        \"\"\"\n+        create an array input type of the given data type\n+\n+        Parameter\n+        ---------\n+        data_type: DataType\n+\n+        Examples\n+        --------\n+\n+        >>> import pyarrow as pa\n+        >>> from pyarrow.compute import InputType\n+        >>> in_type = InputType.array(pa.int32())\n+        <pyarrow._compute.InputType object at 0x102ba4850>\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CDataType] c_data_type\n+            CInputType c_input_type\n+        c_data_type = pyarrow_unwrap_data_type(data_type)\n+        c_input_type = CInputType.Array(c_data_type)\n+        return wrap_input_type(c_input_type)\n+\n+\n+cdef class Arity(_Weakrefable):\n\nReview comment:\n       Yes indeed we can digest it as `num_of_args` and do the object mapping internally. \r\n   It could be more Pythonic than this right? I think you're correct as this is the case in https://www.sqlite.org/c3ref/create_function.html. \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:35:25.209+0000",
                    "updated": "2022-03-22T03:35:25.209+0000",
                    "started": "2022-03-22T03:35:25.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745559",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831741292\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n\nReview comment:\n       That's a good question. Then we need to somehow create a unique signature for that before we call the C++ interface. \r\n   I see your point and it is very usable if we can provide that. So the arity, in_types can be used to generate that unique function name. Is this is a correct understanding?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:37:50.856+0000",
                    "updated": "2022-03-22T03:37:50.856+0000",
                    "started": "2022-03-22T03:37:50.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745560",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831741825\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n\nReview comment:\n       I understand, that's better. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:39:23.989+0000",
                    "updated": "2022-03-22T03:39:23.989+0000",
                    "started": "2022-03-22T03:39:23.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745561",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831742101\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n+        )\n+    in_types: List[InputType]\n+        list of InputType objects which defines the input \n+        types for the function\n+    out_type: DataType\n+        output type of the function\n+    callback: callable\n+        user defined function \n\nReview comment:\n       Sure, I can extend the docs-example. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:40:19.229+0000",
                    "updated": "2022-03-22T03:40:19.229+0000",
                    "started": "2022-03-22T03:40:19.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745563",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831742324\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n+        )\n+    in_types: List[InputType]\n+        list of InputType objects which defines the input \n+        types for the function\n+    out_type: DataType\n+        output type of the function\n+    callback: callable\n+        user defined function \n+    mem_allocation: str\n+        memory allocation mode \n+        \"preallocate\" or \"no_preallocate\"\n\nReview comment:\n       Yes, this is pretty unclear, I will enhance the docs. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:40:41.808+0000",
                    "updated": "2022-03-22T03:40:41.808+0000",
                    "started": "2022-03-22T03:40:41.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745564",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831742456\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -2179,3 +2314,205 @@ cdef CExpression _bind(Expression filter, Schema schema) except *:\n \n     return GetResultValue(filter.unwrap().Bind(\n         deref(pyarrow_unwrap_schema(schema).get())))\n+\n+\n+cdef CFunctionDoc _make_function_doc(func_doc):\n+    \"\"\"\n+    Helper function to generate the FunctionDoc\n+    \"\"\"\n+    cdef:\n+        CFunctionDoc f_doc\n+        vector[c_string] c_arg_names\n+        c_bool c_options_required\n+    if isinstance(func_doc, dict):\n+        if func_doc[\"summary\"] and isinstance(func_doc[\"summary\"], str):\n+            f_doc.summary = func_doc[\"summary\"].encode()\n+        else:\n+            raise ValueError(\"key `summary` cannot be None\")\n+\n+        if func_doc[\"description\"] and isinstance(func_doc[\"description\"], str):\n+            f_doc.description = func_doc[\"description\"].encode()\n+        else:\n+            raise ValueError(\"key `description` cannot be None\")\n+\n+        if func_doc[\"arg_names\"] and isinstance(func_doc[\"arg_names\"], list):\n+            for arg_name in func_doc[\"arg_names\"]:\n+                if isinstance(arg_name, str):\n+                    c_arg_names.push_back(arg_name.encode())\n+                else:\n+                    raise ValueError(\n+                        \"key `arg_names` must be a list of strings\")\n+            f_doc.arg_names = c_arg_names\n+        else:\n+            raise ValueError(\"key `arg_names` cannot be None\")\n+\n+        if func_doc[\"options_class\"] and isinstance(func_doc[\"options_class\"], str):\n+            f_doc.options_class = func_doc[\"options_class\"].encode()\n+        else:\n+            raise ValueError(\"key `options_class` cannot be None\")\n+\n+        if isinstance(func_doc[\"options_required\"], bool):\n+            c_options_required = func_doc[\"options_required\"]\n+            f_doc.options_required = c_options_required\n+        else:\n+            raise ValueError(\"key `options_required` must be bool\")\n+\n+        return f_doc\n+    else:\n+        raise TypeError(f\"func_doc must be a dictionary\")\n+\n+\n+cdef class UDFError(Exception):\n+    cdef dict __dict__\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message)\n+        self.extra_info = tobytes(extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+cdef class UDFRegistrationError(UDFError):\n+\n+    def __init__(self, message='', extra_info=b''):\n+        super().__init__(message, extra_info)\n+\n+    cdef CStatus to_status(self):\n+        message = tobytes(\"UDF Registration error: {}\".format(str(self)))\n+        return CStatus_UnknownError(message)\n+\n+\n+def register_function(func_name, arity, function_doc, in_types,\n+                      out_type, callback, mem_allocation=\"no_preallocate\",\n+                      null_handling=\"computed_no_preallocate\"):\n+    \"\"\"\n+    Register a user-defined-function (function) \n+\n+    Parameters\n+    ----------\n+\n+    func_name: str\n+        function name \n+    arity: Arity\n+        arity of the function\n+    function_doc: dict\n+        a dictionary object with keys \n+        (\"summary\", \n+        \"description\", \n+        \"arg_names\", \n+        \"options_class\", (not supported yet)\n+        \"options_required\" (not supported yet)\n+        )\n+    in_types: List[InputType]\n+        list of InputType objects which defines the input \n+        types for the function\n+    out_type: DataType\n+        output type of the function\n+    callback: callable\n+        user defined function \n+    mem_allocation: str\n+        memory allocation mode \n+        \"preallocate\" or \"no_preallocate\"\n+    null_handling: str\n+        null handling mode\n+        one of \"intersect\", \"computed_preallocate\",\n+        \"computed_no_preallocate\", \n+        \"output_not_null\"\n\nReview comment:\n       Yes, this needs further explanation in the docs for each possible option. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:41:04.384+0000",
                    "updated": "2022-03-22T03:41:04.384+0000",
                    "started": "2022-03-22T03:41:04.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745565",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r831742675\n\n\n\n##########\nFile path: python/pyarrow/tests/test_udf.py\n##########\n@@ -0,0 +1,289 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from typing import List\n+\n+import pytest\n+\n+import pyarrow as pa\n+from pyarrow import compute as pc\n+from pyarrow.compute import register_function\n+from pyarrow.compute import Arity, InputType\n+\n+\n+def get_function_doc(summary: str, desc: str, arg_names: List[str],\n+                     options_class: str, options_required: bool = False):\n+    func_doc = {}\n+    func_doc[\"summary\"] = summary\n+    func_doc[\"description\"] = desc\n+    func_doc[\"arg_names\"] = arg_names\n+    func_doc[\"options_class\"] = options_class\n+    func_doc[\"options_required\"] = False\n+    return func_doc\n+\n+# scalar unary function data\n+\n+\n+unary_doc = get_function_doc(\"add function\",\n+                             \"test add function\",\n+                             [\"scalar1\"],\n+                             \"None\")\n+\n+\n+def unary_function(scalar1):\n\nReview comment:\n       Yes, that's right. I will add cases for failures. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:41:55.198+0000",
                    "updated": "2022-03-22T03:41:55.198+0000",
                    "started": "2022-03-22T03:41:55.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745568",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/745571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#issuecomment-1074693774\n\n\n   @westonpace thank you for the detailed review. I will work on the suggested changes. It is exciting to write this new feature. Appreciate your support. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-22T03:44:17.910+0000",
                    "updated": "2022-03-22T03:44:17.910+0000",
                    "started": "2022-03-22T03:44:17.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "745571",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/748425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r836056283\n\n\n\n##########\nFile path: cpp/examples/arrow/aggregate_example.cc\n##########\n@@ -0,0 +1,135 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This example showcases various ways to work with Datasets. It's\n+// intended to be paired with the documentation.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+namespace cp = arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {arrow::field(\"a\", arrow::int64()),\n+                       arrow::field(\"b\", arrow::boolean()),\n+                       arrow::field(\"c\", arrow::int64())};\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({0, 1, 2, 0, 4, 1, 0, 5}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array,\n+                        GetArrayDataSample<arrow::BooleanType>(\n+                            {false, true, false, true, true, false, true, false}));\n+  ARROW_ASSIGN_OR_RAISE(auto data_array, GetArrayDataSample<arrow::Int64Type>(\n+                                             {10, 11, 12, 10, 11, 11, 10, 15}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, bool_array, data_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 8);\n+\n+  return table;\n+}\n+\n+arrow::Status DoAggregate() {\n+  auto maybe_plan = cp::ExecPlan::Make();\n+  ABORT_ON_FAILURE(maybe_plan.status());\n+  auto plan = maybe_plan.ValueOrDie();\n+  cp::ExecContext exec_context(arrow::default_memory_pool(),\n+                               ::arrow::internal::GetCpuThreadPool());\n+\n+  ARROW_ASSIGN_OR_RAISE(auto table, GetTable());\n+\n+  std::cout << \"Source Table\" << std::endl;\n+\n+  std::cout << table->ToString() << std::endl;\n+\n+  std::shared_ptr<arrow::Table> out;\n+  cp::CountOptions options(cp::CountOptions::ONLY_VALID);\n+  auto aggregate_options = cp::AggregateNodeOptions{/*aggregates=*/{{\"sum\", &options}},\n+                                                    /*targets=*/{\"c\"},\n+                                                    /*names=*/{\"count(c)\"},\n+                                                    /*keys=*/{}};\n+  auto schema = arrow::schema({arrow::field(\"count(c)\", arrow::int64())});\n+\n+  ABORT_ON_FAILURE(cp::Declaration::Sequence(\n+                       {\n+                           {\"table_source\", cp::TableSourceNodeOptions{table, 2}},\n+                           {\"aggregate\", aggregate_options},\n+                           {\"table_sink\", cp::TableSinkNodeOptions{&out, schema}},\n+                       })\n+                       .AddToPlan(plan.get())\n+                       .status());\n+\n+  ARROW_RETURN_NOT_OK(plan->StartProducing());\n+\n+  std::cout << \"Output Table Data : \" << std::endl;\n+  std::cout << out->ToString() << std::endl;\n+\n+  auto future = plan->finished();\n+\n+  return future.status();\n+}\n+\n+int main(int argc, char** argv) {\n\nReview comment:\n       Another motivation is to extend this with the UDF integration to aggregations. May be it is too early to include it in this PR. May be we can exclude it for now. What do you think? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T05:05:25.699+0000",
                    "updated": "2022-03-28T05:05:25.699+0000",
                    "started": "2022-03-28T05:05:25.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748425",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/748429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r836068466\n\n\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+// Demonstrate registering an user-defined Arrow compute function outside of the Arrow\n+// source tree\n+\n+namespace cp = ::arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::RecordBatch>> GetSampleRecordBatch(\n+    const arrow::ArrayVector array_vector, const arrow::FieldVector& field_vector) {\n+  std::shared_ptr<arrow::RecordBatch> record_batch;\n+  ARROW_ASSIGN_OR_RAISE(auto struct_result,\n+                        arrow::StructArray::Make(array_vector, field_vector));\n+  return record_batch->FromStructArray(struct_result);\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {\n+      arrow::field(\"a\", arrow::int64()), arrow::field(\"x\", arrow::int64()),\n+      arrow::field(\"y\", arrow::int64()), arrow::field(\"z\", arrow::int64()),\n+      arrow::field(\"b\", arrow::boolean())};\n+\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({1, 2, 3, 4, 5, 6}));\n+  ARROW_ASSIGN_OR_RAISE(auto x,\n+                        GetArrayDataSample<arrow::Int64Type>({21, 22, 23, 24, 25, 26}));\n+  ARROW_ASSIGN_OR_RAISE(auto y,\n+                        GetArrayDataSample<arrow::Int64Type>({31, 32, 33, 34, 35, 36}));\n+  ARROW_ASSIGN_OR_RAISE(auto z,\n+                        GetArrayDataSample<arrow::Int64Type>({41, 42, 43, 44, 45, 46}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array, GetArrayDataSample<arrow::BooleanType>(\n+                                             {false, true, false, true, true, false}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, x, y, z, bool_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 6);\n+\n+  return table;\n+}\n+\n+class UDFOptionsType : public cp::FunctionOptionsType {\n+  const char* type_name() const override { return \"UDFOptionsType\"; }\n+  std::string Stringify(const cp::FunctionOptions&) const override {\n+    return \"UDFOptionsType\";\n+  }\n+  bool Compare(const cp::FunctionOptions&, const cp::FunctionOptions&) const override {\n+    return true;\n+  }\n+  std::unique_ptr<cp::FunctionOptions> Copy(const cp::FunctionOptions&) const override;\n\nReview comment:\n       It is implemented below. \r\n   \r\n   ```c++\r\n   std::unique_ptr<cp::FunctionOptions> UDFOptionsType::Copy(\r\n       const cp::FunctionOptions&) const {\r\n     return std::unique_ptr<cp::FunctionOptions>(new UDFOptions());\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T05:40:16.141+0000",
                    "updated": "2022-03-28T05:40:16.141+0000",
                    "started": "2022-03-28T05:40:16.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748429",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/748430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r836068647\n\n\n\n##########\nFile path: cpp/examples/arrow/udf_example.cc\n##########\n@@ -0,0 +1,264 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/datum.h>\n+#include <arrow/record_batch.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <arrow/table.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/future.h>\n+#include <arrow/util/vector.h>\n+\n+#include <cstdlib>\n+#include <iostream>\n+#include <memory>\n+\n+// Demonstrate registering an user-defined Arrow compute function outside of the Arrow\n+// source tree\n+\n+namespace cp = ::arrow::compute;\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+template <typename TYPE,\n+          typename = typename std::enable_if<arrow::is_number_type<TYPE>::value |\n+                                             arrow::is_boolean_type<TYPE>::value |\n+                                             arrow::is_temporal_type<TYPE>::value>::type>\n+arrow::Result<std::shared_ptr<arrow::Array>> GetArrayDataSample(\n+    const std::vector<typename TYPE::c_type>& values) {\n+  using ARROW_ARRAY_TYPE = typename arrow::TypeTraits<TYPE>::ArrayType;\n+  using ARROW_BUILDER_TYPE = typename arrow::TypeTraits<TYPE>::BuilderType;\n+  ARROW_BUILDER_TYPE builder;\n+  ARROW_RETURN_NOT_OK(builder.Reserve(values.size()));\n+  std::shared_ptr<ARROW_ARRAY_TYPE> array;\n+  ARROW_RETURN_NOT_OK(builder.AppendValues(values));\n+  ARROW_RETURN_NOT_OK(builder.Finish(&array));\n+  return array;\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::RecordBatch>> GetSampleRecordBatch(\n+    const arrow::ArrayVector array_vector, const arrow::FieldVector& field_vector) {\n+  std::shared_ptr<arrow::RecordBatch> record_batch;\n+  ARROW_ASSIGN_OR_RAISE(auto struct_result,\n+                        arrow::StructArray::Make(array_vector, field_vector));\n+  return record_batch->FromStructArray(struct_result);\n+}\n+\n+arrow::Result<std::shared_ptr<arrow::Table>> GetTable() {\n+  std::shared_ptr<arrow::Table> table;\n+\n+  auto field_vector = {\n+      arrow::field(\"a\", arrow::int64()), arrow::field(\"x\", arrow::int64()),\n+      arrow::field(\"y\", arrow::int64()), arrow::field(\"z\", arrow::int64()),\n+      arrow::field(\"b\", arrow::boolean())};\n+\n+  ARROW_ASSIGN_OR_RAISE(auto int_array,\n+                        GetArrayDataSample<arrow::Int64Type>({1, 2, 3, 4, 5, 6}));\n+  ARROW_ASSIGN_OR_RAISE(auto x,\n+                        GetArrayDataSample<arrow::Int64Type>({21, 22, 23, 24, 25, 26}));\n+  ARROW_ASSIGN_OR_RAISE(auto y,\n+                        GetArrayDataSample<arrow::Int64Type>({31, 32, 33, 34, 35, 36}));\n+  ARROW_ASSIGN_OR_RAISE(auto z,\n+                        GetArrayDataSample<arrow::Int64Type>({41, 42, 43, 44, 45, 46}));\n+  ARROW_ASSIGN_OR_RAISE(auto bool_array, GetArrayDataSample<arrow::BooleanType>(\n+                                             {false, true, false, true, true, false}));\n+\n+  auto schema = arrow::schema(field_vector);\n+  auto data_vector = {int_array, x, y, z, bool_array};\n+\n+  table = arrow::Table::Make(schema, data_vector, 6);\n+\n+  return table;\n+}\n+\n+class UDFOptionsType : public cp::FunctionOptionsType {\n+  const char* type_name() const override { return \"UDFOptionsType\"; }\n+  std::string Stringify(const cp::FunctionOptions&) const override {\n+    return \"UDFOptionsType\";\n+  }\n+  bool Compare(const cp::FunctionOptions&, const cp::FunctionOptions&) const override {\n+    return true;\n+  }\n+  std::unique_ptr<cp::FunctionOptions> Copy(const cp::FunctionOptions&) const override;\n\nReview comment:\n       Will include a relative line number after following reviews. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T05:40:38.677+0000",
                    "updated": "2022-03-28T05:40:38.677+0000",
                    "started": "2022-03-28T05:40:38.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748430",
                    "issueId": "13427626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/worklog/748441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12590:\nURL: https://github.com/apache/arrow/pull/12590#discussion_r836096042\n\n\n\n##########\nFile path: python/pyarrow/_compute.pyx\n##########\n@@ -479,6 +611,9 @@ cdef class FunctionRegistry(_Weakrefable):\n             func = GetResultValue(self.registry.GetFunction(c_name))\n         return wrap_function(func)\n \n+    def register_function(self, name, arity, input_types, output_type, function_kind):\n+        pass\n+\n\nReview comment:\n       Typo. Removing it. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-28T06:40:16.298+0000",
                    "updated": "2022-03-28T06:40:16.298+0000",
                    "started": "2022-03-28T06:40:16.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "748441",
                    "issueId": "13427626"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 208200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7fb1df25[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7edb56a4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49c62b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@20566af9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52e7363a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@987a48b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e698ea1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7dfb2037[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16468f54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@22d1d2eb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ef4c96[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@24312e24[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 208200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 03 07:46:17 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-05-03T07:46:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15639/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-02-10T01:21:45.000+0000",
        "updated": "2022-05-06T13:51:20.000+0000",
        "timeoriginalestimate": null,
        "description": "Here we will include the concrete UDF implementation for Scalar functions",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "57h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 208200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Python] UDF Scalar Function Implementation ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427626/comment/17531087",
                    "id": "17531087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12590\n[https://github.com/apache/arrow/pull/12590]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-05-03T07:46:17.000+0000",
                    "updated": "2022-05-03T07:46:17.000+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0zfio:",
        "customfield_12314139": null
    }
}