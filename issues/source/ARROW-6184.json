{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13249824",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824",
    "key": "ARROW-6184",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12567370",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12567370",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13244549",
                    "key": "ARROW-5917",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244549",
                    "fields": {
                        "summary": "[Java] Redesign the dictionary encoder",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6184/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/292634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058\n \n \n   \r\n   \r\n   This is the second part of ARROW-5917. We provide a sort based encoder, as well as a hash table based encoder, to solve the problem with the current dictionary encoder. \r\n   \r\n   In particular, we solve the following problems with the current encoder:\r\n   \r\n       1. There are repeated conversions between Java objects and bytes (e.g. vector.getObject).\r\n       2. Unnecessary memory copy (the vector data must be copied to the hash table).\r\n       3. The hash table cannot be reused for encoding multiple vectors (other data structure & results cannot be reused either).\r\n       4. The output vector should not be created/managed by the encoder (just like in the out-of-place sorter)\r\n       5. The hash table requires that the hashCode & equals methods be implemented appropriately, but this is not guaranteed.\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-11T06:38:07.804+0000",
                    "updated": "2019-08-11T06:38:07.804+0000",
                    "started": "2019-08-11T06:38:07.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292634",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/292649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-520206338\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=h1) Report\n   > Merging [#5058](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/34dd3edece64c2268047db626fbfa967e36370a4?src=pr&el=desc) will **increase** coverage by `1.12%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5058/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #5058      +/-   ##\n   =========================================\n   + Coverage   88.58%   89.7%   +1.12%     \n   =========================================\n     Files         805     670     -135     \n     Lines       94407   99383    +4976     \n     Branches     1418       0    -1418     \n   =========================================\n   + Hits        83627   89155    +5528     \n   + Misses      10418   10228     -190     \n   + Partials      362       0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [r/R/Column.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL0NvbHVtbi5S) | | |\n   | [js/src/builder/interval.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW50ZXJ2YWwudHM=) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | [r/src/arrow\\_types.h](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvYXJyb3dfdHlwZXMuaA==) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | ... and [427 more](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=footer). Last update [34dd3ed...7d558c7](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-11T07:18:33.042+0000",
                    "updated": "2019-08-11T07:18:33.042+0000",
                    "started": "2019-08-11T07:18:33.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292649",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/292678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-520206338\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=h1) Report\n   > Merging [#5058](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/34dd3edece64c2268047db626fbfa967e36370a4?src=pr&el=desc) will **increase** coverage by `1.12%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5058/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #5058      +/-   ##\n   =========================================\n   + Coverage   88.58%   89.7%   +1.12%     \n   =========================================\n     Files         805     670     -135     \n     Lines       94407   99383    +4976     \n     Branches     1418       0    -1418     \n   =========================================\n   + Hits        83627   89150    +5523     \n   + Misses      10418   10233     -185     \n   + Partials      362       0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [r/R/Column.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL0NvbHVtbi5S) | | |\n   | [js/src/builder/interval.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW50ZXJ2YWwudHM=) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | [r/src/arrow\\_types.h](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvYXJyb3dfdHlwZXMuaA==) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | ... and [426 more](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=footer). Last update [34dd3ed...6bd419a](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-11T09:44:06.341+0000",
                    "updated": "2019-08-11T09:44:06.341+0000",
                    "started": "2019-08-11T09:44:06.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "292678",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/299891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-520206338\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=h1) Report\n   > Merging [#5058](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1a3eab50ea49414494d4f7ed91d1e2e3a6f8919f?src=pr&el=desc) will **increase** coverage by `2.09%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5058/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #5058      +/-   ##\n   =========================================\n   + Coverage   87.61%   89.7%   +2.09%     \n   =========================================\n     Files        1009     670     -339     \n     Lines      144082   99383   -44699     \n     Branches     1418       0    -1418     \n   =========================================\n   - Hits       126232   89150   -37082     \n   + Misses      17488   10233    -7255     \n   + Partials      362       0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/error.pxi](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvZXJyb3IucHhp) | `58.53% <0%> (-1.93%)` | :arrow_down: |\n   | [cpp/src/arrow/json/converter.cc](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9qc29uL2NvbnZlcnRlci5jYw==) | `90.05% <0%> (-1.76%)` | :arrow_down: |\n   | [cpp/src/arrow/json/chunked-builder.cc](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9qc29uL2NodW5rZWQtYnVpbGRlci5jYw==) | `79.91% <0%> (-1.68%)` | :arrow_down: |\n   | [cpp/src/arrow/csv/reader.cc](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcmVhZGVyLmNj) | `93.71% <0%> (-0.88%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_csv.py](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jc3YucHk=) | `98.92% <0%> (-0.14%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_parquet.py](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYXJxdWV0LnB5) | `96.4% <0%> (-0.07%)` | :arrow_down: |\n   | [python/pyarrow/\\_csv.pyx](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX2Nzdi5weXg=) | `99.2% <0%> (-0.06%)` | :arrow_down: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `86.87% <0%> (-0.06%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `99.6% <0%> (-0.01%)` | :arrow_down: |\n   | [cpp/src/arrow/util/utf8.h](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3V0ZjguaA==) | `93.33% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [350 more](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=footer). Last update [1a3eab5...6bd419a](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-23T03:36:02.358+0000",
                    "updated": "2019-08-23T03:36:02.358+0000",
                    "started": "2019-08-23T03:36:02.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "299891",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/315646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-533544046\n \n \n   @emkornfield I have revised the code according to the review comments in https://github.com/apache/arrow/pull/4994/files. Would you please take a look?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-20T12:58:57.192+0000",
                    "updated": "2019-09-20T12:58:57.192+0000",
                    "started": "2019-09-20T12:58:57.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315646",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/315647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-533544046\n \n \n   @emkornfield I have revised the code according to the review comments in https://github.com/apache/arrow/pull/4994. Would you please take a look?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-20T12:59:14.640+0000",
                    "updated": "2019-09-20T12:59:14.640+0000",
                    "started": "2019-09-20T12:59:14.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315647",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/315677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-520206338\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=h1) Report\n   > Merging [#5058](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/f19ee70888bd56d78a3bb11afa549d800656bc75?src=pr&el=desc) will **increase** coverage by `1.05%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5058/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5058      +/-   ##\n   ==========================================\n   + Coverage   88.62%   89.67%   +1.05%     \n   ==========================================\n     Files         958      708     -250     \n     Lines      127400   108068   -19332     \n     Branches     1495        0    -1495     \n   ==========================================\n   - Hits       112912    96915   -15997     \n   + Misses      14123    11153    -2970     \n   + Partials      365        0     -365\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/filesystem/s3\\_internal.h](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9maWxlc3lzdGVtL3MzX2ludGVybmFsLmg=) | `90.74% <0%> (-3.71%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread\\_pool\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZF9wb29sX3Rlc3QuY2M=) | `97.66% <0%> (-0.94%)` | :arrow_down: |\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [r/R/filesystem.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL2ZpbGVzeXN0ZW0uUg==) | | |\n   | [r/R/list.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL2xpc3QuUg==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [r/src/array\\_to\\_vector.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvYXJyYXlfdG9fdmVjdG9yLmNwcA==) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | ... and [242 more](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=footer). Last update [f19ee70...b4b3965](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-20T13:46:50.059+0000",
                    "updated": "2019-09-20T13:46:50.059+0000",
                    "started": "2019-09-20T13:46:50.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315677",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/322852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-538074410\n \n \n   @emkornfield ping?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:43:57.728+0000",
                    "updated": "2019-10-03T18:43:57.728+0000",
                    "started": "2019-10-03T18:43:57.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322852",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/323491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r331570990\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n+\n+  /**\n+   * The dictionary for encoding/decoding.\n+   * It must be sorted.\n+   */\n+  private final D dictionary;\n+\n+  /**\n+   * The hasher used to compute the hash code.\n+   */\n+  private final ArrowBufHasher hasher;\n+\n+  /**\n+   * A flag indicating if null should be encoded.\n+   */\n+  private final boolean encodeNull;\n+\n+  /**\n+   * The hash map for distinct dictionary entries.\n+   * The key is the pointer to the dictionary element, whereas the value is the index in the dictionary.\n+   */\n+  private HashMap<ArrowBufPointer, Integer> hashMap = new HashMap<>();\n+\n+  /**\n+   * The pointer used to probe each element to encode.\n+   */\n+  private ArrowBufPointer reusablePointer;\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   *\n+   */\n+  public HashTableDictionaryEncoder(D dictionary) {\n+    this(dictionary, false);\n+  }\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   * @param encodeNull a flag indicating if null should be encoded.\n+   *     It determines the behaviors for processing null values in the input during encoding/decoding.\n+   *    <li>\n+   *       For encoding, when a null is encountered in the input,\n+   *       1) If the flag is set to true, the encoder searches for the value in the dictionary,\n+   *       and outputs the index in the dictionary.\n+   *       2) If the flag is set to false, the encoder simply produces a null in the output.\n+   *    </li>\n+   *    <li>\n \n Review comment:\n   decodingis not longer done in this class?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T15:53:02.605+0000",
                    "updated": "2019-10-04T15:53:02.605+0000",
                    "started": "2019-10-04T15:53:02.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323491",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/323492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r331571905\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n+\n+  /**\n+   * The dictionary for encoding/decoding.\n+   * It must be sorted.\n+   */\n+  private final D dictionary;\n+\n+  /**\n+   * The hasher used to compute the hash code.\n+   */\n+  private final ArrowBufHasher hasher;\n+\n+  /**\n+   * A flag indicating if null should be encoded.\n+   */\n+  private final boolean encodeNull;\n+\n+  /**\n+   * The hash map for distinct dictionary entries.\n+   * The key is the pointer to the dictionary element, whereas the value is the index in the dictionary.\n+   */\n+  private HashMap<ArrowBufPointer, Integer> hashMap = new HashMap<>();\n \n Review comment:\n   this is a dictionary implementation in Vector that doesn't require boxing/unboxing. Is it possible to use that (or does that limit the ability to use a custom hasher)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T15:55:09.746+0000",
                    "updated": "2019-10-04T15:55:09.746+0000",
                    "started": "2019-10-04T15:55:09.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323492",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/323494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r331572482\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n \n Review comment:\n   Are generic necessary here, what value do they provide?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T15:56:25.941+0000",
                    "updated": "2019-10-04T15:56:25.941+0000",
                    "started": "2019-10-04T15:56:25.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323494",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/323495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r331572604\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n+\n+  /**\n+   * The dictionary for encoding/decoding.\n+   * It must be sorted.\n+   */\n+  private final D dictionary;\n+\n+  /**\n+   * The hasher used to compute the hash code.\n+   */\n+  private final ArrowBufHasher hasher;\n+\n+  /**\n+   * A flag indicating if null should be encoded.\n+   */\n+  private final boolean encodeNull;\n+\n+  /**\n+   * The hash map for distinct dictionary entries.\n+   * The key is the pointer to the dictionary element, whereas the value is the index in the dictionary.\n+   */\n+  private HashMap<ArrowBufPointer, Integer> hashMap = new HashMap<>();\n+\n+  /**\n+   * The pointer used to probe each element to encode.\n+   */\n+  private ArrowBufPointer reusablePointer;\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   *\n+   */\n+  public HashTableDictionaryEncoder(D dictionary) {\n+    this(dictionary, false);\n+  }\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   * @param encodeNull a flag indicating if null should be encoded.\n+   *     It determines the behaviors for processing null values in the input during encoding/decoding.\n+   *    <li>\n+   *       For encoding, when a null is encountered in the input,\n+   *       1) If the flag is set to true, the encoder searches for the value in the dictionary,\n+   *       and outputs the index in the dictionary.\n+   *       2) If the flag is set to false, the encoder simply produces a null in the output.\n+   *    </li>\n+   *    <li>\n+   *       For decoding, when a null is encountered in the input,\n+   *       1) If the flag is set to true, the decoder should never expect a null in the input.\n+   *       2) If set to false, the decoder simply produces a null in the output.\n+   *    </li>\n+   */\n+  public HashTableDictionaryEncoder(D dictionary, boolean encodeNull) {\n+    this(dictionary, encodeNull, SimpleHasher.INSTANCE);\n+  }\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   * @param encodeNull a flag indicating if null should be encoded.\n+    *     It determines the behaviors for processing null values in the input during encoding/decoding.\n+    *    <li>\n+    *      For encoding, when a null is encountered in the input,\n+    *      1) If the flag is set to true, the encoder searches for the value in the dictionary,\n+    *      and outputs the index in the dictionary.\n+    *      2) If the flag is set to false, the encoder simply produces a null in the output.\n+    *    </li>\n+    *    <li>\n+    *      For decoding, when a null is encountered in the input,\n \n Review comment:\n   not decoding happens here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T15:56:40.114+0000",
                    "updated": "2019-10-04T15:56:40.114+0000",
                    "started": "2019-10-04T15:56:40.114+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323495",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/323496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r331573232\n \n \n\n ##########\n File path: java/algorithm/src/test/java/org/apache/arrow/algorithm/dictionary/TestHashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryEncoder;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link HashTableDictionaryEncoder}.\n+ */\n+public class TestHashTableDictionaryEncoder {\n+\n+  private final int VECTOR_LENGTH = 50;\n+\n+  private final int DICTIONARY_LENGTH = 10;\n+\n+  private BufferAllocator allocator;\n+\n+  byte[] zero = \"000\".getBytes(StandardCharsets.UTF_8);\n+  byte[] one = \"111\".getBytes(StandardCharsets.UTF_8);\n+  byte[] two = \"222\".getBytes(StandardCharsets.UTF_8);\n+\n+  byte[][] data = new byte[][]{zero, one, two};\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testEncodeAndDecode() {\n+    Random random = new Random();\n+    try (VarCharVector rawVector = new VarCharVector(\"original vector\", allocator);\n+         IntVector encodedVector = new IntVector(\"encoded vector\", allocator);\n+         VarCharVector dictionary = new VarCharVector(\"dictionary\", allocator)) {\n+\n+      // set up dictionary\n+      dictionary.allocateNew();\n+      for (int i = 0; i < DICTIONARY_LENGTH; i++) {\n+        // encode \"i\" as i\n+        dictionary.setSafe(i, String.valueOf(i).getBytes());\n+      }\n+      dictionary.setValueCount(DICTIONARY_LENGTH);\n+\n+      // set up raw vector\n+      rawVector.allocateNew(10 * VECTOR_LENGTH, VECTOR_LENGTH);\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        int val = (random.nextInt() & Integer.MAX_VALUE) % DICTIONARY_LENGTH;\n+        rawVector.set(i, String.valueOf(val).getBytes());\n+      }\n+      rawVector.setValueCount(VECTOR_LENGTH);\n+\n+      HashTableDictionaryEncoder<IntVector, VarCharVector> encoder =\n+              new HashTableDictionaryEncoder<>(dictionary, false);\n+\n+      // perform encoding\n+      encodedVector.allocateNew();\n+      encoder.encode(rawVector, encodedVector);\n+\n+      // verify encoding results\n+      assertEquals(rawVector.getValueCount(), encodedVector.getValueCount());\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        assertArrayEquals(rawVector.get(i), String.valueOf(encodedVector.get(i)).getBytes());\n+      }\n+\n+      // perform decoding\n+      Dictionary dict = new Dictionary(dictionary, new DictionaryEncoding(1L, false, null));\n+      try (VarCharVector decodedVector  = (VarCharVector) DictionaryEncoder.decode(encodedVector, dict)) {\n+\n+        // verify decoding results\n+        assertEquals(encodedVector.getValueCount(), decodedVector.getValueCount());\n+        for (int i = 0; i < VECTOR_LENGTH; i++) {\n+          assertArrayEquals(String.valueOf(encodedVector.get(i)).getBytes(), decodedVector.get(i));\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testEncodeAndDecodeWithNull() {\n+    Random random = new Random();\n+    try (VarCharVector rawVector = new VarCharVector(\"original vector\", allocator);\n+         IntVector encodedVector = new IntVector(\"encoded vector\", allocator);\n+         VarCharVector dictionary = new VarCharVector(\"dictionary\", allocator)) {\n+\n+      // set up dictionary\n+      dictionary.allocateNew();\n+      dictionary.setNull(0);\n+      for (int i = 1; i < DICTIONARY_LENGTH; i++) {\n+        // encode \"i\" as i\n+        dictionary.setSafe(i, String.valueOf(i).getBytes());\n+      }\n+      dictionary.setValueCount(DICTIONARY_LENGTH);\n+\n+      // set up raw vector\n+      rawVector.allocateNew(10 * VECTOR_LENGTH, VECTOR_LENGTH);\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        if (i % 10 == 0) {\n+          rawVector.setNull(i);\n+        } else {\n+          int val = (random.nextInt() & Integer.MAX_VALUE) % (DICTIONARY_LENGTH - 1) + 1;\n+          rawVector.set(i, String.valueOf(val).getBytes());\n+        }\n+      }\n+      rawVector.setValueCount(VECTOR_LENGTH);\n+\n+      HashTableDictionaryEncoder<IntVector, VarCharVector> encoder =\n+              new HashTableDictionaryEncoder<>(dictionary, true);\n+\n+      // perform encoding\n+      encodedVector.allocateNew();\n+      encoder.encode(rawVector, encodedVector);\n+\n+      // verify encoding results\n+      assertEquals(rawVector.getValueCount(), encodedVector.getValueCount());\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        if (i % 10 == 0) {\n+          assertEquals(0, encodedVector.get(i));\n+        } else {\n+          assertArrayEquals(rawVector.get(i), String.valueOf(encodedVector.get(i)).getBytes());\n+        }\n+      }\n+\n+      // perform decoding\n+      Dictionary dict = new Dictionary(dictionary, new DictionaryEncoding(1L, false, null));\n+      try (VarCharVector  decodedVector = (VarCharVector) DictionaryEncoder.decode(encodedVector, dict)) {\n+        // verify decoding results\n+        assertEquals(encodedVector.getValueCount(), decodedVector.getValueCount());\n+        for (int i = 0; i < VECTOR_LENGTH; i++) {\n+          if (i % 10 == 0) {\n+            assertTrue(decodedVector.isNull(i));\n+          } else {\n+            assertArrayEquals(String.valueOf(encodedVector.get(i)).getBytes(), decodedVector.get(i));\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testEncodeNoNullInDictionary() {\n \n Review comment:\n   can you name this more descriptively to indicate that the test is for when encodeNull is true?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T15:58:01.524+0000",
                    "updated": "2019-10-04T15:58:01.524+0000",
                    "started": "2019-10-04T15:58:01.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323496",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/324013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#issuecomment-520206338\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=h1) Report\n   > Merging [#5058](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/af097e67ac1f06aa8c9ed3f5d60d21816e820fc0?src=pr&el=desc) will **increase** coverage by `1.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5058/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5058      +/-   ##\n   ==========================================\n   + Coverage   88.79%    89.8%   +1.01%     \n   ==========================================\n     Files         983      732     -251     \n     Lines      132170   112106   -20064     \n     Branches     1501        0    -1501     \n   ==========================================\n   - Hits       117362   100681   -16681     \n   + Misses      14443    11425    -3018     \n   + Partials      365        0     -365\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/plasma.py](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcGxhc21hLnB5) | `58.9% <0%> (-1.37%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_parquet.py](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYXJxdWV0LnB5) | `95.24% <0%> (-0.06%)` | :arrow_down: |\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [r/R/filesystem.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL2ZpbGVzeXN0ZW0uUg==) | | |\n   | [r/R/list.R](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9SL2xpc3QuUg==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | [r/src/array\\_to\\_vector.cpp](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-ci9zcmMvYXJyYXlfdG9fdmVjdG9yLmNwcA==) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | ... and [245 more](https://codecov.io/gh/apache/arrow/pull/5058/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=footer). Last update [af097e6...8872b6e](https://codecov.io/gh/apache/arrow/pull/5058?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-06T05:59:32.932+0000",
                    "updated": "2019-10-06T05:59:32.932+0000",
                    "started": "2019-10-06T05:59:32.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324013",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/324827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r332320153\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n+\n+  /**\n+   * The dictionary for encoding/decoding.\n+   * It must be sorted.\n+   */\n+  private final D dictionary;\n+\n+  /**\n+   * The hasher used to compute the hash code.\n+   */\n+  private final ArrowBufHasher hasher;\n+\n+  /**\n+   * A flag indicating if null should be encoded.\n+   */\n+  private final boolean encodeNull;\n+\n+  /**\n+   * The hash map for distinct dictionary entries.\n+   * The key is the pointer to the dictionary element, whereas the value is the index in the dictionary.\n+   */\n+  private HashMap<ArrowBufPointer, Integer> hashMap = new HashMap<>();\n+\n+  /**\n+   * The pointer used to probe each element to encode.\n+   */\n+  private ArrowBufPointer reusablePointer;\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   *\n+   */\n+  public HashTableDictionaryEncoder(D dictionary) {\n+    this(dictionary, false);\n+  }\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   * @param encodeNull a flag indicating if null should be encoded.\n+   *     It determines the behaviors for processing null values in the input during encoding/decoding.\n+   *    <li>\n+   *       For encoding, when a null is encountered in the input,\n+   *       1) If the flag is set to true, the encoder searches for the value in the dictionary,\n+   *       and outputs the index in the dictionary.\n+   *       2) If the flag is set to false, the encoder simply produces a null in the output.\n+   *    </li>\n+   *    <li>\n \n Review comment:\n   Nice catch. Thank you.\r\n   The descriptions about decoding is removed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T03:08:02.711+0000",
                    "updated": "2019-10-08T03:08:02.711+0000",
                    "started": "2019-10-08T03:08:02.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324827",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/324830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r332320716\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n+\n+  /**\n+   * The dictionary for encoding/decoding.\n+   * It must be sorted.\n+   */\n+  private final D dictionary;\n+\n+  /**\n+   * The hasher used to compute the hash code.\n+   */\n+  private final ArrowBufHasher hasher;\n+\n+  /**\n+   * A flag indicating if null should be encoded.\n+   */\n+  private final boolean encodeNull;\n+\n+  /**\n+   * The hash map for distinct dictionary entries.\n+   * The key is the pointer to the dictionary element, whereas the value is the index in the dictionary.\n+   */\n+  private HashMap<ArrowBufPointer, Integer> hashMap = new HashMap<>();\n \n Review comment:\n   You are right. The dictionary implementation no longer requries boxing/unboxing. However, it does not support a custom hasher. \r\n   I think solving this problem requires some non-trivial changes to our code base. So can we do it in the future in a separate issue?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T03:11:46.562+0000",
                    "updated": "2019-10-08T03:11:46.562+0000",
                    "started": "2019-10-08T03:11:46.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324830",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/324831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r332321121\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n \n Review comment:\n   I think in general, a generic type makes the parameter type fixed in compilation time, which saves some effort at run time to look up the virtual table for the correct implementation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T03:14:35.901+0000",
                    "updated": "2019-10-08T03:14:35.901+0000",
                    "started": "2019-10-08T03:14:35.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324831",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/324832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r332321212\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n+\n+  /**\n+   * The dictionary for encoding/decoding.\n+   * It must be sorted.\n+   */\n+  private final D dictionary;\n+\n+  /**\n+   * The hasher used to compute the hash code.\n+   */\n+  private final ArrowBufHasher hasher;\n+\n+  /**\n+   * A flag indicating if null should be encoded.\n+   */\n+  private final boolean encodeNull;\n+\n+  /**\n+   * The hash map for distinct dictionary entries.\n+   * The key is the pointer to the dictionary element, whereas the value is the index in the dictionary.\n+   */\n+  private HashMap<ArrowBufPointer, Integer> hashMap = new HashMap<>();\n+\n+  /**\n+   * The pointer used to probe each element to encode.\n+   */\n+  private ArrowBufPointer reusablePointer;\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   *\n+   */\n+  public HashTableDictionaryEncoder(D dictionary) {\n+    this(dictionary, false);\n+  }\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   * @param encodeNull a flag indicating if null should be encoded.\n+   *     It determines the behaviors for processing null values in the input during encoding/decoding.\n+   *    <li>\n+   *       For encoding, when a null is encountered in the input,\n+   *       1) If the flag is set to true, the encoder searches for the value in the dictionary,\n+   *       and outputs the index in the dictionary.\n+   *       2) If the flag is set to false, the encoder simply produces a null in the output.\n+   *    </li>\n+   *    <li>\n+   *       For decoding, when a null is encountered in the input,\n+   *       1) If the flag is set to true, the decoder should never expect a null in the input.\n+   *       2) If set to false, the decoder simply produces a null in the output.\n+   *    </li>\n+   */\n+  public HashTableDictionaryEncoder(D dictionary, boolean encodeNull) {\n+    this(dictionary, encodeNull, SimpleHasher.INSTANCE);\n+  }\n+\n+  /**\n+   * Constructs a dictionary encoder.\n+   * @param dictionary the dictionary.\n+   * @param encodeNull a flag indicating if null should be encoded.\n+    *     It determines the behaviors for processing null values in the input during encoding/decoding.\n+    *    <li>\n+    *      For encoding, when a null is encountered in the input,\n+    *      1) If the flag is set to true, the encoder searches for the value in the dictionary,\n+    *      and outputs the index in the dictionary.\n+    *      2) If the flag is set to false, the encoder simply produces a null in the output.\n+    *    </li>\n+    *    <li>\n+    *      For decoding, when a null is encountered in the input,\n \n Review comment:\n   The descriptions about decoding are removed. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T03:15:12.311+0000",
                    "updated": "2019-10-08T03:15:12.311+0000",
                    "started": "2019-10-08T03:15:12.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324832",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/324834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r332321481\n \n \n\n ##########\n File path: java/algorithm/src/test/java/org/apache/arrow/algorithm/dictionary/TestHashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,350 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarBinaryVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.dictionary.Dictionary;\n+import org.apache.arrow.vector.dictionary.DictionaryEncoder;\n+import org.apache.arrow.vector.types.pojo.DictionaryEncoding;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link HashTableDictionaryEncoder}.\n+ */\n+public class TestHashTableDictionaryEncoder {\n+\n+  private final int VECTOR_LENGTH = 50;\n+\n+  private final int DICTIONARY_LENGTH = 10;\n+\n+  private BufferAllocator allocator;\n+\n+  byte[] zero = \"000\".getBytes(StandardCharsets.UTF_8);\n+  byte[] one = \"111\".getBytes(StandardCharsets.UTF_8);\n+  byte[] two = \"222\".getBytes(StandardCharsets.UTF_8);\n+\n+  byte[][] data = new byte[][]{zero, one, two};\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testEncodeAndDecode() {\n+    Random random = new Random();\n+    try (VarCharVector rawVector = new VarCharVector(\"original vector\", allocator);\n+         IntVector encodedVector = new IntVector(\"encoded vector\", allocator);\n+         VarCharVector dictionary = new VarCharVector(\"dictionary\", allocator)) {\n+\n+      // set up dictionary\n+      dictionary.allocateNew();\n+      for (int i = 0; i < DICTIONARY_LENGTH; i++) {\n+        // encode \"i\" as i\n+        dictionary.setSafe(i, String.valueOf(i).getBytes());\n+      }\n+      dictionary.setValueCount(DICTIONARY_LENGTH);\n+\n+      // set up raw vector\n+      rawVector.allocateNew(10 * VECTOR_LENGTH, VECTOR_LENGTH);\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        int val = (random.nextInt() & Integer.MAX_VALUE) % DICTIONARY_LENGTH;\n+        rawVector.set(i, String.valueOf(val).getBytes());\n+      }\n+      rawVector.setValueCount(VECTOR_LENGTH);\n+\n+      HashTableDictionaryEncoder<IntVector, VarCharVector> encoder =\n+              new HashTableDictionaryEncoder<>(dictionary, false);\n+\n+      // perform encoding\n+      encodedVector.allocateNew();\n+      encoder.encode(rawVector, encodedVector);\n+\n+      // verify encoding results\n+      assertEquals(rawVector.getValueCount(), encodedVector.getValueCount());\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        assertArrayEquals(rawVector.get(i), String.valueOf(encodedVector.get(i)).getBytes());\n+      }\n+\n+      // perform decoding\n+      Dictionary dict = new Dictionary(dictionary, new DictionaryEncoding(1L, false, null));\n+      try (VarCharVector decodedVector  = (VarCharVector) DictionaryEncoder.decode(encodedVector, dict)) {\n+\n+        // verify decoding results\n+        assertEquals(encodedVector.getValueCount(), decodedVector.getValueCount());\n+        for (int i = 0; i < VECTOR_LENGTH; i++) {\n+          assertArrayEquals(String.valueOf(encodedVector.get(i)).getBytes(), decodedVector.get(i));\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testEncodeAndDecodeWithNull() {\n+    Random random = new Random();\n+    try (VarCharVector rawVector = new VarCharVector(\"original vector\", allocator);\n+         IntVector encodedVector = new IntVector(\"encoded vector\", allocator);\n+         VarCharVector dictionary = new VarCharVector(\"dictionary\", allocator)) {\n+\n+      // set up dictionary\n+      dictionary.allocateNew();\n+      dictionary.setNull(0);\n+      for (int i = 1; i < DICTIONARY_LENGTH; i++) {\n+        // encode \"i\" as i\n+        dictionary.setSafe(i, String.valueOf(i).getBytes());\n+      }\n+      dictionary.setValueCount(DICTIONARY_LENGTH);\n+\n+      // set up raw vector\n+      rawVector.allocateNew(10 * VECTOR_LENGTH, VECTOR_LENGTH);\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        if (i % 10 == 0) {\n+          rawVector.setNull(i);\n+        } else {\n+          int val = (random.nextInt() & Integer.MAX_VALUE) % (DICTIONARY_LENGTH - 1) + 1;\n+          rawVector.set(i, String.valueOf(val).getBytes());\n+        }\n+      }\n+      rawVector.setValueCount(VECTOR_LENGTH);\n+\n+      HashTableDictionaryEncoder<IntVector, VarCharVector> encoder =\n+              new HashTableDictionaryEncoder<>(dictionary, true);\n+\n+      // perform encoding\n+      encodedVector.allocateNew();\n+      encoder.encode(rawVector, encodedVector);\n+\n+      // verify encoding results\n+      assertEquals(rawVector.getValueCount(), encodedVector.getValueCount());\n+      for (int i = 0; i < VECTOR_LENGTH; i++) {\n+        if (i % 10 == 0) {\n+          assertEquals(0, encodedVector.get(i));\n+        } else {\n+          assertArrayEquals(rawVector.get(i), String.valueOf(encodedVector.get(i)).getBytes());\n+        }\n+      }\n+\n+      // perform decoding\n+      Dictionary dict = new Dictionary(dictionary, new DictionaryEncoding(1L, false, null));\n+      try (VarCharVector  decodedVector = (VarCharVector) DictionaryEncoder.decode(encodedVector, dict)) {\n+        // verify decoding results\n+        assertEquals(encodedVector.getValueCount(), decodedVector.getValueCount());\n+        for (int i = 0; i < VECTOR_LENGTH; i++) {\n+          if (i % 10 == 0) {\n+            assertTrue(decodedVector.isNull(i));\n+          } else {\n+            assertArrayEquals(String.valueOf(encodedVector.get(i)).getBytes(), decodedVector.get(i));\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testEncodeNoNullInDictionary() {\n \n Review comment:\n   Thanks for the good suggestion.\r\n   I have changed the name to testEncodeNullWithoutNullInDictionary, as it tests the case where the the encoder tries to encode a null in the input, but the dictionary does not has a null.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T03:16:51.913+0000",
                    "updated": "2019-10-08T03:16:51.913+0000",
                    "started": "2019-10-08T03:16:51.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324834",
                    "issueId": "13249824"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/worklog/327195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5058: ARROW-6184: [Java] Provide hash table based dictionary encoder\nURL: https://github.com/apache/arrow/pull/5058#discussion_r334220753\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/dictionary/HashTableDictionaryEncoder.java\n ##########\n @@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.algorithm.dictionary;\n+\n+import java.util.HashMap;\n+\n+import org.apache.arrow.memory.util.ArrowBufPointer;\n+import org.apache.arrow.memory.util.hash.ArrowBufHasher;\n+import org.apache.arrow.memory.util.hash.SimpleHasher;\n+import org.apache.arrow.vector.BaseIntVector;\n+import org.apache.arrow.vector.ElementAddressableVector;\n+\n+/**\n+ * Dictionary encoder based on hash table.\n+ * @param <E> encoded vector type.\n+ * @param <D> decoded vector type, which is also the dictionary type.\n+ */\n+public class HashTableDictionaryEncoder<E extends BaseIntVector, D extends ElementAddressableVector> {\n \n Review comment:\n   Can you provide a reference? My understanding was these types are [erased](https://docs.oracle.com/javase/tutorial/java/generics/genTypes.html).  The only times that types can be referenced at runtime is a subclass is create which the pattern that [Guice's TypeLiteral uses](https://google.github.io/guice/api-docs/latest/javadoc/index.html?com/google/inject/TypeLiteral.html)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-12T04:47:25.801+0000",
                    "updated": "2019-10-12T04:47:25.801+0000",
                    "started": "2019-10-12T04:47:25.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327195",
                    "issueId": "13249824"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2ef95bb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63f66165[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49f6289c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@195b858e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11621c82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@77426114[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f8815a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4aba9622[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b3d15fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f139749[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6079e256[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7eec63fd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 15 05:55:24 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-15T05:55:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6184/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-08-09T06:38:14.000+0000",
        "updated": "2019-10-16T10:07:29.000+0000",
        "timeoriginalestimate": null,
        "description": "This is the second part of ARROW-5917. We provide a sort based encoder, as well as a hash table based encoder, to solve the problem with the current dictionary encoder.\u00a0\r\n\r\nIn particular, we solve the following problems with the current encoder:\r\n # There are repeated conversions between Java objects and bytes (e.g. vector.getObject(i)).\r\n # Unnecessary memory copy (the vector data must be copied to the hash table).\r\n # The hash table cannot be reused for encoding multiple vectors (other data structure & results cannot be reused either).\r\n # The output vector should not be created/managed by the encoder (just like in the out-of-place sorter)\r\n # The hash table requires that the hashCode & equals methods be implemented appropriately, but this is not guaranteed.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Provide hash table based dictionary encoder",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249824/comment/16951632",
                    "id": "16951632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 5058\n[https://github.com/apache/arrow/pull/5058]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-10-15T05:55:24.243+0000",
                    "updated": "2019-10-15T05:55:24.243+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z05huo:",
        "customfield_12314139": null
    }
}