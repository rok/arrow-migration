{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13188497",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188497",
    "key": "ARROW-3380",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3380/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188497/worklog/155836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2786: ARROW-3380: [Python] Support reading gzipped CSV files \nURL: https://github.com/apache/arrow/pull/2786\n \n \n   Also works for other bundled compression types.\r\n   \r\n   Based on PR #2777.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-18T11:31:00.747+0000",
                    "updated": "2018-10-18T11:31:00.747+0000",
                    "started": "2018-10-18T11:31:00.719+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "155836",
                    "issueId": "13188497"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188497/worklog/156526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2786: ARROW-3380: [Python] Support reading gzipped CSV files \nURL: https://github.com/apache/arrow/pull/2786\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/io/api.h b/cpp/src/arrow/io/api.h\nindex 9f26d95e40..0d5742ad65 100644\n--- a/cpp/src/arrow/io/api.h\n+++ b/cpp/src/arrow/io/api.h\n@@ -18,6 +18,7 @@\n #ifndef ARROW_IO_API_H\n #define ARROW_IO_API_H\n \n+#include \"arrow/io/compressed.h\"\n #include \"arrow/io/file.h\"\n #include \"arrow/io/hdfs.h\"\n #include \"arrow/io/interfaces.h\"\ndiff --git a/python/pyarrow/_csv.pyx b/python/pyarrow/_csv.pyx\nindex cc69862594..8005f44317 100644\n--- a/python/pyarrow/_csv.pyx\n+++ b/python/pyarrow/_csv.pyx\n@@ -22,7 +22,7 @@\n from pyarrow.includes.common cimport *\n from pyarrow.includes.libarrow cimport *\n from pyarrow.lib cimport (check_status, MemoryPool, maybe_unbox_memory_pool,\n-                          pyarrow_wrap_table, get_reader)\n+                          pyarrow_wrap_table, get_input_stream)\n \n \n cdef unsigned char _single_char(s) except 0:\n@@ -149,10 +149,8 @@ cdef class ParseOptions:\n \n \n cdef _get_reader(input_file, shared_ptr[InputStream]* out):\n-    cdef shared_ptr[RandomAccessFile] result\n     use_memory_map = False\n-    get_reader(input_file, use_memory_map, &result)\n-    out[0] = <shared_ptr[InputStream]> result\n+    get_input_stream(input_file, use_memory_map, out)\n \n \n cdef _get_read_options(ReadOptions read_options, CCSVReadOptions* out):\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 2a69446065..c53b4adc15 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -663,6 +663,16 @@ cdef extern from \"arrow/io/api.h\" namespace \"arrow::io\" nogil:\n \n         int file_descriptor()\n \n+    cdef cppclass CompressedInputStream(InputStream):\n+        @staticmethod\n+        CStatus Make(CMemoryPool* pool, CCodec* codec,\n+                     shared_ptr[InputStream] raw,\n+                     shared_ptr[CompressedInputStream]* out)\n+\n+        @staticmethod\n+        CStatus Make(CCodec* codec, shared_ptr[InputStream] raw,\n+                     shared_ptr[CompressedInputStream]* out)\n+\n     # ----------------------------------------------------------------------\n     # HDFS\n \ndiff --git a/python/pyarrow/io.pxi b/python/pyarrow/io.pxi\nindex 2e934da292..ca14346199 100644\n--- a/python/pyarrow/io.pxi\n+++ b/python/pyarrow/io.pxi\n@@ -1055,6 +1055,39 @@ cdef get_reader(object source, c_bool use_memory_map,\n                         .format(type(source)))\n \n \n+cdef get_input_stream(object source, c_bool use_memory_map,\n+                      shared_ptr[InputStream]* out):\n+    \"\"\"\n+    Like get_reader(), but can automatically decompress, and returns\n+    an InputStream.\n+    \"\"\"\n+    cdef:\n+        NativeFile nf\n+        shared_ptr[RandomAccessFile] random_access_file\n+        shared_ptr[InputStream] input_stream\n+        shared_ptr[CompressedInputStream] compressed_stream\n+        CompressionType compression_type = CompressionType_UNCOMPRESSED\n+        unique_ptr[CCodec] codec\n+\n+    try:\n+        source_path = _stringify_path(source)\n+    except TypeError:\n+        pass\n+    else:\n+        compression_type = _get_compression_type_by_filename(source_path)\n+\n+    get_reader(source, use_memory_map, &random_access_file)\n+    input_stream = <shared_ptr[InputStream]> random_access_file\n+\n+    if compression_type != CompressionType_UNCOMPRESSED:\n+        check_status(CCodec.Create(compression_type, &codec))\n+        check_status(CompressedInputStream.Make(codec.get(), input_stream,\n+                                                &compressed_stream))\n+        input_stream = <shared_ptr[InputStream]> compressed_stream\n+\n+    out[0] = input_stream\n+\n+\n cdef get_writer(object source, shared_ptr[OutputStream]* writer):\n     cdef NativeFile nf\n \n@@ -1099,6 +1132,17 @@ cdef CompressionType _get_compression_type(object name):\n                          .format(str(name)))\n \n \n+cdef CompressionType _get_compression_type_by_filename(str filename):\n+    if filename.endswith('.gz'):\n+        return CompressionType_GZIP\n+    elif filename.endswith('.lz4'):\n+        return CompressionType_LZ4\n+    elif filename.endswith('.zst'):\n+        return CompressionType_ZSTD\n+    else:\n+        return CompressionType_UNCOMPRESSED\n+\n+\n def compress(object buf, codec='lz4', asbytes=False, memory_pool=None):\n     \"\"\"\n     Compress pyarrow.Buffer or Python object supporting the buffer (memoryview)\ndiff --git a/python/pyarrow/ipc.pxi b/python/pyarrow/ipc.pxi\nindex 0331fbaef5..a65b7f7182 100644\n--- a/python/pyarrow/ipc.pxi\n+++ b/python/pyarrow/ipc.pxi\n@@ -118,7 +118,7 @@ cdef class MessageReader:\n         cdef MessageReader result = MessageReader.__new__(MessageReader)\n         cdef shared_ptr[InputStream] in_stream\n         cdef unique_ptr[CMessageReader] reader\n-        get_input_stream(source, &in_stream)\n+        _get_input_stream(source, &in_stream)\n         with nogil:\n             reader = CMessageReader.Open(in_stream)\n             result.reader.reset(reader.release())\n@@ -227,7 +227,7 @@ cdef class _RecordBatchWriter:\n         self.closed = True\n \n \n-cdef get_input_stream(object source, shared_ptr[InputStream]* out):\n+cdef _get_input_stream(object source, shared_ptr[InputStream]* out):\n     cdef:\n         shared_ptr[RandomAccessFile] file_handle\n \n@@ -253,7 +253,7 @@ cdef class _RecordBatchReader:\n         pass\n \n     def _open(self, source):\n-        get_input_stream(source, &self.in_stream)\n+        _get_input_stream(source, &self.in_stream)\n         with nogil:\n             check_status(CRecordBatchStreamReader.Open(\n                 self.in_stream.get(), &self.reader))\ndiff --git a/python/pyarrow/lib.pxd b/python/pyarrow/lib.pxd\nindex 3c2935a8a8..46089de818 100644\n--- a/python/pyarrow/lib.pxd\n+++ b/python/pyarrow/lib.pxd\n@@ -369,6 +369,8 @@ cdef class NativeFile:\n     cdef read_handle(self, shared_ptr[RandomAccessFile]* file)\n     cdef write_handle(self, shared_ptr[OutputStream]* file)\n \n+cdef get_input_stream(object source, c_bool use_memory_map,\n+                      shared_ptr[InputStream]* reader)\n cdef get_reader(object source, c_bool use_memory_map,\n                 shared_ptr[RandomAccessFile]* reader)\n cdef get_writer(object source, shared_ptr[OutputStream]* writer)\ndiff --git a/python/pyarrow/tests/test_csv.py b/python/pyarrow/tests/test_csv.py\nindex 1a69fb9878..e3ea92ab06 100644\n--- a/python/pyarrow/tests/test_csv.py\n+++ b/python/pyarrow/tests/test_csv.py\n@@ -15,9 +15,13 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+import gzip\n import io\n import itertools\n+import os\n+import shutil\n import string\n+import tempfile\n import unittest\n \n import pytest\n@@ -257,3 +261,30 @@ def read_csv(self, *args, **kwargs):\n         table = read_csv(*args, **kwargs)\n         table._validate()\n         return table\n+\n+\n+class BaseTestCompressedCSVRead:\n+\n+    def setUp(self):\n+        self.tmpdir = tempfile.mkdtemp(prefix='arrow-csv-test-')\n+\n+    def tearDown(self):\n+        shutil.rmtree(self.tmpdir)\n+\n+    def test_random_csv(self):\n+        csv, expected = make_random_csv(num_cols=2, num_rows=100)\n+        csv_path = os.path.join(self.tmpdir, self.csv_filename)\n+        self.write_file(csv_path, csv)\n+        table = read_csv(csv_path)\n+        table._validate()\n+        assert table.schema == expected.schema\n+        assert table.equals(expected)\n+        assert table.to_pydict() == expected.to_pydict()\n+\n+\n+class TestGZipCSVRead(BaseTestCompressedCSVRead, unittest.TestCase):\n+    csv_filename = \"compressed.csv.gz\"\n+\n+    def write_file(self, path, contents):\n+        with gzip.open(path, 'wb', 3) as f:\n+            f.write(contents)\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-20T14:21:39.311+0000",
                    "updated": "2018-10-20T14:21:39.311+0000",
                    "started": "2018-10-20T14:21:39.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156526",
                    "issueId": "13188497"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3a5923fa[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@486e5350[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c39c16a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7677ff6e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38cfa439[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@64834051[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66b3ff3a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2ff6e00d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6add67a6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@14a23364[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d9154e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@75ff27d2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Oct 20 14:21:26 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-20T14:21:26.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3380/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-10-01T12:02:08.000+0000",
        "updated": "2018-10-20T14:21:39.000+0000",
        "timeoriginalestimate": null,
        "description": "Requires ARROW-1019",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Support reading CSV files and more from a gzipped file",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13188497/comment/16657876",
                    "id": "16657876",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2786\n[https://github.com/apache/arrow/pull/2786]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-20T14:21:26.634+0000",
                    "updated": "2018-10-20T14:21:26.634+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yo73:",
        "customfield_12314139": null
    }
}