{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13426655",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655",
    "key": "ARROW-15578",
    "fields": {
        "parent": {
            "id": "13418565",
            "key": "ARROW-15156",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13418565",
            "fields": {
                "summary": "[Doc] Implement Tutorials for the Java Documentation",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15578/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/752033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kiszk opened a new pull request #12777:\nURL: https://github.com/apache/arrow/pull/12777\n\n\n   This PR fixes a problem that endianness field in schema was not emitted in IPC stream.\r\n   \r\n   I will create another JIRA/PR for adding test.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-03T07:04:03.922+0000",
                    "updated": "2022-04-03T07:04:03.922+0000",
                    "started": "2022-04-03T07:04:03.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752033",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/752034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12777:\nURL: https://github.com/apache/arrow/pull/12777#issuecomment-1086790979\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-04-03T07:04:28.559+0000",
                    "updated": "2022-04-03T07:04:28.559+0000",
                    "started": "2022-04-03T07:04:28.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752034",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/752618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar opened a new pull request, #12794:\nURL: https://github.com/apache/arrow/pull/12794\n\n   Document C Data and how to interface with other languages\r\n   - Java - Python\r\n   - Java - C++\n\n\n",
                    "created": "2022-04-05T03:26:21.699+0000",
                    "updated": "2022-04-05T03:26:21.699+0000",
                    "started": "2022-04-05T03:26:21.698+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752618",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/752619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#issuecomment-1088228871\n\n   https://issues.apache.org/jira/browse/ARROW-15578\n\n\n",
                    "created": "2022-04-05T03:26:38.160+0000",
                    "updated": "2022-04-05T03:26:38.160+0000",
                    "started": "2022-04-05T03:26:38.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752619",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/752821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r842708704\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n\nReview Comment:\n   ```suggestion\r\n   Arrow supports exchanging data without copying or serialization within the same process through the :ref:`c-data-interface`, even between different language runtimes.\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n\nReview Comment:\n   Link to the C++ build docs as well\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n\nReview Comment:\n   \"For this example, we will use javacpp (link to project) to call our main C++ function from Java, without writing JNI bindings ourselves.\"\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n+            value = @Platform(\n+                    include = {\"CDataInterfaceLibrary.h\"},\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataInterfaceLibraryConfig implements InfoMapper {\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibrary.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataInterfaceLibrary.dylib\n+    macosx-x86_64/libjniCDataInterfaceLibrary.dylib:\n+            libjniCDataInterfaceLibrary.dylib (compatibility version 0.0.0, current version 0.0.0)\n+            @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+            /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterfaceV5 {\n+\n+        public static void main(String[] args) {\n+            CDataInterfaceLibrary.ArrowSchema arrowSchema = new CDataInterfaceLibrary.ArrowSchema();\n+            CDataInterfaceLibrary.export_int32_type(arrowSchema);\n+\n+            ArrowSchema arrow_schema = ArrowSchema.wrap(arrowSchema.address());\n+            System.out.println(\"Java C Data - Schema Pointer = = \" + Long.toHexString(arrowSchema.address()));\n+\n+            CDataInterfaceLibrary.ArrowArray arrowArray = new CDataInterfaceLibrary.ArrowArray();\n+            CDataInterfaceLibrary.export_int32_array(arrowArray);\n+\n+            ArrowArray arrow_array = ArrowArray.wrap(arrowArray.address());\n+            System.out.println(\"Java C Data - Array Pointer = \" + Long.toHexString(arrowArray.address()));\n+            System.out.println(\"Java C Data - Array Data Pointer Buffer array->buffers[1] = \" + Long.toHexString(arrowArray.buffers(1).address()));\n+\n+            BufferAllocator allocator = new RootAllocator();\n+            BigIntVector bigIntVector = (BigIntVector) Data.importVector(allocator, arrow_array, arrow_schema, null);\n+            System.out.println(\"Java C Data - BigIntVector: \" + bigIntVector);\n+\n+            CDataInterfaceLibrary.release_int32_type(arrowSchema);\n+            CDataInterfaceLibrary.release_int32_array(arrowArray);\n\nReview Comment:\n   Why aren't we using the release callback of the C Data Interface objects?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n+            value = @Platform(\n+                    include = {\"CDataInterfaceLibrary.h\"},\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataInterfaceLibraryConfig implements InfoMapper {\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibrary.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataInterfaceLibrary.dylib\n+    macosx-x86_64/libjniCDataInterfaceLibrary.dylib:\n+            libjniCDataInterfaceLibrary.dylib (compatibility version 0.0.0, current version 0.0.0)\n+            @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+            /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterfaceV5 {\n+\n+        public static void main(String[] args) {\n+            CDataInterfaceLibrary.ArrowSchema arrowSchema = new CDataInterfaceLibrary.ArrowSchema();\n+            CDataInterfaceLibrary.export_int32_type(arrowSchema);\n+\n+            ArrowSchema arrow_schema = ArrowSchema.wrap(arrowSchema.address());\n\nReview Comment:\n   I think in general, this example isn't structured correctly. The specification states that the consumer is expected to allocate the array. So what we should do is:\r\n   \r\n   1. Use ArrowSchema.allocateNew to create the structure\r\n   2. Pass the address via javacpp to the JNI function, which populates the structure\r\n   \r\n   We shouldn't be defining our own ArrowSchema class here, and we shouldn't be expecting the C++ code to allocate the ArrowSchema itself.\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n\nReview Comment:\n   ```suggestion\r\n   Example: share an Int32 array from C++ to Java:\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n\nReview Comment:\n   I would rather name this something like \"CDataInterfaceExample\"\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n+            value = @Platform(\n+                    include = {\"CDataInterfaceLibrary.h\"},\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataInterfaceLibraryConfig implements InfoMapper {\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibrary.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataInterfaceLibrary.dylib\n+    macosx-x86_64/libjniCDataInterfaceLibrary.dylib:\n+            libjniCDataInterfaceLibrary.dylib (compatibility version 0.0.0, current version 0.0.0)\n+            @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+            /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterfaceV5 {\n+\n+        public static void main(String[] args) {\n+            CDataInterfaceLibrary.ArrowSchema arrowSchema = new CDataInterfaceLibrary.ArrowSchema();\n\nReview Comment:\n   Can we pick different names for these variables? It gets very confusing to have lots of things with the same name.\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n\nReview Comment:\n   I don't think this paragraph is necessary (and it doesn't belong in this section in either case)\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n\nReview Comment:\n   Please follow Arrow coding conventions here.\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n\nReview Comment:\n   We should just use `bridge.h` we should not tell people to reimplement everything\n\n\n\n",
                    "created": "2022-04-05T12:18:35.590+0000",
                    "updated": "2022-04-05T12:18:35.590+0000",
                    "started": "2022-04-05T12:18:35.589+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "752821",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/753707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r844442472\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n\nReview Comment:\n   Deleted\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n\nReview Comment:\n   Added\n\n\n\n",
                    "created": "2022-04-06T21:36:23.629+0000",
                    "updated": "2022-04-06T21:36:23.629+0000",
                    "started": "2022-04-06T21:36:23.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753707",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/753708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r844442638\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-04-06T21:36:38.631+0000",
                    "updated": "2022-04-06T21:36:38.631+0000",
                    "started": "2022-04-06T21:36:38.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753708",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/753709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r844443028\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n\nReview Comment:\n   Changed\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n\nReview Comment:\n   Deleted\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n+            value = @Platform(\n+                    include = {\"CDataInterfaceLibrary.h\"},\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataInterfaceLibraryConfig implements InfoMapper {\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibrary.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataInterfaceLibrary.dylib\n+    macosx-x86_64/libjniCDataInterfaceLibrary.dylib:\n+            libjniCDataInterfaceLibrary.dylib (compatibility version 0.0.0, current version 0.0.0)\n+            @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+            /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterfaceV5 {\n+\n+        public static void main(String[] args) {\n+            CDataInterfaceLibrary.ArrowSchema arrowSchema = new CDataInterfaceLibrary.ArrowSchema();\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-04-06T21:37:13.765+0000",
                    "updated": "2022-04-06T21:37:13.765+0000",
                    "started": "2022-04-06T21:37:13.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753709",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/753710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r844443988\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n+            value = @Platform(\n+                    include = {\"CDataInterfaceLibrary.h\"},\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataInterfaceLibraryConfig implements InfoMapper {\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibrary.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataInterfaceLibrary.dylib\n+    macosx-x86_64/libjniCDataInterfaceLibrary.dylib:\n+            libjniCDataInterfaceLibrary.dylib (compatibility version 0.0.0, current version 0.0.0)\n+            @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+            /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterfaceV5 {\n+\n+        public static void main(String[] args) {\n+            CDataInterfaceLibrary.ArrowSchema arrowSchema = new CDataInterfaceLibrary.ArrowSchema();\n+            CDataInterfaceLibrary.export_int32_type(arrowSchema);\n+\n+            ArrowSchema arrow_schema = ArrowSchema.wrap(arrowSchema.address());\n+            System.out.println(\"Java C Data - Schema Pointer = = \" + Long.toHexString(arrowSchema.address()));\n+\n+            CDataInterfaceLibrary.ArrowArray arrowArray = new CDataInterfaceLibrary.ArrowArray();\n+            CDataInterfaceLibrary.export_int32_array(arrowArray);\n+\n+            ArrowArray arrow_array = ArrowArray.wrap(arrowArray.address());\n+            System.out.println(\"Java C Data - Array Pointer = \" + Long.toHexString(arrowArray.address()));\n+            System.out.println(\"Java C Data - Array Data Pointer Buffer array->buffers[1] = \" + Long.toHexString(arrowArray.buffers(1).address()));\n+\n+            BufferAllocator allocator = new RootAllocator();\n+            BigIntVector bigIntVector = (BigIntVector) Data.importVector(allocator, arrow_array, arrow_schema, null);\n+            System.out.println(\"Java C Data - BigIntVector: \" + bigIntVector);\n+\n+            CDataInterfaceLibrary.release_int32_type(arrowSchema);\n+            CDataInterfaceLibrary.release_int32_array(arrowArray);\n\nReview Comment:\n   ArrowArray and ArrowSchema release these after Data.importVector finalize\n\n\n\n",
                    "created": "2022-04-06T21:38:38.812+0000",
                    "updated": "2022-04-06T21:38:38.812+0000",
                    "started": "2022-04-06T21:38:38.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753710",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/753712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r844444199\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpp-java-cdata</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>7.0.0</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataInterfaceLibrary\",\n+            value = @Platform(\n+                    include = {\"CDataInterfaceLibrary.h\"},\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataInterfaceLibraryConfig implements InfoMapper {\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibraryConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataInterfaceLibrary.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataInterfaceLibrary.dylib\n+    macosx-x86_64/libjniCDataInterfaceLibrary.dylib:\n+            libjniCDataInterfaceLibrary.dylib (compatibility version 0.0.0, current version 0.0.0)\n+            @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+            /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+            /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterfaceV5 {\n+\n+        public static void main(String[] args) {\n+            CDataInterfaceLibrary.ArrowSchema arrowSchema = new CDataInterfaceLibrary.ArrowSchema();\n+            CDataInterfaceLibrary.export_int32_type(arrowSchema);\n+\n+            ArrowSchema arrow_schema = ArrowSchema.wrap(arrowSchema.address());\n\nReview Comment:\n   Changed on this way, thank you\n\n\n\n",
                    "created": "2022-04-06T21:38:58.850+0000",
                    "updated": "2022-04-06T21:38:58.850+0000",
                    "started": "2022-04-06T21:38:58.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "753712",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845065578\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n\nReview Comment:\n   ```suggestion\r\n       $ git clone https://github.com/apache/arrow.git\r\n       $ cd arrow/cpp\r\n       $ mkdir build   # from inside the `cpp` subdirectory\r\n       $ cd build\r\n       $ cmake .. --preset ninja-debug-minimal\r\n       $ cmake --build .\r\n       $ tree debug/\r\n       debug/\r\n       \u251c\u2500\u2500 libarrow.800.0.0.dylib\r\n       \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\r\n       \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterface {\n+        public static void main(String[] args) {\n+            try(\n+                BufferAllocator allocator = new RootAllocator();\n+                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+            ){\n+                CDataJavaToCppExample.fillCArray(\n+                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+                try(\n+                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                            allocator, arrowArray, arrowSchema, null)\n+                ){\n+                    System.out.println(\"Java using C Data Interface to read Array Filled by C++: \"\n+                            + bigIntVector);\n+                }\n\nReview Comment:\n   We should call `release` on the array and schema right?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n\nReview Comment:\n   Is it possible to use a released version of arrow? That way we can even skip the compilation instructions above\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterface {\n+        public static void main(String[] args) {\n+            try(\n+                BufferAllocator allocator = new RootAllocator();\n+                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+            ){\n+                CDataJavaToCppExample.fillCArray(\n+                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+                try(\n+                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                            allocator, arrowArray, arrowSchema, null)\n+                ){\n+                    System.out.println(\"Java using C Data Interface to read Array Filled by C++: \"\n\nReview Comment:\n   ```suggestion\r\n                       System.out.println(\"C++-allocated array: \"\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterface {\n+        public static void main(String[] args) {\n+            try(\n+                BufferAllocator allocator = new RootAllocator();\n+                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+            ){\n+                CDataJavaToCppExample.fillCArray(\n+                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+                try(\n+                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                            allocator, arrowArray, arrowSchema, null)\n+                ){\n+                    System.out.println(\"Java using C Data Interface to read Array Filled by C++: \"\n+                            + bigIntVector);\n+                }\n\nReview Comment:\n   Or hmm. Does closing the vector also close the array for you?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n\nReview Comment:\n   ```suggestion\r\n   .. code-block:: shell\r\n   \r\n       # Compile our Java code\r\n       $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\r\n   \r\n       # Generate CDataInterfaceLibrary\r\n       $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\r\n   \r\n       # Generate libjniCDataInterfaceLibrary.dylib\r\n       $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\r\n   \r\n       # Validate libjniCDataInterfaceLibrary.dylib created\r\n       $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\r\n       macosx-x86_64/libjniCDataJavaToCppExample.dylib:\r\n           libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\r\n           @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\r\n           /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\r\n           /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n\nReview Comment:\n   nit: why the \"v2\"?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n\nReview Comment:\n   We need to depend on `arrow-vector` in our pom right?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n\nReview Comment:\n   ```suggestion\r\n           std::shared_ptr<arrow::Array> array = *builder.Finish();\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n\nReview Comment:\n   ```suggestion\r\n   Let's create a Java class to test our bridge:\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n\nReview Comment:\n   Ah - because it's in a header, it gets compiled into the javacpp generated sources?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n\nReview Comment:\n   ```suggestion\r\n       void FillInt64Array(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr) {\r\n   ```\r\n   \n\n\n\n",
                    "created": "2022-04-07T12:26:29.697+0000",
                    "updated": "2022-04-07T12:26:29.697+0000",
                    "started": "2022-04-07T12:26:29.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754013",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845193872\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n\nReview Comment:\n   Changed to *.cpp for more readable, and yes it is used by javacpp generated sources\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n\nReview Comment:\n   Changed\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-04-07T14:18:29.839+0000",
                    "updated": "2022-04-07T14:18:29.839+0000",
                    "started": "2022-04-07T14:18:29.839+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754112",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845195963\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n\nReview Comment:\n   C Data download that for transitive dependencies\n\n\n\n",
                    "created": "2022-04-07T14:20:35.128+0000",
                    "updated": "2022-04-07T14:20:35.128+0000",
                    "started": "2022-04-07T14:20:35.127+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754113",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845198421\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterface {\n+        public static void main(String[] args) {\n+            try(\n+                BufferAllocator allocator = new RootAllocator();\n+                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+            ){\n+                CDataJavaToCppExample.fillCArray(\n+                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+                try(\n+                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                            allocator, arrowArray, arrowSchema, null)\n+                ){\n+                    System.out.println(\"Java using C Data Interface to read Array Filled by C++: \"\n+                            + bigIntVector);\n+                }\n\nReview Comment:\n   It is doing at the end of [ImportVector](https://github.com/apache/arrow/blob/e379ee1f5a3c4de2defbe631f2cbf5567e574f1d/java/c/src/main/java/org/apache/arrow/c/ArrayImporter.java#L63) by c data library\n\n\n\n",
                    "created": "2022-04-07T14:23:20.509+0000",
                    "updated": "2022-04-07T14:23:20.509+0000",
                    "started": "2022-04-07T14:23:20.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754115",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845199308\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,313 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data within the same process through the :ref:`c-data-interface`.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+The C Data Interface is a protocol implemented in Arrow to exchange data within different\n+environments without the cost of marshaling and copying data.\n+\n+Example: How to expose an int32 array using C Data Interface?\n+\n+**C++ Side**\n+\n+Compile arrow minimal library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define c++ code CDataInterfaceLibrary.h that export functions for third party like Java consumer:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+\n+    #define ARROW_FLAG_DICTIONARY_ORDERED 1\n+    #define ARROW_FLAG_NULLABLE 2\n+    #define ARROW_FLAG_MAP_KEYS_SORTED 4\n+\n+    using arrow::Int64Builder;\n+\n+    struct ArrowSchema {\n+        // Array type description\n+        const char* format;\n+        const char* name;\n+        const char* metadata;\n+        int64_t flags;\n+        int64_t n_children;\n+        struct ArrowSchema** children;\n+        struct ArrowSchema* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowSchema*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    struct ArrowArray {\n+        // Array data description\n+        int64_t length;\n+        int64_t null_count;\n+        int64_t offset;\n+        int64_t n_buffers;\n+        int64_t n_children;\n+        const void** buffers;\n+        struct ArrowArray** children;\n+        struct ArrowArray* dictionary;\n+\n+        // Release callback\n+        void (*release)(struct ArrowArray*);\n+        // Opaque producer-specific data\n+        void* private_data;\n+    };\n+\n+    static void release_int32_type(struct ArrowSchema* schema) {\n+        // Mark released\n+        schema->release = NULL;\n+    }\n+\n+    void export_int32_type(struct ArrowSchema* schema) {\n+        *schema = (struct ArrowSchema) {\n+                // Type description\n+                .format = \"l\",\n+                .name = \"\",\n+                .metadata = NULL,\n+                .flags = 0,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_type\n+        };\n+        std::cout << \"C Data - Schema Pointer = \" << schema << std::endl;\n+    }\n+\n+    static void release_int32_array(struct ArrowArray* array) {\n+        assert(array->n_buffers == 2);\n+        // Free the buffers and the buffers array\n+        free((void *) array->buffers[1]);\n+        free(array->buffers);\n+        // Mark released\n+        array->release = NULL;\n+    }\n+\n+    void export_int32_array(struct ArrowArray* array) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+\n+        auto maybe_array = builder.Finish();\n+        std::shared_ptr<arrow::Array> array_arrow = *maybe_array;\n+        auto int64_array = std::static_pointer_cast<arrow::Int64Array>(array_arrow);\n+        const int64_t* data = int64_array->raw_values();\n+        std::cout << \"Data To Exchange Pointer = \" << data << std::endl;\n+        for (int j = 0; j < int64_array->length(); j++){\n+            std::cout << \"Data To Exchange Value[\" << j << \"] = \" << data[j] << std::endl;\n+        }\n+\n+        *array = (struct ArrowArray) {\n+                // Data description\n+                .length = int64_array->length(),\n+                .offset = 0,\n+                .null_count = 0,\n+                .n_buffers = 2,\n+                .n_children = 0,\n+                .children = NULL,\n+                .dictionary = NULL,\n+                // Bookkeeping\n+                .release = &release_int32_array\n+        };\n+\n+        // Allocate list of buffers\n+        array->buffers = (const void**) malloc(sizeof(void*) * array->n_buffers);\n+        assert(array->buffers != NULL);\n+        array->buffers[0] = NULL;  // no nulls, null bitmap can be omitted\n+        array->buffers[1] = data;\n+\n+        std::cout << \"C Data - Array Pointer = \" << array << std::endl;\n+        std::cout << \"C Data - Array Data Pointer Buffer array->buffers[1] = \" << array->buffers[1] << std::endl;\n+    }\n+\n+**Java Side**\n+\n+Define Java code CDataInterfaceLibraryConfig.java that consume by JNI C++ functions exported through\n+C Data Interface:\n\nReview Comment:\n   Added\n\n\n\n",
                    "created": "2022-04-07T14:25:10.821+0000",
                    "updated": "2022-04-07T14:25:10.821+0000",
                    "started": "2022-04-07T14:25:10.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754117",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845200185\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n\nReview Comment:\n   It is better to be explicit about dependencies (some projects will even check that you depend on any API you use, even if it's in transitive dependencies)\n\n\n\n",
                    "created": "2022-04-07T14:26:56.183+0000",
                    "updated": "2022-04-07T14:26:56.183+0000",
                    "started": "2022-04-07T14:26:56.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754120",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845201056\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,213 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    git clone https://github.com/apache/arrow.git\n+    cd arrow/cpp\n+    cmake --preset -N ninja-debug-minimal\n+    mkdir build   # from inside the `cpp` subdirectory\n+    cd build\n+    cmake .. --preset ninja-debug-minimal\n+    cmake --build .\n+    tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.h that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void fillCArray(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr){\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();;\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>cdatav2</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0.dev254</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.h\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    // Compile our Java code\n+    javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate CDataInterfaceLibrary\n+    java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    // Generate libjniCDataInterfaceLibrary.dylib\n+    java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    // Validate libjniCDataInterfaceLibrary.dylib created\n+    otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to Test C Data Interface from Java to C++:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterface {\n+        public static void main(String[] args) {\n+            try(\n+                BufferAllocator allocator = new RootAllocator();\n+                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+            ){\n+                CDataJavaToCppExample.fillCArray(\n+                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+                try(\n+                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                            allocator, arrowArray, arrowSchema, null)\n+                ){\n+                    System.out.println(\"Java using C Data Interface to read Array Filled by C++: \"\n+                            + bigIntVector);\n+                }\n\nReview Comment:\n   That doesn't actually call release. So we do need to call release here.\n\n\n\n",
                    "created": "2022-04-07T14:27:46.148+0000",
                    "updated": "2022-04-07T14:27:46.148+0000",
                    "started": "2022-04-07T14:27:46.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754121",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845205278\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,212 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    $ git clone https://github.com/apache/arrow.git\n+    $ cd arrow/cpp\n+    $ mkdir build   # from inside the `cpp` subdirectory\n+    $ cd build\n+    $ cmake .. --preset ninja-debug-minimal\n+    $ cmake --build .\n+    $ tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.cpp that export function **fillCArray** for third party\n+consumers like Java:\n\nReview Comment:\n   ```suggestion\r\n   Implement a function in CDataCppBridge.cpp that exports an array via the C Data Interface:\r\n   ```\n\n\n\n",
                    "created": "2022-04-07T14:36:12.079+0000",
                    "updated": "2022-04-07T14:36:12.079+0000",
                    "started": "2022-04-07T14:36:12.079+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754126",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845205647\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,212 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    $ git clone https://github.com/apache/arrow.git\n+    $ cd arrow/cpp\n+    $ mkdir build   # from inside the `cpp` subdirectory\n+    $ cd build\n+    $ cmake .. --preset ninja-debug-minimal\n+    $ cmake --build .\n+    $ tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.cpp that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void FillInt64Array(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n\nReview Comment:\n   ```suggestion\r\n   For this example, we will use `JavaCPP`_ to call our C++ function from Java,\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,212 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    $ git clone https://github.com/apache/arrow.git\n+    $ cd arrow/cpp\n+    $ mkdir build   # from inside the `cpp` subdirectory\n+    $ cd build\n+    $ cmake .. --preset ninja-debug-minimal\n+    $ cmake --build .\n+    $ tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.cpp that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void FillInt64Array(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n\nReview Comment:\n   ```suggestion\r\n   For this example, we will use `JavaCPP`_ to call our C++ function from Java,\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,212 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    $ git clone https://github.com/apache/arrow.git\n+    $ cd arrow/cpp\n+    $ mkdir build   # from inside the `cpp` subdirectory\n+    $ cd build\n+    $ cmake .. --preset ninja-debug-minimal\n+    $ cmake --build .\n+    $ tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.cpp that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void FillInt64Array(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>java-cdata-example</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.cpp\"\n\nReview Comment:\n   Hmm. We should have separate header/C++ files then, we shouldn't include a source file.\n\n\n\n",
                    "created": "2022-04-07T14:36:52.186+0000",
                    "updated": "2022-04-07T14:36:52.186+0000",
                    "started": "2022-04-07T14:36:52.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754130",
                    "issueId": "13426655"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/worklog/754131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12794:\nURL: https://github.com/apache/arrow/pull/12794#discussion_r845209743\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -0,0 +1,212 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+================\n+C Data Interface\n+================\n+\n+.. contents::\n+\n+Arrow supports exchanging data without copying or serialization within the same process\n+through the :ref:`c-data-interface`, even between different language runtimes.\n+\n+Java to Python\n+--------------\n+\n+Use this guide to implement :doc:`Java to Python <../python/integration/python_java.rst>`\n+communication using the C Data Interface.\n+\n+Java to C++\n+-----------\n+\n+Example: Share an Int64 array from C++ to Java:\n+\n+**C++ Side**\n+\n+Use this guide to :doc:`compile arrow <../developers/cpp/building.rst>` library:\n+\n+.. code-block:: shell\n+\n+    $ git clone https://github.com/apache/arrow.git\n+    $ cd arrow/cpp\n+    $ mkdir build   # from inside the `cpp` subdirectory\n+    $ cd build\n+    $ cmake .. --preset ninja-debug-minimal\n+    $ cmake --build .\n+    $ tree debug/\n+    debug/\n+    \u251c\u2500\u2500 libarrow.800.0.0.dylib\n+    \u251c\u2500\u2500 libarrow.800.dylib -> libarrow.800.0.0.dylib\n+    \u2514\u2500\u2500 libarrow.dylib -> libarrow.800.dylib\n+\n+Define C++ code CDataCppBridge.cpp that export function **fillCArray** for third party\n+consumers like Java:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+\n+    using arrow::Int64Builder;\n+\n+    void FillInt64Array(const uintptr_t c_schema_ptr, const uintptr_t c_array_ptr) {\n+        arrow::Int64Builder builder;\n+        builder.Append(1);\n+        builder.Append(2);\n+        builder.Append(3);\n+        builder.AppendNull();\n+        builder.Append(5);\n+        builder.Append(6);\n+        builder.Append(7);\n+        builder.Append(8);\n+        builder.Append(9);\n+        builder.Append(10);\n+        std::shared_ptr<arrow::Array> array = *builder.Finish();\n+\n+        struct ArrowSchema* c_schema = reinterpret_cast<struct ArrowSchema*>(c_schema_ptr);\n+        auto c_schema_status = arrow::ExportType(*array->type(), c_schema);\n+        if (!c_schema_status.ok()) c_schema_status.Abort();\n+\n+        struct ArrowArray* c_array = reinterpret_cast<struct ArrowArray*>(c_array_ptr);\n+        auto c_array_status = arrow::ExportArray(*array, c_array);\n+        if (!c_array_status.ok()) c_array_status.Abort();\n+    }\n+\n+**Java Side**\n+\n+For this example, we will use `JavaCPP`_ to call our main C++ **fillCArray** function from Java,\n+without writing JNI bindings ourselves.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+\n+        <groupId>org.example</groupId>\n+        <artifactId>java-cdata-example</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+\n+        <properties>\n+            <maven.compiler.source>8</maven.compiler.source>\n+            <maven.compiler.target>8</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.bytedeco</groupId>\n+                <artifactId>javacpp</artifactId>\n+                <version>1.5.7</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.bytedeco.javacpp.annotation.Platform;\n+    import org.bytedeco.javacpp.annotation.Properties;\n+    import org.bytedeco.javacpp.tools.InfoMap;\n+    import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+    @Properties(\n+            target = \"CDataJavaToCppExample\",\n+            value = @Platform(\n+                    include = {\n+                            \"CDataCppBridge.cpp\"\n+                    },\n+                    compiler = {\"cpp11\"},\n+                    linkpath = {\"/arrow/cpp/build/debug/\"},\n+                    link = {\"arrow\"}\n+            )\n+    )\n+    public class CDataJavaConfig implements InfoMapper {\n+\n+        @Override\n+        public void map(InfoMap infoMap) {\n+        }\n+    }\n+\n+.. code-block:: shell\n+\n+    # Compile our Java code\n+    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    # Generate CDataInterfaceLibrary\n+    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+\n+    # Generate libjniCDataInterfaceLibrary.dylib\n+    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+\n+    # Validate libjniCDataInterfaceLibrary.dylib created\n+    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+\n+**Java Test**\n+\n+Let's create a Java class to test our bridge:\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.BigIntVector;\n+\n+    public class TestCDataInterface {\n+        public static void main(String[] args) {\n+            try(\n+                BufferAllocator allocator = new RootAllocator();\n+                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+            ){\n+                CDataJavaToCppExample.FillInt64Array(\n+                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+                try(\n+                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                            allocator, arrowArray, arrowSchema, null)\n+                ){\n+                    System.out.println(\"C++-allocated array: \"\n+                            + bigIntVector);\n\nReview Comment:\n   ```suggestion\r\n                       System.out.println(\"C++-allocated array: \" + bigIntVector);\r\n   ```\n\n\n\n",
                    "created": "2022-04-07T14:37:12.226+0000",
                    "updated": "2022-04-07T14:37:12.226+0000",
                    "started": "2022-04-07T14:37:12.226+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754131",
                    "issueId": "13426655"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5fa317a4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44e6bf61[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ef6450b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3f1af603[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21273d97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@53977e0b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f35b76f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4777f664[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f24a098[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@37abea51[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35a7bd04[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4d1ba902[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 07 18:59:06 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-07T18:59:06.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15578/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-02-04T15:49:08.000+0000",
        "updated": "2022-04-08T22:11:31.000+0000",
        "timeoriginalestimate": null,
        "description": "Document how to use the C-Data interface to pass data to Python",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java][Doc] Document C Data and how to interface with other languages.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426655/comment/17519108",
                    "id": "17519108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12794\n[https://github.com/apache/arrow/pull/12794]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-07T18:59:06.248+0000",
                    "updated": "2022-04-07T18:59:06.248+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0z9lc:",
        "customfield_12314139": null
    }
}