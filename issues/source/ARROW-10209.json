{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13334160",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160",
    "key": "ARROW-10209",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
            "name": "maartenbreddels",
            "key": "maartenbreddels",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maarten Breddels",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
            "name": "maartenbreddels",
            "key": "maartenbreddels",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maarten Breddels",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10209/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/696006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955\n\n\n   \r\n   \r\n   This makes compute functions easier to use, for example here the required \"pattern\" option doesn't need to be passed by name:\r\n   ```\r\n   >>> pc.split_pattern(\"abacab\", \"a\")\r\n   <pyarrow.ListScalar: ['', 'b', 'c', 'b']>\r\n   ```\r\n   \r\n   ... and producing the following doc at the prompt:\r\n   ```\r\n   split_pattern(strings, /, pattern, *, max_splits=-1, reverse=False, options=None, memory_pool=None)\r\n       Split string according to separator.\r\n   \r\n       Split each string according to the exact `pattern` defined in\r\n       SplitPatternOptions.  The output for each string input is a list\r\n       of strings.\r\n   \r\n       The maximum number of splits and direction of splitting\r\n       (forward, reverse) can optionally be defined in SplitPatternOptions.\r\n   \r\n       Parameters\r\n       ----------\r\n       strings : Array-like or scalar-like\r\n           Argument to compute function\r\n       pattern : optional\r\n           Parameter for SplitPatternOptions constructor. Either `options`\r\n           or `pattern` can be passed, but not both at the same time.\r\n       max_splits : optional\r\n           Parameter for SplitPatternOptions constructor. Either `options`\r\n           or `max_splits` can be passed, but not both at the same time.\r\n       reverse : optional\r\n           Parameter for SplitPatternOptions constructor. Either `options`\r\n           or `reverse` can be passed, but not both at the same time.\r\n       options : pyarrow.compute.SplitPatternOptions, optional\r\n           Parameters altering compute function semantics.\r\n       memory_pool : pyarrow.MemoryPool, optional\r\n           If not passed, will allocate memory from the default memory pool.\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-14T18:06:51.904+0000",
                    "updated": "2021-12-14T18:06:51.904+0000",
                    "started": "2021-12-14T18:06:51.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696006",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/696009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#issuecomment-993842510\n\n\n   Based on #11951.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-14T18:07:11.361+0000",
                    "updated": "2021-12-14T18:07:11.361+0000",
                    "started": "2021-12-14T18:07:11.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696009",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/696011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#issuecomment-993843708\n\n\n   https://issues.apache.org/jira/browse/ARROW-10209\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-14T18:08:48.006+0000",
                    "updated": "2021-12-14T18:08:48.006+0000",
                    "started": "2021-12-14T18:08:48.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696011",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770302745\n\n\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1854,6 +1896,11 @@ def test_count():\n     assert pc.count(arr, mode='only_valid').as_py() == 3\n     assert pc.count(arr, mode='only_null').as_py() == 2\n     assert pc.count(arr, mode='all').as_py() == 5\n+    assert pc.count(arr, 'all').as_py() == 5\n\nReview comment:\n       I am wondering here, should we rather make the `mode` keyword keyword-only now we are changing this? \r\n   I don't find it super clear what the \"all\" in `pc.count(arr, 'all')` would mean.\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n\nReview comment:\n       I think there is value in having examples in the docstrings (IMO we should rather do more of those on the long term). We could maybe append those to the generated docstring?\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n-    \"\"\"\n-    options = ModeOptions(n, skip_nulls=skip_nulls, min_count=min_count)\n-    return call_function(\"mode\", [array], options)\n-\n-\n-def filter(data, mask, null_selection_behavior='drop'):\n\nReview comment:\n       Not fully sure if we should care, but users could have done `pc.filter(arr1, mask=arr2)` with a `mask` keyword, which will break now ..\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T08:08:19.010+0000",
                    "updated": "2021-12-16T08:08:19.010+0000",
                    "started": "2021-12-16T08:08:19.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697125",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770304217\n\n\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1854,6 +1896,11 @@ def test_count():\n     assert pc.count(arr, mode='only_valid').as_py() == 3\n     assert pc.count(arr, mode='only_null').as_py() == 2\n     assert pc.count(arr, mode='all').as_py() == 5\n+    assert pc.count(arr, 'all').as_py() == 5\n\nReview comment:\n       Actually, it's not that \"mode\" is that a clarifying keyword name either .., so ignore my comment.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T08:09:05.925+0000",
                    "updated": "2021-12-16T08:09:05.925+0000",
                    "started": "2021-12-16T08:09:05.925+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697126",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697207",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770464367\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n\nReview comment:\n       Indeed there is. I'm not sure how to do that in a maintainable way, though. Should we have a separate file with function stubs and docstrings?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T11:43:04.641+0000",
                    "updated": "2021-12-16T11:43:04.641+0000",
                    "started": "2021-12-16T11:43:04.641+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697207",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770466612\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n-    \"\"\"\n-    options = ModeOptions(n, skip_nulls=skip_nulls, min_count=min_count)\n-    return call_function(\"mode\", [array], options)\n-\n-\n-def filter(data, mask, null_selection_behavior='drop'):\n\nReview comment:\n       Hmm. I don't really like the idea of maintaining these special case wrappers, though. Or perhaps we could raise a deprecation warning before removing them.\r\n   \r\n   @amol- Thoughts?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T11:46:29.491+0000",
                    "updated": "2021-12-16T11:46:29.491+0000",
                    "started": "2021-12-16T11:46:29.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697210",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770466860\n\n\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -1854,6 +1896,11 @@ def test_count():\n     assert pc.count(arr, mode='only_valid').as_py() == 3\n     assert pc.count(arr, mode='only_null').as_py() == 2\n     assert pc.count(arr, mode='all').as_py() == 5\n+    assert pc.count(arr, 'all').as_py() == 5\n\nReview comment:\n       Yes, allowing positional arguments is always a balancing act...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T11:46:52.292+0000",
                    "updated": "2021-12-16T11:46:52.292+0000",
                    "started": "2021-12-16T11:46:52.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697211",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770471639\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n\nReview comment:\n       For example a separate file `_compute_docstrings.py` with contents such as:\r\n   ```python\r\n   \r\n   function_examples = {\r\n       \"mode\": \"\"\"\r\n           >>> import pyarrow as pa\r\n           >>> import pyarrow.compute as pc\r\n           >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\r\n           >>> modes = pc.mode(arr, 2)\r\n           >>> modes[0]\r\n           <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\r\n           >>> modes[1]\r\n           <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\r\n           \"\"\",\r\n   }\r\n   ```\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T11:54:06.240+0000",
                    "updated": "2021-12-16T11:54:06.240+0000",
                    "started": "2021-12-16T11:54:06.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697215",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770632330\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n\nReview comment:\n       Yes, something like that is what I had in mind. And then we can add those automatically to the generated docstrings. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T15:16:24.104+0000",
                    "updated": "2021-12-16T15:16:24.104+0000",
                    "started": "2021-12-16T15:16:24.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697296",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770745366\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n\nReview comment:\n       Ok, done. Can you take a look again?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T17:05:34.026+0000",
                    "updated": "2021-12-16T17:05:34.026+0000",
                    "started": "2021-12-16T17:05:34.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697369",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770779473\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n\nReview comment:\n       Looks good!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T17:50:31.653+0000",
                    "updated": "2021-12-16T17:50:31.653+0000",
                    "started": "2021-12-16T17:50:31.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697398",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#discussion_r770779663\n\n\n\n##########\nFile path: python/pyarrow/compute.py\n##########\n@@ -326,243 +335,6 @@ def cast(arr, target_type, safe=True):\n     return call_function(\"cast\", [arr], options)\n \n \n-def count_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the occurrences of substring *pattern* in each value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def count_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Count the non-overlapping matches of regex *pattern* in each value\n-    of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"count_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first occurrence of substring *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def find_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Find the index of the first match of regex *pattern* in each\n-    value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search for\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"find_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_like(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if the SQL-style LIKE pattern *pattern* matches a value of a\n-    string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        SQL-style LIKE pattern. '%' will match any number of\n-        characters, '_' will match exactly one character, and all\n-        other characters match themselves. To match a literal percent\n-        sign or underscore, precede the character with a backslash.\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-\n-    \"\"\"\n-    return call_function(\"match_like\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if substring *pattern* is contained within a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        pattern to search for exact matches\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def match_substring_regex(array, pattern, *, ignore_case=False):\n-    \"\"\"\n-    Test if regex *pattern* matches at any position a value of a string array.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    pattern : str\n-        regex pattern to search\n-    ignore_case : bool, default False\n-        Ignore case while searching.\n-\n-    Returns\n-    -------\n-    result : pyarrow.Array or pyarrow.ChunkedArray\n-    \"\"\"\n-    return call_function(\"match_substring_regex\", [array],\n-                         MatchSubstringOptions(pattern,\n-                                               ignore_case=ignore_case))\n-\n-\n-def mode(array, n=1, *, skip_nulls=True, min_count=0):\n-    \"\"\"\n-    Return top-n most common values and number of times they occur in a passed\n-    numerical (chunked) array, in descending order of occurrence. If there are\n-    multiple values with same count, the smaller one is returned first.\n-\n-    Parameters\n-    ----------\n-    array : pyarrow.Array or pyarrow.ChunkedArray\n-    n : int, default 1\n-        Specify the top-n values.\n-    skip_nulls : bool, default True\n-        If True, ignore nulls in the input. Else return an empty array\n-        if any input is null.\n-    min_count : int, default 0\n-        If there are fewer than this many values in the input, return\n-        an empty array.\n-\n-    Returns\n-    -------\n-    An array of <input type \"Mode\", int64_t \"Count\"> structs\n-\n-    Examples\n-    --------\n-    >>> import pyarrow as pa\n-    >>> import pyarrow.compute as pc\n-    >>> arr = pa.array([1, 1, 2, 2, 3, 2, 2, 2])\n-    >>> modes = pc.mode(arr, 2)\n-    >>> modes[0]\n-    <pyarrow.StructScalar: {'mode': 2, 'count': 5}>\n-    >>> modes[1]\n-    <pyarrow.StructScalar: {'mode': 1, 'count': 2}>\n-    \"\"\"\n-    options = ModeOptions(n, skip_nulls=skip_nulls, min_count=min_count)\n-    return call_function(\"mode\", [array], options)\n-\n-\n-def filter(data, mask, null_selection_behavior='drop'):\n\nReview comment:\n       Let's maybe just change this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T17:50:44.468+0000",
                    "updated": "2021-12-16T17:50:44.468+0000",
                    "started": "2021-12-16T17:50:44.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697399",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T18:49:30.922+0000",
                    "updated": "2021-12-16T18:49:30.922+0000",
                    "started": "2021-12-16T18:49:30.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697435",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#issuecomment-996086944\n\n\n   Benchmark runs are scheduled for baseline = 8a4d8127aae80b27afb35755d44a8b61d770a706 and contender = 81c8a0e06bf71f82d0ef8350776f3440672b90e9. 81c8a0e06bf71f82d0ef8350776f3440672b90e9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/db504aa871de4ed9bdc9751ec5439404...64f00da8d1664fc9bb64f98385f2d209/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/973318c443e448bbafd32813dfd5e35c...5ed02eb2a7b1424286a93378b12b5315/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6421379fa9164cecaaa30b54663929ce...dd7d9bc3782946cf955c14a8eb0361c2/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T18:51:22.284+0000",
                    "updated": "2021-12-16T18:51:22.284+0000",
                    "started": "2021-12-16T18:51:22.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697439",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/697468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#issuecomment-996086944\n\n\n   Benchmark runs are scheduled for baseline = 8a4d8127aae80b27afb35755d44a8b61d770a706 and contender = 81c8a0e06bf71f82d0ef8350776f3440672b90e9. 81c8a0e06bf71f82d0ef8350776f3440672b90e9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/db504aa871de4ed9bdc9751ec5439404...64f00da8d1664fc9bb64f98385f2d209/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/973318c443e448bbafd32813dfd5e35c...5ed02eb2a7b1424286a93378b12b5315/)\n   [Scheduled] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6421379fa9164cecaaa30b54663929ce...dd7d9bc3782946cf955c14a8eb0361c2/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T19:41:55.587+0000",
                    "updated": "2021-12-16T19:41:55.587+0000",
                    "started": "2021-12-16T19:41:55.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697468",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/698102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#issuecomment-996086944\n\n\n   Benchmark runs are scheduled for baseline = 8a4d8127aae80b27afb35755d44a8b61d770a706 and contender = 81c8a0e06bf71f82d0ef8350776f3440672b90e9. 81c8a0e06bf71f82d0ef8350776f3440672b90e9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/db504aa871de4ed9bdc9751ec5439404...64f00da8d1664fc9bb64f98385f2d209/)\n   [Scheduled] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/973318c443e448bbafd32813dfd5e35c...5ed02eb2a7b1424286a93378b12b5315/)\n   [Finished :arrow_down:0.8% :arrow_up:0.13%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6421379fa9164cecaaa30b54663929ce...dd7d9bc3782946cf955c14a8eb0361c2/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T20:41:30.118+0000",
                    "updated": "2021-12-17T20:41:30.118+0000",
                    "started": "2021-12-17T20:41:30.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698102",
                    "issueId": "13334160"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/worklog/698282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #11955:\nURL: https://github.com/apache/arrow/pull/11955#issuecomment-996086944\n\n\n   Benchmark runs are scheduled for baseline = 8a4d8127aae80b27afb35755d44a8b61d770a706 and contender = 81c8a0e06bf71f82d0ef8350776f3440672b90e9. 81c8a0e06bf71f82d0ef8350776f3440672b90e9 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/db504aa871de4ed9bdc9751ec5439404...64f00da8d1664fc9bb64f98385f2d209/)\n   [Finished :arrow_down:0.9% :arrow_up:0.9%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/973318c443e448bbafd32813dfd5e35c...5ed02eb2a7b1424286a93378b12b5315/)\n   [Finished :arrow_down:0.8% :arrow_up:0.13%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6421379fa9164cecaaa30b54663929ce...dd7d9bc3782946cf955c14a8eb0361c2/)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python. Runs only benchmarks with cloud = True\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-18T16:51:19.097+0000",
                    "updated": "2021-12-18T16:51:19.097+0000",
                    "started": "2021-12-18T16:51:19.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698282",
                    "issueId": "13334160"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@543c43f0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b7e2873[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a62039f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@60859910[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3da92ef6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@efcbd03[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@242829b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@68297934[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c833459[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@77fc866f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12fc04c1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@313f3f73[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 16 18:49:17 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-16T18:49:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10209/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-10-07T10:32:58.000+0000",
        "updated": "2021-12-18T16:51:19.000+0000",
        "timeoriginalestimate": null,
        "description": "As mentioned here:\r\n\r\n[https://github.com/apache/arrow/pull/8271#discussion_r500897047]\r\n\r\nwe cannot support\r\n{code:java}\r\npc.split_pattern(arr, \"---\")\r\n{code}\r\nwhere the second argument is a positional argument of the FunctionObject class.\r\n\r\nI think it makes sense for a small subset (like this function) to support non-keyword arguments.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] support positional arguments for options in compute wrapper",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/comment/17368331",
                    "id": "17368331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I agree this is desirable. It will also complicate the function generation quite a bit.\r\n\r\n(note that varargs functions must be excluded)\r\n\r\ncc [~amol-]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-23T16:21:34.794+0000",
                    "updated": "2021-06-23T16:21:34.794+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13334160/comment/17460968",
                    "id": "17460968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 11955\n[https://github.com/apache/arrow/pull/11955]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-12-16T18:49:17.001+0000",
                    "updated": "2021-12-16T18:49:17.001+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jhfc:",
        "customfield_12314139": null
    }
}