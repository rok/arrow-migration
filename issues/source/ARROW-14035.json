{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13402017",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017",
    "key": "ARROW-14035",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "name": "Critical",
            "id": "2"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12623242",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623242",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13377676",
                    "key": "ARROW-12728",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377676",
                    "fields": {
                        "summary": "[C++][Compute] Implement count_distinct/distinct hash aggregate kernels ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12623244",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623244",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13402019",
                    "key": "ARROW-14036",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402019",
                    "fields": {
                        "summary": "[R] Binding for n_distinct() with no grouping",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
            "name": "aucahuasi",
            "key": "aucahuasi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
            },
            "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 75600,
            "total": 75600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 75600,
            "total": 75600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14035/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 126,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/655899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi opened a new pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257\n\n\n   https://issues.apache.org/jira/browse/ARROW-14035\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T00:45:07.930+0000",
                    "updated": "2021-09-28T00:45:07.930+0000",
                    "started": "2021-09-28T00:45:07.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655899",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/655900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-928524981\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   If this is not a [minor PR](https://github.com/apache/arrow/blob/master/CONTRIBUTING.md#Minor-Fixes). Could you open an issue for this pull request on JIRA? https://issues.apache.org/jira/browse/ARROW\n   \n   Opening JIRAs ahead of time contributes to the [Openness](http://theapacheway.com/open/#:~:text=Openness%20allows%20new%20users%20the,must%20happen%20in%20the%20open.) of the Apache Arrow project.\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   or\n   \n       MINOR: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T00:45:31.929+0000",
                    "updated": "2021-09-28T00:45:31.929+0000",
                    "started": "2021-09-28T00:45:31.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655900",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/655901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-928526644\n\n\n   https://issues.apache.org/jira/browse/ARROW-14035\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T00:46:55.461+0000",
                    "updated": "2021-09-28T00:46:55.461+0000",
                    "started": "2021-09-28T00:46:55.461+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655901",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r717611700\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n\nReview comment:\n       Note for later, we should also handle scalars.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      case CountOptions::ONLY_NULL:\n+        //*out = Datum(state.nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      default:\n+        DCHECK(false) << \"unreachable\";\n+    }\n+    return Status::OK();\n+  }\n+\n+  CountOptions options;\n+  int64_t result_countd = 0;\n\nReview comment:\n       Is this a typo for result_count?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n\nReview comment:\n       Hmm, we shouldn't use the default memory pool. CountDistinctInit gets a KernelContext which can be passed here; it contains the memory pool to use.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n\nReview comment:\n       Just a note for later, but this should be ConsumeMemo not consume_memo\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      case CountOptions::ONLY_NULL:\n+        //*out = Datum(state.nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      default:\n+        DCHECK(false) << \"unreachable\";\n+    }\n+    return Status::OK();\n+  }\n+\n+  CountOptions options;\n+  int64_t result_countd = 0;\n+  std::unique_ptr<MemoTable> memo_table_ = nullptr;\n\nReview comment:\n       nit, but if we're initializing this in the constructor anyways, there's no need to also initialize here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T14:06:41.499+0000",
                    "updated": "2021-09-28T14:06:41.499+0000",
                    "started": "2021-09-28T14:06:41.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656165",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r717880947\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n\nReview comment:\n       If `ONLY_VALID` == 'ALL` does it even matter to have `ONLY_NULL`? or these options at all?\r\n   What is the expected semantics of `count_distinct` based on these options?\r\n   * `ONLY_VALID` - `count_distinct` on non-null values\r\n   * `ONLY_NULL`\r\n     * if `null count` >= 0 then return `min(null count, 1)`\r\n     * if `null count` < 0, then compute null count and return 1\r\n   * `ALL` - return `f(ONLY_VALID) + f(ONLY_NULL)`\r\n   \r\n   *NOTE: There may have been requirements/discussion on this that I may not be aware of*.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:03:33.591+0000",
                    "updated": "2021-09-28T19:03:33.591+0000",
                    "started": "2021-09-28T19:03:33.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656354",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r717884569\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n\nReview comment:\n       Well, I now saw the existing Count implementation that was already there. So ok if you are following the same behavior.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:08:54.613+0000",
                    "updated": "2021-09-28T19:08:54.613+0000",
                    "started": "2021-09-28T19:08:54.613+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656357",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r717885797\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -873,6 +873,37 @@ TYPED_TEST(TestRandomNumericCountKernel, RandomArrayCount) {\n   }\n }\n \n+//\n+// Count Distinct\n+//\n+\n+class PercyTestCountKernel : public ::testing::Test {\n+};\n+\n+void PercyValidateCountDistinct(const Array& input, int64_t expected) {\n+  CountOptions non_null;\n+//  CountOptions nulls(CountOptions::ONLY_NULL);\n+//  CountOptions all(CountOptions::ALL);\n+\n+  ASSERT_OK_AND_ASSIGN(Datum result, CallFunction(\"count_distinct\", {input}));\n+  AssertDatumsEqual(result, Datum(expected));\n+\n+//  ASSERT_OK_AND_ASSIGN(result, Count(input, nulls));\n+//  AssertDatumsEqual(result, Datum(expected.second));\n+\n+//  ASSERT_OK_AND_ASSIGN(result, Count(input, all));\n+//  AssertDatumsEqual(result, Datum(expected.first + expected.second));\n+}\n+\n+void PercyValidateCountDistinct(const char* json, int64_t expected) {\n+  auto array = ArrayFromJSON(int32(), json);\n+  PercyValidateCountDistinct(*array, expected);\n+}\n+\n+TEST_F(PercyTestCountKernel, Percy) {\n+  PercyValidateCountDistinct(\"[1, 1, 2, 2, 5, 8, 9, 9, 9, 10, 6, 6]\", 7);\n+}\n\nReview comment:\n       Add more tests that combine valid, nulls, etc.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:10:42.269+0000",
                    "updated": "2021-09-28T19:10:42.269+0000",
                    "started": "2021-09-28T19:10:42.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656359",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-929557580\n\n\n   @aucahuasi may I push a commit to this PR to implement the R binding? (ARROW-14036)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:27:00.943+0000",
                    "updated": "2021-09-28T19:27:00.943+0000",
                    "started": "2021-09-28T19:27:00.943+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656377",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-929559768\n\n\n   @ianmcook sure! \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:30:13.397+0000",
                    "updated": "2021-09-28T19:30:13.397+0000",
                    "started": "2021-09-28T19:30:13.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656381",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-929557580\n\n\n   @aucahuasi may I push a commit to this PR to implement the R binding? (ARROW-14036)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:47:01.738+0000",
                    "updated": "2021-09-28T19:47:01.738+0000",
                    "started": "2021-09-28T19:47:01.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656413",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi opened a new pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257\n\n\n   https://issues.apache.org/jira/browse/ARROW-14035\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:48:33.428+0000",
                    "updated": "2021-09-28T19:48:33.428+0000",
                    "started": "2021-09-28T19:48:33.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656431",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-929559768\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:53:59.332+0000",
                    "updated": "2021-09-28T19:53:59.332+0000",
                    "started": "2021-09-28T19:53:59.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656491",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r717880947\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n\nReview comment:\n       If `ONLY_VALID` == 'ALL` does it even matter to have `ONLY_NULL`? or these options at all?\r\n   What is the expected semantics of `count_distinct` based on these options?\r\n   * `ONLY_VALID` - `count_distinct` on non-null values\r\n   * `ONLY_NULL`\r\n     * if `null count` >= 0 then return `min(null count, 1)`\r\n     * if `null count` < 0, then compute null count and return 1\r\n   * `ALL` - return `f(ONLY_VALID) + f(ONLY_NULL)`\r\n   \r\n   *NOTE: There may have been requirements/discussion on this that I may not be aware of*.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n\nReview comment:\n       Well, I now saw the existing Count implementation that was already there. So ok if you are following the same behavior.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -873,6 +873,37 @@ TYPED_TEST(TestRandomNumericCountKernel, RandomArrayCount) {\n   }\n }\n \n+//\n+// Count Distinct\n+//\n+\n+class PercyTestCountKernel : public ::testing::Test {\n+};\n+\n+void PercyValidateCountDistinct(const Array& input, int64_t expected) {\n+  CountOptions non_null;\n+//  CountOptions nulls(CountOptions::ONLY_NULL);\n+//  CountOptions all(CountOptions::ALL);\n+\n+  ASSERT_OK_AND_ASSIGN(Datum result, CallFunction(\"count_distinct\", {input}));\n+  AssertDatumsEqual(result, Datum(expected));\n+\n+//  ASSERT_OK_AND_ASSIGN(result, Count(input, nulls));\n+//  AssertDatumsEqual(result, Datum(expected.second));\n+\n+//  ASSERT_OK_AND_ASSIGN(result, Count(input, all));\n+//  AssertDatumsEqual(result, Datum(expected.first + expected.second));\n+}\n+\n+void PercyValidateCountDistinct(const char* json, int64_t expected) {\n+  auto array = ArrayFromJSON(int32(), json);\n+  PercyValidateCountDistinct(*array, expected);\n+}\n+\n+TEST_F(PercyTestCountKernel, Percy) {\n+  PercyValidateCountDistinct(\"[1, 1, 2, 2, 5, 8, 9, 9, 9, 10, 6, 6]\", 7);\n+}\n\nReview comment:\n       Add more tests that combine valid, nulls, etc.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T20:11:28.269+0000",
                    "updated": "2021-09-28T20:11:28.269+0000",
                    "started": "2021-09-28T20:11:28.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656692",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-928524981\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T20:11:51.161+0000",
                    "updated": "2021-09-28T20:11:51.161+0000",
                    "started": "2021-09-28T20:11:51.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656698",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r717611700\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n\nReview comment:\n       Note for later, we should also handle scalars.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      case CountOptions::ONLY_NULL:\n+        //*out = Datum(state.nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      default:\n+        DCHECK(false) << \"unreachable\";\n+    }\n+    return Status::OK();\n+  }\n+\n+  CountOptions options;\n+  int64_t result_countd = 0;\n\nReview comment:\n       Is this a typo for result_count?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n\nReview comment:\n       Hmm, we shouldn't use the default memory pool. CountDistinctInit gets a KernelContext which can be passed here; it contains the memory pool to use.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n\nReview comment:\n       Just a note for later, but this should be ConsumeMemo not consume_memo\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,101 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  Status consume_memo(const ArrayData& arr) {\n+    auto visit_null = [&]() {\n+      //return string_builder.AppendNull();\n+      return Status::OK();\n+    };\n+    auto visit_value = [&](typename Type::c_type arg) {\n+      //ARROW_ASSIGN_OR_RAISE(auto formatted, formatter(arg));\n+      //return string_builder.Append(std::move(formatted));\n+      int y;\n+      RETURN_NOT_OK(memo_table_->GetOrInsert(arg, &y));\n+      //std::cout << \"AAAAAAAAAAAAAADFFFFFFFFFFFFFFFFFF\\n\" << arg << \"\\n\";\n+      return Status::OK();\n+    };\n+    RETURN_NOT_OK(VisitArrayDataInline<Type>(arr, visit_value, visit_null));\n+    return Status::OK();\n+  }\n+\n+  explicit CountDistinctImpl(CountOptions options) : options(std::move(options)), memo_table_(new MemoTable(default_memory_pool(), 0)) {\n+  }\n+\n+  Status Consume(KernelContext* ctx, const ExecBatch& batch) override {\n+    auto a = batch[0].make_array();\n+    //std::cout << \"LOTEEEEEEEEEEE\\n\" << a->ToString() << \"\\n\";\n+    \n+    const ArrayData& arr = *batch[0].array();\n+    \n+    consume_memo(arr);\n+    \n+    //std::cout << \"MEMOOOOOOOOOOOO\\n\" << this->memo_table_->size() << \"\\n\";\n+    this->result_countd += this->memo_table_->size();\n+    return Status::OK();\n+    //RETURN_NOT_OK(lookup_table->GetOrInsert());\n+    \n+    //ARROW_ASSIGN_OR_RAISE(auto grouper, internal::Grouper::Make(batch.GetDescriptors(), ctx->exec_context()));\n+    //return grouper->Consume(batch).status();\n+//    if (options.mode == CountOptions::ALL) {\n+//      this->non_nulls += batch.length;\n+//    } else if (batch[0].is_array()) {\n+//      const ArrayData& input = *batch[0].array();\n+//      const int64_t nulls = input.GetNullCount();\n+//      this->nulls += nulls;\n+//      this->non_nulls += input.length - nulls;\n+//    } else {\n+//      const Scalar& input = *batch[0].scalar();\n+//      this->nulls += !input.is_valid * batch.length;\n+//      this->non_nulls += input.is_valid * batch.length;\n+//    }\n+//    return Status::OK();\n+  }\n+\n+  Status MergeFrom(KernelContext*, KernelState&& src) override {\n+    const auto& other_state = checked_cast<const CountDistinctImpl&>(src);\n+    //this->non_nulls += other_state.non_nulls;\n+    //this->nulls += other_state.nulls;\n+    this->result_countd += other_state.result_countd;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& state = checked_cast<const CountDistinctImpl&>(*ctx->state());\n+    switch (state.options.mode) {\n+      case CountOptions::ONLY_VALID:\n+      case CountOptions::ALL:\n+        // ALL is equivalent since we don't count the null/non-null\n+        // separately to avoid potentially computing null count\n+        //*out = Datum(state.non_nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      case CountOptions::ONLY_NULL:\n+        //*out = Datum(state.nulls);\n+        *out = Datum(state.result_countd);\n+        break;\n+      default:\n+        DCHECK(false) << \"unreachable\";\n+    }\n+    return Status::OK();\n+  }\n+\n+  CountOptions options;\n+  int64_t result_countd = 0;\n+  std::unique_ptr<MemoTable> memo_table_ = nullptr;\n\nReview comment:\n       nit, but if we're initializing this in the constructor anyways, there's no need to also initialize here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T20:15:21.056+0000",
                    "updated": "2021-09-28T20:15:21.056+0000",
                    "started": "2021-09-28T20:15:21.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656741",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/656958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aucahuasi commented on pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#issuecomment-929717611\n\n\n   @lidavidm @edponce Once again, thank you for the feedback!\r\n   I sent new changes and I think this PR is ready for review.\r\n   btw I also added a test in python with timestamps.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T00:20:02.364+0000",
                    "updated": "2021-09-29T00:20:02.364+0000",
                    "started": "2021-09-29T00:20:02.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656958",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/657007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r718152329\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,84 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  explicit CountDistinctImpl(MemoryPool* memory_pool, CountOptions options)\n+      : options(std::move(options)), memo_table_(new MemoTable(memory_pool, 0)) {}\n+\n+  Status Consume(KernelContext*, const ExecBatch& batch) override {\n+    if (batch[0].is_array()) {\n+      const ArrayData& arr = *batch[0].array();\n+      auto visit_null = [&]() {\n+        if (this->nulls > 0) return Status::OK();\n+        ++this->nulls;\n+        return Status::OK();\n+      };\n\nReview comment:\n       IIUC, `this->nulls` is of interest in terms of it either being zero or non-zero, and if it is non-zero the actual value does not matters. The lambda has the check to try to short-circuit based on it being non-zero but I will argue that the conditional check can be more expensive than a simple integer add. So I would simplify it to an unconditional counter:\r\n   ```c++\r\n   auto visit_null = [&]() {\r\n     ++this->nulls;\r\n     return Status::OK();\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T04:55:28.999+0000",
                    "updated": "2021-09-29T04:55:28.999+0000",
                    "started": "2021-09-29T04:55:28.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657007",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/657008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r718152329\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,84 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  explicit CountDistinctImpl(MemoryPool* memory_pool, CountOptions options)\n+      : options(std::move(options)), memo_table_(new MemoTable(memory_pool, 0)) {}\n+\n+  Status Consume(KernelContext*, const ExecBatch& batch) override {\n+    if (batch[0].is_array()) {\n+      const ArrayData& arr = *batch[0].array();\n+      auto visit_null = [&]() {\n+        if (this->nulls > 0) return Status::OK();\n+        ++this->nulls;\n+        return Status::OK();\n+      };\n\nReview comment:\n       IIUC, `this->nulls` is of interest in terms of it either being zero or non-zero, and if it is non-zero then it is treated as a distinct value of 1. The lambda has the check to try to short-circuit based on it being non-zero but I will argue that the conditional check can be more expensive than a simple integer add. So I would simplify it to an unconditional counter and use its value once via `std::min(this->nulls, 1)`.\r\n   ```c++\r\n   auto visit_null = [&]() {\r\n     ++this->nulls;\r\n     return Status::OK();\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T05:08:45.177+0000",
                    "updated": "2021-09-29T05:08:45.177+0000",
                    "started": "2021-09-29T05:08:45.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657008",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/657010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r718152329\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,84 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  explicit CountDistinctImpl(MemoryPool* memory_pool, CountOptions options)\n+      : options(std::move(options)), memo_table_(new MemoTable(memory_pool, 0)) {}\n+\n+  Status Consume(KernelContext*, const ExecBatch& batch) override {\n+    if (batch[0].is_array()) {\n+      const ArrayData& arr = *batch[0].array();\n+      auto visit_null = [&]() {\n+        if (this->nulls > 0) return Status::OK();\n+        ++this->nulls;\n+        return Status::OK();\n+      };\n\nReview comment:\n       IIUC, `this->nulls` is of interest in terms of it either being zero or non-zero, and if it is non-zero then it is treated as a distinct value of 1. The lambda has the check to try to short-circuit based on it being non-zero but I will argue that the conditional check can be more expensive than a simple integer add. So I would simplify it to an unconditional counter and use its value once via `std::min(this->nulls, 1)`.\r\n   ```c++\r\n   auto visit_null = [&]() {\r\n     ++this->nulls;\r\n     return Status::OK();\r\n   }\r\n   ```\r\n   Even better, I suggest to use `GetNullCount()` and make a dummy lambda:\r\n   ```c++\r\n   this->nulls = arr.GetNullCount();\r\n   auto visit_null = []() { return Status::OK(); }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T05:14:42.834+0000",
                    "updated": "2021-09-29T05:14:42.834+0000",
                    "started": "2021-09-29T05:14:42.834+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657010",
                    "issueId": "13402017"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/worklog/657011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11257:\nURL: https://github.com/apache/arrow/pull/11257#discussion_r718152329\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -121,6 +122,84 @@ Result<std::unique_ptr<KernelState>> CountInit(KernelContext*,\n       static_cast<const CountOptions&>(*args.options));\n }\n \n+// ----------------------------------------------------------------------\n+// Distinct Count implementation\n+\n+template <typename Type>\n+struct CountDistinctImpl : public ScalarAggregator {\n+  using MemoTable = typename arrow::internal::HashTraits<Type>::MemoTableType;\n+\n+  explicit CountDistinctImpl(MemoryPool* memory_pool, CountOptions options)\n+      : options(std::move(options)), memo_table_(new MemoTable(memory_pool, 0)) {}\n+\n+  Status Consume(KernelContext*, const ExecBatch& batch) override {\n+    if (batch[0].is_array()) {\n+      const ArrayData& arr = *batch[0].array();\n+      auto visit_null = [&]() {\n+        if (this->nulls > 0) return Status::OK();\n+        ++this->nulls;\n+        return Status::OK();\n+      };\n\nReview comment:\n       IIUC, `this->nulls` is of interest in terms of it either being zero or non-zero, and if it is non-zero then it is treated as a distinct value of 1. The lambda has the check to try to short-circuit based on it being non-zero but I will argue that the conditional check can be more expensive than a simple integer add. So I would simplify it to an unconditional counter and use its value once via `std::min(this->nulls, 1)`.\r\n   ```c++\r\n   auto visit_null = [&]() {\r\n     ++this->nulls;\r\n     return Status::OK();\r\n   }\r\n   ```\r\n   Also, you can query `arr.MayHaveNulls()` and if it is false, then `visit_null` is simply a dummy lambda:\r\n   ```c++\r\n   auto visit_null = []() { return Status::OK(); }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T05:29:07.906+0000",
                    "updated": "2021-09-29T05:29:07.906+0000",
                    "started": "2021-09-29T05:29:07.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657011",
                    "issueId": "13402017"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 75600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3f1b59cf[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@614f18ae[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bfb3b14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@52e8c0ad[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a33a4df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@ad9e368[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18e85abc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@c111ca4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6be354a5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2ee42812[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7483aac8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@70f36cc0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 75600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 05 14:22:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-05T14:22:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14035/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2021-09-18T17:44:01.000+0000",
        "updated": "2021-10-05T14:23:31.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-12728 added a {{hash_count_distinct}}\u00a0hash aggregate kernel, but there is no\u00a0non-hash\u00a0{{count_distinct}} aggregate kernel.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "21h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 75600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Implement non-hash count_distinct aggregate kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17418863",
                    "id": "17418863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Can you please elaborate more about this requirement?\r\n # Do we need to compute the same thing of hash_count_distinct but without using the hash table from the hash group?\r\n # Are we going to offer non hash version for all hash_x functions too? (hash_distinct, hash_count, hash_sum)\r\n\r\ncc [~icook]\u00a0@lidavidm",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-22T22:56:33.401+0000",
                    "updated": "2021-09-22T22:58:24.407+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17418866",
                    "id": "17418866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "{quote}1. Do we need to compute the same thing of hash_count_distinct but without using the hash table from the hash group?\r\n{quote}\r\nYes. [~lidavidm]\u00a0if I am missing any nuance here, please let me know :)\r\n{quote}Are we going to offer non hash version for all hash_x functions too? (hash_distinct, hash_count, hash_sum)\r\n{quote}\r\nYes I think we should aim for that (or nearly that; there might be a few exceptions where it does not make sense.) Comparing the lists of aggregation functions and hash (grouped) aggregation functions in [compute.rst|https://github.com/apache/arrow/blob/master/docs/source/cpp/compute.rst], they are mostly the same already, with just a few differences. I think this issue and ARROW-13309 are the most important two additions to bring these two lists closer to parity.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-22T23:10:37.352+0000",
                    "updated": "2021-09-22T23:12:11.922+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17419364",
                    "id": "17419364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks [~icook], another question: What is the difference between\u00a0_value_counts_ and\u00a0_count_distinct_?\r\n\r\n[https://github.com/apache/arrow/blob/master/docs/source/cpp/compute.rst#associative-transforms]\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-23T17:45:08.368+0000",
                    "updated": "2021-09-23T17:45:08.368+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17419366",
                    "id": "17419366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "{{value_counts}} gives you a histogram where the x-axis are the distinct values and the y-axis is the number of occurrences of that value. {{count_distinct}} is\u00a0 just {{COUNT(DISTINCT *)}}.\r\n\r\nAlso, {{value_counts}} is a vector kernel whereas this should be a scalar aggregate kernel.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-23T17:48:00.915+0000",
                    "updated": "2021-09-23T17:48:00.915+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17419368",
                    "id": "17419368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks David!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-23T17:51:01.195+0000",
                    "updated": "2021-09-23T17:51:01.195+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17421478",
                    "id": "17421478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Draft PR\u00a0https://github.com/apache/arrow/pull/11257",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-28T15:55:21.047+0000",
                    "updated": "2021-09-28T15:55:21.047+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17421634",
                    "id": "17421634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Related\u00a0https://issues.apache.org/jira/browse/ARROW-14158",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=aucahuasi",
                        "name": "aucahuasi",
                        "key": "aucahuasi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aucahuasi&avatarId=47450",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aucahuasi&avatarId=47450",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aucahuasi&avatarId=47450",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aucahuasi&avatarId=47450"
                        },
                        "displayName": "Percy Camilo Trive\u00f1o Aucahuasi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-28T19:46:08.315+0000",
                    "updated": "2021-09-28T19:46:08.315+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402017/comment/17424498",
                    "id": "17424498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 11257\n[https://github.com/apache/arrow/pull/11257]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-10-05T14:22:49.611+0000",
                    "updated": "2021-10-05T14:22:49.611+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z0v2fs:",
        "customfield_12314139": null
    }
}