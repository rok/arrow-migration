{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13257781",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781",
    "key": "ARROW-6625",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12592800",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12592800",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13269963",
                    "key": "ARROW-7229",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13269963",
                    "fields": {
                        "summary": "[C++] Unify ConcatenateTables APIs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=brillsp",
            "name": "brillsp",
            "key": "brillsp",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Zhuo Peng",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nugend",
            "name": "nugend",
            "key": "nugend",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Daniel Nugent",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nugend",
            "name": "nugend",
            "key": "nugend",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Daniel Nugent",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 39600,
            "total": 39600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 39600,
            "total": 39600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6625/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 82,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/319857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brills commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534\n \n \n   Also allows it to promote a column of type Null to a null-filled non-Null type.\r\n   \r\n   There are some open questions:\r\n   \r\n   - Do we merge the metadata in schema or fields or not (and what is the semantic of such a merge)?\r\n   - Does the order of columns in the result schema need to be deterministic? Note that with the current implementation, two identical call to Concat() might result in different ordering.\r\n   - Do we allow concat tables with duplicate column names? how?\r\n   - Do we want to make two separate APIs, one strict, one non-strict? their semantics start differing, and implementations don't overlap much.\r\n   \r\n   I'll add more test cases to cover the corner cases once questions got answered.\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-27T22:17:47.746+0000",
                    "updated": "2019-09-27T22:17:47.746+0000",
                    "started": "2019-09-27T22:17:47.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "319857",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/320266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#issuecomment-536329771\n \n \n   https://issues.apache.org/jira/browse/ARROW-6625\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-29T18:46:13.160+0000",
                    "updated": "2019-09-29T18:46:13.160+0000",
                    "started": "2019-09-29T18:46:13.159+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "320266",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/320510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r329584861\n \n \n\n ##########\n File path: c_glib/arrow-glib/table.cpp\n ##########\n @@ -18,7 +18,7 @@\n  */\n \n #ifdef HAVE_CONFIG_H\n-#  include <config.h>\n+#include <config.h>\n \n Review comment:\n   Please revert the formatting changes. If there are any changes to table.cpp which aren't formatting I can't see them easily.\r\n   \r\n   Reformatting is valid but if it needs to be done at scale then I'd prefer it be done in a dedicated PR\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-30T13:58:13.392+0000",
                    "updated": "2019-09-30T13:58:13.392+0000",
                    "started": "2019-09-30T13:58:13.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "320510",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/320879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brills commented on issue #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#issuecomment-536758645\n \n \n   Thanks for the review, PTAL.\r\n   \r\n   breaking the logic into smaller functions sounds good and I made the changes. I also reverted the change to all the language bindings.\r\n   \r\n   I'll add more unit tests once there's no high-level comments.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-30T21:22:08.349+0000",
                    "updated": "2019-09-30T21:22:08.349+0000",
                    "started": "2019-09-30T21:22:08.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "320879",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/321337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r330131206\n \n \n\n ##########\n File path: cpp/src/arrow/table.cc\n ##########\n @@ -511,6 +511,86 @@ Status ConcatenateTables(const std::vector<std::shared_ptr<Table>>& tables,\n   return Status::OK();\n }\n \n+Status ConcatenateTablesWithPromotion(\n+    MemoryPool* pool, const std::vector<std::shared_ptr<Table>>& tables,\n+    std::shared_ptr<Table>* out) {\n+  std::vector<std::shared_ptr<Schema>> schemas;\n+  schemas.reserve(tables.size());\n+  for (const auto& t : tables) schemas.push_back(t->schema());\n+  std::shared_ptr<Schema> unified_schema;\n+  RETURN_NOT_OK(UnifySchemas(schemas, &unified_schema));\n+\n+  std::vector<std::shared_ptr<Table>> promoted_tables;\n+  promoted_tables.reserve(tables.size());\n+  for (const auto& t : tables) {\n+    promoted_tables.emplace_back();\n+    RETURN_NOT_OK(PromoteTableToSchema(\n+        pool, t, unified_schema, &promoted_tables.back()));\n+  }\n+\n+  return ConcatenateTables(promoted_tables, out);\n+}\n+\n+ARROW_EXPORT\n+Status PromoteTableToSchema(MemoryPool* pool,\n+                            const std::shared_ptr<Table>& table,\n+                            const std::shared_ptr<Schema>& schema,\n+                            std::shared_ptr<Table>* out) {\n+  const std::shared_ptr<Schema> current_schema = table->schema();\n+  if (current_schema->Equals(*schema, /*check_metadata=*/false)) {\n+    *out = table->ReplaceSchemaMetadata(schema->metadata());\n+    return Status::OK();\n+  }\n+\n+  // fields_seen[i] == true iff that field is also in `schema`.\n+  std::vector<bool> fields_seen(current_schema->num_fields());\n \n Review comment:\n   I think this is the default, but better to be explicit:\r\n   ```suggestion\r\n     std::vector<bool> fields_seen(current_schema->num_fields(), false);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T16:09:13.867+0000",
                    "updated": "2019-10-01T16:09:13.867+0000",
                    "started": "2019-10-01T16:09:13.867+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321337",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/321340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r330141619\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -686,6 +686,57 @@ std::shared_ptr<Schema> schema(std::vector<std::shared_ptr<Field>>&& fields,\n   return std::make_shared<Schema>(std::move(fields), metadata);\n }\n \n+\n+Status UnifySchemas(\n+    const std::vector<std::shared_ptr<Schema>>& schemas,\n+    std::shared_ptr<Schema>* out) {\n+  if (schemas.empty()) {\n \n Review comment:\n   ```suggestion\r\n     DCHECK(!schemas.empty());\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T16:09:13.871+0000",
                    "updated": "2019-10-01T16:09:13.871+0000",
                    "started": "2019-10-01T16:09:13.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321340",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/321339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r330140048\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -686,6 +686,57 @@ std::shared_ptr<Schema> schema(std::vector<std::shared_ptr<Field>>&& fields,\n   return std::make_shared<Schema>(std::move(fields), metadata);\n }\n \n+\n+Status UnifySchemas(\n+    const std::vector<std::shared_ptr<Schema>>& schemas,\n+    std::shared_ptr<Schema>* out) {\n+  if (schemas.empty()) {\n+    return Status::Invalid(\"Must provide at least one schema to unify.\");\n+  }\n+\n+  std::unordered_map<std::string, std::shared_ptr<Field>> field_name_to_field;\n+  for (const auto& schema : schemas) {\n+    for (const std::string& field_name : schema->field_names()) {\n+      const std::vector<std::shared_ptr<Field>> fields =\n+          schema->GetAllFieldsByName(field_name);\n+      if (fields.size() != 1) {\n+        return Status::Invalid(\n+            \"UnifySchemas does not support duplicate field names in the \"\n+            \"schema: \", field_name);\n+      }\n+      const auto& current_field = fields[0];\n+      auto insertion_result =\n+          field_name_to_field.insert(std::make_pair(field_name, current_field));\n+      if (!insertion_result.second) {\n+        auto existing_field_iter = insertion_result.first;\n+        // Promote a Null column if applicable. Otherwise types should equal.\n+        if (existing_field_iter->second->type()->id() == Type::NA) {\n+          existing_field_iter->second =\n+              current_field->WithMetadata(\n+                  existing_field_iter->second->metadata());\n+        } else if (current_field->type()->id() != Type::NA &&\n+                   !existing_field_iter->second->type()->Equals(\n+                       current_field->type())) {\n+          return Status::Invalid(\n+              \"Field \", field_name,\n+              \" has incompatible types: \",\n+              existing_field_iter->second->type()->ToString(), \" vs \",\n+              current_field->type()->ToString());\n+        }\n+      }\n+    }\n+  }\n+  std::vector<std::shared_ptr<Field>> fields;\n+  fields.reserve(field_name_to_field.size());\n+  for (auto& pair : field_name_to_field) {\n+    fields.push_back(std::move(pair.second));\n+  }\n+  *out =\n+      std::make_shared<Schema>(\n \n Review comment:\n   ```suggestion\r\n         schema(\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T16:09:13.871+0000",
                    "updated": "2019-10-01T16:09:13.871+0000",
                    "started": "2019-10-01T16:09:13.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321339",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/321338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r330129236\n \n \n\n ##########\n File path: cpp/src/arrow/table.cc\n ##########\n @@ -511,6 +511,86 @@ Status ConcatenateTables(const std::vector<std::shared_ptr<Table>>& tables,\n   return Status::OK();\n }\n \n+Status ConcatenateTablesWithPromotion(\n+    MemoryPool* pool, const std::vector<std::shared_ptr<Table>>& tables,\n+    std::shared_ptr<Table>* out) {\n+  std::vector<std::shared_ptr<Schema>> schemas;\n+  schemas.reserve(tables.size());\n+  for (const auto& t : tables) schemas.push_back(t->schema());\n+  std::shared_ptr<Schema> unified_schema;\n+  RETURN_NOT_OK(UnifySchemas(schemas, &unified_schema));\n+\n+  std::vector<std::shared_ptr<Table>> promoted_tables;\n+  promoted_tables.reserve(tables.size());\n+  for (const auto& t : tables) {\n+    promoted_tables.emplace_back();\n+    RETURN_NOT_OK(PromoteTableToSchema(\n+        pool, t, unified_schema, &promoted_tables.back()));\n+  }\n+\n+  return ConcatenateTables(promoted_tables, out);\n+}\n+\n+ARROW_EXPORT\n+Status PromoteTableToSchema(MemoryPool* pool,\n+                            const std::shared_ptr<Table>& table,\n+                            const std::shared_ptr<Schema>& schema,\n+                            std::shared_ptr<Table>* out) {\n+  const std::shared_ptr<Schema> current_schema = table->schema();\n+  if (current_schema->Equals(*schema, /*check_metadata=*/false)) {\n+    *out = table->ReplaceSchemaMetadata(schema->metadata());\n+    return Status::OK();\n+  }\n+\n+  // fields_seen[i] == true iff that field is also in `schema`.\n+  std::vector<bool> fields_seen(current_schema->num_fields());\n+\n+  std::vector<std::shared_ptr<ChunkedArray>> columns;\n+  columns.reserve(schema->num_fields());\n+  auto append_column_of_nulls = [pool, &columns, &table](\n+      const std::shared_ptr<DataType>& type) {\n+    std::shared_ptr<Array> array_of_nulls;\n+    RETURN_NOT_OK(MakeArrayOfNull(\n+        pool, type, table->num_rows(), &array_of_nulls));\n+    columns.push_back(std::make_shared<ChunkedArray>(array_of_nulls));\n+    return Status::OK();\n+  };\n+\n+  for (const auto& field : schema->fields()) {\n+    const std::vector<int> field_indices =\n+        current_schema->GetAllFieldIndices(field->name());\n+    if (field_indices.empty()) {\n+      RETURN_NOT_OK(append_column_of_nulls(field->type()));\n \n Review comment:\n   Please reduce the nesting of these if statements; they're hard to read\r\n   \r\n   (not clang-formatted:)\r\n   ```suggestion\r\n         RETURN_NOT_OK(append_column_of_nulls(field->type()));\r\n         continue;\r\n       }\r\n       \r\n       if (field_indices.size() > 1) {\r\n         return Status::Invalid(\r\n             \"PromoteTableToSchema cannot handle schemas with duplicate fields: \",\r\n             field->name());\r\n       }\r\n       \r\n       fields_seen[field_indices[0]] = true;\r\n       const auto& current_field = current_schema->field(field_indices[0]);\r\n       if (current_field->type()->Equals(field->type())) {\r\n         columns.push_back(table->column(field_indices[0]));\r\n         continue;\r\n       }\r\n       \r\n       if (current_field->type()->id() == Type::NA) {\r\n         RETURN_NOT_OK(append_column_of_nulls(field->type()));\r\n         continue;\r\n       }\r\n       \r\n       return Status::Invalid(\r\n               \"Unable to promote field \", field->name(), \": incompatible types: \",\r\n               field->type()->ToString(), \" vs \",\r\n               current_field->type()->ToString());\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T16:09:13.871+0000",
                    "updated": "2019-10-01T16:09:13.871+0000",
                    "started": "2019-10-01T16:09:13.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321338",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/321341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r330138042\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -686,6 +686,57 @@ std::shared_ptr<Schema> schema(std::vector<std::shared_ptr<Field>>&& fields,\n   return std::make_shared<Schema>(std::move(fields), metadata);\n }\n \n+\n+Status UnifySchemas(\n+    const std::vector<std::shared_ptr<Schema>>& schemas,\n+    std::shared_ptr<Schema>* out) {\n+  if (schemas.empty()) {\n+    return Status::Invalid(\"Must provide at least one schema to unify.\");\n+  }\n+\n+  std::unordered_map<std::string, std::shared_ptr<Field>> field_name_to_field;\n+  for (const auto& schema : schemas) {\n+    for (const std::string& field_name : schema->field_names()) {\n+      const std::vector<std::shared_ptr<Field>> fields =\n+          schema->GetAllFieldsByName(field_name);\n+      if (fields.size() != 1) {\n+        return Status::Invalid(\n+            \"UnifySchemas does not support duplicate field names in the \"\n+            \"schema: \", field_name);\n+      }\n+      const auto& current_field = fields[0];\n+      auto insertion_result =\n+          field_name_to_field.insert(std::make_pair(field_name, current_field));\n \n Review comment:\n   ```suggestion\r\n             field_name_to_field.emplace(field_name, current_field);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T16:09:13.876+0000",
                    "updated": "2019-10-01T16:09:13.876+0000",
                    "started": "2019-10-01T16:09:13.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321341",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/321443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brills commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r330214614\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -686,6 +686,57 @@ std::shared_ptr<Schema> schema(std::vector<std::shared_ptr<Field>>&& fields,\n   return std::make_shared<Schema>(std::move(fields), metadata);\n }\n \n+\n+Status UnifySchemas(\n+    const std::vector<std::shared_ptr<Schema>>& schemas,\n+    std::shared_ptr<Schema>* out) {\n+  if (schemas.empty()) {\n \n Review comment:\n   did you mean only relying on a DCHECK?\r\n   \r\n   I thought at some point we would want to make it a public function, then each language binding needs to do the check before calling it?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-01T18:44:10.580+0000",
                    "updated": "2019-10-01T18:44:10.580+0000",
                    "started": "2019-10-01T18:44:10.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "321443",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brills commented on issue #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#issuecomment-537697211\n \n \n   I added unit tests and PTAL. Since ConcateTablesWithPromotion is now just a convenient wrapper the test cases are light. But the coverage on UnifySchemas and PromoteTableToSchema is comprehensive.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-02T21:51:37.157+0000",
                    "updated": "2019-10-02T21:51:37.157+0000",
                    "started": "2019-10-02T21:51:37.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322297",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nugend commented on issue #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#issuecomment-538066546\n \n \n   Will this still be exposed to the Python API as an option to the existing function or is it going to be similarly broken out into a new function?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:23:31.653+0000",
                    "updated": "2019-10-03T18:23:31.653+0000",
                    "started": "2019-10-03T18:23:31.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322826",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r331190822\n \n \n\n ##########\n File path: cpp/src/arrow/table_test.cc\n ##########\n @@ -406,6 +407,163 @@ TEST_F(TestTable, ConcatenateTables) {\n   ASSERT_RAISES(Invalid, ConcatenateTables({t1, t3}, &result));\n }\n \n+using TestPromoteTableToSchema = TestTable;\n+\n+TEST_F(TestPromoteTableToSchema, IdenticalSchema) {\n+  const int length = 10;\n+  MakeExample1(length);\n+  std::shared_ptr<Table> table = Table::Make(schema_, arrays_);\n+\n+  std::shared_ptr<Table> result;\n+  auto metadata =\n+      std::shared_ptr<KeyValueMetadata>(new KeyValueMetadata({\"foo\"}, {\"bar\"}));\n \n Review comment:\n   Please avoid `new`\r\n   ```suggestion\r\n         std::make_shared<KeyValueMetadata>(KeyValueMetadata({\"foo\"}, {\"bar\"}));\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:40:18.234+0000",
                    "updated": "2019-10-03T18:40:18.234+0000",
                    "started": "2019-10-03T18:40:18.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322838",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r331017869\n \n \n\n ##########\n File path: cpp/src/arrow/table.cc\n ##########\n @@ -511,6 +511,96 @@ Status ConcatenateTables(const std::vector<std::shared_ptr<Table>>& tables,\n   return Status::OK();\n }\n \n+Status ConcatenateTablesWithPromotion(\n+    MemoryPool* pool, const std::vector<std::shared_ptr<Table>>& tables,\n+    std::shared_ptr<Table>* out) {\n+  std::vector<std::shared_ptr<Schema>> schemas;\n+  schemas.reserve(tables.size());\n+  for (const auto& t : tables) schemas.push_back(t->schema());\n+  std::shared_ptr<Schema> unified_schema;\n+  RETURN_NOT_OK(UnifySchemas(schemas, &unified_schema));\n+\n+  std::vector<std::shared_ptr<Table>> promoted_tables;\n+  promoted_tables.reserve(tables.size());\n+  for (const auto& t : tables) {\n+    promoted_tables.emplace_back();\n+    RETURN_NOT_OK(PromoteTableToSchema(\n+        pool, t, unified_schema, &promoted_tables.back()));\n+  }\n+\n+  return ConcatenateTables(promoted_tables, out);\n+}\n+\n+ARROW_EXPORT\n+Status PromoteTableToSchema(MemoryPool* pool,\n+                            const std::shared_ptr<Table>& table,\n+                            const std::shared_ptr<Schema>& schema,\n+                            std::shared_ptr<Table>* out) {\n+  const std::shared_ptr<Schema> current_schema = table->schema();\n+  if (current_schema->Equals(*schema, /*check_metadata=*/false)) {\n+    *out = table->ReplaceSchemaMetadata(schema->metadata());\n+    return Status::OK();\n+  }\n+\n+  // fields_seen[i] == true iff that field is also in `schema`.\n+  std::vector<bool> fields_seen(current_schema->num_fields(), false);\n+\n+  std::vector<std::shared_ptr<ChunkedArray>> columns;\n+  columns.reserve(schema->num_fields());\n+  const int num_rows = table->num_rows();\n+  auto append_column_of_nulls = [pool, &columns, num_rows](\n+      const std::shared_ptr<DataType>& type) {\n+    std::shared_ptr<Array> array_of_nulls;\n+    RETURN_NOT_OK(MakeArrayOfNull(pool, type, num_rows, &array_of_nulls));\n+    columns.push_back(std::make_shared<ChunkedArray>(array_of_nulls));\n+    return Status::OK();\n+  };\n+\n+  for (const auto& field : schema->fields()) {\n+    const std::vector<int> field_indices =\n+        current_schema->GetAllFieldIndices(field->name());\n+    if (field_indices.empty()) {\n+      RETURN_NOT_OK(append_column_of_nulls(field->type()));\n+      continue;\n+    }\n+\n+    if (field_indices.size() > 1) {\n+      return Status::Invalid(\n+          \"PromoteTableToSchema cannot handle schemas with duplicate fields: \",\n+          field->name());\n+    }\n+\n+    fields_seen[field_indices[0]] = true;\n+    const auto& current_field = current_schema->field(field_indices[0]);\n+    if (current_field->type()->Equals(field->type())) {\n+      columns.push_back(table->column(field_indices[0]));\n+      continue;\n+    }\n+\n+    if (current_field->type()->id() == Type::NA) {\n+      RETURN_NOT_OK(append_column_of_nulls(field->type()));\n+      continue;\n+    }\n+\n+    return Status::Invalid(\"Unable to promote field \", field->name(),\n+                           \": incompatible types: \",\n+                           field->type()->ToString(), \" vs \",\n+                           current_field->type()->ToString());\n+  }\n+\n+  auto unseen_field_iter = std::find(\n+      fields_seen.begin(), fields_seen.end(), false);\n+  if (unseen_field_iter != fields_seen.end()) {\n+    return Status::Invalid(\n \n Review comment:\n   https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/27838800/job/qo60amf4wiuvuflq#L966\r\n   ```suggestion\r\n       int field_index = static_cast<int>(unseen_field_iter - fields_seen.begin());\r\n       return Status::Invalid(\r\n           \"Incompatible schemas: field \",\r\n           current_schema->field(field_index)->name(),\r\n   ```\r\n   (not clang-formatted)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:40:18.544+0000",
                    "updated": "2019-10-03T18:40:18.544+0000",
                    "started": "2019-10-03T18:40:18.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322839",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r331191301\n \n \n\n ##########\n File path: cpp/src/arrow/table_test.cc\n ##########\n @@ -406,6 +407,163 @@ TEST_F(TestTable, ConcatenateTables) {\n   ASSERT_RAISES(Invalid, ConcatenateTables({t1, t3}, &result));\n }\n \n+using TestPromoteTableToSchema = TestTable;\n+\n+TEST_F(TestPromoteTableToSchema, IdenticalSchema) {\n+  const int length = 10;\n+  MakeExample1(length);\n+  std::shared_ptr<Table> table = Table::Make(schema_, arrays_);\n+\n+  std::shared_ptr<Table> result;\n+  auto metadata =\n+      std::shared_ptr<KeyValueMetadata>(new KeyValueMetadata({\"foo\"}, {\"bar\"}));\n+  ASSERT_OK(PromoteTableToSchema(default_memory_pool(), table,\n+                                 schema_->WithMetadata(metadata), &result));\n+\n+  ASSERT_TRUE(table->ReplaceSchemaMetadata(metadata)->Equals(*result));\n+}\n+\n+TEST_F(TestPromoteTableToSchema, PromoteNullTypeField) {\n+  const int length = 10;\n+  auto metadata =\n+      std::shared_ptr<KeyValueMetadata>(new KeyValueMetadata({\"foo\"}, {\"bar\"}));\n+  auto f0 = field(\"f0\", null())->WithMetadata(metadata);\n+  auto f0_alt = field(\"f0\", int32());\n+  auto table = Table::Make(schema({f0}), {MakeRandomArray<NullArray>(length)});\n+\n+  std::shared_ptr<Table> result;\n+  ASSERT_OK(\n+      PromoteTableToSchema(default_memory_pool(), table, schema({f0_alt}), &result));\n+  std::shared_ptr<Array> array_of_nulls;\n+  ASSERT_OK(MakeArrayOfNull(int32(), length, &array_of_nulls));\n+  ASSERT_TRUE(result->Equals(*Table::Make(schema({f0_alt}), {array_of_nulls})));\n+}\n+\n+TEST_F(TestPromoteTableToSchema, AddMissingField) {\n+  const int length = 10;\n+  auto f0 = field(\"f0\", int32());\n+  auto table = Table::Make(schema({}), std::vector<std::shared_ptr<Array>>(), length);\n+  std::shared_ptr<Table> result;\n+  ASSERT_OK(\n+      PromoteTableToSchema(default_memory_pool(), table, schema({f0}), &result));\n+\n+  std::shared_ptr<Array> array_of_nulls;\n+  ASSERT_OK(MakeArrayOfNull(int32(), length, &array_of_nulls));\n+  ASSERT_TRUE(result->Equals(*Table::Make(schema({f0}), {array_of_nulls})));\n+}\n+\n+TEST_F(TestPromoteTableToSchema, IncompatibleTypes) {\n+  const int length = 10;\n+\n+  auto f0 = field(\"f0\", int32());\n+  auto f0_alt1 = field(\"f0\", null());\n+  auto f0_alt2 = field(\"f0\", uint32());\n+\n+  auto table = Table::Make(schema({f0}), {MakeRandomArray<NullArray>(length)});\n+\n+  std::shared_ptr<Table> result;\n+  Status s =\n+      PromoteTableToSchema(default_memory_pool(), table, schema({f0_alt1}), &result);\n+  ASSERT_TRUE(s.IsInvalid());\n+\n+  s = PromoteTableToSchema(default_memory_pool(), table, schema({f0_alt2}), &result);\n+  ASSERT_TRUE(s.IsInvalid());\n+}\n+\n+TEST_F(TestPromoteTableToSchema, DuplicateFieldNames) {\n+  const int length = 10;\n+\n+  auto f0 = field(\"f0\", int32());\n+  auto f0_alt = field(\"f0\", null());\n+\n+  auto table = Table::Make(schema({f0, f0_alt}), {MakeRandomArray<Int32Array>(length),\n+                                                  MakeRandomArray<NullArray>(length)});\n+\n+  std::shared_ptr<Table> result;\n+  Status s = PromoteTableToSchema(default_memory_pool(), table, schema({f0}), &result);\n \n Review comment:\n   Please use ASSERT_RAISES for errors\r\n   ```suggestion\r\n     ASSERT_RAISES(Invalid, PromoteTableToSchema(default_memory_pool(), table, schema({f0}), &result));\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:40:18.547+0000",
                    "updated": "2019-10-03T18:40:18.547+0000",
                    "started": "2019-10-03T18:40:18.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322840",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r331191925\n \n \n\n ##########\n File path: cpp/src/arrow/table_test.cc\n ##########\n @@ -406,6 +407,163 @@ TEST_F(TestTable, ConcatenateTables) {\n   ASSERT_RAISES(Invalid, ConcatenateTables({t1, t3}, &result));\n }\n \n+using TestPromoteTableToSchema = TestTable;\n+\n+TEST_F(TestPromoteTableToSchema, IdenticalSchema) {\n+  const int length = 10;\n+  MakeExample1(length);\n+  std::shared_ptr<Table> table = Table::Make(schema_, arrays_);\n+\n+  std::shared_ptr<Table> result;\n+  auto metadata =\n+      std::shared_ptr<KeyValueMetadata>(new KeyValueMetadata({\"foo\"}, {\"bar\"}));\n+  ASSERT_OK(PromoteTableToSchema(default_memory_pool(), table,\n+                                 schema_->WithMetadata(metadata), &result));\n+\n+  ASSERT_TRUE(table->ReplaceSchemaMetadata(metadata)->Equals(*result));\n+}\n+\n+TEST_F(TestPromoteTableToSchema, PromoteNullTypeField) {\n+  const int length = 10;\n+  auto metadata =\n+      std::shared_ptr<KeyValueMetadata>(new KeyValueMetadata({\"foo\"}, {\"bar\"}));\n+  auto f0 = field(\"f0\", null())->WithMetadata(metadata);\n+  auto f0_alt = field(\"f0\", int32());\n+  auto table = Table::Make(schema({f0}), {MakeRandomArray<NullArray>(length)});\n+\n+  std::shared_ptr<Table> result;\n+  ASSERT_OK(\n+      PromoteTableToSchema(default_memory_pool(), table, schema({f0_alt}), &result));\n+  std::shared_ptr<Array> array_of_nulls;\n+  ASSERT_OK(MakeArrayOfNull(int32(), length, &array_of_nulls));\n+  ASSERT_TRUE(result->Equals(*Table::Make(schema({f0_alt}), {array_of_nulls})));\n+}\n+\n+TEST_F(TestPromoteTableToSchema, AddMissingField) {\n+  const int length = 10;\n+  auto f0 = field(\"f0\", int32());\n+  auto table = Table::Make(schema({}), std::vector<std::shared_ptr<Array>>(), length);\n+  std::shared_ptr<Table> result;\n+  ASSERT_OK(\n+      PromoteTableToSchema(default_memory_pool(), table, schema({f0}), &result));\n+\n+  std::shared_ptr<Array> array_of_nulls;\n+  ASSERT_OK(MakeArrayOfNull(int32(), length, &array_of_nulls));\n+  ASSERT_TRUE(result->Equals(*Table::Make(schema({f0}), {array_of_nulls})));\n+}\n+\n+TEST_F(TestPromoteTableToSchema, IncompatibleTypes) {\n+  const int length = 10;\n+\n+  auto f0 = field(\"f0\", int32());\n+  auto f0_alt1 = field(\"f0\", null());\n+  auto f0_alt2 = field(\"f0\", uint32());\n+\n+  auto table = Table::Make(schema({f0}), {MakeRandomArray<NullArray>(length)});\n+\n+  std::shared_ptr<Table> result;\n+  Status s =\n+      PromoteTableToSchema(default_memory_pool(), table, schema({f0_alt1}), &result);\n+  ASSERT_TRUE(s.IsInvalid());\n+\n+  s = PromoteTableToSchema(default_memory_pool(), table, schema({f0_alt2}), &result);\n+  ASSERT_TRUE(s.IsInvalid());\n+}\n+\n+TEST_F(TestPromoteTableToSchema, DuplicateFieldNames) {\n+  const int length = 10;\n+\n+  auto f0 = field(\"f0\", int32());\n+  auto f0_alt = field(\"f0\", null());\n+\n+  auto table = Table::Make(schema({f0, f0_alt}), {MakeRandomArray<Int32Array>(length),\n+                                                  MakeRandomArray<NullArray>(length)});\n+\n+  std::shared_ptr<Table> result;\n+  Status s = PromoteTableToSchema(default_memory_pool(), table, schema({f0}), &result);\n+  ASSERT_TRUE(s.IsInvalid());\n+}\n+\n+TEST_F(TestPromoteTableToSchema, IncompatibleSchemas) {\n \n Review comment:\n   ```suggestion\r\n   TEST_F(TestPromoteTableToSchema, TableFieldAbsentFromSchema) {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:40:18.547+0000",
                    "updated": "2019-10-03T18:40:18.547+0000",
                    "started": "2019-10-03T18:40:18.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322841",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r331016520\n \n \n\n ##########\n File path: cpp/src/arrow/table.cc\n ##########\n @@ -511,6 +511,96 @@ Status ConcatenateTables(const std::vector<std::shared_ptr<Table>>& tables,\n   return Status::OK();\n }\n \n+Status ConcatenateTablesWithPromotion(\n+    MemoryPool* pool, const std::vector<std::shared_ptr<Table>>& tables,\n+    std::shared_ptr<Table>* out) {\n+  std::vector<std::shared_ptr<Schema>> schemas;\n+  schemas.reserve(tables.size());\n+  for (const auto& t : tables) schemas.push_back(t->schema());\n+  std::shared_ptr<Schema> unified_schema;\n+  RETURN_NOT_OK(UnifySchemas(schemas, &unified_schema));\n+\n+  std::vector<std::shared_ptr<Table>> promoted_tables;\n+  promoted_tables.reserve(tables.size());\n+  for (const auto& t : tables) {\n+    promoted_tables.emplace_back();\n+    RETURN_NOT_OK(PromoteTableToSchema(\n+        pool, t, unified_schema, &promoted_tables.back()));\n+  }\n+\n+  return ConcatenateTables(promoted_tables, out);\n+}\n+\n+ARROW_EXPORT\n+Status PromoteTableToSchema(MemoryPool* pool,\n+                            const std::shared_ptr<Table>& table,\n+                            const std::shared_ptr<Schema>& schema,\n+                            std::shared_ptr<Table>* out) {\n+  const std::shared_ptr<Schema> current_schema = table->schema();\n+  if (current_schema->Equals(*schema, /*check_metadata=*/false)) {\n+    *out = table->ReplaceSchemaMetadata(schema->metadata());\n+    return Status::OK();\n+  }\n+\n+  // fields_seen[i] == true iff that field is also in `schema`.\n+  std::vector<bool> fields_seen(current_schema->num_fields(), false);\n+\n+  std::vector<std::shared_ptr<ChunkedArray>> columns;\n+  columns.reserve(schema->num_fields());\n+  const int num_rows = table->num_rows();\n \n Review comment:\n   https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/27838800/job/qo60amf4wiuvuflq#L964\r\n   ```suggestion\r\n     const int64_t num_rows = table->num_rows();\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T18:40:18.616+0000",
                    "updated": "2019-10-03T18:40:18.616+0000",
                    "started": "2019-10-03T18:40:18.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322842",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brills commented on pull request #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#discussion_r331226572\n \n \n\n ##########\n File path: cpp/src/arrow/table_test.cc\n ##########\n @@ -406,6 +407,163 @@ TEST_F(TestTable, ConcatenateTables) {\n   ASSERT_RAISES(Invalid, ConcatenateTables({t1, t3}, &result));\n }\n \n+using TestPromoteTableToSchema = TestTable;\n+\n+TEST_F(TestPromoteTableToSchema, IdenticalSchema) {\n+  const int length = 10;\n+  MakeExample1(length);\n+  std::shared_ptr<Table> table = Table::Make(schema_, arrays_);\n+\n+  std::shared_ptr<Table> result;\n+  auto metadata =\n+      std::shared_ptr<KeyValueMetadata>(new KeyValueMetadata({\"foo\"}, {\"bar\"}));\n \n Review comment:\n   This doesn't work. std::forward<> doesn't know what type to forward. (f https://godbolt.org/z/AlKvrO\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:02:49.377+0000",
                    "updated": "2019-10-03T20:02:49.377+0000",
                    "started": "2019-10-03T20:02:49.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322898",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brills commented on issue #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#issuecomment-538140714\n \n \n   Thanks. I refactored some of the tests. Hope it improved things.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T21:42:21.371+0000",
                    "updated": "2019-10-03T21:42:21.371+0000",
                    "started": "2019-10-03T21:42:21.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322975",
                    "issueId": "13257781"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/worklog/322979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brills commented on issue #5534: ARROW-6625: [C++][Python] Allow concat_tables to null fill missing columns\nURL: https://github.com/apache/arrow/pull/5534#issuecomment-538143323\n \n \n   @nugend : I'll send out a PR adding a new function in python for discussion - how does that sound to you?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T21:51:16.923+0000",
                    "updated": "2019-10-03T21:51:16.923+0000",
                    "started": "2019-10-03T21:51:16.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322979",
                    "issueId": "13257781"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 39600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@49be58be[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35eb0a7e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73760da7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1ea3414d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a9b60e3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@14ee8968[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5736b567[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@539b3fe5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62b6d10d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f3a1fa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@608cb14e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6a62dead[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 39600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 08 17:33:31 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-08T17:33:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6625/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-09-19T21:02:25.000+0000",
        "updated": "2020-07-06T15:32:03.000+0000",
        "timeoriginalestimate": null,
        "description": "The concat_tables function currently requires schemas to be identical across all tables to be concat'ed together. However, tables occasionally are conforming on type where present, but a column will be absent.\r\n\r\nIn this case, allowing for null filling (or default filling) would be ideal.\r\n\r\nI imagine this feature would be an optional parameter on the concat_tables function. Presumably the argument could be either a boolean in the case of blanket null filling, or a mapping type for default filling. If a user wanted to default fill some columns, but null fill others, they could use a None as the value (defaultdict would make it simple to provide a blanket null fill if only a few default value columns were desired).\r\n\r\nIf a mapping wasn't present, the function should probably raise an error.\r\n\r\nThe default behavior would be the current and thus the default value of the parameter should be False or None.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 39600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Allow concat_tables to null or default fill missing columns",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/comment/16934614",
                    "id": "16934614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Seems like a good idea. We have all the machinery available to do this in a performant way",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-20T17:45:48.843+0000",
                    "updated": "2019-09-20T17:45:48.843+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/comment/16938956",
                    "id": "16938956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=brillsp",
                        "name": "brillsp",
                        "key": "brillsp",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Zhuo Peng",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Daniel / Wes, are you working on implementing this? I'm also interested in this feature and if you are not working on it I can take it.\r\n\r\nI have a small amendment to this FR though: does it make sense to allow concatenating a column of type Null (NullArray) with any other type of column? The result would be again a column of the other type, with null filled for the rows in the NullArray.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=brillsp",
                        "name": "brillsp",
                        "key": "brillsp",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
                        },
                        "displayName": "Zhuo Peng",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-09-26T20:42:54.352+0000",
                    "updated": "2019-09-26T20:42:54.352+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/comment/16939058",
                    "id": "16939058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nugend",
                        "name": "nugend",
                        "key": "nugend",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Daniel Nugent",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~zhuopeng] I am not working on it. I would have to leave the additional behavior question to [~wesm]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nugend",
                        "name": "nugend",
                        "key": "nugend",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Daniel Nugent",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-27T01:35:38.773+0000",
                    "updated": "2019-09-27T01:35:38.773+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/comment/16939433",
                    "id": "16939433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yes I think that having null fields automatically-promoted to a non-null type seems reasonable to me. I am not working on this so please be our guest",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-27T13:11:11.462+0000",
                    "updated": "2019-09-27T13:11:11.462+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257781/comment/16970434",
                    "id": "16970434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5534\n[https://github.com/apache/arrow/pull/5534]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-08T17:33:31.479+0000",
                    "updated": "2019-11-08T17:33:31.479+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z06txk:",
        "customfield_12314139": null
    }
}