{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13360514",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514",
    "key": "ARROW-11758",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12609198",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12609198",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13357673",
                    "key": "ARROW-11567",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357673",
                    "fields": {
                        "summary": "[C++][Compute] Variance kernel has precision issue",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11758/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/561368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 opened a new pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635\n\n\n   Leverage pairwise sum to reduce round-off error from O(n) to O(logn).\r\n   \r\n   **NOTE:** This patch hurts sum kernel performance significantly.\r\n   I don't worry too much as the performance is on par with Numpy.\r\n   \r\n   For floating point, up to 75% drop is observed. This is because old code\r\n   manually unrolls loops which greatly improves performance. But this is\r\n   something should be avoided. Due to precision limitation, basic math\r\n   rules doesn't apply to floating points. E.g., `(a+b)+c != a+(b+c)`. Test\r\n   shows SSE4 and AVX2 summation kernels may give different results (both\r\n   wrong), simply because they use different unroll steps. [1]\r\n   I guess this is also the reason why compiler only unroll loops for\r\n   integers, but not floating points.\r\n   \r\n   For integers, depends on compiler, up to 50% drop observed for int32/64,\r\n   and even bigger gap for int8/int16. Per my preliminary investigation,\r\n   this is because I replaced BitBlockCounter with VisitSetBitRunsVoid.\r\n   For some reason, VisitSetBitRunsVoid prohibits the compiler to generate\r\n   vectorized code, even for non-null case. As VisitSetBitRunsVoid is much\r\n   easier and natural to use, I prefer keeping it now and putting further\r\n   optimization as follow-up task.\r\n   \r\n   [1] https://issues.apache.org/jira/browse/ARROW-11758\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T10:16:58.665+0000",
                    "updated": "2021-03-05T10:16:58.665+0000",
                    "started": "2021-03-05T10:16:58.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561368",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/561369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-791322670\n\n\n   https://issues.apache.org/jira/browse/ARROW-11758\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T10:17:22.472+0000",
                    "updated": "2021-03-05T10:17:22.472+0000",
                    "started": "2021-03-05T10:17:22.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561369",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/561371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-791325415\n\n\n   List benchmark comparison of non-null case, which drops most.\r\n   See PR comment for performance analysis.\r\n   \r\n   gcc-7.5\r\n   \r\n   ```\r\n   Before\r\n   ------\r\n   SumKernelFloat/1048576/0        29.6 us         29.6 us        23768 bytes_per_second=33.0098G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       19.8 us         19.8 us        35733 bytes_per_second=49.3665G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0          242 us          242 us         2895 bytes_per_second=4.03683G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0        55.9 us         55.9 us        12446 bytes_per_second=17.4673G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        28.8 us         28.8 us        24615 bytes_per_second=33.9168G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        22.9 us         22.9 us        30336 bytes_per_second=42.6622G/s null_percent=0 size=1048.58k\r\n   \r\n   After\r\n   -----\r\n   SumKernelFloat/1048576/0         115 us          115 us         6113 bytes_per_second=8.49307G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       47.5 us         47.5 us        14814 bytes_per_second=20.5647G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0          358 us          358 us         1957 bytes_per_second=2.72924G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0         155 us          155 us         4531 bytes_per_second=6.31986G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        53.9 us         53.9 us        12996 bytes_per_second=18.1266G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        36.2 us         36.2 us        19274 bytes_per_second=26.9443G/s null_percent=0 size=1048.58k\r\n   ```\r\n   \r\n   \r\n   clang-9\r\n   \r\n   ```\r\n   Before\r\n   ------\r\n   SumKernelFloat/1048576/0        28.9 us         28.9 us        24207 bytes_per_second=33.7537G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       24.1 us         24.1 us        29240 bytes_per_second=40.5844G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0         60.9 us         60.9 us        11492 bytes_per_second=16.0346G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0        35.8 us         35.8 us        19570 bytes_per_second=27.284G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        23.9 us         23.9 us        29181 bytes_per_second=40.8518G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        55.9 us         55.9 us        12516 bytes_per_second=17.4578G/s null_percent=0 size=1048.58k\r\n   \r\n   After\r\n   -----\r\n   SumKernelFloat/1048576/0         139 us          139 us         5053 bytes_per_second=7.04828G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       46.5 us         46.5 us        14836 bytes_per_second=20.9803G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0          322 us          322 us         2173 bytes_per_second=3.03406G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0        71.0 us         71.0 us         9839 bytes_per_second=13.7602G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        40.9 us         40.9 us        17058 bytes_per_second=23.8892G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        45.1 us         45.1 us        15500 bytes_per_second=21.6414G/s null_percent=0 size=1048.58k\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T10:22:29.429+0000",
                    "updated": "2021-03-05T10:22:29.429+0000",
                    "started": "2021-03-05T10:22:29.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561371",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/561372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-791328725\n\n\n   Benchmark this patch against Numpy (build with gcc-7.5, tested on skylake)\r\n   - float64: arrow is a bit slower than numpy\r\n   - float32: arrow is a bit faster than numpy\r\n   - int32: arrow is much faster than numpy, surprise!\r\n   - int64: arrow is a bit faster than numpy\r\n   \r\n   ```\r\n   In [1]: import numpy as np\r\n   \r\n   In [2]: import pyarrow.compute as pc\r\n   \r\n   In [3]: f32 = np.arange(12345678, dtype='float32')\r\n   \r\n   In [4]: f64 = np.arange(12345678, dtype='float64')\r\n   \r\n   In [5]: i32 = np.arange(12345678, dtype='int32')\r\n   \r\n   In [6]: i64 = np.arange(12345678, dtype='int64')\r\n   \r\n   # float64: arrow is a bit slower than numpy\r\n   In [7]: %timeit np.sum(f64)\r\n   7.74 ms \u00b1 21.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [8]: %timeit pc.sum(f64)\r\n   8.24 ms \u00b1 20.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   # float32: arrow is a bit faster than numpy\r\n   In [9]: %timeit np.sum(f32, dtype='float64')\r\n   7.52 ms \u00b1 19.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [10]: %timeit pc.sum(f32)\r\n   6.52 ms \u00b1 39.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   # int32: arrow is much faster than numpy, surprise!\r\n   In [11]: %timeit np.sum(i32, dtype='int64')\r\n   10.4 ms \u00b1 35 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [12]: %timeit pc.sum(i32)\r\n   4.39 ms \u00b1 26.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   # int64: arrow is a bit faster than numpy\r\n   In [13]: %timeit np.sum(i64)\r\n   8.86 ms \u00b1 23.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [14]: %timeit pc.sum(i64)\r\n   7.54 ms \u00b1 12.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-05T10:27:47.330+0000",
                    "updated": "2021-03-05T10:27:47.330+0000",
                    "started": "2021-03-05T10:27:47.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561372",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/562784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#discussion_r589881346\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -264,6 +264,29 @@ TYPED_TEST(TestRandomNumericSumKernel, RandomSliceArraySum) {\n   }\n }\n \n+// Test round-off error\n+class TestSumKernelRoundOff : public ::testing::Test {};\n+\n+TEST_F(TestSumKernelRoundOff, Basics) {\n+  using ScalarType = typename TypeTraits<DoubleType>::ScalarType;\n+\n+  // array = np.arange(321000, dtype='float64')\n\nReview comment:\n       I didn't find `float32` test case to produce this error.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T01:54:48.091+0000",
                    "updated": "2021-03-09T01:54:48.091+0000",
                    "started": "2021-03-09T01:54:48.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562784",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/563131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-794041069\n\n\n   In principle I'm in favor of this. @jianxind do you want to take a look?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-09T15:24:07.601+0000",
                    "updated": "2021-03-09T15:24:07.601+0000",
                    "started": "2021-03-09T15:24:07.601+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563131",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/563622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-795195301\n\n\n   Turn this PR to draft.\r\n   Investigating a way to improve SetBitRunReader performance. Looks promising.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T10:13:08.991+0000",
                    "updated": "2021-03-10T10:13:08.991+0000",
                    "started": "2021-03-10T10:13:08.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563622",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-796393751\n\n\n   > In principle I'm in favor of this. @jianxind do you want to take a look?\r\n   \r\n   I don't has too much time to look the detail, sorry I switch to other internal project recently.\r\n   \r\n   Anyway I agree the PR to use pairwise sum for float/double. It could be great if the int type performance can still be kept.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T02:47:48.817+0000",
                    "updated": "2021-03-11T02:47:48.817+0000",
                    "started": "2021-03-11T02:47:48.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564263",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-796395292\n\n\n   Thanks @jianxind , I do find some way to keep (actually improve) int performance for 0%, 0.01% and 1% nulls.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T02:51:05.677+0000",
                    "updated": "2021-03-11T02:51:05.677+0000",
                    "started": "2021-03-11T02:51:05.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564264",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-791325415\n\n\n   **NOTE**: this comment is **obsolete**, see performance data in latest comment\r\n   \r\n   ~~List benchmark comparison of non-null case, which drops most.~~\r\n   ~~See PR comment for performance analysis.~~\r\n   \r\n   gcc-7.5\r\n   \r\n   ```\r\n   Before\r\n   ------\r\n   SumKernelFloat/1048576/0        29.6 us         29.6 us        23768 bytes_per_second=33.0098G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       19.8 us         19.8 us        35733 bytes_per_second=49.3665G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0          242 us          242 us         2895 bytes_per_second=4.03683G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0        55.9 us         55.9 us        12446 bytes_per_second=17.4673G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        28.8 us         28.8 us        24615 bytes_per_second=33.9168G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        22.9 us         22.9 us        30336 bytes_per_second=42.6622G/s null_percent=0 size=1048.58k\r\n   \r\n   After\r\n   -----\r\n   SumKernelFloat/1048576/0         115 us          115 us         6113 bytes_per_second=8.49307G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       47.5 us         47.5 us        14814 bytes_per_second=20.5647G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0          358 us          358 us         1957 bytes_per_second=2.72924G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0         155 us          155 us         4531 bytes_per_second=6.31986G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        53.9 us         53.9 us        12996 bytes_per_second=18.1266G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        36.2 us         36.2 us        19274 bytes_per_second=26.9443G/s null_percent=0 size=1048.58k\r\n   ```\r\n   \r\n   \r\n   clang-9\r\n   \r\n   ```\r\n   Before\r\n   ------\r\n   SumKernelFloat/1048576/0        28.9 us         28.9 us        24207 bytes_per_second=33.7537G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       24.1 us         24.1 us        29240 bytes_per_second=40.5844G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0         60.9 us         60.9 us        11492 bytes_per_second=16.0346G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0        35.8 us         35.8 us        19570 bytes_per_second=27.284G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        23.9 us         23.9 us        29181 bytes_per_second=40.8518G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        55.9 us         55.9 us        12516 bytes_per_second=17.4578G/s null_percent=0 size=1048.58k\r\n   \r\n   After\r\n   -----\r\n   SumKernelFloat/1048576/0         139 us          139 us         5053 bytes_per_second=7.04828G/s null_percent=0 size=1048.58k\r\n   SumKernelDouble/1048576/0       46.5 us         46.5 us        14836 bytes_per_second=20.9803G/s null_percent=0 size=1048.58k\r\n   SumKernelInt8/1048576/0          322 us          322 us         2173 bytes_per_second=3.03406G/s null_percent=0 size=1048.58k\r\n   SumKernelInt16/1048576/0        71.0 us         71.0 us         9839 bytes_per_second=13.7602G/s null_percent=0 size=1048.58k\r\n   SumKernelInt32/1048576/0        40.9 us         40.9 us        17058 bytes_per_second=23.8892G/s null_percent=0 size=1048.58k\r\n   SumKernelInt64/1048576/0        45.1 us         45.1 us        15500 bytes_per_second=21.6414G/s null_percent=0 size=1048.58k\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T05:28:46.650+0000",
                    "updated": "2021-03-11T05:28:46.650+0000",
                    "started": "2021-03-11T05:28:46.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564315",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-791328725\n\n\n   **NOTE**: perf data in this comment is **obsolete**\r\n   \r\n   Benchmark this patch against Numpy (build with gcc-7.5, tested on skylake)\r\n   - float64: arrow is a bit slower than numpy\r\n   - float32: arrow is a bit faster than numpy\r\n   - int32: arrow is much faster than numpy, surprise!\r\n   - int64: arrow is a bit faster than numpy\r\n   \r\n   ```\r\n   In [1]: import numpy as np\r\n   \r\n   In [2]: import pyarrow.compute as pc\r\n   \r\n   In [3]: f32 = np.arange(12345678, dtype='float32')\r\n   \r\n   In [4]: f64 = np.arange(12345678, dtype='float64')\r\n   \r\n   In [5]: i32 = np.arange(12345678, dtype='int32')\r\n   \r\n   In [6]: i64 = np.arange(12345678, dtype='int64')\r\n   \r\n   # float64: arrow is a bit slower than numpy\r\n   In [7]: %timeit np.sum(f64)\r\n   7.74 ms \u00b1 21.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [8]: %timeit pc.sum(f64)\r\n   8.24 ms \u00b1 20.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   # float32: arrow is a bit faster than numpy\r\n   In [9]: %timeit np.sum(f32, dtype='float64')\r\n   7.52 ms \u00b1 19.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [10]: %timeit pc.sum(f32)\r\n   6.52 ms \u00b1 39.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   # int32: arrow is much faster than numpy, surprise!\r\n   In [11]: %timeit np.sum(i32, dtype='int64')\r\n   10.4 ms \u00b1 35 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [12]: %timeit pc.sum(i32)\r\n   4.39 ms \u00b1 26.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   # int64: arrow is a bit faster than numpy\r\n   In [13]: %timeit np.sum(i64)\r\n   8.86 ms \u00b1 23.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   \r\n   In [14]: %timeit pc.sum(i64)\r\n   7.54 ms \u00b1 12.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T05:29:50.344+0000",
                    "updated": "2021-03-11T05:29:50.344+0000",
                    "started": "2021-03-11T05:29:50.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564316",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#discussion_r592081807\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -424,48 +383,16 @@ inline uint64_t BaseSetBitRunReader<true>::ConsumeBits(uint64_t word, int32_t nu\n   return word << num_bits;\n }\n \n-template <>\n-inline BaseSetBitRunReader<false>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                       int64_t start_offset,\n-                                                       int64_t length)\n-    : bitmap_(bitmap + start_offset / 8), length_(length), remaining_(length_) {\n-  const int8_t bit_offset = static_cast<int8_t>(start_offset % 8);\n-  if (length > 0 && bit_offset) {\n-    // Get MSBs from first byte\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(8 - bit_offset));\n-    current_word_ = LoadPartialWord(bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n-template <>\n-inline BaseSetBitRunReader<true>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                      int64_t start_offset,\n-                                                      int64_t length)\n-    : bitmap_(bitmap + (start_offset + length) / 8),\n-      length_(length),\n-      remaining_(length_) {\n-  const int8_t end_bit_offset = static_cast<int8_t>((start_offset + length) % 8);\n-  if (length > 0 && end_bit_offset) {\n-    // Get LSBs from last byte\n-    ++bitmap_;\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(end_bit_offset));\n-    current_word_ = LoadPartialWord(8 - end_bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n using SetBitRunReader = BaseSetBitRunReader</*Reverse=*/false>;\n using ReverseSetBitRunReader = BaseSetBitRunReader</*Reverse=*/true>;\n \n // Functional-style bit run visitors.\n \n+// XXX: Try to make this function small so the compiler can inline and optimize\n+// the `visit` function, which is normally a hot loop with vectorizable code.\n+// - don't inline SetBitRunReader constructor, it doesn't hurt performance\n+// - un-inline NextRun makes it easier to inline more complex `visit` functions,\n+//   it hurts 'half null' case a bit, but improves normal cases.\n\nReview comment:\n       Look compiler failed to inline VisitSetBitRuns function as it contains too complex codes from BaseSetBitRunReader. It turns `visit` into a function call, and compiler cannot optimize it (unroll loops, vectorize, etc.).\r\n   \r\n   Un-inline non performance critical code to make this function small. It does helps the compiler to inline `visit` and generates optimized code.\r\n   \r\n   It works cleanly for clang.\r\n   Gcc doesn't respect this change, it still cannot inline `visit`. I tried some tricks to make gcc happy, but the changes are fragile and not explainable, so I will ignore them.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T05:46:40.625+0000",
                    "updated": "2021-03-11T05:46:40.625+0000",
                    "started": "2021-03-11T05:46:40.625+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564323",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-796477621\n\n\n   Sum kernel performance against master branch. On skylake, clang-9.\r\n   - Big drop for floating points as expected.\r\n   - Consistent improvement for integers with less than 1% nulls.\r\n   - Big drop for integers with many nulls.\r\n   \r\n   ```\r\n   ----------------------------------------------------------------------------------\r\n   Non-regressions: (18)\r\n   ----------------------------------------------------------------------------------\r\n                       benchmark         baseline        contender  change % counters\r\n   \r\n   // big improve for 100% nulls, not very useful\r\n        SumKernelFloat/1048576/1  114.281 GiB/sec  853.661 GiB/sec   646.987       {}\r\n       SumKernelDouble/1048576/1  203.019 GiB/sec  866.872 GiB/sec   326.991       {}\r\n        SumKernelInt16/1048576/1   32.426 GiB/sec  122.892 GiB/sec   278.996       {}\r\n        SumKernelInt32/1048576/1   56.421 GiB/sec  212.625 GiB/sec   276.853       {}\r\n         SumKernelInt8/1048576/1   27.944 GiB/sec   66.970 GiB/sec   139.653       {}\r\n        SumKernelInt64/1048576/1  148.757 GiB/sec  351.812 GiB/sec   136.500       {}\r\n   \r\n   // big improve for int64 with 0%, 0.01%, 1% nulls, nice\r\n        SumKernelInt64/1048576/0   17.103 GiB/sec   41.992 GiB/sec   145.531       {}\r\n    SumKernelInt64/1048576/10000   15.393 GiB/sec   34.708 GiB/sec   125.477       {}\r\n      SumKernelInt64/1048576/100   11.021 GiB/sec   17.252 GiB/sec    56.536       {}\r\n   \r\n   // moderate improve for int8/16/32 with 0%, 0.01%, 1% nulls, nice\r\n     SumKernelInt8/1048576/10000    9.069 GiB/sec   12.978 GiB/sec    43.096       {}\r\n    SumKernelInt32/1048576/10000   26.149 GiB/sec   33.499 GiB/sec    28.105       {}\r\n    SumKernelInt16/1048576/10000   17.783 GiB/sec   22.388 GiB/sec    25.897       {}\r\n      SumKernelInt16/1048576/100    3.447 GiB/sec    4.173 GiB/sec    21.074       {}\r\n      SumKernelInt32/1048576/100    7.343 GiB/sec    8.423 GiB/sec    14.719       {}\r\n         SumKernelInt8/1048576/0   16.225 GiB/sec   18.284 GiB/sec    12.694       {}\r\n       SumKernelInt8/1048576/100    1.827 GiB/sec    2.036 GiB/sec    11.447       {}\r\n        SumKernelInt16/1048576/0   27.901 GiB/sec   30.025 GiB/sec     7.612       {}\r\n        SumKernelInt32/1048576/0   40.628 GiB/sec   43.467 GiB/sec     6.987       {}\r\n   \r\n   ----------------------------------------------------------------------------------\r\n   Regressions: (18)\r\n   ----------------------------------------------------------------------------------\r\n                        benchmark        baseline        contender  change % counters\r\n   \r\n   // big drop for floating points, expected\r\n       SumKernelFloat/1048576/100   6.074 GiB/sec    4.074 GiB/sec   -32.925       {}\r\n      SumKernelDouble/1048576/100  16.927 GiB/sec   10.762 GiB/sec   -36.421       {}\r\n    SumKernelDouble/1048576/10000  36.039 GiB/sec   20.847 GiB/sec   -42.154       {}\r\n        SumKernelDouble/1048576/0  48.230 GiB/sec   20.918 GiB/sec   -56.629       {}\r\n        SumKernelFloat/1048576/10   3.689 GiB/sec    1.199 GiB/sec   -67.497       {}\r\n     SumKernelFloat/1048576/10000  24.296 GiB/sec    6.896 GiB/sec   -71.618       {}\r\n       SumKernelDouble/1048576/10   9.678 GiB/sec    2.569 GiB/sec   -73.459       {}\r\n         SumKernelFloat/1048576/0  35.913 GiB/sec    7.111 GiB/sec   -80.198       {}\r\n   \r\n   // moderate drop for int64 with 10%, 50% nulls\r\n        SumKernelInt64/1048576/10   3.643 GiB/sec    3.375 GiB/sec    -7.339       {}\r\n         SumKernelInt64/1048576/2   2.418 GiB/sec    2.129 GiB/sec   -11.952       {}\r\n   \r\n   // huge drop for int8/16/32 with 10%, 50% nulls, may be improved\r\n        SumKernelInt16/1048576/10   1.677 GiB/sec  924.529 MiB/sec   -46.153       {}\r\n        SumKernelInt32/1048576/10   3.143 GiB/sec    1.691 GiB/sec   -46.203       {}\r\n         SumKernelInt8/1048576/10   1.192 GiB/sec  441.498 MiB/sec   -63.831       {}\r\n         SumKernelInt32/1048576/2   4.269 GiB/sec    1.126 GiB/sec   -73.619       {}\r\n         SumKernelInt16/1048576/2   3.281 GiB/sec  621.903 MiB/sec   -81.490       {}\r\n          SumKernelInt8/1048576/2   2.412 GiB/sec  303.954 MiB/sec   -87.691       {}\r\n         SumKernelFloat/1048576/2   4.729 GiB/sec  729.679 MiB/sec   -84.932       {}\r\n        SumKernelDouble/1048576/2  11.793 GiB/sec    1.373 GiB/sec   -88.362       {}\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T05:53:56.137+0000",
                    "updated": "2021-03-11T05:53:56.137+0000",
                    "started": "2021-03-11T05:53:56.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564327",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-796479794\n\n\n   Benchmark other kernels using SetBitRunsReaderVoid.\r\n   - Small improvement for few null cases\r\n   - Small drop for many null cases\r\n   \r\n   ```\r\n   ------------------------------------------------------------------------------------------------------------                                                                              [115/1133]\r\n   Non-regressions: (132)                                                                                      \r\n   ------------------------------------------------------------------------------------------------------------\r\n                                                benchmark          baseline        contender  change % counters\r\n          QuantileKernelDecilesWide<Int32Type>/1048576/10   168.162 MiB/sec  193.394 MiB/sec    15.005       {}\r\n         QuantileKernelDecilesWide<Int32Type>/1048576/100   176.470 MiB/sec  202.064 MiB/sec    14.503       {}\r\n            QuantileKernelMedianWide<Int32Type>/1048576/0   474.469 MiB/sec  543.099 MiB/sec    14.465       {}\r\n          QuantileKernelMedianWide<Int32Type>/1048576/100   467.170 MiB/sec  534.691 MiB/sec    14.453       {}\r\n       QuantileKernelDecilesWide<Int32Type>/1048576/10000   179.297 MiB/sec  204.094 MiB/sec    13.830       {}\r\n        QuantileKernelMedianWide<Int32Type>/1048576/10000   568.970 MiB/sec  647.575 MiB/sec    13.815       {}\r\n           QuantileKernelDecilesWide<Int32Type>/1048576/0   169.013 MiB/sec  192.111 MiB/sec    13.666       {}\r\n       QuantileKernelMedianWide<DoubleType>/1048576/10000   812.060 MiB/sec  900.162 MiB/sec    10.849       {}\r\n           QuantileKernelMedianWide<DoubleType>/1048576/0   747.422 MiB/sec  821.903 MiB/sec     9.965       {}\r\n         QuantileKernelMedianWide<DoubleType>/1048576/100   745.644 MiB/sec  816.051 MiB/sec     9.442       {}\r\n          QuantileKernelMedianWide<DoubleType>/1048576/10  1015.524 MiB/sec    1.081 GiB/sec     9.036       {}\r\n      QuantileKernelDecilesWide<DoubleType>/1048576/10000   336.427 MiB/sec  366.779 MiB/sec     9.022       {}\r\n           QuantileKernelMedianWide<Int32Type>/1048576/10   341.773 MiB/sec  372.520 MiB/sec     8.996       {}\r\n        QuantileKernelDecilesWide<DoubleType>/1048576/100   308.750 MiB/sec  336.192 MiB/sec     8.888       {}\r\n           QuantileKernelDecilesWide<Int32Type>/1048576/2   226.391 MiB/sec  246.482 MiB/sec     8.874       {}\r\n          QuantileKernelDecilesWide<DoubleType>/1048576/0   315.931 MiB/sec  343.535 MiB/sec     8.737       {}\r\n         QuantileKernelDecilesWide<DoubleType>/1048576/10   360.592 MiB/sec  391.157 MiB/sec     8.477       {}\r\n        QuantileKernelCentilesWide<Int32Type>/1048576/100    69.243 MiB/sec   74.679 MiB/sec     7.850       {}\r\n      QuantileKernelCentilesWide<Int32Type>/1048576/10000    67.820 MiB/sec   73.128 MiB/sec     7.827       {}\r\n          QuantileKernelCentilesWide<Int32Type>/1048576/0    67.183 MiB/sec   72.220 MiB/sec     7.497       {}\r\n         QuantileKernelCentilesWide<Int32Type>/1048576/10    71.236 MiB/sec   76.457 MiB/sec     7.330       {}\r\n          QuantileKernelDecilesWide<DoubleType>/1048576/2   519.994 MiB/sec  556.103 MiB/sec     6.944       {}\r\n                            VarianceKernelInt32/1048576/2     1.224 GiB/sec    1.305 GiB/sec     6.586       {}\r\n           QuantileKernelMedianWide<DoubleType>/1048576/2     1.046 GiB/sec    1.107 GiB/sec     5.874       {}\r\n         QuantileKernelCentilesWide<DoubleType>/1048576/0   123.657 MiB/sec  130.858 MiB/sec     5.823       {}\r\n          QuantileKernelCentilesWide<Int32Type>/1048576/2   111.520 MiB/sec  117.969 MiB/sec     5.783       {}\r\n     QuantileKernelCentilesWide<DoubleType>/1048576/10000   129.610 MiB/sec  136.823 MiB/sec     5.565       {}\r\n       QuantileKernelCentilesWide<DoubleType>/1048576/100   126.207 MiB/sec  132.933 MiB/sec     5.330       {}\r\n        QuantileKernelCentilesWide<DoubleType>/1048576/10   136.726 MiB/sec  143.882 MiB/sec     5.234       {}\r\n         QuantileKernelCentilesWide<DoubleType>/1048576/2   228.706 MiB/sec  239.838 MiB/sec     4.867       {}\r\n                           VarianceKernelInt32/1048576/10     2.105 GiB/sec    2.200 GiB/sec     4.516       {}\r\n                     TDigestKernelDoubleDeciles/1048576/2   267.900 MiB/sec  279.885 MiB/sec     4.473       {}\r\n                      TDigestKernelDoubleMedian/1048576/2   268.032 MiB/sec  279.846 MiB/sec     4.407       {}\r\n                    TDigestKernelDoubleCentiles/1048576/2   267.480 MiB/sec  279.183 MiB/sec     4.375       {}\r\n                                ModeKernelInt64/1048576/2     1.112 GiB/sec    1.159 GiB/sec     4.259       {}\r\n            QuantileKernelMedianWide<Int64Type>/1048576/2     1.140 GiB/sec    1.187 GiB/sec     4.145       {}\r\n        QuantileKernelMedianWide<Int64Type>/1048576/10000     1.542 GiB/sec    1.603 GiB/sec     3.971       {}\r\n                   TDigestKernelDoubleCentiles/1048576/10   163.491 MiB/sec  169.411 MiB/sec     3.621       {}\r\n                    TDigestKernelDoubleDeciles/1048576/10   163.620 MiB/sec  169.498 MiB/sec     3.592       {}\r\n                     TDigestKernelDoubleMedian/1048576/10   163.657 MiB/sec  169.531 MiB/sec     3.589       {}\r\n                      TDigestKernelDoubleMedian/1048576/0   151.133 MiB/sec  156.251 MiB/sec     3.386       {}\r\n                    TDigestKernelDoubleCentiles/1048576/0   150.929 MiB/sec  156.004 MiB/sec     3.363       {}\r\n                     TDigestKernelDoubleDeciles/1048576/0   151.083 MiB/sec  156.154 MiB/sec     3.356       {}\r\n            QuantileKernelMedianWide<Int64Type>/1048576/0     1.356 GiB/sec    1.401 GiB/sec     3.269       {}\r\n                TDigestKernelDoubleCentiles/1048576/10000   150.654 MiB/sec  155.342 MiB/sec     3.112       {}\r\n                   TDigestKernelDoubleDeciles/1048576/100   152.293 MiB/sec  156.884 MiB/sec     3.014       {}\r\n                  TDigestKernelDoubleMedian/1048576/10000   150.804 MiB/sec  155.337 MiB/sec     3.006       {}\r\n          QuantileKernelMedianWide<Int64Type>/1048576/100     1.139 GiB/sec    1.174 GiB/sec     3.000       {}\r\n                 TDigestKernelDoubleDeciles/1048576/10000   150.897 MiB/sec  155.403 MiB/sec     2.986       {}\r\n                    TDigestKernelDoubleMedian/1048576/100   152.350 MiB/sec  156.831 MiB/sec     2.942       {}\r\n                  TDigestKernelDoubleCentiles/1048576/100   152.199 MiB/sec  156.672 MiB/sec     2.939       {}\r\n                              ModeKernelBoolean/1048576/0    22.299 GiB/sec   22.937 GiB/sec     2.862       {}                                                                               [60/1133]\r\n            QuantileKernelMedianWide<Int32Type>/1048576/2   404.646 MiB/sec  414.969 MiB/sec     2.551       {}\r\n                               ModeKernelInt64/1048576/10     1.484 GiB/sec    1.520 GiB/sec     2.415       {}\r\n                          VarianceKernelInt32/1048576/100     5.337 GiB/sec    5.438 GiB/sec     1.898       {}\r\n                               ModeKernelInt32/1048576/10   826.494 MiB/sec  841.916 MiB/sec     1.866       {}\r\n      QuantileKernelMedianNarrow<Int64Type>/1048576/10000     2.557 GiB/sec    2.604 GiB/sec     1.860       {}\r\n                           VarianceKernelFloat/1048576/10   591.418 MiB/sec  600.338 MiB/sec     1.508       {}\r\n          QuantileKernelMedianNarrow<Int64Type>/1048576/0     2.602 GiB/sec    2.636 GiB/sec     1.282       {}\r\n                          VarianceKernelFloat/1048576/100     1.768 GiB/sec    1.788 GiB/sec     1.115       {}\r\n                              ModeKernelInt64/1048576/100     2.518 GiB/sec    2.544 GiB/sec     1.032       {}\r\n                            ModeKernelInt64/1048576/10000     2.866 GiB/sec    2.896 GiB/sec     1.029       {}\r\n                           VarianceKernelDouble/1048576/1     1.114 TiB/sec    1.124 TiB/sec     0.898       {}\r\n                                ModeKernelInt32/1048576/0     1.643 GiB/sec    1.655 GiB/sec     0.699       {}\r\n                        VarianceKernelInt64/1048576/10000     7.058 GiB/sec    7.103 GiB/sec     0.636       {}\r\n                            VarianceKernelInt64/1048576/0     7.320 GiB/sec    7.366 GiB/sec     0.626       {}\r\n                                ModeKernelInt64/1048576/0     2.919 GiB/sec    2.936 GiB/sec     0.602       {}\r\n                           VarianceKernelDouble/1048576/2   708.358 MiB/sec  711.956 MiB/sec     0.508       {}\r\n                              ModeKernelInt32/1048576/100     1.395 GiB/sec    1.402 GiB/sec     0.493       {}\r\n        QuantileKernelMedianNarrow<Int64Type>/1048576/100     2.290 GiB/sec    2.301 GiB/sec     0.451       {}\r\n                        VarianceKernelInt32/1048576/10000     7.390 GiB/sec    7.410 GiB/sec     0.267       {}\r\n                            ModeKernelInt32/1048576/10000     1.623 GiB/sec    1.627 GiB/sec     0.243       {}\r\n                                ModeKernelInt32/1048576/1   656.404 GiB/sec  657.970 GiB/sec     0.239       {}\r\n                                ModeKernelInt16/1048576/0   877.559 MiB/sec  879.467 MiB/sec     0.217       {}\r\n                            VarianceKernelInt32/1048576/1     1.129 TiB/sec    1.131 TiB/sec     0.199       {}\r\n                            ModeKernelInt16/1048576/10000   863.507 MiB/sec  863.839 MiB/sec     0.038       {}\r\n                            VarianceKernelFloat/1048576/2   359.374 MiB/sec  359.496 MiB/sec     0.034       {}\r\n                       VarianceKernelDouble/1048576/10000     8.032 GiB/sec    8.034 GiB/sec     0.028       {}\r\n           QuantileKernelDecilesWide<Int32Type>/1048576/1     1.217 TiB/sec    1.217 TiB/sec     0.015       {}\r\n                             ModeKernelInt8/1048576/10000   501.545 MiB/sec  501.451 MiB/sec    -0.019       {}\r\n         QuantileKernelMedianNarrow<Int64Type>/1048576/10     1.418 GiB/sec    1.415 GiB/sec    -0.193       {}\r\n           QuantileKernelMedianWide<DoubleType>/1048576/1     1.237 TiB/sec    1.234 TiB/sec    -0.253       {}\r\n                        VarianceKernelFloat/1048576/10000     2.936 GiB/sec    2.928 GiB/sec    -0.265       {}\r\n                               ModeKernelInt16/1048576/10   424.764 MiB/sec  423.594 MiB/sec    -0.276       {}\r\n                                ModeKernelInt16/1048576/1   630.408 GiB/sec  628.569 GiB/sec    -0.292       {}\r\n                              ModeKernelBoolean/1048576/1   665.037 GiB/sec  662.896 GiB/sec    -0.322       {}\r\n                            VarianceKernelFloat/1048576/1     1.129 TiB/sec    1.125 TiB/sec    -0.386       {}\r\n                     TDigestKernelDoubleDeciles/1048576/1   797.682 GiB/sec  794.483 GiB/sec    -0.401       {}\r\n           QuantileKernelMedianWide<Int64Type>/1048576/10   787.428 MiB/sec  783.777 MiB/sec    -0.464       {}\r\n                                ModeKernelInt32/1048576/2   589.327 MiB/sec  586.400 MiB/sec    -0.497       {}\r\n          QuantileKernelMedianNarrow<Int64Type>/1048576/2     1.211 GiB/sec    1.205 GiB/sec    -0.499       {}\r\n                               ModeKernelInt8/1048576/100   471.601 MiB/sec  469.189 MiB/sec    -0.511       {}\r\n                              ModeKernelInt16/1048576/100   734.554 MiB/sec  730.408 MiB/sec    -0.564       {}\r\n       QuantileKernelDecilesNarrow<Int32Type>/1048576/100     1.292 GiB/sec    1.285 GiB/sec    -0.598       {}\r\n                                 ModeKernelInt8/1048576/0   502.635 MiB/sec  499.599 MiB/sec    -0.604       {}\r\n      QuantileKernelMedianNarrow<Int32Type>/1048576/10000     1.516 GiB/sec    1.507 GiB/sec    -0.617       {}\r\n                            VarianceKernelInt32/1048576/0     7.766 GiB/sec    7.718 GiB/sec    -0.618       {}\r\n     QuantileKernelDecilesNarrow<Int32Type>/1048576/10000     1.483 GiB/sec    1.474 GiB/sec    -0.628       {}\r\n                                ModeKernelInt16/1048576/2   296.454 MiB/sec  294.108 MiB/sec    -0.792       {}\r\n         QuantileKernelDecilesNarrow<Int32Type>/1048576/0     1.513 GiB/sec    1.501 GiB/sec    -0.793       {}\r\n                           VarianceKernelDouble/1048576/0     8.238 GiB/sec    8.171 GiB/sec    -0.806       {}\r\n                           VarianceKernelInt64/1048576/10     1.521 GiB/sec    1.507 GiB/sec    -0.873       {}\r\n          QuantileKernelMedianNarrow<Int32Type>/1048576/0     1.543 GiB/sec    1.530 GiB/sec    -0.876       {}\r\n        QuantileKernelMedianNarrow<Int32Type>/1048576/100     1.326 GiB/sec    1.312 GiB/sec    -1.017       {}\r\n                      TDigestKernelDoubleMedian/1048576/1   798.035 GiB/sec  789.895 GiB/sec    -1.020       {}\r\n                         VarianceKernelDouble/1048576/100     4.463 GiB/sec    4.415 GiB/sec    -1.085       {}\r\n                          VarianceKernelDouble/1048576/10     1.258 GiB/sec    1.243 GiB/sec    -1.186       {}\r\n    QuantileKernelCentilesNarrow<Int32Type>/1048576/10000     1.486 GiB/sec    1.469 GiB/sec    -1.191       {}\r\n                                ModeKernelInt64/1048576/1   641.846 GiB/sec  634.196 GiB/sec    -1.192       {}\r\n        QuantileKernelCentilesNarrow<Int32Type>/1048576/0     1.513 GiB/sec    1.493 GiB/sec    -1.331       {}\r\n                                 ModeKernelInt8/1048576/1   522.459 GiB/sec  515.189 GiB/sec    -1.392       {}\r\n                            VarianceKernelInt64/1048576/2   928.788 MiB/sec  915.284 MiB/sec    -1.454       {}\r\n          QuantileKernelCentilesWide<Int32Type>/1048576/1     1.096 TiB/sec    1.079 TiB/sec    -1.519       {}\r\n         QuantileKernelCentilesWide<DoubleType>/1048576/1     1.109 TiB/sec    1.090 TiB/sec    -1.723       {}\r\n          QuantileKernelMedianNarrow<Int32Type>/1048576/1     1.232 TiB/sec    1.210 TiB/sec    -1.808       {}\r\n                                ModeKernelInt8/1048576/10   373.907 MiB/sec  367.061 MiB/sec    -1.831       {}\r\n        QuantileKernelCentilesNarrow<Int32Type>/1048576/1     1.097 TiB/sec    1.076 TiB/sec    -1.909       {}\r\n        QuantileKernelDecilesNarrow<Int32Type>/1048576/10   796.953 MiB/sec  780.949 MiB/sec    -2.008       {}\r\n                          VarianceKernelInt64/1048576/100     4.529 GiB/sec    4.435 GiB/sec    -2.059       {}\r\n      QuantileKernelCentilesNarrow<Int32Type>/1048576/100     1.310 GiB/sec    1.282 GiB/sec    -2.118       {}\r\n         QuantileKernelDecilesNarrow<Int32Type>/1048576/1     1.216 TiB/sec    1.189 TiB/sec    -2.213       {}\r\n                            VarianceKernelFloat/1048576/0     2.959 GiB/sec    2.886 GiB/sec    -2.473       {}\r\n          QuantileKernelDecilesWide<DoubleType>/1048576/1     1.232 TiB/sec    1.196 TiB/sec    -2.874       {}\r\n            QuantileKernelMedianWide<Int64Type>/1048576/1     1.242 TiB/sec    1.203 TiB/sec    -3.105       {}\r\n                            ModeKernelBoolean/1048576/100     1.595 GiB/sec    1.535 GiB/sec    -3.779       {}\r\n         QuantileKernelMedianNarrow<Int32Type>/1048576/10   823.687 MiB/sec  790.291 MiB/sec    -4.054       {}\r\n       QuantileKernelCentilesNarrow<Int32Type>/1048576/10   814.496 MiB/sec  780.100 MiB/sec    -4.223       {}\r\n                            VarianceKernelInt64/1048576/1     1.141 TiB/sec    1.092 TiB/sec    -4.253       {}\r\n                          ModeKernelBoolean/1048576/10000     1.595 GiB/sec    1.522 GiB/sec    -4.593       {}\r\n          QuantileKernelMedianNarrow<Int64Type>/1048576/1     1.262 TiB/sec    1.202 TiB/sec    -4.717       {}\r\n                              ModeKernelBoolean/1048576/2     1.596 GiB/sec    1.519 GiB/sec    -4.803       {}\r\n                             ModeKernelBoolean/1048576/10     1.595 GiB/sec    1.518 GiB/sec    -4.829       {}\r\n   \r\n   -------------------------------------------------------------------------------------------------------\r\n   Regressions: (6)\r\n   -------------------------------------------------------------------------------------------------------\r\n                                            benchmark         baseline        contender  change % counters\r\n        QuantileKernelMedianWide<Int32Type>/1048576/1    1.230 TiB/sec    1.166 TiB/sec    -5.229       {}\r\n                             ModeKernelInt8/1048576/2  302.982 MiB/sec  285.467 MiB/sec    -5.781       {}\r\n                TDigestKernelDoubleCentiles/1048576/1  798.656 GiB/sec  752.083 GiB/sec    -5.831       {}\r\n      QuantileKernelMedianNarrow<Int32Type>/1048576/2  588.340 MiB/sec  539.375 MiB/sec    -8.323       {}\r\n    QuantileKernelCentilesNarrow<Int32Type>/1048576/2  583.672 MiB/sec  534.242 MiB/sec    -8.469       {}\r\n     QuantileKernelDecilesNarrow<Int32Type>/1048576/2  584.674 MiB/sec  535.113 MiB/sec    -8.477       {}\r\n   \r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T05:58:36.525+0000",
                    "updated": "2021-03-11T05:58:36.525+0000",
                    "started": "2021-03-11T05:58:36.525+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564328",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#discussion_r592081807\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -424,48 +383,16 @@ inline uint64_t BaseSetBitRunReader<true>::ConsumeBits(uint64_t word, int32_t nu\n   return word << num_bits;\n }\n \n-template <>\n-inline BaseSetBitRunReader<false>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                       int64_t start_offset,\n-                                                       int64_t length)\n-    : bitmap_(bitmap + start_offset / 8), length_(length), remaining_(length_) {\n-  const int8_t bit_offset = static_cast<int8_t>(start_offset % 8);\n-  if (length > 0 && bit_offset) {\n-    // Get MSBs from first byte\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(8 - bit_offset));\n-    current_word_ = LoadPartialWord(bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n-template <>\n-inline BaseSetBitRunReader<true>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                      int64_t start_offset,\n-                                                      int64_t length)\n-    : bitmap_(bitmap + (start_offset + length) / 8),\n-      length_(length),\n-      remaining_(length_) {\n-  const int8_t end_bit_offset = static_cast<int8_t>((start_offset + length) % 8);\n-  if (length > 0 && end_bit_offset) {\n-    // Get LSBs from last byte\n-    ++bitmap_;\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(end_bit_offset));\n-    current_word_ = LoadPartialWord(8 - end_bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n using SetBitRunReader = BaseSetBitRunReader</*Reverse=*/false>;\n using ReverseSetBitRunReader = BaseSetBitRunReader</*Reverse=*/true>;\n \n // Functional-style bit run visitors.\n \n+// XXX: Try to make this function small so the compiler can inline and optimize\n+// the `visit` function, which is normally a hot loop with vectorizable code.\n+// - don't inline SetBitRunReader constructor, it doesn't hurt performance\n+// - un-inline NextRun makes it easier to inline more complex `visit` functions,\n+//   it hurts 'half null' case a bit, but improves normal cases.\n\nReview comment:\n       Look compiler failed to inline VisitSetBitRuns function as it contains too complex codes from BaseSetBitRunReader. It turns `visit` into a function call, and compiler cannot optimize it (unroll loops, vectorize, etc.).\r\n   \r\n   Un-inline non performance critical code to make this function small. It does helps the compiler to inline `visit` and generates optimized code.\r\n   \r\n   It works cleanly for clang.\r\n   Gcc doesn't respect this change, it still cannot inline `visit`. I tried some tricks to make gcc happy, but the changes are fragile and not explainable, so I will ignore them.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T06:49:20.862+0000",
                    "updated": "2021-03-11T06:49:20.862+0000",
                    "started": "2021-03-11T06:49:20.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564347",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#discussion_r592108324\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -424,48 +452,15 @@ inline uint64_t BaseSetBitRunReader<true>::ConsumeBits(uint64_t word, int32_t nu\n   return word << num_bits;\n }\n \n-template <>\n-inline BaseSetBitRunReader<false>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                       int64_t start_offset,\n-                                                       int64_t length)\n-    : bitmap_(bitmap + start_offset / 8), length_(length), remaining_(length_) {\n-  const int8_t bit_offset = static_cast<int8_t>(start_offset % 8);\n-  if (length > 0 && bit_offset) {\n-    // Get MSBs from first byte\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(8 - bit_offset));\n-    current_word_ = LoadPartialWord(bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n-template <>\n-inline BaseSetBitRunReader<true>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                      int64_t start_offset,\n-                                                      int64_t length)\n-    : bitmap_(bitmap + (start_offset + length) / 8),\n-      length_(length),\n-      remaining_(length_) {\n-  const int8_t end_bit_offset = static_cast<int8_t>((start_offset + length) % 8);\n-  if (length > 0 && end_bit_offset) {\n-    // Get LSBs from last byte\n-    ++bitmap_;\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(end_bit_offset));\n-    current_word_ = LoadPartialWord(8 - end_bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n using SetBitRunReader = BaseSetBitRunReader</*Reverse=*/false>;\n using ReverseSetBitRunReader = BaseSetBitRunReader</*Reverse=*/true>;\n \n // Functional-style bit run visitors.\n \n+// XXX: Try to make this function small so the compiler can inline and optimize\n+// the `visit` function, which is normally a hot loop with vectorizable code.\n+// - don't inline SetBitRunReader constructor, it doesn't hurt performance\n+// - un-inline NextRun hurts 'many null' cases a bit, but improves normal cases\n\nReview comment:\n       Compiler failed to inline VisitSetBitRuns function as it contains too complex codes from BaseSetBitRunReader. It turns `visit` into a function call, and compiler cannot optimize it (unroll loops, vectorize, etc.).\r\n   \r\n   Un-inline non performance critical code (BaseSetBitRunReader constructor and NextRun()) makes this function small. It does helps the compiler to inline visit and generates optimized code.\r\n   \r\n   It works cleanly for clang.\r\n   Gcc doesn't respect this change, it still cannot inline visit. I tried some tricks to make gcc happy, but the changes are fragile and not explainable, so I will ignore them.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T06:58:53.330+0000",
                    "updated": "2021-03-11T06:58:53.330+0000",
                    "started": "2021-03-11T06:58:53.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564351",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#discussion_r592108324\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -424,48 +452,15 @@ inline uint64_t BaseSetBitRunReader<true>::ConsumeBits(uint64_t word, int32_t nu\n   return word << num_bits;\n }\n \n-template <>\n-inline BaseSetBitRunReader<false>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                       int64_t start_offset,\n-                                                       int64_t length)\n-    : bitmap_(bitmap + start_offset / 8), length_(length), remaining_(length_) {\n-  const int8_t bit_offset = static_cast<int8_t>(start_offset % 8);\n-  if (length > 0 && bit_offset) {\n-    // Get MSBs from first byte\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(8 - bit_offset));\n-    current_word_ = LoadPartialWord(bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n-template <>\n-inline BaseSetBitRunReader<true>::BaseSetBitRunReader(const uint8_t* bitmap,\n-                                                      int64_t start_offset,\n-                                                      int64_t length)\n-    : bitmap_(bitmap + (start_offset + length) / 8),\n-      length_(length),\n-      remaining_(length_) {\n-  const int8_t end_bit_offset = static_cast<int8_t>((start_offset + length) % 8);\n-  if (length > 0 && end_bit_offset) {\n-    // Get LSBs from last byte\n-    ++bitmap_;\n-    current_num_bits_ =\n-        std::min(static_cast<int32_t>(length), static_cast<int32_t>(end_bit_offset));\n-    current_word_ = LoadPartialWord(8 - end_bit_offset, current_num_bits_);\n-  } else {\n-    current_num_bits_ = 0;\n-    current_word_ = 0;\n-  }\n-}\n-\n using SetBitRunReader = BaseSetBitRunReader</*Reverse=*/false>;\n using ReverseSetBitRunReader = BaseSetBitRunReader</*Reverse=*/true>;\n \n // Functional-style bit run visitors.\n \n+// XXX: Try to make this function small so the compiler can inline and optimize\n+// the `visit` function, which is normally a hot loop with vectorizable code.\n+// - don't inline SetBitRunReader constructor, it doesn't hurt performance\n+// - un-inline NextRun hurts 'many null' cases a bit, but improves normal cases\n\nReview comment:\n       Compiler failed to inline VisitSetBitRuns function as it contains too complex codes from BaseSetBitRunReader. It turns `visit` into a function call, and compiler cannot optimize it (unroll loops, vectorize, etc.).\r\n   \r\n   Un-inline non performance critical code (BaseSetBitRunReader constructor and NextRun()) makes this function small. It does helps the compiler to inline `visit` and generates optimized code.\r\n   \r\n   It works cleanly for clang.\r\n   Gcc doesn't respect this change, it still cannot inline `visit`. I tried some tricks to make gcc happy, but the changes are fragile and not explainable, so I will ignore them.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T07:02:10.643+0000",
                    "updated": "2021-03-11T07:02:10.643+0000",
                    "started": "2021-03-11T07:02:10.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564355",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-796546789\n\n\n   Travis CI passed: https://travis-ci.org/github/cyb70289/arrow/builds/762429288\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T08:01:56.193+0000",
                    "updated": "2021-03-11T08:01:56.193+0000",
                    "started": "2021-03-11T08:01:56.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564398",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-796689335\n\n\n   Thanks for the investigation @cyb70289 !\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T12:06:25.494+0000",
                    "updated": "2021-03-11T12:06:25.494+0000",
                    "started": "2021-03-11T12:06:25.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564552",
                    "issueId": "13360514"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/worklog/564578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9635:\nURL: https://github.com/apache/arrow/pull/9635#issuecomment-796715705\n\n\n   I'll let you merge this @cyb70289 .\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-11T12:55:32.365+0000",
                    "updated": "2021-03-11T12:55:32.365+0000",
                    "started": "2021-03-11T12:55:32.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "564578",
                    "issueId": "13360514"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@71fd004d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10213396[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bc2c810[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@12e6f77d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73f4cd38[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@438b5962[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e149b4b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7becd2eb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e245da3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@377d414c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d495a2b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@50afa2e3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 16 07:15:13 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-12T01:33:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11758/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-02-24T06:30:47.000+0000",
        "updated": "2021-08-02T18:36:53.000+0000",
        "timeoriginalestimate": null,
        "description": "From below test, summation kernel is of lower precision than numpy.sum.\r\nNumpy implements pairwise summation [1] with O(logn) round-off error, better than O(n\\) error from naive summation.\r\n\r\n*sum.py*\r\n{code:python}\r\nimport numpy as np\r\nimport pyarrow.compute as pc\r\n\r\nt = np.arange(321000, dtype='float64')\r\nt2 = t - np.mean(t)\r\nt2 *= t2\r\n\r\nprint('numpy sum:', np.sum(t2))\r\nprint('arrow sum:', pc.sum(t2))\r\n{code}\r\n\r\n*test result*\r\n{noformat}\r\n# Verified with wolfram alpha (arbitrary precision), Numpy's result is correct. \r\n$ ARROW_USER_SIMD_LEVEL=SSE4_2 python sum.py\r\nnumpy sum: 2756346749973250.0\r\narrow sum: 2756346749973248.0\r\n\r\n$ ARROW_USER_SIMD_LEVEL=AVX2 python sum.py \r\nnumpy sum: 2756346749973250.0\r\narrow sum: 2756346749973249.0\r\n{noformat}\r\n\r\n[1] https://en.wikipedia.org/wiki/Pairwise_summation",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Summation kernel round-off error",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/comment/17289761",
                    "id": "17289761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "+1 on using pairwise summation. Also Julia uses that as the default sum. \r\n(only not fully sure it would be easy to use if we integrate with hash/grouped aggregations)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-02-24T08:10:42.074+0000",
                    "updated": "2021-02-24T08:11:46.192+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/comment/17292078",
                    "id": "17292078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Implemented recursive and non-recursive pairwise summation, also naive summation.\r\nNaive summation suffers from severe round-off errors, and worse performance.\r\n*Non-recursive pairwise summation* is of best performance, it above 1x faster than recursive one. We should adopt it.\r\nDetails at https://github.com/cyb70289/sum/",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-02-27T09:34:13.673+0000",
                    "updated": "2021-02-27T09:34:13.673+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/comment/17293497",
                    "id": "17293497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Current sum kernel code is after several optimizations (manual unroll, simd, bitblockcounter, etc).\r\nThere will be radical changes to adopt pairwise summation, most existing code may be dropped or refactored.\r\ncc [~apitrou] [~frank.du]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-03-02T08:34:49.116+0000",
                    "updated": "2021-03-02T08:34:49.116+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/comment/17293532",
                    "id": "17293532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "+1 for improving precision. Thank you [~yibocai] .",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dfoulks",
                        "name": "dfoulks",
                        "key": "dfoulks",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Drew Foulks",
                        "active": true,
                        "timeZone": "America/Kentucky/Louisville"
                    },
                    "created": "2021-03-02T09:08:03.201+0000",
                    "updated": "2021-08-02T18:36:53.678+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/comment/17299972",
                    "id": "17299972",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 9635\n[https://github.com/apache/arrow/pull/9635]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-03-12T01:33:24.893+0000",
                    "updated": "2021-03-12T01:33:24.893+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13360514/comment/17302281",
                    "id": "17302281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "For record.\r\n Arrow's pairwise sum implementation is a bit different from numpy. Numpy adopts recursion with manually unrolled loops for last 16 summations. Arrow code is non-recursive, and no unroll. Though equivalent in theory, they are different for floating point arithmetic in reality. There may be gaps for large array summations.\r\n\r\nActually, neither numpy nor pyarrow can give accurate results. The point is they both guarantees O(logn) round-off error bound.\r\n\r\nIn below test, pyarrow gives the accurate result. Of course, there must be some tests in favor of numpy. The truth value is from mpmath arbitrary precision lib.\r\n\r\n*Test code*\r\n{code:python}\r\nimport numpy as np\r\nimport pyarrow.compute as pc\r\nimport mpmath\r\n\r\nmpmath.dps = 30\r\nt = np.arange(123456, 654321, dtype='float64') * 987654321\r\n\r\nprint(' numpy: %.0f' % np.sum(t))\r\nprint(' arrow: %.0f' % pc.sum(t).as_py())\r\nprint('mpmath: %.0f' % mpmath.fsum(t))\r\n{code}\r\n*Result*\r\n{noformat}\r\n numpy: 203898299380326662144\r\n arrow: 203898299380326498304\r\nmpmath: 203898299380326498304\r\n{noformat}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-03-16T07:15:13.650+0000",
                    "updated": "2021-03-16T07:15:13.650+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z0nzxc:",
        "customfield_12314139": null
    }
}