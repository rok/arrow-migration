{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13501598",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13501598",
    "key": "ARROW-18317",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352510",
                "id": "12352510",
                "description": "",
                "name": "10.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2022-11-22"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lquerel",
            "name": "lquerel",
            "key": "lquerel",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Laurent Querel",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lquerel",
            "name": "lquerel",
            "key": "lquerel",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Laurent Querel",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18317/votes",
            "votes": 0,
            "hasVoted": false
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2e9f42ea[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39b3af4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@99e7127[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5388b67a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d98eb82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4713f38e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d7ea502[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2bd3ffb1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61ddd5b2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@398ad584[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71142102[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@450e76e6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 15 15:56:05 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-11-15T15:56:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18317/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-11-13T17:45:42.000+0000",
        "updated": "2022-11-15T19:42:59.000+0000",
        "timeoriginalestimate": null,
        "description": "Dictionaries do not seem to be updated correctly when sending a record on an IPC stream.\u00a0\r\n\r\nThe following example creates a 1st record with a single field named \"field\" and initialized with the value \"value_0. This record is then serialized with an ipc writer and deserialized with an ipc reader.\r\n\r\nA second record is then created with the value \"value_1\". After serialization and deserialization, the expected value for the field is \"value_1\" but I get \"value_0\".\u00a0\r\n\r\nBased on a quick analysis via the debugger, I suspect an error in combining the dictionary from step 1 with the dictionary from step 2. The resulting dictionary contains the concatenation of the two dictionaries (i.e. value_0value_1), but the offsets values used to read the field (of the second record) refer \"value_0\". It may be that the offset arrays are not correctly combined or something like that when the second record is received.\r\n\r\nBelow a code snippet to reproduce the issue.\r\n{code:java}\r\n// NOTE: Release methods are not managed in this test for simplicity.\r\nfunc TestDictionary(t *testing.T) {\r\n   pool := memory.NewGoAllocator()\r\n   // A schema with a single dictionary field\r\n   schema := arrow.NewSchema([]arrow.Field{{Name: \"field\", Type: &arrow.DictionaryType{\r\n      IndexType: arrow.PrimitiveTypes.Uint16,\r\n      ValueType: arrow.BinaryTypes.String,\r\n      Ordered:   false,\r\n   }}}, nil)\r\n   // IPC writer and reader\r\n   var bufWriter bytes.Buffer\r\n   ipcWriter := ipc.NewWriter(&bufWriter, ipc.WithSchema(schema))\r\n   bufReader := bytes.NewReader([]byte{})\r\n   var ipcReader *ipc.Reader\r\n\r\n   // Create a first record with field = \"value_0\" \r\n   record := CreateRecord(t, pool, schema, 0)\r\n   expectedJson, err := record.MarshalJSON()\r\n   require.NoError(t, err)\r\n   // Serialize and deserialize the record via an IPC stream\r\n   json, ipcReader, err := EncodeDecodeIpcStream(t, record, &bufWriter, ipcWriter, bufReader, ipcReader)\r\n   require.NoError(t, err)\r\n   // Compare the expected JSON with the actual JSON\r\n   require.JSONEq(t, string(expectedJson), string(json))\r\n\r\n   // Create a second record with field = \"value_1\" \r\n   record = CreateRecord(t, pool, schema, 1)\r\n   expectedJson, err = record.MarshalJSON()\r\n   require.NoError(t, err)\r\n   // Serialize and deserialize the record via an IPC stream\r\n   json, ipcReader, err = EncodeDecodeIpcStream(t, record, &bufWriter, ipcWriter, bufReader, ipcReader)\r\n   require.NoError(t, err)\r\n   // Compare the expected JSON with the actual JSON\r\n   // field = \"value_0\" but should be \"value_1\"\r\n   require.JSONEq(t, string(expectedJson), string(json))\r\n}\r\n\r\n// Create a record with a single field.\r\n// The value of field `field` depends on the value passed in parameter.\r\nfunc CreateRecord(t *testing.T, pool memory.Allocator, schema *arrow.Schema, value int) arrow.Record {\r\n   rb := array.NewRecordBuilder(pool, schema)\r\n   fieldB := rb.Field(0).(*array.BinaryDictionaryBuilder)\r\n   err := fieldB.AppendString(fmt.Sprintf(\"value_%d\", value))\r\n   if err != nil {\r\n      t.Fatal(err)\r\n   }\r\n   return rb.NewRecord()\r\n}\r\n\r\n// Encode and decode a record over a tuple of IPC writer and reader.\r\n// IPC writer and reader are the same from one call to another.\r\nfunc EncodeDecodeIpcStream(t *testing.T,\r\n   record arrow.Record,\r\n   bufWriter *bytes.Buffer, ipcWriter *ipc.Writer,\r\n   bufReader *bytes.Reader, ipcReader *ipc.Reader) ([]byte, *ipc.Reader, error) {\r\n\r\n   // Serialize the record via an ipc writer\r\n   if err := ipcWriter.Write(record); err != nil {\r\n      return nil, ipcReader, err\r\n   }\r\n   serializedRecord := bufWriter.Bytes()\r\n   bufWriter.Reset()\r\n\r\n   // Deserialize the record via an ipc reader\r\n   bufReader.Reset(serializedRecord)\r\n   if ipcReader == nil {\r\n      newIpcReader, err := ipc.NewReader(bufReader)\r\n      if err != nil {\r\n         return nil, newIpcReader, err\r\n      }\r\n      ipcReader = newIpcReader\r\n   }\r\n   ipcReader.Next()\r\n   record = ipcReader.Record()\r\n\r\n   // Return the decoded record as a json string\r\n   json, err := record.MarshalJSON()\r\n   if err != nil {\r\n      return nil, ipcReader, err\r\n   }\r\n   return json, ipcReader, nil\r\n} {code}",
        "customfield_10010": null,
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] Problem of dictionary update during a communication via an IPC stream ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "customfield_12311820": "0|z1bziw:",
        "customfield_12314139": null
    }
}