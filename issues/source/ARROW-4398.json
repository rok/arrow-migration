{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13212137",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137",
    "key": "ARROW-4398",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "parquet",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4398/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/303783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233\n \n \n   Use BufferBuilder and UnsafeAppend to accelerate writes.\r\n   \r\n   Before (prior to ARROW-6381, which came up while investigating this):\r\n   \r\n   ```\r\n   ----------------------------------------------------------------------------------\r\n   Benchmark                                           Time           CPU Iterations\r\n   ----------------------------------------------------------------------------------\r\n   BM_ArrowBinaryPlain/EncodeArrow/262144        6111690 ns    6109829 ns        465    246.06MB/s\r\n   BM_ArrowBinaryPlain/EncodeArrow/1048576      30470849 ns   30451048 ns         85   197.296MB/s\r\n   BM_ArrowBinaryPlain/EncodeLowLevel/262144     5352838 ns    5352679 ns        514   280.866MB/s\r\n   BM_ArrowBinaryPlain/EncodeLowLevel/1048576   29736017 ns   29735036 ns         94   202.047MB/s\r\n   ```\r\n   \r\n   After\r\n   \r\n   ```\r\n   ----------------------------------------------------------------------------------\r\n   Benchmark                                           Time           CPU Iterations\r\n   ----------------------------------------------------------------------------------\r\n   BM_ArrowBinaryPlain/EncodeArrow/262144        2020914 ns    2020905 ns       1000   743.918MB/s\r\n   BM_ArrowBinaryPlain/EncodeArrow/1048576      11596223 ns   11596094 ns        242   518.096MB/s\r\n   BM_ArrowBinaryPlain/EncodeLowLevel/262144     2740316 ns    2740256 ns       1021    548.63MB/s\r\n   BM_ArrowBinaryPlain/EncodeLowLevel/1048576   17562138 ns   17560763 ns        157    342.12MB/s\r\n   ```\r\n   \r\n   Dictionary encoding perf is not really affected by this work, so this will mostly affect that case where we fall back to PLAIN encoding when the dictionary grows large. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-29T16:46:40.321+0000",
                    "updated": "2019-08-29T16:46:40.321+0000",
                    "started": "2019-08-29T16:46:40.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303783",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/303789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#issuecomment-526273108\n \n \n   Python benchmarks show an end-to-end improvement of about 10%\r\n   \r\n   Before this and ARROW-6831:\r\n   \r\n   ```\r\n   [ 12.50%] \u00b7\u00b7\u00b7 ...rquetWriteBinary.time_convert_pandas_and_write_binary_table            2.16\u00b10s\r\n   [ 25.00%] \u00b7\u00b7\u00b7 parquet.ParquetWriteBinary.time_write_binary_table                        1.25\u00b10s\r\n   [ 37.50%] \u00b7\u00b7\u00b7 ...et.ParquetWriteBinary.time_write_binary_table_no_dictionary            1.24\u00b10s\r\n   [ 50.00%] \u00b7\u00b7\u00b7 ...uet.ParquetWriteBinary.time_write_binary_table_uncompressed            927\u00b10ms\r\n   ```\r\n   \r\n   After\r\n   \r\n   ```\r\n   [ 12.50%] \u00b7\u00b7\u00b7 ...rquetWriteBinary.time_convert_pandas_and_write_binary_table            1.96\u00b10s\r\n   [ 25.00%] \u00b7\u00b7\u00b7 parquet.ParquetWriteBinary.time_write_binary_table                        1.10\u00b10s\r\n   [ 37.50%] \u00b7\u00b7\u00b7 ...et.ParquetWriteBinary.time_write_binary_table_no_dictionary            1.08\u00b10s\r\n   [ 50.00%] \u00b7\u00b7\u00b7 ...uet.ParquetWriteBinary.time_write_binary_table_uncompressed            772\u00b10ms\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-29T16:57:24.388+0000",
                    "updated": "2019-08-29T16:57:24.388+0000",
                    "started": "2019-08-29T16:57:24.388+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303789",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/303935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#issuecomment-526376973\n \n \n   @ursabot build\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-29T21:54:11.678+0000",
                    "updated": "2019-08-29T21:54:11.678+0000",
                    "started": "2019-08-29T21:54:11.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303935",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319237191\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -116,23 +109,22 @@ class PlainEncoder : public EncoderImpl, virtual public TypedEncoder<DType> {\n \n   void Put(const ByteArray& val) {\n     // Write the result to the output stream\n-    PARQUET_THROW_NOT_OK(values_sink_->Write(reinterpret_cast<const uint8_t*>(&val.len),\n-                                             sizeof(uint32_t)));\n-    if (val.len > 0) {\n-      DCHECK(nullptr != val.ptr) << \"Value ptr cannot be NULL\";\n+    if (ARROW_PREDICT_FALSE(sink_.length() + val.len + sizeof(uint32_t) >\n+                            sink_.capacity())) {\n+      PARQUET_THROW_NOT_OK(sink_.Reserve(val.len + sizeof(uint32_t)));\n     }\n-    PARQUET_THROW_NOT_OK(\n-        values_sink_->Write(reinterpret_cast<const uint8_t*>(val.ptr), val.len));\n+    DCHECK(val.len == 0 || nullptr != val.ptr) << \"Value ptr cannot be NULL\";\n \n Review comment:\n   ```suggestion\r\n       DCHECK(val.len == 0 || val.ptr != nullptr) << \"Non empty ByteArray may not have NULL ptr\";\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T13:04:43.192+0000",
                    "updated": "2019-08-30T13:04:43.192+0000",
                    "started": "2019-08-30T13:04:43.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304242",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319500125\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -199,8 +195,14 @@ class PlainBooleanEncoder : public EncoderImpl,\n                             virtual public TypedEncoder<BooleanType>,\n                             virtual public BooleanEncoder {\n  public:\n-  explicit PlainBooleanEncoder(const ColumnDescriptor* descr,\n-                               MemoryPool* pool = arrow::default_memory_pool());\n+  explicit PlainBooleanEncoder(const ColumnDescriptor* descr, MemoryPool* pool)\n+      : EncoderImpl(descr, Encoding::PLAIN, pool),\n+        bits_available_(kInMemoryDefaultCapacity * 8),\n \n Review comment:\n   nit: just initialize bit_writer_ in the member initializer list\r\n   ```suggestion\r\n           bits_available_(kInMemoryDefaultCapacity * 8),\r\n           bit_writer_(new BitUtil::BitWriter(bits_buffer_->mutable_data(),\r\n                                                static_cast<int>(bits_buffer_->size()))),\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T13:04:43.543+0000",
                    "updated": "2019-08-30T13:04:43.543+0000",
                    "started": "2019-08-30T13:04:43.541+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304243",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319498924\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -154,38 +146,42 @@ void AssertBinary(const arrow::Array& values) {\n   }\n }\n \n-template <typename EncoderType>\n-void PutBinaryArray(const arrow::Array& values, EncoderType* encoder) {\n+template <>\n+void PlainEncoder<ByteArrayType>::Put(const arrow::Array& values) {\n   AssertBinary(values);\n   const auto& data = checked_cast<const arrow::BinaryArray&>(values);\n+  const int64_t total_bytes = data.value_offset(data.length()) - data.value_offset(0);\n+  PARQUET_THROW_NOT_OK(sink_.Reserve(total_bytes + data.length() * sizeof(uint32_t)));\n+\n+  auto AppendValue = [&](int64_t i) {\n \n Review comment:\n   You're duplicating code from Put(); I think a cleaner way to do this would be to extract this and the relevant code in Put() into (protected) UnsafePut()\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T13:04:43.546+0000",
                    "updated": "2019-08-30T13:04:43.546+0000",
                    "started": "2019-08-30T13:04:43.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304244",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304245",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319501620\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -154,38 +146,42 @@ void AssertBinary(const arrow::Array& values) {\n   }\n }\n \n-template <typename EncoderType>\n-void PutBinaryArray(const arrow::Array& values, EncoderType* encoder) {\n+template <>\n+void PlainEncoder<ByteArrayType>::Put(const arrow::Array& values) {\n   AssertBinary(values);\n   const auto& data = checked_cast<const arrow::BinaryArray&>(values);\n+  const int64_t total_bytes = data.value_offset(data.length()) - data.value_offset(0);\n+  PARQUET_THROW_NOT_OK(sink_.Reserve(total_bytes + data.length() * sizeof(uint32_t)));\n+\n+  auto AppendValue = [&](int64_t i) {\n+    auto view = data.GetView(i);\n+    const uint32_t length = static_cast<uint32_t>(view.size());\n+    sink_.UnsafeAppend(&length, sizeof(uint32_t));\n+    sink_.UnsafeAppend(view.data(), view.size());\n+  };\n+\n   if (data.null_count() == 0) {\n     // no nulls, just dump the data\n     for (int64_t i = 0; i < data.length(); i++) {\n-      encoder->Put(ByteArray(data.GetView(i)));\n+      AppendValue(i);\n     }\n   } else {\n     for (int64_t i = 0; i < data.length(); i++) {\n       if (data.IsValid(i)) {\n-        encoder->Put(ByteArray(data.GetView(i)));\n+        AppendValue(i);\n       }\n     }\n   }\n }\n \n-template <>\n-void PlainEncoder<ByteArrayType>::Put(const arrow::Array& values) {\n-  PutBinaryArray(values, this);\n-}\n-\n template <>\n inline void PlainEncoder<FLBAType>::Put(const FixedLenByteArray* src, int num_values) {\n   for (int i = 0; i < num_values; ++i) {\n     // Write the result to the output stream\n     if (descr_->type_length() > 0) {\n       DCHECK(nullptr != src[i].ptr) << \"Value ptr cannot be NULL\";\n \n Review comment:\n   Above a similar assertion checks whether the length is 0 before asserting the pointer is non null\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T13:04:43.553+0000",
                    "updated": "2019-08-30T13:04:43.553+0000",
                    "started": "2019-08-30T13:04:43.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304245",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319501620\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -154,38 +146,42 @@ void AssertBinary(const arrow::Array& values) {\n   }\n }\n \n-template <typename EncoderType>\n-void PutBinaryArray(const arrow::Array& values, EncoderType* encoder) {\n+template <>\n+void PlainEncoder<ByteArrayType>::Put(const arrow::Array& values) {\n   AssertBinary(values);\n   const auto& data = checked_cast<const arrow::BinaryArray&>(values);\n+  const int64_t total_bytes = data.value_offset(data.length()) - data.value_offset(0);\n+  PARQUET_THROW_NOT_OK(sink_.Reserve(total_bytes + data.length() * sizeof(uint32_t)));\n+\n+  auto AppendValue = [&](int64_t i) {\n+    auto view = data.GetView(i);\n+    const uint32_t length = static_cast<uint32_t>(view.size());\n+    sink_.UnsafeAppend(&length, sizeof(uint32_t));\n+    sink_.UnsafeAppend(view.data(), view.size());\n+  };\n+\n   if (data.null_count() == 0) {\n     // no nulls, just dump the data\n     for (int64_t i = 0; i < data.length(); i++) {\n-      encoder->Put(ByteArray(data.GetView(i)));\n+      AppendValue(i);\n     }\n   } else {\n     for (int64_t i = 0; i < data.length(); i++) {\n       if (data.IsValid(i)) {\n-        encoder->Put(ByteArray(data.GetView(i)));\n+        AppendValue(i);\n       }\n     }\n   }\n }\n \n-template <>\n-void PlainEncoder<ByteArrayType>::Put(const arrow::Array& values) {\n-  PutBinaryArray(values, this);\n-}\n-\n template <>\n inline void PlainEncoder<FLBAType>::Put(const FixedLenByteArray* src, int num_values) {\n   for (int i = 0; i < num_values; ++i) {\n     // Write the result to the output stream\n     if (descr_->type_length() > 0) {\n       DCHECK(nullptr != src[i].ptr) << \"Value ptr cannot be NULL\";\n \n Review comment:\n   Above (line 116), a similar assertion checks whether the length is 0 before asserting the pointer is non null\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T13:18:00.976+0000",
                    "updated": "2019-08-30T13:18:00.976+0000",
                    "started": "2019-08-30T13:18:00.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304248",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319510051\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -116,23 +109,22 @@ class PlainEncoder : public EncoderImpl, virtual public TypedEncoder<DType> {\n \n   void Put(const ByteArray& val) {\n     // Write the result to the output stream\n-    PARQUET_THROW_NOT_OK(values_sink_->Write(reinterpret_cast<const uint8_t*>(&val.len),\n-                                             sizeof(uint32_t)));\n-    if (val.len > 0) {\n-      DCHECK(nullptr != val.ptr) << \"Value ptr cannot be NULL\";\n+    const int64_t increment = static_cast<int64_t>(val.len + sizeof(uint32_t));\n+    if (ARROW_PREDICT_FALSE(sink_.length() + increment > sink_.capacity())) {\n+      PARQUET_THROW_NOT_OK(sink_.Reserve(increment));\n     }\n-    PARQUET_THROW_NOT_OK(\n-        values_sink_->Write(reinterpret_cast<const uint8_t*>(val.ptr), val.len));\n+    DCHECK(val.len == 0 || nullptr != val.ptr) << \"Value ptr cannot be NULL\";\n+    sink_.UnsafeAppend(&val.len, sizeof(uint32_t));\n+    sink_.UnsafeAppend(val.ptr, val.len);\n   }\n \n  protected:\n-  std::shared_ptr<arrow::io::BufferOutputStream> values_sink_;\n+  arrow::BufferBuilder sink_;\n };\n \n template <typename DType>\n void PlainEncoder<DType>::Put(const T* buffer, int num_values) {\n \n Review comment:\n   It looks like Travis is failing because BufferBuilder::Append ultimately uses memcpy and memset (without checking whether the length of data appended is 0), and they have the `__nonnull` attribute set for their pointer arguments. A check for length == 0 should be added either here or in BufferBuilder\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T13:23:52.841+0000",
                    "updated": "2019-08-30T13:23:52.841+0000",
                    "started": "2019-08-30T13:23:52.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304251",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319541384\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -199,8 +195,14 @@ class PlainBooleanEncoder : public EncoderImpl,\n                             virtual public TypedEncoder<BooleanType>,\n                             virtual public BooleanEncoder {\n  public:\n-  explicit PlainBooleanEncoder(const ColumnDescriptor* descr,\n-                               MemoryPool* pool = arrow::default_memory_pool());\n+  explicit PlainBooleanEncoder(const ColumnDescriptor* descr, MemoryPool* pool)\n+      : EncoderImpl(descr, Encoding::PLAIN, pool),\n+        bits_available_(kInMemoryDefaultCapacity * 8),\n \n Review comment:\n   Will do, but this is a new change\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T14:36:09.145+0000",
                    "updated": "2019-08-30T14:36:09.145+0000",
                    "started": "2019-08-30T14:36:09.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304298",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319564881\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -199,8 +195,14 @@ class PlainBooleanEncoder : public EncoderImpl,\n                             virtual public TypedEncoder<BooleanType>,\n                             virtual public BooleanEncoder {\n  public:\n-  explicit PlainBooleanEncoder(const ColumnDescriptor* descr,\n-                               MemoryPool* pool = arrow::default_memory_pool());\n+  explicit PlainBooleanEncoder(const ColumnDescriptor* descr, MemoryPool* pool)\n+      : EncoderImpl(descr, Encoding::PLAIN, pool),\n+        bits_available_(kInMemoryDefaultCapacity * 8),\n \n Review comment:\n   Actually... is there a reason bit_writer_ needs to be a unique_ptr?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T15:30:01.340+0000",
                    "updated": "2019-08-30T15:30:01.340+0000",
                    "started": "2019-08-30T15:30:01.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304324",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319595462\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -199,8 +195,14 @@ class PlainBooleanEncoder : public EncoderImpl,\n                             virtual public TypedEncoder<BooleanType>,\n                             virtual public BooleanEncoder {\n  public:\n-  explicit PlainBooleanEncoder(const ColumnDescriptor* descr,\n-                               MemoryPool* pool = arrow::default_memory_pool());\n+  explicit PlainBooleanEncoder(const ColumnDescriptor* descr, MemoryPool* pool)\n+      : EncoderImpl(descr, Encoding::PLAIN, pool),\n+        bits_available_(kInMemoryDefaultCapacity * 8),\n \n Review comment:\n   Nope. Changing it to not be\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T16:51:12.643+0000",
                    "updated": "2019-08-30T16:51:12.643+0000",
                    "started": "2019-08-30T16:51:12.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304383",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#discussion_r319595642\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -154,38 +146,42 @@ void AssertBinary(const arrow::Array& values) {\n   }\n }\n \n-template <typename EncoderType>\n-void PutBinaryArray(const arrow::Array& values, EncoderType* encoder) {\n+template <>\n+void PlainEncoder<ByteArrayType>::Put(const arrow::Array& values) {\n   AssertBinary(values);\n   const auto& data = checked_cast<const arrow::BinaryArray&>(values);\n+  const int64_t total_bytes = data.value_offset(data.length()) - data.value_offset(0);\n+  PARQUET_THROW_NOT_OK(sink_.Reserve(total_bytes + data.length() * sizeof(uint32_t)));\n+\n+  auto AppendValue = [&](int64_t i) {\n+    auto view = data.GetView(i);\n+    const uint32_t length = static_cast<uint32_t>(view.size());\n+    sink_.UnsafeAppend(&length, sizeof(uint32_t));\n+    sink_.UnsafeAppend(view.data(), view.size());\n+  };\n+\n   if (data.null_count() == 0) {\n     // no nulls, just dump the data\n     for (int64_t i = 0; i < data.length(); i++) {\n-      encoder->Put(ByteArray(data.GetView(i)));\n+      AppendValue(i);\n     }\n   } else {\n     for (int64_t i = 0; i < data.length(); i++) {\n       if (data.IsValid(i)) {\n-        encoder->Put(ByteArray(data.GetView(i)));\n+        AppendValue(i);\n       }\n     }\n   }\n }\n \n-template <>\n-void PlainEncoder<ByteArrayType>::Put(const arrow::Array& values) {\n-  PutBinaryArray(values, this);\n-}\n-\n template <>\n inline void PlainEncoder<FLBAType>::Put(const FixedLenByteArray* src, int num_values) {\n   for (int i = 0; i < num_values; ++i) {\n     // Write the result to the output stream\n     if (descr_->type_length() > 0) {\n       DCHECK(nullptr != src[i].ptr) << \"Value ptr cannot be NULL\";\n \n Review comment:\n   I'm changing this to bail out altogether if type_length() is 0\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T16:51:41.203+0000",
                    "updated": "2019-08-30T16:51:41.203+0000",
                    "started": "2019-08-30T16:51:41.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304384",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#issuecomment-526747546\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5233?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@ab712d2`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `91.37%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5233/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5233?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #5233   +/-   ##\n   =========================================\n     Coverage          ?   89.19%           \n   =========================================\n     Files             ?      750           \n     Lines             ?   107593           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    95970           \n     Misses            ?    11623           \n     Partials          ?        0\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5233?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/\\_flight.pyx](https://codecov.io/gh/apache/arrow/pull/5233/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX2ZsaWdodC5weXg=) | `53.79% <\u00f8> (\u00f8)` | |\n   | [cpp/src/parquet/encoding.cc](https://codecov.io/gh/apache/arrow/pull/5233/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2VuY29kaW5nLmNj) | `92.37% <91.37%> (\u00f8)` | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5233?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5233?src=pr&el=footer). Last update [ab712d2...3a8c37a](https://codecov.io/gh/apache/arrow/pull/5233?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T20:57:09.659+0000",
                    "updated": "2019-08-30T20:57:09.659+0000",
                    "started": "2019-08-30T20:57:09.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304594",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233#issuecomment-526857616\n \n \n   +1\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T19:05:31.150+0000",
                    "updated": "2019-08-31T19:05:31.150+0000",
                    "started": "2019-08-31T19:05:31.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304864",
                    "issueId": "13212137"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/worklog/304865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5233: ARROW-4398: [C++][Python][Parquet] Improve BYTE_ARRAY PLAIN encoding write performance. Add BYTE_ARRAY write benchmarks\nURL: https://github.com/apache/arrow/pull/5233\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T19:05:59.331+0000",
                    "updated": "2019-08-31T19:05:59.331+0000",
                    "started": "2019-08-31T19:05:59.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304865",
                    "issueId": "13212137"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5caf8773[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b681721[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37884d41[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@c62958e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@136756da[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@620cda78[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@171b613d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@f4d48b5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26b50e00[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@22eedfb4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e30405d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@bddb5ce[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Aug 31 19:05:58 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-31T19:05:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4398/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-01-28T03:25:08.000+0000",
        "updated": "2019-08-31T19:05:59.000+0000",
        "timeoriginalestimate": null,
        "description": "This is follow-on work to PARQUET-1508, so we can monitor the performance of this operation over time",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add benchmarks for Arrow<>Parquet BYTE_ARRAY serialization (read and write)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13212137/comment/16920200",
                    "id": "16920200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5233\n[https://github.com/apache/arrow/pull/5233]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-31T19:05:58.809+0000",
                    "updated": "2019-08-31T19:05:58.809+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0d8w:",
        "customfield_12314139": null
    }
}