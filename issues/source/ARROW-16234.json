{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13440455",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455",
    "key": "ARROW-16234",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "C++",
            "good-second-issue",
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12641014",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12641014",
                "type": {
                    "id": "12310560",
                    "name": "Problem/Incident",
                    "inward": "is caused by",
                    "outward": "causes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310560"
                },
                "outwardIssue": {
                    "id": "13447903",
                    "key": "ARROW-16706",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13447903",
                    "fields": {
                        "summary": "[Python] Expose RankOptions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                            "name": "Critical",
                            "id": "2"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
            "name": "willayd",
            "key": "willayd",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
            },
            "displayName": "Will Ayd",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
            "name": "willayd",
            "key": "willayd",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
            },
            "displayName": "Will Ayd",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
            "name": "willayd",
            "key": "willayd",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
            },
            "displayName": "Will Ayd",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 33600,
            "total": 33600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 33600,
            "total": 33600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16234/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 56,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/761075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#issuecomment-1106813245\n\n   https://issues.apache.org/jira/browse/ARROW-16234\n\n\n",
                    "created": "2022-04-22T19:53:23.367+0000",
                    "updated": "2022-04-22T19:53:23.367+0000",
                    "started": "2022-04-22T19:53:23.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "761075",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/761076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#issuecomment-1106813254\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-22T19:53:25.315+0000",
                    "updated": "2022-04-22T19:53:25.315+0000",
                    "started": "2022-04-22T19:53:25.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "761076",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/761083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r856541244\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,68 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, nNull values are\\n\"\n\nReview Comment:\n   ```suggestion\r\n        \"By default, Null values are\\n\"\r\n   ```\n\n\n\n",
                    "created": "2022-04-22T20:16:28.347+0000",
                    "updated": "2022-04-22T20:16:28.347+0000",
                    "started": "2022-04-22T20:16:28.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "761083",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861034762\n\n\n##########\ncpp/src/arrow/compute/api_vector.h:\n##########\n@@ -95,6 +95,13 @@ enum class NullPlacement {\n   AtEnd,\n };\n \n+enum class Tiebreaker {\n+  Lowest,\n\nReview Comment:\n   I have no strong feelings on this but I'll note that different terminology is used elsewhere:\r\n   * [Scipy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rankdata.html) uses \"min\", \"max\", \"ordinal\", \"dense\" respectively\r\n   * [R](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/rank) uses \"min\", \"max\", \"first\" and doesn't seem to have an equivalent for \"dense\"\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n\nReview Comment:\n   Nit: no capitalization needed here :-)\r\n   ```suggestion\r\n        \"By default, null values are considered greater than any other value and\\n\"\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n\nReview Comment:\n   We use `checked_cast` for this which compiles to a `dynamic_cast` in debug mode.\n\n\n\n##########\ndocs/source/cpp/compute.rst:\n##########\n@@ -1643,6 +1643,8 @@ in the respective option classes.\n +-----------------------+------------+---------------------------------------------------------+-------------------+--------------------------------+----------------+\n | sort_indices          | Unary      | Boolean, Numeric, Temporal, Binary- and String-like     | UInt64            | :struct:`SortOptions`          | \\(1) \\(4)      |\n +-----------------------+------------+---------------------------------------------------------+-------------------+--------------------------------+----------------+\n+| rank                  | Unary      | Boolean, Numeric, Temporal, Binary- and String-like     | UInt64            | :struct:`RankOptions`          | \\(6)           |\n\nReview Comment:\n   We would probably like to keep this table alphabetically-order in function name.\n\n\n\n##########\ncpp/src/arrow/compute/api_vector.h:\n##########\n@@ -95,6 +95,13 @@ enum class NullPlacement {\n   AtEnd,\n };\n \n+enum class Tiebreaker {\n\nReview Comment:\n   I assume this is specific to the rank function, so perhaps put this inside `RankOptions` (and then perhaps make this a simple `enum` to be able to write e.g. `RankOptions::Lowest`).\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n+\n+    auto out_size = array.length();\n+    ARROW_ASSIGN_OR_RAISE(auto rankings,\n+                          MakeMutableUInt64Array(uint64(), out_size, ctx->memory_pool()));\n+\n+    auto* indices = sortIndices.make_array()->data()->GetValues<uint64_t>(1);\n+    auto out_rankings = rankings->GetMutableValues<uint64_t>(1);\n+    uint64_t rank = 0;\n+    Datum prevValue, currValue;\n+\n+    if (options.tiebreaker == Tiebreaker::Dense) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n\nReview Comment:\n   Hmm, `GetScalar` is really going to be inefficient for this as it allocates a new `std::shared_ptr<Scalar>` every time.\r\n   Instead, we should specialize the loop based on the actual datatype. Something like `VisitArrayDataInline` may help.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n+\n+    auto out_size = array.length();\n+    ARROW_ASSIGN_OR_RAISE(auto rankings,\n+                          MakeMutableUInt64Array(uint64(), out_size, ctx->memory_pool()));\n+\n+    auto* indices = sortIndices.make_array()->data()->GetValues<uint64_t>(1);\n+    auto out_rankings = rankings->GetMutableValues<uint64_t>(1);\n+    uint64_t rank = 0;\n+    Datum prevValue, currValue;\n+\n+    if (options.tiebreaker == Tiebreaker::Dense) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          ++rank;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::First) {\n+      for (auto i = 0; i < out_size; i++) {\n+        rank = i + 1;\n+        out_rankings[indices[i]] = rank;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Lowest) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          rank = i + 1;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Highest) {\n+      auto currentTieCount = 0;\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+          currentTieCount++;\n+        } else {\n+          currentTieCount = 0;\n+        }\n+        rank = i + 1;\n+\n+        // This can be inefficient when dealing many tied values\n\nReview Comment:\n   Why not simply loop on the array in reverse order?\n\n\n\n##########\ncpp/src/arrow/compute/api_vector.h:\n##########\n@@ -174,6 +181,23 @@ class ARROW_EXPORT SelectKOptions : public FunctionOptions {\n   std::vector<SortKey> sort_keys;\n };\n \n+/// \\brief Rank options\n+class ARROW_EXPORT RankOptions : public FunctionOptions {\n+ public:\n+  explicit RankOptions(SortOrder order = SortOrder::Ascending,\n+                       NullPlacement null_placement = NullPlacement::AtEnd,\n+                       Tiebreaker tiebreaker = Tiebreaker::First);\n\nReview Comment:\n   Nit: `TieBreaker tie_breaker` to keep naming consistent.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n\nReview Comment:\n   `GetDefaultSortOptions` doesn't seem right here?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n\nReview Comment:\n   Please try to follow the coding conventions: `lower_case` for local variables (so `sort_indices` here).\n\n\n\n",
                    "created": "2022-04-28T15:45:07.177+0000",
                    "updated": "2022-04-28T15:45:07.177+0000",
                    "started": "2022-04-28T15:45:07.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763625",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861042371\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n+\n+    auto out_size = array.length();\n+    ARROW_ASSIGN_OR_RAISE(auto rankings,\n+                          MakeMutableUInt64Array(uint64(), out_size, ctx->memory_pool()));\n+\n+    auto* indices = sortIndices.make_array()->data()->GetValues<uint64_t>(1);\n+    auto out_rankings = rankings->GetMutableValues<uint64_t>(1);\n+    uint64_t rank = 0;\n+    Datum prevValue, currValue;\n+\n+    if (options.tiebreaker == Tiebreaker::Dense) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n\nReview Comment:\n   Hmm, `GetScalar` is really going to be inefficient for this as it allocates a new `std::shared_ptr<Scalar>` every time.\r\n   Instead, we should specialize the loop based on the actual datatype.\n\n\n\n",
                    "created": "2022-04-28T15:48:32.366+0000",
                    "updated": "2022-04-28T15:48:32.366+0000",
                    "started": "2022-04-28T15:48:32.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763630",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861042371\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n+\n+    auto out_size = array.length();\n+    ARROW_ASSIGN_OR_RAISE(auto rankings,\n+                          MakeMutableUInt64Array(uint64(), out_size, ctx->memory_pool()));\n+\n+    auto* indices = sortIndices.make_array()->data()->GetValues<uint64_t>(1);\n+    auto out_rankings = rankings->GetMutableValues<uint64_t>(1);\n+    uint64_t rank = 0;\n+    Datum prevValue, currValue;\n+\n+    if (options.tiebreaker == Tiebreaker::Dense) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n\nReview Comment:\n   Hmm, `GetScalar` is really going to be inefficient for this as it allocates a new `std::shared_ptr<Scalar>` every time.\r\n   Instead, we should specialize the loop based on the actual datatype.\r\n   \r\n   (edit: removed my suggestion to use `VisitArrayDataInline`, which wouldn't help for random access)\n\n\n\n",
                    "created": "2022-04-28T15:48:52.409+0000",
                    "updated": "2022-04-28T15:48:52.409+0000",
                    "started": "2022-04-28T15:48:52.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763631",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861043865\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n+\n+    auto out_size = array.length();\n+    ARROW_ASSIGN_OR_RAISE(auto rankings,\n+                          MakeMutableUInt64Array(uint64(), out_size, ctx->memory_pool()));\n+\n+    auto* indices = sortIndices.make_array()->data()->GetValues<uint64_t>(1);\n+    auto out_rankings = rankings->GetMutableValues<uint64_t>(1);\n+    uint64_t rank = 0;\n+    Datum prevValue, currValue;\n+\n+    if (options.tiebreaker == Tiebreaker::Dense) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          ++rank;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::First) {\n+      for (auto i = 0; i < out_size; i++) {\n+        rank = i + 1;\n+        out_rankings[indices[i]] = rank;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Lowest) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          rank = i + 1;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Highest) {\n+      auto currentTieCount = 0;\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+          currentTieCount++;\n+        } else {\n+          currentTieCount = 0;\n+        }\n+        rank = i + 1;\n+\n+        // This can be inefficient when dealing many tied values\n\nReview Comment:\n   Why not simply loop on the indices array in reverse order?\n\n\n\n",
                    "created": "2022-04-28T15:49:32.467+0000",
                    "updated": "2022-04-28T15:49:32.467+0000",
                    "started": "2022-04-28T15:49:32.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763632",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861057344\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort_test.cc:\n##########\n@@ -1936,6 +1940,95 @@ TEST_P(TestTableSortIndicesRandom, Sort) {\n   }\n }\n \n+// Ranking Tests\n+//\n+TEST(ArrayRankFunction, Array) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, -3, -42, 5]\");\n+  auto expectedAsc = ArrayFromJSON(uint64(), \"[3, 4, 2, 1, 5]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Ascending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedAsc, actual, /*verbose=*/true);\n+    }\n+  }\n+\n+  auto expectedDesc = ArrayFromJSON(uint64(), \"[3, 2, 4, 5, 1]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Descending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedDesc, actual, /*verbose=*/true);\n+    }\n+  }\n+}\n+\n+TEST(ArrayRankFunction, NullHandling) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, null, null, 2]\");\n+  auto expectedEnd = ArrayFromJSON(uint64(), \"[1, 2, 4, 5, 3]\");\n+  RankOptions optionsEnd(SortOrder::Ascending, NullPlacement::AtEnd, Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualEnd, CallFunction(\"rank\", {arr}, &optionsEnd));\n+  AssertDatumsEqual(expectedEnd, actualEnd, /*verbose=*/true);\n+\n+  auto expectedStart = ArrayFromJSON(uint64(), \"[3, 4, 1, 2, 5]\");\n+  RankOptions optionsStart(SortOrder::Ascending, NullPlacement::AtStart,\n+                           Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualStart, CallFunction(\"rank\", {arr}, &optionsStart));\n+  AssertDatumsEqual(expectedStart, actualStart, /*verbose=*/true);\n+}\n+\n+TEST(ArrayRankFunction, TiebreakHandlingAsc) {\n\nReview Comment:\n   Can you add nuls into the mix? I wonder if multiple nulls should be considered ties (AFAIU, `NULL == NULL` is false in SQL-land). @lidavidm What do you think?\n\n\n\n",
                    "created": "2022-04-28T15:53:02.903+0000",
                    "updated": "2022-04-28T15:53:02.903+0000",
                    "started": "2022-04-28T15:53:02.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763637",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861059796\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n\nReview Comment:\n   Note that internally you can use `vector_sort_internal.h`, which gives you access to `ArraySortFunc` which in addition to sorting an error returns you information about where nulls start and end. This may (or may not) be useful for implementing this function more efficiently.\n\n\n\n",
                    "created": "2022-04-28T15:55:13.125+0000",
                    "updated": "2022-04-28T15:55:13.125+0000",
                    "started": "2022-04-28T15:55:13.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763642",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861060191\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort_test.cc:\n##########\n@@ -1936,6 +1940,95 @@ TEST_P(TestTableSortIndicesRandom, Sort) {\n   }\n }\n \n+// Ranking Tests\n+//\n+TEST(ArrayRankFunction, Array) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, -3, -42, 5]\");\n+  auto expectedAsc = ArrayFromJSON(uint64(), \"[3, 4, 2, 1, 5]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Ascending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedAsc, actual, /*verbose=*/true);\n+    }\n+  }\n+\n+  auto expectedDesc = ArrayFromJSON(uint64(), \"[3, 2, 4, 5, 1]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Descending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedDesc, actual, /*verbose=*/true);\n+    }\n+  }\n+}\n+\n+TEST(ArrayRankFunction, NullHandling) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, null, null, 2]\");\n+  auto expectedEnd = ArrayFromJSON(uint64(), \"[1, 2, 4, 5, 3]\");\n+  RankOptions optionsEnd(SortOrder::Ascending, NullPlacement::AtEnd, Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualEnd, CallFunction(\"rank\", {arr}, &optionsEnd));\n+  AssertDatumsEqual(expectedEnd, actualEnd, /*verbose=*/true);\n+\n+  auto expectedStart = ArrayFromJSON(uint64(), \"[3, 4, 1, 2, 5]\");\n+  RankOptions optionsStart(SortOrder::Ascending, NullPlacement::AtStart,\n+                           Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualStart, CallFunction(\"rank\", {arr}, &optionsStart));\n+  AssertDatumsEqual(expectedStart, actualStart, /*verbose=*/true);\n+}\n+\n+TEST(ArrayRankFunction, TiebreakHandlingAsc) {\n\nReview Comment:\n   I guess Pandas has options for this:\r\n   \r\n   ```\r\n   na_option{\u2018keep\u2019, \u2018top\u2019, \u2018bottom\u2019}, default \u2018keep\u2019\r\n   \r\n       How to rank NaN values:\r\n   \r\n           keep: assign NaN rank to NaN values\r\n   \r\n           top: assign lowest rank to NaN values\r\n   \r\n           bottom: assign highest rank to NaN values\r\n   ```\n\n\n\n",
                    "created": "2022-04-28T15:55:38.204+0000",
                    "updated": "2022-04-28T15:55:38.204+0000",
                    "started": "2022-04-28T15:55:38.204+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763644",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861064411\n\n\n##########\ncpp/src/arrow/compute/api_vector.h:\n##########\n@@ -95,6 +95,13 @@ enum class NullPlacement {\n   AtEnd,\n };\n \n+enum class Tiebreaker {\n+  Lowest,\n\nReview Comment:\n   Good point. Pandas also uses min / max so should stick with that\n\n\n\n",
                    "created": "2022-04-28T15:59:23.652+0000",
                    "updated": "2022-04-28T15:59:23.652+0000",
                    "started": "2022-04-28T15:59:23.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763652",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861070028\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort_test.cc:\n##########\n@@ -1936,6 +1940,95 @@ TEST_P(TestTableSortIndicesRandom, Sort) {\n   }\n }\n \n+// Ranking Tests\n+//\n+TEST(ArrayRankFunction, Array) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, -3, -42, 5]\");\n+  auto expectedAsc = ArrayFromJSON(uint64(), \"[3, 4, 2, 1, 5]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Ascending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedAsc, actual, /*verbose=*/true);\n+    }\n+  }\n+\n+  auto expectedDesc = ArrayFromJSON(uint64(), \"[3, 2, 4, 5, 1]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Descending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedDesc, actual, /*verbose=*/true);\n+    }\n+  }\n+}\n+\n+TEST(ArrayRankFunction, NullHandling) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, null, null, 2]\");\n+  auto expectedEnd = ArrayFromJSON(uint64(), \"[1, 2, 4, 5, 3]\");\n+  RankOptions optionsEnd(SortOrder::Ascending, NullPlacement::AtEnd, Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualEnd, CallFunction(\"rank\", {arr}, &optionsEnd));\n+  AssertDatumsEqual(expectedEnd, actualEnd, /*verbose=*/true);\n+\n+  auto expectedStart = ArrayFromJSON(uint64(), \"[3, 4, 1, 2, 5]\");\n+  RankOptions optionsStart(SortOrder::Ascending, NullPlacement::AtStart,\n+                           Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualStart, CallFunction(\"rank\", {arr}, &optionsStart));\n+  AssertDatumsEqual(expectedStart, actualStart, /*verbose=*/true);\n+}\n+\n+TEST(ArrayRankFunction, TiebreakHandlingAsc) {\n\nReview Comment:\n   Hmm, according to some examples on the Web, even SQL considers NULLs identical for the purposes of RANK().\n\n\n\n",
                    "created": "2022-04-28T16:03:44.617+0000",
                    "updated": "2022-04-28T16:03:44.617+0000",
                    "started": "2022-04-28T16:03:44.617+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763658",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861059796\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n\nReview Comment:\n   Note that internally you can use `vector_sort_internal.h`, which gives you access to `ArraySortFunc` which - in addition to sorting an array - returns you information about where nulls start and end. This may (or may not) be useful for implementing this function more efficiently.\n\n\n\n",
                    "created": "2022-04-28T16:04:04.482+0000",
                    "updated": "2022-04-28T16:04:04.482+0000",
                    "started": "2022-04-28T16:04:04.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763659",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861073834\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n+\n+    auto out_size = array.length();\n+    ARROW_ASSIGN_OR_RAISE(auto rankings,\n+                          MakeMutableUInt64Array(uint64(), out_size, ctx->memory_pool()));\n+\n+    auto* indices = sortIndices.make_array()->data()->GetValues<uint64_t>(1);\n+    auto out_rankings = rankings->GetMutableValues<uint64_t>(1);\n+    uint64_t rank = 0;\n+    Datum prevValue, currValue;\n+\n+    if (options.tiebreaker == Tiebreaker::Dense) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          ++rank;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::First) {\n+      for (auto i = 0; i < out_size; i++) {\n+        rank = i + 1;\n+        out_rankings[indices[i]] = rank;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Lowest) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          rank = i + 1;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Highest) {\n+      auto currentTieCount = 0;\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+          currentTieCount++;\n+        } else {\n+          currentTieCount = 0;\n+        }\n+        rank = i + 1;\n+\n+        // This can be inefficient when dealing many tied values\n\nReview Comment:\n   That might work here but I *think* gets a little dicey if we later implement null handling that doesn't rank null values at all; in such a case I think we'd have to add an extra compute step to count the number of nulls to know which number to start at before looping in reverse. Definitely an option though.\r\n   \r\n   My other idea was that we could look ahead to the next value instead of the previous one and only commit values when the next value changes.\r\n   \n\n\n\n",
                    "created": "2022-04-28T16:07:49.661+0000",
                    "updated": "2022-04-28T16:07:49.661+0000",
                    "started": "2022-04-28T16:07:49.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763664",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861074691\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort_test.cc:\n##########\n@@ -1936,6 +1940,95 @@ TEST_P(TestTableSortIndicesRandom, Sort) {\n   }\n }\n \n+// Ranking Tests\n+//\n+TEST(ArrayRankFunction, Array) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, -3, -42, 5]\");\n+  auto expectedAsc = ArrayFromJSON(uint64(), \"[3, 4, 2, 1, 5]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Ascending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedAsc, actual, /*verbose=*/true);\n+    }\n+  }\n+\n+  auto expectedDesc = ArrayFromJSON(uint64(), \"[3, 2, 4, 5, 1]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Descending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedDesc, actual, /*verbose=*/true);\n+    }\n+  }\n+}\n+\n+TEST(ArrayRankFunction, NullHandling) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, null, null, 2]\");\n+  auto expectedEnd = ArrayFromJSON(uint64(), \"[1, 2, 4, 5, 3]\");\n+  RankOptions optionsEnd(SortOrder::Ascending, NullPlacement::AtEnd, Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualEnd, CallFunction(\"rank\", {arr}, &optionsEnd));\n+  AssertDatumsEqual(expectedEnd, actualEnd, /*verbose=*/true);\n+\n+  auto expectedStart = ArrayFromJSON(uint64(), \"[3, 4, 1, 2, 5]\");\n+  RankOptions optionsStart(SortOrder::Ascending, NullPlacement::AtStart,\n+                           Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualStart, CallFunction(\"rank\", {arr}, &optionsStart));\n+  AssertDatumsEqual(expectedStart, actualStart, /*verbose=*/true);\n+}\n+\n+TEST(ArrayRankFunction, TiebreakHandlingAsc) {\n\nReview Comment:\n   I haven't implemented the keep equivalent here but the other two are tested in the prior test function. I think I can consolidate that test down here to streamline things\n\n\n\n",
                    "created": "2022-04-28T16:08:44.710+0000",
                    "updated": "2022-04-28T16:08:44.710+0000",
                    "started": "2022-04-28T16:08:44.709+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763668",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861077963\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort_test.cc:\n##########\n@@ -1936,6 +1940,95 @@ TEST_P(TestTableSortIndicesRandom, Sort) {\n   }\n }\n \n+// Ranking Tests\n+//\n+TEST(ArrayRankFunction, Array) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, -3, -42, 5]\");\n+  auto expectedAsc = ArrayFromJSON(uint64(), \"[3, 4, 2, 1, 5]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Ascending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedAsc, actual, /*verbose=*/true);\n+    }\n+  }\n+\n+  auto expectedDesc = ArrayFromJSON(uint64(), \"[3, 2, 4, 5, 1]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Descending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedDesc, actual, /*verbose=*/true);\n+    }\n+  }\n+}\n+\n+TEST(ArrayRankFunction, NullHandling) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, null, null, 2]\");\n+  auto expectedEnd = ArrayFromJSON(uint64(), \"[1, 2, 4, 5, 3]\");\n+  RankOptions optionsEnd(SortOrder::Ascending, NullPlacement::AtEnd, Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualEnd, CallFunction(\"rank\", {arr}, &optionsEnd));\n+  AssertDatumsEqual(expectedEnd, actualEnd, /*verbose=*/true);\n+\n+  auto expectedStart = ArrayFromJSON(uint64(), \"[3, 4, 1, 2, 5]\");\n+  RankOptions optionsStart(SortOrder::Ascending, NullPlacement::AtStart,\n+                           Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualStart, CallFunction(\"rank\", {arr}, &optionsStart));\n+  AssertDatumsEqual(expectedStart, actualStart, /*verbose=*/true);\n+}\n+\n+TEST(ArrayRankFunction, TiebreakHandlingAsc) {\n\nReview Comment:\n   For the matter of Keep, I guess need to think through if we want to leverage the existing NullHandling structure and add \"Keep\" to that or create another one for ranking purposes\n\n\n\n",
                    "created": "2022-04-28T16:11:55.041+0000",
                    "updated": "2022-04-28T16:11:55.041+0000",
                    "started": "2022-04-28T16:11:55.040+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763670",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861081594\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort_test.cc:\n##########\n@@ -1936,6 +1940,95 @@ TEST_P(TestTableSortIndicesRandom, Sort) {\n   }\n }\n \n+// Ranking Tests\n+//\n+TEST(ArrayRankFunction, Array) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, -3, -42, 5]\");\n+  auto expectedAsc = ArrayFromJSON(uint64(), \"[3, 4, 2, 1, 5]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Ascending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedAsc, actual, /*verbose=*/true);\n+    }\n+  }\n+\n+  auto expectedDesc = ArrayFromJSON(uint64(), \"[3, 2, 4, 5, 1]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Descending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedDesc, actual, /*verbose=*/true);\n+    }\n+  }\n+}\n+\n+TEST(ArrayRankFunction, NullHandling) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, null, null, 2]\");\n+  auto expectedEnd = ArrayFromJSON(uint64(), \"[1, 2, 4, 5, 3]\");\n+  RankOptions optionsEnd(SortOrder::Ascending, NullPlacement::AtEnd, Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualEnd, CallFunction(\"rank\", {arr}, &optionsEnd));\n+  AssertDatumsEqual(expectedEnd, actualEnd, /*verbose=*/true);\n+\n+  auto expectedStart = ArrayFromJSON(uint64(), \"[3, 4, 1, 2, 5]\");\n+  RankOptions optionsStart(SortOrder::Ascending, NullPlacement::AtStart,\n+                           Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualStart, CallFunction(\"rank\", {arr}, &optionsStart));\n+  AssertDatumsEqual(expectedStart, actualStart, /*verbose=*/true);\n+}\n+\n+TEST(ArrayRankFunction, TiebreakHandlingAsc) {\n\nReview Comment:\n   Hmm, perhaps we also don't need to implement all possible options at once? :-)\n\n\n\n",
                    "created": "2022-04-28T16:15:55.769+0000",
                    "updated": "2022-04-28T16:15:55.769+0000",
                    "started": "2022-04-28T16:15:55.769+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763677",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861082496\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort.cc:\n##########\n@@ -1909,6 +1909,110 @@ class SelectKUnstableMetaFunction : public MetaFunction {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Rank implementation\n+\n+const FunctionDoc rank_doc(\n+    \"Returns the ranking of an array\",\n+    (\"This function computes a rank of the input array.\\n\"\n+     \"By default, Null values are considered greater than any other value and\\n\"\n+     \"are therefore sorted at the end of the input. For floating-point types,\\n\"\n+     \"NaNs are considered greater than any other non-null value, but smaller\\n\"\n+     \"than null values. The default tiebreaker is to assign ranks in order of\\n\"\n+     \"when ties appear in the input\\n\"\n+     \"\\n\"\n+     \"The handling of nulls, NaNs and tiebreakers can be changed in RankOptions.\"),\n+    {\"input\"}, \"RankOptions\");\n+\n+class RankMetaFunction : public MetaFunction {\n+ public:\n+  RankMetaFunction()\n+      : MetaFunction(\"rank\", Arity::Unary(), &rank_doc, GetDefaultSortOptions()) {}\n+\n+  Result<Datum> ExecuteImpl(const std::vector<Datum>& args,\n+                            const FunctionOptions* options, ExecContext* ctx) const {\n+    const RankOptions& sort_options = static_cast<const RankOptions&>(*options);\n+    switch (args[0].kind()) {\n+      case Datum::ARRAY: {\n+        return Rank(*args[0].make_array(), sort_options, ctx);\n+      } break;\n+      default:\n+        break;\n+    }\n+    return Status::NotImplemented(\n+        \"Unsupported types for rank operation: \"\n+        \"values=\",\n+        args[0].ToString());\n+  }\n+\n+ private:\n+  Result<Datum> Rank(const Array& array, const RankOptions& options,\n+                     ExecContext* ctx) const {\n+    ArraySortOptions array_options(options.order, options.null_placement);\n+\n+    ARROW_ASSIGN_OR_RAISE(auto sortIndices, CallFunction(\"array_sort_indices\", {array},\n+                                                         &array_options, ctx));\n+\n+    auto out_size = array.length();\n+    ARROW_ASSIGN_OR_RAISE(auto rankings,\n+                          MakeMutableUInt64Array(uint64(), out_size, ctx->memory_pool()));\n+\n+    auto* indices = sortIndices.make_array()->data()->GetValues<uint64_t>(1);\n+    auto out_rankings = rankings->GetMutableValues<uint64_t>(1);\n+    uint64_t rank = 0;\n+    Datum prevValue, currValue;\n+\n+    if (options.tiebreaker == Tiebreaker::Dense) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          ++rank;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::First) {\n+      for (auto i = 0; i < out_size; i++) {\n+        rank = i + 1;\n+        out_rankings[indices[i]] = rank;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Lowest) {\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+        } else {\n+          rank = i + 1;\n+        }\n+        out_rankings[indices[i]] = rank;\n+        prevValue = currValue;\n+      }\n+    } else if (options.tiebreaker == Tiebreaker::Highest) {\n+      auto currentTieCount = 0;\n+      for (auto i = 0; i < out_size; i++) {\n+        currValue = array.GetScalar(indices[i]).ValueOrDie();\n+        if (i > 0 && currValue == prevValue) {\n+          currentTieCount++;\n+        } else {\n+          currentTieCount = 0;\n+        }\n+        rank = i + 1;\n+\n+        // This can be inefficient when dealing many tied values\n\nReview Comment:\n   As mentioned in another comment, you can benefit from internal sort APIs which tell you where nulls start and stop, in addition to doing the actual sorting.\n\n\n\n",
                    "created": "2022-04-28T16:16:50.963+0000",
                    "updated": "2022-04-28T16:16:50.963+0000",
                    "started": "2022-04-28T16:16:50.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763679",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861086948\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_sort_test.cc:\n##########\n@@ -1936,6 +1940,95 @@ TEST_P(TestTableSortIndicesRandom, Sort) {\n   }\n }\n \n+// Ranking Tests\n+//\n+TEST(ArrayRankFunction, Array) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, -3, -42, 5]\");\n+  auto expectedAsc = ArrayFromJSON(uint64(), \"[3, 4, 2, 1, 5]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Ascending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedAsc, actual, /*verbose=*/true);\n+    }\n+  }\n+\n+  auto expectedDesc = ArrayFromJSON(uint64(), \"[3, 2, 4, 5, 1]\");\n+  for (auto null_placement : AllNullPlacements()) {\n+    for (auto tiebreaker : AllTiebreakers()) {\n+      RankOptions options(SortOrder::Descending, null_placement, tiebreaker);\n+      ASSERT_OK_AND_ASSIGN(auto actual, CallFunction(\"rank\", {arr}, &options));\n+      AssertDatumsEqual(expectedDesc, actual, /*verbose=*/true);\n+    }\n+  }\n+}\n+\n+TEST(ArrayRankFunction, NullHandling) {\n+  auto arr = ArrayFromJSON(int16(), \"[0, 1, null, null, 2]\");\n+  auto expectedEnd = ArrayFromJSON(uint64(), \"[1, 2, 4, 5, 3]\");\n+  RankOptions optionsEnd(SortOrder::Ascending, NullPlacement::AtEnd, Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualEnd, CallFunction(\"rank\", {arr}, &optionsEnd));\n+  AssertDatumsEqual(expectedEnd, actualEnd, /*verbose=*/true);\n+\n+  auto expectedStart = ArrayFromJSON(uint64(), \"[3, 4, 1, 2, 5]\");\n+  RankOptions optionsStart(SortOrder::Ascending, NullPlacement::AtStart,\n+                           Tiebreaker::First);\n+  ASSERT_OK_AND_ASSIGN(auto actualStart, CallFunction(\"rank\", {arr}, &optionsStart));\n+  AssertDatumsEqual(expectedStart, actualStart, /*verbose=*/true);\n+}\n+\n+TEST(ArrayRankFunction, TiebreakHandlingAsc) {\n\nReview Comment:\n   That's what I am thinking as well - might be worth a separate PR / initiative for the Keep scenario\n\n\n\n",
                    "created": "2022-04-28T16:21:31.398+0000",
                    "updated": "2022-04-28T16:21:31.398+0000",
                    "started": "2022-04-28T16:21:31.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763688",
                    "issueId": "13440455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/worklog/763974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "WillAyd commented on code in PR #12963:\nURL: https://github.com/apache/arrow/pull/12963#discussion_r861425650\n\n\n##########\ncpp/src/arrow/compute/api_vector.h:\n##########\n@@ -174,6 +181,23 @@ class ARROW_EXPORT SelectKOptions : public FunctionOptions {\n   std::vector<SortKey> sort_keys;\n };\n \n+/// \\brief Rank options\n+class ARROW_EXPORT RankOptions : public FunctionOptions {\n+ public:\n+  explicit RankOptions(SortOrder order = SortOrder::Ascending,\n+                       NullPlacement null_placement = NullPlacement::AtEnd,\n+                       Tiebreaker tiebreaker = Tiebreaker::First);\n\nReview Comment:\n   I'm keeping tiebreaker as one word elsewhere throughout so I think this is OK (?) but if not let me know and happy to change universally\n\n\n\n",
                    "created": "2022-04-29T02:28:25.964+0000",
                    "updated": "2022-04-29T02:28:25.964+0000",
                    "started": "2022-04-29T02:28:25.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763974",
                    "issueId": "13440455"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 33600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@186273ea[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@122c934c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2dd427af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b9477aa[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74c97d82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@45b741c4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4952ef82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3183f825[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e19b6fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@71df7f9c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fafb0da[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1c337da[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 33600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 01 13:21:38 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-01T13:21:38.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16234/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-04-19T14:58:39.000+0000",
        "updated": "2022-06-01T19:04:30.000+0000",
        "timeoriginalestimate": null,
        "description": "Didn't see this in the library already so apologies if overlooked, but I think it would be nice to add a compute kernel for ranking. Here is a similar function in pandas:\r\n\r\n[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.rank.html]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 33600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement Rank Kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17524385",
                    "id": "17524385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This would have to be a vector kernel.\r\n\r\nWe may also want a group-by version (looking at the Pandas docs).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-19T15:18:39.318+0000",
                    "updated": "2022-04-19T15:18:39.318+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17524563",
                    "id": "17524563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I'll take a look over the next few days and push something up. Thanks",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-19T19:52:29.384+0000",
                    "updated": "2022-04-19T19:52:29.384+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17526658",
                    "id": "17526658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I pushed up a rough draft for this on GH just to make sure the foundation was right. However, I'm wondering if you think we should mirror what pandas does in cases of ties or pick another default. Pandas interpolates an average for tied rankings by default, which of course is going to change our returned data type. Not sure if we want to stray from the integral return value as a default or instead pick another thing like dense ranking",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-22T19:56:19.853+0000",
                    "updated": "2022-04-22T19:56:19.853+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17526659",
                    "id": "17526659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I think we also need to consider how to handle NULL. In my current design I was thinking we should delegate as much responsibility to the standard sorting behavior, but AFAICT there are only SortOptions to rank NULLs at the start or the end, not necessarily to ignore NULL altogether. If we want to completely remove NULL from being calculated in the ranking algorithm I wonder if we should try and work that up the class hierarchy a bit to to the same thing in general sorting",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-22T19:59:39.493+0000",
                    "updated": "2022-04-22T19:59:39.493+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17526664",
                    "id": "17526664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "We could offer function options for different modes which will also impact the return type. This is what we do for other similar kernels (e.g. quantile I think where you can choose to interpolate and get a float, or not interpolate and get the original data type).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-22T20:10:38.109+0000",
                    "updated": "2022-04-22T20:10:38.109+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17526665",
                    "id": "17526665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Not sure 'ignore nulls' works for sorting in general, how would nulls get compared to other items?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-22T20:11:18.936+0000",
                    "updated": "2022-04-22T20:11:18.936+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17526689",
                    "id": "17526689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I was thinking they wouldn't - the returning array would just give back NULL where NULL was initially provided. You'll see this in the pandas docs as \"na_option\"\r\n\r\n\u00a0\r\n\r\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.rank.html",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=willayd",
                        "name": "willayd",
                        "key": "willayd",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=willayd&avatarId=49036",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=willayd&avatarId=49036",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=willayd&avatarId=49036",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=willayd&avatarId=49036"
                        },
                        "displayName": "Will Ayd",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-04-22T21:29:19.163+0000",
                    "updated": "2022-04-22T21:29:19.163+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17526694",
                    "id": "17526694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Ah, sounds reasonable.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-22T21:48:17.013+0000",
                    "updated": "2022-04-22T21:48:17.013+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13440455/comment/17544907",
                    "id": "17544907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12963\n[https://github.com/apache/arrow/pull/12963]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-06-01T13:21:38.272+0000",
                    "updated": "2022-06-01T13:21:38.272+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z11li0:",
        "customfield_12314139": null
    }
}