{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13344375",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375",
    "key": "ARROW-10812",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12604670",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12604670",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13344354",
                    "key": "ARROW-10810",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344354",
                    "fields": {
                        "summary": "[Rust] Speed up comparison kernels",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10812/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842\n\n\n   This PR creates a new struct `BooleanArray`, that replaces `PrimitiveArray<BooleanType>`, so that we do not have to consider the differences between being bit-packed and non-bit packed.\r\n   \r\n   This difference is causing a performance degradation described on ARROW-10453 and #8837 .\r\n   \r\n   This usage of different logic is already observed in most of our kernels, as the code for byte-width and bit-packed is almost always different, due to how offsets are computed. With this PR, that offset computation no longer depends on bit-packed vs non-bit-packed.\r\n   \r\n   Micro benchmarks (worse to best, statistically insignificant ignored):\r\n   \r\n   |  benchmark | variation |\r\n   |-------------- | -------------- | \r\n   | min nulls 512 | 33.7 | \r\n   | record_batches_to_csv | 23.1 | \r\n   | array_string_from_vec 256 | 5.6 | \r\n   | array_string_from_vec 512 | 5.2 | \r\n   | take bool nulls 512 | 4.9 | \r\n   | cast int32 to int64 512 | 2.5 | \r\n   | equal_512 | 2.3 | \r\n   | filter u8 very low selectivity | 2.2 | \r\n   | array_slice 512 | 2.1 | \r\n   | take bool nulls 1024 | 2.0 | \r\n   | cast int64 to int32 512 | 1.6 | \r\n   | min 512 | 1.6 | \r\n   | take i32 512 | 1.1 | \r\n   | add 512 | 1.1 | \r\n   | array_slice 2048 | 1.0 | \r\n   | length | 1.0 | \r\n   | filter u8 low selectivity | 0.9 | \r\n   | filter u8 high selectivity | 0.9 | \r\n   | array_string_from_vec 128 | 0.9 | \r\n   | cast int32 to float64 512 | 0.9 | \r\n   | cast timestamp_ms to i64 512 | 0.8 | \r\n   | take str null indices 512 | 0.6 | \r\n   | sum 512 | 0.4 | \r\n   | filter context u8 very low selectivity | -0.7 | \r\n   | take i32 1024 | -0.9 | \r\n   | filter context f32 very low selectivity | -0.9 | \r\n   | cast float64 to float32 512 | -1.0 | \r\n   | equal_nulls_512 | -1.0 | \r\n   | cast time32s to time32ms 512 | -1.1 | \r\n   | sort 2^12 | -1.2 | \r\n   | struct_array_from_vec 128 | -1.4 | \r\n   | array_from_vec 256 | -1.4 | \r\n   | array_from_vec 128 | -1.5 | \r\n   | filter context u8 high selectivity | -1.6 | \r\n   | limit 512, 512 | -1.7 | \r\n   | equal_string_nulls_512 | -1.8 | \r\n   | take i32 nulls 1024 | -1.8 | \r\n   | struct_array_from_vec 512 | -1.9 | \r\n   | filter context f32 high selectivity | -2.0 | \r\n   | cast timestamp_ms to timestamp_ns 512 | -2.2 | \r\n   | take i32 nulls 512 | -2.3 | \r\n   | buffer_bit_ops or | -2.4 | \r\n   | array_from_vec 512 | -2.6 | \r\n   | cast float64 to uint64 512 | -2.7 | \r\n   | take str 512 | -2.8 | \r\n   | min nulls string 512 | -3.1 | \r\n   | cast int32 to int32 512 | -3.3 | \r\n   | array_slice 128 | -3.3 | \r\n   | filter context u8 w NULLs very low selectivity | -3.3 | \r\n   | buffer_bit_ops and | -3.4 | \r\n   | struct_array_from_vec 256 | -4.2 | \r\n   | cast int32 to uint32 512 | -4.5 | \r\n   | multiply 512 | -5.2 | \r\n   | equal_string_512 | -5.5 | \r\n   | take str null values null indices 1024 | -6.8 | \r\n   | sum nulls 512 | -13.3 | \r\n   | add_nulls_512 | -17.6 | \r\n   | like_utf8 scalar contains | -17.8 | \r\n   | nlike_utf8 scalar contains | -17.9 | \r\n   | nlike_utf8 scalar complex | -24.6 | \r\n   | like_utf8 scalar complex | -25.2 | \r\n   | cast time64ns to time32s 512 | -42.7 | \r\n   | cast date64 to date32 512 | -49.1 | \r\n   | cast date32 to date64 512 | -50.7 | \r\n   | nlike_utf8 scalar starts with | -51.1 | \r\n   | nlike_utf8 scalar ends with | -55.1 | \r\n   | like_utf8 scalar ends with | -55.5 | \r\n   | like_utf8 scalar starts with | -56.3 | \r\n   | nlike_utf8 scalar equals | -67.8 | \r\n   | like_utf8 scalar equals | -74.2 | \r\n   | eq Float32 | -75.7 | \r\n   | gt_eq Float32 | -76.1 | \r\n   | lt_eq Float32 | -76.5 | \r\n   | not | -77.1 | \r\n   | and | -78.6 | \r\n   | or | -78.7 | \r\n   | lt_eq scalar Float32 | -79.4 | \r\n   | eq scalar Float32 | -82.1 | \r\n   | neq Float32 | -82.1 | \r\n   | lt scalar Float32 | -82.1 | \r\n   | lt Float32 | -82.3 | \r\n   | gt Float32 | -82.4 | \r\n   | gt_eq scalar Float32 | -82.4 | \r\n   | neq scalar Float32 | -82.6 | \r\n   | gt scalar Float32 | -84.7 |\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:22:06.108+0000",
                    "updated": "2020-12-05T21:22:06.108+0000",
                    "started": "2020-12-05T21:22:06.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520560",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-739417902\n\n\n   @Dandandan , I think that this addresses your optimization at #8837, and enables the behavior more generally across the code that uses builders, if I am not mistaken. The benchmark speedups also seem similar to yours.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:23:29.885+0000",
                    "updated": "2020-12-05T21:23:29.885+0000",
                    "started": "2020-12-05T21:23:29.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520561",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-739418040\n\n\n   cc @andygrove , as the performance degradation due to specialization was initially raised by you :)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:24:37.191+0000",
                    "updated": "2020-12-05T21:24:37.191+0000",
                    "started": "2020-12-05T21:24:37.190+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520563",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-739418048\n\n\n   https://issues.apache.org/jira/browse/ARROW-10812\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:24:40.112+0000",
                    "updated": "2020-12-05T21:24:40.112+0000",
                    "started": "2020-12-05T21:24:40.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520564",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-739419870\n\n\n   This is great work \ud83d\udc4c\r\n   \r\n   I think indeed this gets similar results and is a more general approach to this with wins across the board. I was actually also looking at this earlier based on a comment on a PR by you before starting the other PR, but couldn't totally figure out what had to be changed in order for this to work. Are the first benchmark results just noise?\r\n   \r\n   I think after this, there are likely some remaining performance differences related to overhead of `append` and related functions which does some additional checks/bookkeeping, but I think we can look at that in follow-up work. Maybe we can think of similar APIs as used in `Vec`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:42:44.651+0000",
                    "updated": "2020-12-05T21:42:44.651+0000",
                    "started": "2020-12-05T21:42:44.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520570",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r536898750\n\n\n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n\nReview comment:\n       Would it be possible/better to have one for slices instead of array?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:47:58.093+0000",
                    "updated": "2020-12-05T21:47:58.093+0000",
                    "started": "2020-12-05T21:47:58.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520571",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r536899113\n\n\n\n##########\nFile path: rust/arrow/src/array/equal_json.rs\n##########\n@@ -49,6 +49,20 @@ impl<T: ArrowPrimitiveType> JsonEqual for PrimitiveArray<T> {\n     }\n }\n \n+/// Implement array equals for numeric type\n+impl JsonEqual for BooleanArray {\n+    fn equals_json(&self, json: &[&Value]) -> bool {\n+        if self.len() != json.len() {\n+            return false;\n+        }\n+\n+        (0..self.len()).all(|i| match json[i] {\n\nReview comment:\n       Could be `self.len() == json.len() && (0..self.len()....`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:50:37.946+0000",
                    "updated": "2020-12-05T21:50:37.946+0000",
                    "started": "2020-12-05T21:50:37.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520574",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r536899713\n\n\n\n##########\nFile path: rust/arrow/src/datatypes.rs\n##########\n@@ -219,9 +218,9 @@ pub trait ArrowPrimitiveType: 'static {\n     /// the corresponding Arrow data type of this primitive type.\n     const DATA_TYPE: DataType;\n \n-    /// Returns the bit width of this primitive type.\n-    fn get_bit_width() -> usize {\n-        size_of::<Self::Native>() * 8\n+    /// Returns the byte width of this primitive type.\n+    fn get_byte_width() -> usize {\n+        size_of::<Self::Native>()\n\nReview comment:\n       I like this change \ud83d\udc4d \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T21:54:41.630+0000",
                    "updated": "2020-12-05T21:54:41.630+0000",
                    "started": "2020-12-05T21:54:41.629+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520575",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r536898750\n\n\n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n\nReview comment:\n       Would it be possible/better to have one for slices instead of Vec?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T22:03:59.197+0000",
                    "updated": "2020-12-05T22:03:59.197+0000",
                    "started": "2020-12-05T22:03:59.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520577",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r536938511\n\n\n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n\nReview comment:\n       I tried to keep it the same to how all the other ones are, however, I agree with you that we should change them. Do you think we could make it on a separate PR, where we apply it to all of them?\r\n   \r\n   Note also that in general it is preferable to use `From<Iterator>`, as we avoid a double allocation (`Vec` + `Buffer`)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T02:38:04.143+0000",
                    "updated": "2020-12-06T02:38:04.143+0000",
                    "started": "2020-12-06T02:38:04.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520594",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r536947155\n\n\n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n\nReview comment:\n       I think we could do that in a separate PR!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:44:43.727+0000",
                    "updated": "2020-12-06T03:44:43.727+0000",
                    "started": "2020-12-06T03:44:43.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520603",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/520606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r536947859\n\n\n\n##########\nFile path: rust/arrow/src/datatypes.rs\n##########\n@@ -219,9 +218,9 @@ pub trait ArrowPrimitiveType: 'static {\n     /// the corresponding Arrow data type of this primitive type.\n     const DATA_TYPE: DataType;\n \n-    /// Returns the bit width of this primitive type.\n-    fn get_bit_width() -> usize {\n-        size_of::<Self::Native>() * 8\n+    /// Returns the byte width of this primitive type.\n+    fn get_byte_width() -> usize {\n+        size_of::<Self::Native>()\n\nReview comment:\n       Yeah, this `* 8` and `/ 8` was always a bit funny to me, mostly because I was not sure whether the compiler was able to realize about it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:49:55.786+0000",
                    "updated": "2020-12-06T03:49:55.786+0000",
                    "started": "2020-12-06T03:49:55.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520606",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/521298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r537673166\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -280,17 +272,13 @@ impl<T: ArrowPrimitiveType> BufferBuilderTrait<T> for BufferBuilder<T> {\n     }\n \n     fn capacity(&self) -> usize {\n-        let bit_capacity = self.buffer.capacity() * 8;\n-        bit_capacity / T::get_bit_width()\n+        let bit_capacity = self.buffer.capacity();\n+        bit_capacity / T::get_byte_width()\n\nReview comment:\n       ```suggestion\r\n           let byte_capacity = self.buffer.capacity();\r\n           byte_capacity / T::get_byte_width()\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T17:06:14.830+0000",
                    "updated": "2020-12-07T17:06:14.830+0000",
                    "started": "2020-12-07T17:06:14.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521298",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/521303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r537682366\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -222,6 +220,72 @@ impl Default for SortOptions {\n     }\n }\n \n+/// Sort primitive values\n+fn sort_boolean(\n+    values: &ArrayRef,\n+    value_indices: Vec<u32>,\n+    null_indices: Vec<u32>,\n+    nan_indices: Vec<u32>,\n\nReview comment:\n       This parameter and the nan handling below (`nans`, `nans_len`, `partial_cmp` instead of `cmp`) could be removed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T17:18:30.373+0000",
                    "updated": "2020-12-07T17:18:30.373+0000",
                    "started": "2020-12-07T17:18:30.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521303",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/521333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-740112706\n\n\n   Needs a `fmt` :) \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T18:57:16.350+0000",
                    "updated": "2020-12-07T18:57:16.350+0000",
                    "started": "2020-12-07T18:57:16.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521333",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/522664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-742448903\n\n\n   @alamb @andygrove @nevi-me \r\n   \r\n   If you have time would be nice to have this PR reviewed and https://github.com/apache/arrow/pull/8863 both bringing ~10-20% perf. improvements to queries in datafusion.\r\n   \r\n   Would like to do some more profiling this weekend to see find / prioritize performance improvements, one might be implementing vectorized hashing to speed up hash joins / aggregates but probably there is more low hanging fruit.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T11:01:33.307+0000",
                    "updated": "2020-12-10T11:01:33.307+0000",
                    "started": "2020-12-10T11:01:33.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522664",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/522693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan edited a comment on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-742448903\n\n\n   @alamb @andygrove @nevi-me \r\n   \r\n   If you have time would be nice to have this PR reviewed and https://github.com/apache/arrow/pull/8863 both bringing ~10-20% perf. improvements to queries in DataFusion.\r\n   \r\n   Would like to do some more profiling this weekend to see find / prioritize performance improvements, one might be implementing vectorized hashing to speed up hash joins / aggregates but probably there is more low hanging fruit.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T12:24:30.718+0000",
                    "updated": "2020-12-10T12:24:30.718+0000",
                    "started": "2020-12-10T12:24:30.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522693",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/522773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#issuecomment-742607866\n\n\n   I will review it carefully shortly\n   \n   On Thu, Dec 10, 2020 at 9:53 AM Andy Grove <notifications@github.com> wrote:\n   \n   > *@andygrove* approved this pull request.\n   >\n   > I haven't had time to review this in detail (I only really have time at\n   > weekends for that, and that time is lilmited at the moment) but I agree\n   > with the direction of this and I don't want to hold things up. I see that\n   > @Dandandan <https://github.com/Dandandan> has already reviewed this so I\n   > am good with merging this.\n   >\n   > \u2014\n   > You are receiving this because you were mentioned.\n   > Reply to this email directly, view it on GitHub\n   > <https://github.com/apache/arrow/pull/8842#pullrequestreview-549275081>,\n   > or unsubscribe\n   > <https://github.com/notifications/unsubscribe-auth/AADXZMPWZI2CJ2OIOTLPJDLSUDOFFANCNFSM4UO2EIRQ>\n   > .\n   >\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T15:53:02.524+0000",
                    "updated": "2020-12-10T15:53:02.524+0000",
                    "started": "2020-12-10T15:53:02.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522773",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/522781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r540295695\n\n\n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n+    fn from(data: Vec<Option<bool>>) -> Self {\n+        let data_len = data.len();\n+        let num_byte = bit_util::ceil(data_len, 8);\n+        let mut null_buf = MutableBuffer::new_null(data.len());\n+        let mut val_buf = MutableBuffer::new(num_byte).with_bitset(num_byte, false);\n+\n+        {\n+            let null_slice = null_buf.data_mut();\n+            let val_slice = val_buf.data_mut();\n+\n+            for (i, v) in data.iter().enumerate() {\n+                if let Some(b) = v {\n+                    bit_util::set_bit(null_slice, i);\n+                    if *b {\n+                        bit_util::set_bit(val_slice, i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data_len)\n+            .add_buffer(val_buf.freeze())\n+            .null_bit_buffer(null_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<ArrayDataRef> for BooleanArray {\n+    fn from(data: ArrayDataRef) -> Self {\n+        assert_eq!(\n+            data.buffers().len(),\n+            1,\n+            \"BooleanArray data should contain a single buffer only (values buffer)\"\n+        );\n+        let raw_values = data.buffers()[0].raw_data();\n+        assert!(\n+            memory::is_aligned::<u8>(raw_values, mem::align_of::<bool>()),\n+            \"memory is not aligned\"\n+        );\n+        Self {\n+            data,\n+            raw_values: RawPtrBox::new(raw_values as *const u8),\n+        }\n+    }\n+}\n+\n+impl<'a> IntoIterator for &'a BooleanArray {\n+    type Item = Option<bool>;\n+    type IntoIter = BooleanIter<'a>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        BooleanIter::<'a>::new(self)\n+    }\n+}\n+\n+impl<'a> BooleanArray {\n+    /// constructs a new iterator\n+    pub fn iter(&'a self) -> BooleanIter<'a> {\n+        BooleanIter::<'a>::new(&self)\n+    }\n+}\n+\n+impl<Ptr: Borrow<Option<bool>>> FromIterator<Ptr> for BooleanArray {\n+    fn from_iter<I: IntoIterator<Item = Ptr>>(iter: I) -> Self {\n\nReview comment:\n       It seems to me that this implementation effectively is relying on `size_hint` to return the precise size of the iterator otherwise it will crash (maybe) -- but I think the intention of `size_hint` is, as the name suggests, a hint.\r\n   \r\n   I may be misreading the code, but if it is possible to crash / do some undefined behavior if the size_hint is not accurate, I suggest we file a ticket (I can do so, but I want to see if I am mis reading this code first) and try and fix that before 3.0.0 \n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n+    fn from(data: Vec<Option<bool>>) -> Self {\n+        let data_len = data.len();\n\nReview comment:\n       I wonder if we can reuse the implementation below of `From` for interators here -- like (untested) `Self::from(data.into_iter())` and avoid what looks like some code duplication\n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n+    fn from(data: Vec<Option<bool>>) -> Self {\n+        let data_len = data.len();\n+        let num_byte = bit_util::ceil(data_len, 8);\n+        let mut null_buf = MutableBuffer::new_null(data.len());\n+        let mut val_buf = MutableBuffer::new(num_byte).with_bitset(num_byte, false);\n+\n+        {\n+            let null_slice = null_buf.data_mut();\n+            let val_slice = val_buf.data_mut();\n+\n+            for (i, v) in data.iter().enumerate() {\n+                if let Some(b) = v {\n+                    bit_util::set_bit(null_slice, i);\n+                    if *b {\n+                        bit_util::set_bit(val_slice, i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data_len)\n+            .add_buffer(val_buf.freeze())\n+            .null_bit_buffer(null_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<ArrayDataRef> for BooleanArray {\n+    fn from(data: ArrayDataRef) -> Self {\n+        assert_eq!(\n+            data.buffers().len(),\n+            1,\n+            \"BooleanArray data should contain a single buffer only (values buffer)\"\n+        );\n+        let raw_values = data.buffers()[0].raw_data();\n+        assert!(\n+            memory::is_aligned::<u8>(raw_values, mem::align_of::<bool>()),\n+            \"memory is not aligned\"\n+        );\n+        Self {\n+            data,\n+            raw_values: RawPtrBox::new(raw_values as *const u8),\n+        }\n+    }\n+}\n+\n+impl<'a> IntoIterator for &'a BooleanArray {\n+    type Item = Option<bool>;\n+    type IntoIter = BooleanIter<'a>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        BooleanIter::<'a>::new(self)\n+    }\n+}\n+\n+impl<'a> BooleanArray {\n+    /// constructs a new iterator\n+    pub fn iter(&'a self) -> BooleanIter<'a> {\n+        BooleanIter::<'a>::new(&self)\n+    }\n+}\n+\n+impl<Ptr: Borrow<Option<bool>>> FromIterator<Ptr> for BooleanArray {\n+    fn from_iter<I: IntoIterator<Item = Ptr>>(iter: I) -> Self {\n+        let iter = iter.into_iter();\n+        let (_, data_len) = iter.size_hint();\n+        let data_len = data_len.expect(\"Iterator must be sized\"); // panic if no upper bound.\n+\n+        let num_bytes = bit_util::ceil(data_len, 8);\n+        let mut null_buf = MutableBuffer::new(num_bytes).with_bitset(num_bytes, false);\n+        let mut val_buf = MutableBuffer::new(num_bytes).with_bitset(num_bytes, false);\n+\n+        let data = unsafe {\n+            std::slice::from_raw_parts_mut(val_buf.raw_data_mut(), val_buf.capacity())\n+        };\n+\n+        let null_slice = null_buf.data_mut();\n+        iter.enumerate().for_each(|(i, item)| {\n+            if let Some(a) = item.borrow() {\n+                bit_util::set_bit(null_slice, i);\n+                if *a {\n+                    bit_util::set_bit(data, i);\n+                }\n+            }\n+        });\n+\n+        let data = ArrayData::new(\n+            DataType::Boolean,\n+            data_len,\n+            None,\n+            Some(null_buf.freeze()),\n+            0,\n+            vec![val_buf.freeze()],\n+            vec![],\n+        );\n+        BooleanArray::from(Arc::new(data))\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n\nReview comment:\n       It would probably be good to have a test for creating BooleanArrays from iterators it it remains a separate codepath\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T16:22:14.970+0000",
                    "updated": "2020-12-10T16:22:14.970+0000",
                    "started": "2020-12-10T16:22:14.969+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522781",
                    "issueId": "13344375"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/worklog/522795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8842:\nURL: https://github.com/apache/arrow/pull/8842#discussion_r540338798\n\n\n\n##########\nFile path: rust/arrow/src/array/array_boolean.rs\n##########\n@@ -0,0 +1,331 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::borrow::Borrow;\n+use std::iter::{FromIterator, IntoIterator};\n+use std::mem;\n+use std::{any::Any, fmt};\n+use std::{convert::From, sync::Arc};\n+\n+use super::*;\n+use super::{array::print_long_array, raw_pointer::RawPtrBox};\n+use crate::buffer::{Buffer, MutableBuffer};\n+use crate::memory;\n+use crate::util::bit_util;\n+\n+/// Array of bools\n+pub struct BooleanArray {\n+    data: ArrayDataRef,\n+    /// Pointer to the value array. The lifetime of this must be <= to the value buffer\n+    /// stored in `data`, so it's safe to store.\n+    raw_values: RawPtrBox<u8>,\n+}\n+\n+impl fmt::Debug for BooleanArray {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"BooleanArray\\n[\\n\")?;\n+        print_long_array(self, f, |array, index, f| {\n+            fmt::Debug::fmt(&array.value(index), f)\n+        })?;\n+        write!(f, \"]\")\n+    }\n+}\n+\n+impl BooleanArray {\n+    /// Returns the length of this array.\n+    pub fn len(&self) -> usize {\n+        self.data.len()\n+    }\n+\n+    /// Returns whether this array is empty.\n+    pub fn is_empty(&self) -> bool {\n+        self.data.is_empty()\n+    }\n+\n+    /// Returns a raw pointer to the values of this array.\n+    pub fn raw_values(&self) -> *const u8 {\n+        unsafe { self.raw_values.get().add(self.data.offset()) }\n+    }\n+\n+    /// Returns a slice for the given offset and length\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value_slice(&self, offset: usize, len: usize) -> &[u8] {\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().add(offset), len) };\n+        &raw[..]\n+    }\n+\n+    // Returns a new boolean array builder\n+    pub fn builder(capacity: usize) -> BooleanBuilder {\n+        BooleanBuilder::new(capacity)\n+    }\n+\n+    /// Returns a `Buffer` holding all the values of this array.\n+    ///\n+    /// Note this doesn't take the offset of this array into account.\n+    pub fn values(&self) -> Buffer {\n+        self.data.buffers()[0].clone()\n+    }\n+\n+    /// Returns the boolean value at index `i`.\n+    ///\n+    /// Note this doesn't do any bound checking, for performance reason.\n+    pub fn value(&self, i: usize) -> bool {\n+        let offset = i + self.offset();\n+        unsafe { bit_util::get_bit_raw(self.raw_values.get() as *const u8, offset) }\n+    }\n+}\n+\n+impl Array for BooleanArray {\n+    fn as_any(&self) -> &Any {\n+        self\n+    }\n+\n+    fn data(&self) -> ArrayDataRef {\n+        self.data.clone()\n+    }\n+\n+    fn data_ref(&self) -> &ArrayDataRef {\n+        &self.data\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied by the buffers owned by this [BooleanArray].\n+    fn get_buffer_memory_size(&self) -> usize {\n+        self.data.get_buffer_memory_size()\n+    }\n+\n+    /// Returns the total number of bytes of memory occupied physically by this [BooleanArray].\n+    fn get_array_memory_size(&self) -> usize {\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n+    }\n+}\n+\n+impl From<Vec<bool>> for BooleanArray {\n+    fn from(data: Vec<bool>) -> Self {\n+        let mut mut_buf = MutableBuffer::new_null(data.len());\n+        {\n+            let mut_slice = mut_buf.data_mut();\n+            for (i, b) in data.iter().enumerate() {\n+                if *b {\n+                    bit_util::set_bit(mut_slice, i);\n+                }\n+            }\n+        }\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data.len())\n+            .add_buffer(mut_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<Vec<Option<bool>>> for BooleanArray {\n+    fn from(data: Vec<Option<bool>>) -> Self {\n+        let data_len = data.len();\n+        let num_byte = bit_util::ceil(data_len, 8);\n+        let mut null_buf = MutableBuffer::new_null(data.len());\n+        let mut val_buf = MutableBuffer::new(num_byte).with_bitset(num_byte, false);\n+\n+        {\n+            let null_slice = null_buf.data_mut();\n+            let val_slice = val_buf.data_mut();\n+\n+            for (i, v) in data.iter().enumerate() {\n+                if let Some(b) = v {\n+                    bit_util::set_bit(null_slice, i);\n+                    if *b {\n+                        bit_util::set_bit(val_slice, i);\n+                    }\n+                }\n+            }\n+        }\n+\n+        let array_data = ArrayData::builder(DataType::Boolean)\n+            .len(data_len)\n+            .add_buffer(val_buf.freeze())\n+            .null_bit_buffer(null_buf.freeze())\n+            .build();\n+        BooleanArray::from(array_data)\n+    }\n+}\n+\n+impl From<ArrayDataRef> for BooleanArray {\n+    fn from(data: ArrayDataRef) -> Self {\n+        assert_eq!(\n+            data.buffers().len(),\n+            1,\n+            \"BooleanArray data should contain a single buffer only (values buffer)\"\n+        );\n+        let raw_values = data.buffers()[0].raw_data();\n+        assert!(\n+            memory::is_aligned::<u8>(raw_values, mem::align_of::<bool>()),\n+            \"memory is not aligned\"\n+        );\n+        Self {\n+            data,\n+            raw_values: RawPtrBox::new(raw_values as *const u8),\n+        }\n+    }\n+}\n+\n+impl<'a> IntoIterator for &'a BooleanArray {\n+    type Item = Option<bool>;\n+    type IntoIter = BooleanIter<'a>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        BooleanIter::<'a>::new(self)\n+    }\n+}\n+\n+impl<'a> BooleanArray {\n+    /// constructs a new iterator\n+    pub fn iter(&'a self) -> BooleanIter<'a> {\n+        BooleanIter::<'a>::new(&self)\n+    }\n+}\n+\n+impl<Ptr: Borrow<Option<bool>>> FromIterator<Ptr> for BooleanArray {\n+    fn from_iter<I: IntoIterator<Item = Ptr>>(iter: I) -> Self {\n\nReview comment:\n       I agree. \r\n   \r\n   This was based on the implementation for the primitive types, that also does that. I made this decision on purpose at the time because rust does not offer a \"From<FixedSizediter>\" type thing afaik.\r\n   \r\n   However, in retrospect, we could remove this and instead allow the `Mutable` to grow (there is no reason not to since there will be a bound check anyways).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T17:01:25.058+0000",
                    "updated": "2020-12-10T17:01:25.058+0000",
                    "started": "2020-12-10T17:01:25.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522795",
                    "issueId": "13344375"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1b40fc9f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f462216[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42392eb4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3c11f277[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d2115bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3fdd5b8d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@349a8e4c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@72b50e2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62c20171[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@37962f97[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@571e3fc7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@a6fc986[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Dec 11 04:40:24 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-11T04:40:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10812/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-12-05T20:00:34.000+0000",
        "updated": "2020-12-12T16:58:51.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Make BooleanArray not a PrimitiveArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344375/comment/17247627",
                    "id": "17247627",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 8842\n[https://github.com/apache/arrow/pull/8842]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-12-11T04:40:24.516+0000",
                    "updated": "2020-12-11T04:40:24.516+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0l8dc:",
        "customfield_12314139": null
    }
}