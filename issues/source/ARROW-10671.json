{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13341875",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875",
    "key": "ARROW-10671",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "design",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Keerat+Singh",
            "name": "Keerat Singh",
            "key": "keerat singh",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=keerat+singh&avatarId=44038",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=keerat+singh&avatarId=44038",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=keerat+singh&avatarId=44038",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=keerat+singh&avatarId=44038"
            },
            "displayName": "Keerat Singh",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=Keerat+Singh",
            "name": "Keerat Singh",
            "key": "keerat singh",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=keerat+singh&avatarId=44038",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=keerat+singh&avatarId=44038",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=keerat+singh&avatarId=44038",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=keerat+singh&avatarId=44038"
            },
            "displayName": "Keerat Singh",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10671/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/517154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh opened a new pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780\n\n\n   - This is a POC for the proposed design [Link](https://docs.google.com/document/d/187DlGpIpOUPGhWvXVQEq0mXw_hdWjzzOuZp0p5qzBp0/edit?usp=sharing)\r\n   - This POC only add the retry capability to ListFlights for now, once we have agreement on the design, changes will be made to the other Flight APIs as well to have the retry capability.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T19:38:32.587+0000",
                    "updated": "2020-11-26T19:38:32.587+0000",
                    "started": "2020-11-26T19:38:32.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517154",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/517156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-734457340\n\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   Could you open an issue for this pull request on JIRA?\n   https://issues.apache.org/jira/browse/ARROW\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T19:46:39.373+0000",
                    "updated": "2020-11-26T19:46:39.373+0000",
                    "started": "2020-11-26T19:46:39.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517156",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/517935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#discussion_r532590005\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -87,6 +89,7 @@\n   private final MethodDescriptor<ArrowMessage, Flight.PutResult> doPutDescriptor;\n   private final MethodDescriptor<ArrowMessage, ArrowMessage> doExchangeDescriptor;\n   private final List<FlightClientMiddleware.Factory> middleware;\n+  private boolean retryFlightCall = false;\n\nReview comment:\n       Let's name this something more specifc (`retryOnUnauthorized` perhaps)\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -388,6 +389,57 @@ public ExchangeReaderWriter doExchange(FlightDescriptor descriptor, CallOption..\n     }\n   }\n \n+  /**\n+   * Wrapper class to wrap the iterator and handle auth failures and retry.\n+   * @param <T> The type of iterator.\n+   */\n+  public static class WrappedFlightIterator<T> implements Iterator<T> {\n+    final Supplier<Iterator<T>> supplier;\n+    final Iterator<T> itr;\n+    final boolean enableRetry;\n+\n+    /**\n+     * WrappedFlightIterator constructor.\n+     * @param supplier The iterator supplier.\n+     * @param enableRetry Retry if first call fails.\n+     */\n+    public WrappedFlightIterator(Supplier<Iterator<T>> supplier, boolean enableRetry) {\n+      this.supplier = supplier;\n+      this.itr = supplier.get();\n+      this.enableRetry = enableRetry;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      try {\n+        return itr.hasNext();\n+      } catch (StatusRuntimeException e) {\n+        if (enableRetry && e.getStatus().getCode() == Status.Code.UNAUTHENTICATED) {\n+          // TODO: Retry Iterator from the last known position.\n\nReview comment:\n       I _believe_ you don't have to worry about this since you will either get the first result or UNAUTHENTICATED. (Or else, you'd have a very odd server that explicitly sends an UNAUTHENTICATED after giving you results.)\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -388,6 +389,57 @@ public ExchangeReaderWriter doExchange(FlightDescriptor descriptor, CallOption..\n     }\n   }\n \n+  /**\n+   * Wrapper class to wrap the iterator and handle auth failures and retry.\n+   * @param <T> The type of iterator.\n+   */\n+  public static class WrappedFlightIterator<T> implements Iterator<T> {\n+    final Supplier<Iterator<T>> supplier;\n+    final Iterator<T> itr;\n+    final boolean enableRetry;\n+\n+    /**\n+     * WrappedFlightIterator constructor.\n+     * @param supplier The iterator supplier.\n+     * @param enableRetry Retry if first call fails.\n+     */\n+    public WrappedFlightIterator(Supplier<Iterator<T>> supplier, boolean enableRetry) {\n+      this.supplier = supplier;\n+      this.itr = supplier.get();\n+      this.enableRetry = enableRetry;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      try {\n+        return itr.hasNext();\n+      } catch (StatusRuntimeException e) {\n+        if (enableRetry && e.getStatus().getCode() == Status.Code.UNAUTHENTICATED) {\n+          // TODO: Retry Iterator from the last known position.\n+          // TODO: Log the retry explicitly stating the token authentication failed and retrying\n+          // the failed operation.\n+          return supplier.get().hasNext();\n\nReview comment:\n       This should update `this.itr` so that subsequent calls use the new call.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/grpc/CredentialCallOption.java\n##########\n@@ -28,7 +28,11 @@\n  * Method option for supplying credentials to method calls.\n  */\n public class CredentialCallOption implements CallOptions.GrpcCallOption {\n-  private final Consumer<CallHeaders> credentialWriter;\n+  public Consumer<CallHeaders> getCredentialWriter() {\n\nReview comment:\n       nit: can we keep getters after fields/constructor?\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -388,6 +389,57 @@ public ExchangeReaderWriter doExchange(FlightDescriptor descriptor, CallOption..\n     }\n   }\n \n+  /**\n+   * Wrapper class to wrap the iterator and handle auth failures and retry.\n+   * @param <T> The type of iterator.\n+   */\n+  public static class WrappedFlightIterator<T> implements Iterator<T> {\n\nReview comment:\n       A general comment in the interests of code reuse; you may be better off implementing a generic StreamObserver<T> which can wrap any gRPC call. You'll have to change FlightClient to always use the async gRPC stub instead of the blocking stub, but then you can handle retries for any gRPC call without having to write special-purpose wrappers for each call.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/auth2/ClientIncomingAuthHeaderMiddleware.java\n##########\n@@ -34,27 +34,29 @@\n    */\n   public static class Factory implements FlightClientMiddleware.Factory {\n\nReview comment:\n       This is what I intended in the doc - thank you!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-30T13:27:09.703+0000",
                    "updated": "2020-11-30T13:27:09.703+0000",
                    "started": "2020-11-30T13:27:09.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517935",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/519240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh commented on a change in pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#discussion_r534469821\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -388,6 +389,57 @@ public ExchangeReaderWriter doExchange(FlightDescriptor descriptor, CallOption..\n     }\n   }\n \n+  /**\n+   * Wrapper class to wrap the iterator and handle auth failures and retry.\n+   * @param <T> The type of iterator.\n+   */\n+  public static class WrappedFlightIterator<T> implements Iterator<T> {\n\nReview comment:\n       @lidavidm Thank you for your feedback\r\n   \r\n   I have pushed a PS with the suggested changes.\r\n   \r\n   I do currently have a blocking call [[link]](https://github.com/apache/arrow/pull/8780/commits/2fc2971979a1fa93346948d2da9cba91a8399c43#diff-5f196a1c597e5a8d9c3cd835dae4db594b6204cb2d681c494d8ed3906cf47478R47) on the API calls that return an Iterable, like listFlights and listActions, as we need to have the iterable populated before we return it to the FlightClient, if not then we are back to the same approach using a wrapped iterator.\r\n   \r\n   While the changes latest PS `doClientCall ` only caters to API calls that return an iterable/iterator, the next step is to make them generic for calls like `getInfo, getSchema`\r\n   Before I go ahead and do that, I wanted to confirm if this is what you had in mind when you made the suggestions above, regarding a generic StreamObserver.\r\n   \r\n   Other options that I had in mind were to pass the functional interfaces to pass the `ApiCallObserver` and have it retry the API call `onError`, in that case, we would not need to block `doClientCall` until the `ApiCallObserver` completes as the API call would be retried asynchronously when the Observer encounters an error.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-02T20:46:00.384+0000",
                    "updated": "2020-12-02T20:46:00.384+0000",
                    "started": "2020-12-02T20:46:00.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519240",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/519871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#discussion_r535624785\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -388,6 +389,57 @@ public ExchangeReaderWriter doExchange(FlightDescriptor descriptor, CallOption..\n     }\n   }\n \n+  /**\n+   * Wrapper class to wrap the iterator and handle auth failures and retry.\n+   * @param <T> The type of iterator.\n+   */\n+  public static class WrappedFlightIterator<T> implements Iterator<T> {\n\nReview comment:\n       Sorry - let me clarify. What I mean is that gRPC offers 3 types of clients in Java: a blocking client, async client, and a \"generic\" client. This last client offers a unified interface for all types of calls: it accepts a StreamObserver which gets called with data from the server and it is given a StreamObserver to send data to the server. So if you were to rewrite all gRPC calls in terms of this last type of client, then you could implement a single StreamObserver wrapper that handles retries for all calls.\r\n   \r\n   Not a requirement - just offering a suggestion to avoid having to implement lots of single-purpose retries. It would take a decent amount of refactoring.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T21:12:38.183+0000",
                    "updated": "2020-12-03T21:12:38.183+0000",
                    "started": "2020-12-03T21:12:38.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519871",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/519878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#discussion_r535635203\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/ClientApiCallWrapper.java\n##########\n@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing an API calls on the FlightServer.\n+ */\n+public class ClientApiCallWrapper {\n+\n+  /**\n+   * Execute client call using the Stream Observer ApiCallObserver.\n+   * @param apiCall Function call to execute.\n+   * @param <T> Type of the values in the stream.\n+   * @return An iterable of type T.\n+   */\n+  private static <T> Iterable<T> doClientCall(Consumer<ApiCallObserver<T>> apiCall) {\n+    final ApiCallObserver<T> observer = new ApiCallObserver<>();\n+    try {\n+      apiCall.accept(observer);\n+      while (!observer.completed.get()) {/* Wait for results */}\n\nReview comment:\n       Can we use a condition variable instead of busy-waiting?\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/ClientApiCallWrapper.java\n##########\n@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing an API calls on the FlightServer.\n+ */\n+public class ClientApiCallWrapper {\n+\n+  /**\n+   * Execute client call using the Stream Observer ApiCallObserver.\n\nReview comment:\n       nit: more specifically, this converts an async callback-based call into a synchronous iterator\n\n##########\nFile path: java/flight/flight-core/src/test/java/org/apache/arrow/flight/TestRetryWithExpiredToken.java\n##########\n@@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import org.apache.arrow.flight.auth2.Auth2Constants;\n+import org.apache.arrow.flight.auth2.AuthUtilities;\n+import org.apache.arrow.flight.auth2.BasicCallHeaderAuthenticator;\n+import org.apache.arrow.flight.auth2.BearerTokenAuthenticator;\n+import org.apache.arrow.flight.auth2.CallHeaderAuthenticator;\n+import org.apache.arrow.flight.impl.Flight;\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.util.AutoCloseables;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.Field;\n+import org.apache.arrow.vector.types.pojo.Schema;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+\n+public class TestRetryWithExpiredToken {\n+\n+  private static final String USERNAME_1 = \"flight1\";\n+  private static final String PASSWORD_1 = \"woohoo1\";\n+  private BufferAllocator allocator;\n+  private FlightServer server;\n+  private FlightClient client;\n+  private FlightClient client2;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+    startServerAndClient();\n+  }\n+\n+  private FlightProducer getFlightProducer() {\n+    return new NoOpFlightProducer() {\n+      @Override\n+      public void listFlights(CallContext context, Criteria criteria,\n+                              StreamListener<FlightInfo> listener) {\n+        if (criteria.getExpression().length > 0) {\n+          // Don't send anything if criteria are set\n+          listener.onCompleted();\n+        }\n+        try {\n+          listener.onNext(new FlightInfo(Flight.FlightInfo.newBuilder()\n+                  .setFlightDescriptor(Flight.FlightDescriptor.newBuilder()\n+                          .setType(Flight.FlightDescriptor.DescriptorType.CMD)\n+                          .setCmd(ByteString.copyFrom(\"flight1\", Charsets.UTF_8)))\n+                  .build()));\n+        } catch (URISyntaxException e) {\n+          listener.onError(e);\n+          return;\n+        }\n+        listener.onCompleted();\n+      }\n+\n+      @Override\n+      public void listActions(CallContext context,\n+                              StreamListener<ActionType> listener) {\n+        listener.onNext(new ActionType(Flight.ActionType.newBuilder()\n+                .setDescription(\"action description1\")\n+                .setType(\"action type1\")\n+                .build()));\n+        listener.onNext(new ActionType(Flight.ActionType.newBuilder()\n+                .setDescription(\"action description2\")\n+                .setType(\"action type2\")\n+                .build()));\n+        listener.onCompleted();\n+      }\n+\n+      @Override\n+      public void doAction(CallContext context, Action action,\n+                           StreamListener<Result> listener) {\n+        listener.onNext(new Result(\"action1\".getBytes(Charsets.UTF_8)));\n+        listener.onNext(new Result(\"action2\".getBytes(Charsets.UTF_8)));\n+        listener.onCompleted();\n+      }\n+\n+      @Override\n+      public void getStream(CallContext context, Ticket ticket, ServerStreamListener listener) {\n+        if (!context.peerIdentity().equals(USERNAME_1)) {\n+          listener.error(new IllegalArgumentException(\"Invalid username\"));\n+          return;\n+        }\n+        final Schema pojoSchema = new Schema(ImmutableList.of(Field.nullable(\"a\",\n+                Types.MinorType.BIGINT.getType())));\n+        try (VectorSchemaRoot root = VectorSchemaRoot.create(pojoSchema, allocator)) {\n+          listener.start(root);\n+          root.allocateNew();\n+          root.setRowCount(4095);\n+          listener.putNext();\n+          listener.completed();\n+        }\n+      }\n+    };\n+  }\n+\n+  private void startServerAndClient() throws IOException {\n+    final FlightProducer flightProducer = getFlightProducer();\n+    this.server = FlightTestUtil.getStartedServer((location) -> FlightServer\n+            .builder(allocator, location, flightProducer)\n+            .headerAuthenticator(new GeneratedTestBearerTokenAuthenticator(\n+                    new BasicCallHeaderAuthenticator(this::validate)))\n+            .build());\n+\n+    this.client = FlightClient.builder(allocator, server.getLocation())\n+            .build();\n+  }\n+\n+  @After\n+  public void shutdown() throws Exception {\n+    AutoCloseables.close(client, client2, server, allocator);\n+    client = null;\n+    client2 = null;\n+    server = null;\n+    allocator = null;\n+  }\n+\n+  private CallHeaderAuthenticator.AuthResult validate(String username, String password) {\n+    if (Strings.isNullOrEmpty(username)) {\n+      throw CallStatus.UNAUTHENTICATED.withDescription(\"Credentials not supplied.\").toRuntimeException();\n+    }\n+    final String identity;\n+    if (USERNAME_1.equals(username) && PASSWORD_1.equals(password)) {\n+      identity = USERNAME_1;\n+    } else {\n+      throw CallStatus.UNAUTHENTICATED.withDescription(\"Username or password is invalid.\").toRuntimeException();\n+    }\n+    return () -> identity;\n+  }\n+\n+  @Test\n+  public void testListFlightsWithRetry() {\n+    client.authenticateBasicToken(USERNAME_1, PASSWORD_1);\n+    Iterable<FlightInfo> flights = client.listFlights(Criteria.ALL);\n+    int count = 0;\n+    for (FlightInfo flight : flights) {\n+      count += 1;\n+      Assert.assertArrayEquals(flight.getDescriptor().getCommand(), \"flight1\".getBytes(Charsets.UTF_8));\n+    }\n+    Assert.assertEquals(1, count);\n+  }\n+\n+  @Test\n+  public void testListActionsWithRetry() {\n+    client.authenticateBasicToken(USERNAME_1, PASSWORD_1);\n+    Assert.assertFalse(ImmutableList.copyOf(client\n+            .listActions())\n+            .isEmpty());\n+    Assert.assertFalse(ImmutableList.copyOf(client\n+            .listActions())\n+            .isEmpty());\n+  }\n+\n+  @Test\n+  public void testDoActionWithRetry() {\n+    client.authenticateBasicToken(USERNAME_1, PASSWORD_1);\n+    Assert.assertFalse(ImmutableList.copyOf(client\n+            .doAction(new Action(\"hello\")))\n+            .isEmpty());\n+    Assert.assertFalse(ImmutableList.copyOf(client\n+            .doAction(new Action(\"world\")))\n+            .isEmpty());\n+  }\n+\n+\n+  /**\n+   * Generates and caches bearer tokens from user credentials.\n\nReview comment:\n       Can we make it clear here that this class generates bearer tokens with a sequentially increasing ID, and it considers token #1 to be 'expired'? It was a little unclear how the retry was getting tested at first.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/ClientApiCallWrapper.java\n##########\n@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing an API calls on the FlightServer.\n\nReview comment:\n       nit: can we make this more descriptive (this is a set of utilities for making RPC calls with optional retries)?\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/ClientApiCallWrapper.java\n##########\n@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing an API calls on the FlightServer.\n+ */\n+public class ClientApiCallWrapper {\n+\n+  /**\n+   * Execute client call using the Stream Observer ApiCallObserver.\n+   * @param apiCall Function call to execute.\n+   * @param <T> Type of the values in the stream.\n+   * @return An iterable of type T.\n+   */\n+  private static <T> Iterable<T> doClientCall(Consumer<ApiCallObserver<T>> apiCall) {\n+    final ApiCallObserver<T> observer = new ApiCallObserver<>();\n+    try {\n+      apiCall.accept(observer);\n+      while (!observer.completed.get()) {/* Wait for results */}\n+      return observer.result;\n+    } catch (ExecutionException e) {\n+      throw StatusUtils.fromThrowable(e.getCause());\n+    } catch (InterruptedException e) {\n+      throw StatusUtils.fromThrowable(e);\n+    }\n+  }\n+\n+  /**\n+   * This method calls the method doClientCall to get the results iterator and use that to get the\n+   * results.\n+   * @param apiCall The underlying Flight API call to execute.\n+   * @param result Functional interface that returns the results.\n+   * @param retryOnUnauthorized Should the API call be retried if it fails during the initial call.\n+   * @param <T> Type of the values in the stream.\n+   * @param <R> Type of the return value from this method.\n+   * @return An iterable of type R.\n+   */\n+  static <T, R> Iterable<R> callFlightApi(Consumer<ApiCallObserver<T>> apiCall,\n+                                          Function<Iterator<T>, Iterator<R>> result,\n+                                          boolean retryOnUnauthorized) {\n+    try {\n+      final Iterator<T> iterator = doClientCall(apiCall).iterator();\n+      return () -> result.apply(iterator);\n+    } catch (FlightRuntimeException ex) {\n\nReview comment:\n       This should only retry on the appropriate status right?\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/ClientApiCallWrapper.java\n##########\n@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing an API calls on the FlightServer.\n+ */\n+public class ClientApiCallWrapper {\n+\n+  /**\n+   * Execute client call using the Stream Observer ApiCallObserver.\n+   * @param apiCall Function call to execute.\n+   * @param <T> Type of the values in the stream.\n+   * @return An iterable of type T.\n+   */\n+  private static <T> Iterable<T> doClientCall(Consumer<ApiCallObserver<T>> apiCall) {\n+    final ApiCallObserver<T> observer = new ApiCallObserver<>();\n+    try {\n+      apiCall.accept(observer);\n+      while (!observer.completed.get()) {/* Wait for results */}\n+      return observer.result;\n+    } catch (ExecutionException e) {\n+      throw StatusUtils.fromThrowable(e.getCause());\n+    } catch (InterruptedException e) {\n+      throw StatusUtils.fromThrowable(e);\n+    }\n+  }\n+\n+  /**\n+   * This method calls the method doClientCall to get the results iterator and use that to get the\n+   * results.\n+   * @param apiCall The underlying Flight API call to execute.\n+   * @param result Functional interface that returns the results.\n+   * @param retryOnUnauthorized Should the API call be retried if it fails during the initial call.\n+   * @param <T> Type of the values in the stream.\n+   * @param <R> Type of the return value from this method.\n+   * @return An iterable of type R.\n+   */\n+  static <T, R> Iterable<R> callFlightApi(Consumer<ApiCallObserver<T>> apiCall,\n+                                          Function<Iterator<T>, Iterator<R>> result,\n+                                          boolean retryOnUnauthorized) {\n+    try {\n+      final Iterator<T> iterator = doClientCall(apiCall).iterator();\n+      return () -> result.apply(iterator);\n+    } catch (FlightRuntimeException ex) {\n+      if (retryOnUnauthorized) {\n+        final Iterator<T> iterator = doClientCall(apiCall).iterator();\n+        return () -> result.apply(iterator);\n+      }\n+      throw ex;\n+    }\n+  }\n+\n+  /**\n+   * Call observer that implements a StreamObserver and stores the values in the stream into\n+   * and iterable as it encounters them.\n+   * @param <T> Type of the values in the stream.\n+   */\n+  static class ApiCallObserver<T> implements StreamObserver<T> {\n+    private final CompletableFuture<Boolean> completed;\n+    private final List<T> result = new ArrayList<>();\n\nReview comment:\n       This means we now build up the entire result set in memory instead of being able to stream it.\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/ClientApiCallWrapper.java\n##########\n@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.flight;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+import org.apache.arrow.flight.grpc.StatusUtils;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * Utility class for executing an API calls on the FlightServer.\n+ */\n+public class ClientApiCallWrapper {\n+\n+  /**\n+   * Execute client call using the Stream Observer ApiCallObserver.\n+   * @param apiCall Function call to execute.\n+   * @param <T> Type of the values in the stream.\n+   * @return An iterable of type T.\n+   */\n+  private static <T> Iterable<T> doClientCall(Consumer<ApiCallObserver<T>> apiCall) {\n+    final ApiCallObserver<T> observer = new ApiCallObserver<>();\n+    try {\n+      apiCall.accept(observer);\n+      while (!observer.completed.get()) {/* Wait for results */}\n+      return observer.result;\n+    } catch (ExecutionException e) {\n+      throw StatusUtils.fromThrowable(e.getCause());\n+    } catch (InterruptedException e) {\n+      throw StatusUtils.fromThrowable(e);\n+    }\n+  }\n+\n+  /**\n+   * This method calls the method doClientCall to get the results iterator and use that to get the\n+   * results.\n+   * @param apiCall The underlying Flight API call to execute.\n+   * @param result Functional interface that returns the results.\n+   * @param retryOnUnauthorized Should the API call be retried if it fails during the initial call.\n+   * @param <T> Type of the values in the stream.\n+   * @param <R> Type of the return value from this method.\n+   * @return An iterable of type R.\n+   */\n+  static <T, R> Iterable<R> callFlightApi(Consumer<ApiCallObserver<T>> apiCall,\n+                                          Function<Iterator<T>, Iterator<R>> result,\n+                                          boolean retryOnUnauthorized) {\n+    try {\n+      final Iterator<T> iterator = doClientCall(apiCall).iterator();\n+      return () -> result.apply(iterator);\n+    } catch (FlightRuntimeException ex) {\n\nReview comment:\n       Also, doesn't this need to somehow reset the middleware so that it sends the basic auth credentials and not the bearer token?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T21:32:11.171+0000",
                    "updated": "2020-12-03T21:32:11.171+0000",
                    "started": "2020-12-03T21:32:11.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519878",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/519879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#discussion_r535644940\n\n\n\n##########\nFile path: java/flight/flight-core/src/main/java/org/apache/arrow/flight/FlightClient.java\n##########\n@@ -388,6 +389,57 @@ public ExchangeReaderWriter doExchange(FlightDescriptor descriptor, CallOption..\n     }\n   }\n \n+  /**\n+   * Wrapper class to wrap the iterator and handle auth failures and retry.\n+   * @param <T> The type of iterator.\n+   */\n+  public static class WrappedFlightIterator<T> implements Iterator<T> {\n\nReview comment:\n       So I see you have switched to using the generic client; my comment is then more about the level of abstraction appropriate for implementing retry. In particular, keeping the logic inside a wrapper StreamObserver would, IMO, make it easier to preserve things like the streaming nature of calls without having to buffer results.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-03T21:33:14.352+0000",
                    "updated": "2020-12-03T21:33:14.352+0000",
                    "started": "2020-12-03T21:33:14.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519879",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/612819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-865260887\n\n\n   Following up here - given 5.0.0 is targeting July, do you think this will be ready in time?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T18:43:42.957+0000",
                    "updated": "2021-06-21T18:43:42.957+0000",
                    "started": "2021-06-21T18:43:42.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612819",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/613173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-865260887\n\n\n   Following up here - given 5.0.0 is targeting July, do you think this will be ready in time?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T07:56:25.118+0000",
                    "updated": "2021-06-22T07:56:25.118+0000",
                    "started": "2021-06-22T07:56:25.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613173",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/618756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-874285499\n\n\n   > Following up here - given 5.0.0 is targeting July, do you think this will be ready in time?\r\n   \r\n   Hey @lidavidm I am no longer working on this project. @tifflhl or @kylep-dremio would be better able to give you a definitive answer.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-05T19:04:51.401+0000",
                    "updated": "2021-07-05T19:04:51.401+0000",
                    "started": "2021-07-05T19:04:51.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618756",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/619249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "keeratsingh commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-874285499\n\n\n   > Following up here - given 5.0.0 is targeting July, do you think this will be ready in time?\r\n   \r\n   Hey @lidavidm I am no longer working on this project. @tifflhl or @kylep-dremio would be better able to give you a definitive answer.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T11:37:19.451+0000",
                    "updated": "2021-07-06T11:37:19.451+0000",
                    "started": "2021-07-06T11:37:19.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619249",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/655637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-928091968\n\n\n   @kylep-dremio Just to follow up here, I'm assuming this isn't a priority at the moment?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T17:23:56.914+0000",
                    "updated": "2021-09-27T17:23:56.914+0000",
                    "started": "2021-09-27T17:23:56.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655637",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/655681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kylep-dremio commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-928161670\n\n\n   @lidavidm - correct, we'll circle back to this but current priority is the C++ Flight SQL PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T18:28:46.456+0000",
                    "updated": "2021-09-27T18:28:46.456+0000",
                    "started": "2021-09-27T18:28:46.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655681",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/656721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-928091968\n\n\n   @kylep-dremio Just to follow up here, I'm assuming this isn't a priority at the moment?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T20:13:35.345+0000",
                    "updated": "2021-09-28T20:13:35.345+0000",
                    "started": "2021-09-28T20:13:35.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656721",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/656815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kylep-dremio commented on pull request #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-928161670\n\n\n   @lidavidm - correct, we'll circle back to this but current priority is the C++ Flight SQL PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T20:21:54.046+0000",
                    "updated": "2021-09-28T20:21:54.046+0000",
                    "started": "2021-09-28T20:21:54.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656815",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/766031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-1117386163\n\n   @lidavidm @kylep-dremio Is it worth keeping this PR open? Otherwise let's close it to clean up the queue a bit.\n\n\n",
                    "created": "2022-05-04T14:30:30.801+0000",
                    "updated": "2022-05-04T14:30:30.801+0000",
                    "started": "2022-05-04T14:30:30.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "766031",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/766035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #8780:\nURL: https://github.com/apache/arrow/pull/8780#issuecomment-1117390786\n\n   @kylep-dremio @jduo please reopen or create a new PR when this is ready\n\n\n",
                    "created": "2022-05-04T14:33:16.515+0000",
                    "updated": "2022-05-04T14:33:16.515+0000",
                    "started": "2022-05-04T14:33:16.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "766035",
                    "issueId": "13341875"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/worklog/766036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #8780: [POC] ARROW-10671: [FlightRPC] Bearer Token refresh design with retry\nURL: https://github.com/apache/arrow/pull/8780\n\n\n",
                    "created": "2022-05-04T14:33:18.361+0000",
                    "updated": "2022-05-04T14:33:18.361+0000",
                    "started": "2022-05-04T14:33:18.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "766036",
                    "issueId": "13341875"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3652074f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b507f93[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b99067f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@336d4078[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32b19727[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@47542134[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@645d7d5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3d6a8f2c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35c3f09[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@65e7f3d7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a5fcdb1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a53c39[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 24 16:43:57 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10671/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2020-11-21T00:01:57.000+0000",
        "updated": "2022-05-04T14:33:18.000+0000",
        "timeoriginalestimate": null,
        "description": "* The generated bearer token by implementations of CallHeaderAuthenticator such as\u00a0BearerTokenAuthenticator are bound to expire.\r\n * The expired access token needs to be refreshed.\r\n * The FlightClient needs to retry the API call on encountering FlightStatusCode.TOKEN_EXPIRED and refresh the expired token.\r\n\r\nRefer to this [design document|https://docs.google.com/document/d/187DlGpIpOUPGhWvXVQEq0mXw_hdWjzzOuZp0p5qzBp0/edit?usp=sharing] for more details.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC] Bearer Token refresh design with retry mechanism",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/comment/17263378",
                    "id": "17263378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Postponing to 4.0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2021-01-12T14:42:45.074+0000",
                    "updated": "2021-01-12T14:42:45.074+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341875/comment/17307992",
                    "id": "17307992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Postponing to 5.0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-24T16:43:57.188+0000",
                    "updated": "2021-03-24T16:43:57.188+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kszc:",
        "customfield_12314139": null
    }
}