{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13381957",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957",
    "key": "ARROW-12959",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12621525",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621525",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13390176",
                    "key": "ARROW-13367",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390176",
                    "fields": {
                        "summary": "[C++] Add option to is_null kernel to return true on NaN",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12616709",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616709",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13381960",
                    "key": "ARROW-12960",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381960",
                    "fields": {
                        "summary": "[C++][R] Option for is_nan(null) to evaluate to false or true",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=christian8491",
            "name": "christian8491",
            "key": "christian8491",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Christian Cordova",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12959/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/635436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#issuecomment-894446043\n\n\n   https://issues.apache.org/jira/browse/ARROW-12959\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-06T18:36:00.648+0000",
                    "updated": "2021-08-06T18:36:00.648+0000",
                    "started": "2021-08-06T18:36:00.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635436",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/635531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r684474220\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.cc\n##########\n@@ -471,6 +478,10 @@ Result<Datum> CaseWhen(const Datum& cond, const std::vector<Datum>& cases,\n   return CallFunction(\"case_when\", args, ctx);\n }\n \n+Result<Datum> IsNull(const Datum& arg, const NanNullOptions& options, ExecContext* ctx) {\n+  return CallFunction(\"is_null\", {arg}, &options, ctx);\n\nReview comment:\n       This signature is different from the one exposed in `api_scalar.h`, this results in linker error. Change to\r\n   ```\r\n   Result<Datum> IsNull(const Datum& arg, NanNullOptions options, ExecContext* ctx) {\r\n   ...\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-07T01:10:40.385+0000",
                    "updated": "2021-08-07T01:10:40.385+0000",
                    "started": "2021-08-07T01:10:40.385+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635531",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/635906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Christian8491 commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685286089\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.cc\n##########\n@@ -471,6 +478,10 @@ Result<Datum> CaseWhen(const Datum& cond, const std::vector<Datum>& cases,\n   return CallFunction(\"case_when\", args, ctx);\n }\n \n+Result<Datum> IsNull(const Datum& arg, const NanNullOptions& options, ExecContext* ctx) {\n+  return CallFunction(\"is_null\", {arg}, &options, ctx);\n\nReview comment:\n       I addressed this linker error on [783ed25](https://github.com/apache/arrow/pull/10896/commits/783ed257ff3d02c86ce060a5a1978ce6f40bf1cd)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T15:16:31.045+0000",
                    "updated": "2021-08-09T15:16:31.045+0000",
                    "started": "2021-08-09T15:16:31.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635906",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/635933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685338746\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,6 +77,22 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    bool is_nan_value = false;\n+    bool is_floating = false;\n+    if (in.type == float32()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+      is_floating = true;\n+    } else if (in.type == float64()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+      is_floating = true;\n+    }\n\nReview comment:\n       This can probably made much simpler, e.g.:\r\n   ```c++\r\n   bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\r\n   if (in.type->id() == Type::FLOAT) {\r\n     *out_value = !options.nan_is_null || !std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\r\n   }\r\n   else if (in.type->id() == Type::DOUBLE) {\r\n     *out_value = !options.nan_is_null || !std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\r\n   }\r\n   else {\r\n     *out_value = true;\r\n   }\r\n   return Status::OK();\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,6 +77,22 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    bool is_nan_value = false;\n+    bool is_floating = false;\n+    if (in.type == float32()) {\n\nReview comment:\n       This is comparing pointer values, which is incorrect, even though it will do what you expect most of the time.\r\n   (one could e.g. instantiate a separate instance using `std::make_shared<FloatType>()`)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -202,23 +221,29 @@ const FunctionDoc is_inf_doc(\n     (\"For each input value, emit true iff the value is infinite (inf or -inf).\"),\n     {\"values\"});\n \n-const FunctionDoc is_null_doc(\"Return true if null\",\n-                              (\"For each input value, emit true iff the value is null.\"),\n-                              {\"values\"});\n+const FunctionDoc is_null_doc(\n+    \"Return true if null, NaN can be considered as null\",\n+    (\"For each input value, emit true iff the value is null. Default behavior is to emit \"\n+     \"false for NaN values. True can be emitted for NaN values by toggling \"\n+     \"NanNullOptions flag.\"),\n+    {\"values\"}, \"NanNullOptions\");\n \n const FunctionDoc is_nan_doc(\"Return true if NaN\",\n                              (\"For each input value, emit true iff the value is NaN.\"),\n                              {\"values\"});\n \n }  // namespace\n \n+FunctionOptions kNanNullOptions = NanNullOptions::Defaults();\n\nReview comment:\n       You can put this in the anonymous namespace above.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T16:25:17.358+0000",
                    "updated": "2021-08-09T16:25:17.358+0000",
                    "started": "2021-08-09T16:25:17.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635933",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/635938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685350549\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,6 +77,22 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    bool is_nan_value = false;\n+    bool is_floating = false;\n+    if (in.type == float32()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+      is_floating = true;\n+    } else if (in.type == float64()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+      is_floating = true;\n+    }\n\nReview comment:\n       I would add a check for validity prior to checking float type to prevent unnecessary checks when null bit is enabled. Nit: Also, I would change logic to to use `&&` instead of `||`, feels a bit more readable (and less characters).\r\n   ```c++\r\n       bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\r\n       if (in.is_valid) {\r\n         switch (in.type->id()) {\r\n           case Type::FLOAT:\r\n             *out_value = options.nan_is_null && std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\r\n           case Type::DOUBLE:\r\n             *out_value = options.nan_is_null && std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\r\n           default:\r\n             *out_value = false;\r\n         }\r\n       } else {\r\n         *out_value = true;\r\n       }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T16:37:04.284+0000",
                    "updated": "2021-08-09T16:37:04.284+0000",
                    "started": "2021-08-09T16:37:04.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635938",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/635940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685352514\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,6 +77,22 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    bool is_nan_value = false;\n+    bool is_floating = false;\n+    if (in.type == float32()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+      is_floating = true;\n+    } else if (in.type == float64()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+      is_floating = true;\n+    }\n\nReview comment:\n       @pitrou I would be curious if it is worth it to have a specialized version for floating point types (similar to how arithmetic kernels are implemented), as the `options.nan_is_null` check does not applies to other data types.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T16:39:49.465+0000",
                    "updated": "2021-08-09T16:39:49.465+0000",
                    "started": "2021-08-09T16:39:49.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635940",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/635952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685371720\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,6 +77,22 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n+    bool is_nan_value = false;\n+    bool is_floating = false;\n+    if (in.type == float32()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+      is_floating = true;\n+    } else if (in.type == float64()) {\n+      is_nan_value = std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+      is_floating = true;\n+    }\n\nReview comment:\n       This is the version for Scalar inputs. Micro-optimizing it is futile. The version for Array inputs may be more interesting ;-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T17:07:26.744+0000",
                    "updated": "2021-08-09T17:07:26.744+0000",
                    "started": "2021-08-09T17:07:26.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635952",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685534294\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,7 +79,26 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+          break;\n\nReview comment:\n       Remove the `break` statement for the `default` case.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T21:36:28.444+0000",
                    "updated": "2021-08-09T21:36:28.444+0000",
                    "started": "2021-08-09T21:36:28.444+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636110",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685586159\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       **Note the check for `NaN` values only applies to floating-point types and when `nan_is_null` is `true`, other types/cases can use the logic as it was.**\r\n   \r\n   In the case of `ArrayData` there are 3 scenarios:\r\n   a) arr.GetNullCount() == arr.length  // All data is null\r\n   b) arr.GetNullCount() == 0               // No data is null\r\n   c) arr.MayHaveNulls() == true         // Some data is null\r\n   \r\n   IIUC, the null bitmap of the input `ArrayData` is not guaranteed to be consistent with the data ([an `ArrayData` can be malformed](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/data.h#L226-L230) bc buffer values can be modified directly). Scenarios *(a)-(b)* invoke `arr.GetNullCount()` which iterates through all the `arr` values and updates the null bitmap accordingly.\r\n   \r\n   Given that scenarios *(b)-(c)* are the common case and the array data has to be traversed to identify the `NaN` values, (as an optimization) I suggest to not check the null count at all. Nevertheless, only check for `NaN`s in non-null indices.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T23:27:54.911+0000",
                    "updated": "2021-08-09T23:27:54.911+0000",
                    "started": "2021-08-09T23:27:54.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636161",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685586159\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       **Note the check for `NaN` values only applies to floating-point types and when `nan_is_null` is `true`, other types/cases can use the logic as it was.**\r\n   \r\n   In the case of `ArrayData` there are 3 scenarios:\r\n   a) arr.GetNullCount() == arr.length  // All data is null\r\n   b) arr.GetNullCount() == 0               // No data is null\r\n   c) arr.MayHaveNulls() == true         // Some data is null\r\n   \r\n   IIUC, the null bitmap of the input `ArrayData` is not guaranteed to be consistent with the data ([an `ArrayData` can be malformed](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/data.h#L226-L230) bc buffer values can be modified directly). Scenarios *(a)-(b)* invoke `arr.GetNullCount()` which iterates through all the `arr` values and updates the null bitmap accordingly.\r\n   \r\n   Given that scenarios *(b)-(c)* are the common case and the array data has to be traversed to identify the `NaN` values, (as an optimization) I suggest to not check the null count at all. Nevertheless, only check for `NaNs` in non-null indices.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T23:29:03.075+0000",
                    "updated": "2021-08-09T23:29:03.075+0000",
                    "started": "2021-08-09T23:29:03.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636162",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r685586159\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       **Note the check for `NaN` values only applies to floating-point types and when `nan_is_null` is `true`, other types/cases can use the logic as it was.**\r\n   \r\n   In the case of `ArrayData` there are 3 scenarios:\r\n   a) arr.GetNullCount() == arr.length  // All data is null\r\n   b) arr.GetNullCount() == 0               // No data is null\r\n   c) arr.MayHaveNulls() == true         // Some data is null\r\n   \r\n   IIUC, the null bitmap of the input `ArrayData` is not guaranteed to be consistent with the data ([an `ArrayData` can be malformed](https://github.com/apache/arrow/blob/master/cpp/src/arrow/array/data.h#L226-L230) bc buffer values can be modified directly). Scenarios *(a)-(b)* invoke `arr.GetNullCount()` which iterates through all the `arr` values and update the null count.\r\n   \r\n   Given that scenarios *(b)-(c)* are the common case and the array data has to be traversed to identify the `NaN` values, (as an optimization) I suggest to not check the null count at all. Nevertheless, only check for `NaNs` in non-null indices.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T23:44:43.126+0000",
                    "updated": "2021-08-09T23:44:43.126+0000",
                    "started": "2021-08-09T23:44:43.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636171",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Christian8491 commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r686354657\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,7 +79,26 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+          break;\n\nReview comment:\n       Removed on 9a69e3e\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-10T22:09:57.429+0000",
                    "updated": "2021-08-10T22:09:57.429+0000",
                    "started": "2021-08-10T22:09:57.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636654",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Christian8491 commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r686355736\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       I have pushed f404910 which contains the ArrayData validity for nulls (not sure if it's the best way to do). \r\n   There is a way to test those changes in R ? As the ticket is also related to R language.  \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-10T22:12:20.971+0000",
                    "updated": "2021-08-10T22:12:20.971+0000",
                    "started": "2021-08-10T22:12:20.970+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636656",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r686481623\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       No need to test kernel implementation in R (or Python), first bindings have to be put in place with the desired default option. The C++ kernels is invoked via the language bindings.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T04:28:02.647+0000",
                    "updated": "2021-08-11T04:28:02.647+0000",
                    "started": "2021-08-11T04:28:02.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636725",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r686481623\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       No need to test kernel implementation in R (or Python), first bindings have to be put in place with the desired default option. The C++ kernels are invoked via the language bindings.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T13:52:39.794+0000",
                    "updated": "2021-08-11T13:52:39.794+0000",
                    "started": "2021-08-11T13:52:39.793+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636904",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r686863423\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       @Christian8491 when this PR is ready, the C++ code is all reviewed and approved, and the CI is all green, please let me know and I can push a commit that changes the R bindings to use this new option.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T14:03:24.104+0000",
                    "updated": "2021-08-11T14:03:24.104+0000",
                    "started": "2021-08-11T14:03:24.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636910",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Christian8491 commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r686900366\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -76,11 +79,32 @@ struct IsInfOperator {\n \n struct IsNullOperator {\n   static Status Call(KernelContext* ctx, const Scalar& in, Scalar* out) {\n-    checked_cast<BooleanScalar*>(out)->value = !in.is_valid;\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n+    bool* out_value = &checked_cast<BooleanScalar*>(out)->value;\n+    if (in.is_valid) {\n+      switch (in.type->id()) {\n+        case Type::FLOAT:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<FloatType>::Unbox(in));\n+          break;\n+        case Type::DOUBLE:\n+          *out_value = options.nan_is_null &&\n+                       std::isnan(internal::UnboxScalar<DoubleType>::Unbox(in));\n+          break;\n+        default:\n+          *out_value = false;\n+      }\n+    } else {\n+      *out_value = true;\n+    }\n+\n     return Status::OK();\n   }\n \n   static Status Call(KernelContext* ctx, const ArrayData& arr, ArrayData* out) {\n+    // TODO: Is `options` needed for detect nulls? Which is the better way to\n+    // handle is_null for ArrayData\n+    auto options = OptionsWrapper<NanNullOptions>::Get(ctx);\n\nReview comment:\n       Sure @ianmcook I will. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T14:42:52.060+0000",
                    "updated": "2021-08-11T14:42:52.060+0000",
                    "started": "2021-08-11T14:42:52.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636923",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/636956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Christian8491 commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r686962782\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity.cc\n##########\n@@ -202,23 +221,29 @@ const FunctionDoc is_inf_doc(\n     (\"For each input value, emit true iff the value is infinite (inf or -inf).\"),\n     {\"values\"});\n \n-const FunctionDoc is_null_doc(\"Return true if null\",\n-                              (\"For each input value, emit true iff the value is null.\"),\n-                              {\"values\"});\n+const FunctionDoc is_null_doc(\n+    \"Return true if null, NaN can be considered as null\",\n+    (\"For each input value, emit true iff the value is null. Default behavior is to emit \"\n+     \"false for NaN values. True can be emitted for NaN values by toggling \"\n+     \"NanNullOptions flag.\"),\n+    {\"values\"}, \"NanNullOptions\");\n \n const FunctionDoc is_nan_doc(\"Return true if NaN\",\n                              (\"For each input value, emit true iff the value is NaN.\"),\n                              {\"values\"});\n \n }  // namespace\n \n+FunctionOptions kNanNullOptions = NanNullOptions::Defaults();\n\nReview comment:\n       It was addressed on 2e772c1\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-11T15:53:29.954+0000",
                    "updated": "2021-08-11T15:53:29.954+0000",
                    "started": "2021-08-11T15:53:29.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "636956",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/639580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r691419898\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -966,7 +966,8 @@ Structural transforms\n \n * \\(8) Output is true iff the corresponding input element is NaN.\n \n-* \\(9) Output is true iff the corresponding input element is null.\n+* \\(9) Output is true if the corresponding input element is null or if NaN\n+  values are treated as null via the :struct:`NanNullOptions`.\n\nReview comment:\n       Rephrase to `Output is true if the corresponding input element is null. NaN values can be considered as null via ...`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T19:35:23.583+0000",
                    "updated": "2021-08-18T19:35:23.583+0000",
                    "started": "2021-08-18T19:35:23.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639580",
                    "issueId": "13381957"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/worklog/639584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10896:\nURL: https://github.com/apache/arrow/pull/10896#discussion_r691551801\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_validity_test.cc\n##########\n@@ -77,17 +77,100 @@ TEST_F(TestBooleanValidityKernels, ArrayIsNull) {\n                    \"[true, false, false, true]\");\n }\n \n+TEST_F(TestFloatValidityKernels, FloatArrayIsNull) {\n+  // All NaN\n\nReview comment:\n       I suggest to combine all the `TestFloatValidityKernels` tests into a single block and similarly for the `TestDoubleValidityKernels`. You can use comments to specify the type of test performed and change the options directly (e.g., `options.nan_is_null = false`).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T19:42:11.708+0000",
                    "updated": "2021-08-18T19:42:11.708+0000",
                    "started": "2021-08-18T19:42:11.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639584",
                    "issueId": "13381957"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 21600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2e3ac3f5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37bdb5cb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10e5e0fc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4a2c1cc6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2beded5a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6e34059[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@393eb279[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@135e43b4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@579dfbb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4be0989a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70156e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@66a3e652[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 26 17:09:44 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-26T17:09:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12959/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-06-03T17:01:26.000+0000",
        "updated": "2021-08-26T17:09:58.000+0000",
        "timeoriginalestimate": null,
        "description": "(This is the flip side of\u00a0ARROW-12960.)\r\n\r\nCurrently the Arrow compute kernel {{is_null}} always treats\u00a0{{NaN}} as a non-missing value, returning {{false}}\u00a0at positions of the input datum with value {{NaN}}.\r\n\r\nIt would be helpful to be able to control this behavior with an option. The option could be\u00a0named\u00a0{{nan_is_null}}\u00a0or something similar.\u00a0\u00a0It would default to {{false}}, consistent with current behavior. When set to {{true}}, it should check if the input datum has a floating point data type, and if so, return {{true}} at positions where the input is\u00a0{{NaN}}. If the input datum has some other type, the option should be silently ignored.\r\n\r\nAmong other things, this would enable the {{arrow}} R package to evaluate\u00a0{{is.na()}} consistently with the way base R does.\u00a0In base R, {{is.na()}} returns {{TRUE}} on\u00a0{{NaN}}. But in the {{arrow}} R package, it returns {{FALSE}}:\r\n{code:r}\r\nis.na(c(3.14, NA, NaN))\r\n## [1] FALSE TRUE TRUE\r\n\r\nas.vector(is.na(Array$create(c(3.14, NA, NaN))))\r\n## [1] FALSE TRUE FALSE{code}\r\nI think solving this with an option in the C++ kernel is the best solution, because I suspect there are other cases in which users might want to treat {{NaN}} as a missing value. However, it would also be possible to solve this just in the R package, by defining\u00a0a mapping of {{is.na}} in the R package\u00a0that checks if the input {{x}}\u00a0has a floating point data type, and if so, evaluates {{is.na\\(x\\) | is.nan\\(x\\)}}. If we choose to go that route, we should change this Jira issue summary to\u00a0\"[R] Make is.na(NaN) consistent with base R\".",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][R] Option for is_null(NaN) to evaluate to true",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/comment/17357226",
                    "id": "17357226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Also for Python land (where NaN is often used as missing value indicator), this will probably be useful. So agreed that doing this on the C++ side with an option would be good.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-06-04T09:46:30.660+0000",
                    "updated": "2021-06-04T09:46:30.660+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/comment/17403256",
                    "id": "17403256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=christian8491",
                        "name": "christian8491",
                        "key": "christian8491",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Christian Cordova",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This PR is ready for review [https://github.com/apache/arrow/pull/10896]\u00a0. Thanks [~edponce]\u00a0for the support and also [~icook] for providing R bindings.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=christian8491",
                        "name": "christian8491",
                        "key": "christian8491",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Christian Cordova",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-23T16:02:34.080+0000",
                    "updated": "2021-08-23T16:02:34.080+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381957/comment/17405376",
                    "id": "17405376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10896\n[https://github.com/apache/arrow/pull/10896]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-26T17:09:44.573+0000",
                    "updated": "2021-08-26T17:09:44.573+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rmrk:",
        "customfield_12314139": null
    }
}