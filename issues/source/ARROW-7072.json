{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13266525",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525",
    "key": "ARROW-7072",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12573497",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12573497",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13266526",
                    "key": "ARROW-7073",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526",
                    "fields": {
                        "summary": "[Java] Support concating vectors values in batch",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 23400,
            "total": 23400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 23400,
            "total": 23400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7072/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 42,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/339291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782\n \n \n   For scenarios when we need to concate vectors (like the scenario in ARROW-7048, and delta dictionary), we need a way to concat validity bits.\r\n   \r\n   Currently, we have bit level API to read/write individual validity bit. However, it is not efficient , and we need a way to copy more bits at a time.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-06T10:56:51.326+0000",
                    "updated": "2019-11-06T10:56:51.326+0000",
                    "started": "2019-11-06T10:56:51.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "339291",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/339294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#issuecomment-550260993\n \n \n   https://issues.apache.org/jira/browse/ARROW-7072\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-06T11:04:04.493+0000",
                    "updated": "2019-11-06T11:04:04.493+0000",
                    "started": "2019-11-06T11:04:04.493+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "339294",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345044665\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n \n Review comment:\n   please document what this case represents.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:05.594+0000",
                    "updated": "2019-11-12T07:23:05.594+0000",
                    "started": "2019-11-12T07:23:05.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341708",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345045240\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n+\n+    int numFullBytes = numBits2 / 8;\n+\n+    for (int i = 0; i < numFullBytes; i++) {\n+      int prevByte = output.getByte(numBytes1 + i - 1) & 0xff;\n+      byte curByte = input2.getByte(i);\n+\n+      // first fill the bits to a full byte\n+      int byteToFill = (curByte & 0xff) << (8 - numBitsToFill);\n \n Review comment:\n   is the mask here necessary, isn't it already a byte?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:05.653+0000",
                    "updated": "2019-11-12T07:23:05.653+0000",
                    "started": "2019-11-12T07:23:05.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341709",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345044505\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n \n Review comment:\n   use a mask?  I think we have  a utility method for this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:05.762+0000",
                    "updated": "2019-11-12T07:23:05.762+0000",
                    "started": "2019-11-12T07:23:05.761+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341710",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345047394\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n \n Review comment:\n   this seems redundant except for the last byte if there is a remainder.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:05.924+0000",
                    "updated": "2019-11-12T07:23:05.924+0000",
                    "started": "2019-11-12T07:23:05.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341711",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345044825\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n \n Review comment:\n   mask instead of mod, don't we have a utility method for this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:05.934+0000",
                    "updated": "2019-11-12T07:23:05.934+0000",
                    "started": "2019-11-12T07:23:05.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341712",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341713",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345045804\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n+\n+    int numFullBytes = numBits2 / 8;\n+\n+    for (int i = 0; i < numFullBytes; i++) {\n+      int prevByte = output.getByte(numBytes1 + i - 1) & 0xff;\n+      byte curByte = input2.getByte(i);\n+\n+      // first fill the bits to a full byte\n+      int byteToFill = (curByte & 0xff) << (8 - numBitsToFill);\n \n Review comment:\n   is upcast to an int necessary?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:06.012+0000",
                    "updated": "2019-11-12T07:23:06.012+0000",
                    "started": "2019-11-12T07:23:06.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341713",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345046909\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/TestBitVectorHelper.java\n ##########\n @@ -149,4 +149,134 @@ public void testAllBitsSet() {\n       assertFalse(BitVectorHelper.checkAllBitsEqualTo(validityBuffer, bitLength, true));\n     }\n   }\n+\n+  @Test\n+  public void testConcatBits() {\n+    try (RootAllocator allocator = new RootAllocator(1024 * 1024)) {\n+      try (ArrowBuf buf1 = allocator.buffer(1024);\n+           ArrowBuf buf2 = allocator.buffer(1024);\n+           ArrowBuf output = allocator.buffer(1024)) {\n+\n+        buf1.setZero(0, buf1.capacity());\n+        buf2.setZero(0, buf2.capacity());\n+\n+        final int count = 100;\n+        for (int i = 0; i < count; i++) {\n+          if (i % 3 == 0) {\n+            BitVectorHelper.setValidityBitToOne(buf1, i);\n+            BitVectorHelper.setValidityBitToOne(buf2, i);\n+          }\n+        }\n+\n+        BitVectorHelper.concatBits(buf1, count, buf2, count, output);\n+\n+        // validate results\n+        for (int i = 0; i < count * 2; i++) {\n+          int result = BitVectorHelper.get(output, i);\n+          if (i < count) {\n+            assertEquals(i % 3 == 0 ? 1 : 0, result);\n+          } else {\n+            assertEquals((i - count) % 3 == 0 ? 1 : 0, result);\n+          }\n+        }\n+      }\n+\n+      try (ArrowBuf buf1 = allocator.buffer(1024);\n+           ArrowBuf buf2 = allocator.buffer(1024);\n+           ArrowBuf output = allocator.buffer(1024)) {\n+\n+        buf1.setZero(0, buf1.capacity());\n+        buf2.setZero(0, buf2.capacity());\n+\n+        final int count1 = 100;\n \n Review comment:\n   these numbers seem arbitray it might be more obvious if you set bit patterns using hex or if you commented on the expected bit patterns instead of having loops.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:06.065+0000",
                    "updated": "2019-11-12T07:23:06.065+0000",
                    "started": "2019-11-12T07:23:06.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341714",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345046083\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n \n Review comment:\n   move this closer to where it is used.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:06.095+0000",
                    "updated": "2019-11-12T07:23:06.095+0000",
                    "started": "2019-11-12T07:23:06.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341715",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345045948\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n+\n+    int numFullBytes = numBits2 / 8;\n+\n+    for (int i = 0; i < numFullBytes; i++) {\n+      int prevByte = output.getByte(numBytes1 + i - 1) & 0xff;\n+      byte curByte = input2.getByte(i);\n+\n+      // first fill the bits to a full byte\n+      int byteToFill = (curByte & 0xff) << (8 - numBitsToFill);\n+      output.setByte(numBytes1 + i - 1, byteToFill | prevByte);\n+\n+      // fill remaining bits in the current byte\n+      int remByte = (curByte & 0xff) >>> numBitsToFill;\n+      output.setByte(numBytes1 + i, remByte);\n \n Review comment:\n   it seems like you could avoid one memory access, by keeping this byte cached instead of accessing writing it here and then reading it back again at the beginning of the loop.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:06.098+0000",
                    "updated": "2019-11-12T07:23:06.098+0000",
                    "started": "2019-11-12T07:23:06.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341716",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341717",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345046546\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/TestBitVectorHelper.java\n ##########\n @@ -149,4 +149,134 @@ public void testAllBitsSet() {\n       assertFalse(BitVectorHelper.checkAllBitsEqualTo(validityBuffer, bitLength, true));\n     }\n   }\n+\n+  @Test\n+  public void testConcatBits() {\n+    try (RootAllocator allocator = new RootAllocator(1024 * 1024)) {\n+      try (ArrowBuf buf1 = allocator.buffer(1024);\n+           ArrowBuf buf2 = allocator.buffer(1024);\n+           ArrowBuf output = allocator.buffer(1024)) {\n+\n+        buf1.setZero(0, buf1.capacity());\n+        buf2.setZero(0, buf2.capacity());\n+\n+        final int count = 100;\n+        for (int i = 0; i < count; i++) {\n+          if (i % 3 == 0) {\n+            BitVectorHelper.setValidityBitToOne(buf1, i);\n+            BitVectorHelper.setValidityBitToOne(buf2, i);\n+          }\n+        }\n+\n+        BitVectorHelper.concatBits(buf1, count, buf2, count, output);\n+\n+        // validate results\n+        for (int i = 0; i < count * 2; i++) {\n+          int result = BitVectorHelper.get(output, i);\n+          if (i < count) {\n+            assertEquals(i % 3 == 0 ? 1 : 0, result);\n+          } else {\n+            assertEquals((i - count) % 3 == 0 ? 1 : 0, result);\n+          }\n+        }\n+      }\n+\n+      try (ArrowBuf buf1 = allocator.buffer(1024);\n \n Review comment:\n   please have a separate test case of each block.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:23:06.115+0000",
                    "updated": "2019-11-12T07:23:06.115+0000",
                    "started": "2019-11-12T07:23:06.115+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341717",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345047736\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n+\n+    int numFullBytes = numBits2 / 8;\n+\n+    for (int i = 0; i < numFullBytes; i++) {\n+      int prevByte = output.getByte(numBytes1 + i - 1) & 0xff;\n \n Review comment:\n   if the upcast is necessary it seems more efficient to handle 4 bytes at a time and then handle the last 3 in a loop if necessary.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T07:24:10.154+0000",
                    "updated": "2019-11-12T07:24:10.154+0000",
                    "started": "2019-11-12T07:24:10.154+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341718",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341810",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345125143\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n \n Review comment:\n   Good point. This is removed, and we pay special attention to set the last byte.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T10:28:10.351+0000",
                    "updated": "2019-11-12T10:28:10.351+0000",
                    "started": "2019-11-12T10:28:10.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341810",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345125319\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n \n Review comment:\n   Good point. We have bitIndex utility method.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T10:28:31.646+0000",
                    "updated": "2019-11-12T10:28:31.646+0000",
                    "started": "2019-11-12T10:28:31.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341811",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345125453\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n \n Review comment:\n   Good point. Document added. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T10:28:49.553+0000",
                    "updated": "2019-11-12T10:28:49.553+0000",
                    "started": "2019-11-12T10:28:49.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341812",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345125599\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n \n Review comment:\n   Revised. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T10:29:06.935+0000",
                    "updated": "2019-11-12T10:29:06.935+0000",
                    "started": "2019-11-12T10:29:06.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341813",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345125705\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n \n Review comment:\n   Good point. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T10:29:18.490+0000",
                    "updated": "2019-11-12T10:29:18.490+0000",
                    "started": "2019-11-12T10:29:18.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341814",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345126942\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n+\n+    int numFullBytes = numBits2 / 8;\n+\n+    for (int i = 0; i < numFullBytes; i++) {\n+      int prevByte = output.getByte(numBytes1 + i - 1) & 0xff;\n \n Review comment:\n   It seems we cannot handle 4 bytes/8 bytes at a time. This is because Arrow uses least-significant bit (LSB) numbering, so each byte needs to be shuffled (shift current bits, and supplement other bits from another byte). \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T10:31:46.611+0000",
                    "updated": "2019-11-12T10:31:46.611+0000",
                    "started": "2019-11-12T10:31:46.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341819",
                    "issueId": "13266525"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/worklog/341820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5782: ARROW-7072: [Java] Support concating validity bits efficiently\nURL: https://github.com/apache/arrow/pull/5782#discussion_r345127737\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/BitVectorHelper.java\n ##########\n @@ -319,4 +321,73 @@ static void setBitMaskedByte(ArrowBuf data, int byteIndex, byte bitMask) {\n     currentByte |= bitMask;\n     data.setByte(byteIndex, currentByte);\n   }\n+\n+  /**\n+   * Concat two validity buffers.\n+   * @param input1 the first validity buffer.\n+   * @param numBits1 the number of bits in the first validity buffer.\n+   * @param input2 the second validity buffer.\n+   * @param numBits2 the number of bits in the second validity buffer.\n+   * @param output the ouput validity buffer. It can be the same one as the first input.\n+   */\n+  public static void concatBits(ArrowBuf input1, int numBits1, ArrowBuf input2, int numBits2, ArrowBuf output) {\n+    int numBytes1 = DataSizeRoundingUtil.divideBy8Ceil(numBits1);\n+    int numBytes2 = DataSizeRoundingUtil.divideBy8Ceil(numBits2);\n+    int numBytesOut = DataSizeRoundingUtil.divideBy8Ceil(numBits1 + numBits2);\n+\n+    if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n+      output.checkBytes(0, numBytesOut);\n+    }\n+\n+    // copy the first bit set\n+    if (input1 != output) {\n+      PlatformDependent.copyMemory(input1.memoryAddress(), output.memoryAddress(), numBytes1);\n+    }\n+    output.setZero(numBytes1, numBytesOut);\n+\n+    if (numBits1 % 8 == 0) {\n+      PlatformDependent.copyMemory(input2.memoryAddress(), output.memoryAddress() + numBytes1, numBytes2);\n+      return;\n+    }\n+\n+    // the number of bits to fill a full byte after the first input is processed\n+    int numBitsToFill = 8 - (numBits1 % 8);\n+\n+    // the number of extra bits for the second input, relative to full bytes\n+    int numRemainingBits = numBits2 % 8;\n+\n+    int numFullBytes = numBits2 / 8;\n+\n+    for (int i = 0; i < numFullBytes; i++) {\n+      int prevByte = output.getByte(numBytes1 + i - 1) & 0xff;\n+      byte curByte = input2.getByte(i);\n+\n+      // first fill the bits to a full byte\n+      int byteToFill = (curByte & 0xff) << (8 - numBitsToFill);\n \n Review comment:\n   we must make sure the 24 high bits in the int is zero. \r\n   Without the mask, the high bits will be 1, if the highest bits in the curByte happen to be 1.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T10:33:34.652+0000",
                    "updated": "2019-11-12T10:33:34.652+0000",
                    "started": "2019-11-12T10:33:34.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "341820",
                    "issueId": "13266525"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 23400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@66ecb6ea[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bc3f7da[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fdc1a05[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6ba55d03[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10898eed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5910ae17[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56138b02[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@179f9986[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b3d837e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1701fc18[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d002e61[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@36b8dfee[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 23400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 22 05:52:54 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-22T05:52:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7072/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-11-06T08:48:07.000+0000",
        "updated": "2019-11-22T05:52:54.000+0000",
        "timeoriginalestimate": null,
        "description": "For scenarios when we need to concate vectors (like the scenario in ARROW-7048, and delta dictionary), we need a way to concat validity bits. \r\n\r\nCurrently, we have bit level API to read/write individual validity bit. However, it is not efficient , and we need a way to copy more bits at a time. ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 23400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Support concating validity bits efficiently",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525/comment/16979879",
                    "id": "16979879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 5782\n[https://github.com/apache/arrow/pull/5782]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-11-22T05:52:54.145+0000",
                    "updated": "2019-11-22T05:52:54.145+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z08b0o:",
        "customfield_12314139": null
    }
}