{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13468805",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805",
    "key": "ARROW-16918",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "newbie",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": 604800,
        "timeestimate": 590400,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=palak9202",
            "name": "palak9202",
            "key": "JIRAUSER291727",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Palak Pariawala",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 590400,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=palak9202",
            "name": "palak9202",
            "key": "JIRAUSER291727",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Palak Pariawala",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=palak9202",
            "name": "palak9202",
            "key": "JIRAUSER291727",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Palak Pariawala",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 604800,
            "percent": 2
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 604800,
            "percent": 2
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16918/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/786464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#issuecomment-1170951518\n\n   https://issues.apache.org/jira/browse/ARROW-16918\n\n\n",
                    "created": "2022-06-30T08:55:37.309+0000",
                    "updated": "2022-06-30T08:55:37.309+0000",
                    "started": "2022-06-30T08:55:37.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786464",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/786465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#issuecomment-1170951560\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-06-30T08:55:39.130+0000",
                    "updated": "2022-06-30T08:55:39.130+0000",
                    "started": "2022-06-30T08:55:39.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786465",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/788016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r914119747\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,47 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using arrow_vendored::date::time_zone;\n+\n+  arrow_vendored::date::sys_time <std::chrono::milliseconds> tp\n+                                  {std::chrono::milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = arrow_vendored::date::locate_zone\n+                                (std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n\nReview Comment:\n   As it is an implementation of a Hive function, do you know if there is a way to print all available timezones for the arrow_vendored library? Is just to check the compatibility of that function with all available timezones of Hive: http://obscuredclarity.blogspot.com/2010/08/get-all-timezones-available-in-timezone.html\n\n\n\n",
                    "created": "2022-07-05T19:03:26.962+0000",
                    "updated": "2022-07-05T19:03:26.962+0000",
                    "started": "2022-07-05T19:03:26.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788016",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/788142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r914448375\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,47 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using arrow_vendored::date::time_zone;\n+\n+  arrow_vendored::date::sys_time <std::chrono::milliseconds> tp\n+                                  {std::chrono::milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = arrow_vendored::date::locate_zone\n+                                (std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n\nReview Comment:\n   Try:\r\n   for(auto const& z : get_tzdb().zones) {\r\n       cout<<z.name()<<'\\n';\r\n     }\n\n\n\n",
                    "created": "2022-07-06T06:10:04.576+0000",
                    "updated": "2022-07-06T06:10:04.576+0000",
                    "started": "2022-07-06T06:10:04.575+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "788142",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/789202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r917208665\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n\nReview Comment:\n   ```suggestion\r\n       const auto local_tz = locate_zone(std::string(timezone, length));\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,57 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestTime, TestToUtcTimezone) {\n+  ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00 Asia/Kolkata\n+  gdv_timestamp ts = 55800000;\n+  gdv_timestamp ts2 = to_utc_timezone_timestamp(context_ptr, ts,\n+                                                \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(36000000, ts2);\n+\n+  //1970-01-01 5:00:00 Asia/Kolkata\n+  ts = 18000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, -1800000);\n+\n+  //daylight savings check\n+  //2018-03-11 01:00:00 America/Los_Angeles\n+  ts = \t1520730000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1520758800000);\n+\n+  //2018-03-12 01:00:00 America/Los_Angeles\n+  ts = 1331712000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1331737200000);\n\nReview Comment:\n   How about adding a test for failure case too?\n\n\n\n##########\ncpp/src/gandiva/precompiled/time.cc:\n##########\n@@ -1055,4 +1055,5 @@ gdv_int32 datediff_timestamp_timestamp(gdv_timestamp start_millis,\n CAST_NULLABLE_INTERVAL_YEAR(int32)\n CAST_NULLABLE_INTERVAL_YEAR(int64)\n \n+\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n\nReview Comment:\n   ```suggestion\r\n       gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\r\n       return 0;\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/function_registry_datetime.cc:\n##########\n@@ -163,11 +163,19 @@ std::vector<NativeFunction> GetDateTimeFunctionRegistry() {\n       NativeFunction(\"datediff\", {}, DataTypeVector{timestamp(), timestamp()}, int32(),\n                      kResultNullIfNull, \"datediff_timestamp_timestamp\"),\n \n+      NativeFunction(\"to_utc_timestamp\", {}, DataTypeVector{timestamp(), utf8()},\n+                     timestamp(), kResultNullIfNull, \"to_utc_timezone_timestamp\",\n+                     NativeFunction::kNeedsContext),\n+\n+      NativeFunction(\"from_utc_timestamp\", {}, DataTypeVector{timestamp(), utf8()},\n+                     timestamp(), kResultNullIfNull, \"from_utc_timezone_timestamp\",\n+                     NativeFunction::kNeedsContext),\n+\n       DATE_TYPES(LAST_DAY_SAFE_NULL_IF_NULL, last_day, {}),\n       BASE_NUMERIC_TYPES(TO_TIME_SAFE_NULL_IF_NULL, to_time, {}),\n       BASE_NUMERIC_TYPES(TO_TIMESTAMP_SAFE_NULL_IF_NULL, to_timestamp, {})};\n \n   return date_time_fn_registry_;\n }\n \n-}  // namespace gandiva\n+}  // namespace gandiva\n\nReview Comment:\n   Could you revert this change before we merge this?\n\n\n\n##########\ncpp/src/gandiva/precompiled/types.h:\n##########\n@@ -433,6 +433,7 @@ gdv_time32 castTIME_utf8(int64_t context, const char* input, int32_t length);\n gdv_time32 castTIME_timestamp(gdv_timestamp timestamp_in_millis);\n gdv_time32 castTIME_int32(int32_t int_val);\n const char* castVARCHAR_timestamp_int64(int64_t, gdv_timestamp, gdv_int64, gdv_int32*);\n+\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n+                      make_zoned(std::string(\"Etc/UTC\"), tp);\n+  try {\n+    const zoned_time<milliseconds, const time_zone*> local_tz =\n+                      make_zoned(std::string(timezone, length), utc_tz);\n+    gdv_timestamp offset = local_tz.get_time_zone()->get_info(tp).offset.count()*1000;\n+    return time_miliseconds + static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n\nReview Comment:\n   How about adding the given `timezone` to error message? It will help users to fix the invalid input.\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   Can we use `const auto utc_tz = ...` here?\n\n\n\n",
                    "created": "2022-07-09T02:24:44.092+0000",
                    "updated": "2022-07-09T02:24:44.092+0000",
                    "started": "2022-07-09T02:24:44.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789202",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/789203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#issuecomment-1179462745\n\n   We can fix style by `cmake --build ${BUILD_DIR} --target format` but you need to install `clang-format-12`.\r\n   If it's difficult to prepare `clang-format-12`, I can fix style and push the fix to this branch.\n\n\n",
                    "created": "2022-07-09T02:27:08.158+0000",
                    "updated": "2022-07-09T02:27:08.158+0000",
                    "started": "2022-07-09T02:27:08.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789203",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/789363",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r917534687\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   I had used 'auto' earlier but this caused a build error because this object is passed to an overloaded function, so the type had to be explicitly specified\n\n\n\n",
                    "created": "2022-07-11T04:36:20.550+0000",
                    "updated": "2022-07-11T04:36:20.550+0000",
                    "started": "2022-07-11T04:36:20.550+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789363",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/789364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r917534784\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n+                      make_zoned(std::string(\"Etc/UTC\"), tp);\n+  try {\n+    const zoned_time<milliseconds, const time_zone*> local_tz =\n+                      make_zoned(std::string(timezone, length), utc_tz);\n+    gdv_timestamp offset = local_tz.get_time_zone()->get_info(tp).offset.count()*1000;\n+    return time_miliseconds + static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n\nReview Comment:\n   Sure\n\n\n\n",
                    "created": "2022-07-11T04:36:35.526+0000",
                    "updated": "2022-07-11T04:36:35.526+0000",
                    "started": "2022-07-11T04:36:35.525+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789364",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/789868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r918607114\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,57 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestTime, TestToUtcTimezone) {\n+  ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00 Asia/Kolkata\n+  gdv_timestamp ts = 55800000;\n+  gdv_timestamp ts2 = to_utc_timezone_timestamp(context_ptr, ts,\n+                                                \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(36000000, ts2);\n+\n+  //1970-01-01 5:00:00 Asia/Kolkata\n+  ts = 18000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, -1800000);\n+\n+  //daylight savings check\n+  //2018-03-11 01:00:00 America/Los_Angeles\n+  ts = \t1520730000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1520758800000);\n+\n+  //2018-03-12 01:00:00 America/Los_Angeles\n+  ts = 1331712000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1331737200000);\n\nReview Comment:\n   I've added a failure test and modified the error message to include the time zone name given as input\n\n\n\n",
                    "created": "2022-07-12T06:50:28.537+0000",
                    "updated": "2022-07-12T06:50:28.537+0000",
                    "started": "2022-07-12T06:50:28.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789868",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919659653\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00 Asia/Kolkata\n\nReview Comment:\n   Is this correct?\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,67 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n+    char* err_msg = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context,\n+                                            msg_len));\n+    if (err_msg == nullptr) {\n+      gdv_fn_context_set_error_msg(context, \"Could not allocate memory\");\n+      return 0;\n+    }\n+    std::snprintf(err_msg, msg_len, \"'%s' is an invalid time zone name.\", timezone);\n+    gdv_fn_context_set_error_msg(context, err_msg);\n\nReview Comment:\n   @anthonylouisbsb Could you confirm whether this is a preferred error message generation approach in Gandiva? (I'm not familiar with Gandiva's error message generation.)\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00 Asia/Kolkata\n+  gdv_timestamp ts = 55800000;\n+  gdv_timestamp ts2 = to_utc_timezone_timestamp(context_ptr, ts,\n+                                                \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(36000000, ts2);\n+\n+  //1970-01-01 5:00:00 Asia/Kolkata\n+  ts = 18000000;\n\nReview Comment:\n   Is this correct?\r\n   It seems that `18000000` is \"1970-01-01 5:00:00 UTC\" and \"1970-01-01 5:00:00 Asia/Kolkata\" is `-1800000`.\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   Umm, I couldn't reproduce it with\r\n   \r\n   ```diff\r\n   diff --git a/cpp/src/gandiva/gdv_function_stubs.cc b/cpp/src/gandiva/gdv_function_stubs.cc\r\n   index ccf3e7ca3b..e6cbeb8aa7 100644\r\n   -",
                    "created": "2022-07-13T05:36:24.504+0000",
                    "updated": "2022-07-13T05:36:24.504+0000",
                    "started": "2022-07-13T05:36:24.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790271",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919694197\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00 Asia/Kolkata\n+  gdv_timestamp ts = 55800000;\n+  gdv_timestamp ts2 = to_utc_timezone_timestamp(context_ptr, ts,\n+                                                \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(36000000, ts2);\n+\n+  //1970-01-01 5:00:00 Asia/Kolkata\n+  ts = 18000000;\n\nReview Comment:\n   You're right, I'll make the changes for both these cases\n\n\n\n",
                    "created": "2022-07-13T06:28:33.935+0000",
                    "updated": "2022-07-13T06:28:33.935+0000",
                    "started": "2022-07-13T06:28:33.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790280",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919698275\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   I didn't get any errors on my environment either, the build error occurred in the Appveyor build check\n\n\n\n",
                    "created": "2022-07-13T06:34:49.481+0000",
                    "updated": "2022-07-13T06:34:49.481+0000",
                    "started": "2022-07-13T06:34:49.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790281",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919736246\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   OK. Is this the error log? https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/44007267/job/2upjodye0ip00r66\r\n   And is this the fix of the error? https://github.com/palak-9202/arrow/commit/4c0549526e56866205e4b1baa993b2e3e67241d5\n\n\n\n",
                    "created": "2022-07-13T07:24:54.588+0000",
                    "updated": "2022-07-13T07:24:54.588+0000",
                    "started": "2022-07-13T07:24:54.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790296",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919738853\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   Yes\n\n\n\n",
                    "created": "2022-07-13T07:27:45.212+0000",
                    "updated": "2022-07-13T07:27:45.212+0000",
                    "started": "2022-07-13T07:27:45.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790298",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919760316\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00 Asia/Kolkata\n+  gdv_timestamp ts = 55800000;\n+  gdv_timestamp ts2 = to_utc_timezone_timestamp(context_ptr, ts,\n+                                                \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(36000000, ts2);\n+\n+  //1970-01-01 5:00:00 Asia/Kolkata\n+  ts = 18000000;\n\nReview Comment:\n   Hey, actually since the function takes in the timestamp separate from the time zone, the time stamp is not adjusted for zone offset (this is done to match the hive function implementation). so what the function receives is a timestamp that should be interpreted as the time in the zone given as second parameter. That's why the function subtracts the offset to get UTC time even though the actual equivalent timestamp is the same, just the representation of the date+time is different.\r\n   So my comments are misleading- the input is just a date + time whose timestamp will be casted based on 0 offset. See the projector test about this.\r\n   I will remove the time zone names from the comments.\n\n\n\n",
                    "created": "2022-07-13T07:49:31.784+0000",
                    "updated": "2022-07-13T07:49:31.784+0000",
                    "started": "2022-07-13T07:49:31.784+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790309",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919776430\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   It seems that https://github.com/palak-9202/arrow/commit/4c0549526e56866205e4b1baa993b2e3e67241d5#diff-6112a00ef24accb25d6dde3f15276ee354c695838994d2e80e0de65c0e1929abL100 is the problem. https://github.com/palak-9202/arrow/commit/4c0549526e56866205e4b1baa993b2e3e67241d5#diff-6112a00ef24accb25d6dde3f15276ee354c695838994d2e80e0de65c0e1929abL102 didn't cause the problem.\r\n   The former uses `const char *` and the latter uses `std::string`.\r\n   How about trying the above diff that uses `std::string` for the former?\n\n\n\n",
                    "created": "2022-07-13T08:06:38.668+0000",
                    "updated": "2022-07-13T08:06:38.668+0000",
                    "started": "2022-07-13T08:06:38.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790312",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919800982\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   I'll try it out\n\n\n\n",
                    "created": "2022-07-13T08:31:27.315+0000",
                    "updated": "2022-07-13T08:31:27.315+0000",
                    "started": "2022-07-13T08:31:27.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790320",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "palak-9202 commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r919915616\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,51 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const time_zone* local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+      gdv_fn_context_set_error_msg(context, \"Invalid time zone\");\n+      return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const zoned_time<milliseconds, const time_zone*> utc_tz =\n\nReview Comment:\n   It worked out \ud83d\ude38 \n\n\n\n",
                    "created": "2022-07-13T10:24:16.731+0000",
                    "updated": "2022-07-13T10:24:16.731+0000",
                    "started": "2022-07-13T10:24:16.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790356",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r920615543\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,65 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const auto local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n+    char* err_msg =\n+        reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, msg_len));\n+    if (err_msg == nullptr) {\n+      gdv_fn_context_set_error_msg(context, \"Could not allocate memory\");\n+      return 0;\n+    }\n+    std::snprintf(err_msg, msg_len, \"'%s' is an invalid time zone name.\", timezone);\n+    gdv_fn_context_set_error_msg(context, err_msg);\n+    return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,65 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const auto local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n\nReview Comment:\n   ```suggestion\r\n       auto msg_len = static_cast<int32_t>(strlen(timezone) + 50);\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00\n+  gdv_timestamp ts = 1330443000000;\n+  gdv_timestamp ts2 =\n+      to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(1330423200000, ts2);\n+\n+  //1970-01-01 5:00:00\n+  ts = 18000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, -1800000);\n+\n+  //daylight savings check\n+  //2018-03-11 01:00:00\n+  ts = \t1520730000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1520758800000);\n+\n+  //2018-03-12 01:00:00\n+  ts = 1331712000000;\n\nReview Comment:\n   Is this correct?\r\n   It seems that 1331712000000 is \"2012-03-14 08:00:00 UTC\".\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00\n+  gdv_timestamp ts = 1330443000000;\n+  gdv_timestamp ts2 =\n+      to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(1330423200000, ts2);\n+\n+  //1970-01-01 5:00:00\n+  ts = 18000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, -1800000);\n+\n+  //daylight savings check\n+  //2018-03-11 01:00:00\n+  ts = \t1520730000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1520758800000);\n+\n+  //2018-03-12 01:00:00\n+  ts = 1331712000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1331737200000);\n+\n+  //Failure case\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/LA\", 10);\n+  EXPECT_THAT(context.get_error(), \"'America/LA' is an invalid time zone name.\");\n+}\n+\n+TEST(TestGdvFnStubs, TestFromUtcTimezone) {\n+  ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n\nReview Comment:\n   ```suggestion\r\n     auto len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\r\n     auto len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,65 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n\nReview Comment:\n   ```suggestion\r\n     auto len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\r\n     auto len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,65 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const auto local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n+    char* err_msg =\n\nReview Comment:\n   ```suggestion\r\n       auto err_msg =\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,65 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const auto local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n+    char* err_msg =\n+        reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, msg_len));\n+    if (err_msg == nullptr) {\n+      gdv_fn_context_set_error_msg(context, \"Could not allocate memory\");\n+      return 0;\n+    }\n+    std::snprintf(err_msg, msg_len, \"'%s' is an invalid time zone name.\", timezone);\n+    gdv_fn_context_set_error_msg(context, err_msg);\n+    return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const auto utc_tz = make_zoned(std::string(\"Etc/UTC\"), tp);\n+  try {\n+    const auto local_tz = make_zoned(std::string(timezone, length), utc_tz);\n+    gdv_timestamp offset = local_tz.get_time_zone()->get_info(tp).offset.count()*1000;\n+    return time_miliseconds + static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n\nReview Comment:\n   ```suggestion\r\n       auto msg_len = static_cast<int32_t>(strlen(timezone) + 50);\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -611,6 +611,65 @@ int32_t gdv_fn_cast_intervalyear_utf8_int32(int64_t context_ptr, int64_t holder_\n   auto* holder = reinterpret_cast<gandiva::IntervalYearsHolder*>(holder_ptr);\n   return (*holder)(context, data, data_len, in1_validity, out_valid);\n }\n+\n+GANDIVA_EXPORT\n+gdv_timestamp to_utc_timezone_timestamp(int64_t context, gdv_timestamp time_miliseconds,\n+                                        const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::locate_zone;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  try {\n+    const auto local_tz = locate_zone(std::string(timezone, length));\n+    gdv_timestamp offset = local_tz->get_info(tp).offset.count()*1000;\n+    return time_miliseconds - static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n+    char* err_msg =\n+        reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, msg_len));\n+    if (err_msg == nullptr) {\n+      gdv_fn_context_set_error_msg(context, \"Could not allocate memory\");\n+      return 0;\n+    }\n+    std::snprintf(err_msg, msg_len, \"'%s' is an invalid time zone name.\", timezone);\n+    gdv_fn_context_set_error_msg(context, err_msg);\n+    return 0;\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+gdv_timestamp from_utc_timezone_timestamp(gdv_int64 context,\n+                                          gdv_timestamp time_miliseconds,\n+                                          const char* timezone, gdv_int32 length) {\n+  using std::chrono::milliseconds;\n+  using arrow_vendored::date::sys_time;\n+  using arrow_vendored::date::time_zone;\n+  using arrow_vendored::date::zoned_time;\n+  using arrow_vendored::date::make_zoned;\n+\n+  sys_time <milliseconds> tp {milliseconds{time_miliseconds}};\n+  const auto utc_tz = make_zoned(std::string(\"Etc/UTC\"), tp);\n+  try {\n+    const auto local_tz = make_zoned(std::string(timezone, length), utc_tz);\n+    gdv_timestamp offset = local_tz.get_time_zone()->get_info(tp).offset.count()*1000;\n+    return time_miliseconds + static_cast<gdv_timestamp>(offset);\n+  } catch(...) {\n+    int32_t msg_len = static_cast<int32_t>(strlen(timezone) + 50);\n+    char* err_msg =\n\nReview Comment:\n   ```suggestion\r\n       auto err_msg =\r\n   ```\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00\n+  gdv_timestamp ts = 1330443000000;\n+  gdv_timestamp ts2 =\n+      to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(1330423200000, ts2);\n+\n+  //1970-01-01 5:00:00\n+  ts = 18000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, -1800000);\n+\n+  //daylight savings check\n+  //2018-03-11 01:00:00\n+  ts = \t1520730000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1520758800000);\n+\n+  //2018-03-12 01:00:00\n+  ts = 1331712000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1331737200000);\n+\n+  //Failure case\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"America/LA\", 10);\n+  EXPECT_THAT(context.get_error(), \"'America/LA' is an invalid time zone name.\");\n+}\n+\n+TEST(TestGdvFnStubs, TestFromUtcTimezone) {\n+  ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  gdv_timestamp ts = 36000000;\n+  gdv_timestamp ts2 =\n+      from_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, 55800000);\n+\n+  ts = -1800000;\n+  ts2 = from_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, 18000000);\n+\n+  ts = 1520758800000;\n+  ts2 = from_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1520730000000);\n+\n+  ts = 1331737200000;\n+  ts2 = from_utc_timezone_timestamp(context_ptr, ts, \"America/Los_Angeles\", len_pst);\n+  EXPECT_EQ(ts2, 1331712000000);\n+}\n\nReview Comment:\n   How about adding error case for `from_utc_timezone_timestamp()` too?\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00\n+  gdv_timestamp ts = 1330443000000;\n+  gdv_timestamp ts2 =\n+      to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(1330423200000, ts2);\n+\n+  //1970-01-01 5:00:00\n+  ts = 18000000;\n+  ts2 = to_utc_timezone_timestamp(context_ptr, ts, \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(ts2, -1800000);\n+\n+  //daylight savings check\n+  //2018-03-11 01:00:00\n+  ts = \t1520730000000;\n\nReview Comment:\n   ```suggestion\r\n     ts = 1520730000000;\r\n   ```\n\n\n\n",
                    "created": "2022-07-14T00:58:18.063+0000",
                    "updated": "2022-07-14T00:58:18.063+0000",
                    "started": "2022-07-14T00:58:18.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790647",
                    "issueId": "13468805"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/worklog/790648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13428:\nURL: https://github.com/apache/arrow/pull/13428#discussion_r920622543\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs_test.cc:\n##########\n@@ -993,4 +993,61 @@ TEST(TestGdvFnStubs, TestTranslate) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestToUtcTimezone) {\n+  gandiva::ExecutionContext context;\n+  auto context_ptr = reinterpret_cast<int64_t>(&context);\n+  gdv_int32 len_ist = static_cast<gdv_int32>(strlen(\"Asia/Kolkata\"));\n+  gdv_int32 len_pst = static_cast<gdv_int32>(strlen(\"America/Los_Angeles\"));\n+\n+  //2012-02-28 15:30:00 Asia/Kolkata\n+  gdv_timestamp ts = 55800000;\n+  gdv_timestamp ts2 = to_utc_timezone_timestamp(context_ptr, ts,\n+                                                \"Asia/Kolkata\", len_ist);\n+  EXPECT_EQ(36000000, ts2);\n+\n+  //1970-01-01 5:00:00 Asia/Kolkata\n+  ts = 18000000;\n\nReview Comment:\n   I see.\n\n\n\n",
                    "created": "2022-07-14T00:59:43.203+0000",
                    "updated": "2022-07-14T00:59:43.203+0000",
                    "started": "2022-07-14T00:59:43.203+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790648",
                    "issueId": "13468805"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3f62a7d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fecd784[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56c712d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7fbeaf7c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5db1b0c3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3a495d6e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54f6a15a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5e3931f7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e5eb55b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e8c2bd3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f11b929[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@8b095b5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 20 05:27:32 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-20T05:27:32.000+0000",
        "workratio": 2,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16918/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-06-28T07:46:40.000+0000",
        "updated": "2022-07-20T06:34:34.000+0000",
        "timeoriginalestimate": 604800,
        "description": "Adding functions in Gandiva to convert timestamps between UTC and local time zones\r\nto_utc_timestamp(timestamp, timezone name)\r\nfrom_utc_timestamp(timestamp, timezone name)",
        "customfield_10010": null,
        "timetracking": {
            "originalEstimate": "168h",
            "remainingEstimate": "164h",
            "timeSpent": "4h",
            "originalEstimateSeconds": 604800,
            "remainingEstimateSeconds": 590400,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva][C++] Adding UTC and local time zone conversion functions to Gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/comment/17559605",
                    "id": "17559605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "Perhaps you want to consider using the same naming as in the Acero kernel? See [docs here|https://arrow.apache.org/docs/python/generated/pyarrow.compute.assume_timezone.html] and [the implementation here|https://github.com/apache/arrow/blob/a376968089d7310f4a88d054822fa1eaf96c46f5/cpp/src/arrow/compute/kernels/scalar_temporal_unary.cc#L1361-L1434].",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-06-28T08:21:23.219+0000",
                    "updated": "2022-06-28T08:21:23.219+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468805/comment/17568827",
                    "id": "17568827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 13428\n[https://github.com/apache/arrow/pull/13428]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-07-20T05:27:32.773+0000",
                    "updated": "2022-07-20T05:27:32.773+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z16exk:",
        "customfield_12314139": null
    }
}