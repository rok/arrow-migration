{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13382246",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246",
    "key": "ARROW-12981",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350125",
                "id": "12350125",
                "name": "4.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2021-05-26"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12622691",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12622691",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13366820",
                    "key": "ARROW-12049",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366820",
                    "fields": {
                        "summary": "[R] [Documentation] Documentation for making an offline build",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333001",
                "id": "12333001",
                "name": "Packaging"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
            "name": "karldw",
            "key": "karldw",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
            },
            "displayName": "Karl Dunkle Werner",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [
            {
                "id": "13397602",
                "key": "ARROW-13768",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13397602",
                "fields": {
                    "summary": "[R] Allow JSON to be an optional component",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13397664",
                "key": "ARROW-13776",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13397664",
                "fields": {
                    "summary": "[C++] Offline thirdparty versions.txt is missing extensions for some files",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
            "name": "karldw",
            "key": "karldw",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
            },
            "displayName": "Karl Dunkle Werner",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 102600,
            "total": 102600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 84600,
            "total": 84600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12981/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 141,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/641892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw opened a new pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001\n\n\n   I took a stab at implementing the approach @nealrichardson laid out in [ARROW-12981](https://issues.apache.org/jira/browse/ARROW-12981?focusedCommentId=17400415#comment-17400415). Please let me know what you think, and if you'd like any changes!\r\n   \r\n   I wrote some basic tests for the `download_optional_dependencies()` helper function, but it would be good to have more comprehensive install tests. These could be something like:\r\n   \r\n   ```sh\r\n   export LIBARROW_BINARY=false\r\n   export LIBARROW_BUILD=true\r\n   export LIBARROW_DOWNLOAD=false\r\n   export LIBARROW_MINIMAL=false\r\n   \r\n   # Make sure offline, feature-light installation works\r\n   R -e \"install.packages('arrow_x.y.z.p.tar.xz')\r\n   R -e 'stopifnot(arrow::arrow_available(), isFALSE(arrow::arrow_info()$capabilities[\"parquet\"]))'\r\n   \r\n   # Download and install the thirdparty features\r\n   R -e \"arrow::download_optional_dependencies('arrow-thirdparty')\"\r\n   source arrow-thirdparty/DEFINE_ENV_VARS.sh\r\n   R -e \"install.packages('arrow_x.y.z.p.tar.xz')\r\n   R -e 'stopifnot(arrow::arrow_available(), isTRUE(arrow::arrow_info()$capabilities[\"parquet\"]))'\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T18:24:32.552+0000",
                    "updated": "2021-08-25T18:24:32.552+0000",
                    "started": "2021-08-25T18:24:32.552+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641892",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/641894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#issuecomment-905770415\n\n\n   https://issues.apache.org/jira/browse/ARROW-12981\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T18:24:58.575+0000",
                    "updated": "2021-08-25T18:24:58.575+0000",
                    "started": "2021-08-25T18:24:58.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641894",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/641912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#issuecomment-905793851\n\n\n   These builds are failing because they set `LIBARROW_DOWNLOAD` is `false` and they need to download cmake, but my changes block downloading cmake when `LIBARROW_DOWNLOAD` is `false` (or when github.com can't be reached). Should I allow cmake to be downloaded here and assume offline builds have cmake installed?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T19:00:03.890+0000",
                    "updated": "2021-08-25T19:00:03.890+0000",
                    "started": "2021-08-25T19:00:03.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641912",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/641924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696042759\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -271,13 +281,18 @@ apache_download <- function(version, destfile, n_mirrors = 3) {\n }\n \n find_local_source <- function(arrow_home = Sys.getenv(\"ARROW_SOURCE_HOME\", \"..\")) {\n+  cpp_dir <- NULL\n   if (file.exists(paste0(arrow_home, \"/cpp/src/arrow/api.h\"))) {\n     # We're in a git checkout of arrow, so we can build it\n-    cat(\"*** Found local C++ source\\n\")\n-    return(paste0(arrow_home, \"/cpp\"))\n-  } else {\n-    return(NULL)\n+    cpp_dir <- paste0(arrow_home, \"/cpp\")\n+  } else if (file.exists(\"tools/cpp/src/arrow/api.h\")) {\n\nReview comment:\n       Instead of the if/else if pattern, you could call find_local_source() twice, first with no args (to get the default), then `find_local_source(\"tools\")`. Or you could assume `arrow_home` is a vector of paths to try and iterate over it. \n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -435,22 +558,177 @@ with_s3_support <- function(env_vars) {\n       cat(\"**** S3 support requires version >= 1.0.2 of openssl-devel (rpm), libssl-dev (deb), or openssl (brew); building with ARROW_S3=OFF\\n\")\n       arrow_s3 <- FALSE\n     }\n+    download_unavailable <- remote_download_unavailable(c(\n+      \"ARROW_AWSSDK_URL\",\n+      \"ARROW_AWS_C_COMMON_URL\",\n+      \"ARROW_AWS_CHECKSUMS_URL\",\n+      \"ARROW_AWS_C_EVENT_STREAM_URL\"\n+    ))\n+    if (download_unavailable) {\n+      cat(paste(\n+        \"**** S3 dependencies need to be downloaded, but can't be.\",\n+        \"See ?arrow::download_optional_dependencies.\",\n+        \"Building with ARROW_S3=OFF\\n\"\n+      ))\n+      arrow_s3 <- FALSE\n+    }\n   }\n   paste(env_vars, ifelse(arrow_s3, \"ARROW_S3=ON\", \"ARROW_S3=OFF\"))\n }\n \n-with_mimalloc <- function(env_vars) {\n-  arrow_mimalloc <- toupper(Sys.getenv(\"ARROW_MIMALLOC\")) == \"ON\" || tolower(Sys.getenv(\"LIBARROW_MINIMAL\")) == \"false\"\n-  if (arrow_mimalloc) {\n-    # User wants mimalloc. If they're using gcc, let's make sure the version is >= 4.9\n-    if (isTRUE(cmake_gcc_version(env_vars) < \"4.9\")) {\n-      cat(\"**** mimalloc support not available for gcc < 4.9; building with ARROW_MIMALLOC=OFF\\n\")\n-      arrow_mimalloc <- FALSE\n+# Compression features: brotli, bz2, lz4, snappy, zlib, zstd\n+with_brotli <- function(env_vars) {\n+  arrow_brotli <- is_feature_requested(\"ARROW_WITH_BROTLI\")\n+  if (arrow_brotli) {\n+    download_unavailable <- remote_download_unavailable(\"ARROW_BROTLI_URL\")\n+    if (download_unavailable) {\n+      cat(\"**** brotli requested but cannot be downloaded. Setting ARROW_WITH_BROTLI=OFF\\n\")\n+      arrow_brotli <- FALSE\n     }\n   }\n-  paste(env_vars, ifelse(arrow_mimalloc, \"ARROW_MIMALLOC=ON\", \"ARROW_MIMALLOC=OFF\"))\n+  paste(env_vars, ifelse(arrow_brotli, \"ARROW_WITH_BROTLI=ON\", \"ARROW_WITH_BROTLI=OFF\"))\n+}\n+\n+with_bz2 <- function(env_vars) {\n+  arrow_brotli <- is_feature_requested(\"ARROW_WITH_BZ2\")\n\nReview comment:\n       This function says brotli but should be bz2\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -52,6 +43,21 @@ try_download <- function(from_url, to_file) {\n   !inherits(status, \"try-error\") && status == 0\n }\n \n+quietly <- !env_is(\"ARROW_R_DEV\", \"true\") # try_download uses quietly global\n+# * download_ok, build_ok: Use prebuilt binary, if found, otherwise try to build\n+# * no download, build_ok: Build with local git checkout, if available, or\n+#   sources included in r/tools/cpp/. Optional dependencies are not included,\n+#   and will not be automatically downloaded.\n+#   https://arrow.apache.org/docs/developers/cpp/building.html#offline-builds\n+# * download_ok, no build: Only use prebuilt binary, if found\n+# * neither: Get the arrow-without-arrow package\n+# Download and build are OK unless you say not to (or can't access github)\n+download_ok <- (!env_is(\"LIBARROW_DOWNLOAD\", \"false\")) && try_download(\"https://github.com\", tempfile())\n+build_ok <- !env_is(\"LIBARROW_BUILD\", \"false\")\n+# But binary defaults to not OK\n+binary_ok <- !identical(tolower(Sys.getenv(\"LIBARROW_BINARY\", \"false\")), \"false\")\n+# For local debugging, set ARROW_R_DEV=TRUE to make this script print more\n\nReview comment:\n       This comment goes above L46\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -52,6 +43,21 @@ try_download <- function(from_url, to_file) {\n   !inherits(status, \"try-error\") && status == 0\n }\n \n+quietly <- !env_is(\"ARROW_R_DEV\", \"true\") # try_download uses quietly global\n+# * download_ok, build_ok: Use prebuilt binary, if found, otherwise try to build\n+# * no download, build_ok: Build with local git checkout, if available, or\n+#   sources included in r/tools/cpp/. Optional dependencies are not included,\n+#   and will not be automatically downloaded.\n+#   https://arrow.apache.org/docs/developers/cpp/building.html#offline-builds\n+# * download_ok, no build: Only use prebuilt binary, if found\n+# * neither: Get the arrow-without-arrow package\n+# Download and build are OK unless you say not to (or can't access github)\n+download_ok <- (!env_is(\"LIBARROW_DOWNLOAD\", \"false\")) && try_download(\"https://github.com\", tempfile())\n\nReview comment:\n       I think we want to remove the `LIBARROW_DOWNLOAD` env var altogether, and in fact not ever download Arrow C++ source (which is what this variable governs currently). Third party dependencies should always download if you're not offline, I think, as they do now.\r\n   \r\n   (This is why the github actions failed: the linux jobs set LIBARROW_DOWNLOAD: false in docker-compose.yml so that they're forced to use the local C++ checkout, but now they fail to download `cmake` because you extended the offline checks there too.)\r\n   \r\n   We probably should replace this with a new `TEST_OFFLINE_BUILD` variable that allows us to turn off downloading in order to simulate the offline build, and have CI jobs that test both with and without the `download_optional_dependencies()` call.\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -503,12 +781,10 @@ if (!file.exists(paste0(dst_dir, \"/include/arrow/api.h\"))) {\n     unlink(bin_file)\n   } else if (build_ok) {\n     # (2) Find source and build it\n-    if (download_ok) {\n+    src_dir <- find_local_source()\n+    if (is.null(src_dir) && download_ok) {\n\nReview comment:\n       I would delete `download_source()`--if we're bundling the C++ source in the R package, then we should never need to download it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T19:20:55.929+0000",
                    "updated": "2021-08-25T19:20:55.929+0000",
                    "started": "2021-08-25T19:20:55.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641924",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/641988",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696121898\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -52,6 +43,21 @@ try_download <- function(from_url, to_file) {\n   !inherits(status, \"try-error\") && status == 0\n }\n \n+quietly <- !env_is(\"ARROW_R_DEV\", \"true\") # try_download uses quietly global\n+# * download_ok, build_ok: Use prebuilt binary, if found, otherwise try to build\n+# * no download, build_ok: Build with local git checkout, if available, or\n+#   sources included in r/tools/cpp/. Optional dependencies are not included,\n+#   and will not be automatically downloaded.\n+#   https://arrow.apache.org/docs/developers/cpp/building.html#offline-builds\n+# * download_ok, no build: Only use prebuilt binary, if found\n+# * neither: Get the arrow-without-arrow package\n+# Download and build are OK unless you say not to (or can't access github)\n+download_ok <- (!env_is(\"LIBARROW_DOWNLOAD\", \"false\")) && try_download(\"https://github.com\", tempfile())\n\nReview comment:\n       \r\n   > CI jobs that test both with and without the `download_optional_dependencies()` call.\r\n   \r\n   \r\n   Is the right place for those this file?\r\n   https://github.com/ursa-labs/arrow-r-nightly/blob/master/.github/workflows/build-and-test-all.yml\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T21:21:13.245+0000",
                    "updated": "2021-08-25T21:21:13.245+0000",
                    "started": "2021-08-25T21:21:13.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641988",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/641992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696125528\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -52,6 +43,21 @@ try_download <- function(from_url, to_file) {\n   !inherits(status, \"try-error\") && status == 0\n }\n \n+quietly <- !env_is(\"ARROW_R_DEV\", \"true\") # try_download uses quietly global\n+# * download_ok, build_ok: Use prebuilt binary, if found, otherwise try to build\n+# * no download, build_ok: Build with local git checkout, if available, or\n+#   sources included in r/tools/cpp/. Optional dependencies are not included,\n+#   and will not be automatically downloaded.\n+#   https://arrow.apache.org/docs/developers/cpp/building.html#offline-builds\n+# * download_ok, no build: Only use prebuilt binary, if found\n+# * neither: Get the arrow-without-arrow package\n+# Download and build are OK unless you say not to (or can't access github)\n+download_ok <- (!env_is(\"LIBARROW_DOWNLOAD\", \"false\")) && try_download(\"https://github.com\", tempfile())\n+build_ok <- !env_is(\"LIBARROW_BUILD\", \"false\")\n+# But binary defaults to not OK\n+binary_ok <- !identical(tolower(Sys.getenv(\"LIBARROW_BINARY\", \"false\")), \"false\")\n+# For local debugging, set ARROW_R_DEV=TRUE to make this script print more\n\nReview comment:\n       Just to confirm my understanding, is this what you meant?\r\n   https://github.com/apache/arrow/pull/11001/files#diff-935746c34b16289a07b0d9bf7642dbd268b18059b6187f7cdec7c464be47a3deR46-R62\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T21:27:35.000+0000",
                    "updated": "2021-08-25T21:27:35.000+0000",
                    "started": "2021-08-25T21:27:35.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641992",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/641993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#issuecomment-905889478\n\n\n   In the latest commit, I removed `LIBARROW_DOWNLOAD` and added `TEST_OFFLINE_BUILD`. Does that seem right to you?\r\n   \r\n   I wasn't positive I got the logic right in this section of `configure`:\r\n   https://github.com/apache/arrow/pull/11001/files#diff-089697faebdb7820ca629a2bb316b878cc0ba18a5bfb0b60996f8dbcd1fa11e7L133-L140\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T21:30:02.409+0000",
                    "updated": "2021-08-25T21:30:02.409+0000",
                    "started": "2021-08-25T21:30:02.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641993",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696697733\n\n\n\n##########\nFile path: r/configure\n##########\n@@ -130,14 +130,8 @@ else\n       fi\n     else\n       # Set some default values/backwards compatibility\n-      if [ \"${LIBARROW_DOWNLOAD}\" = \"\" ] && [ \"${NOT_CRAN}\" != \"\" ]; then\n-        LIBARROW_DOWNLOAD=$NOT_CRAN; export LIBARROW_DOWNLOAD\n-      fi\n-      if [ \"${LIBARROW_BINARY}\" = \"\" ] && [ \"${LIBARROW_DOWNLOAD}\" != \"\" ]; then\n-        LIBARROW_BINARY=$LIBARROW_DOWNLOAD; export LIBARROW_BINARY\n-      fi\n-      if [ \"${LIBARROW_MINIMAL}\" = \"\" ] && [ \"${LIBARROW_DOWNLOAD}\" = \"true\" ]; then\n-        LIBARROW_MINIMAL=false; export LIBARROW_MINIMAL\n+      if [ \"${LIBARROW_BINARY}\" = \"\" ] && [ \"${NOT_CRAN}\" = \"true\" ]; then\n+        LIBARROW_BINARY=true; export LIBARROW_BINARY\n       fi\n       if [ \"${LIBARROW_MINIMAL}\" = \"\" ] && [ \"${NOT_CRAN}\" = \"true\" ]; then\n         LIBARROW_MINIMAL=false; export LIBARROW_MINIMAL\n\nReview comment:\n       Let's simplify this a little further:\r\n   \r\n   ```suggestion\r\n         if [ \"${NOT_CRAN}\" = \"true\" ]; then\r\n           if [ \"${LIBARROW_BINARY}\" = \"\" ]; then\r\n             LIBARROW_BINARY=true; export LIBARROW_BINARY\r\n           fi\r\n           if [ \"${LIBARROW_MINIMAL}\" = \"\" ]; then\r\n             LIBARROW_MINIMAL=false; export LIBARROW_MINIMAL\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T14:40:12.727+0000",
                    "updated": "2021-08-26T14:40:12.727+0000",
                    "started": "2021-08-26T14:40:12.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642375",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696708048\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -209,75 +222,21 @@ find_available_binary <- function(os) {\n   os\n }\n \n-download_source <- function() {\n-  tf1 <- tempfile()\n-  src_dir <- tempfile()\n-\n-  # Given VERSION as x.y.z.p\n-  p <- package_version(VERSION)[1, 4]\n-  if (is.na(p) || p < 1000) {\n-    # This is either just x.y.z or it has a small (R-only) patch version\n-    # Download from the official Apache release, dropping the p\n-    VERSION <- as.character(package_version(VERSION)[1, -4])\n-    if (apache_download(VERSION, tf1)) {\n-      untar(tf1, exdir = src_dir)\n-      unlink(tf1)\n-      src_dir <- paste0(src_dir, \"/apache-arrow-\", VERSION, \"/cpp\")\n-    }\n-  } else if (p != 9000) {\n-    # This is a custom dev version (x.y.z.9999) or a nightly (x.y.z.20210505)\n-    # (Don't try to download on the default dev .9000 version)\n-    if (nightly_download(VERSION, tf1)) {\n-      unzip(tf1, exdir = src_dir)\n-      unlink(tf1)\n-      src_dir <- paste0(src_dir, \"/cpp\")\n-    }\n-  }\n-\n-  if (dir.exists(src_dir)) {\n-    cat(\"*** Successfully retrieved C++ source\\n\")\n-    options(.arrow.cleanup = c(getOption(\".arrow.cleanup\"), src_dir))\n-    # These scripts need to be executable\n-    system(\n-      sprintf(\"chmod 755 %s/build-support/*.sh\", src_dir),\n-      ignore.stdout = quietly, ignore.stderr = quietly\n-    )\n-    return(src_dir)\n-  } else {\n-    return(NULL)\n-  }\n-}\n-\n-nightly_download <- function(version, destfile) {\n-  source_url <- paste0(arrow_repo, \"src/arrow-\", version, \".zip\")\n-  try_download(source_url, destfile)\n-}\n-\n-apache_download <- function(version, destfile, n_mirrors = 3) {\n-  apache_path <- paste0(\"arrow/arrow-\", version, \"/apache-arrow-\", version, \".tar.gz\")\n-  apache_urls <- c(\n-    # This returns a different mirror each time\n-    rep(\"https://www.apache.org/dyn/closer.lua?action=download&filename=\", n_mirrors),\n-    \"https://downloads.apache.org/\" # The backup\n+find_local_source <- function() {\n+  # We'll take the first of these that exists\n+  # The first case probably occurs if we're in the arrow git repo\n+  # The second probably occurs if we're installing the arrow R package\n+  cpp_dir_options <- c(\n+    Sys.getenv(\"ARROW_SOURCE_HOME\", \"..\"),\n+    \"tools/cpp\"\n   )\n-  downloaded <- FALSE\n-  for (u in apache_urls) {\n-    downloaded <- try_download(paste0(u, apache_path), destfile)\n-    if (downloaded) {\n-      break\n-    }\n-  }\n-  downloaded\n-}\n-\n-find_local_source <- function(arrow_home = Sys.getenv(\"ARROW_SOURCE_HOME\", \"..\")) {\n-  if (file.exists(paste0(arrow_home, \"/cpp/src/arrow/api.h\"))) {\n-    # We're in a git checkout of arrow, so we can build it\n-    cat(\"*** Found local C++ source\\n\")\n-    return(paste0(arrow_home, \"/cpp\"))\n-  } else {\n+  valid_cpp_dir <- file.exists(file.path(cpp_dir_options, \"src/arrow/api.h\"))\n+  if (!any(valid_cpp_dir)) {\n     return(NULL)\n   }\n+  cpp_dir <- cpp_dir_options[valid_cpp_dir][1]\n+  cat(paste0(\"*** Found local C++ source:\\n    '\", cpp_dir, \"'\\n\"))\n+  cpp_dir\n\nReview comment:\n       I think the intent reads more clearly this way\r\n   \r\n   ```suggestion\r\n     for (cpp_dir in cpp_dir_options) {\r\n       if (file.exists(file.path(cpp_dir, \"cpp/src/arrow/api.h\"))) {\r\n         cat(paste0(\"*** Found local C++ source: '\", cpp_dir, \"'\\n\"))\r\n         return(cpp_dir)\r\n       }\r\n     }\r\n     NULL\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T14:51:18.607+0000",
                    "updated": "2021-08-26T14:51:18.607+0000",
                    "started": "2021-08-26T14:51:18.607+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642385",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696709923\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -209,75 +222,21 @@ find_available_binary <- function(os) {\n   os\n }\n \n-download_source <- function() {\n-  tf1 <- tempfile()\n-  src_dir <- tempfile()\n-\n-  # Given VERSION as x.y.z.p\n-  p <- package_version(VERSION)[1, 4]\n-  if (is.na(p) || p < 1000) {\n-    # This is either just x.y.z or it has a small (R-only) patch version\n-    # Download from the official Apache release, dropping the p\n-    VERSION <- as.character(package_version(VERSION)[1, -4])\n-    if (apache_download(VERSION, tf1)) {\n-      untar(tf1, exdir = src_dir)\n-      unlink(tf1)\n-      src_dir <- paste0(src_dir, \"/apache-arrow-\", VERSION, \"/cpp\")\n-    }\n-  } else if (p != 9000) {\n-    # This is a custom dev version (x.y.z.9999) or a nightly (x.y.z.20210505)\n-    # (Don't try to download on the default dev .9000 version)\n-    if (nightly_download(VERSION, tf1)) {\n-      unzip(tf1, exdir = src_dir)\n-      unlink(tf1)\n-      src_dir <- paste0(src_dir, \"/cpp\")\n-    }\n-  }\n-\n-  if (dir.exists(src_dir)) {\n-    cat(\"*** Successfully retrieved C++ source\\n\")\n-    options(.arrow.cleanup = c(getOption(\".arrow.cleanup\"), src_dir))\n-    # These scripts need to be executable\n-    system(\n-      sprintf(\"chmod 755 %s/build-support/*.sh\", src_dir),\n-      ignore.stdout = quietly, ignore.stderr = quietly\n-    )\n-    return(src_dir)\n-  } else {\n-    return(NULL)\n-  }\n-}\n-\n-nightly_download <- function(version, destfile) {\n-  source_url <- paste0(arrow_repo, \"src/arrow-\", version, \".zip\")\n-  try_download(source_url, destfile)\n-}\n-\n-apache_download <- function(version, destfile, n_mirrors = 3) {\n-  apache_path <- paste0(\"arrow/arrow-\", version, \"/apache-arrow-\", version, \".tar.gz\")\n-  apache_urls <- c(\n-    # This returns a different mirror each time\n-    rep(\"https://www.apache.org/dyn/closer.lua?action=download&filename=\", n_mirrors),\n-    \"https://downloads.apache.org/\" # The backup\n+find_local_source <- function() {\n+  # We'll take the first of these that exists\n+  # The first case probably occurs if we're in the arrow git repo\n+  # The second probably occurs if we're installing the arrow R package\n+  cpp_dir_options <- c(\n+    Sys.getenv(\"ARROW_SOURCE_HOME\", \"..\"),\n+    \"tools/cpp\"\n\nReview comment:\n       Since the other one doesn't have `cpp` in the path, this one shouldn't either. We could change it so that we expect the env var to point directly to the cpp dir instead of the apache/arrow top level; that's probably safe to do because I can't imagine anyone is using it, but technically it would be a breaking change.\r\n   \r\n   ```suggestion\r\n       \"tools\"\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T14:53:18.074+0000",
                    "updated": "2021-08-26T14:53:18.074+0000",
                    "started": "2021-08-26T14:53:18.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642388",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696708048\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -209,75 +222,21 @@ find_available_binary <- function(os) {\n   os\n }\n \n-download_source <- function() {\n-  tf1 <- tempfile()\n-  src_dir <- tempfile()\n-\n-  # Given VERSION as x.y.z.p\n-  p <- package_version(VERSION)[1, 4]\n-  if (is.na(p) || p < 1000) {\n-    # This is either just x.y.z or it has a small (R-only) patch version\n-    # Download from the official Apache release, dropping the p\n-    VERSION <- as.character(package_version(VERSION)[1, -4])\n-    if (apache_download(VERSION, tf1)) {\n-      untar(tf1, exdir = src_dir)\n-      unlink(tf1)\n-      src_dir <- paste0(src_dir, \"/apache-arrow-\", VERSION, \"/cpp\")\n-    }\n-  } else if (p != 9000) {\n-    # This is a custom dev version (x.y.z.9999) or a nightly (x.y.z.20210505)\n-    # (Don't try to download on the default dev .9000 version)\n-    if (nightly_download(VERSION, tf1)) {\n-      unzip(tf1, exdir = src_dir)\n-      unlink(tf1)\n-      src_dir <- paste0(src_dir, \"/cpp\")\n-    }\n-  }\n-\n-  if (dir.exists(src_dir)) {\n-    cat(\"*** Successfully retrieved C++ source\\n\")\n-    options(.arrow.cleanup = c(getOption(\".arrow.cleanup\"), src_dir))\n-    # These scripts need to be executable\n-    system(\n-      sprintf(\"chmod 755 %s/build-support/*.sh\", src_dir),\n-      ignore.stdout = quietly, ignore.stderr = quietly\n-    )\n-    return(src_dir)\n-  } else {\n-    return(NULL)\n-  }\n-}\n-\n-nightly_download <- function(version, destfile) {\n-  source_url <- paste0(arrow_repo, \"src/arrow-\", version, \".zip\")\n-  try_download(source_url, destfile)\n-}\n-\n-apache_download <- function(version, destfile, n_mirrors = 3) {\n-  apache_path <- paste0(\"arrow/arrow-\", version, \"/apache-arrow-\", version, \".tar.gz\")\n-  apache_urls <- c(\n-    # This returns a different mirror each time\n-    rep(\"https://www.apache.org/dyn/closer.lua?action=download&filename=\", n_mirrors),\n-    \"https://downloads.apache.org/\" # The backup\n+find_local_source <- function() {\n+  # We'll take the first of these that exists\n+  # The first case probably occurs if we're in the arrow git repo\n+  # The second probably occurs if we're installing the arrow R package\n+  cpp_dir_options <- c(\n+    Sys.getenv(\"ARROW_SOURCE_HOME\", \"..\"),\n+    \"tools/cpp\"\n   )\n-  downloaded <- FALSE\n-  for (u in apache_urls) {\n-    downloaded <- try_download(paste0(u, apache_path), destfile)\n-    if (downloaded) {\n-      break\n-    }\n-  }\n-  downloaded\n-}\n-\n-find_local_source <- function(arrow_home = Sys.getenv(\"ARROW_SOURCE_HOME\", \"..\")) {\n-  if (file.exists(paste0(arrow_home, \"/cpp/src/arrow/api.h\"))) {\n-    # We're in a git checkout of arrow, so we can build it\n-    cat(\"*** Found local C++ source\\n\")\n-    return(paste0(arrow_home, \"/cpp\"))\n-  } else {\n+  valid_cpp_dir <- file.exists(file.path(cpp_dir_options, \"src/arrow/api.h\"))\n+  if (!any(valid_cpp_dir)) {\n     return(NULL)\n   }\n+  cpp_dir <- cpp_dir_options[valid_cpp_dir][1]\n+  cat(paste0(\"*** Found local C++ source:\\n    '\", cpp_dir, \"'\\n\"))\n+  cpp_dir\n\nReview comment:\n       I think the intent reads more clearly this way\r\n   \r\n   ```suggestion\r\n     for (cpp_dir in cpp_dir_options) {\r\n       if (file.exists(file.path(cpp_dir, \"cpp/src/arrow/api.h\"))) {\r\n         cat(paste0(\"*** Found local C++ source: '\", paste0(cpp_dir, \"/cpp\"), \"'\\n\"))\r\n         return(paste0(cpp_dir, \"/cpp\"))\r\n       }\r\n     }\r\n     NULL\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T14:54:03.969+0000",
                    "updated": "2021-08-26T14:54:03.969+0000",
                    "started": "2021-08-26T14:54:03.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642389",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696722328\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -329,18 +288,22 @@ build_libarrow <- function(src_dir, dst_dir) {\n     LDFLAGS = R_CMD_config(\"LDFLAGS\")\n   )\n   env_vars <- paste0(names(env_var_list), '=\"', env_var_list, '\"', collapse = \" \")\n+  # Add env variables like ARROW_S3=ON. Order doesn't matter. Depends on `download_ok`\n   env_vars <- with_s3_support(env_vars)\n   env_vars <- with_mimalloc(env_vars)\n-  if (tolower(Sys.info()[[\"sysname\"]]) %in% \"sunos\") {\n-    # jemalloc doesn't seem to build on Solaris\n-    # nor does thrift, so turn off parquet,\n-    # and arrowExports.cpp requires parquet for dataset (ARROW-11994), so turn that off\n-    # xsimd doesn't compile, so set SIMD level to NONE to skip it\n-    # re2 and utf8proc do compile,\n-    # but `ar` fails to build libarrow_bundled_dependencies, so turn them off\n-    # so that there are no bundled deps\n-    env_vars <- paste(env_vars, \"ARROW_JEMALLOC=OFF ARROW_PARQUET=OFF ARROW_DATASET=OFF ARROW_WITH_RE2=OFF ARROW_WITH_UTF8PROC=OFF EXTRA_CMAKE_FLAGS=-DARROW_SIMD_LEVEL=NONE\")\n-  }\n+  env_vars <- with_jemalloc(env_vars)\n\nReview comment:\n       This is cool, but it kinda feels like we're reimplementing cmake here, and there's lots of subtleties that we can get wrong. I wonder if there's a simpler approach:\r\n   \r\n   * Instead of checking for all of the `*_SOURCE_URL`s in env vars, we could add a single env var like `THIRDPARTY_DEPENDENCY_DIR`, and build all those source URLs in this script if that is set. \r\n   * Simplify the build configuration logic here: if `!download_ok && !dir.exists(Sys.getenv(\"THIRDPARTY_DEPENDENCY_DIR\")) && Sys.getenv(\"ARROW_DEPENDENCY_SOURCE\") != \"SYSTEM\"` turn everything off (like the solaris case here, plus any others you've identified)\r\n   \r\n   Later, if/when ARROW-8155 happens, we can make some of those \"OFFs\" become optionally on if the system has them.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T15:06:17.619+0000",
                    "updated": "2021-08-26T15:06:17.619+0000",
                    "started": "2021-08-26T15:06:17.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642393",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696723923\n\n\n\n##########\nFile path: r/inst/build_arrow_static.sh\n##########\n@@ -59,7 +59,7 @@ ${CMAKE} -DARROW_BOOST_USE_SHARED=OFF \\\n     -DARROW_FILESYSTEM=ON \\\n     -DARROW_JEMALLOC=${ARROW_JEMALLOC:-$ARROW_DEFAULT_PARAM} \\\n     -DARROW_MIMALLOC=${ARROW_MIMALLOC:-ON} \\\n-    -DARROW_JSON=ON \\\n+    -DARROW_JSON=${ARROW_JSON:-ON} \\\n\nReview comment:\n       Can we split this out to a separate JIRA? It's more involved than this because we'll have to conditionally build some of the bindings like we do with dataset and parquet, and we'll have to conditionally skip tests. See ARROW-11735 for a model.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T15:08:12.658+0000",
                    "updated": "2021-08-26T15:08:12.658+0000",
                    "started": "2021-08-26T15:08:12.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642394",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#issuecomment-906502794\n\n\n   > In the latest commit, I removed `LIBARROW_DOWNLOAD` and added `TEST_OFFLINE_BUILD`. Does that seem right to you?\r\n   \r\n   I think so, but we'll know for sure once we set up CI.\r\n   \r\n   > \r\n   > I wasn't positive I got the logic right in this section of `configure`:\r\n   > https://github.com/apache/arrow/pull/11001/files#diff-089697faebdb7820ca629a2bb316b878cc0ba18a5bfb0b60996f8dbcd1fa11e7L133-L140\r\n   \r\n   Yes, looks right, I just suggested a further simplification now that we can.\r\n   \r\n   As for CI, there will be an arrow-r-nightly change needed in order to do the rsync etc. that you added to r/Makefile, but the regular CI we want will be in arrow, in our \"crossbow\" nightly and on-demand builds. There's a bunch of yaml that configures templates [here](https://github.com/apache/arrow/blob/master/dev/tasks/tasks.yml#L980-L1121), if you want to take a stab at it. @jonkeane is back from vacation next week and can help with setting that up too.\r\n   \r\n   Also, I just want to reiterate: this is great, thank you very much for taking the initiative on this.\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T15:15:47.676+0000",
                    "updated": "2021-08-26T15:15:47.676+0000",
                    "started": "2021-08-26T15:15:47.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642395",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696771438\n\n\n\n##########\nFile path: r/inst/build_arrow_static.sh\n##########\n@@ -59,7 +59,7 @@ ${CMAKE} -DARROW_BOOST_USE_SHARED=OFF \\\n     -DARROW_FILESYSTEM=ON \\\n     -DARROW_JEMALLOC=${ARROW_JEMALLOC:-$ARROW_DEFAULT_PARAM} \\\n     -DARROW_MIMALLOC=${ARROW_MIMALLOC:-ON} \\\n-    -DARROW_JSON=ON \\\n+    -DARROW_JSON=${ARROW_JSON:-ON} \\\n\nReview comment:\n       Done! ARROW-13768\r\n   Should I leave this change as it is, or revert to `-DARROW_JSON=ON`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T16:01:25.051+0000",
                    "updated": "2021-08-26T16:01:25.051+0000",
                    "started": "2021-08-26T16:01:25.050+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642423",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696784693\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -329,18 +288,22 @@ build_libarrow <- function(src_dir, dst_dir) {\n     LDFLAGS = R_CMD_config(\"LDFLAGS\")\n   )\n   env_vars <- paste0(names(env_var_list), '=\"', env_var_list, '\"', collapse = \" \")\n+  # Add env variables like ARROW_S3=ON. Order doesn't matter. Depends on `download_ok`\n   env_vars <- with_s3_support(env_vars)\n   env_vars <- with_mimalloc(env_vars)\n-  if (tolower(Sys.info()[[\"sysname\"]]) %in% \"sunos\") {\n-    # jemalloc doesn't seem to build on Solaris\n-    # nor does thrift, so turn off parquet,\n-    # and arrowExports.cpp requires parquet for dataset (ARROW-11994), so turn that off\n-    # xsimd doesn't compile, so set SIMD level to NONE to skip it\n-    # re2 and utf8proc do compile,\n-    # but `ar` fails to build libarrow_bundled_dependencies, so turn them off\n-    # so that there are no bundled deps\n-    env_vars <- paste(env_vars, \"ARROW_JEMALLOC=OFF ARROW_PARQUET=OFF ARROW_DATASET=OFF ARROW_WITH_RE2=OFF ARROW_WITH_UTF8PROC=OFF EXTRA_CMAKE_FLAGS=-DARROW_SIMD_LEVEL=NONE\")\n-  }\n+  env_vars <- with_jemalloc(env_vars)\n\nReview comment:\n       > it kinda feels like we're reimplementing cmake here, and there's lots of subtleties that we can get wrong\r\n   \r\n   Yeah....\r\n   \r\n   -----------------\r\n   \r\n   It makes sense to just point to the directory! A couple of thoughts about implementation:\r\n   - Should this have an Arrow-specific name, like `ARROW_THIRDPARTY_DEPENDENCIES`?\r\n   - The files in that directory have names like `<component>-<version>.tar.gz`. To create the `*_SOURCE_URL`, I'll search for the component name, and raise an error if I find 0 or >1 matches?\r\n   - If  `*_SOURCE_URL` is set already, I'll use that value instead of looking in the directory\r\n   \r\n   I noticed solaris doesn't turn json off. I'm not really sure how things work there.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T16:17:59.961+0000",
                    "updated": "2021-08-26T16:17:59.961+0000",
                    "started": "2021-08-26T16:17:59.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642426",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696787790\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -329,18 +288,22 @@ build_libarrow <- function(src_dir, dst_dir) {\n     LDFLAGS = R_CMD_config(\"LDFLAGS\")\n   )\n   env_vars <- paste0(names(env_var_list), '=\"', env_var_list, '\"', collapse = \" \")\n+  # Add env variables like ARROW_S3=ON. Order doesn't matter. Depends on `download_ok`\n   env_vars <- with_s3_support(env_vars)\n   env_vars <- with_mimalloc(env_vars)\n-  if (tolower(Sys.info()[[\"sysname\"]]) %in% \"sunos\") {\n-    # jemalloc doesn't seem to build on Solaris\n-    # nor does thrift, so turn off parquet,\n-    # and arrowExports.cpp requires parquet for dataset (ARROW-11994), so turn that off\n-    # xsimd doesn't compile, so set SIMD level to NONE to skip it\n-    # re2 and utf8proc do compile,\n-    # but `ar` fails to build libarrow_bundled_dependencies, so turn them off\n-    # so that there are no bundled deps\n-    env_vars <- paste(env_vars, \"ARROW_JEMALLOC=OFF ARROW_PARQUET=OFF ARROW_DATASET=OFF ARROW_WITH_RE2=OFF ARROW_WITH_UTF8PROC=OFF EXTRA_CMAKE_FLAGS=-DARROW_SIMD_LEVEL=NONE\")\n-  }\n+  env_vars <- with_jemalloc(env_vars)\n\nReview comment:\n       Also, if we're just going to use the directory, I can simplify `download_optional_dependencies()` a bit, since it's no longer necessary to keep the `export *_SOURCE_URL` output.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T16:21:46.953+0000",
                    "updated": "2021-08-26T16:21:46.953+0000",
                    "started": "2021-08-26T16:21:46.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642427",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696808171\n\n\n\n##########\nFile path: r/inst/build_arrow_static.sh\n##########\n@@ -59,7 +59,7 @@ ${CMAKE} -DARROW_BOOST_USE_SHARED=OFF \\\n     -DARROW_FILESYSTEM=ON \\\n     -DARROW_JEMALLOC=${ARROW_JEMALLOC:-$ARROW_DEFAULT_PARAM} \\\n     -DARROW_MIMALLOC=${ARROW_MIMALLOC:-ON} \\\n-    -DARROW_JSON=ON \\\n+    -DARROW_JSON=${ARROW_JSON:-ON} \\\n\nReview comment:\n       Great, thanks. I'd revert here and do that change in ARROW-13768. If you turn ARROW_JSON=OFF now, the build will fail (r/src/json.cpp won't compile). If you want to do the full offline build test in this PR, will probably need to do ARROW-13768 first. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T16:47:48.683+0000",
                    "updated": "2021-08-26T16:47:48.683+0000",
                    "started": "2021-08-26T16:47:48.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642443",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696870523\n\n\n\n##########\nFile path: r/tools/nixlibs.R\n##########\n@@ -329,18 +288,22 @@ build_libarrow <- function(src_dir, dst_dir) {\n     LDFLAGS = R_CMD_config(\"LDFLAGS\")\n   )\n   env_vars <- paste0(names(env_var_list), '=\"', env_var_list, '\"', collapse = \" \")\n+  # Add env variables like ARROW_S3=ON. Order doesn't matter. Depends on `download_ok`\n   env_vars <- with_s3_support(env_vars)\n   env_vars <- with_mimalloc(env_vars)\n-  if (tolower(Sys.info()[[\"sysname\"]]) %in% \"sunos\") {\n-    # jemalloc doesn't seem to build on Solaris\n-    # nor does thrift, so turn off parquet,\n-    # and arrowExports.cpp requires parquet for dataset (ARROW-11994), so turn that off\n-    # xsimd doesn't compile, so set SIMD level to NONE to skip it\n-    # re2 and utf8proc do compile,\n-    # but `ar` fails to build libarrow_bundled_dependencies, so turn them off\n-    # so that there are no bundled deps\n-    env_vars <- paste(env_vars, \"ARROW_JEMALLOC=OFF ARROW_PARQUET=OFF ARROW_DATASET=OFF ARROW_WITH_RE2=OFF ARROW_WITH_UTF8PROC=OFF EXTRA_CMAKE_FLAGS=-DARROW_SIMD_LEVEL=NONE\")\n-  }\n+  env_vars <- with_jemalloc(env_vars)\n\nReview comment:\n       If I read versions.txt correctly, I think you could get the env vars from the files like:\r\n   \r\n   ```\r\n   files <- dir(Sys.getenv(\"ARROW_THIRDPARTY_DEPENDENCY_DIR\"))\r\n   toupper(sub(\"(.*?)-.*\", \"ARROW_\\\\1_URL\", files))\r\n    [1] \"ARROW_ABSL_URL\"       \"ARROW_AWS_URL\"        \"ARROW_AWS_URL\"       \r\n    [4] \"ARROW_AWS_URL\"        \"ARROW_AWS_URL\"        \"ARROW_BOOST_URL\"     \r\n    [7] \"ARROW_BROTLI_URL\"     \"ARROW_BZIP2_URL\"      \"ARROW_CARES_URL\"     \r\n   [10] \"ARROW_GBENCHMARK_URL\" \"ARROW_GFLAGS_URL\"     \"ARROW_GLOG_URL\"      \r\n   [13] \"ARROW_GRPC_URL\"       \"ARROW_GTEST_URL\"      \"ARROW_JEMALLOC_URL\"  \r\n   [16] \"ARROW_LZ4_URL\"        \"ARROW_MIMALLOC_URL\"   \"ARROW_ORC_URL\"       \r\n   [19] \"ARROW_PROTOBUF_URL\"   \"ARROW_RAPIDJSON_URL\"  \"ARROW_RE2_URL\"       \r\n   [22] \"ARROW_SNAPPY_URL\"     \"ARROW_THRIFT_URL\"     \"ARROW_UTF8PROC_URL\"  \r\n   [25] \"ARROW_XSIMD_URL\"      \"ARROW_ZLIB_URL\"       \"ARROW_ZSTD_URL\"    \r\n   ```\r\n   \r\n   though the AWS ones need some special handling. I would just take whatever is in that dir and set those, don't worry about any being missing or whether someone has already set an env var for one of these (seems unlikely and worth discouraging). \r\n   \r\n   Agree that the download function should just return the dir it downloaded to. Could also print a message about setting that env var before building.\r\n   \r\n   Solaris doesn't turn JSON off because downloading isn't the problem on Solaris, and rapidjson compiles fine. It's somehow handled differently than the other third party dependencies so it doesn't go into `libarrow_bundled_dependencies.a`, the building of which seemed to be the problem on Solaris. Though I would be fine disabling it on solaris too, once that is an option--it just wasn't necessary when we were trying to get a passing build there.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T18:15:09.754+0000",
                    "updated": "2021-08-26T18:15:09.754+0000",
                    "started": "2021-08-26T18:15:09.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642505",
                    "issueId": "13382246"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/worklog/642582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "karldw commented on a change in pull request #11001:\nURL: https://github.com/apache/arrow/pull/11001#discussion_r696982101\n\n\n\n##########\nFile path: r/inst/build_arrow_static.sh\n##########\n@@ -59,7 +59,7 @@ ${CMAKE} -DARROW_BOOST_USE_SHARED=OFF \\\n     -DARROW_FILESYSTEM=ON \\\n     -DARROW_JEMALLOC=${ARROW_JEMALLOC:-$ARROW_DEFAULT_PARAM} \\\n     -DARROW_MIMALLOC=${ARROW_MIMALLOC:-ON} \\\n-    -DARROW_JSON=ON \\\n+    -DARROW_JSON=${ARROW_JSON:-ON} \\\n\nReview comment:\n       Great -- I'll revert this for now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T21:13:30.131+0000",
                    "updated": "2021-08-26T21:13:30.131+0000",
                    "started": "2021-08-26T21:13:30.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642582",
                    "issueId": "13382246"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 84600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@14027a8c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c4853fb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a5ff23a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4496a501[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50299ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@290872da[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c638be3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7d2c99c3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c720095[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6063163[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@162a8ed3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@f51ff54[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 102600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 07 14:52:09 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-07T14:52:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12981/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2021-06-04T23:28:52.000+0000",
        "updated": "2021-09-08T15:39:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Hello,\r\n\r\nI would like to install {{Arrow}} on Linux using only CRAN, without downloading additional files from Github, Apache, or Ursa Labs. I understand this is a big ask, and might not be a priority for you all. Feel free to close if you feel that this is out of scope.\r\n\r\nWhy is a CRAN-only installation useful?\r\n # It's common for organizations to set up firewalls that prevent arbitrary downloads, but allow access to their own internal CRAN mirror.\r\n ** Sometimes these firewalls also allow requests to Github, but often not.\r\n # On a broader level, my favorite thing about R is CRAN, the CRAN maintainers, and their [policy|https://cran.r-project.org/web/packages/policies.html#Source-packages] that \"Source packages may not contain any form of binary executable code.\" By distributing most of the Arrow code separately (either as source C++ or a compiled library), automated code archives and other source-based tools become much less useful.\r\n\r\nOf course, {{arrow}} isn't the only R package to depend on external libraries or distribute code separately. If a CRAN-only approach isn't viable, it would still be useful to have an all-offline method. I'm also having trouble getting an offline install to work, even with a local copy of the Arrow repo. (See the bottom of the script below.)\r\n\r\n\u00a0\r\n\r\nWhat does does installing offline look like now?\r\n Here's a bash script that approximates installing behind a firewall.\r\n{code:sh}\r\ngit clone --depth 1 git@github.com:apache/arrow.git test_arrow\r\n\r\ncd test_arrow\r\nwget 'https://cran.r-project.org/src/contrib/arrow_4.0.1.tar.gz'\r\n\r\n# Set up a temporary R library (optional)\r\nmkdir test_r_lib\r\nexport R_LIBS_USER=test_r_lib\r\n\r\nexport ARROW_R_DEV=true\r\nexport LIBARROW_MINIMAL=false\r\nexport LIBARROW_DOWNLOAD=false\r\nexport LIBARROW_BINARY=false\r\nexport LIBARROW_BUILD=true\r\n\r\n# These are all of the direct dependencies, including Suggests\r\n# This isn't required if the packages are already installed\r\nRscript -e \"install.packages(c('assertthat', 'bit64', 'purrr', 'R6', 'rlang', 'tidyselect', 'vctrs', 'cpp11', 'decor', 'distro', 'dplyr', 'hms', 'knitr', 'lubridate', 'pkgload', 'reticulate', 'rmarkdown', 'stringr', 'testthat', 'tibble', 'withr'))\"\r\n\r\n\r\n\r\n# Disable your internet connection here.\r\n\r\n\r\n\r\n# Now try to install the R package we downloaded with wget.\r\n# This is an approximation of being behind a firewall.\r\nRscript -e 'install.packages(\"arrow_4.0.1.tar.gz\", repos=NULL)'\r\n\r\n# It successfully installs the R component, but not the C++ library, \r\n# even with LIBARROW_BUILD=true\r\nRscript -e \"arrow::arrow_available()\"\r\n# [1] FALSE\r\n\r\n\r\n# As mentioned in the installation vignette, \r\n# we can R CMD INSTALL in the git repo.\r\n\r\nR CMD INSTALL r\r\n\r\n# This will try to build the C++ library, but fails when mimalloc and \r\n# jemalloc can't be downloaded from Github.\r\n# (Seems not to be affected by LIBARROW_DOWNLOAD=false).\r\n# When C++ compilation fails, the R component still installs.\r\n\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "23.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 84600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Install source package from CRAN alone",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": "Linux",
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17357898",
                    "id": "17357898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "There is a script to pre-download third-party dependencies for the C++ project, and then you have to set environment variables to point cmake at the files you downloaded: [https://arrow.apache.org/docs/developers/cpp/building.html#offline-builds]\r\n\r\nOpen to suggestions/PRs for facilitating this from the R package build scripts. I don't see us uploading a \"fat\" package to CRAN with all dependency sources included in the R tarball, but we could otherwise improve the offline experience.\r\n\r\nHowever, the easiest way to install behind a firewall would probably be to {{R CMD INSTALL --build-}}\u00a0(which I think within R would be {{install.packages(\"arrow\", INSTALL_opts = \"-build\")}}) (that's \"dash-dash build\", JIRA's formatting is screwing it up) on a system with internet access, and take the binary package that creates and copy it inside your system behind a firewall.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-06-05T15:45:41.019+0000",
                    "updated": "2021-06-05T15:47:05.429+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17358218",
                    "id": "17358218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks, let me think more about this!\r\n\r\nIs it tenable to include the Arrow C++ sources, but not the third-party dependencies? It looks like a compressed tar file of the\u00a0{{cpp}} directory is 2.6 MB.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-06T20:42:19.837+0000",
                    "updated": "2021-06-06T20:42:19.837+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17358654",
                    "id": "17358654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Possibly, though we'd need to think about what our workflow would look like for building and testing that setup, and it would be good to confirm that the benefits of doing so outweigh the costs. Open to suggestions.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-06-07T15:12:03.324+0000",
                    "updated": "2021-06-07T15:12:03.324+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17358674",
                    "id": "17358674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "And to add to Neal's comment: the workflow around the third-party dependencies during install, how to install them or find the local source, how to message that they aren't available and what that means, etc. \r\n\r\nWe already [do some of that for a handful of the dependencies we always use the system versions of|https://github.com/apache/arrow/blob/master/r/tools/nixlibs.R#L416-L434]. But I don't think we want to (or should) duplicate that setup for all of the third-party dependencies we have.\r\n\r\nI would be curious: does your air-gapped server already have many of the [third party dependencies|https://github.com/apache/arrow/blob/master/docs/source/developers/cpp/building.rst#build-dependency-management] that Arrow generally/by default looks for system versions of and then/builds if they are not available? Or are those things that you would also need to have installed / get the source of during the build process?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-07T15:43:55.848+0000",
                    "updated": "2021-06-07T15:43:55.848+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17358889",
                    "id": "17358889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "In my case, most of the third-party dependencies would not be installed, but if they are in the standard OS repos, I could ask a sysadmin to install them. Established and widely used tools like cURL, OpenSSL, bzip2, and gcc would be available. I don't know how widely representative my experience is, though various types of air-gaps seem somewhat common.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-07T22:05:24.462+0000",
                    "updated": "2021-06-07T22:05:24.462+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17358891",
                    "id": "17358891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I see. To be able to use the system packages for compression etc., there's other work that needs to be done as well. See\u00a0ARROW-11460 and issues referenced there. It's possible, just requires some focused effort.\r\n\r\nIf having a sysadmin install dependencies is an option, what about installing apache-arrow et al. that way?\u00a0 [https://arrow.apache.org/install/]\r\n\r\nIf the arrow system packages are installed, the R source package doesn't need anything else. The downside/risk is that you have to be sure to upgrade both the system packages and the R package together\u2013if you upgrade the arrow system packages but not the R package, the R package won't load until you reinstall the matching version.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-06-07T22:11:35.324+0000",
                    "updated": "2021-06-07T22:11:35.324+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17360167",
                    "id": "17360167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Adding new system software sources is a hard sell, so I think having a sysadmin install dependencies isn't a great solution for me until the dependencies are in the official Debian/RHEL software sources.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-09T15:49:48.898+0000",
                    "updated": "2021-06-09T15:49:48.898+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17372927",
                    "id": "17372927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thank you for all of this great info \u2014 it's been invaluable as I was working on ARROW-13199. I think that I will have the solution proposed above as part of that ticket, but I will close this one only when that other ticket is merged + we confirm that it does, indeed solve this problem.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-01T16:55:33.022+0000",
                    "updated": "2021-07-01T16:55:33.022+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17373240",
                    "id": "17373240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I think ARROW-13199 completely solves the LTO issues in I reported ARROW-12853. (Thanks for picking up my small findings into a much more useful PR!) But those two issues seem a little different than the installation challenges I was thinking about in this thread. Was your comment meant for ARROW-12853?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-02T05:39:02.774+0000",
                    "updated": "2021-07-02T05:39:02.774+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17373491",
                    "id": "17373491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Yes! Sorry, I had too many jira windows open at once and put this on the wrong comment. This should be on ARROW-12853 instead!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-07-02T12:40:11.676+0000",
                    "updated": "2021-07-02T12:40:11.676+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17400415",
                    "id": "17400415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I was thinking some more about how we might do this. I need to confirm, but I think that if we put a copy of {{cpp/}} inside of the {{tools}} directory in the package, it will be available at build time, but it shouldn't affect the size of the mac/windows binary packages (unlike if we put the source inside of {{inst}}). I would then add r/tools/cpp to .gitignore, and add a rsync step to copy there to {{make build}}, so that when I prepare the package for release, the cpp source would get updated. The find_local_source() function in tools/nixlibs.R could then be modified to also check inside tools/cpp for source. We would test this path in the ursa-labs/arrow-r-nightly packaging builds, though we could also devise a test build in arrow's CI.\r\n\r\nThere would then be two additional steps required for a full offline build, I think:\r\n\r\n* Detect whether there is an internet connection at install time, and if not, disable any feature that requires a third-party dependency download. So you'd get arrow/feather, general conversion to/from R and Python, probably CSV reading/writing, but no parquet, dataset, etc.\r\n* Provide a helper to download and bundle up those extra dependency downloads (wrapping the existing cpp script)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-08-17T14:01:42.207+0000",
                    "updated": "2021-08-17T14:01:42.207+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17402683",
                    "id": "17402683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "That sounds really promising! If you'd like, I can take a stab at a PR.\r\n\r\n \r\nA couple miscellaneous questions:\r\n* Should the helper you mentioned be an R function (wrapping the existing cpp script) included in the package? Or did you have something else in mind? \r\n* Currently if {{LIBARROW_BINARY}} is {{false}} and {{LIBARROW_DOWNLOAD}} is {{true}}, the package will download the C++ code from the apache.org server and compile it. Should it just use the included {{tools/cpp}} code instead?\r\n * One way to write the tests would be to have an environment variable that prevents the code from attempting downloads (as opposed to actually blocking the R session's access to the internet). I think {{LIBARROW_DOWNLOAD}} already prevents downloading for the C++ library, but not the dependencies. Can I change the scope of {{LIBARROW_DOWNLOAD=false}} to also block downloading dependencies? Or would it make sense to add another variable?\r\n\r\n\r\nh5. If I'm thinking about this correctly, there will be two possible user workflows.\r\n\r\nLet me know if you had something else in mind!\r\n\r\nh6. Option 1:\r\n1. Install the {{arrow}} package from (a local mirror of) CRAN\r\n  * this will include a feature-light version of the C++ library\r\n  * the install process will automatically detect that it can't download the C++ library and extra dependencies aren't available\r\n\r\n2. Use the package with some features missing\r\n\r\n\r\nh6. Option 2:\r\n1. Install the R package somewhere with internet access\r\n2. Run the helper function to download the extra dependencies\r\n3. Copy the dependencies to the firewalled environment\r\n4. Set the appropriate environment variables to use the downloaded dependencies\r\n5. Install the package\r\n  * this will build the C++ library from {{tools/cpp}} and the downloaded dependencies\r\n\r\n6. Use the package with all desired features\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=karldw",
                        "name": "karldw",
                        "key": "karldw",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=karldw&avatarId=39070",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=karldw&avatarId=39070",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=karldw&avatarId=39070",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=karldw&avatarId=39070"
                        },
                        "displayName": "Karl Dunkle Werner",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-21T19:50:15.456+0000",
                    "updated": "2021-08-21T19:50:15.456+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382246/comment/17411286",
                    "id": "17411286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 11001\n[https://github.com/apache/arrow/pull/11001]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
                        "name": "jonkeane",
                        "key": "jonkeane",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Jonathan Keane",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-07T14:52:09.173+0000",
                    "updated": "2021-09-07T14:52:09.173+0000"
                }
            ],
            "maxResults": 13,
            "total": 13,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rojs:",
        "customfield_12314139": null
    }
}