{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13239320",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320",
    "key": "ARROW-5594",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12563187",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12563187",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "inwardIssue": {
                    "id": "13222906",
                    "key": "ARROW-4975",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13222906",
                    "fields": {
                        "summary": "[C++] Support concatenation of UnionArrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12563188",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12563188",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "inwardIssue": {
                    "id": "13239280",
                    "key": "ARROW-5588",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280",
                    "fields": {
                        "summary": "[C++] Better support for building UnionArrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12570069",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12570069",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13227000",
                    "key": "ARROW-5151",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13227000",
                    "fields": {
                        "summary": "[C++] Support take from UnionArray, ListArray, StructArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5594/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/276077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4866: ARROW-5594: add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866\n \n \n   Take and Filter kernels should now be able to operate on arrays of any type.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-12T19:02:43.089+0000",
                    "updated": "2019-07-12T19:02:43.089+0000",
                    "started": "2019-07-12T19:02:43.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "276077",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306868728\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n+    RETURN_NOT_OK(null_bitmap_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(type_id_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+      null_bitmap_builder_->UnsafeAppend(is_valid);\n+      type_id_builder_->UnsafeAppend(type_ids[index]);\n+      child_counts[type_ids[index]] += is_valid;\n+      return Status::OK();\n+    }));\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      // bounds checking was done while appending to the null bitmap\n+      indices.set_never_out_of_bounds();\n+\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        RETURN_NOT_OK(sparse_children_[i]->Take(*union_array.child(i), indices));\n+      }\n+    } else {\n+      // Gathering from the offsets into child arrays is a bit tricky.\n+      // Allocate temporary storage for the offsets of all valid slots\n+      std::shared_ptr<Buffer> child_offsets_storage;\n+      RETURN_NOT_OK(AllocateBuffer(\n+          pool_, (indices.length() - indices.null_count()) * sizeof(int32_t),\n+          &child_offsets_storage));\n+\n+      // Partition offsets by type_id: child_offset_partitions[type_id] will\n+      // point to storage for child_counts[type_id] offsets\n+      std::vector<int32_t*> child_offset_partitions(child_counts.size());\n+      auto child_offsets_storage_data = GetInt32(child_offsets_storage);\n+      for (auto type_id : union_type_->type_codes()) {\n+        child_offset_partitions[type_id] = child_offsets_storage_data;\n+        child_offsets_storage_data += child_counts[type_id];\n+      }\n+\n+      // Fill child_offsets_storage with the taken offsets\n+      RETURN_NOT_OK(offset_builder_->Reserve(indices.length()));\n+      RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+        auto type_id = type_ids[index];\n+        if (is_valid) {\n+          offset_builder_->UnsafeAppend(child_length_[type_id]++);\n+          *child_offset_partitions[type_id] = union_array.value_offset(index);\n+          ++child_offset_partitions[type_id];\n+        } else {\n+          offset_builder_->UnsafeAppend(0);\n+        }\n+        return Status::OK();\n+      }));\n+\n+      // Take from each child at those offsets\n+      int64_t taken_offset_begin = 0;\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        auto type_id = union_type_->type_codes()[i];\n+        auto length = child_counts[type_id];\n+        Int32Array taken_offsets(length, SliceBuffer(child_offsets_storage,\n+                                                     sizeof(int32_t) * taken_offset_begin,\n+                                                     sizeof(int32_t) * length));\n+        ArrayIndexSequence<Int32Type> child_indices(taken_offsets);\n+        child_indices.never_out_of_bounds();\n \n Review comment:\n   You mean `child_indices.set_never_out_of_bounds()`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:17:17.779+0000",
                    "updated": "2019-07-24T15:17:17.779+0000",
                    "started": "2019-07-24T15:17:17.779+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282020",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306868360\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n+    RETURN_NOT_OK(null_bitmap_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(type_id_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+      null_bitmap_builder_->UnsafeAppend(is_valid);\n+      type_id_builder_->UnsafeAppend(type_ids[index]);\n+      child_counts[type_ids[index]] += is_valid;\n+      return Status::OK();\n+    }));\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      // bounds checking was done while appending to the null bitmap\n+      indices.set_never_out_of_bounds();\n+\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        RETURN_NOT_OK(sparse_children_[i]->Take(*union_array.child(i), indices));\n+      }\n+    } else {\n+      // Gathering from the offsets into child arrays is a bit tricky.\n+      // Allocate temporary storage for the offsets of all valid slots\n+      std::shared_ptr<Buffer> child_offsets_storage;\n+      RETURN_NOT_OK(AllocateBuffer(\n+          pool_, (indices.length() - indices.null_count()) * sizeof(int32_t),\n+          &child_offsets_storage));\n+\n+      // Partition offsets by type_id: child_offset_partitions[type_id] will\n+      // point to storage for child_counts[type_id] offsets\n+      std::vector<int32_t*> child_offset_partitions(child_counts.size());\n+      auto child_offsets_storage_data = GetInt32(child_offsets_storage);\n+      for (auto type_id : union_type_->type_codes()) {\n+        child_offset_partitions[type_id] = child_offsets_storage_data;\n+        child_offsets_storage_data += child_counts[type_id];\n+      }\n+\n+      // Fill child_offsets_storage with the taken offsets\n+      RETURN_NOT_OK(offset_builder_->Reserve(indices.length()));\n+      RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+        auto type_id = type_ids[index];\n+        if (is_valid) {\n+          offset_builder_->UnsafeAppend(child_length_[type_id]++);\n+          *child_offset_partitions[type_id] = union_array.value_offset(index);\n+          ++child_offset_partitions[type_id];\n+        } else {\n+          offset_builder_->UnsafeAppend(0);\n+        }\n+        return Status::OK();\n+      }));\n+\n+      // Take from each child at those offsets\n+      int64_t taken_offset_begin = 0;\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        auto type_id = union_type_->type_codes()[i];\n+        auto length = child_counts[type_id];\n+        Int32Array taken_offsets(length, SliceBuffer(child_offsets_storage,\n+                                                     sizeof(int32_t) * taken_offset_begin,\n+                                                     sizeof(int32_t) * length));\n+        ArrayIndexSequence<Int32Type> child_indices(taken_offsets);\n+        child_indices.never_out_of_bounds();\n+        RETURN_NOT_OK(dense_children_[i]->Take(*union_array.child(i), child_indices));\n+        taken_offset_begin += length;\n+      }\n+    }\n \n Review comment:\n   Add something like `DCHECK_EQ(taken_offset_begin * sizeof(int32_t), child_offsets_storage->size())`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:17:17.782+0000",
                    "updated": "2019-07-24T15:17:17.782+0000",
                    "started": "2019-07-24T15:17:17.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282021",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306868918\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n \n Review comment:\n   `child_counts` is only used for dense arrays, right?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:17:17.808+0000",
                    "updated": "2019-07-24T15:17:17.808+0000",
                    "started": "2019-07-24T15:17:17.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282022",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282023",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306861653\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -644,8 +644,10 @@ class UnionConverter final : public ConcreteConverter<UnionConverter> {\n   }\n \n   Status AppendNull() override {\n-    for (auto& converter : child_converters_) {\n-      RETURN_NOT_OK(converter->AppendNull());\n+    if (mode_ == UnionMode::SPARSE) {\n \n Review comment:\n   Interesting. Is there a way to test for this in `json-simple-test`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:17:22.821+0000",
                    "updated": "2019-07-24T15:17:22.821+0000",
                    "started": "2019-07-24T15:17:22.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282023",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306872515\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -644,8 +644,10 @@ class UnionConverter final : public ConcreteConverter<UnionConverter> {\n   }\n \n   Status AppendNull() override {\n-    for (auto& converter : child_converters_) {\n-      RETURN_NOT_OK(converter->AppendNull());\n+    if (mode_ == UnionMode::SPARSE) {\n \n Review comment:\n   This wasn't producing *invalid* dense union arrays (I think) just ones which weren't very dense :) . I could add a test checking that the first `T` in a union from JSON always the first value in the `T` member of the created array\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:22:14.903+0000",
                    "updated": "2019-07-24T15:22:14.903+0000",
                    "started": "2019-07-24T15:22:14.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282029",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306874857\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n \n Review comment:\n   True, and I can move this block into the union mode branches and avoid accumulating child_counts in the sparse case. I was trying to minimize code duplication and `child_counts` seemed cheap\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:26:18.740+0000",
                    "updated": "2019-07-24T15:26:18.740+0000",
                    "started": "2019-07-24T15:26:18.740+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282033",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306875078\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n+    RETURN_NOT_OK(null_bitmap_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(type_id_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+      null_bitmap_builder_->UnsafeAppend(is_valid);\n+      type_id_builder_->UnsafeAppend(type_ids[index]);\n+      child_counts[type_ids[index]] += is_valid;\n+      return Status::OK();\n+    }));\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      // bounds checking was done while appending to the null bitmap\n+      indices.set_never_out_of_bounds();\n+\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        RETURN_NOT_OK(sparse_children_[i]->Take(*union_array.child(i), indices));\n+      }\n+    } else {\n+      // Gathering from the offsets into child arrays is a bit tricky.\n+      // Allocate temporary storage for the offsets of all valid slots\n+      std::shared_ptr<Buffer> child_offsets_storage;\n+      RETURN_NOT_OK(AllocateBuffer(\n+          pool_, (indices.length() - indices.null_count()) * sizeof(int32_t),\n+          &child_offsets_storage));\n+\n+      // Partition offsets by type_id: child_offset_partitions[type_id] will\n+      // point to storage for child_counts[type_id] offsets\n+      std::vector<int32_t*> child_offset_partitions(child_counts.size());\n+      auto child_offsets_storage_data = GetInt32(child_offsets_storage);\n+      for (auto type_id : union_type_->type_codes()) {\n+        child_offset_partitions[type_id] = child_offsets_storage_data;\n+        child_offsets_storage_data += child_counts[type_id];\n+      }\n+\n+      // Fill child_offsets_storage with the taken offsets\n+      RETURN_NOT_OK(offset_builder_->Reserve(indices.length()));\n+      RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+        auto type_id = type_ids[index];\n+        if (is_valid) {\n+          offset_builder_->UnsafeAppend(child_length_[type_id]++);\n+          *child_offset_partitions[type_id] = union_array.value_offset(index);\n+          ++child_offset_partitions[type_id];\n+        } else {\n+          offset_builder_->UnsafeAppend(0);\n+        }\n+        return Status::OK();\n+      }));\n+\n+      // Take from each child at those offsets\n+      int64_t taken_offset_begin = 0;\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        auto type_id = union_type_->type_codes()[i];\n+        auto length = child_counts[type_id];\n+        Int32Array taken_offsets(length, SliceBuffer(child_offsets_storage,\n+                                                     sizeof(int32_t) * taken_offset_begin,\n+                                                     sizeof(int32_t) * length));\n+        ArrayIndexSequence<Int32Type> child_indices(taken_offsets);\n+        child_indices.never_out_of_bounds();\n \n Review comment:\n   Yes, thanks\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:26:40.343+0000",
                    "updated": "2019-07-24T15:26:40.343+0000",
                    "started": "2019-07-24T15:26:40.342+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282034",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306875716\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -644,8 +644,10 @@ class UnionConverter final : public ConcreteConverter<UnionConverter> {\n   }\n \n   Status AppendNull() override {\n-    for (auto& converter : child_converters_) {\n-      RETURN_NOT_OK(converter->AppendNull());\n+    if (mode_ == UnionMode::SPARSE) {\n \n Review comment:\n   I wonder if `ValidateArray` should check that dense arrays really are dense :-) (for example simply by adding lengths of all child arrays). Perhaps open a JIRA if you don't want to do so here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:27:51.683+0000",
                    "updated": "2019-07-24T15:27:51.683+0000",
                    "started": "2019-07-24T15:27:51.682+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282035",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306876109\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n+    RETURN_NOT_OK(null_bitmap_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(type_id_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+      null_bitmap_builder_->UnsafeAppend(is_valid);\n+      type_id_builder_->UnsafeAppend(type_ids[index]);\n+      child_counts[type_ids[index]] += is_valid;\n+      return Status::OK();\n+    }));\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      // bounds checking was done while appending to the null bitmap\n+      indices.set_never_out_of_bounds();\n+\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        RETURN_NOT_OK(sparse_children_[i]->Take(*union_array.child(i), indices));\n+      }\n+    } else {\n+      // Gathering from the offsets into child arrays is a bit tricky.\n+      // Allocate temporary storage for the offsets of all valid slots\n+      std::shared_ptr<Buffer> child_offsets_storage;\n+      RETURN_NOT_OK(AllocateBuffer(\n+          pool_, (indices.length() - indices.null_count()) * sizeof(int32_t),\n+          &child_offsets_storage));\n+\n+      // Partition offsets by type_id: child_offset_partitions[type_id] will\n+      // point to storage for child_counts[type_id] offsets\n+      std::vector<int32_t*> child_offset_partitions(child_counts.size());\n+      auto child_offsets_storage_data = GetInt32(child_offsets_storage);\n+      for (auto type_id : union_type_->type_codes()) {\n+        child_offset_partitions[type_id] = child_offsets_storage_data;\n+        child_offsets_storage_data += child_counts[type_id];\n+      }\n+\n+      // Fill child_offsets_storage with the taken offsets\n+      RETURN_NOT_OK(offset_builder_->Reserve(indices.length()));\n+      RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+        auto type_id = type_ids[index];\n+        if (is_valid) {\n+          offset_builder_->UnsafeAppend(child_length_[type_id]++);\n+          *child_offset_partitions[type_id] = union_array.value_offset(index);\n+          ++child_offset_partitions[type_id];\n+        } else {\n+          offset_builder_->UnsafeAppend(0);\n+        }\n+        return Status::OK();\n+      }));\n+\n+      // Take from each child at those offsets\n+      int64_t taken_offset_begin = 0;\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        auto type_id = union_type_->type_codes()[i];\n+        auto length = child_counts[type_id];\n+        Int32Array taken_offsets(length, SliceBuffer(child_offsets_storage,\n+                                                     sizeof(int32_t) * taken_offset_begin,\n+                                                     sizeof(int32_t) * length));\n+        ArrayIndexSequence<Int32Type> child_indices(taken_offsets);\n+        child_indices.never_out_of_bounds();\n+        RETURN_NOT_OK(dense_children_[i]->Take(*union_array.child(i), child_indices));\n+        taken_offset_begin += length;\n+      }\n+    }\n \n Review comment:\n   `child_offsets_storage->size()` might be larger than that if the union array also has nulls\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:28:35.883+0000",
                    "updated": "2019-07-24T15:28:35.883+0000",
                    "started": "2019-07-24T15:28:35.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282036",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306875716\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -644,8 +644,10 @@ class UnionConverter final : public ConcreteConverter<UnionConverter> {\n   }\n \n   Status AppendNull() override {\n-    for (auto& converter : child_converters_) {\n-      RETURN_NOT_OK(converter->AppendNull());\n+    if (mode_ == UnionMode::SPARSE) {\n \n Review comment:\n   I wonder if `ValidateArray` should check that dense arrays really are dense :-) (for example simply by adding lengths of all child arrays). Perhaps open a JIRA if you don't want to do so here.\r\n   \r\n   Scratch that: there may be legitimate uses for non-dense \"dense\" arrays.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:29:00.158+0000",
                    "updated": "2019-07-24T15:29:00.158+0000",
                    "started": "2019-07-24T15:29:00.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282037",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306877365\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -644,8 +644,10 @@ class UnionConverter final : public ConcreteConverter<UnionConverter> {\n   }\n \n   Status AppendNull() override {\n-    for (auto& converter : child_converters_) {\n-      RETURN_NOT_OK(converter->AppendNull());\n+    if (mode_ == UnionMode::SPARSE) {\n \n Review comment:\n   Scratched; would you still like the test? Even if less-than-maximally-dense union arrays have an application, we probably don't want `ArrayFromJSON` to produce any\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:30:49.114+0000",
                    "updated": "2019-07-24T15:30:49.114+0000",
                    "started": "2019-07-24T15:30:49.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282038",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306878626\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n+    RETURN_NOT_OK(null_bitmap_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(type_id_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+      null_bitmap_builder_->UnsafeAppend(is_valid);\n+      type_id_builder_->UnsafeAppend(type_ids[index]);\n+      child_counts[type_ids[index]] += is_valid;\n+      return Status::OK();\n+    }));\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      // bounds checking was done while appending to the null bitmap\n+      indices.set_never_out_of_bounds();\n+\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        RETURN_NOT_OK(sparse_children_[i]->Take(*union_array.child(i), indices));\n+      }\n+    } else {\n+      // Gathering from the offsets into child arrays is a bit tricky.\n+      // Allocate temporary storage for the offsets of all valid slots\n+      std::shared_ptr<Buffer> child_offsets_storage;\n+      RETURN_NOT_OK(AllocateBuffer(\n+          pool_, (indices.length() - indices.null_count()) * sizeof(int32_t),\n+          &child_offsets_storage));\n+\n+      // Partition offsets by type_id: child_offset_partitions[type_id] will\n+      // point to storage for child_counts[type_id] offsets\n+      std::vector<int32_t*> child_offset_partitions(child_counts.size());\n+      auto child_offsets_storage_data = GetInt32(child_offsets_storage);\n+      for (auto type_id : union_type_->type_codes()) {\n+        child_offset_partitions[type_id] = child_offsets_storage_data;\n+        child_offsets_storage_data += child_counts[type_id];\n+      }\n+\n+      // Fill child_offsets_storage with the taken offsets\n+      RETURN_NOT_OK(offset_builder_->Reserve(indices.length()));\n+      RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+        auto type_id = type_ids[index];\n+        if (is_valid) {\n+          offset_builder_->UnsafeAppend(child_length_[type_id]++);\n+          *child_offset_partitions[type_id] = union_array.value_offset(index);\n+          ++child_offset_partitions[type_id];\n+        } else {\n+          offset_builder_->UnsafeAppend(0);\n+        }\n+        return Status::OK();\n+      }));\n+\n+      // Take from each child at those offsets\n+      int64_t taken_offset_begin = 0;\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        auto type_id = union_type_->type_codes()[i];\n+        auto length = child_counts[type_id];\n+        Int32Array taken_offsets(length, SliceBuffer(child_offsets_storage,\n+                                                     sizeof(int32_t) * taken_offset_begin,\n+                                                     sizeof(int32_t) * length));\n+        ArrayIndexSequence<Int32Type> child_indices(taken_offsets);\n+        child_indices.never_out_of_bounds();\n+        RETURN_NOT_OK(dense_children_[i]->Take(*union_array.child(i), child_indices));\n+        taken_offset_begin += length;\n+      }\n+    }\n \n Review comment:\n   Shouldn't the sum of all `child_counts` be equal to `(indices.length() - indices.null_count()) * sizeof(int32_t)`, which is also the size of the `child_offsets_storage`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:33:17.137+0000",
                    "updated": "2019-07-24T15:33:17.137+0000",
                    "started": "2019-07-24T15:33:17.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282039",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306878626\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n+    RETURN_NOT_OK(null_bitmap_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(type_id_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+      null_bitmap_builder_->UnsafeAppend(is_valid);\n+      type_id_builder_->UnsafeAppend(type_ids[index]);\n+      child_counts[type_ids[index]] += is_valid;\n+      return Status::OK();\n+    }));\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      // bounds checking was done while appending to the null bitmap\n+      indices.set_never_out_of_bounds();\n+\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        RETURN_NOT_OK(sparse_children_[i]->Take(*union_array.child(i), indices));\n+      }\n+    } else {\n+      // Gathering from the offsets into child arrays is a bit tricky.\n+      // Allocate temporary storage for the offsets of all valid slots\n+      std::shared_ptr<Buffer> child_offsets_storage;\n+      RETURN_NOT_OK(AllocateBuffer(\n+          pool_, (indices.length() - indices.null_count()) * sizeof(int32_t),\n+          &child_offsets_storage));\n+\n+      // Partition offsets by type_id: child_offset_partitions[type_id] will\n+      // point to storage for child_counts[type_id] offsets\n+      std::vector<int32_t*> child_offset_partitions(child_counts.size());\n+      auto child_offsets_storage_data = GetInt32(child_offsets_storage);\n+      for (auto type_id : union_type_->type_codes()) {\n+        child_offset_partitions[type_id] = child_offsets_storage_data;\n+        child_offsets_storage_data += child_counts[type_id];\n+      }\n+\n+      // Fill child_offsets_storage with the taken offsets\n+      RETURN_NOT_OK(offset_builder_->Reserve(indices.length()));\n+      RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+        auto type_id = type_ids[index];\n+        if (is_valid) {\n+          offset_builder_->UnsafeAppend(child_length_[type_id]++);\n+          *child_offset_partitions[type_id] = union_array.value_offset(index);\n+          ++child_offset_partitions[type_id];\n+        } else {\n+          offset_builder_->UnsafeAppend(0);\n+        }\n+        return Status::OK();\n+      }));\n+\n+      // Take from each child at those offsets\n+      int64_t taken_offset_begin = 0;\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        auto type_id = union_type_->type_codes()[i];\n+        auto length = child_counts[type_id];\n+        Int32Array taken_offsets(length, SliceBuffer(child_offsets_storage,\n+                                                     sizeof(int32_t) * taken_offset_begin,\n+                                                     sizeof(int32_t) * length));\n+        ArrayIndexSequence<Int32Type> child_indices(taken_offsets);\n+        child_indices.never_out_of_bounds();\n+        RETURN_NOT_OK(dense_children_[i]->Take(*union_array.child(i), child_indices));\n+        taken_offset_begin += length;\n+      }\n+    }\n \n Review comment:\n   Shouldn't the sum of all `child_counts` be equal to `(indices.length() - indices.null_count())`, which is also the size of the `child_offsets_storage / sizeof(int32_t)`?\r\n   \r\n   Edit: hmm, I understand. `is_valid` as passed by `VisitIndices` also depends on the null bitmap of the taken-from array, right?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:34:04.886+0000",
                    "updated": "2019-07-24T15:34:04.886+0000",
                    "started": "2019-07-24T15:34:04.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282040",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306879315\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/json-simple.cc\n ##########\n @@ -644,8 +644,10 @@ class UnionConverter final : public ConcreteConverter<UnionConverter> {\n   }\n \n   Status AppendNull() override {\n-    for (auto& converter : child_converters_) {\n-      RETURN_NOT_OK(converter->AppendNull());\n+    if (mode_ == UnionMode::SPARSE) {\n \n Review comment:\n   Yes, a basic test would suffice.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T15:34:41.802+0000",
                    "updated": "2019-07-24T15:34:41.802+0000",
                    "started": "2019-07-24T15:34:41.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282041",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#discussion_r306898241\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take-internal.h\n ##########\n @@ -455,20 +493,181 @@ class TakerImpl<IndexSequence, StructType> : public Taker<IndexSequence> {\n   std::vector<std::unique_ptr<Taker<IndexSequence>>> children_;\n };\n \n+template <typename IndexSequence>\n+class TakerImpl<IndexSequence, UnionType> : public Taker<IndexSequence> {\n+ public:\n+  using Taker<IndexSequence>::Taker;\n+\n+  Status Init() override {\n+    union_type_ = checked_cast<const UnionType*>(this->type_.get());\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      sparse_children_.resize(this->type_->num_children());\n+    } else {\n+      dense_children_.resize(this->type_->num_children());\n+      child_length_.resize(union_type_->max_type_code() + 1);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(Taker<IndexSequence>::Make(this->type_->child(i)->type(),\n+                                                 &sparse_children_[i]));\n+      } else {\n+        RETURN_NOT_OK(Taker<ArrayIndexSequence<Int32Type>>::Make(\n+            this->type_->child(i)->type(), &dense_children_[i]));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status SetContext(FunctionContext* ctx) override {\n+    pool_ = ctx->memory_pool();\n+    null_bitmap_builder_.reset(new TypedBufferBuilder<bool>(pool_));\n+    type_id_builder_.reset(new TypedBufferBuilder<int8_t>(pool_));\n+\n+    if (union_type_->mode() == UnionMode::DENSE) {\n+      offset_builder_.reset(new TypedBufferBuilder<int32_t>(pool_));\n+      std::fill(child_length_.begin(), child_length_.end(), 0);\n+    }\n+\n+    for (int i = 0; i < this->type_->num_children(); ++i) {\n+      if (union_type_->mode() == UnionMode::SPARSE) {\n+        RETURN_NOT_OK(sparse_children_[i]->SetContext(ctx));\n+      } else {\n+        RETURN_NOT_OK(dense_children_[i]->SetContext(ctx));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Take(const Array& values, IndexSequence indices) override {\n+    DCHECK(this->type_->Equals(values.type()));\n+    const auto& union_array = checked_cast<const UnionArray&>(values);\n+    auto type_ids = union_array.raw_type_ids();\n+\n+    std::vector<uint32_t> child_counts(union_type_->max_type_code() + 1);\n+    RETURN_NOT_OK(null_bitmap_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(type_id_builder_->Reserve(indices.length()));\n+    RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+      null_bitmap_builder_->UnsafeAppend(is_valid);\n+      type_id_builder_->UnsafeAppend(type_ids[index]);\n+      child_counts[type_ids[index]] += is_valid;\n+      return Status::OK();\n+    }));\n+\n+    if (union_type_->mode() == UnionMode::SPARSE) {\n+      // bounds checking was done while appending to the null bitmap\n+      indices.set_never_out_of_bounds();\n+\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        RETURN_NOT_OK(sparse_children_[i]->Take(*union_array.child(i), indices));\n+      }\n+    } else {\n+      // Gathering from the offsets into child arrays is a bit tricky.\n+      // Allocate temporary storage for the offsets of all valid slots\n+      std::shared_ptr<Buffer> child_offsets_storage;\n+      RETURN_NOT_OK(AllocateBuffer(\n+          pool_, (indices.length() - indices.null_count()) * sizeof(int32_t),\n+          &child_offsets_storage));\n+\n+      // Partition offsets by type_id: child_offset_partitions[type_id] will\n+      // point to storage for child_counts[type_id] offsets\n+      std::vector<int32_t*> child_offset_partitions(child_counts.size());\n+      auto child_offsets_storage_data = GetInt32(child_offsets_storage);\n+      for (auto type_id : union_type_->type_codes()) {\n+        child_offset_partitions[type_id] = child_offsets_storage_data;\n+        child_offsets_storage_data += child_counts[type_id];\n+      }\n+\n+      // Fill child_offsets_storage with the taken offsets\n+      RETURN_NOT_OK(offset_builder_->Reserve(indices.length()));\n+      RETURN_NOT_OK(VisitIndices(indices, values, [&](int64_t index, bool is_valid) {\n+        auto type_id = type_ids[index];\n+        if (is_valid) {\n+          offset_builder_->UnsafeAppend(child_length_[type_id]++);\n+          *child_offset_partitions[type_id] = union_array.value_offset(index);\n+          ++child_offset_partitions[type_id];\n+        } else {\n+          offset_builder_->UnsafeAppend(0);\n+        }\n+        return Status::OK();\n+      }));\n+\n+      // Take from each child at those offsets\n+      int64_t taken_offset_begin = 0;\n+      for (int i = 0; i < this->type_->num_children(); ++i) {\n+        auto type_id = union_type_->type_codes()[i];\n+        auto length = child_counts[type_id];\n+        Int32Array taken_offsets(length, SliceBuffer(child_offsets_storage,\n+                                                     sizeof(int32_t) * taken_offset_begin,\n+                                                     sizeof(int32_t) * length));\n+        ArrayIndexSequence<Int32Type> child_indices(taken_offsets);\n+        child_indices.never_out_of_bounds();\n+        RETURN_NOT_OK(dense_children_[i]->Take(*union_array.child(i), child_indices));\n+        taken_offset_begin += length;\n+      }\n+    }\n \n Review comment:\n   Exactly\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T16:12:05.247+0000",
                    "updated": "2019-07-24T16:12:05.247+0000",
                    "started": "2019-07-24T16:12:05.246+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282059",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866#issuecomment-514818280\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4866?src=pr&el=h1) Report\n   > Merging [#4866](https://codecov.io/gh/apache/arrow/pull/4866?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/85fe33653b6ba8b72e1af2d64abb759aa7aa50e7?src=pr&el=desc) will **increase** coverage by `1.64%`.\n   > The diff coverage is `98.15%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4866/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4866?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4866      +/-   ##\n   ==========================================\n   + Coverage   87.46%    89.1%   +1.64%     \n   ==========================================\n     Files         994      717     -277     \n     Lines      140389   100548   -39841     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       122788    89591   -33197     \n   + Misses      17239    10957    -6282     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4866?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/kernels/take.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvdGFrZS5jYw==) | `97.29% <100%> (-0.62%)` | :arrow_down: |\n   | [cpp/src/arrow/ipc/json-simple-test.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1zaW1wbGUtdGVzdC5jYw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/take-test.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvdGFrZS10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/filter.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvZmlsdGVyLmNj) | `98.03% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/filter-test.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvZmlsdGVyLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/ipc/json-simple.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvanNvbi1zaW1wbGUuY2M=) | `98.38% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/take-internal.h](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvdGFrZS1pbnRlcm5hbC5o) | `94.67% <97.45%> (+2.77%)` | :arrow_up: |\n   | [cpp/src/arrow/json/converter.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9qc29uL2NvbnZlcnRlci5jYw==) | `90.53% <0%> (-1.78%)` | :arrow_down: |\n   | [cpp/src/arrow/json/chunked-builder.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9qc29uL2NodW5rZWQtYnVpbGRlci5jYw==) | `79.91% <0%> (-1.68%)` | :arrow_down: |\n   | [cpp/src/arrow/csv/parser-test.cc](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcGFyc2VyLXRlc3QuY2M=) | `98.61% <0%> (-1.39%)` | :arrow_down: |\n   | ... and [295 more](https://codecov.io/gh/apache/arrow/pull/4866/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4866?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4866?src=pr&el=footer). Last update [85fe336...2e2e589](https://codecov.io/gh/apache/arrow/pull/4866?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-24T22:09:44.771+0000",
                    "updated": "2019-07-24T22:09:44.771+0000",
                    "started": "2019-07-24T22:09:44.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282317",
                    "issueId": "13239320"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/worklog/282558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4866: ARROW-5594: [C++] add UnionArrays support to Take/Filter kernels\nURL: https://github.com/apache/arrow/pull/4866\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-25T09:09:55.621+0000",
                    "updated": "2019-07-25T09:09:55.621+0000",
                    "started": "2019-07-25T09:09:55.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "282558",
                    "issueId": "13239320"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3cecc889[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6367c465[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63554648[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3e4ce2ab[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f2f4e2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6d41fefb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24ef821d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7def6591[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68a42a18[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@af0b7d1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@525733f8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@549207ce[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 25 09:09:49 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-25T09:09:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5594/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-06-13T16:11:13.000+0000",
        "updated": "2019-09-17T17:09:44.000+0000",
        "timeoriginalestimate": null,
        "description": "The Take and [Filter|https://github.com/apache/arrow/pull/4366] kernels do not currently support UnionArrays, but this should not be difficult to add",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] add support for UnionArrays to Take and Filter",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/comment/16863224",
                    "id": "16863224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "https://issues.apache.org/jira/browse/ARROW-4975",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-13T16:14:26.909+0000",
                    "updated": "2019-06-13T16:14:26.909+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320/comment/16892572",
                    "id": "16892572",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 4866\n[https://github.com/apache/arrow/pull/4866]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-07-25T09:09:49.016+0000",
                    "updated": "2019-07-25T09:09:49.016+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z03pow:",
        "customfield_12314139": null
    }
}