{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197294",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197294",
    "key": "ARROW-3733",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3733/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 4,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197294/worklog/164213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #2925: ARROW-3733: [GLib] Add to_string() to GArrowTable and GArrowColumn\nURL: https://github.com/apache/arrow/pull/2925\n \n \n   This changes have many test code change. It's caused by changing table check way from dumped text comparison to direct table comparison. If we use direct table comparison, dump text format change doesn't effect test code. We'll get more stable test suite by this change.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T02:15:59.187+0000",
                    "updated": "2018-11-09T02:15:59.187+0000",
                    "started": "2018-11-09T02:15:59.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164213",
                    "issueId": "13197294"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197294/worklog/164214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2925: ARROW-3733: [GLib] Add to_string() to GArrowTable and GArrowColumn\nURL: https://github.com/apache/arrow/pull/2925#issuecomment-437226083\n \n \n   @shiro615 Can you review this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T02:16:06.858+0000",
                    "updated": "2018-11-09T02:16:06.858+0000",
                    "started": "2018-11-09T02:16:06.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164214",
                    "issueId": "13197294"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197294/worklog/164215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2925: ARROW-3733: [GLib] Add to_string() to GArrowTable and GArrowColumn\nURL: https://github.com/apache/arrow/pull/2925#issuecomment-437234655\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2925?src=pr&el=h1) Report\n   > Merging [#2925](https://codecov.io/gh/apache/arrow/pull/2925?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/a7df9c6c1e5f96d4dec71e3598028f7126032771?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2925/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2925?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2925      +/-   ##\n   ==========================================\n   - Coverage   86.23%   86.22%   -0.02%     \n   ==========================================\n     Files         490      490              \n     Lines       68599    68599              \n   ==========================================\n   - Hits        59157    59147      -10     \n   - Misses       9352     9358       +6     \n   - Partials       90       94       +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2925?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-14.29%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-5.27%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `100% <0%> (+100%)` | :arrow_up: |\n   | ... and [3 more](https://codecov.io/gh/apache/arrow/pull/2925/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2925?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2925?src=pr&el=footer). Last update [a7df9c6...ffdf3c5](https://codecov.io/gh/apache/arrow/pull/2925?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T03:04:25.089+0000",
                    "updated": "2018-11-09T03:04:25.089+0000",
                    "started": "2018-11-09T03:04:25.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164215",
                    "issueId": "13197294"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197294/worklog/164324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2925: ARROW-3733: [GLib] Add to_string() to GArrowTable and GArrowColumn\nURL: https://github.com/apache/arrow/pull/2925\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/basic-array.cpp b/c_glib/arrow-glib/basic-array.cpp\nindex 671882b64b..1fc83b52de 100644\n--- a/c_glib/arrow-glib/basic-array.cpp\n+++ b/c_glib/arrow-glib/basic-array.cpp\n@@ -29,7 +29,6 @@\n #include <arrow-glib/type.hpp>\n #include <arrow-glib/decimal.hpp>\n \n-#include <iostream>\n #include <sstream>\n \n template <typename T>\ndiff --git a/c_glib/arrow-glib/column.cpp b/c_glib/arrow-glib/column.cpp\nindex 22c7ab8c2e..06ab0b70de 100644\n--- a/c_glib/arrow-glib/column.cpp\n+++ b/c_glib/arrow-glib/column.cpp\n@@ -25,8 +25,11 @@\n #include <arrow-glib/chunked-array.hpp>\n #include <arrow-glib/column.hpp>\n #include <arrow-glib/data-type.hpp>\n+#include <arrow-glib/error.hpp>\n #include <arrow-glib/field.hpp>\n \n+#include <sstream>\n+\n G_BEGIN_DECLS\n \n /**\n@@ -364,6 +367,31 @@ garrow_column_get_data(GArrowColumn *column)\n   return garrow_chunked_array_new_raw(&arrow_chunked_array);\n }\n \n+/**\n+ * garrow_column_to_string:\n+ * @column: A #GArrowColumn.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): The formatted column content or %NULL on error.\n+ *\n+ *   The returned string should be freed when with g_free() when no\n+ *   longer needed.\n+ *\n+ * Since: 0.12.0\n+ */\n+gchar *\n+garrow_column_to_string(GArrowColumn *column, GError **error)\n+{\n+  const auto arrow_column = garrow_column_get_raw(column);\n+  std::stringstream sink;\n+  auto status = arrow::PrettyPrint(*arrow_column, 0, &sink);\n+  if (garrow_error_check(error, status, \"[column][to-string]\")) {\n+    return g_strdup(sink.str().c_str());\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n G_END_DECLS\n \n GArrowColumn *\ndiff --git a/c_glib/arrow-glib/column.h b/c_glib/arrow-glib/column.h\nindex f2c181d433..274595858d 100644\n--- a/c_glib/arrow-glib/column.h\n+++ b/c_glib/arrow-glib/column.h\n@@ -25,48 +25,17 @@\n \n G_BEGIN_DECLS\n \n-#define GARROW_TYPE_COLUMN                      \\\n-  (garrow_column_get_type())\n-#define GARROW_COLUMN(obj)                              \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                    \\\n-                              GARROW_TYPE_COLUMN,       \\\n-                              GArrowColumn))\n-#define GARROW_COLUMN_CLASS(klass)              \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),             \\\n-                           GARROW_TYPE_COLUMN,  \\\n-                           GArrowColumnClass))\n-#define GARROW_IS_COLUMN(obj)                           \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                    \\\n-                              GARROW_TYPE_COLUMN))\n-#define GARROW_IS_COLUMN_CLASS(klass)           \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),             \\\n-                           GARROW_TYPE_COLUMN))\n-#define GARROW_COLUMN_GET_CLASS(obj)                    \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                     \\\n-                             GARROW_TYPE_COLUMN,        \\\n-                             GArrowColumnClass))\n-\n-typedef struct _GArrowColumn         GArrowColumn;\n-typedef struct _GArrowColumnClass    GArrowColumnClass;\n-\n-/**\n- * GArrowColumn:\n- *\n- * It wraps `arrow::Column`.\n- */\n-struct _GArrowColumn\n-{\n-  /*< private >*/\n-  GObject parent_instance;\n-};\n-\n+#define GARROW_TYPE_COLUMN (garrow_column_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowColumn,\n+                         garrow_column,\n+                         GARROW,\n+                         COLUMN,\n+                         GObject)\n struct _GArrowColumnClass\n {\n   GObjectClass parent_class;\n };\n \n-GType               garrow_column_get_type      (void) G_GNUC_CONST;\n-\n GArrowColumn *garrow_column_new_array(GArrowField *field,\n                                       GArrowArray *array);\n GArrowColumn *garrow_column_new_chunked_array(GArrowField *field,\n@@ -84,5 +53,7 @@ GArrowField        *garrow_column_get_field     (GArrowColumn *column);\n const gchar        *garrow_column_get_name      (GArrowColumn *column);\n GArrowDataType     *garrow_column_get_data_type (GArrowColumn *column);\n GArrowChunkedArray *garrow_column_get_data      (GArrowColumn *column);\n+gchar              *garrow_column_to_string     (GArrowColumn *column,\n+                                                 GError **error);\n \n G_END_DECLS\ndiff --git a/c_glib/arrow-glib/field.cpp b/c_glib/arrow-glib/field.cpp\nindex 09c7ca33e6..8fd9dd6e5b 100644\n--- a/c_glib/arrow-glib/field.cpp\n+++ b/c_glib/arrow-glib/field.cpp\n@@ -135,9 +135,8 @@ GArrowField *\n garrow_field_new(const gchar *name,\n                  GArrowDataType *data_type)\n {\n-  auto arrow_field =\n-    std::make_shared<arrow::Field>(name,\n-                                   garrow_data_type_get_raw(data_type));\n+  auto arrow_data_type = garrow_data_type_get_raw(data_type);\n+  auto arrow_field = std::make_shared<arrow::Field>(name, arrow_data_type);\n   return garrow_field_new_raw(&arrow_field);\n }\n \ndiff --git a/c_glib/arrow-glib/table.cpp b/c_glib/arrow-glib/table.cpp\nindex b9946a3903..5e72c878d3 100644\n--- a/c_glib/arrow-glib/table.cpp\n+++ b/c_glib/arrow-glib/table.cpp\n@@ -26,6 +26,8 @@\n #include <arrow-glib/schema.hpp>\n #include <arrow-glib/table.hpp>\n \n+#include <sstream>\n+\n G_BEGIN_DECLS\n \n /**\n@@ -306,6 +308,31 @@ garrow_table_replace_column(GArrowTable *table,\n   }\n }\n \n+/**\n+ * garrow_table_to_string:\n+ * @table: A #GArrowTable.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): The formatted table content or %NULL on error.\n+ *\n+ *   The returned string should be freed when with g_free() when no\n+ *   longer needed.\n+ *\n+ * Since: 0.12.0\n+ */\n+gchar *\n+garrow_table_to_string(GArrowTable *table, GError **error)\n+{\n+  const auto arrow_table = garrow_table_get_raw(table);\n+  std::stringstream sink;\n+  auto status = arrow::PrettyPrint(*arrow_table, 0, &sink);\n+  if (garrow_error_check(error, status, \"[table][to-string]\")) {\n+    return g_strdup(sink.str().c_str());\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n G_END_DECLS\n \n GArrowTable *\ndiff --git a/c_glib/arrow-glib/table.h b/c_glib/arrow-glib/table.h\nindex 19843f3dc7..ef7b0f5c28 100644\n--- a/c_glib/arrow-glib/table.h\n+++ b/c_glib/arrow-glib/table.h\n@@ -58,5 +58,7 @@ GArrowTable    *garrow_table_replace_column(GArrowTable *table,\n                                             guint i,\n                                             GArrowColumn *column,\n                                             GError **error);\n+gchar          *garrow_table_to_string     (GArrowTable *table,\n+                                            GError **error);\n \n G_END_DECLS\ndiff --git a/c_glib/test/helper/buildable.rb b/c_glib/test/helper/buildable.rb\nindex 0f56fecd0f..d6d1ff89b6 100644\n--- a/c_glib/test/helper/buildable.rb\n+++ b/c_glib/test/helper/buildable.rb\n@@ -105,19 +105,11 @@ def build_list_array(value_data_type, values_list)\n       value_field = Arrow::Field.new(\"value\", value_data_type)\n       data_type = Arrow::ListDataType.new(value_field)\n       builder = Arrow::ListArrayBuilder.new(data_type)\n-      value_builder = builder.value_builder\n       values_list.each do |values|\n         if values.nil?\n           builder.append_null\n         else\n-          builder.append\n-          values.each do |value|\n-            if value.nil?\n-              value_builder.append_null\n-            else\n-              value_builder.append(value)\n-            end\n-          end\n+          append_to_builder(builder, values)\n         end\n       end\n       builder.finish\n@@ -130,19 +122,35 @@ def build_struct_array(fields, structs)\n         if struct.nil?\n           builder.append_null\n         else\n+          append_to_builder(builder, struct)\n+        end\n+      end\n+      builder.finish\n+    end\n+\n+    def append_to_builder(builder, value)\n+      if value.nil?\n+        builder.append_null\n+      else\n+        data_type = builder.value_data_type\n+        case data_type\n+        when Arrow::ListDataType\n+          builder.append\n+          value_builder = builder.value_builder\n+          value.each do |v|\n+            append_to_builder(value_builder, v)\n+          end\n+        when Arrow::StructDataType\n           builder.append\n-          struct.each do |name, value|\n-            field_builder_index = fields.index {|field| field.name == name}\n-            field_builder = builder.get_field_builder(field_builder_index)\n-            if value.nil?\n-              field_builder.append_null\n-            else\n-              field_builder.append(value)\n-            end\n+          value.each do |name, v|\n+            field_index = data_type.get_field_index(name)\n+            field_builder = builder.get_field_builder(field_index)\n+            append_to_builder(field_builder, v)\n           end\n+        else\n+          builder.append(value)\n         end\n       end\n-      builder.finish\n     end\n \n     def build_table(arrays)\ndiff --git a/c_glib/test/parquet/test-arrow-file-writer.rb b/c_glib/test/parquet/test-arrow-file-writer.rb\nindex d6c775e9d0..b5a8fd1fcc 100644\n--- a/c_glib/test/parquet/test-arrow-file-writer.rb\n+++ b/c_glib/test/parquet/test-arrow-file-writer.rb\n@@ -34,23 +34,13 @@ def test_write\n \n     reader = Parquet::ArrowFileReader.new(@file.path)\n     reader.use_threads = true\n-    assert_equal(enabled_values.length / chunk_size, reader.n_row_groups)\n-    table = reader.read_table\n-    table = reader.read_table\n-    table_data = table.n_columns.times.collect do |i|\n-      column = table.get_column(i)\n-      data = []\n-      column.data.chunks.each do |chunk|\n-        chunk.length.times do |j|\n-          if chunk.null?(j)\n-            data << nil\n-          else\n-            data << chunk.get_value(j)\n-          end\n-        end\n-      end\n-      [column.name, data]\n-    end\n-    assert_equal([[\"enabled\", enabled_values]], table_data)\n+    assert_equal([\n+                   enabled_values.length / chunk_size,\n+                   table,\n+                 ],\n+                 [\n+                   reader.n_row_groups,\n+                   reader.read_table,\n+                 ])\n   end\n end\ndiff --git a/c_glib/test/test-orc-file-reader.rb b/c_glib/test/test-orc-file-reader.rb\nindex 7316b48942..544112ccbc 100644\n--- a/c_glib/test/test-orc-file-reader.rb\n+++ b/c_glib/test/test-orc-file-reader.rb\n@@ -16,6 +16,7 @@\n # under the License.\n \n class TestORCFileReader < Test::Unit::TestCase\n+  include Helper::Buildable\n   include Helper::Omittable\n   include Helper::Fixture\n \n@@ -51,303 +52,180 @@ def test_field_indices\n     assert_equal([1, 3], @reader.field_indices)\n   end\n \n-  sub_test_case(\"#read_stripes\") do\n-    test(\"all\") do\n-      table = @reader.read_stripes\n-      dump = table.n_columns.times.collect do |i|\n-        column = table.get_column(i)\n-        [\n-          column.field.to_s,\n-          column.data.chunks.collect(&:to_s),\n-        ]\n-      end\n-      expected = [\n-                     [\"boolean1: bool\", [\"[\\n  false,\\n  true\\n]\"]],\n-                     [\"byte1: int8\", [\"[\\n  1,\\n  100\\n]\"]],\n-                     [\"short1: int16\", [\"[\\n  1024,\\n  2048\\n]\"]],\n-                     [\"int1: int32\", [\"[\\n  65536,\\n  65536\\n]\"]],\n-                     [\n-                       \"long1: int64\",\n-                       [\"[\\n  9223372036854775807,\\n  9223372036854775807\\n]\"],\n-                     ],\n-                     [\"float1: float\", [\"[\\n  1,\\n  2\\n]\"]],\n-                     [\"double1: double\", [\"[\\n  -15,\\n  -5\\n]\"]],\n-                     [\"bytes1: binary\", [\"[\\n  0001020304,\\n  \\n]\"]],\n-                     [\"string1: string\", [\"[\\n  \\\"hi\\\",\\n  \\\"bye\\\"\\n]\"]],\n-                     [\n-                       \"middle: \" +\n-                       \"struct<list: \" +\n-                       \"list<item: struct<int1: int32, string1: string>>>\",\n-                       [\n-                         <<-STRUCT.chomp\n--- is_valid: all not null\n--- child 0 type: list<item: struct<int1: int32, string1: string>>\n-  [\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      [\n-        1,\n-        2\n-      ]\n-    -- child 1 type: string\n-      [\n-        \"bye\",\n-        \"sigh\"\n-      ],\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      [\n-        1,\n-        2\n-      ]\n-    -- child 1 type: string\n-      [\n-        \"bye\",\n-        \"sigh\"\n-      ]\n-  ]\n-                          STRUCT\n-                       ]\n-                     ],\n-                     [\n-                       \"list: list<item: struct<int1: int32, string1: string>>\",\n-                       [\n-                         <<-LIST.chomp\n-[\n-  -- is_valid: all not null\n-  -- child 0 type: int32\n-    [\n-      3,\n-      4\n-    ]\n-  -- child 1 type: string\n-    [\n-      \"good\",\n-      \"bad\"\n-    ],\n-  -- is_valid: all not null\n-  -- child 0 type: int32\n+  def item_fields\n     [\n-      100000000,\n-      -100000,\n-      1234\n+      Arrow::Field.new(\"int1\", Arrow::Int32DataType.new),\n+      Arrow::Field.new(\"string1\", Arrow::StringDataType.new),\n     ]\n-  -- child 1 type: string\n+  end\n+\n+  def item_data_type\n+    Arrow::StructDataType.new(item_fields)\n+  end\n+\n+  def build_items_array(items_array)\n+    build_list_array(item_data_type, items_array)\n+  end\n+\n+  def items_data_type\n+    Arrow::ListDataType.new(Arrow::Field.new(\"item\", item_data_type))\n+  end\n+\n+  def middle_fields\n     [\n-      \"cat\",\n-      \"in\",\n-      \"hat\"\n+      Arrow::Field.new(\"list\", items_data_type),\n     ]\n-]\n-                         LIST\n-                       ]\n-                     ],\n-                     [\n-                       \"map: list<item: \" +\n-                       \"struct<key: string, value: \" +\n-                       \"struct<int1: int32, string1: string>>>\",\n-                       [\n-                         <<-MAP.chomp\n-[\n-  -- is_valid: all not null\n-  -- child 0 type: string\n-    []\n-  -- child 1 type: struct<int1: int32, string1: string>\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      []\n-    -- child 1 type: string\n-      [],\n-  -- is_valid: all not null\n-  -- child 0 type: string\n+  end\n+\n+  def build_middle_array(middles)\n+    build_struct_array(middle_fields, middles)\n+  end\n+\n+  def key_value_fields\n     [\n-      \"chani\",\n-      \"mauddib\"\n+      Arrow::Field.new(\"key\", Arrow::StringDataType.new),\n+      Arrow::Field.new(\"value\", item_data_type),\n     ]\n-  -- child 1 type: struct<int1: int32, string1: string>\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      [\n-        5,\n-        1\n-      ]\n-    -- child 1 type: string\n-      [\n-        \"chani\",\n-        \"mauddib\"\n-      ]\n-]\n-                         MAP\n-                       ],\n-                     ],\n-                   ]\n-      expected.zip(dump).each do |ex, actual|\n-        assert_equal(ex, actual)\n-      end\n+  end\n+\n+  def key_value_data_type\n+    Arrow::StructDataType.new(key_value_fields)\n+  end\n+\n+  def build_key_value_array(key_value_array)\n+    build_list_array(key_value_data_type, key_value_array)\n+  end\n+\n+  def middle_array\n+    build_middle_array([\n+                         {\n+                           \"list\" => [\n+                             {\n+                               \"int1\" => 1,\n+                               \"string1\" => \"bye\",\n+                             },\n+                             {\n+                               \"int1\" => 2,\n+                               \"string1\" => \"sigh\",\n+                             },\n+                           ],\n+                         },\n+                         {\n+                           \"list\" => [\n+                             {\n+                               \"int1\" => 1,\n+                               \"string1\" => \"bye\",\n+                             },\n+                             {\n+                               \"int1\" => 2,\n+                               \"string1\" => \"sigh\",\n+                             },\n+                           ],\n+                         },\n+                       ])\n+  end\n+\n+  def list_array\n+    build_items_array([\n+                        [\n+                          {\n+                            \"int1\" => 3,\n+                            \"string1\" => \"good\",\n+                          },\n+                          {\n+                            \"int1\" => 4,\n+                            \"string1\" => \"bad\",\n+                          },\n+                        ],\n+                        [\n+                          {\n+                            \"int1\" => 100000000,\n+                            \"string1\" => \"cat\",\n+                          },\n+                          {\n+                            \"int1\" => -100000,\n+                            \"string1\" => \"in\",\n+                          },\n+                          {\n+                            \"int1\" => 1234,\n+                            \"string1\" => \"hat\",\n+                          },\n+                        ]\n+                      ])\n+  end\n+\n+  def map_array\n+    build_key_value_array([\n+                            [\n+                            ],\n+                            [\n+                              {\n+                                \"key\" => \"chani\",\n+                                \"value\" => {\n+                                  \"int1\" => 5,\n+                                  \"string1\" => \"chani\",\n+                                },\n+                              },\n+                              {\n+                                \"key\" => \"mauddib\",\n+                                \"value\" => {\n+                                  \"int1\" => 1,\n+                                  \"string1\" => \"mauddib\",\n+                                },\n+                              },\n+                            ],\n+                          ])\n+  end\n+\n+  def all_columns\n+    {\n+      \"boolean1\" => build_boolean_array([false, true]),\n+      \"byte1\" => build_int8_array([1, 100]),\n+      \"short1\" => build_int16_array([1024, 2048]),\n+      \"int1\" => build_int32_array([65536, 65536]),\n+      \"long1\" => build_int64_array([\n+                                     9223372036854775807,\n+                                     9223372036854775807,\n+                                   ]),\n+      \"float1\" => build_float_array([1.0, 2.0]),\n+      \"double1\" => build_double_array([-15.0, -5.0]),\n+      \"bytes1\" => build_binary_array([\"\\x00\\x01\\x02\\x03\\x04\", \"\"]),\n+      \"string1\" => build_string_array([\"hi\", \"bye\"]),\n+      \"middle\" => middle_array,\n+      \"list\" => list_array,\n+      \"map\" => map_array,\n+    }\n+  end\n+\n+  sub_test_case(\"#read_stripes\") do\n+    test(\"all\") do\n+      assert_equal(build_table(all_columns),\n+                   @reader.read_stripes)\n     end\n \n     test(\"select fields\") do\n       require_gi_bindings(3, 2, 6)\n       @reader.field_indices = [1, 3]\n-      table = @reader.read_stripes\n-      dump = table.n_columns.times.collect do |i|\n-        column = table.get_column(i)\n-        [\n-          column.field.to_s,\n-          column.data.chunks.collect(&:to_s),\n-        ]\n-      end\n-      assert_equal([\n-                     [\"boolean1: bool\", [\"[\\n  false,\\n  true\\n]\"]],\n-                     [\"short1: int16\", [\"[\\n  1024,\\n  2048\\n]\"]],\n-                   ],\n-                   dump)\n+      assert_equal(build_table(\"boolean1\" => build_boolean_array([false, true]),\n+                               \"short1\" => build_int16_array([1024, 2048])),\n+                   @reader.read_stripes)\n     end\n   end\n \n   sub_test_case(\"#read_stripe\") do\n     test(\"all\") do\n-      record_batch = @reader.read_stripe(0)\n-      dump = record_batch.n_columns.times.collect do |i|\n-        [\n-          record_batch.schema.get_field(i).to_s,\n-          record_batch.get_column(i).to_s,\n-        ]\n-      end\n-      expected = [\n-                     [\"boolean1: bool\", \"[\\n  false,\\n  true\\n]\"],\n-                     [\"byte1: int8\", \"[\\n  1,\\n  100\\n]\"],\n-                     [\"short1: int16\", \"[\\n  1024,\\n  2048\\n]\"],\n-                     [\"int1: int32\", \"[\\n  65536,\\n  65536\\n]\"],\n-                     [\n-                       \"long1: int64\",\n-                       \"[\\n  9223372036854775807,\\n  9223372036854775807\\n]\",\n-                     ],\n-                     [\"float1: float\", \"[\\n  1,\\n  2\\n]\"],\n-                     [\"double1: double\", \"[\\n  -15,\\n  -5\\n]\"],\n-                     [\"bytes1: binary\", \"[\\n  0001020304,\\n  \\n]\"],\n-                     [\"string1: string\", \"[\\n  \\\"hi\\\",\\n  \\\"bye\\\"\\n]\"],\n-                     [\n-                       \"middle: \" +\n-                       \"struct<list: \" +\n-                       \"list<item: struct<int1: int32, string1: string>>>\",\n-                       <<-STRUCT.chomp\n--- is_valid: all not null\n--- child 0 type: list<item: struct<int1: int32, string1: string>>\n-  [\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      [\n-        1,\n-        2\n-      ]\n-    -- child 1 type: string\n-      [\n-        \"bye\",\n-        \"sigh\"\n-      ],\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      [\n-        1,\n-        2\n-      ]\n-    -- child 1 type: string\n-      [\n-        \"bye\",\n-        \"sigh\"\n-      ]\n-  ]\n-                        STRUCT\n-                     ],\n-                     [\n-                       \"list: list<item: struct<int1: int32, string1: string>>\",\n-                       <<-LIST.chomp\n-[\n-  -- is_valid: all not null\n-  -- child 0 type: int32\n-    [\n-      3,\n-      4\n-    ]\n-  -- child 1 type: string\n-    [\n-      \"good\",\n-      \"bad\"\n-    ],\n-  -- is_valid: all not null\n-  -- child 0 type: int32\n-    [\n-      100000000,\n-      -100000,\n-      1234\n-    ]\n-  -- child 1 type: string\n-    [\n-      \"cat\",\n-      \"in\",\n-      \"hat\"\n-    ]\n-]\n-                       LIST\n-                     ],\n-                     [\n-                       \"map: list<item: \" +\n-                       \"struct<key: string, value: \" +\n-                       \"struct<int1: int32, string1: string>>>\",\n-                       <<-MAP.chomp\n-[\n-  -- is_valid: all not null\n-  -- child 0 type: string\n-    []\n-  -- child 1 type: struct<int1: int32, string1: string>\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      []\n-    -- child 1 type: string\n-      [],\n-  -- is_valid: all not null\n-  -- child 0 type: string\n-    [\n-      \"chani\",\n-      \"mauddib\"\n-    ]\n-  -- child 1 type: struct<int1: int32, string1: string>\n-    -- is_valid: all not null\n-    -- child 0 type: int32\n-      [\n-        5,\n-        1\n-      ]\n-    -- child 1 type: string\n-      [\n-        \"chani\",\n-        \"mauddib\"\n-      ]\n-]\n-                       MAP\n-                     ],\n-                   ]\n-      expected.zip(dump).each do |ex, actual|\n-        assert_equal(ex, actual)\n-      end\n+      assert_equal(build_record_batch(all_columns),\n+                   @reader.read_stripe(0))\n     end\n \n     test(\"select fields\") do\n       require_gi_bindings(3, 2, 6)\n       @reader.field_indices = [1, 3]\n-      record_batch = @reader.read_stripe(0)\n-      dump = record_batch.n_columns.times.collect do |i|\n-        [\n-          record_batch.schema.get_field(i).to_s,\n-          record_batch.get_column(i).to_s,\n-        ]\n-      end\n-      assert_equal([\n-                     [\"boolean1: bool\", \"[\\n  false,\\n  true\\n]\"],\n-                     [\"short1: int16\", \"[\\n  1024,\\n  2048\\n]\"],\n-                   ],\n-                   dump)\n+      boolean1 = build_boolean_array([false, true])\n+      short1 = build_int16_array([1024, 2048])\n+      assert_equal(build_record_batch(\"boolean1\" => boolean1,\n+                                      \"short1\" => short1),\n+                   @reader.read_stripe(0))\n     end\n   end\n \ndiff --git a/c_glib/test/test-table.rb b/c_glib/test/test-table.rb\nindex 70ee653342..4394ad1353 100644\n--- a/c_glib/test/test-table.rb\n+++ b/c_glib/test/test-table.rb\n@@ -118,5 +118,21 @@ def test_replace_column\n       assert_equal([\"added\", \"valid\"],\n                    new_table.schema.fields.collect(&:name))\n     end\n+\n+    def test_to_s\n+      table = build_table(\"valid\" => build_boolean_array([true, false, true]))\n+      assert_equal(<<-TABLE, table.to_s)\n+valid: bool\n+----\n+valid:\n+  [\n+    [\n+      true,\n+      false,\n+      true\n+    ]\n+  ]\n+      TABLE\n+    end\n   end\n end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T12:07:20.989+0000",
                    "updated": "2018-11-09T12:07:20.989+0000",
                    "started": "2018-11-09T12:07:20.988+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164324",
                    "issueId": "13197294"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@149d1f86[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b493dbe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fcf75a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@217a8e56[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fa13ac0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6d02b665[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@920cab8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7c5dedf4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6abcbf85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@12f59d29[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d0ff0c5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e2e8cdd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 09 12:07:08 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-09T12:07:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3733/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-09T02:12:37.000+0000",
        "updated": "2018-11-09T12:07:21.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 2400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add to_string() to GArrowTable and GArrowColumn",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197294/comment/16681365",
                    "id": "16681365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2925\n[https://github.com/apache/arrow/pull/2925]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-11-09T12:07:08.857+0000",
                    "updated": "2018-11-09T12:07:08.857+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00azk:",
        "customfield_12314139": null
    }
}