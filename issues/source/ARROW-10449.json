{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13338186",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186",
    "key": "ARROW-10449",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10449/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/506674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#issuecomment-720560365\n\n\n   LGTM, this should also fix [ARROW-10298][1]. I believe at Signavio we also use the keys array instead of the `DoubleEndedIterator` now, so removing that should not be a blocker for merging.\r\n   \r\n    [1]: https://issues.apache.org/jira/browse/ARROW-10298\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T13:33:25.035+0000",
                    "updated": "2020-11-03T13:33:25.035+0000",
                    "started": "2020-11-03T13:33:25.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "506674",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/506954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r516565794\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2398,30 +2311,23 @@ impl<T: ArrowPrimitiveType> Array for DictionaryArray<T> {\n \n     /// Returns the total number of bytes of memory occupied by the buffers owned by this [DictionaryArray].\n     fn get_buffer_memory_size(&self) -> usize {\n-        self.data.get_buffer_memory_size() + self.values().get_buffer_memory_size()\n+        // Since both `keys` and `values` derive (are references from) `data`, we only account for `data`.\n+        self.data.get_array_memory_size()\n\nReview comment:\n       `data` contains the keys in `buffers[0]` and the values as `child_data[0]`. `self.values` is only another wrapper array, pointing to the same `child_data[0]`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T14:04:35.631+0000",
                    "updated": "2020-11-03T14:04:35.631+0000",
                    "started": "2020-11-03T14:04:35.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "506954",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r516550528\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2319,13 +2221,24 @@ impl<T: ArrowPrimitiveType> From<ArrayDataRef> for DictionaryArray<T> {\n             \"DictionaryArray should contain a single child array (values).\"\n         );\n \n-        let raw_values = data.buffers()[0].raw_data();\n-        let dtype: &DataType = data.data_type();\n-        let values = make_array(data.child_data()[0].clone());\n-        if let DataType::Dictionary(_, _) = dtype {\n+        if let DataType::Dictionary(key_data_type, _) = data.data_type() {\n+            if key_data_type.as_ref() != &T::DATA_TYPE {\n+                panic!(\"DictionaryArray's data type must match.\")\n\nReview comment:\n       ```suggestion\r\n                   unreachable!(\"DictionaryArray's data type must match.\")\r\n   ```\r\n   Since the former is good for defensive programming but doesn't convey the idea.\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2115,28 +2115,32 @@ impl From<(Vec<(Field, ArrayRef)>, Buffer, usize)> for StructArray {\n /// Example **with nullable** data:\n ///\n /// ```\n-/// use arrow::array::DictionaryArray;\n+/// use arrow::array::{DictionaryArray, Int8Array};\n /// use arrow::datatypes::Int8Type;\n /// let test = vec![\"a\", \"a\", \"b\", \"c\"];\n /// let array : DictionaryArray<Int8Type> = test.iter().map(|&x| if x == \"b\" {None} else {Some(x)}).collect();\n-/// assert_eq!(array.keys().collect::<Vec<Option<i8>>>(), vec![Some(0), Some(0), None, Some(1)]);\n+/// assert_eq!(array.keys(), &Int8Array::from(vec![Some(0), Some(0), None, Some(1)]));\n /// ```\n ///\n /// Example **without nullable** data:\n ///\n /// ```\n-/// use arrow::array::DictionaryArray;\n+/// use arrow::array::{DictionaryArray, Int8Array};\n /// use arrow::datatypes::Int8Type;\n /// let test = vec![\"a\", \"a\", \"b\", \"c\"];\n /// let array : DictionaryArray<Int8Type> = test.into_iter().collect();\n-/// assert_eq!(array.keys().collect::<Vec<Option<i8>>>(), vec![Some(0), Some(0), Some(1), Some(2)]);\n+/// assert_eq!(array.keys(), &Int8Array::from(vec![0, 0, 1, 2]));\n /// ```\n pub struct DictionaryArray<K: ArrowPrimitiveType> {\n-    /// Array of keys, stored as a PrimitiveArray<K>.\n+    /// data of this dictionary. Note that this is _not_ compatible with the C Data interface,\n+    /// as, in the current implementation, `values` below are the first child of this struct.\n     data: ArrayDataRef,\n \n-    /// Pointer to the key values.\n-    raw_values: RawPtrBox<K::Native>,\n+    /// data of the keys of this dictionary. These are constructed from the buffer and null bitmap\n\nReview comment:\n       ```suggestion\r\n       /// Data of the keys of this dictionary. These are constructed from the buffer and null bitmap\r\n   ```\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2319,13 +2221,24 @@ impl<T: ArrowPrimitiveType> From<ArrayDataRef> for DictionaryArray<T> {\n             \"DictionaryArray should contain a single child array (values).\"\n         );\n \n-        let raw_values = data.buffers()[0].raw_data();\n-        let dtype: &DataType = data.data_type();\n-        let values = make_array(data.child_data()[0].clone());\n-        if let DataType::Dictionary(_, _) = dtype {\n+        if let DataType::Dictionary(key_data_type, _) = data.data_type() {\n+            if key_data_type.as_ref() != &T::DATA_TYPE {\n+                panic!(\"DictionaryArray's data type must match.\")\n+            };\n+            // create a zero-copy of the keys' data\n+            let keys = PrimitiveArray::<T>::from(Arc::new(ArrayData::new(\n+                T::DATA_TYPE,\n+                data.len(),\n+                Some(data.null_count()),\n+                data.null_buffer().map(|b| b.clone()),\n\nReview comment:\n       ```suggestion\r\n                   data.null_buffer().clone(),\r\n   ```\r\n   .clone should also work over the option of clonables.\n\n##########\nFile path: rust/parquet/src/arrow/arrow_writer.rs\n##########\n@@ -283,48 +280,40 @@ trait Materialize<K, V> {\n     fn materialize(&self) -> Vec<Self::Output>;\n }\n \n-macro_rules! materialize_string {\n-    ($($k:ty,)*) => {\n-        $(impl Materialize<$k, arrow_array::StringArray> for dyn Array {\n-            type Output = ByteArray;\n-\n-            fn materialize(&self) -> Vec<Self::Output> {\n-                use std::convert::TryFrom;\n-\n-                let typed_array = self.as_any()\n-                    .downcast_ref::<$k>()\n-                    .expect(\"Unable to get dictionary array\");\n-\n-                let keys = typed_array.keys();\n-\n-                let value_buffer = typed_array.values();\n-                let values = value_buffer\n-                    .as_any()\n-                    .downcast_ref::<arrow_array::StringArray>()\n-                    .unwrap();\n-\n-                // This removes NULL values from the NullableIter, but\n-                // they're encoded by the levels, so that's fine.\n-                keys\n-                    .flatten()\n-                    .map(|key| usize::try_from(key).unwrap_or_else(|k| panic!(\"key {} does not fit in usize\", k)))\n-                    .map(|key| values.value(key))\n-                    .map(ByteArray::from)\n-                    .collect()\n-            }\n-        })*\n-    };\n-}\n+impl<K> Materialize<K, arrow_array::StringArray> for dyn Array\n+where\n+    K: arrow::datatypes::ArrowDictionaryKeyType,\n+{\n+    type Output = ByteArray;\n+\n+    fn materialize(&self) -> Vec<Self::Output> {\n+        use arrow::datatypes::ArrowNativeType;\n \n-materialize_string! {\n-    arrow_array::Int8DictionaryArray,\n-    arrow_array::Int16DictionaryArray,\n-    arrow_array::Int32DictionaryArray,\n-    arrow_array::Int64DictionaryArray,\n-    arrow_array::UInt8DictionaryArray,\n-    arrow_array::UInt16DictionaryArray,\n-    arrow_array::UInt32DictionaryArray,\n-    arrow_array::UInt64DictionaryArray,\n+        let typed_array = self\n+            .as_any()\n+            .downcast_ref::<arrow_array::DictionaryArray<K>>()\n+            .expect(\"Unable to get dictionary array\");\n+\n+        let keys = typed_array.keys();\n+\n+        let value_buffer = typed_array.values();\n+        let values = value_buffer\n+            .as_any()\n+            .downcast_ref::<arrow_array::StringArray>()\n+            .unwrap();\n+\n+        // This removes NULL values from the keys, but\n+        // they're encoded by the levels, so that's fine.\n+        keys.into_iter()\n+            .flatten()\n+            .map(|key| {\n+                key.to_usize()\n+                    .unwrap_or_else(|| panic!(\"key {:?} does not fit in usize\", key))\n+            })\n+            .map(|key| values.value(key))\n+            .map(ByteArray::from)\n+            .collect()\n\nReview comment:\n       This is coming from parquet code @carols10cents wrote. Any particular reason this is landing here with Materialize trait?\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2115,28 +2115,32 @@ impl From<(Vec<(Field, ArrayRef)>, Buffer, usize)> for StructArray {\n /// Example **with nullable** data:\n ///\n /// ```\n-/// use arrow::array::DictionaryArray;\n+/// use arrow::array::{DictionaryArray, Int8Array};\n /// use arrow::datatypes::Int8Type;\n /// let test = vec![\"a\", \"a\", \"b\", \"c\"];\n /// let array : DictionaryArray<Int8Type> = test.iter().map(|&x| if x == \"b\" {None} else {Some(x)}).collect();\n-/// assert_eq!(array.keys().collect::<Vec<Option<i8>>>(), vec![Some(0), Some(0), None, Some(1)]);\n+/// assert_eq!(array.keys(), &Int8Array::from(vec![Some(0), Some(0), None, Some(1)]));\n /// ```\n ///\n /// Example **without nullable** data:\n ///\n /// ```\n-/// use arrow::array::DictionaryArray;\n+/// use arrow::array::{DictionaryArray, Int8Array};\n /// use arrow::datatypes::Int8Type;\n /// let test = vec![\"a\", \"a\", \"b\", \"c\"];\n /// let array : DictionaryArray<Int8Type> = test.into_iter().collect();\n-/// assert_eq!(array.keys().collect::<Vec<Option<i8>>>(), vec![Some(0), Some(0), Some(1), Some(2)]);\n+/// assert_eq!(array.keys(), &Int8Array::from(vec![0, 0, 1, 2]));\n /// ```\n pub struct DictionaryArray<K: ArrowPrimitiveType> {\n-    /// Array of keys, stored as a PrimitiveArray<K>.\n+    /// data of this dictionary. Note that this is _not_ compatible with the C Data interface,\n\nReview comment:\n       ```suggestion\r\n       /// Data of this dictionary. Note that this is _not_ compatible with the C Data interface,\r\n   ```\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2398,30 +2311,23 @@ impl<T: ArrowPrimitiveType> Array for DictionaryArray<T> {\n \n     /// Returns the total number of bytes of memory occupied by the buffers owned by this [DictionaryArray].\n     fn get_buffer_memory_size(&self) -> usize {\n-        self.data.get_buffer_memory_size() + self.values().get_buffer_memory_size()\n+        // Since both `keys` and `values` derive (are references from) `data`, we only account for `data`.\n+        self.data.get_array_memory_size()\n\nReview comment:\n       This part doesn't look true. Am I missing something? Since keys array is also a primitive array, and values are string array both of the arrays' methods for buffer_memory_size should be called and summed up respectively.\r\n   \r\n   Same applies for the array memory size too. Since `zerocopy` is not that much of a zero-copy in the physical memory level it would be nice to explicitly add them in array size calculation too.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T14:15:34.798+0000",
                    "updated": "2020-11-03T14:15:34.798+0000",
                    "started": "2020-11-03T14:15:34.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507052",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r516922735\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2319,13 +2221,24 @@ impl<T: ArrowPrimitiveType> From<ArrayDataRef> for DictionaryArray<T> {\n             \"DictionaryArray should contain a single child array (values).\"\n         );\n \n-        let raw_values = data.buffers()[0].raw_data();\n-        let dtype: &DataType = data.data_type();\n-        let values = make_array(data.child_data()[0].clone());\n-        if let DataType::Dictionary(_, _) = dtype {\n+        if let DataType::Dictionary(key_data_type, _) = data.data_type() {\n+            if key_data_type.as_ref() != &T::DATA_TYPE {\n+                panic!(\"DictionaryArray's data type must match.\")\n+            };\n+            // create a zero-copy of the keys' data\n+            let keys = PrimitiveArray::<T>::from(Arc::new(ArrayData::new(\n+                T::DATA_TYPE,\n+                data.len(),\n+                Some(data.null_count()),\n+                data.null_buffer().map(|b| b.clone()),\n\nReview comment:\n       `cloned()` I think\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T20:00:13.993+0000",
                    "updated": "2020-11-03T20:00:13.993+0000",
                    "started": "2020-11-03T20:00:13.993+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507312",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r516923335\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2145,112 +2149,10 @@ pub struct DictionaryArray<K: ArrowPrimitiveType> {\n     is_ordered: bool,\n }\n \n-#[derive(Debug)]\n-enum Draining {\n-    Ready,\n-    Iterating,\n-    Finished,\n-}\n-\n-#[derive(Debug)]\n-pub struct NullableIter<'a, T> {\n-    data: &'a ArrayDataRef, // TODO: Use a pointer to the null bitmap.\n-    ptr: *const T,\n-    i: usize,\n-    len: usize,\n-    draining: Draining,\n-}\n-\n-impl<'a, T> std::iter::Iterator for NullableIter<'a, T>\n-where\n-    T: Clone,\n-{\n-    type Item = Option<T>;\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        let i = self.i;\n-        if i >= self.len {\n-            None\n-        } else if self.data.is_null(i) {\n-            self.i += 1;\n-            Some(None)\n-        } else {\n-            self.i += 1;\n-            unsafe { Some(Some((&*self.ptr.add(i)).clone())) }\n-        }\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (self.len, Some(self.len))\n-    }\n-\n-    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        let i = self.i;\n-        if i + n >= self.len {\n-            self.i = self.len;\n-            None\n-        } else if self.data.is_null(i + n) {\n-            self.i += n + 1;\n-            Some(None)\n-        } else {\n-            self.i += n + 1;\n-            unsafe { Some(Some((&*self.ptr.add(i + n)).clone())) }\n-        }\n-    }\n-}\n-\n-impl<'a, T> std::iter::DoubleEndedIterator for NullableIter<'a, T>\n-where\n-    T: Clone,\n-{\n-    fn next_back(&mut self) -> Option<Self::Item> {\n-        match self.draining {\n-            Draining::Ready => {\n-                self.draining = Draining::Iterating;\n-                self.i = self.len - 1;\n-                self.next_back()\n-            }\n-            Draining::Iterating => {\n-                let i = self.i;\n-                if i >= self.len {\n-                    None\n-                } else if self.data.is_null(i) {\n-                    self.i = self.i.checked_sub(1).unwrap_or_else(|| {\n-                        self.draining = Draining::Finished;\n-                        0_usize\n-                    });\n-                    Some(None)\n-                } else {\n-                    match i.checked_sub(1) {\n-                        Some(idx) => {\n-                            self.i = idx;\n-                            unsafe { Some(Some((&*self.ptr.add(i)).clone())) }\n-                        }\n-                        _ => {\n-                            self.draining = Draining::Finished;\n-                            unsafe { Some(Some((&*self.ptr).clone())) }\n-                        }\n-                    }\n-                }\n-            }\n-            Draining::Finished => {\n-                self.draining = Draining::Ready;\n-                None\n-            }\n-        }\n-    }\n-}\n-\n impl<'a, K: ArrowPrimitiveType> DictionaryArray<K> {\n     /// Return an iterator to the keys of this dictionary.\n-    pub fn keys(&self) -> NullableIter<'_, K::Native> {\n-        NullableIter::<'_, K::Native> {\n-            data: &self.data,\n-            ptr: unsafe { self.raw_values.get().add(self.data.offset()) },\n-            i: 0,\n-            len: self.data.len(),\n-            draining: Draining::Ready,\n-        }\n+    pub fn keys(&self) -> &PrimitiveArray<K> {\n\nReview comment:\n       Thanks Jorge, I like this option more\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2398,30 +2311,23 @@ impl<T: ArrowPrimitiveType> Array for DictionaryArray<T> {\n \n     /// Returns the total number of bytes of memory occupied by the buffers owned by this [DictionaryArray].\n     fn get_buffer_memory_size(&self) -> usize {\n-        self.data.get_buffer_memory_size() + self.values().get_buffer_memory_size()\n+        // Since both `keys` and `values` derive (are references from) `data`, we only account for `data`.\n+        self.data.get_array_memory_size()\n     }\n \n     /// Returns the total number of bytes of memory occupied physically by this [DictionaryArray].\n     fn get_array_memory_size(&self) -> usize {\n-        self.data.get_array_memory_size()\n-            + self.values().get_array_memory_size()\n-            + mem::size_of_val(self)\n+        // Since both `keys` and `values` derive (are references from) `data`, we only account for `data`.\n+        self.data.get_array_memory_size() + mem::size_of_val(self)\n     }\n }\n \n impl<T: ArrowPrimitiveType> fmt::Debug for DictionaryArray<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        const MAX_LEN: usize = 10;\n-        let keys: Vec<_> = self.keys().take(MAX_LEN).collect();\n-        let elipsis = if self.keys().count() > MAX_LEN {\n-            \"...\"\n-        } else {\n-            \"\"\n-        };\n         writeln!(\n             f,\n-            \"DictionaryArray {{keys: {:?}{} values: {:?}}}\",\n-            keys, elipsis, self.values\n+            \"DictionaryArray {{keys: {:?} values: {:?}}}\",\n\nReview comment:\n       Nice, I'm assuming that we're relying on the `keys` formatting now that it's a `PrimitiveArray`\n\n##########\nFile path: rust/parquet/src/arrow/arrow_writer.rs\n##########\n@@ -283,48 +280,40 @@ trait Materialize<K, V> {\n     fn materialize(&self) -> Vec<Self::Output>;\n }\n \n-macro_rules! materialize_string {\n-    ($($k:ty,)*) => {\n-        $(impl Materialize<$k, arrow_array::StringArray> for dyn Array {\n-            type Output = ByteArray;\n-\n-            fn materialize(&self) -> Vec<Self::Output> {\n-                use std::convert::TryFrom;\n-\n-                let typed_array = self.as_any()\n-                    .downcast_ref::<$k>()\n-                    .expect(\"Unable to get dictionary array\");\n-\n-                let keys = typed_array.keys();\n-\n-                let value_buffer = typed_array.values();\n-                let values = value_buffer\n-                    .as_any()\n-                    .downcast_ref::<arrow_array::StringArray>()\n-                    .unwrap();\n-\n-                // This removes NULL values from the NullableIter, but\n-                // they're encoded by the levels, so that's fine.\n-                keys\n-                    .flatten()\n-                    .map(|key| usize::try_from(key).unwrap_or_else(|k| panic!(\"key {} does not fit in usize\", k)))\n-                    .map(|key| values.value(key))\n-                    .map(ByteArray::from)\n-                    .collect()\n-            }\n-        })*\n-    };\n-}\n+impl<K> Materialize<K, arrow_array::StringArray> for dyn Array\n+where\n+    K: arrow::datatypes::ArrowDictionaryKeyType,\n+{\n+    type Output = ByteArray;\n+\n+    fn materialize(&self) -> Vec<Self::Output> {\n+        use arrow::datatypes::ArrowNativeType;\n \n-materialize_string! {\n-    arrow_array::Int8DictionaryArray,\n-    arrow_array::Int16DictionaryArray,\n-    arrow_array::Int32DictionaryArray,\n-    arrow_array::Int64DictionaryArray,\n-    arrow_array::UInt8DictionaryArray,\n-    arrow_array::UInt16DictionaryArray,\n-    arrow_array::UInt32DictionaryArray,\n-    arrow_array::UInt64DictionaryArray,\n+        let typed_array = self\n+            .as_any()\n+            .downcast_ref::<arrow_array::DictionaryArray<K>>()\n+            .expect(\"Unable to get dictionary array\");\n+\n+        let keys = typed_array.keys();\n+\n+        let value_buffer = typed_array.values();\n+        let values = value_buffer\n+            .as_any()\n+            .downcast_ref::<arrow_array::StringArray>()\n+            .unwrap();\n+\n+        // This removes NULL values from the keys, but\n+        // they're encoded by the levels, so that's fine.\n+        keys.into_iter()\n+            .flatten()\n+            .map(|key| {\n+                key.to_usize()\n+                    .unwrap_or_else(|| panic!(\"key {:?} does not fit in usize\", key))\n+            })\n+            .map(|key| values.value(key))\n+            .map(ByteArray::from)\n+            .collect()\n\nReview comment:\n       I know Q's not for me, but I don't understand. Is the change not only removing the macro in favour of a generic impl?\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -3409,8 +3409,15 @@ mod tests {\n         builder.append(22345678).unwrap();\n         let array = builder.finish();\n \n-        // Keys are strongly typed.\n-        let aks: Vec<_> = array.keys().collect();\n+        println!(\"{:?}\", array.keys().data());\n\nReview comment:\n       nit: remove `println` (assuming you were using it for debug purposes)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T20:15:36.093+0000",
                    "updated": "2020-11-03T20:15:36.093+0000",
                    "started": "2020-11-03T20:15:36.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507317",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r517096801\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2398,30 +2311,23 @@ impl<T: ArrowPrimitiveType> Array for DictionaryArray<T> {\n \n     /// Returns the total number of bytes of memory occupied by the buffers owned by this [DictionaryArray].\n     fn get_buffer_memory_size(&self) -> usize {\n-        self.data.get_buffer_memory_size() + self.values().get_buffer_memory_size()\n+        // Since both `keys` and `values` derive (are references from) `data`, we only account for `data`.\n+        self.data.get_array_memory_size()\n\nReview comment:\n       I think that @vertexclique 's point is that we should still use `buffer` from `keys` and `values` here, and in the `array_size`, use `size_of` itself. I think it is a small amount of memory difference, but to keep things consistent, I should change it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T04:53:59.287+0000",
                    "updated": "2020-11-04T04:53:59.287+0000",
                    "started": "2020-11-04T04:53:59.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507493",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r517097606\n\n\n\n##########\nFile path: rust/parquet/src/arrow/arrow_writer.rs\n##########\n@@ -283,48 +280,40 @@ trait Materialize<K, V> {\n     fn materialize(&self) -> Vec<Self::Output>;\n }\n \n-macro_rules! materialize_string {\n-    ($($k:ty,)*) => {\n-        $(impl Materialize<$k, arrow_array::StringArray> for dyn Array {\n-            type Output = ByteArray;\n-\n-            fn materialize(&self) -> Vec<Self::Output> {\n-                use std::convert::TryFrom;\n-\n-                let typed_array = self.as_any()\n-                    .downcast_ref::<$k>()\n-                    .expect(\"Unable to get dictionary array\");\n-\n-                let keys = typed_array.keys();\n-\n-                let value_buffer = typed_array.values();\n-                let values = value_buffer\n-                    .as_any()\n-                    .downcast_ref::<arrow_array::StringArray>()\n-                    .unwrap();\n-\n-                // This removes NULL values from the NullableIter, but\n-                // they're encoded by the levels, so that's fine.\n-                keys\n-                    .flatten()\n-                    .map(|key| usize::try_from(key).unwrap_or_else(|k| panic!(\"key {} does not fit in usize\", k)))\n-                    .map(|key| values.value(key))\n-                    .map(ByteArray::from)\n-                    .collect()\n-            }\n-        })*\n-    };\n-}\n+impl<K> Materialize<K, arrow_array::StringArray> for dyn Array\n+where\n+    K: arrow::datatypes::ArrowDictionaryKeyType,\n+{\n+    type Output = ByteArray;\n+\n+    fn materialize(&self) -> Vec<Self::Output> {\n+        use arrow::datatypes::ArrowNativeType;\n \n-materialize_string! {\n-    arrow_array::Int8DictionaryArray,\n-    arrow_array::Int16DictionaryArray,\n-    arrow_array::Int32DictionaryArray,\n-    arrow_array::Int64DictionaryArray,\n-    arrow_array::UInt8DictionaryArray,\n-    arrow_array::UInt16DictionaryArray,\n-    arrow_array::UInt32DictionaryArray,\n-    arrow_array::UInt64DictionaryArray,\n+        let typed_array = self\n+            .as_any()\n+            .downcast_ref::<arrow_array::DictionaryArray<K>>()\n+            .expect(\"Unable to get dictionary array\");\n+\n+        let keys = typed_array.keys();\n+\n+        let value_buffer = typed_array.values();\n+        let values = value_buffer\n+            .as_any()\n+            .downcast_ref::<arrow_array::StringArray>()\n+            .unwrap();\n+\n+        // This removes NULL values from the keys, but\n+        // they're encoded by the levels, so that's fine.\n+        keys.into_iter()\n+            .flatten()\n+            .map(|key| {\n+                key.to_usize()\n+                    .unwrap_or_else(|| panic!(\"key {:?} does not fit in usize\", key))\n+            })\n+            .map(|key| values.value(key))\n+            .map(ByteArray::from)\n+            .collect()\n\nReview comment:\n       what @nevi-me wrote: this is only a simplification (consequent of the fact that the `keys` now allow us to write this as a generic).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T04:57:20.969+0000",
                    "updated": "2020-11-04T04:57:20.969+0000",
                    "started": "2020-11-04T04:57:20.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507496",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r517119905\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2319,13 +2221,24 @@ impl<T: ArrowPrimitiveType> From<ArrayDataRef> for DictionaryArray<T> {\n             \"DictionaryArray should contain a single child array (values).\"\n         );\n \n-        let raw_values = data.buffers()[0].raw_data();\n-        let dtype: &DataType = data.data_type();\n-        let values = make_array(data.child_data()[0].clone());\n-        if let DataType::Dictionary(_, _) = dtype {\n+        if let DataType::Dictionary(key_data_type, _) = data.data_type() {\n+            if key_data_type.as_ref() != &T::DATA_TYPE {\n+                panic!(\"DictionaryArray's data type must match.\")\n\nReview comment:\n       Thanks for the suggestions.\r\n   \r\n   Isn't `unreachable` used when the program arrives at an inconsistent state? \r\n   \r\n   IMO, in this case, we are checking user input (this function is public) and ensure that we will not reach an inconsistent state (in the same way `assert_eq` does). `assert_eq` calls `panic!`, which is why I also used `panic!` here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T06:25:03.181+0000",
                    "updated": "2020-11-04T06:25:03.181+0000",
                    "started": "2020-11-04T06:25:03.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507507",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r517120190\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2398,30 +2311,23 @@ impl<T: ArrowPrimitiveType> Array for DictionaryArray<T> {\n \n     /// Returns the total number of bytes of memory occupied by the buffers owned by this [DictionaryArray].\n     fn get_buffer_memory_size(&self) -> usize {\n-        self.data.get_buffer_memory_size() + self.values().get_buffer_memory_size()\n+        // Since both `keys` and `values` derive (are references from) `data`, we only account for `data`.\n+        self.data.get_array_memory_size()\n\nReview comment:\n       @vertexclique , I modified this code. Do you think it is correct now?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T06:25:50.078+0000",
                    "updated": "2020-11-04T06:25:50.078+0000",
                    "started": "2020-11-04T06:25:50.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507509",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r517197699\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2145,112 +2149,10 @@ pub struct DictionaryArray<K: ArrowPrimitiveType> {\n     is_ordered: bool,\n }\n \n-#[derive(Debug)]\n-enum Draining {\n-    Ready,\n-    Iterating,\n-    Finished,\n-}\n-\n-#[derive(Debug)]\n-pub struct NullableIter<'a, T> {\n-    data: &'a ArrayDataRef, // TODO: Use a pointer to the null bitmap.\n-    ptr: *const T,\n-    i: usize,\n-    len: usize,\n-    draining: Draining,\n-}\n-\n-impl<'a, T> std::iter::Iterator for NullableIter<'a, T>\n-where\n-    T: Clone,\n-{\n-    type Item = Option<T>;\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        let i = self.i;\n-        if i >= self.len {\n-            None\n-        } else if self.data.is_null(i) {\n-            self.i += 1;\n-            Some(None)\n-        } else {\n-            self.i += 1;\n-            unsafe { Some(Some((&*self.ptr.add(i)).clone())) }\n-        }\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        (self.len, Some(self.len))\n-    }\n-\n-    fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        let i = self.i;\n-        if i + n >= self.len {\n-            self.i = self.len;\n-            None\n-        } else if self.data.is_null(i + n) {\n-            self.i += n + 1;\n-            Some(None)\n-        } else {\n-            self.i += n + 1;\n-            unsafe { Some(Some((&*self.ptr.add(i + n)).clone())) }\n-        }\n-    }\n-}\n-\n-impl<'a, T> std::iter::DoubleEndedIterator for NullableIter<'a, T>\n-where\n-    T: Clone,\n-{\n-    fn next_back(&mut self) -> Option<Self::Item> {\n-        match self.draining {\n-            Draining::Ready => {\n-                self.draining = Draining::Iterating;\n-                self.i = self.len - 1;\n-                self.next_back()\n-            }\n-            Draining::Iterating => {\n-                let i = self.i;\n-                if i >= self.len {\n-                    None\n-                } else if self.data.is_null(i) {\n-                    self.i = self.i.checked_sub(1).unwrap_or_else(|| {\n-                        self.draining = Draining::Finished;\n-                        0_usize\n-                    });\n-                    Some(None)\n-                } else {\n-                    match i.checked_sub(1) {\n-                        Some(idx) => {\n-                            self.i = idx;\n-                            unsafe { Some(Some((&*self.ptr.add(i)).clone())) }\n-                        }\n-                        _ => {\n-                            self.draining = Draining::Finished;\n-                            unsafe { Some(Some((&*self.ptr).clone())) }\n-                        }\n-                    }\n-                }\n-            }\n-            Draining::Finished => {\n-                self.draining = Draining::Ready;\n-                None\n-            }\n-        }\n-    }\n-}\n-\n impl<'a, K: ArrowPrimitiveType> DictionaryArray<K> {\n     /// Return an iterator to the keys of this dictionary.\n-    pub fn keys(&self) -> NullableIter<'_, K::Native> {\n-        NullableIter::<'_, K::Native> {\n-            data: &self.data,\n-            ptr: unsafe { self.raw_values.get().add(self.data.offset()) },\n-            i: 0,\n-            len: self.data.len(),\n-            draining: Draining::Ready,\n-        }\n+    pub fn keys(&self) -> &PrimitiveArray<K> {\n\nReview comment:\n       me too. that's way better.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T09:16:29.440+0000",
                    "updated": "2020-11-04T09:16:29.440+0000",
                    "started": "2020-11-04T09:16:29.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507553",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/507559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561#discussion_r517199502\n\n\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2319,13 +2221,24 @@ impl<T: ArrowPrimitiveType> From<ArrayDataRef> for DictionaryArray<T> {\n             \"DictionaryArray should contain a single child array (values).\"\n         );\n \n-        let raw_values = data.buffers()[0].raw_data();\n-        let dtype: &DataType = data.data_type();\n-        let values = make_array(data.child_data()[0].clone());\n-        if let DataType::Dictionary(_, _) = dtype {\n+        if let DataType::Dictionary(key_data_type, _) = data.data_type() {\n+            if key_data_type.as_ref() != &T::DATA_TYPE {\n+                panic!(\"DictionaryArray's data type must match.\")\n\nReview comment:\n       I don't think that unreachable is only for the inconsistent state. But we can leave it as panic here. I was also unsure about the user-facing API's panicking behavior. Especially in array methods with forced asserts. We should prefer Result than direct asserts, but you know... That's also yet another topic.\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -2398,30 +2311,23 @@ impl<T: ArrowPrimitiveType> Array for DictionaryArray<T> {\n \n     /// Returns the total number of bytes of memory occupied by the buffers owned by this [DictionaryArray].\n     fn get_buffer_memory_size(&self) -> usize {\n-        self.data.get_buffer_memory_size() + self.values().get_buffer_memory_size()\n+        // Since both `keys` and `values` derive (are references from) `data`, we only account for `data`.\n+        self.data.get_array_memory_size()\n\nReview comment:\n       Voila! Yes.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T09:21:36.961+0000",
                    "updated": "2020-11-04T09:21:36.961+0000",
                    "started": "2020-11-04T09:21:36.960+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507559",
                    "issueId": "13338186"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/worklog/508763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me closed pull request #8561:\nURL: https://github.com/apache/arrow/pull/8561\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-07T12:42:39.097+0000",
                    "updated": "2020-11-07T12:42:39.097+0000",
                    "started": "2020-11-07T12:42:39.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508763",
                    "issueId": "13338186"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7e998563[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e2dd6c0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58d53ec3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@78ee78cf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c5bccd1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7eaf4909[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f7d4339[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4de7a19[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66010317[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@62e2f9df[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e30a31[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@701aa666[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 07 12:42:31 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-07T12:42:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10449/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-10-31T06:56:55.000+0000",
        "updated": "2020-11-07T12:42:40.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, dictionary keys use a NullIterator to iterate them. However, physically, they are fully allocated in memory and are interpretable as a PrimitiveArray.\r\n\r\nThis issue's main purpose is to have `keys` return a `PrimitiveArray`, so that users can use it as any other array.\r\n\r\nThis will also allow to remove `NullIter`.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Make dictionary keys be a PrimitiveArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338186/comment/17227798",
                    "id": "17227798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8561\n[https://github.com/apache/arrow/pull/8561]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-11-07T12:42:31.371+0000",
                    "updated": "2020-11-07T12:42:31.371+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0k688:",
        "customfield_12314139": null
    }
}