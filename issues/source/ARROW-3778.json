{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13198124",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124",
    "key": "ARROW-3778",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3778/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/167519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997\n \n \n   This has to be compiled into a separate static library and added to the link libs for the unit tests and benchmarks\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T21:51:59.766+0000",
                    "updated": "2018-11-19T21:51:59.766+0000",
                    "started": "2018-11-19T21:51:59.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167519",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/167858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440356751\n \n \n   This is broken on Windows, I will have a look later today\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:21:09.617+0000",
                    "updated": "2018-11-20T17:21:09.617+0000",
                    "started": "2018-11-20T17:21:09.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167858",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/167996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#discussion_r235184624\n \n \n\n ##########\n File path: cpp/CMakeLists.txt\n ##########\n @@ -733,6 +733,19 @@ endif()\n \n set(ARROW_TEST_LINK_LIBS ${ARROW_MIN_TEST_LIBS})\n \n+if (ARROW_BUILD_TESTS OR ARROW_BUILD_BENCHMARKS)\n+  # TODO(wesm): maybe find a better place to put shared auxiliary testing tools\n+  # that depend on gtest\n+  add_library(arrow_testing_aux STATIC src/arrow/test-util.cc)\n \n Review comment:\n   Is there a reason why this must be `STATIC`?  Maybe using `OBJECT` or `SHARED` will solve your problem on Windows, probably `OBJECT` is what you're looking for: compile once, link \"statically\" into the tests everywhere.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T21:59:15.178+0000",
                    "updated": "2018-11-20T21:59:15.178+0000",
                    "started": "2018-11-20T21:59:15.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167996",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440499678\n \n \n   Argh, so the issue is more complex on Windows. The test utilities contain inline symbols from other Arrow headers, which seems to cause a conflict with the symbols in arrow.dll (multiply defined symbols). Since these are inline I don't really get why it's a problem. I don't know enough about linking on Windows to know how to fix this using the `add_library(... OBJECT)` method. \r\n   \r\n   To resolve the issue, I am now building both static and shared variants of the testing helper library and linking the corresponding library depending on whether ARROW_BUILD_SHARED is on\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T01:56:16.075+0000",
                    "updated": "2018-11-21T01:56:16.075+0000",
                    "started": "2018-11-21T01:56:16.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168141",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440656916\n \n \n   Another possibility would be to compile `test-util` into the Arrow library (possibly inside a `arrow::test` namespace). That would increase the library size a bit but I think we can live with that.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T13:10:44.076+0000",
                    "updated": "2018-11-21T13:10:44.076+0000",
                    "started": "2018-11-21T13:10:44.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168266",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440690492\n \n \n   We can't do that because the test code depends on gtest\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T14:52:07.412+0000",
                    "updated": "2018-11-21T14:52:07.412+0000",
                    "started": "2018-11-21T14:52:07.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168307",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440691587\n \n \n   We could of course make the compiled code not depend on gtest, but that would best be taken care of in another patch\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T14:54:31.583+0000",
                    "updated": "2018-11-21T14:54:31.583+0000",
                    "started": "2018-11-21T14:54:31.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168308",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440695787\n \n \n   Windows is a huge pain. The static CRT build is failing on Windows for reasons unknown. I will have to keep looking at this later today\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T15:04:35.203+0000",
                    "updated": "2018-11-21T15:04:35.203+0000",
                    "started": "2018-11-21T15:04:35.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168314",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440696472\n \n \n   I'm sure that has to do with different copies of the CRT being linked in.\r\n   I think that the approach of linking `test-util` into the Arrow library may help minimize such issues.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T15:06:05.426+0000",
                    "updated": "2018-11-21T15:06:05.426+0000",
                    "started": "2018-11-21T15:06:05.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168316",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440697913\n \n \n   I'll look at removing the gtest-depending code from the object file. That will be easier for me than messing around with linker settings\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T15:09:19.576+0000",
                    "updated": "2018-11-21T15:09:19.576+0000",
                    "started": "2018-11-21T15:09:19.575+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168318",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440731191\n \n \n   Started looking at this. The gtest stuff is pretty inextricable. We need to have functions like `AssertArraysEqual` that can be used with googletest that will perform appropriate assertions.\r\n   \r\n   I'll keep looking at the static CRT thing for now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T16:37:38.897+0000",
                    "updated": "2018-11-21T16:37:38.897+0000",
                    "started": "2018-11-21T16:37:38.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168362",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440736763\n \n \n   OK, the key item is here:\r\n   \r\n   https://github.com/apache/arrow/blob/master/ci/appveyor-cpp-build.bat#L24\r\n   \r\n   ```\r\n     @rem Since we link the CRT statically, we should also disable building\r\n     @rem the Arrow shared library to link the tests statically, otherwise\r\n     @rem the Arrow DLL and the tests end up using a different instance of\r\n     @rem the CRT, which wreaks havoc.\r\n   ```\r\n   \r\n   But the recent change to link the unit tests dynamically is forcing ARROW_BUILD_SHARED to be on. This is a bit hacky, so I'm going to introduce an ARROW_TESTS_LINKAGE argument so we can switch to static linkage for the tests\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-21T16:53:44.456+0000",
                    "updated": "2018-11-21T16:53:44.456+0000",
                    "started": "2018-11-21T16:53:44.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168376",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997#issuecomment-440875182\n \n \n   Merging this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T01:06:51.027+0000",
                    "updated": "2018-11-22T01:06:51.027+0000",
                    "started": "2018-11-22T01:06:51.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168601",
                    "issueId": "13198124"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/worklog/168602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2997: ARROW-3778: [C++] Compile parts of test-util.h that we can once, link with unit tests\nURL: https://github.com/apache/arrow/pull/2997\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/appveyor-cpp-build.bat b/ci/appveyor-cpp-build.bat\nindex 195941e5b1..f59767768c 100644\n--- a/ci/appveyor-cpp-build.bat\n+++ b/ci/appveyor-cpp-build.bat\n@@ -35,6 +35,7 @@ if \"%JOB%\" == \"Static_Crt_Build\" (\n         -DARROW_BOOST_USE_SHARED=OFF ^\n         -DARROW_BUILD_SHARED=OFF ^\n         -DCMAKE_BUILD_TYPE=Debug ^\n+        -DARROW_TEST_LINKAGE=static ^\n         -DARROW_CXXFLAGS=\"/MP\" ^\n         ..  || exit /B\n \n@@ -51,6 +52,7 @@ if \"%JOB%\" == \"Static_Crt_Build\" (\n         -DARROW_BOOST_USE_SHARED=OFF ^\n         -DARROW_BUILD_SHARED=OFF ^\n         -DCMAKE_BUILD_TYPE=Release ^\n+        -DARROW_TEST_LINKAGE=static ^\n         -DCMAKE_CXX_FLAGS_RELEASE=\"/MT %CMAKE_CXX_FLAGS_RELEASE%\" ^\n         -DARROW_CXXFLAGS=\"/WX /MP\" ^\n         ..  || exit /B\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex a32ac0f1d9..2361788834 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -124,6 +124,10 @@ if(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n     \"Build the Arrow googletest unit tests\"\n     ON)\n \n+  set(ARROW_TEST_LINKAGE \"shared\" CACHE STRING\n+    \"Linkage of Arrow libraries with unit tests executables. \\\n+static|shared (default shared)\")\n+\n   set(ARROW_TEST_INCLUDE_LABELS \"\" CACHE STRING\n     \"Only build unit tests having the indicated label or labels. \\\n Pass multiple labels by dividing with semicolons\")\n@@ -436,8 +440,6 @@ endif()\n \n if(NOT ARROW_BUILD_TESTS)\n   set(NO_TESTS 1)\n-else()\n-  set(ARROW_BUILD_SHARED ON)\n endif()\n \n if(NOT ARROW_BUILD_BENCHMARKS)\n@@ -683,13 +685,6 @@ if (ARROW_STATIC_LINK_LIBS)\n   add_dependencies(arrow_dependencies ${ARROW_STATIC_LINK_LIBS})\n endif()\n \n-if (ARROW_BUILD_BENCHMARKS)\n-  set(ARROW_BENCHMARK_LINK_LIBS\n-    arrow_benchmark_main\n-    arrow_static\n-    gtest_static)\n-endif()\n-\n set(ARROW_SHARED_PRIVATE_LINK_LIBS\n   ${ARROW_STATIC_LINK_LIBS}\n   ${BOOST_SYSTEM_LIBRARY}\n@@ -708,30 +703,50 @@ if (NOT MSVC)\n     ${CMAKE_DL_LIBS})\n endif()\n \n-if (ARROW_BUILD_STATIC)\n-  set(ARROW_MIN_TEST_LIBS\n-    arrow_static\n-    gtest_main_static\n-    gtest_static)\n-else ()\n-  set(ARROW_MIN_TEST_LIBS\n-    arrow_shared\n-    ${ARROW_LINK_LIBS}\n-    double-conversion_static\n-    ${BOOST_SYSTEM_LIBRARY}\n-    ${BOOST_FILESYSTEM_LIBRARY}\n-    ${BOOST_REGEX_LIBRARY}\n-    gtest_main_static\n-    gtest_static)\n-endif()\n+set(ARROW_TEST_STATIC_LINK_LIBS\n+  arrow_testing_static\n+  arrow_static\n+  ${ARROW_LINK_LIBS}\n+  gtest_main_static\n+  gtest_static)\n+\n+set(ARROW_TEST_SHARED_LINK_LIBS\n+  arrow_testing_shared\n+  arrow_shared\n+  ${ARROW_LINK_LIBS}\n+  double-conversion_static\n+  ${BOOST_SYSTEM_LIBRARY}\n+  ${BOOST_FILESYSTEM_LIBRARY}\n+  ${BOOST_REGEX_LIBRARY}\n+  gtest_main_static\n+  gtest_static)\n \n if(NOT MSVC)\n-  set(ARROW_MIN_TEST_LIBS\n-    ${ARROW_MIN_TEST_LIBS}\n+  set(ARROW_TEST_SHARED_LINK_LIBS\n+    ${ARROW_TEST_SHARED_LINK_LIBS}\n     ${CMAKE_DL_LIBS})\n endif()\n \n-set(ARROW_TEST_LINK_LIBS ${ARROW_MIN_TEST_LIBS})\n+if (\"${ARROW_TEST_LINKAGE}\" STREQUAL \"shared\")\n+  if (NOT ARROW_BUILD_SHARED)\n+    message(FATAL_ERROR \"If using shared linkage for unit tests, must also \\\n+pass ARROW_BUILD_SHARED=on\")\n+  endif()\n+  # Use shared linking for unit tests if it's available\n+  set(ARROW_TEST_LINK_LIBS ${ARROW_TEST_SHARED_LINK_LIBS})\n+else()\n+  if (NOT ARROW_BUILD_STATIC)\n+    message(FATAL_ERROR \"If using static linkage for unit tests, must also \\\n+pass ARROW_BUILD_STATIC=on\")\n+  endif()\n+  set(ARROW_TEST_LINK_LIBS ${ARROW_TEST_STATIC_LINK_LIBS})\n+endif()\n+\n+if (ARROW_BUILD_BENCHMARKS)\n+  set(ARROW_BENCHMARK_LINK_LIBS\n+    arrow_benchmark_main\n+    ${ARROW_TEST_LINK_LIBS})\n+endif()\n \n if (ARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC)\ndiff --git a/cpp/cmake_modules/BuildUtils.cmake b/cpp/cmake_modules/BuildUtils.cmake\nindex b79d93cff6..57cac82777 100644\n--- a/cpp/cmake_modules/BuildUtils.cmake\n+++ b/cpp/cmake_modules/BuildUtils.cmake\n@@ -259,6 +259,10 @@ function(ADD_ARROW_LIB LIB_NAME)\n       set(LIB_NAME_STATIC ${LIB_NAME})\n     endif()\n \n+    if (ARROW_BUILD_STATIC AND WIN32)\n+      target_compile_definitions(${LIB_NAME}_static PUBLIC ARROW_STATIC)\n+    endif()\n+\n     set_target_properties(${LIB_NAME}_static\n       PROPERTIES\n       LIBRARY_OUTPUT_DIRECTORY \"${BUILD_OUTPUT_ROOT_DIRECTORY}\"\n@@ -460,26 +464,6 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n     LABELS ${ARG_LABELS})\n endfunction()\n \n-# A wrapper for add_dependencies() that is compatible with NO_TESTS.\n-function(ADD_ARROW_TEST_DEPENDENCIES REL_TEST_NAME)\n-  if(NO_TESTS)\n-    return()\n-  endif()\n-  get_filename_component(TEST_NAME ${REL_TEST_NAME} NAME_WE)\n-\n-  add_dependencies(${TEST_NAME} ${ARGN})\n-endfunction()\n-\n-# A wrapper for target_link_libraries() that is compatible with NO_TESTS.\n-function(ARROW_TEST_LINK_LIBRARIES REL_TEST_NAME)\n-  if(NO_TESTS)\n-    return()\n-  endif()\n-  get_filename_component(TEST_NAME ${REL_TEST_NAME} NAME_WE)\n-\n-  target_link_libraries(${TEST_NAME} ${ARGN})\n-endfunction()\n-\n ############################################################\n # Fuzzing\n ############################################################\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex cec6088d1b..8c4138beff 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -169,6 +169,28 @@ ADD_ARROW_LIB(arrow\n   SHARED_PRIVATE_LINK_LIBS ${ARROW_SHARED_PRIVATE_LINK_LIBS}\n   STATIC_LINK_LIBS ${ARROW_STATIC_LINK_LIBS})\n \n+if (ARROW_BUILD_STATIC AND WIN32)\n+  target_compile_definitions(arrow_static PUBLIC ARROW_STATIC)\n+endif()\n+\n+if (ARROW_BUILD_TESTS OR ARROW_BUILD_BENCHMARKS)\n+  # that depend on gtest\n+  ADD_ARROW_LIB(arrow_testing\n+    SOURCES test-util.cc\n+    OUTPUTS ARROW_TESTING_LIBRARIES\n+    DEPENDENCIES gtest_static\n+    SHARED_LINK_LIBS arrow_shared gtest_static\n+    STATIC_LINK_LIBS arrow_static)\n+\n+  if (ARROW_BUILD_STATIC AND WIN32)\n+    target_compile_definitions(arrow_testing_static PUBLIC ARROW_STATIC)\n+  endif()\n+\n+  set(ARROW_LIBRARIES\n+    ${ARROW_LIBRARIES}\n+    ${ARROW_TESTING_LIBRARIES})\n+endif()\n+\n find_package(Backtrace)\n \n foreach(LIB_TARGET ${ARROW_LIBRARIES})\n@@ -180,10 +202,6 @@ foreach(LIB_TARGET ${ARROW_LIBRARIES})\n   endif()\n endforeach()\n \n-if (ARROW_BUILD_STATIC AND WIN32)\n-  target_compile_definitions(arrow_static PUBLIC ARROW_STATIC)\n-endif()\n-\n # Headers: top level\n install(FILES\n   allocator.h\ndiff --git a/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt b/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\nindex ba2634b286..3a16a7834c 100644\n--- a/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\n+++ b/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\n@@ -105,9 +105,9 @@ set_property(SOURCE ${ARROW_HIVESERVER2_SRCS}\n   \" -Wno-shadow-field\")\n \n set(ARROW_HIVESERVER2_TEST_LINK_LIBS\n-  ${ARROW_TEST_LINK_LIBS}\n   arrow_hiveserver2_static\n   arrow_hiveserver2_thrift\n+  ${ARROW_TEST_LINK_LIBS}\n   thriftstatic)\n \n if (ARROW_BUILD_TESTS)\ndiff --git a/cpp/src/arrow/python/CMakeLists.txt b/cpp/src/arrow/python/CMakeLists.txt\nindex 1c075f83f2..ff63eb0567 100644\n--- a/cpp/src/arrow/python/CMakeLists.txt\n+++ b/cpp/src/arrow/python/CMakeLists.txt\n@@ -147,6 +147,7 @@ if (ARROW_BUILD_TESTS)\n   set(ARROW_PYTHON_MIN_TEST_LIBS\n     arrow_python_test_main\n     arrow_python_shared\n+    arrow_testing_shared\n     arrow_shared)\n \n   set(ARROW_PYTHON_TEST_LINK_LIBS ${ARROW_PYTHON_MIN_TEST_LIBS})\ndiff --git a/cpp/src/arrow/test-util.cc b/cpp/src/arrow/test-util.cc\nnew file mode 100644\nindex 0000000000..60e5fd39d5\n--- /dev/null\n+++ b/cpp/src/arrow/test-util.cc\n@@ -0,0 +1,299 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/test-util.h\"\n+\n+#ifndef _WIN32\n+#include <sys/stat.h>\n+#include <sys/wait.h>\n+#include <unistd.h>\n+#endif\n+\n+#include <algorithm>\n+#include <chrono>\n+#include <cstdint>\n+#include <cstdlib>\n+#include <iostream>\n+#include <limits>\n+#include <memory>\n+#include <random>\n+#include <sstream>\n+#include <string>\n+#include <thread>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/pretty_print.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/decimal.h\"\n+#include \"arrow/util/logging.h\"\n+\n+void sleep_for(double seconds) {\n+  std::this_thread::sleep_for(\n+      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n+}\n+\n+namespace arrow {\n+\n+void random_null_bytes(int64_t n, double pct_null, uint8_t* null_bytes) {\n+  const int random_seed = 0;\n+  std::mt19937 gen(random_seed);\n+  std::uniform_real_distribution<double> d(0.0, 1.0);\n+  std::generate(null_bytes, null_bytes + n,\n+                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n+}\n+\n+void random_is_valid(int64_t n, double pct_null, std::vector<bool>* is_valid) {\n+  const int random_seed = 0;\n+  std::mt19937 gen(random_seed);\n+  std::uniform_real_distribution<double> d(0.0, 1.0);\n+  is_valid->resize(n, false);\n+  std::generate(is_valid->begin(), is_valid->end(),\n+                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n+}\n+\n+void random_bytes(int64_t n, uint32_t seed, uint8_t* out) {\n+  std::mt19937 gen(seed);\n+  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n+  std::generate(out, out + n, [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n+}\n+\n+int32_t DecimalSize(int32_t precision) {\n+  DCHECK_GE(precision, 1) << \"decimal precision must be greater than or equal to 1, got \"\n+                          << precision;\n+  DCHECK_LE(precision, 38) << \"decimal precision must be less than or equal to 38, got \"\n+                           << precision;\n+\n+  switch (precision) {\n+    case 1:\n+    case 2:\n+      return 1;  // 127\n+    case 3:\n+    case 4:\n+      return 2;  // 32,767\n+    case 5:\n+    case 6:\n+      return 3;  // 8,388,607\n+    case 7:\n+    case 8:\n+    case 9:\n+      return 4;  // 2,147,483,427\n+    case 10:\n+    case 11:\n+      return 5;  // 549,755,813,887\n+    case 12:\n+    case 13:\n+    case 14:\n+      return 6;  // 140,737,488,355,327\n+    case 15:\n+    case 16:\n+      return 7;  // 36,028,797,018,963,967\n+    case 17:\n+    case 18:\n+      return 8;  // 9,223,372,036,854,775,807\n+    case 19:\n+    case 20:\n+    case 21:\n+      return 9;  // 2,361,183,241,434,822,606,847\n+    case 22:\n+    case 23:\n+      return 10;  // 604,462,909,807,314,587,353,087\n+    case 24:\n+    case 25:\n+    case 26:\n+      return 11;  // 154,742,504,910,672,534,362,390,527\n+    case 27:\n+    case 28:\n+      return 12;  // 39,614,081,257,132,168,796,771,975,167\n+    case 29:\n+    case 30:\n+    case 31:\n+      return 13;  // 10,141,204,801,825,835,211,973,625,643,007\n+    case 32:\n+    case 33:\n+      return 14;  // 2,596,148,429,267,413,814,265,248,164,610,047\n+    case 34:\n+    case 35:\n+      return 15;  // 664,613,997,892,457,936,451,903,530,140,172,287\n+    case 36:\n+    case 37:\n+    case 38:\n+      return 16;  // 170,141,183,460,469,231,731,687,303,715,884,105,727\n+    default:\n+      DCHECK(false);\n+      break;\n+  }\n+  return -1;\n+}\n+\n+void random_decimals(int64_t n, uint32_t seed, int32_t precision, uint8_t* out) {\n+  std::mt19937 gen(seed);\n+  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n+  const int32_t required_bytes = DecimalSize(precision);\n+  constexpr int32_t byte_width = 16;\n+  std::fill(out, out + byte_width * n, '\\0');\n+\n+  for (int64_t i = 0; i < n; ++i, out += byte_width) {\n+    std::generate(out, out + required_bytes,\n+                  [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n+\n+    // sign extend if the sign bit is set for the last byte generated\n+    // 0b10000000 == 0x80 == 128\n+    if ((out[required_bytes - 1] & '\\x80') != 0) {\n+      std::fill(out + required_bytes, out + byte_width, '\\xFF');\n+    }\n+  }\n+}\n+\n+void random_ascii(int64_t n, uint32_t seed, uint8_t* out) {\n+  rand_uniform_int(n, seed, static_cast<int32_t>('A'), static_cast<int32_t>('z'), out);\n+}\n+\n+int64_t CountNulls(const std::vector<uint8_t>& valid_bytes) {\n+  return static_cast<int64_t>(std::count(valid_bytes.cbegin(), valid_bytes.cend(), '\\0'));\n+}\n+\n+Status MakeRandomByteBuffer(int64_t length, MemoryPool* pool,\n+                            std::shared_ptr<ResizableBuffer>* out, uint32_t seed) {\n+  std::shared_ptr<ResizableBuffer> result;\n+  RETURN_NOT_OK(AllocateResizableBuffer(pool, length, &result));\n+  random_bytes(length, seed, result->mutable_data());\n+  *out = result;\n+  return Status::OK();\n+}\n+\n+void AssertArraysEqual(const Array& expected, const Array& actual) {\n+  ASSERT_ARRAYS_EQUAL(expected, actual);\n+}\n+\n+void AssertChunkedEqual(const ChunkedArray& expected, const ChunkedArray& actual) {\n+  ASSERT_EQ(expected.num_chunks(), actual.num_chunks()) << \"# chunks unequal\";\n+  if (!actual.Equals(expected)) {\n+    std::stringstream pp_result;\n+    std::stringstream pp_expected;\n+\n+    for (int i = 0; i < actual.num_chunks(); ++i) {\n+      auto c1 = actual.chunk(i);\n+      auto c2 = expected.chunk(i);\n+      if (!c1->Equals(*c2)) {\n+        EXPECT_OK(::arrow::PrettyPrint(*c1, 0, &pp_result));\n+        EXPECT_OK(::arrow::PrettyPrint(*c2, 0, &pp_expected));\n+        FAIL() << \"Chunk \" << i << \" Got: \" << pp_result.str()\n+               << \"\\nExpected: \" << pp_expected.str();\n+      }\n+    }\n+  }\n+}\n+\n+void AssertChunkedEqual(const ChunkedArray& actual, const ArrayVector& expected) {\n+  AssertChunkedEqual(ChunkedArray(expected, actual.type()), actual);\n+}\n+\n+void AssertBufferEqual(const Buffer& buffer, const std::vector<uint8_t>& expected) {\n+  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n+  const uint8_t* buffer_data = buffer.data();\n+  for (size_t i = 0; i < expected.size(); ++i) {\n+    ASSERT_EQ(buffer_data[i], expected[i]);\n+  }\n+}\n+\n+void AssertBufferEqual(const Buffer& buffer, const std::string& expected) {\n+  ASSERT_EQ(buffer.size(), expected.length()) << \"Mismatching buffer size\";\n+  const uint8_t* buffer_data = buffer.data();\n+  for (size_t i = 0; i < expected.size(); ++i) {\n+    ASSERT_EQ(buffer_data[i], expected[i]);\n+  }\n+}\n+\n+void AssertBufferEqual(const Buffer& buffer, const Buffer& expected) {\n+  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n+  ASSERT_TRUE(buffer.Equals(expected));\n+}\n+\n+void AssertSchemaEqual(const Schema& lhs, const Schema& rhs) {\n+  if (!lhs.Equals(rhs)) {\n+    std::stringstream ss;\n+    ss << \"left schema: \" << lhs.ToString() << std::endl\n+       << \"right schema: \" << rhs.ToString() << std::endl;\n+    FAIL() << ss.str();\n+  }\n+}\n+\n+void PrintColumn(const Column& col, std::stringstream* ss) {\n+  const ChunkedArray& carr = *col.data();\n+  for (int i = 0; i < carr.num_chunks(); ++i) {\n+    auto c1 = carr.chunk(i);\n+    *ss << \"Chunk \" << i << std::endl;\n+    EXPECT_OK(::arrow::PrettyPrint(*c1, 0, ss));\n+    *ss << std::endl;\n+  }\n+}\n+\n+void AssertTablesEqual(const Table& expected, const Table& actual,\n+                       bool same_chunk_layout) {\n+  ASSERT_EQ(expected.num_columns(), actual.num_columns());\n+\n+  if (same_chunk_layout) {\n+    for (int i = 0; i < actual.num_columns(); ++i) {\n+      AssertChunkedEqual(*expected.column(i)->data(), *actual.column(i)->data());\n+    }\n+  } else {\n+    std::stringstream ss;\n+    if (!actual.Equals(expected)) {\n+      for (int i = 0; i < expected.num_columns(); ++i) {\n+        ss << \"Actual column \" << i << std::endl;\n+        PrintColumn(*actual.column(i), &ss);\n+\n+        ss << \"Expected column \" << i << std::endl;\n+        PrintColumn(*expected.column(i), &ss);\n+      }\n+      FAIL() << ss.str();\n+    }\n+  }\n+}\n+\n+void CompareBatch(const RecordBatch& left, const RecordBatch& right) {\n+  if (!left.schema()->Equals(*right.schema())) {\n+    FAIL() << \"Left schema: \" << left.schema()->ToString()\n+           << \"\\nRight schema: \" << right.schema()->ToString();\n+  }\n+  ASSERT_EQ(left.num_columns(), right.num_columns())\n+      << left.schema()->ToString() << \" result: \" << right.schema()->ToString();\n+  ASSERT_EQ(left.num_rows(), right.num_rows());\n+  for (int i = 0; i < left.num_columns(); ++i) {\n+    if (!left.column(i)->Equals(right.column(i))) {\n+      std::stringstream ss;\n+      ss << \"Idx: \" << i << \" Name: \" << left.column_name(i);\n+      ss << std::endl << \"Left: \";\n+      ASSERT_OK(PrettyPrint(*left.column(i), 0, &ss));\n+      ss << std::endl << \"Right: \";\n+      ASSERT_OK(PrettyPrint(*right.column(i), 0, &ss));\n+      FAIL() << ss.str();\n+    }\n+  }\n+}\n+\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex c4ce57d2c0..296aa8833d 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -51,11 +51,7 @@\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n-\n-static inline void sleep_for(double seconds) {\n-  std::this_thread::sleep_for(\n-      std::chrono::nanoseconds(static_cast<int64_t>(seconds * 1e9)));\n-}\n+#include \"arrow/util/visibility.h\"\n \n #define STRINGIFY(x) #x\n \n@@ -165,117 +161,36 @@ static inline Status GetBitmapFromVector(const std::vector<T>& is_valid,\n \n // Sets approximately pct_null of the first n bytes in null_bytes to zero\n // and the rest to non-zero (true) values.\n-static inline void random_null_bytes(int64_t n, double pct_null, uint8_t* null_bytes) {\n-  const int random_seed = 0;\n-  std::mt19937 gen(random_seed);\n-  std::uniform_real_distribution<double> d(0.0, 1.0);\n-  std::generate(null_bytes, null_bytes + n,\n-                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n-}\n-\n-static inline void random_is_valid(int64_t n, double pct_null,\n-                                   std::vector<bool>* is_valid) {\n-  const int random_seed = 0;\n-  std::mt19937 gen(random_seed);\n-  std::uniform_real_distribution<double> d(0.0, 1.0);\n-  is_valid->resize(n, false);\n-  std::generate(is_valid->begin(), is_valid->end(),\n-                [&d, &gen, &pct_null] { return d(gen) > pct_null; });\n-}\n-\n-static inline void random_bytes(int64_t n, uint32_t seed, uint8_t* out) {\n-  std::mt19937 gen(seed);\n-  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n-  std::generate(out, out + n, [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n-}\n-\n-static int32_t DecimalSize(int32_t precision) {\n-  DCHECK_GE(precision, 1) << \"decimal precision must be greater than or equal to 1, got \"\n-                          << precision;\n-  DCHECK_LE(precision, 38) << \"decimal precision must be less than or equal to 38, got \"\n-                           << precision;\n-\n-  switch (precision) {\n-    case 1:\n-    case 2:\n-      return 1;  // 127\n-    case 3:\n-    case 4:\n-      return 2;  // 32,767\n-    case 5:\n-    case 6:\n-      return 3;  // 8,388,607\n-    case 7:\n-    case 8:\n-    case 9:\n-      return 4;  // 2,147,483,427\n-    case 10:\n-    case 11:\n-      return 5;  // 549,755,813,887\n-    case 12:\n-    case 13:\n-    case 14:\n-      return 6;  // 140,737,488,355,327\n-    case 15:\n-    case 16:\n-      return 7;  // 36,028,797,018,963,967\n-    case 17:\n-    case 18:\n-      return 8;  // 9,223,372,036,854,775,807\n-    case 19:\n-    case 20:\n-    case 21:\n-      return 9;  // 2,361,183,241,434,822,606,847\n-    case 22:\n-    case 23:\n-      return 10;  // 604,462,909,807,314,587,353,087\n-    case 24:\n-    case 25:\n-    case 26:\n-      return 11;  // 154,742,504,910,672,534,362,390,527\n-    case 27:\n-    case 28:\n-      return 12;  // 39,614,081,257,132,168,796,771,975,167\n-    case 29:\n-    case 30:\n-    case 31:\n-      return 13;  // 10,141,204,801,825,835,211,973,625,643,007\n-    case 32:\n-    case 33:\n-      return 14;  // 2,596,148,429,267,413,814,265,248,164,610,047\n-    case 34:\n-    case 35:\n-      return 15;  // 664,613,997,892,457,936,451,903,530,140,172,287\n-    case 36:\n-    case 37:\n-    case 38:\n-      return 16;  // 170,141,183,460,469,231,731,687,303,715,884,105,727\n-    default:\n-      DCHECK(false);\n-      break;\n-  }\n-  return -1;\n-}\n-\n-static inline void random_decimals(int64_t n, uint32_t seed, int32_t precision,\n-                                   uint8_t* out) {\n-  std::mt19937 gen(seed);\n-  std::uniform_int_distribution<uint32_t> d(0, std::numeric_limits<uint8_t>::max());\n-  const int32_t required_bytes = DecimalSize(precision);\n-  constexpr int32_t byte_width = 16;\n-  std::fill(out, out + byte_width * n, '\\0');\n-\n-  for (int64_t i = 0; i < n; ++i, out += byte_width) {\n-    std::generate(out, out + required_bytes,\n-                  [&d, &gen] { return static_cast<uint8_t>(d(gen)); });\n-\n-    // sign extend if the sign bit is set for the last byte generated\n-    // 0b10000000 == 0x80 == 128\n-    if ((out[required_bytes - 1] & '\\x80') != 0) {\n-      std::fill(out + required_bytes, out + byte_width, '\\xFF');\n-    }\n-  }\n-}\n+ARROW_EXPORT void random_null_bytes(int64_t n, double pct_null, uint8_t* null_bytes);\n+ARROW_EXPORT void random_is_valid(int64_t n, double pct_null,\n+                                  std::vector<bool>* is_valid);\n+ARROW_EXPORT void random_bytes(int64_t n, uint32_t seed, uint8_t* out);\n+ARROW_EXPORT int32_t DecimalSize(int32_t precision);\n+ARROW_EXPORT void random_decimals(int64_t n, uint32_t seed, int32_t precision,\n+                                  uint8_t* out);\n+ARROW_EXPORT void random_ascii(int64_t n, uint32_t seed, uint8_t* out);\n+ARROW_EXPORT int64_t CountNulls(const std::vector<uint8_t>& valid_bytes);\n+\n+ARROW_EXPORT Status MakeRandomByteBuffer(int64_t length, MemoryPool* pool,\n+                                         std::shared_ptr<ResizableBuffer>* out,\n+                                         uint32_t seed = 0);\n+\n+ARROW_EXPORT void AssertArraysEqual(const Array& expected, const Array& actual);\n+ARROW_EXPORT void AssertChunkedEqual(const ChunkedArray& expected,\n+                                     const ChunkedArray& actual);\n+ARROW_EXPORT void AssertChunkedEqual(const ChunkedArray& actual,\n+                                     const ArrayVector& expected);\n+ARROW_EXPORT void AssertBufferEqual(const Buffer& buffer,\n+                                    const std::vector<uint8_t>& expected);\n+ARROW_EXPORT void AssertBufferEqual(const Buffer& buffer, const std::string& expected);\n+ARROW_EXPORT void AssertBufferEqual(const Buffer& buffer, const Buffer& expected);\n+ARROW_EXPORT void AssertSchemaEqual(const Schema& lhs, const Schema& rhs);\n+\n+ARROW_EXPORT void PrintColumn(const Column& col, std::stringstream* ss);\n+ARROW_EXPORT void AssertTablesEqual(const Table& expected, const Table& actual,\n+                                    bool same_chunk_layout = true);\n+\n+ARROW_EXPORT void CompareBatch(const RecordBatch& left, const RecordBatch& right);\n \n template <typename T, typename U>\n void rand_uniform_int(int64_t n, uint32_t seed, T min_value, T max_value, U* out) {\n@@ -296,14 +211,6 @@ struct GenerateRandom<T, typename std::enable_if<std::is_integral<T>::value>::ty\n   }\n };\n \n-static inline void random_ascii(int64_t n, uint32_t seed, uint8_t* out) {\n-  rand_uniform_int(n, seed, static_cast<int32_t>('A'), static_cast<int32_t>('z'), out);\n-}\n-\n-static inline int64_t CountNulls(const std::vector<uint8_t>& valid_bytes) {\n-  return static_cast<int64_t>(std::count(valid_bytes.cbegin(), valid_bytes.cend(), '\\0'));\n-}\n-\n template <typename T>\n Status MakeRandomBuffer(int64_t length, MemoryPool* pool,\n                         std::shared_ptr<ResizableBuffer>* out, uint32_t seed = 0) {\n@@ -315,105 +222,6 @@ Status MakeRandomBuffer(int64_t length, MemoryPool* pool,\n   return Status::OK();\n }\n \n-Status MakeRandomByteBuffer(int64_t length, MemoryPool* pool,\n-                            std::shared_ptr<ResizableBuffer>* out, uint32_t seed = 0) {\n-  std::shared_ptr<ResizableBuffer> result;\n-  RETURN_NOT_OK(AllocateResizableBuffer(pool, length, &result));\n-  random_bytes(length, seed, result->mutable_data());\n-  *out = result;\n-  return Status::OK();\n-}\n-\n-void AssertArraysEqual(const Array& expected, const Array& actual) {\n-  ASSERT_ARRAYS_EQUAL(expected, actual);\n-}\n-\n-void AssertChunkedEqual(const ChunkedArray& expected, const ChunkedArray& actual) {\n-  ASSERT_EQ(expected.num_chunks(), actual.num_chunks()) << \"# chunks unequal\";\n-  if (!actual.Equals(expected)) {\n-    std::stringstream pp_result;\n-    std::stringstream pp_expected;\n-\n-    for (int i = 0; i < actual.num_chunks(); ++i) {\n-      auto c1 = actual.chunk(i);\n-      auto c2 = expected.chunk(i);\n-      if (!c1->Equals(*c2)) {\n-        EXPECT_OK(::arrow::PrettyPrint(*c1, 0, &pp_result));\n-        EXPECT_OK(::arrow::PrettyPrint(*c2, 0, &pp_expected));\n-        FAIL() << \"Chunk \" << i << \" Got: \" << pp_result.str()\n-               << \"\\nExpected: \" << pp_expected.str();\n-      }\n-    }\n-  }\n-}\n-\n-void AssertChunkedEqual(const ChunkedArray& actual, const ArrayVector& expected) {\n-  AssertChunkedEqual(ChunkedArray(expected, actual.type()), actual);\n-}\n-\n-void AssertBufferEqual(const Buffer& buffer, const std::vector<uint8_t>& expected) {\n-  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n-  const uint8_t* buffer_data = buffer.data();\n-  for (size_t i = 0; i < expected.size(); ++i) {\n-    ASSERT_EQ(buffer_data[i], expected[i]);\n-  }\n-}\n-\n-void AssertBufferEqual(const Buffer& buffer, const std::string& expected) {\n-  ASSERT_EQ(buffer.size(), expected.length()) << \"Mismatching buffer size\";\n-  const uint8_t* buffer_data = buffer.data();\n-  for (size_t i = 0; i < expected.size(); ++i) {\n-    ASSERT_EQ(buffer_data[i], expected[i]);\n-  }\n-}\n-\n-void AssertBufferEqual(const Buffer& buffer, const Buffer& expected) {\n-  ASSERT_EQ(buffer.size(), expected.size()) << \"Mismatching buffer size\";\n-  ASSERT_TRUE(buffer.Equals(expected));\n-}\n-\n-static inline void AssertSchemaEqual(const Schema& lhs, const Schema& rhs) {\n-  if (!lhs.Equals(rhs)) {\n-    std::stringstream ss;\n-    ss << \"left schema: \" << lhs.ToString() << std::endl\n-       << \"right schema: \" << rhs.ToString() << std::endl;\n-    FAIL() << ss.str();\n-  }\n-}\n-\n-void PrintColumn(const Column& col, std::stringstream* ss) {\n-  const ChunkedArray& carr = *col.data();\n-  for (int i = 0; i < carr.num_chunks(); ++i) {\n-    auto c1 = carr.chunk(i);\n-    *ss << \"Chunk \" << i << std::endl;\n-    EXPECT_OK(::arrow::PrettyPrint(*c1, 0, ss));\n-    *ss << std::endl;\n-  }\n-}\n-\n-void AssertTablesEqual(const Table& expected, const Table& actual,\n-                       bool same_chunk_layout = true) {\n-  ASSERT_EQ(expected.num_columns(), actual.num_columns());\n-\n-  if (same_chunk_layout) {\n-    for (int i = 0; i < actual.num_columns(); ++i) {\n-      AssertChunkedEqual(*expected.column(i)->data(), *actual.column(i)->data());\n-    }\n-  } else {\n-    std::stringstream ss;\n-    if (!actual.Equals(expected)) {\n-      for (int i = 0; i < expected.num_columns(); ++i) {\n-        ss << \"Actual column \" << i << std::endl;\n-        PrintColumn(*actual.column(i), &ss);\n-\n-        ss << \"Expected column \" << i << std::endl;\n-        PrintColumn(*expected.column(i), &ss);\n-      }\n-      FAIL() << ss.str();\n-    }\n-  }\n-}\n-\n template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n void ArrayFromVector(const std::shared_ptr<DataType>& type,\n                      const std::vector<bool>& is_valid, const std::vector<C_TYPE>& values,\n@@ -534,27 +342,6 @@ Status MakeArray(const std::vector<uint8_t>& valid_bytes, const std::vector<T>&\n     }                                        \\\n   } while (false)\n \n-static inline void CompareBatch(const RecordBatch& left, const RecordBatch& right) {\n-  if (!left.schema()->Equals(*right.schema())) {\n-    FAIL() << \"Left schema: \" << left.schema()->ToString()\n-           << \"\\nRight schema: \" << right.schema()->ToString();\n-  }\n-  ASSERT_EQ(left.num_columns(), right.num_columns())\n-      << left.schema()->ToString() << \" result: \" << right.schema()->ToString();\n-  ASSERT_EQ(left.num_rows(), right.num_rows());\n-  for (int i = 0; i < left.num_columns(); ++i) {\n-    if (!left.column(i)->Equals(right.column(i))) {\n-      std::stringstream ss;\n-      ss << \"Idx: \" << i << \" Name: \" << left.column_name(i);\n-      ss << std::endl << \"Left: \";\n-      ASSERT_OK(PrettyPrint(*left.column(i), 0, &ss));\n-      ss << std::endl << \"Right: \";\n-      ASSERT_OK(PrettyPrint(*right.column(i), 0, &ss));\n-      FAIL() << ss.str();\n-    }\n-  }\n-}\n-\n // ----------------------------------------------------------------------\n // A RecordBatchReader for serving a sequence of in-memory record batches\n \ndiff --git a/cpp/src/parquet/CMakeLists.txt b/cpp/src/parquet/CMakeLists.txt\nindex 0381a7b229..1538b58164 100644\n--- a/cpp/src/parquet/CMakeLists.txt\n+++ b/cpp/src/parquet/CMakeLists.txt\n@@ -58,9 +58,13 @@ endfunction()\n if (ARROW_BUILD_STATIC)\n   set(PARQUET_STATIC_LINK_LIBS\n     arrow_static)\n-  set(ARROW_LIBRARY_TESTING arrow_static)\n+  set(ARROW_LIBRARIES_FOR_STATIC_TESTS\n+    arrow_testing_static\n+    arrow_static)\n else()\n-  set(ARROW_LIBRARY_TESTING arrow_shared)\n+  set(ARROW_LIBRARIES_FOR_STATIC_TESTS\n+    arrow_testing_shared\n+    arrow_shared)\n endif()\n \n set(PARQUET_BOOST_LINK_LIBS\n@@ -87,13 +91,14 @@ elseif(NOT MSVC)\n endif()\n \n set(PARQUET_SHARED_TEST_LINK_LIBS\n+  arrow_testing_shared\n   ${PARQUET_MIN_TEST_LIBS}\n   parquet_shared\n   thriftstatic)\n \n set(PARQUET_STATIC_TEST_LINK_LIBS\n   ${PARQUET_MIN_TEST_LIBS}\n-  ${ARROW_LIBRARY_TESTING}\n+  ${ARROW_LIBRARIES_FOR_STATIC_TESTS}\n   parquet_static)\n \n set(PARQUET_BENCHMARK_LINK_LIBRARIES\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T01:07:31.786+0000",
                    "updated": "2018-11-22T01:07:31.786+0000",
                    "started": "2018-11-22T01:07:31.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168602",
                    "issueId": "13198124"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@11a7524a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3aa35fe2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13d434e3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@33a82534[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64f2e2b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c75850c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3eb4cb4d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4c47c82a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fd36454[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1faedb47[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d8955c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@75ac1b15[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 22 01:07:22 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-22T01:07:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3778/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-11-13T18:50:06.000+0000",
        "updated": "2018-11-22T01:07:31.000+0000",
        "timeoriginalestimate": null,
        "description": "{{test-util.h}} is included in most (all?) test files, and it's quite long to compile because it includes many other files and recompiles helper functions all the time. Instead we should have only declarations in {{test-util.h}} and put implementations in a separate {{.cc}} file.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Don't put implementations in test-util.h",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/comment/16685666",
                    "id": "16685666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Agreed. I had partly done this in https://github.com/apache/arrow/pull/2704, so if you wanted to use just the arrow/util/testing.h/testing.cc changes from there go ahead",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-13T19:49:48.515+0000",
                    "updated": "2018-11-13T19:49:48.515+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/comment/16692311",
                    "id": "16692311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'll take care of this, since I already partially did it in my other patch",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-19T21:32:21.454+0000",
                    "updated": "2018-11-19T21:32:21.454+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198124/comment/16695440",
                    "id": "16695440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2997\n[https://github.com/apache/arrow/pull/2997]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-22T01:07:22.824+0000",
                    "updated": "2018-11-22T01:07:22.824+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|s00g3c:",
        "customfield_12314139": null
    }
}