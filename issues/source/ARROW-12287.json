{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13370232",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232",
    "key": "ARROW-12287",
    "fields": {
        "parent": {
            "id": "13264619",
            "key": "ARROW-7001",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13264619",
            "fields": {
                "summary": "[C++] Develop threading APIs to accommodate nested parallelism ",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12287/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/578849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace opened a new pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945\n\n\n   Adds an enumerating generator which tags items with their index as well as whether or not they were the last item in the sequence.  This is needed for reassembly potentially out of order record batches during scan.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T03:12:23.563+0000",
                    "updated": "2021-04-08T03:12:23.563+0000",
                    "started": "2021-04-08T03:12:23.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578849",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/578850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#issuecomment-815413412\n\n\n   https://issues.apache.org/jira/browse/ARROW-12287\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T03:12:39.033+0000",
                    "updated": "2021-04-08T03:12:39.033+0000",
                    "started": "2021-04-08T03:12:39.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578850",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579124",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609617395\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n+        state->prev_value = next;\n+        state->prev_index++;\n+        state->finished = finished;\n+        return prev;\n+      });\n+    }\n+  }\n+\n+ private:\n+  struct State {\n+    State(AsyncGenerator<T> source, T initial_value)\n+        : source(std::move(source)), prev_value(std::move(initial_value)), prev_index(0) {\n+      finished = IsIterationEnd<T>(prev_value);\n+    }\n+\n+    AsyncGenerator<T> source;\n+    T prev_value;\n+    int prev_index;\n+    bool finished;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// Wraps items from a source generator with positional information\n+///\n+/// When reqsequencing items from multiple streams that have been merged into\n+/// one it helps to know when an item is the last item in the stream.\n+///\n+/// Note: Another potential use for this could be resequencing items from a\n+/// jittery source.  However, the readahead generator will not emit items out of\n+/// order today so this is not needed.  Furthermore, this generator would need to\n+/// support async reentrancy which, while possible, is not done currently.\n+///\n+/// Note: Since this generator is not actually taking in out-of-order sources it isn't\n+/// strictly neccesary to add the index, it could be added by a map generator.  However,\n+/// since this generator is usually used as laster input to the sequencing generator and\n\nReview comment:\n       ```suggestion\r\n   /// since this generator is usually used as the last input to the sequencing generator and\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T12:01:26.110+0000",
                    "updated": "2021-04-08T12:01:26.110+0000",
                    "started": "2021-04-08T12:01:26.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579124",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609657949\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n\nReview comment:\n       Why is `last` useful? One can simply wait for `End()` to arrive, no?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T12:44:39.587+0000",
                    "updated": "2021-04-08T12:44:39.587+0000",
                    "started": "2021-04-08T12:44:39.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579162",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609658418\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n\nReview comment:\n       I'm not sure why `util::optional<T>` is useful here. You can simply use `IterationTraits<T>::End()` when the end has been reached.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T12:45:24.735+0000",
                    "updated": "2021-04-08T12:45:24.735+0000",
                    "started": "2021-04-08T12:45:24.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579163",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609658656\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n\nReview comment:\n       Why are you buffering the previous value? Why not simply send the current one?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T12:45:41.797+0000",
                    "updated": "2021-04-08T12:45:41.797+0000",
                    "started": "2021-04-08T12:45:41.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579165",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609659709\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n+        state->prev_value = next;\n+        state->prev_index++;\n+        state->finished = finished;\n+        return prev;\n+      });\n+    }\n+  }\n+\n+ private:\n+  struct State {\n+    State(AsyncGenerator<T> source, T initial_value)\n+        : source(std::move(source)), prev_value(std::move(initial_value)), prev_index(0) {\n+      finished = IsIterationEnd<T>(prev_value);\n+    }\n+\n+    AsyncGenerator<T> source;\n+    T prev_value;\n+    int prev_index;\n+    bool finished;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// Wraps items from a source generator with positional information\n+///\n+/// When reqsequencing items from multiple streams that have been merged into\n+/// one it helps to know when an item is the last item in the stream.\n+///\n+/// Note: Another potential use for this could be resequencing items from a\n+/// jittery source.  However, the readahead generator will not emit items out of\n+/// order today so this is not needed.  Furthermore, this generator would need to\n+/// support async reentrancy which, while possible, is not done currently.\n+///\n+/// Note: Since this generator is not actually taking in out-of-order sources it isn't\n+/// strictly neccesary to add the index, it could be added by a map generator.  However,\n+/// since this generator is usually used as laster input to the sequencing generator and\n+/// the sequencing generator needs the index we go ahead and add it for utility's sake\n+///\n+/// \\see MakeSequencingGenerator for an example of putting items back in order\n+///\n+/// This generator is not async-reentrant\n+///\n+/// This generator buffers one item (so it knows which item is the last item)\n+template <typename T>\n+AsyncGenerator<Enumerated<T>> MakeEnumeratedGenerator(AsyncGenerator<T> source) {\n+  return FutureFirstGenerator<Enumerated<T>>(\n+      source().Then([source](const T& initial_value) -> AsyncGenerator<Enumerated<T>> {\n+        return EnumeratingGenerator<T>(std::move(source), initial_value);\n\nReview comment:\n       So what happens if `initial_value` is equal to `IterationTraits<T>::End()`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T12:46:53.145+0000",
                    "updated": "2021-04-08T12:46:53.145+0000",
                    "started": "2021-04-08T12:46:53.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579167",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609661250\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n+        state->prev_value = next;\n+        state->prev_index++;\n+        state->finished = finished;\n+        return prev;\n+      });\n+    }\n+  }\n+\n+ private:\n+  struct State {\n+    State(AsyncGenerator<T> source, T initial_value)\n+        : source(std::move(source)), prev_value(std::move(initial_value)), prev_index(0) {\n+      finished = IsIterationEnd<T>(prev_value);\n+    }\n+\n+    AsyncGenerator<T> source;\n+    T prev_value;\n+    int prev_index;\n+    bool finished;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// Wraps items from a source generator with positional information\n+///\n+/// When reqsequencing items from multiple streams that have been merged into\n+/// one it helps to know when an item is the last item in the stream.\n+///\n+/// Note: Another potential use for this could be resequencing items from a\n+/// jittery source.  However, the readahead generator will not emit items out of\n+/// order today so this is not needed.  Furthermore, this generator would need to\n+/// support async reentrancy which, while possible, is not done currently.\n+///\n+/// Note: Since this generator is not actually taking in out-of-order sources it isn't\n+/// strictly neccesary to add the index, it could be added by a map generator.  However,\n+/// since this generator is usually used as laster input to the sequencing generator and\n+/// the sequencing generator needs the index we go ahead and add it for utility's sake\n+///\n+/// \\see MakeSequencingGenerator for an example of putting items back in order\n+///\n+/// This generator is not async-reentrant\n+///\n+/// This generator buffers one item (so it knows which item is the last item)\n+template <typename T>\n+AsyncGenerator<Enumerated<T>> MakeEnumeratedGenerator(AsyncGenerator<T> source) {\n+  return FutureFirstGenerator<Enumerated<T>>(\n+      source().Then([source](const T& initial_value) -> AsyncGenerator<Enumerated<T>> {\n+        return EnumeratingGenerator<T>(std::move(source), initial_value);\n\nReview comment:\n       I see, `finished` is initialized correctly. Still, this seems like pointless complication.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T12:48:29.907+0000",
                    "updated": "2021-04-08T12:48:29.907+0000",
                    "started": "2021-04-08T12:48:29.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579171",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609930251\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n\nReview comment:\n       The need for this originated from trying to resequence merged streams.  So given a generator that returns streams (A, B, C), each of which return items (1, 2), the merged generator might return something like...\r\n   \r\n   ```\r\n   A1\r\n   B1\r\n   A2\r\n   C1\r\n   C2\r\n   B2\r\n   ```\r\n   \r\n   Any end tokens are removed by the merge operation.  Otherwise the combined stream would terminate after A2.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T17:24:53.902+0000",
                    "updated": "2021-04-08T17:24:53.902+0000",
                    "started": "2021-04-08T17:24:53.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579377",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609930801\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n\nReview comment:\n       Yes, that should work.  I'll change to that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T17:25:26.958+0000",
                    "updated": "2021-04-08T17:25:26.958+0000",
                    "started": "2021-04-08T17:25:26.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579378",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609932941\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n\nReview comment:\n       I don't know if the current value is the last value or not.  All of this logic could be removed if I knew a priori how many batches were in a fragment.  However, for CSV I don't know this.  So if I'm sequencing batches from multiple CSV files and I see A1, A2, B1, B2, B3 does B1 come after A2?  Or is A3 just really slow in processing?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T17:27:36.476+0000",
                    "updated": "2021-04-08T17:27:36.476+0000",
                    "started": "2021-04-08T17:27:36.475+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579382",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609939229\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n+        state->prev_value = next;\n+        state->prev_index++;\n+        state->finished = finished;\n+        return prev;\n+      });\n+    }\n+  }\n+\n+ private:\n+  struct State {\n+    State(AsyncGenerator<T> source, T initial_value)\n+        : source(std::move(source)), prev_value(std::move(initial_value)), prev_index(0) {\n+      finished = IsIterationEnd<T>(prev_value);\n+    }\n+\n+    AsyncGenerator<T> source;\n+    T prev_value;\n+    int prev_index;\n+    bool finished;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// Wraps items from a source generator with positional information\n+///\n+/// When reqsequencing items from multiple streams that have been merged into\n+/// one it helps to know when an item is the last item in the stream.\n+///\n+/// Note: Another potential use for this could be resequencing items from a\n+/// jittery source.  However, the readahead generator will not emit items out of\n+/// order today so this is not needed.  Furthermore, this generator would need to\n+/// support async reentrancy which, while possible, is not done currently.\n+///\n+/// Note: Since this generator is not actually taking in out-of-order sources it isn't\n+/// strictly neccesary to add the index, it could be added by a map generator.  However,\n+/// since this generator is usually used as laster input to the sequencing generator and\n+/// the sequencing generator needs the index we go ahead and add it for utility's sake\n+///\n+/// \\see MakeSequencingGenerator for an example of putting items back in order\n+///\n+/// This generator is not async-reentrant\n+///\n+/// This generator buffers one item (so it knows which item is the last item)\n+template <typename T>\n+AsyncGenerator<Enumerated<T>> MakeEnumeratedGenerator(AsyncGenerator<T> source) {\n+  return FutureFirstGenerator<Enumerated<T>>(\n+      source().Then([source](const T& initial_value) -> AsyncGenerator<Enumerated<T>> {\n+        return EnumeratingGenerator<T>(std::move(source), initial_value);\n\nReview comment:\n       I'm not sure what you're referring to regarding the complication.  The fact that we are buffering one item?  Or the way in which we are doing the buffering?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T17:34:49.771+0000",
                    "updated": "2021-04-08T17:34:49.771+0000",
                    "started": "2021-04-08T17:34:49.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579388",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609958501\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n\nReview comment:\n       Hmm, that doesn't seem to make sense. If you have several CSV files, you cannot reorder based on just the sequence number.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T17:56:40.679+0000",
                    "updated": "2021-04-08T17:56:40.679+0000",
                    "started": "2021-04-08T17:56:40.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579406",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609958941\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n+        state->prev_value = next;\n+        state->prev_index++;\n+        state->finished = finished;\n+        return prev;\n+      });\n+    }\n+  }\n+\n+ private:\n+  struct State {\n+    State(AsyncGenerator<T> source, T initial_value)\n+        : source(std::move(source)), prev_value(std::move(initial_value)), prev_index(0) {\n+      finished = IsIterationEnd<T>(prev_value);\n+    }\n+\n+    AsyncGenerator<T> source;\n+    T prev_value;\n+    int prev_index;\n+    bool finished;\n+  };\n+\n+  std::shared_ptr<State> state_;\n+};\n+\n+/// Wraps items from a source generator with positional information\n+///\n+/// When reqsequencing items from multiple streams that have been merged into\n+/// one it helps to know when an item is the last item in the stream.\n+///\n+/// Note: Another potential use for this could be resequencing items from a\n+/// jittery source.  However, the readahead generator will not emit items out of\n+/// order today so this is not needed.  Furthermore, this generator would need to\n+/// support async reentrancy which, while possible, is not done currently.\n+///\n+/// Note: Since this generator is not actually taking in out-of-order sources it isn't\n+/// strictly neccesary to add the index, it could be added by a map generator.  However,\n+/// since this generator is usually used as laster input to the sequencing generator and\n+/// the sequencing generator needs the index we go ahead and add it for utility's sake\n+///\n+/// \\see MakeSequencingGenerator for an example of putting items back in order\n+///\n+/// This generator is not async-reentrant\n+///\n+/// This generator buffers one item (so it knows which item is the last item)\n+template <typename T>\n+AsyncGenerator<Enumerated<T>> MakeEnumeratedGenerator(AsyncGenerator<T> source) {\n+  return FutureFirstGenerator<Enumerated<T>>(\n+      source().Then([source](const T& initial_value) -> AsyncGenerator<Enumerated<T>> {\n+        return EnumeratingGenerator<T>(std::move(source), initial_value);\n\nReview comment:\n       I mean the fact that we're passing an initial value here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T17:57:03.870+0000",
                    "updated": "2021-04-08T17:57:03.870+0000",
                    "started": "2021-04-08T17:57:03.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579407",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609959562\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n\nReview comment:\n       The merged generator _has_ to return an end token at some point, right? I don't understand the concern.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T17:57:59.570+0000",
                    "updated": "2021-04-08T17:57:59.570+0000",
                    "started": "2021-04-08T17:57:59.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579412",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609964135\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n\nReview comment:\n       When all is said and done what I have in the stream is something that looks like\r\n   \r\n   fragment 2 batch 1 false // Buffer for resequencing\r\n   fragment 1 batch 1 false // Send downstream, first batch\r\n   fragment 1 batch 2 true // Send downstream, this is the next batch, then send f2b1 because I see this is the last batch in f1\r\n   fragment 2 batch 2 false // Send downstream, this follows the last batch we sent (f2b1)\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T18:03:18.210+0000",
                    "updated": "2021-04-08T18:03:18.210+0000",
                    "started": "2021-04-08T18:03:18.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579419",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579421",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609965523\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n\nReview comment:\n       Yes, it has to return one end token.  If I return the end token for each child stream I'll end up with 3.  In other words, I want...\r\n   ```\r\n   A1\r\n   B1\r\n   A2 (last-in-stream)\r\n   C1\r\n   C2 (last-in-stream)\r\n   B2 (last-in-stream)\r\n   END\r\n   ```\r\n   \r\n   ...and not...\r\n   ```\r\n   A1\r\n   B1\r\n   A2\r\n   END\r\n   C1\r\n   C2\r\n   END\r\n   B2\r\n   END\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T18:05:10.636+0000",
                    "updated": "2021-04-08T18:05:10.636+0000",
                    "started": "2021-04-08T18:05:10.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579421",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609967468\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n\nReview comment:\n       Perhaps, but you have a single index in your enumerating generator. How do you represent that?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T18:07:58.744+0000",
                    "updated": "2021-04-08T18:07:58.744+0000",
                    "started": "2021-04-08T18:07:58.744+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579424",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609982585\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n\nReview comment:\n       I start with `AsyncGenerator<Fragment>` which I enumerate to get `AsyncGenerator<Enumerated<Fragment>>`.\r\n   \r\n   Next I map each `Enumerated<Fragment>`.  I call `Scan` to get `AsyncGenerator<RecordBatch>` I enumerate that to get `AsyncGenerator<Enumerated<RecordBatch>>`.  I then combine that with the `Enumerated<Fragment>` to get `AsyncGenerator<EnumeratedRecordBatch>` which is defined as...\r\n   \r\n   ```\r\n   struct EnumeratedRecordBatch {\r\n     Enumerated<std::shared_ptr<RecordBatch>> record_batch;\r\n     Enumerated<std::shared_ptr<Fragment>> fragment;\r\n   };\r\n   ```\r\n   \r\n   Each of these generators (one per fragment) are merged together which takes me from `AsyncGenerator<AsyncGenerator<EnumeratedRecordBatch>>` to `AsyncGenerator<EnumeratedRecordBatch>` which is exactly what I need (per ARROW-12288) to satisfy...\r\n   \r\n   ```\r\n   virtual Result<EnumeratedRecordBatchIterator> ScanBatchesUnordered();\r\n   ```\r\n   \r\n   I can then resequence that if the caller desires to get...\r\n   \r\n   ```\r\n   struct TaggedRecordBatch {\r\n     std::shared_ptr<RecordBatch> record_batch;\r\n     std::shared_ptr<Fragment> fragment;\r\n   };\r\n   ```\r\n   \r\n   By the method...\r\n   \r\n   ```\r\n   virtual Result<TaggedRecordBatchIterator> ScanBatches() = 0;\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T18:25:24.149+0000",
                    "updated": "2021-04-08T18:25:24.149+0000",
                    "started": "2021-04-08T18:25:24.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579447",
                    "issueId": "13370232"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/worklog/579453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9945:\nURL: https://github.com/apache/arrow/pull/9945#discussion_r609990466\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1063,6 +1063,86 @@ AsyncGenerator<T> MakeConcatenatedGenerator(AsyncGenerator<AsyncGenerator<T>> so\n   return MergedGenerator<T>(std::move(source), 1);\n }\n \n+template <typename T>\n+struct Enumerated {\n+  util::optional<T> value;\n+  int index;\n+  bool last;\n+};\n+\n+template <typename T>\n+struct IterationTraits<Enumerated<T>> {\n+  static Enumerated<T> End() { return Enumerated<T>{{}, -1, false}; }\n+  static bool IsEnd(const Enumerated<T>& val) { return !val.value.has_value(); }\n+};\n+\n+/// \\see MakeEnumeratedGenerator\n+template <typename T>\n+class EnumeratingGenerator {\n+ public:\n+  EnumeratingGenerator(AsyncGenerator<T> source, T initial_value)\n+      : state_(std::make_shared<State>(std::move(source), std::move(initial_value))) {}\n+\n+  Future<Enumerated<T>> operator()() {\n+    if (state_->finished) {\n+      return AsyncGeneratorEnd<Enumerated<T>>();\n+    } else {\n+      auto state = state_;\n+      return state->source().Then([state](const T& next) {\n+        auto finished = IsIterationEnd<T>(next);\n+        auto prev = Enumerated<T>{state->prev_value, state->prev_index, finished};\n\nReview comment:\n       I see. Well, if you need it, let's do it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T18:34:12.138+0000",
                    "updated": "2021-04-08T18:34:12.138+0000",
                    "started": "2021-04-08T18:34:12.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579453",
                    "issueId": "13370232"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@677490c9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d15db08[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33777818[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@404938e5[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ea6d3db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c42285a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fd2672[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@d7ab818[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@753a8a67[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@68277c62[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50409a2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5d66db62[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 14 12:30:53 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-14T12:30:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12287/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-04-08T01:13:14.000+0000",
        "updated": "2021-04-14T12:30:57.000+0000",
        "timeoriginalestimate": null,
        "description": "With parallel readahead items may get returned out of order.\u00a0 An enumerating future can be used to tag items prior to the parallel readahead so that they can later be reassembled.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Create enumerating generator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13370232/comment/17320964",
                    "id": "17320964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9945\n[https://github.com/apache/arrow/pull/9945]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-14T12:30:53.337+0000",
                    "updated": "2021-04-14T12:30:53.337+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0pn7s:",
        "customfield_12314139": null
    }
}