{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13472816",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816",
    "key": "ARROW-17181",
    "fields": {
        "parent": {
            "id": "13427619",
            "key": "ARROW-15635",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13427619",
            "fields": {
                "summary": "[C++][Python] UDF Integration ",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                    "id": "3",
                    "description": "A task that needs to be done.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                    "name": "Task",
                    "subtask": false,
                    "avatarId": 21148
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 53400,
            "total": 53400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 53400,
            "total": 53400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17181/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 89,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794109",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request, #13687:\nURL: https://github.com/apache/arrow/pull/13687\n\n   This PR contains Python Scalar UDF documentation as an experimental version of docs. \r\n   At the moment we only support Scalar UDFs and the code snippets include how to use\r\n   UDFs with PyArrow.\n\n\n",
                    "created": "2022-07-22T08:10:14.449+0000",
                    "updated": "2022-07-22T08:10:14.449+0000",
                    "started": "2022-07-22T08:10:14.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794109",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192306076\n\n   cc @westonpace @lidavidm @pitrou\n\n\n",
                    "created": "2022-07-22T08:12:54.638+0000",
                    "updated": "2022-07-22T08:12:54.638+0000",
                    "started": "2022-07-22T08:12:54.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794114",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192313146\n\n   https://issues.apache.org/jira/browse/ARROW-17181\n\n\n",
                    "created": "2022-07-22T08:21:08.665+0000",
                    "updated": "2022-07-22T08:21:08.665+0000",
                    "started": "2022-07-22T08:21:08.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794117",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192313166\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-07-22T08:21:10.339+0000",
                    "updated": "2022-07-22T08:21:10.339+0000",
                    "started": "2022-07-22T08:21:10.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794118",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192435920\n\n   cc @amol- @jorisvandenbossche \n\n\n",
                    "created": "2022-07-22T10:39:06.528+0000",
                    "updated": "2022-07-22T10:39:06.528+0000",
                    "started": "2022-07-22T10:39:06.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794170",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927576724\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n\nReview Comment:\n   ```suggestion\r\n         \"summary\": \"Calculate y = mx + c\",\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n\nReview Comment:\n   ```suggestion\r\n         \"description\":\r\n             \"Compute the affine function y = mx + c.\\n\"\r\n             \"This function takes three inputs, m, x and c, in order.\"\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n\nReview Comment:\n   ```suggestion\r\n   To register a UDF, a function name, function docs and input types and output type need to be defined.\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   Why this name?\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n\nReview Comment:\n   ```suggestion\r\n   PyArrow allows defining and registering custom compute functions in Python.\r\n   Those functions can then be called from Python as well as C++ (and potentially\r\n   any other implementation wrapping Arrow C++, such as the R ``arrow`` package`)\r\n   using their registered function name.\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n\nReview Comment:\n   Hmm, really? A realistic example would take float64, not int64.\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n\nReview Comment:\n   ```suggestion\r\n   .. warning::\r\n      This API is **experimental**.\r\n      Also, only scalar functions can currently be user-defined.\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n\nReview Comment:\n   ```suggestion\r\n   The implementation of a user-defined function always takes a first *context*\r\n   parameter (named ``ctx`` in the example above) which is an instance of\r\n   :class:`pyarrow.compute.ScalarUdfContext`.\r\n   This context exposes several useful attributes, particularly a\r\n   :attr:`~pyarrow.compute.ScalarUdfContext.memory_pool` to be used for\r\n   allocations in the context of the user-defined function.\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n+\n+Calling a UDF directly using :func:`pyarrow.compute.call_function`,\n+\n+.. code-block:: python\n+\n+   >>> res = pc.call_function(\"regression\", [pa.scalar(2), pa.scalar(10), pa.scalar(5)])\n+   25\n+\n+.. warning::\n\nReview Comment:\n   Can you remove the warning and turn this into an example instead?\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n+\n+Calling a UDF directly using :func:`pyarrow.compute.call_function`,\n+\n+.. code-block:: python\n+\n+   >>> res = pc.call_function(\"regression\", [pa.scalar(2), pa.scalar(10), pa.scalar(5)])\n+   25\n+\n+.. warning::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+UDFs can be used with tabular data by using `dataset` API and apply a UDF function on the\n+dataset.\n+\n+.. code-block:: python\n+\n+   >>> sample_data = {'trip_name': ['A', 'B', 'C', 'D'], 'total_amount($)': [10, 20, 45, 15]}\n+   >>> data_table = pa.Table.from_pydict(sample_data)\n+   >>> import pyarrow.dataset as ds\n\nReview Comment:\n   Please move the import at the beginning of this snippet.\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n+\n+Calling a UDF directly using :func:`pyarrow.compute.call_function`,\n\nReview Comment:\n   ```suggestion\r\n   You can call a user-defined function directly using :func:`pyarrow.compute.call_function`:\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n+\n+Calling a UDF directly using :func:`pyarrow.compute.call_function`,\n+\n+.. code-block:: python\n+\n+   >>> res = pc.call_function(\"regression\", [pa.scalar(2), pa.scalar(10), pa.scalar(5)])\n+   25\n+\n+.. warning::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+UDFs can be used with tabular data by using `dataset` API and apply a UDF function on the\n+dataset.\n+\n+.. code-block:: python\n+\n+   >>> sample_data = {'trip_name': ['A', 'B', 'C', 'D'], 'total_amount($)': [10, 20, 45, 15]}\n+   >>> data_table = pa.Table.from_pydict(sample_data)\n+   >>> import pyarrow.dataset as ds\n+   >>> dataset = ds.dataset(data_table)\n+   >>> func_args = [pc.scalar(5), ds.field(\"total_amount($)\"), pc.scalar(2)]\n+   >>> result_table = dataset.to_table(\n+   ...             columns={\n+   ...                 'total_amount_projected($)': ds.field('')._call(function_name, func_args),\n\nReview Comment:\n   What is `function_name` here? Perhaps it would be better to spell it explicitly.\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n\nReview Comment:\n   It's not linear but affine, so should fix the name.\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n+\n+Calling a UDF directly using :func:`pyarrow.compute.call_function`,\n+\n+.. code-block:: python\n+\n+   >>> res = pc.call_function(\"regression\", [pa.scalar(2), pa.scalar(10), pa.scalar(5)])\n+   25\n+\n+.. warning::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+UDFs can be used with tabular data by using `dataset` API and apply a UDF function on the\n+dataset.\n\nReview Comment:\n   Perhaps rephrase it to make it less exceptional:\r\n   ```suggestion\r\n   More generally, user-defined functions are usable everywhere a compute function\r\n   can be referred to by its name. For example, they can be called on a dataset's\r\n   column using :meth:`Expression._call`:\r\n   ```\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n+\n+Calling a UDF directly using :func:`pyarrow.compute.call_function`,\n+\n+.. code-block:: python\n+\n+   >>> res = pc.call_function(\"regression\", [pa.scalar(2), pa.scalar(10), pa.scalar(5)])\n+   25\n+\n+.. warning::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+UDFs can be used with tabular data by using `dataset` API and apply a UDF function on the\n+dataset.\n+\n+.. code-block:: python\n+\n+   >>> sample_data = {'trip_name': ['A', 'B', 'C', 'D'], 'total_amount($)': [10, 20, 45, 15]}\n+   >>> data_table = pa.Table.from_pydict(sample_data)\n+   >>> import pyarrow.dataset as ds\n+   >>> dataset = ds.dataset(data_table)\n+   >>> func_args = [pc.scalar(5), ds.field(\"total_amount($)\"), pc.scalar(2)]\n+   >>> result_table = dataset.to_table(\n+   ...             columns={\n+   ...                 'total_amount_projected($)': ds.field('')._call(function_name, func_args),\n\nReview Comment:\n   Also @jorisvandenbossche do you remember why `Expression._call` has a leading underscore?\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n\nReview Comment:\n   Can we perhaps use the adequate memory pool here? For example:\r\n   ```suggestion\r\n      def affine_calculation(ctx, m, x, c):\r\n          temp = pc.multiply(m, x, memory_pool=ctx.memory_pool)\r\n          return pc.add(temp, c, memory_pool=ctx.memory_pool)\r\n   ```\r\n   \n\n\n\n",
                    "created": "2022-07-22T12:17:27.027+0000",
                    "updated": "2022-07-22T12:17:27.027+0000",
                    "started": "2022-07-22T12:17:27.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794194",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927597039\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   Ah I think I started thinking about writing a regression and ended up with a simple equation. Let's rename it to something like `cost_update`?\n\n\n\n",
                    "created": "2022-07-22T12:21:12.092+0000",
                    "updated": "2022-07-22T12:21:12.092+0000",
                    "started": "2022-07-22T12:21:12.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794196",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927597597\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n\nReview Comment:\n   Yeah we should probably get floats to this. \n\n\n\n",
                    "created": "2022-07-22T12:22:02.068+0000",
                    "updated": "2022-07-22T12:22:02.068+0000",
                    "started": "2022-07-22T12:22:02.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794200",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927597609\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   Why cost_update? What does it have to do with costs?\n\n\n\n",
                    "created": "2022-07-22T12:22:02.940+0000",
                    "updated": "2022-07-22T12:22:02.940+0000",
                    "started": "2022-07-22T12:22:02.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794201",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927614022\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   may be `project_price`\n\n\n\n",
                    "created": "2022-07-22T12:43:48.500+0000",
                    "updated": "2022-07-22T12:43:48.500+0000",
                    "started": "2022-07-22T12:43:48.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794212",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927614538\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   Or `y=mx+b` simply.\n\n\n\n",
                    "created": "2022-07-22T12:44:28.590+0000",
                    "updated": "2022-07-22T12:44:28.590+0000",
                    "started": "2022-07-22T12:44:28.589+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794213",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927614538\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   Or `y=mx+c` simply.\n\n\n\n",
                    "created": "2022-07-22T12:46:13.684+0000",
                    "updated": "2022-07-22T12:46:13.684+0000",
                    "started": "2022-07-22T12:46:13.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794215",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927617142\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   \"affine\" perhaps?\n\n\n\n",
                    "created": "2022-07-22T12:47:38.792+0000",
                    "updated": "2022-07-22T12:47:38.792+0000",
                    "started": "2022-07-22T12:47:38.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794216",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927617427\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n\nReview Comment:\n   Sure, that's much better.\n\n\n\n",
                    "created": "2022-07-22T12:47:53.767+0000",
                    "updated": "2022-07-22T12:47:53.767+0000",
                    "started": "2022-07-22T12:47:53.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794217",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927618739\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,80 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   User-defined functions only supports scalar functions and the current version is experimental.\n+\n+To use a user-defined-function (UDF), either the experimental `dataset` API options can be used or the\n+function can be directly called using :func:`pyarrow.compute.call_function`. \n+\n+To register a UDF, a function name, function docs and input types and output type needs to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"regression\"\n+   function_docs = {\n+      \"summary\": \"Calculate y based on m, x and c values\",\n+      \"description\": \"Obtaining output of a linear scalar function\"\n+   }\n+   input_types = {\n+      \"m\" : pa.int64(),\n+      \"x\" : pa.int64(),\n+      \"c\" : pa.int64(),\n+   }\n+   output_type = pa.int64()\n+\n+   def linear_calculation(ctx, m, x, c):\n+      return pc.add(pc.multiply(m, x), c)\n+\n+   pc.register_scalar_function(linear_calculation, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+.. note::\n+   There is a default parameter, `ctx` which is refers to a context object and it should be the\n+   first parameter of any user-defined-function. The idea is to make available passing required\n+   meta-data across an application which would be important for UDFs.\n+\n+Calling a UDF directly using :func:`pyarrow.compute.call_function`,\n+\n+.. code-block:: python\n+\n+   >>> res = pc.call_function(\"regression\", [pa.scalar(2), pa.scalar(10), pa.scalar(5)])\n+   25\n+\n+.. warning::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+UDFs can be used with tabular data by using `dataset` API and apply a UDF function on the\n+dataset.\n+\n+.. code-block:: python\n+\n+   >>> sample_data = {'trip_name': ['A', 'B', 'C', 'D'], 'total_amount($)': [10, 20, 45, 15]}\n+   >>> data_table = pa.Table.from_pydict(sample_data)\n+   >>> import pyarrow.dataset as ds\n+   >>> dataset = ds.dataset(data_table)\n+   >>> func_args = [pc.scalar(5), ds.field(\"total_amount($)\"), pc.scalar(2)]\n+   >>> result_table = dataset.to_table(\n+   ...             columns={\n+   ...                 'total_amount_projected($)': ds.field('')._call(function_name, func_args),\n\nReview Comment:\n   `function_name` replaced with \"affine\"\n\n\n\n",
                    "created": "2022-07-22T12:49:28.917+0000",
                    "updated": "2022-07-22T12:49:28.917+0000",
                    "started": "2022-07-22T12:49:28.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794218",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192588674\n\n   > Also, can you add API docs for `register_scalar_function` and `ScalarUdfContext`?\r\n   \r\n   Do you mean include it in docs for Python? I am not sure how to link it properly. But the text is there for both `ScalarUdfContext` and `register_scalar_function` where they are defined. \r\n   \n\n\n",
                    "created": "2022-07-22T13:41:56.673+0000",
                    "updated": "2022-07-22T13:41:56.673+0000",
                    "started": "2022-07-22T13:41:56.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794234",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192589609\n\n   @pitrou could you please help me with adding API docs? or explain how to do that? \n\n\n",
                    "created": "2022-07-22T13:42:52.742+0000",
                    "updated": "2022-07-22T13:42:52.742+0000",
                    "started": "2022-07-22T13:42:52.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794236",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192717089\n\n   @vibhatha add docstrings to the Python/Cython code: https://numpydoc.readthedocs.io/en/latest/format.html (see the example on the bottom, or look through the Arrow source)\n\n\n",
                    "created": "2022-07-22T15:56:47.828+0000",
                    "updated": "2022-07-22T15:56:47.828+0000",
                    "started": "2022-07-22T15:56:47.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794294",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#issuecomment-1192719472\n\n   > @vibhatha add docstrings to the Python/Cython code: https://numpydoc.readthedocs.io/en/latest/format.html (see the example on the bottom, or look through the Arrow source)\r\n   \r\n   And also reference the given symbols in https://github.com/apache/arrow/blob/master/docs/source/python/api/compute.rst\n\n\n",
                    "created": "2022-07-22T15:59:25.595+0000",
                    "updated": "2022-07-22T15:59:25.595+0000",
                    "started": "2022-07-22T15:59:25.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794296",
                    "issueId": "13472816"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/worklog/794297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13687:\nURL: https://github.com/apache/arrow/pull/13687#discussion_r927806875\n\n\n##########\ncpp/src/arrow/python/udf.h:\n##########\n@@ -41,6 +41,8 @@ struct ARROW_PYTHON_EXPORT ScalarUdfOptions {\n   std::shared_ptr<DataType> output_type;\n };\n \n+/// \\brief A context defined to hold meta-data required in\n+/// scalar UDF execution.\n\nReview Comment:\n   It's fine to add this docstring, but by API documentation here we mean *Python* API (i.e. functions and classes exposed in the `pyarrow.compute` namespace).\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,129 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   This API is **experimental**.\n+   Also, only scalar functions can currently be user-defined.\n+\n+PyArrow allows defining and registering custom compute functions in Python.\n+Those functions can then be called from Python as well as C++ (and potentially\n+any other implementation wrapping Arrow C++, such as the R ``arrow`` package`)\n+using their registered function name.\n+\n+To register a UDF, a function name, function docs and input types and output type need to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"affine\"\n+   function_docs = {\n+      \"summary\": \"Calculate y = mx + c\",\n+      \"description\":\n+          \"Compute the affine function y = mx + c.\\n\"\n+          \"This function takes three inputs, m, x and c, in order.\"\n+   }\n+   input_types = {\n+      \"m\" : pa.float64(),\n+      \"x\" : pa.float64(),\n+      \"c\" : pa.float64(),\n+   }\n+   output_type = pa.float64()\n+\n+   def affine(ctx, m, x, c):\n+       temp = pc.multiply(m, x, memory_pool=ctx.memory_pool)\n+       return pc.add(temp, c, memory_pool=ctx.memory_pool)\n+\n+   pc.register_scalar_function(affine, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+The implementation of a user-defined function always takes a first *context*\n+parameter (named ``ctx`` in the example above) which is an instance of\n+:class:`pyarrow.compute.ScalarUdfContext`.\n+This context exposes several useful attributes, particularly a\n+:attr:`~pyarrow.compute.ScalarUdfContext.memory_pool` to be used for\n+allocations in the context of the user-defined function.\n+\n+You can call a user-defined function directly using :func:`pyarrow.compute.call_function`:\n+\n+.. code-block:: python\n+\n+   >>> pc.call_function(\"affine\", [pa.scalar(2.5), pa.scalar(10.5), pa.scalar(5.5)])\n+   <pyarrow.DoubleScalar: 31.75>\n+\n+.. note::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+More generally, user-defined functions are usable everywhere a compute function\n+can be referred to by its name. For example, they can be called on a dataset's\n+column using :meth:`Expression._call`:\n+Considering a series of scalar inputs,\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n\nReview Comment:\n   Why is this repeating the entire example? I'm afraid I don't understand the point of this.\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,129 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   This API is **experimental**.\n+   Also, only scalar functions can currently be user-defined.\n+\n+PyArrow allows defining and registering custom compute functions in Python.\n+Those functions can then be called from Python as well as C++ (and potentially\n+any other implementation wrapping Arrow C++, such as the R ``arrow`` package`)\n+using their registered function name.\n+\n+To register a UDF, a function name, function docs and input types and output type need to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"affine\"\n+   function_docs = {\n+      \"summary\": \"Calculate y = mx + c\",\n+      \"description\":\n+          \"Compute the affine function y = mx + c.\\n\"\n+          \"This function takes three inputs, m, x and c, in order.\"\n+   }\n+   input_types = {\n+      \"m\" : pa.float64(),\n+      \"x\" : pa.float64(),\n+      \"c\" : pa.float64(),\n+   }\n+   output_type = pa.float64()\n+\n+   def affine(ctx, m, x, c):\n+       temp = pc.multiply(m, x, memory_pool=ctx.memory_pool)\n+       return pc.add(temp, c, memory_pool=ctx.memory_pool)\n+\n+   pc.register_scalar_function(affine, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+The implementation of a user-defined function always takes a first *context*\n+parameter (named ``ctx`` in the example above) which is an instance of\n+:class:`pyarrow.compute.ScalarUdfContext`.\n+This context exposes several useful attributes, particularly a\n+:attr:`~pyarrow.compute.ScalarUdfContext.memory_pool` to be used for\n+allocations in the context of the user-defined function.\n+\n+You can call a user-defined function directly using :func:`pyarrow.compute.call_function`:\n+\n+.. code-block:: python\n+\n+   >>> pc.call_function(\"affine\", [pa.scalar(2.5), pa.scalar(10.5), pa.scalar(5.5)])\n+   <pyarrow.DoubleScalar: 31.75>\n+\n+.. note::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+More generally, user-defined functions are usable everywhere a compute function\n+can be referred to by its name. For example, they can be called on a dataset's\n+column using :meth:`Expression._call`:\n+Considering a series of scalar inputs,\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> import pyarrow.compute as pc\n+   >>> function_name = \"affine_with_python\"\n+   >>> function_docs = {\n+   ...        \"summary\": \"Calculate y = mx + c with Python\",\n+   ...        \"description\":\n+   ...            \"Compute the affine function y = mx + c.\\n\"\n+   ...            \"This function takes three inputs, m, x and c, in order.\"\n+   ... }\n+   >>> input_types = {\n+   ...    \"m\" : pa.float64(),\n+   ...    \"x\" : pa.float64(),\n+   ...    \"c\" : pa.float64(),\n+   ... }\n+   >>> output_type = pa.float64()\n+   >>> \n+   >>> def affine_with_python(ctx, m, x, c):\n+   ...     m = m[0].as_py()\n+   ...     x = x[0].as_py()\n+   ...     c = c[0].as_py()\n+   ...     return pa.array([m * x + c])\n+   ... \n+   >>> pc.register_scalar_function(affine_with_python,\n+   ...                             function_name,\n+   ...                         function_docs,\n+   ...                             input_types,\n+   ...                             output_type)\n+   >>> \n+   >>> pc.call_function(function_name, [pa.scalar(10.1), pa.scalar(10.2), pa.scalar(20.2)])\n+   <pyarrow.DoubleScalar: 123.22>\n+\n+When all the inputs are scalar, the input is a size=1 array and the values has to be properly\n+treated within the UDF. And also make sure to include the final output as a size=1 array.\n\nReview Comment:\n   Isn't this repeating what you already said in the note above?\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,129 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   This API is **experimental**.\n+   Also, only scalar functions can currently be user-defined.\n+\n+PyArrow allows defining and registering custom compute functions in Python.\n+Those functions can then be called from Python as well as C++ (and potentially\n+any other implementation wrapping Arrow C++, such as the R ``arrow`` package`)\n+using their registered function name.\n+\n+To register a UDF, a function name, function docs and input types and output type need to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"affine\"\n+   function_docs = {\n+      \"summary\": \"Calculate y = mx + c\",\n+      \"description\":\n+          \"Compute the affine function y = mx + c.\\n\"\n+          \"This function takes three inputs, m, x and c, in order.\"\n+   }\n+   input_types = {\n+      \"m\" : pa.float64(),\n+      \"x\" : pa.float64(),\n+      \"c\" : pa.float64(),\n+   }\n+   output_type = pa.float64()\n+\n+   def affine(ctx, m, x, c):\n+       temp = pc.multiply(m, x, memory_pool=ctx.memory_pool)\n+       return pc.add(temp, c, memory_pool=ctx.memory_pool)\n+\n+   pc.register_scalar_function(affine, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+The implementation of a user-defined function always takes a first *context*\n+parameter (named ``ctx`` in the example above) which is an instance of\n+:class:`pyarrow.compute.ScalarUdfContext`.\n+This context exposes several useful attributes, particularly a\n+:attr:`~pyarrow.compute.ScalarUdfContext.memory_pool` to be used for\n+allocations in the context of the user-defined function.\n+\n+You can call a user-defined function directly using :func:`pyarrow.compute.call_function`:\n+\n+.. code-block:: python\n+\n+   >>> pc.call_function(\"affine\", [pa.scalar(2.5), pa.scalar(10.5), pa.scalar(5.5)])\n+   <pyarrow.DoubleScalar: 31.75>\n+\n+.. note::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+More generally, user-defined functions are usable everywhere a compute function\n+can be referred to by its name. For example, they can be called on a dataset's\n+column using :meth:`Expression._call`:\n+Considering a series of scalar inputs,\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> import pyarrow.compute as pc\n+   >>> function_name = \"affine_with_python\"\n+   >>> function_docs = {\n+   ...        \"summary\": \"Calculate y = mx + c with Python\",\n+   ...        \"description\":\n+   ...            \"Compute the affine function y = mx + c.\\n\"\n+   ...            \"This function takes three inputs, m, x and c, in order.\"\n+   ... }\n+   >>> input_types = {\n+   ...    \"m\" : pa.float64(),\n+   ...    \"x\" : pa.float64(),\n+   ...    \"c\" : pa.float64(),\n+   ... }\n+   >>> output_type = pa.float64()\n+   >>> \n+   >>> def affine_with_python(ctx, m, x, c):\n+   ...     m = m[0].as_py()\n+   ...     x = x[0].as_py()\n+   ...     c = c[0].as_py()\n+   ...     return pa.array([m * x + c])\n+   ... \n+   >>> pc.register_scalar_function(affine_with_python,\n+   ...                             function_name,\n+   ...                         function_docs,\n+   ...                             input_types,\n+   ...                             output_type)\n+   >>> \n+   >>> pc.call_function(function_name, [pa.scalar(10.1), pa.scalar(10.2), pa.scalar(20.2)])\n+   <pyarrow.DoubleScalar: 123.22>\n+\n+When all the inputs are scalar, the input is a size=1 array and the values has to be properly\n+treated within the UDF. And also make sure to include the final output as a size=1 array.\n+\n+UDFs can be used with tabular data by using `dataset` API and apply a UDF function on the\n+dataset.\n\nReview Comment:\n   Here the \"More generally ...\" sentence should come.\n\n\n\n##########\ndocs/source/python/compute.rst:\n##########\n@@ -370,3 +370,129 @@ our ``even_filter`` with a ``pc.field(\"nums\") > 5`` filter:\n \n :class:`.Dataset` currently can be filtered using :meth:`.Dataset.to_table` method\n passing a ``filter`` argument. See :ref:`py-filter-dataset` in Dataset documentation.\n+\n+\n+User-Defined Functions\n+======================\n+\n+.. warning::\n+   This API is **experimental**.\n+   Also, only scalar functions can currently be user-defined.\n+\n+PyArrow allows defining and registering custom compute functions in Python.\n+Those functions can then be called from Python as well as C++ (and potentially\n+any other implementation wrapping Arrow C++, such as the R ``arrow`` package`)\n+using their registered function name.\n+\n+To register a UDF, a function name, function docs and input types and output type need to be defined.\n+\n+.. code-block:: python\n+\n+   import pyarrow.compute as pc\n+   function_name = \"affine\"\n+   function_docs = {\n+      \"summary\": \"Calculate y = mx + c\",\n+      \"description\":\n+          \"Compute the affine function y = mx + c.\\n\"\n+          \"This function takes three inputs, m, x and c, in order.\"\n+   }\n+   input_types = {\n+      \"m\" : pa.float64(),\n+      \"x\" : pa.float64(),\n+      \"c\" : pa.float64(),\n+   }\n+   output_type = pa.float64()\n+\n+   def affine(ctx, m, x, c):\n+       temp = pc.multiply(m, x, memory_pool=ctx.memory_pool)\n+       return pc.add(temp, c, memory_pool=ctx.memory_pool)\n+\n+   pc.register_scalar_function(affine, \n+                               function_name,\n+                               function_docs,\n+                               input_types,\n+                               output_type)\n+\n+The implementation of a user-defined function always takes a first *context*\n+parameter (named ``ctx`` in the example above) which is an instance of\n+:class:`pyarrow.compute.ScalarUdfContext`.\n+This context exposes several useful attributes, particularly a\n+:attr:`~pyarrow.compute.ScalarUdfContext.memory_pool` to be used for\n+allocations in the context of the user-defined function.\n+\n+You can call a user-defined function directly using :func:`pyarrow.compute.call_function`:\n+\n+.. code-block:: python\n+\n+   >>> pc.call_function(\"affine\", [pa.scalar(2.5), pa.scalar(10.5), pa.scalar(5.5)])\n+   <pyarrow.DoubleScalar: 31.75>\n+\n+.. note::\n+   Note that when the passed values to a function are all scalars, internally each scalar \n+   is passed as an array of size 1.\n+\n+More generally, user-defined functions are usable everywhere a compute function\n+can be referred to by its name. For example, they can be called on a dataset's\n+column using :meth:`Expression._call`:\n+Considering a series of scalar inputs,\n+\n+.. code-block:: python\n+\n+   >>> import pyarrow as pa\n+   >>> import pyarrow.compute as pc\n+   >>> function_name = \"affine_with_python\"\n+   >>> function_docs = {\n+   ...        \"summary\": \"Calculate y = mx + c with Python\",\n+   ...        \"description\":\n+   ...            \"Compute the affine function y = mx + c.\\n\"\n+   ...            \"This function takes three inputs, m, x and c, in order.\"\n+   ... }\n+   >>> input_types = {\n+   ...    \"m\" : pa.float64(),\n+   ...    \"x\" : pa.float64(),\n+   ...    \"c\" : pa.float64(),\n+   ... }\n+   >>> output_type = pa.float64()\n+   >>> \n+   >>> def affine_with_python(ctx, m, x, c):\n+   ...     m = m[0].as_py()\n+   ...     x = x[0].as_py()\n+   ...     c = c[0].as_py()\n+   ...     return pa.array([m * x + c])\n\nReview Comment:\n   Why is this taking `m[0]`? I don't understand what this example is supposed to show...\n\n\n\n",
                    "created": "2022-07-22T16:18:04.428+0000",
                    "updated": "2022-07-22T16:18:04.428+0000",
                    "started": "2022-07-22T16:18:04.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "794297",
                    "issueId": "13472816"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 53400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@39f1ebf3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bb7f930[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29d067b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3dba65c7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@494338ac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@139ff608[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39d8ce08[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@57a200a9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f4c4a9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6bb75de9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14e07619[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@53808b64[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 53400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 29 08:41:50 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-29T08:41:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17181/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-07-22T03:22:57.000+0000",
        "updated": "2022-09-29T14:32:47.000+0000",
        "timeoriginalestimate": null,
        "description": "At the moment the existing Scalar UDF usage is not documented. There will be a final version of documentation update once other features are integrated. But to support the users and developers, the existing content needs to be documented.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "14h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 53400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Docs][Python] Scalar UDF Experimental Documentation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472816/comment/17610893",
                    "id": "17610893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 13687\n[https://github.com/apache/arrow/pull/13687]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-09-29T08:41:50.313+0000",
                    "updated": "2022-09-29T08:41:50.313+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z172og:",
        "customfield_12314139": null
    }
}