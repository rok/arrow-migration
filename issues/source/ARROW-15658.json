{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13427907",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907",
    "key": "ARROW-15658",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12637748",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12637748",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13439335",
                    "key": "ARROW-16180",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13439335",
                    "fields": {
                        "summary": "[Python] Allow to create field reference to nested fields that use indices",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15658/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/743640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664\n\n\n   This PR contains an initial step towards a fix for ARROW-15658\r\n   \r\n   [x] Added a fix to enable numeric field references\r\n   [x] Adopted a test case from the [JIRA description](https://issues.apache.org/jira/browse/ARROW-15658) from @westonpace\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T09:01:30.292+0000",
                    "updated": "2022-03-18T09:01:30.292+0000",
                    "started": "2022-03-18T09:01:30.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743640",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/743641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#issuecomment-1072210796\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T09:02:02.927+0000",
                    "updated": "2022-03-18T09:02:02.927+0000",
                    "started": "2022-03-18T09:02:02.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743641",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/743659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#issuecomment-1072245129\n\n\n   I think you accidentally pushed some submodule changes.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T09:47:15.161+0000",
                    "updated": "2022-03-18T09:47:15.161+0000",
                    "started": "2022-03-18T09:47:15.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743659",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/743881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#issuecomment-1072245129\n\n\n   I think you accidentally pushed some submodule changes.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:44:46.434+0000",
                    "updated": "2022-03-18T14:44:46.434+0000",
                    "started": "2022-03-18T14:44:46.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743881",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/743889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#issuecomment-1072210796\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T14:45:30.222+0000",
                    "updated": "2022-03-18T14:45:30.222+0000",
                    "started": "2022-03-18T14:45:30.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "743889",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/744117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664\n\n\n   This PR contains an initial step towards a fix for ARROW-15658\r\n   \r\n   [x] Added a fix to enable numeric field references\r\n   [x] Adopted a test case from the [JIRA description](https://issues.apache.org/jira/browse/ARROW-15658) from @westonpace\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T15:07:15.886+0000",
                    "updated": "2022-03-18T15:07:15.886+0000",
                    "started": "2022-03-18T15:07:15.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744117",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/744268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r830209919\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,30 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n+    return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n\nReview comment:\n       This comment should go above L173 above not here\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,30 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n+    return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    int index = path->indices()[0];\n\nReview comment:\n       Should we explicitly reject nested field paths here for now?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T17:34:30.252+0000",
                    "updated": "2022-03-18T17:34:30.252+0000",
                    "started": "2022-03-18T17:34:30.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744268",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/744273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r830220869\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,30 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n+    return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    int index = path->indices()[0];\n\nReview comment:\n       That\u2019s an unclear point to me yet. That\u2019s why I also describe the current work as an  initial fix. How are we using nested fields so far? I was looking into it a bit. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T17:40:47.264+0000",
                    "updated": "2022-03-18T17:40:47.264+0000",
                    "started": "2022-03-18T17:40:47.264+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744273",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/744274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r830221706\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,30 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n+    return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    int index = path->indices()[0];\n\nReview comment:\n       I mean, it's not fully implemented, so we should at least error or include a test case or both.\r\n   \r\n   What do you mean by using? It's supported, but not very well, there are some prerequisite JIRAs needed to get things fully working but those have languished.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T17:42:00.317+0000",
                    "updated": "2022-03-18T17:42:00.317+0000",
                    "started": "2022-03-18T17:42:00.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744274",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/744277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r830224656\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,30 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n+    return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    int index = path->indices()[0];\n\nReview comment:\n       I got your point. Let me error and add a few tests. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-18T17:46:20.878+0000",
                    "updated": "2022-03-18T17:46:20.878+0000",
                    "started": "2022-03-18T17:46:20.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "744277",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/746952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#issuecomment-1077198537\n\n\n   @lidavidm I updated the test cases and added a check for the nested field paths. To add an error checking test, I think some of the util functions need to be changed to grab a returning `NotImplemented` status. The `SetFilter` function call triggers the error. Is it okay to return a `Status` from that method. I didn't do the change but would like to know if it is okay to do. I can proceed with it if it is okay. But is there a better alternative here? \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T05:31:20.282+0000",
                    "updated": "2022-03-24T05:31:20.282+0000",
                    "started": "2022-03-24T05:31:20.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746952",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/747003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r834022864\n\n\n\n##########\nFile path: cpp/examples/arrow/dataset_parquet_scan_example.cc\n##########\n@@ -39,6 +39,17 @@ namespace ds = arrow::dataset;\n \n namespace cp = arrow::compute;\n \n+/**\n+ * @brief Run Example\n+ * ./dataset-parquet-scan-example file:///sell_data.parquet\n+ * sample data set\n+ *           pickup_at dropoff_at  total_amount\n+ *         0         A          B            10\n+ *         1         B          A          1200\n+ *         2         C          A          2400\n+ *         3         A          C           500\n+ */\n+\n\nReview comment:\n       Can you change the commenting here to be `//`?\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,35 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n+    return Status::OK();\n\nReview comment:\n       ```suggestion\r\n       return resolve_field_ref(name);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,35 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n+    return Status::OK();\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    auto indices = path->indices();\n+    if (indices.size() > 1) {\n+      return Status::NotImplemented(\"Provided FieldRef \", field_ref.ToString(),\n+                                    \", Nested FieldPaths are not supported!\");\n+    }\n+    int index = indices[0];\n+    auto schema_field = manifest.schema_fields.at(index);\n+    auto col_name = schema_field.field->name();\n+    RETURN_NOT_OK(resolve_field_ref(&col_name));\n+    return Status::OK();\n\nReview comment:\n       ```suggestion\r\n       return resolve_field_ref(&col_name);\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/dataset_parquet_scan_example.cc\n##########\n@@ -62,8 +73,11 @@ struct Configuration {\n \n   // Indicates the filter by which rows will be filtered. This optimization can\n   // make use of partition information and/or file metadata if possible.\n-  cp::Expression filter =\n-      cp::greater(cp::field_ref(\"total_amount\"), cp::literal(1000.0f));\n+  // Equivalent filter with field_name instead of field_index\n+  // cp::Expression filter = cp::greater(cp::field_ref(\"total_amount\"),\n+  // cp::literal(1000.0f));\n+  // 0: pickup_at, 1: dropoff_at, 2: total_amount\n+  cp::Expression filter = cp::greater(cp::field_ref(2), cp::literal(1000.0f));\n\nReview comment:\n       I think this comment makes the example a little more complex than needed.  Maybe we could do an AND expression `field_ref(2) > 1000 & field_ref(\"total_amount\") < 2000` to demonstrate both types of field refs?  Or we could just leave it how it was and not worry about an example field ref by id.\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,35 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    RETURN_NOT_OK(resolve_field_ref(name));\n+    return Status::OK();\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    auto indices = path->indices();\n+    if (indices.size() > 1) {\n+      return Status::NotImplemented(\"Provided FieldRef \", field_ref.ToString(),\n+                                    \", Nested FieldPaths are not supported!\");\n+    }\n+    int index = indices[0];\n+    auto schema_field = manifest.schema_fields.at(index);\n\nReview comment:\n       Is `manifest.schema_fields` a vector?  If so can we use `[index]` instead of `.at(index)` for stylistic consistency?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T08:17:42.189+0000",
                    "updated": "2022-03-24T08:17:42.189+0000",
                    "started": "2022-03-24T08:17:42.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747003",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/747098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r834160353\n\n\n\n##########\nFile path: cpp/examples/arrow/dataset_parquet_scan_example.cc\n##########\n@@ -62,8 +73,11 @@ struct Configuration {\n \n   // Indicates the filter by which rows will be filtered. This optimization can\n   // make use of partition information and/or file metadata if possible.\n-  cp::Expression filter =\n-      cp::greater(cp::field_ref(\"total_amount\"), cp::literal(1000.0f));\n+  // Equivalent filter with field_name instead of field_index\n+  // cp::Expression filter = cp::greater(cp::field_ref(\"total_amount\"),\n+  // cp::literal(1000.0f));\n+  // 0: pickup_at, 1: dropoff_at, 2: total_amount\n+  cp::Expression filter = cp::greater(cp::field_ref(2), cp::literal(1000.0f));\n\nReview comment:\n       This is indeed a good one. Adding that. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T10:38:52.484+0000",
                    "updated": "2022-03-24T10:38:52.484+0000",
                    "started": "2022-03-24T10:38:52.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747098",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/747470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r834752675\n\n\n\n##########\nFile path: cpp/examples/arrow/dataset_parquet_scan_example.cc\n##########\n@@ -62,9 +71,11 @@ struct Configuration {\n \n   // Indicates the filter by which rows will be filtered. This optimization can\n   // make use of partition information and/or file metadata if possible.\n-  cp::Expression filter =\n-      cp::greater(cp::field_ref(\"total_amount\"), cp::literal(1000.0f));\n-\n+  // Equivalent filter with field_name instead of field_index\n\nReview comment:\n       ```suggestion\r\n   // fields can be referenced by name or by index.  This example assumes the schema:\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/dataset_parquet_scan_example.cc\n##########\n@@ -39,6 +39,15 @@ namespace ds = arrow::dataset;\n \n namespace cp = arrow::compute;\n \n+// @brief Run Example\n\nReview comment:\n       ```suggestion\r\n   // \\brief Run Example\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/dataset_parquet_scan_example.cc\n##########\n@@ -186,5 +197,9 @@ int main(int argc, char** argv) {\n   auto table = GetTableFromScanner(scanner);\n   std::cout << \"Table size: \" << table->num_rows() << \"\\n\";\n \n+  std::cout << \"Data : \" << std::endl;\n\nReview comment:\n       ```suggestion\r\n     std::cout << \"Data: \" << std::endl;\r\n   ```\n\n##########\nFile path: cpp/examples/arrow/dataset_parquet_scan_example.cc\n##########\n@@ -62,9 +71,11 @@ struct Configuration {\n \n   // Indicates the filter by which rows will be filtered. This optimization can\n\nReview comment:\n       ```suggestion\r\n     // Indicates the expression by which rows will be filtered. This optimization can\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,34 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    return resolve_field_ref(name);\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    auto indices = path->indices();\n+    if (indices.size() > 1) {\n+      return Status::NotImplemented(\"Provided FieldRef \", field_ref.ToString(),\n+                                    \", Nested FieldPaths are not supported!\");\n+    }\n+    int index = indices[0];\n+    auto schema_field = manifest.schema_fields[index];\n\nReview comment:\n       `manifest.schema_fields` will give us the fields in file order.  But, an integral field reference is actually a reference into the dataset schema.  So I think we want to be using the dataset schema here instead of the file manifest.\r\n   \r\n   We should add a test case for this as it is a rather subtle point...\r\n   \r\n   ```\r\n   Parquet File 1:\r\n   x | y | z\r\n   1 | 2 | 3\r\n   ```\r\n   \r\n   ```\r\n   Parquet File 2:\r\n   z | y | x\r\n   3 | 2 | 1\r\n   ```\r\n   \r\n   ```\r\n   Dataset Schema:\r\n    - x: int32\r\n    - y: int32\r\n    - z: int32\r\n   ```\r\n   \r\n   `field_ref(0)` should yield `[1, 1]`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T21:45:13.313+0000",
                    "updated": "2022-03-24T21:45:13.313+0000",
                    "started": "2022-03-24T21:45:13.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747470",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/747544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r834860872\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -160,18 +160,34 @@ Status ResolveOneFieldRef(\n     const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n     const std::unordered_set<std::string>& duplicate_fields,\n     std::vector<int>* columns_selection) {\n-  if (const std::string* name = field_ref.name()) {\n+  auto resolve_field_ref = [&](const std::string* name) -> Status {\n     auto it = field_lookup.find(*name);\n     if (it != field_lookup.end()) {\n       AddColumnIndices(*it->second, columns_selection);\n     } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n-      // We shouldn't generally get here because SetProjection will reject such references\n+      // We shouldn't generally get here because SetProjection will reject such\n+      // references\n       return Status::Invalid(\"Ambiguous reference to column '\", *name,\n                              \"' which occurs more than once\");\n     }\n     // \"Virtual\" column: field is not in file but is in the ScanOptions.\n     // Ignore it here, as projection will pad the batch with a null column.\n     return Status::OK();\n+  };\n+\n+  if (const std::string* name = field_ref.name()) {\n+    return resolve_field_ref(name);\n+  } else if (const FieldPath* path = field_ref.field_path()) {\n+    auto indices = path->indices();\n+    if (indices.size() > 1) {\n+      return Status::NotImplemented(\"Provided FieldRef \", field_ref.ToString(),\n+                                    \", Nested FieldPaths are not supported!\");\n+    }\n+    int index = indices[0];\n+    auto schema_field = manifest.schema_fields[index];\n\nReview comment:\n       Thanks you for noting this one. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-25T00:36:32.361+0000",
                    "updated": "2022-03-25T00:36:32.361+0000",
                    "started": "2022-03-25T00:36:32.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747544",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/750966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r839545462\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet_test.cc\n##########\n@@ -390,6 +390,38 @@ TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithVirtualColumn) {\n TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithDuplicateColumn) {\n   TestScanWithDuplicateColumn();\n }\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathFilter) {\n+  TestScanWithFieldPathFilter();\n+}\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathMultiFileFilter) {\n\nReview comment:\n       Can we make this a \"common\" test too?\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -513,6 +513,33 @@ class FileFormatFixtureMixin : public ::testing::Test {\n     EXPECT_OK_AND_ASSIGN(auto written, sink->Finish());\n     return written;\n   }\n+  std::shared_ptr<Buffer> WriteToBufferFromTable(\n+      std::shared_ptr<Schema> schema,\n\nReview comment:\n       A table already includes a schema\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -823,6 +850,34 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n       ASSERT_EQ(row_count, expected_rows());\n     }\n   }\n+\n+  void TestScanWithFieldPathFilter() {\n+    compute::Expression index_filter = equal(field_ref(0), literal(0));\n+    compute::Expression name_filter = equal(field_ref(\"i64\"), literal(0));\n+    std::vector<int64_t> row_counts(2);\n+    for (auto filter : {index_filter, name_filter}) {\n+      auto i32 = field(\"i32\", int32());\n+      auto i64 = field(\"i64\", int64());\n+      this->opts_->dataset_schema = schema({i32, i64});\n+      this->Project({});\n+      this->SetFilter(filter);\n+      auto reader = this->GetRecordBatchReader(opts_->dataset_schema);\n+      auto source = this->GetFileSource(reader.get());\n+      auto fragment = this->MakeFragment(*source);\n+\n+      int64_t row_count = 0;\n+\n+      for (auto maybe_batch : PhysicalBatches(fragment)) {\n+        ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n+        row_count += batch->num_rows();\n+      }\n\nReview comment:\n       IMO we should validate the schema of the batches too\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -156,22 +156,37 @@ void AddColumnIndices(const SchemaField& schema_field,\n }\n \n Status ResolveOneFieldRef(\n-    const SchemaManifest& manifest, const FieldRef& field_ref,\n+    const SchemaManifest& manifest, const std::shared_ptr<Schema> dataset_schema,\n\nReview comment:\n       ```suggestion\r\n       const SchemaManifest& manifest, const std::shared_ptr<Schema>& dataset_schema,\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -823,6 +850,34 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n       ASSERT_EQ(row_count, expected_rows());\n     }\n   }\n+\n+  void TestScanWithFieldPathFilter() {\n+    compute::Expression index_filter = equal(field_ref(0), literal(0));\n+    compute::Expression name_filter = equal(field_ref(\"i64\"), literal(0));\n+    std::vector<int64_t> row_counts(2);\n\nReview comment:\n       This is wrong when used with push_back, the end result will be a vector `[0, 0, x, y]`\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -258,8 +275,8 @@ Result<std::vector<int>> InferColumnProjection(const parquet::arrow::FileReader&\n \n   std::vector<int> columns_selection;\n   for (const auto& ref : field_refs) {\n-    RETURN_NOT_OK(ResolveOneFieldRef(manifest, ref, field_lookup, duplicate_fields,\n-                                     &columns_selection));\n+    RETURN_NOT_OK(ResolveOneFieldRef(manifest, dataset_schema, ref, field_lookup,\n\nReview comment:\n       nit, but I don't see a reason to create a copy of the dataset schema above, just pass it as `options.dataset_schema`\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -513,6 +513,33 @@ class FileFormatFixtureMixin : public ::testing::Test {\n     EXPECT_OK_AND_ASSIGN(auto written, sink->Finish());\n     return written;\n   }\n+  std::shared_ptr<Buffer> WriteToBufferFromTable(\n\nReview comment:\n       nit: `WriteTableToBuffer`?\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet_test.cc\n##########\n@@ -390,6 +390,38 @@ TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithVirtualColumn) {\n TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithDuplicateColumn) {\n   TestScanWithDuplicateColumn();\n }\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathFilter) {\n+  TestScanWithFieldPathFilter();\n+}\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathMultiFileFilter) {\n+  compute::Expression filter = greater(field_ref(0), literal(20));\n+  auto fields = {field(\"x\", int32()), field(\"y\", int32()), field(\"z\", int32())};\n+  auto dataset_schema = schema(fields);\n+  SetSchema(fields);\n+  SetFilter(filter);\n+  auto table = TableFromJSON(dataset_schema,\n+                             {\n+                                 R\"([[10, 20, 30]])\",\n+                             });\n+\n+  auto options =\n+      checked_pointer_cast<ParquetFileWriteOptions>(format_->DefaultWriteOptions());\n+  options->writer_properties = parquet::WriterProperties::Builder()\n+                                   .build();\n+  options->arrow_writer_properties = parquet::ArrowWriterProperties::Builder()\n+                                         .build();\n+\n+  auto written = WriteToBufferFromTable(dataset_schema, table, options);\n+\n+  EXPECT_OK_AND_ASSIGN(auto fragment, format_->MakeFragment(FileSource{written}));\n+\n+  for (auto maybe_batch : PhysicalBatches(fragment)) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n+    std::cout << \"Batch ::\" << std::endl;\n+    std::cout << batch->ToString() << std::endl;\n\nReview comment:\n       We shouldn't print the data, also there doesn't seem to be an assertion in this test?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T12:34:07.706+0000",
                    "updated": "2022-03-31T12:34:07.706+0000",
                    "started": "2022-03-31T12:34:07.706+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750966",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/750970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r839559528\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet_test.cc\n##########\n@@ -390,6 +390,38 @@ TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithVirtualColumn) {\n TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithDuplicateColumn) {\n   TestScanWithDuplicateColumn();\n }\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathFilter) {\n+  TestScanWithFieldPathFilter();\n+}\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathMultiFileFilter) {\n\nReview comment:\n       this is WIP test case @lidavidm I haven't finalized it yet. Still addressing the review. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T12:42:22.277+0000",
                    "updated": "2022-03-31T12:42:22.277+0000",
                    "started": "2022-03-31T12:42:22.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750970",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/750971",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r839561013\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet_test.cc\n##########\n@@ -390,6 +390,38 @@ TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithVirtualColumn) {\n TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithDuplicateColumn) {\n   TestScanWithDuplicateColumn();\n }\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathFilter) {\n+  TestScanWithFieldPathFilter();\n+}\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathMultiFileFilter) {\n+  compute::Expression filter = greater(field_ref(0), literal(20));\n+  auto fields = {field(\"x\", int32()), field(\"y\", int32()), field(\"z\", int32())};\n+  auto dataset_schema = schema(fields);\n+  SetSchema(fields);\n+  SetFilter(filter);\n+  auto table = TableFromJSON(dataset_schema,\n+                             {\n+                                 R\"([[10, 20, 30]])\",\n+                             });\n+\n+  auto options =\n+      checked_pointer_cast<ParquetFileWriteOptions>(format_->DefaultWriteOptions());\n+  options->writer_properties = parquet::WriterProperties::Builder()\n+                                   .build();\n+  options->arrow_writer_properties = parquet::ArrowWriterProperties::Builder()\n+                                         .build();\n+\n+  auto written = WriteToBufferFromTable(dataset_schema, table, options);\n+\n+  EXPECT_OK_AND_ASSIGN(auto fragment, format_->MakeFragment(FileSource{written}));\n+\n+  for (auto maybe_batch : PhysicalBatches(fragment)) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n+    std::cout << \"Batch ::\" << std::endl;\n+    std::cout << batch->ToString() << std::endl;\n\nReview comment:\n       WIP still, this is a temporary commit since I had to switch branch. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T12:43:56.016+0000",
                    "updated": "2022-03-31T12:43:56.016+0000",
                    "started": "2022-03-31T12:43:56.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750971",
                    "issueId": "13427907"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/worklog/750972",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on a change in pull request #12664:\nURL: https://github.com/apache/arrow/pull/12664#discussion_r839561245\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet_test.cc\n##########\n@@ -390,6 +390,38 @@ TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithVirtualColumn) {\n TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithDuplicateColumn) {\n   TestScanWithDuplicateColumn();\n }\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathFilter) {\n+  TestScanWithFieldPathFilter();\n+}\n+TEST_P(TestParquetFileFormatScan, ScanRecordBatchReaderWithFieldPathMultiFileFilter) {\n+  compute::Expression filter = greater(field_ref(0), literal(20));\n+  auto fields = {field(\"x\", int32()), field(\"y\", int32()), field(\"z\", int32())};\n+  auto dataset_schema = schema(fields);\n+  SetSchema(fields);\n+  SetFilter(filter);\n+  auto table = TableFromJSON(dataset_schema,\n+                             {\n+                                 R\"([[10, 20, 30]])\",\n+                             });\n+\n+  auto options =\n+      checked_pointer_cast<ParquetFileWriteOptions>(format_->DefaultWriteOptions());\n+  options->writer_properties = parquet::WriterProperties::Builder()\n+                                   .build();\n+  options->arrow_writer_properties = parquet::ArrowWriterProperties::Builder()\n+                                         .build();\n+\n+  auto written = WriteToBufferFromTable(dataset_schema, table, options);\n+\n+  EXPECT_OK_AND_ASSIGN(auto fragment, format_->MakeFragment(FileSource{written}));\n+\n+  for (auto maybe_batch : PhysicalBatches(fragment)) {\n+    ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n+    std::cout << \"Batch ::\" << std::endl;\n+    std::cout << batch->ToString() << std::endl;\n\nReview comment:\n       This is part of addressing a review. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-31T12:44:18.773+0000",
                    "updated": "2022-03-31T12:44:18.773+0000",
                    "started": "2022-03-31T12:44:18.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "750972",
                    "issueId": "13427907"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4cf6f21b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31090b80[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d9c3db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@79f59d4b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67a62147[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@38b97db1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76b0a666[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@237a623e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7500d30f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6a76ceb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@755779cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5cc8ec9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:49 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15658/watchers",
            "watchCount": 6,
            "isWatching": true
        },
        "created": "2022-02-11T02:37:32.000+0000",
        "updated": "2022-07-12T14:04:49.000+0000",
        "timeoriginalestimate": null,
        "description": "We can refer to a field by name (e.g. {{compute::field_ref(\"foo\")}}) or by index (e.g. {{compute::field_ref(0)}}).\r\n\r\nThe latter is not supported when doing parquet projection.  A test can demonstrating this can be found here: https://github.com/westonpace/arrow/commit/2f92ed0764cf2e1388dac053aeb4e1b923c6872e\r\n\r\nCopied here for posterity (this would go in the dataset fixture mixin):\r\n\r\n{code}\r\n  void TestScanWithFieldPathFilter() {\r\n    auto i32 = field(\"i32\", int32());\r\n    auto i64 = field(\"i64\", int64());\r\n    this->opts_->dataset_schema = schema({i32, i64});\r\n    this->Project({\"i64\"});\r\n    // This should be the column i32\r\n    this->SetFilter(equal(field_ref(0), literal(0)));\r\n    auto expected_schema = schema({i64});\r\n    auto reader = this->GetRecordBatchReader(opts_->dataset_schema);\r\n    auto source = this->GetFileSource(reader.get());\r\n    auto fragment = this->MakeFragment(*source);\r\n\r\n    int64_t row_count = 0;\r\n\r\n    for (auto maybe_batch : PhysicalBatches(fragment)) {\r\n      ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\r\n      row_count += batch->num_rows();\r\n      AssertSchemaEqual(*batch->schema(), *expected_schema,\r\n                        /*check_metadata=*/false);\r\n    }\r\n\r\n    ASSERT_EQ(row_count, expected_rows());\r\n  }\r\n{code}\r\n\r\nI would expect this to work.  Instead I get the error:\r\n\r\n{noformat}\r\n/home/pace/dev/arrow/cpp/src/arrow/dataset/test_util.h:840: Failure\r\nFailed\r\n'_error_or_value83.status()' failed with NotImplemented: Inferring column projection from FieldRef FieldRef.FieldPath(0)\r\n/home/pace/dev/arrow/cpp/src/arrow/dataset/file_parquet.cc:262  ResolveOneFieldRef(manifest, ref, field_lookup, duplicate_fields, &columns_selection)\r\n/home/pace/dev/arrow/cpp/src/arrow/dataset/file_parquet.cc:437  InferColumnProjection(*reader, *options)\r\n/home/pace/dev/arrow/cpp/src/arrow/util/iterator.h:152  value_.status()\r\n{noformat}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Parquet pushdown filtering fails if the filter expression uses numeric field references",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/comment/17490930",
                    "id": "17490930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think in general we don't support using indices. We probably could add the support. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-11T13:45:46.393+0000",
                    "updated": "2022-02-11T13:45:46.393+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/comment/17508660",
                    "id": "17508660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~westonpace] [~lidavidm]\u00a0I made a draft PR with a simple fix. But I am not entirely sure if I have convered all the basis as far as `FieldPath` usage or nested refs taken into account. Would appreciate your feedback on this.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-18T09:03:08.065+0000",
                    "updated": "2022-03-18T09:03:08.065+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/comment/17508675",
                    "id": "17508675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "The test cases are failing for some of the github workflows, I am looking into it.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-18T09:42:42.969+0000",
                    "updated": "2022-03-18T09:42:42.969+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427907/comment/17565766",
                    "id": "17565766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:49.025+0000",
                    "updated": "2022-07-12T14:04:49.025+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0zh94:",
        "customfield_12314139": null
    }
}