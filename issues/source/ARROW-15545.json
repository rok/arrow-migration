{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13426373",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373",
    "key": "ARROW-15545",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "good-first-issue",
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12648280",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12648280",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13408877",
                    "key": "ARROW-14500",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408877",
                    "fields": {
                        "summary": "[C++] Support casting from storage type to extension type",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12632683",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12632683",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13409216",
                    "key": "ARROW-14525",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13409216",
                    "fields": {
                        "summary": "[C++][Parquet] Writing DictionaryArrays with ExtensionType to Parquet",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12632685",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12632685",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13409853",
                    "key": "ARROW-14569",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13409853",
                    "fields": {
                        "summary": "[C++][Python] Support for pandas Categoricals with Intervals",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
            "name": "milesgranger",
            "key": "JIRAUSER293894",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
            },
            "displayName": "Miles Granger",
            "active": true,
            "timeZone": "Europe/Oslo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 40800,
            "total": 40800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 40800,
            "total": 40800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15545/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 68,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/808150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger opened a new pull request, #14106:\nURL: https://github.com/apache/arrow/pull/14106\n\n   Fix [ARROW-15545ARROW-15545](https://issues.apache.org/jira/browse/ARROW-15545)\r\n   \r\n   @jorisvandenbossche I started with this approach before our discussion; I can proceed to do this in C++ if that'd be preferred. \n\n\n",
                    "created": "2022-09-13T08:11:34.506+0000",
                    "updated": "2022-09-13T08:11:34.506+0000",
                    "started": "2022-09-13T08:11:34.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808150",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/808183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#issuecomment-1245172603\n\n   https://issues.apache.org/jira/browse/ARROW-15545\n\n\n",
                    "created": "2022-09-13T09:53:57.069+0000",
                    "updated": "2022-09-13T09:53:57.069+0000",
                    "started": "2022-09-13T09:53:57.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808183",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/808197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#issuecomment-1245213798\n\n   I think ideally we handle this on the C++ side, so that it for example also works within a Acero query / dataset scan.\n\n\n",
                    "created": "2022-09-13T10:28:11.546+0000",
                    "updated": "2022-09-13T10:28:11.546+0000",
                    "started": "2022-09-13T10:28:11.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808197",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/808239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#issuecomment-1245313651\n\n   This would indeed be useful in c++ too. Reading [scalar_cast_numeric.cc](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc) and [scalar_cast_test.cc](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_cast_test.cc) might be a good way to get familiar with casting there.\n\n\n",
                    "created": "2022-09-13T12:01:50.802+0000",
                    "updated": "2022-09-13T12:01:50.802+0000",
                    "started": "2022-09-13T12:01:50.801+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808239",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/808269",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#issuecomment-1245382163\n\n   Thanks @rok, just saw your comment, I'll take a deeper look at that. Now in https://github.com/apache/arrow/pull/14106/commits/b9d8cb6747fb496f70e64c89378d62717b7e7d9c I loop over id or storage id. This creates the same result as the Python casting in https://github.com/apache/arrow/pull/14106/commits/e4db00b8aa90d5a1f329aeae8238797cccb878a2 which fixes the reported issue. However, when casting the test's `IntegerType` it comes back as `Int64Array` instead of extension array.. (maybe that's okay?)\n\n\n",
                    "created": "2022-09-13T13:02:12.089+0000",
                    "updated": "2022-09-13T13:02:12.089+0000",
                    "started": "2022-09-13T13:02:12.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808269",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/808285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#issuecomment-1245412675\n\n   @milesgranger My guess is you will want to instantiate an `ExtensionArray` from a 'regular' `Array` by passing the underlaying buffers, kind of like what [CastFromExtension](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_cast_internal.cc#L152-L163) does and then add c++ test like [this one](https://github.com/apache/arrow/blob/6cc37cf2d1ba72c46b64fbc7ac499bd0d7296d20/cpp/src/arrow/compute/kernels/scalar_cast_test.cc#L2731-L2766). \n\n\n",
                    "created": "2022-09-13T13:26:25.150+0000",
                    "updated": "2022-09-13T13:26:25.150+0000",
                    "started": "2022-09-13T13:26:25.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "808285",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r971836443\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,41 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+  auto ext_ty = GetExtensionType(kOutputTargetType.type()->name());\n+  if (ext_ty == nullptr) {\n+    return Status::Invalid(\"Could not find extension type: \" + kOutputTargetType.type()->name());\n+  }\n+  auto out_ty = ext_ty->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  ExtensionArray extension(ext_ty, result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\n+  auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\n+  auto out_ty = kOutputTargetType.type();\n\nReview Comment:\n   @rok I feel like I've exhausted my debugging options here. While I know these functions are in the wrong file.. was trying to get a working prototype.\r\n   \r\n   However, this line here aborts:\r\n   ```python\r\n   In [1]: import pyarrow as pa\r\n   \r\n   In [2]: from pyarrow.tests.test_extension_type import UuidType, IntegerType\r\n   \r\n   In [3]: a = pa.array([1, 2, 3], pa.int64())\r\n   \r\n   In [4]: a.cast(IntegerType())\r\n   /home/milesg/Projects/arrow/cpp/src/arrow/compute/kernel.cc:382:  Check failed: (FIXED) == (kind_)\r\n   ```\r\n   Do you have any suggestions?\n\n\n\n",
                    "created": "2022-09-15T10:53:22.972+0000",
                    "updated": "2022-09-15T10:53:22.972+0000",
                    "started": "2022-09-15T10:53:22.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809051",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r971836443\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,41 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+  auto ext_ty = GetExtensionType(kOutputTargetType.type()->name());\n+  if (ext_ty == nullptr) {\n+    return Status::Invalid(\"Could not find extension type: \" + kOutputTargetType.type()->name());\n+  }\n+  auto out_ty = ext_ty->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  ExtensionArray extension(ext_ty, result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\n+  auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\n+  auto out_ty = kOutputTargetType.type();\n\nReview Comment:\n   @rok I feel like I've exhausted my debugging options here. While I know these functions are in the wrong file.. was trying to get a working prototype.\r\n   \r\n   However, this line here aborts:\r\n   ```python\r\n   In [1]: import pyarrow as pa\r\n   \r\n   In [2]: from pyarrow.tests.test_extension_type import UuidType, IntegerType\r\n   \r\n   In [3]: a = pa.array([1, 2, 3], pa.int64())\r\n   \r\n   In [4]: a.cast(IntegerType())\r\n   /home/milesg/Projects/arrow/cpp/src/arrow/compute/kernel.cc:382:  Check failed: (FIXED) == (kind_)\r\n   ```\r\n   Do you have any suggestions?\r\n   \r\n   ",
                    "created": "2022-09-15T11:42:22.253+0000",
                    "updated": "2022-09-15T11:42:22.253+0000",
                    "started": "2022-09-15T11:42:22.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809064",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r971906655\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,41 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+  auto ext_ty = GetExtensionType(kOutputTargetType.type()->name());\n+  if (ext_ty == nullptr) {\n+    return Status::Invalid(\"Could not find extension type: \" + kOutputTargetType.type()->name());\n+  }\n+  auto out_ty = ext_ty->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  ExtensionArray extension(ext_ty, result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\n+  auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\n+  auto out_ty = kOutputTargetType.type();\n+  std::cout << \"About to add to kernel\" << std::endl;\n+  DCHECK_OK(func->AddKernel(Type::INT64, {InputType(Type::INT64)}, \n+                            out_ty, CastToExtension));\n\nReview Comment:\n   ```suggestion\r\n     std::cout << \"About to add to kernel\" << std::endl;\r\n     DCHECK_OK(func->AddKernel(Type::INT64, {InputType(Type::INT64)}, \r\n                               kOutputTargetType, CastToExtension));\r\n   ```\r\n   This works for me. Resolver might be useful if output type is parametric and not known at run time\n\n\n\n",
                    "created": "2022-09-15T12:12:14.780+0000",
                    "updated": "2022-09-15T12:12:14.780+0000",
                    "started": "2022-09-15T12:12:14.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809070",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r971909183\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,41 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+  auto ext_ty = GetExtensionType(kOutputTargetType.type()->name());\n+  if (ext_ty == nullptr) {\n+    return Status::Invalid(\"Could not find extension type: \" + kOutputTargetType.type()->name());\n+  }\n+  auto out_ty = ext_ty->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  ExtensionArray extension(ext_ty, result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\n+  auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\n+  auto out_ty = kOutputTargetType.type();\n\nReview Comment:\n   See my comment below.\r\n   For printing - you can also `#include \"arrow/util/logging.h\"` and then do:\r\n   ```\r\n   ARROW_LOG(INFO) << \"text\" << value;\r\n   ```\n\n\n\n",
                    "created": "2022-09-15T12:14:50.054+0000",
                    "updated": "2022-09-15T12:14:50.054+0000",
                    "started": "2022-09-15T12:14:50.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809072",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r971938800\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,41 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+  auto ext_ty = GetExtensionType(kOutputTargetType.type()->name());\n+  if (ext_ty == nullptr) {\n+    return Status::Invalid(\"Could not find extension type: \" + kOutputTargetType.type()->name());\n+  }\n+  auto out_ty = ext_ty->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  ExtensionArray extension(ext_ty, result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\n+  auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\n+  auto out_ty = kOutputTargetType.type();\n\nReview Comment:\n   Handy, thank you!\r\n   \n\n\n\n",
                    "created": "2022-09-15T12:43:57.302+0000",
                    "updated": "2022-09-15T12:43:57.302+0000",
                    "started": "2022-09-15T12:43:57.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809076",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r971949459\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,41 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+  auto ext_ty = GetExtensionType(kOutputTargetType.type()->name());\n+  if (ext_ty == nullptr) {\n+    return Status::Invalid(\"Could not find extension type: \" + kOutputTargetType.type()->name());\n+  }\n+  auto out_ty = ext_ty->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  ExtensionArray extension(ext_ty, result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\n+  auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\n+  auto out_ty = kOutputTargetType.type();\n+  std::cout << \"About to add to kernel\" << std::endl;\n+  DCHECK_OK(func->AddKernel(Type::INT64, {InputType(Type::INT64)}, \n+                            out_ty, CastToExtension));\n\nReview Comment:\n   Okay, nice, that is almost where I found myself now, and think I have more headway. Thank you again. \n\n\n\n",
                    "created": "2022-09-15T12:54:03.132+0000",
                    "updated": "2022-09-15T12:54:03.132+0000",
                    "started": "2022-09-15T12:54:03.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809079",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972915628\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   @pitrou @rok This 'works', but need to hard-code the extension type name here. I think if I can convert the `options.to_type.GetSharedPtr()->storage_id()` into a `TypeHolder/DataType` then I may be in the clear. Would either of you be able to help pointer me to the correct approach? \ud83d\ude4f \r\n   ```python\r\n   In [2]: from pyarrow.tests.test_extension_type import UuidType, IntegerType\r\n   \r\n   In [3]: import pyarrow as pa\r\n   \r\n   In [4]: pa.register_extension_type(IntegerType())\r\n   \r\n   In [5]: a = pa.array([1, 2, 3], pa.int64())\r\n   \r\n   In [6]: a.cast(IntegerType()).type\r\n   Out[6]: IntegerType(DataType(int64))\r\n   \r\n   In [7]: a.cast(IntegerType())\r\n   Out[7]:\r\n   <pyarrow.lib.ExtensionArray object at 0x7f1167289520>\r\n   [\r\n     1,\r\n     2,\r\n     3\r\n   ]\r\n   ```\n\n\n\n",
                    "created": "2022-09-16T11:14:11.523+0000",
                    "updated": "2022-09-16T11:14:11.523+0000",
                    "started": "2022-09-16T11:14:11.522+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809495",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972915628\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   @pitrou @rok This 'works', but need to hard-code the extension type name here. I think if I can convert the `options.to_type.GetSharedPtr()->storage_id()` into a `TypeHolder/DataType` then I may be in the clear. Would either of you be able to help point me to the correct approach? \ud83d\ude4f \r\n   ```python\r\n   In [2]: from pyarrow.tests.test_extension_type import UuidType, IntegerType\r\n   \r\n   In [3]: import pyarrow as pa\r\n   \r\n   In [4]: pa.register_extension_type(IntegerType())\r\n   \r\n   In [5]: a = pa.array([1, 2, 3], pa.int64())\r\n   \r\n   In [6]: a.cast(IntegerType()).type\r\n   Out[6]: IntegerType(DataType(int64))\r\n   \r\n   In [7]: a.cast(IntegerType())\r\n   Out[7]:\r\n   <pyarrow.lib.ExtensionArray object at 0x7f1167289520>\r\n   [\r\n     1,\r\n     2,\r\n     3\r\n   ]\r\n   ```\n\n\n\n",
                    "created": "2022-09-16T11:14:35.731+0000",
                    "updated": "2022-09-16T11:14:35.731+0000",
                    "started": "2022-09-16T11:14:35.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809496",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972937826\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   I can make it work by templating `GetCastToExtension` and `CastToExtension` then adding the kernel as such:\r\n   ```cpp\r\n   std::vector<std::shared_ptr<CastFunction>> GetExtensionCasts() {\r\n    auto func = GetCastToExtension<Int64Type>(\"cast_extension\"); \r\n    return {func};                                                                                 \r\n   }\r\n   ```\r\n   Where the templated type is the possible storage types of the extension type. Maybe there is a more slick way to accomplish it, especially since the extension name is in the registry, as demonstrated by the hard-coded impl; but will continue with this for now. :)\n\n\n\n",
                    "created": "2022-09-16T11:45:33.532+0000",
                    "updated": "2022-09-16T11:45:33.532+0000",
                    "started": "2022-09-16T11:45:33.531+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809500",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972937826\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   I can make it work by templating `GetCastToExtension` and `CastToExtension` then adding the kernel as such:\r\n   ```cpp\r\n   template <typename OutType>\r\n   std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\r\n     auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\r\n     DCHECK_OK(func->AddKernel(Type::INT64, {InputType(Type::INT64)}, kOutputTargetType, CastToExtension<OutType>));\r\n     return func;\r\n   }\r\n   \r\n   std::vector<std::shared_ptr<CastFunction>> GetExtensionCasts() {\r\n    auto func = GetCastToExtension<Int64Type>(\"cast_extension\"); \r\n    return {func};                                                                                 \r\n   }\r\n   ```\r\n   Where the templated type is the possible storage types of the extension type. Maybe there is a more slick way to accomplish it, especially since the extension name is in the registry, as demonstrated by the hard-coded impl; but will continue with this for now. :)\n\n\n\n",
                    "created": "2022-09-16T11:48:53.920+0000",
                    "updated": "2022-09-16T11:48:53.920+0000",
                    "started": "2022-09-16T11:48:53.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809501",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972937826\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   I can make it work by templating `GetCastToExtension` and `CastToExtension` then adding the kernel as such:\r\n   ```cpp\r\n   template <typename StorageType>\r\n   std::shared_ptr<CastFunction> GetCastToExtension(std::string name) {\r\n     auto func = std::make_shared<CastFunction>(std::move(name), Type::EXTENSION);\r\n     DCHECK_OK(func->AddKernel(Type::INT64, {InputType(Type::INT64)}, kOutputTargetType, CastToExtension<StorageType>));\r\n     return func;\r\n   }\r\n   \r\n   std::vector<std::shared_ptr<CastFunction>> GetExtensionCasts() {\r\n    auto func = GetCastToExtension<Int64Type>(\"cast_extension\"); \r\n    return {func};                                                                                 \r\n   }\r\n   ```\r\n   Where the templated type is the possible storage types of the extension type. Maybe there is a more slick way to accomplish it, especially since the extension name is in the registry, as demonstrated by the hard-coded impl; but will continue with this for now. :)\n\n\n\n",
                    "created": "2022-09-16T11:49:54.083+0000",
                    "updated": "2022-09-16T11:49:54.083+0000",
                    "started": "2022-09-16T11:49:54.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809502",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972979934\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   Disregard. Knew as soon as I reached out for help, I'd find a better way. \ud83d\ude06 \r\n   Found I could just static cast the `options.to_type.type` to get a  `ExtensionType` (https://github.com/apache/arrow/pull/14106/commits/6c05a1d620dbaea44e2db4520acb16330332df9a)\r\n   Apologies for the noise. :)\n\n\n\n",
                    "created": "2022-09-16T12:39:33.904+0000",
                    "updated": "2022-09-16T12:39:33.904+0000",
                    "started": "2022-09-16T12:39:33.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809511",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972984461\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   This seems ok and slick-er way can wait.\r\n   I'm wondering if this passes enough information about the type. Namely would it work for [parametric extension types](https://github.com/apache/arrow/blob/master/cpp/src/arrow/extension_type_test.cc#L302).\n\n\n\n",
                    "created": "2022-09-16T12:44:24.389+0000",
                    "updated": "2022-09-16T12:44:24.389+0000",
                    "started": "2022-09-16T12:44:24.388+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809512",
                    "issueId": "13426373"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/worklog/809513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on code in PR #14106:\nURL: https://github.com/apache/arrow/pull/14106#discussion_r972984461\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_cast_numeric.cc:\n##########\n@@ -769,6 +770,36 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   return functions;\n }\n \n+\n+Status CastToExtension(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+  const CastOptions& options = checked_cast<const CastState*>(ctx->state())->options;\n+  DCHECK(batch[0].is_array());\n+  std::shared_ptr<Array> array = batch[0].array.ToArray();\n+  std::shared_ptr<Array> result;\n+\n+  auto out_ty = GetExtensionType(\"arrow.py_integer_type\")->storage_type();\n+  RETURN_NOT_OK(Cast(*array, out_ty, options,\n+                     ctx->exec_context())\n+                    .Value(&result));\n+  \n+  ExtensionArray extension(options.to_type.GetSharedPtr(), result);\n+  out->value = std::move(extension.data());\n+  return Status::OK();\n+}\n\nReview Comment:\n   This seems ok for now and slick-er way can wait.\r\n   I'm wondering if this passes enough information about the type. Namely would it work for [parametric extension types](https://github.com/apache/arrow/blob/master/cpp/src/arrow/extension_type_test.cc#L302).\n\n\n\n",
                    "created": "2022-09-16T12:44:39.400+0000",
                    "updated": "2022-09-16T12:44:39.400+0000",
                    "started": "2022-09-16T12:44:39.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "809513",
                    "issueId": "13426373"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 40800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@38b1fda1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@132804d6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78eb819c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2b3634e3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24395bee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6a7eb730[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ebd3c82[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5436889a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3abe4fd9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@25e6b889[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@218d99b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@628af31a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 40800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 11 08:15:34 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-11T08:15:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15545/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-02-03T10:07:23.000+0000",
        "updated": "2022-10-12T07:15:45.000+0000",
        "timeoriginalestimate": null,
        "description": "We support casting a DictionaryArray to its dictionary values' type. For example:\r\n\r\n{code}\r\n>>> arr = pa.array([1, 2, 1]).dictionary_encode()\r\n>>> arr\r\n<pyarrow.lib.DictionaryArray object at 0x7f0c1aca46d0>\r\n\r\n-- dictionary:\r\n  [\r\n    1,\r\n    2\r\n  ]\r\n-- indices:\r\n  [\r\n    0,\r\n    1,\r\n    0\r\n  ]\r\n\r\n>>> arr.type\r\nDictionaryType(dictionary<values=int64, indices=int32, ordered=0>)\r\n>>> arr.cast(arr.type.value_type)\r\n<pyarrow.lib.Int64Array object at 0x7f0c19891dc0>\r\n[\r\n  1,\r\n  2,\r\n  1\r\n]\r\n{code}\r\n\r\nHowever, if the type of the dictionary values is an ExtensionType, this cast is not supported:\r\n\r\n{code}\r\n>>> from pyarrow.tests.test_extension_type import UuidType\r\n>>> storage = pa.array([b\"0123456789abcdef\"], type=pa.binary(16))\r\n>>> arr = pa.ExtensionArray.from_storage(UuidType(), storage)\r\n>>> arr\r\n<pyarrow.lib.ExtensionArray object at 0x7f0c1875bc40>\r\n[\r\n  30313233343536373839616263646566\r\n]\r\n>>> dict_arr = pa.DictionaryArray.from_arrays(pa.array([0, 0], pa.int32()), arr)\r\n>>> dict_arr.type\r\nDictionaryType(dictionary<values=extension<arrow.py_extension_type<UuidType>>, indices=int32, ordered=0>)\r\n>>> dict_arr.cast(UuidType())\r\n...\r\nArrowNotImplementedError: Unsupported cast from dictionary<values=extension<arrow.py_extension_type<UuidType>>, indices=int32, ordered=0> to extension<arrow.py_extension_type<UuidType>> (no available cast function for target type)\r\n../src/arrow/compute/cast.cc:119  GetCastFunctionInternal(cast_options->to_type, args[0].type().get())\r\n\r\n{code}\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "11h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 40800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Cast dictionary of extension type to extension type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426373/comment/17615584",
                    "id": "17615584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Issue resolved by pull request 14106\n[https://github.com/apache/arrow/pull/14106]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-10-11T08:15:34.333+0000",
                    "updated": "2022-10-11T08:15:34.333+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0z7uw:",
        "customfield_12314139": null
    }
}