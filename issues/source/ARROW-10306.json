{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13335407",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407",
    "key": "ARROW-10306",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12608919",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12608919",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13042654",
                    "key": "ARROW-555",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042654",
                    "fields": {
                        "summary": "[C++] String algorithm library for StringArray/BinaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12608103",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12608103",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13357186",
                    "key": "ARROW-11513",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13357186",
                    "fields": {
                        "summary": "[R] Bindings for sub/gsub",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
            "name": "maartenbreddels",
            "key": "maartenbreddels",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maarten Breddels",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
            "name": "maartenbreddels",
            "key": "maartenbreddels",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maarten Breddels",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maartenbreddels",
            "name": "maartenbreddels",
            "key": "maartenbreddels",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maarten Breddels",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10306/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/501049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels opened a new pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468\n\n\n   Two new kernels\r\n    * replace_substring like Python's str.replace\r\n    * replace_substring_re2  like Python's re.sub\r\n   \r\n   TODO:\r\n    * [ ] Rebase after #8459 is not, and the re2 installation/linking is solved\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T10:04:51.852+0000",
                    "updated": "2020-10-15T10:04:51.852+0000",
                    "started": "2020-10-15T10:04:51.852+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501049",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/501053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-709073664\n\n\n   https://issues.apache.org/jira/browse/ARROW-10306\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-15T10:07:17.138+0000",
                    "updated": "2020-10-15T10:07:17.138+0000",
                    "started": "2020-10-15T10:07:17.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "501053",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/502337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-712295030\n\n\n   You may want to remove the regex variant of this if you want to move this forward without depending on resolving the re2 dependency issue.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-19T16:49:58.567+0000",
                    "updated": "2020-10-19T16:49:58.567+0000",
                    "started": "2020-10-19T16:49:58.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "502337",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/516036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-732844513\n\n\n   @maartenbreddels would it be practical to split this into two PRs? (one for plain replace, other for re2-based replace) Or would you prefer first to have the re2 dependency issue resolved? (ARROW-10541)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T11:15:12.964+0000",
                    "updated": "2020-11-24T11:15:12.964+0000",
                    "started": "2020-11-24T11:15:12.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516036",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/516743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-733803300\n\n\n   I'd rather keep this 1 PR, looks like #8756 is working\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T16:12:40.678+0000",
                    "updated": "2020-11-25T16:12:40.678+0000",
                    "started": "2020-11-25T16:12:40.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516743",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/516801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-733870297\n\n\n   @pitrou this is ready for review, failure seems unrelated (minio on windows).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T18:13:53.323+0000",
                    "updated": "2020-11-25T18:13:53.323+0000",
                    "started": "2020-11-25T18:13:53.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516801",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/517139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#discussion_r531163812\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n\nReview comment:\n       `ReplaceString` below is basically independent from `Type`, but using this idiom may compile it twice. Can you find another way to parametrize the kernel?\r\n   (hint: perhaps use composition rather than inheritance)\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -68,6 +68,18 @@ struct ARROW_EXPORT SplitPatternOptions : public SplitOptions {\n   std::string pattern;\n };\n \n+struct ARROW_EXPORT ReplaceSubstringOptions : public FunctionOptions {\n+  explicit ReplaceSubstringOptions(std::string pattern, std::string replacement,\n+                                   int64_t max_replacements = -1)\n+      : pattern(pattern), replacement(replacement), max_replacements(max_replacements) {}\n+\n+  /// Literal pattern, or regular expression depending on is_regex\n\nReview comment:\n       Hmm... I don't see `is_regex` here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n+  using Base = ReplaceSubStringBase<Type, ReplaceSubString<Type>>;\n+  using ValueDataBuilder = typename Base::ValueDataBuilder;\n+  using offset_type = typename Base::offset_type;\n+\n+  ReplaceSubstringOptions options;\n+  explicit ReplaceSubString(KernelContext* ctx, ReplaceSubstringOptions options)\n+      : options(options) {}\n+\n+  Status ReplaceString(util::string_view s, ValueDataBuilder* builder) {\n+    const char* i = s.begin();\n+    const char* end = s.end();\n+    int64_t max_replacements = options.max_replacements;\n+    while ((i < end) && (max_replacements != 0)) {\n+      const char* pos =\n+          std::search(i, end, options.pattern.begin(), options.pattern.end());\n+      if (pos == end) {\n+        RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                      static_cast<offset_type>(end - i)));\n+        i = end;\n+      } else {\n+        // the string before the pattern\n+        RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                      static_cast<offset_type>(pos - i)));\n+        // the replacement\n+        RETURN_NOT_OK(\n+            builder->Append(reinterpret_cast<const uint8_t*>(options.replacement.data()),\n+                            options.replacement.length()));\n+        // skip pattern\n+        i = pos + options.pattern.length();\n+        max_replacements--;\n+      }\n+    }\n+    // if we exited early due to max_replacements, add the trailing part\n+    RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                  static_cast<offset_type>(end - i)));\n+    return Status::OK();\n+  }\n+};\n+\n+const FunctionDoc replace_substring_doc(\n+    \"Replace non-overlapping substrings that match pattern by replacement\",\n+    (\"For each string in `strings`, replace non-overlapping substrings that match\\n\"\n+     \"`pattern` by `replacement`. If `max_replacements != -1`, it determines the\\n\"\n+     \"maximum amount of replacements made, counting from the left. Null values emit\\n\"\n+     \"null.\"),\n+    {\"strings\"}, \"ReplaceSubstringOptions\");\n+\n+#ifdef ARROW_WITH_RE2\n+template <typename Type>\n+struct ReplaceSubStringRE2 : ReplaceSubStringBase<Type, ReplaceSubStringRE2<Type>> {\n+  using Base = ReplaceSubStringBase<Type, ReplaceSubStringRE2<Type>>;\n+  using ValueDataBuilder = typename Base::ValueDataBuilder;\n+  using offset_type = typename Base::offset_type;\n+\n+  ReplaceSubstringOptions options;\n+  RE2 regex_find;\n+  RE2 regex_replacement;\n+  explicit ReplaceSubStringRE2(KernelContext* ctx, ReplaceSubstringOptions options)\n+      : options(options),\n+        regex_find(\"(\" + options.pattern + \")\"),\n+        regex_replacement(options.pattern) {\n+    // Using RE2::FindAndConsume we can only find the pattern if it is a group, therefore\n+    // we have 2 regex, one with () around it, one without.\n+    if (!(regex_find.ok() && regex_replacement.ok())) {\n+      ctx->SetStatus(Status::Invalid(\"Regular expression error\"));\n+      return;\n+    }\n+  }\n+  Status ReplaceString(util::string_view s, ValueDataBuilder* builder) {\n+    re2::StringPiece replacement(options.replacement);\n+    if (options.max_replacements == -1) {\n+      std::string s_copy(s.to_string());\n+      re2::RE2::GlobalReplace(&s_copy, regex_replacement, replacement);\n+      RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(s_copy.data()),\n+                                    s_copy.length()));\n+      return Status::OK();\n+    }\n+    // Since RE2 does not have the concept of max_replacements, we have to do some work\n+    // ourselves.\n\nReview comment:\n       Note that the `GlobalReplace` loop works a bit differently, it calls `Match` then `Rewrite`, avoiding the duplicate matching calls. Not sure it's worth optimizing this, though:\r\n   https://github.com/google/re2/blob/master/re2/re2.cc#L427\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n+  using Base = ReplaceSubStringBase<Type, ReplaceSubString<Type>>;\n+  using ValueDataBuilder = typename Base::ValueDataBuilder;\n+  using offset_type = typename Base::offset_type;\n+\n+  ReplaceSubstringOptions options;\n+  explicit ReplaceSubString(KernelContext* ctx, ReplaceSubstringOptions options)\n+      : options(options) {}\n+\n+  Status ReplaceString(util::string_view s, ValueDataBuilder* builder) {\n+    const char* i = s.begin();\n+    const char* end = s.end();\n+    int64_t max_replacements = options.max_replacements;\n+    while ((i < end) && (max_replacements != 0)) {\n+      const char* pos =\n+          std::search(i, end, options.pattern.begin(), options.pattern.end());\n+      if (pos == end) {\n+        RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                      static_cast<offset_type>(end - i)));\n+        i = end;\n+      } else {\n+        // the string before the pattern\n+        RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                      static_cast<offset_type>(pos - i)));\n+        // the replacement\n+        RETURN_NOT_OK(\n+            builder->Append(reinterpret_cast<const uint8_t*>(options.replacement.data()),\n+                            options.replacement.length()));\n+        // skip pattern\n+        i = pos + options.pattern.length();\n+        max_replacements--;\n+      }\n+    }\n+    // if we exited early due to max_replacements, add the trailing part\n+    RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                  static_cast<offset_type>(end - i)));\n+    return Status::OK();\n+  }\n+};\n+\n+const FunctionDoc replace_substring_doc(\n+    \"Replace non-overlapping substrings that match pattern by replacement\",\n+    (\"For each string in `strings`, replace non-overlapping substrings that match\\n\"\n+     \"`pattern` by `replacement`. If `max_replacements != -1`, it determines the\\n\"\n+     \"maximum amount of replacements made, counting from the left. Null values emit\\n\"\n+     \"null.\"),\n+    {\"strings\"}, \"ReplaceSubstringOptions\");\n+\n+#ifdef ARROW_WITH_RE2\n+template <typename Type>\n+struct ReplaceSubStringRE2 : ReplaceSubStringBase<Type, ReplaceSubStringRE2<Type>> {\n\nReview comment:\n       Similarly as above, this looks basically independent from `Type`.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -416,6 +424,28 @@ TYPED_TEST(TestStringKernels, SplitWhitespaceUTF8Reverse) {\n                    &options_max);\n }\n \n+#ifdef ARROW_WITH_RE2\n+TYPED_TEST(TestStringKernels, ReplaceSubstringNormal) {\n+  ReplaceSubstringOptions options{\"foo\", \"bazz\"};\n+  this->CheckUnary(\"replace_substring\", R\"([\"foo\", \"this foo that foo\", null])\",\n+                   this->type(), R\"([\"bazz\", \"this bazz that bazz\", null])\", &options);\n+  ReplaceSubstringOptions options_regex{\"(fo+)\\\\s*\", \"\\\\1-bazz\", -1};\n+  this->CheckUnary(\"replace_substring_re2\", R\"([\"foo \", \"this foo   that foo\", null])\",\n+                   this->type(), R\"([\"foo-bazz\", \"this foo-bazzthat foo-bazz\", null])\",\n+                   &options_regex);\n\nReview comment:\n       Can you add a test with potential tricky cases? For example `text=\"aaaaaa\", match=\"(a.a)\", replacement=\"ab\\1\"`.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -355,19 +355,23 @@ The third set of functions examines string elements on a byte-per-byte basis:\n String transforms\n ~~~~~~~~~~~~~~~~~\n \n-+--------------------------+------------+-------------------------+---------------------+---------+\n-| Function name            | Arity      | Input types             | Output type         | Notes   |\n-+==========================+============+=========================+=====================+=========+\n-| ascii_lower              | Unary      | String-like             | String-like         | \\(1)    |\n-+--------------------------+------------+-------------------------+---------------------+---------+\n-| ascii_upper              | Unary      | String-like             | String-like         | \\(1)    |\n-+--------------------------+------------+-------------------------+---------------------+---------+\n-| binary_length            | Unary      | Binary- or String-like  | Int32 or Int64      | \\(2)    |\n-+--------------------------+------------+-------------------------+---------------------+---------+\n-| utf8_lower               | Unary      | String-like             | String-like         | \\(3)    |\n-+--------------------------+------------+-------------------------+---------------------+---------+\n-| utf8_upper               | Unary      | String-like             | String-like         | \\(3)    |\n-+--------------------------+------------+-------------------------+---------------------+---------+\n++--------------------------+------------+-------------------------+---------------------+-------------------------------------------------+\n+| Function name            | Arity      | Input types             | Output type         | Notes   | Options class                         |\n++==========================+============+=========================+=====================+=========+=======================================+\n+| ascii_lower              | Unary      | String-like             | String-like         | \\(1)    |                                       |\n++--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n+| ascii_upper              | Unary      | String-like             | String-like         | \\(1)    |                                       |\n++--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n+| binary_length            | Unary      | Binary- or String-like  | Int32 or Int64      | \\(2)    |                                       |\n++--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n+| replace_substring        | Unary      | String-like             | String-like         | \\(3)    | :struct:`ReplaceSubstringOptions`     |\n++--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n+| replace_substring_re2    | Unary      | String-like             | String-like         | \\(4)    | :struct:`ReplaceSubstringOptions`     |\n\nReview comment:\n       Please don't put \"re2\" in any of the public names or APIs. Using the re2 library is just an implementation detail.\r\n   \"replace_regex\" sounds just as good.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T17:57:48.108+0000",
                    "updated": "2020-11-26T17:57:48.108+0000",
                    "started": "2020-11-26T17:57:48.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "517139",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/525890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on a change in pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#discussion_r545637801\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n\nReview comment:\n       Maybe I misunderstand, but via `offset_type` we are not independent of `Type` right?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T08:12:25.705+0000",
                    "updated": "2020-12-18T08:12:25.705+0000",
                    "started": "2020-12-18T08:12:25.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "525890",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/526002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on a change in pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#discussion_r545869942\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n+  using Base = ReplaceSubStringBase<Type, ReplaceSubString<Type>>;\n+  using ValueDataBuilder = typename Base::ValueDataBuilder;\n+  using offset_type = typename Base::offset_type;\n+\n+  ReplaceSubstringOptions options;\n+  explicit ReplaceSubString(KernelContext* ctx, ReplaceSubstringOptions options)\n+      : options(options) {}\n+\n+  Status ReplaceString(util::string_view s, ValueDataBuilder* builder) {\n+    const char* i = s.begin();\n+    const char* end = s.end();\n+    int64_t max_replacements = options.max_replacements;\n+    while ((i < end) && (max_replacements != 0)) {\n+      const char* pos =\n+          std::search(i, end, options.pattern.begin(), options.pattern.end());\n+      if (pos == end) {\n+        RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                      static_cast<offset_type>(end - i)));\n+        i = end;\n+      } else {\n+        // the string before the pattern\n+        RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                      static_cast<offset_type>(pos - i)));\n+        // the replacement\n+        RETURN_NOT_OK(\n+            builder->Append(reinterpret_cast<const uint8_t*>(options.replacement.data()),\n+                            options.replacement.length()));\n+        // skip pattern\n+        i = pos + options.pattern.length();\n+        max_replacements--;\n+      }\n+    }\n+    // if we exited early due to max_replacements, add the trailing part\n+    RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(i),\n+                                  static_cast<offset_type>(end - i)));\n+    return Status::OK();\n+  }\n+};\n+\n+const FunctionDoc replace_substring_doc(\n+    \"Replace non-overlapping substrings that match pattern by replacement\",\n+    (\"For each string in `strings`, replace non-overlapping substrings that match\\n\"\n+     \"`pattern` by `replacement`. If `max_replacements != -1`, it determines the\\n\"\n+     \"maximum amount of replacements made, counting from the left. Null values emit\\n\"\n+     \"null.\"),\n+    {\"strings\"}, \"ReplaceSubstringOptions\");\n+\n+#ifdef ARROW_WITH_RE2\n+template <typename Type>\n+struct ReplaceSubStringRE2 : ReplaceSubStringBase<Type, ReplaceSubStringRE2<Type>> {\n+  using Base = ReplaceSubStringBase<Type, ReplaceSubStringRE2<Type>>;\n+  using ValueDataBuilder = typename Base::ValueDataBuilder;\n+  using offset_type = typename Base::offset_type;\n+\n+  ReplaceSubstringOptions options;\n+  RE2 regex_find;\n+  RE2 regex_replacement;\n+  explicit ReplaceSubStringRE2(KernelContext* ctx, ReplaceSubstringOptions options)\n+      : options(options),\n+        regex_find(\"(\" + options.pattern + \")\"),\n+        regex_replacement(options.pattern) {\n+    // Using RE2::FindAndConsume we can only find the pattern if it is a group, therefore\n+    // we have 2 regex, one with () around it, one without.\n+    if (!(regex_find.ok() && regex_replacement.ok())) {\n+      ctx->SetStatus(Status::Invalid(\"Regular expression error\"));\n+      return;\n+    }\n+  }\n+  Status ReplaceString(util::string_view s, ValueDataBuilder* builder) {\n+    re2::StringPiece replacement(options.replacement);\n+    if (options.max_replacements == -1) {\n+      std::string s_copy(s.to_string());\n+      re2::RE2::GlobalReplace(&s_copy, regex_replacement, replacement);\n+      RETURN_NOT_OK(builder->Append(reinterpret_cast<const uint8_t*>(s_copy.data()),\n+                                    s_copy.length()));\n+      return Status::OK();\n+    }\n+    // Since RE2 does not have the concept of max_replacements, we have to do some work\n+    // ourselves.\n\nReview comment:\n       Good idea, I prefer to keep it as it is, I left a comment in the code so this doesn't get lost.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T14:37:06.228+0000",
                    "updated": "2020-12-18T14:37:06.228+0000",
                    "started": "2020-12-18T14:37:06.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526002",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/537811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-762854225\n\n\n   @maartenbreddels Is it ready for review again? Feel free to ping me.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-19T13:56:51.182+0000",
                    "updated": "2021-01-19T13:56:51.182+0000",
                    "started": "2021-01-19T13:56:51.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537811",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/537820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-762872492\n\n\n   @pitrou Yes, apart from an unanswered question this is ready for review \ud83d\udc4d \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-19T14:25:01.791+0000",
                    "updated": "2021-01-19T14:25:01.791+0000",
                    "started": "2021-01-19T14:25:01.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537820",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/537847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#discussion_r560240161\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n\nReview comment:\n       Well, I don't understand why `offset_type` is being used here. `ValueDataBuilder` is basically a `TypedBufferBuilder<uint8_t>`, it's used for building the string data, it doesn't deal with string offsets.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-19T15:00:16.539+0000",
                    "updated": "2021-01-19T15:00:16.539+0000",
                    "started": "2021-01-19T15:00:16.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537847",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/537860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on a change in pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#discussion_r560262935\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n\nReview comment:\n       Ok, yes, I see it now. I'm using `offset_type` in this class as well, which I shouldn't, I think that's what led me to this. This requires a bit of refactoring.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-19T15:28:27.847+0000",
                    "updated": "2021-01-19T15:28:27.847+0000",
                    "started": "2021-01-19T15:28:27.847+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "537860",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/565286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on a change in pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#discussion_r593128772\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n\nReview comment:\n       This pattern occurs more often in the file, I didn't realize this lead to slower compilation and probably larger binary sizes. I think it requires a refactor that is larger than this PR. Also, I won't have the time currently to do this. Can we merge this as is, and I'll open a Jira issue?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-12T12:14:35.965+0000",
                    "updated": "2021-03-12T12:14:35.965+0000",
                    "started": "2021-03-12T12:14:35.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "565286",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/565351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "maartenbreddels commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-797553590\n\n\n   @pitrou this is ready for review (assuming you agree with the above plan of doing a refactor later on)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-12T15:14:41.828+0000",
                    "updated": "2021-03-12T15:14:41.828+0000",
                    "started": "2021-03-12T15:14:41.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "565351",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/567704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#discussion_r596070474\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1194,6 +1198,197 @@ void AddSplit(FunctionRegistry* registry) {\n #endif\n }\n \n+// ----------------------------------------------------------------------\n+// replace substring\n+\n+template <typename Type, typename Derived>\n+struct ReplaceSubStringBase {\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+  using offset_type = typename Type::offset_type;\n+  using ValueDataBuilder = TypedBufferBuilder<uint8_t>;\n+  using OffsetBuilder = TypedBufferBuilder<offset_type>;\n+  using State = OptionsWrapper<ReplaceSubstringOptions>;\n+\n+  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    Derived derived(ctx, State::Get(ctx));\n+    if (ctx->status().ok()) {\n+      derived.Replace(ctx, batch, out);\n+    }\n+  }\n+  void Replace(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    std::shared_ptr<ValueDataBuilder> value_data_builder =\n+        std::make_shared<ValueDataBuilder>();\n+    std::shared_ptr<OffsetBuilder> offset_builder = std::make_shared<OffsetBuilder>();\n+\n+    if (batch[0].kind() == Datum::ARRAY) {\n+      // We already know how many strings we have, so we can use Reserve/UnsafeAppend\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Reserve(batch[0].array()->length));\n+\n+      const ArrayData& input = *batch[0].array();\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Append(0));  // offsets start at 0\n+      KERNEL_RETURN_IF_ERROR(\n+          ctx, VisitArrayDataInline<Type>(\n+                   input,\n+                   [&](util::string_view s) {\n+                     RETURN_NOT_OK(static_cast<Derived&>(*this).ReplaceString(\n+                         s, value_data_builder.get()));\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   },\n+                   [&]() {\n+                     // offset for null value\n+                     offset_builder->UnsafeAppend(\n+                         static_cast<offset_type>(value_data_builder->length()));\n+                     return Status::OK();\n+                   }));\n+      ArrayData* output = out->mutable_array();\n+      KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&output->buffers[2]));\n+      KERNEL_RETURN_IF_ERROR(ctx, offset_builder->Finish(&output->buffers[1]));\n+    } else {\n+      const auto& input = checked_cast<const ScalarType&>(*batch[0].scalar());\n+      auto result = std::make_shared<ScalarType>();\n+      if (input.is_valid) {\n+        util::string_view s = static_cast<util::string_view>(*input.value);\n+        KERNEL_RETURN_IF_ERROR(\n+            ctx, static_cast<Derived&>(*this).ReplaceString(s, value_data_builder.get()));\n+        KERNEL_RETURN_IF_ERROR(ctx, value_data_builder->Finish(&result->value));\n+        result->is_valid = true;\n+      }\n+      out->value = result;\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct ReplaceSubString : ReplaceSubStringBase<Type, ReplaceSubString<Type>> {\n\nReview comment:\n       Well, you don't need to refactor other kernels for now, but I suppose this one could easily be adapted, no? :-)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-17T14:28:56.850+0000",
                    "updated": "2021-03-17T14:28:56.850+0000",
                    "started": "2021-03-17T14:28:56.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "567704",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/571873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-806722446\n\n\n   (gentle ping here, would really like to see those PRs merged for 4.0 in April!)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T13:16:06.055+0000",
                    "updated": "2021-03-25T13:16:06.055+0000",
                    "started": "2021-03-25T13:16:06.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "571873",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/572001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-807095671\n\n\n   I'll rebase and update this PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T16:57:52.176+0000",
                    "updated": "2021-03-25T16:57:52.176+0000",
                    "started": "2021-03-25T16:57:52.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572001",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/572253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-807336839\n\n\n   Hmm, there's a re2 link error on RTools 3.5:\r\n   https://github.com/pitrou/arrow/runs/2195976671?check_suite_focus=true#step:12:178\r\n   \r\n   @nealrichardson \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T19:30:28.144+0000",
                    "updated": "2021-03-25T19:30:28.144+0000",
                    "started": "2021-03-25T19:30:28.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572253",
                    "issueId": "13335407"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/worklog/572340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8468:\nURL: https://github.com/apache/arrow/pull/8468#issuecomment-807541121\n\n\n   Haven't seen that before, and we've been building with re2 for months now. Maybe this is the first time we're building something that actually uses re2? It's possible that re2 needs a \"backport\" library built with the rtools3.5 toolchain; an immediate workaround could be to build with `-DRE2_SOURCE=BUNDLED` here, or to make `ARROW_WITH_RE2` conditional on the toolchain (like we do for `ARROW_S3` already). Given that we won't have to support the rtools3.5 toolchain after April or May, I'll try just turning it off here.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-25T21:39:11.133+0000",
                    "updated": "2021-03-25T21:39:11.133+0000",
                    "started": "2021-03-25T21:39:11.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "572340",
                    "issueId": "13335407"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@45a902d7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d3e9922[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@630ebb90[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7ae0d95a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55a38070[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5e8d4c9d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48c9bee7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@341f94ad[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7df6225e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@49ab70d9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c90c18d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4628e4e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Mar 26 02:17:30 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-26T02:17:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10306/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-10-14T12:33:10.000+0000",
        "updated": "2021-03-26T02:17:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Similar to [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.replace.html]\u00a0with a plain variant, and optionally a RE2 version.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add string replacement kernel ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335407/comment/17309086",
                    "id": "17309086",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 8468\n[https://github.com/apache/arrow/pull/8468]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-03-26T02:17:30.702+0000",
                    "updated": "2021-03-26T02:17:30.702+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0jp3s:",
        "customfield_12314139": null
    }
}