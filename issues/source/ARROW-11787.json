{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13361039",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039",
    "key": "ARROW-11787",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12614615",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12614615",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13375060",
                    "key": "ARROW-12540",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375060",
                    "fields": {
                        "summary": "[C++] Implement cast from date32[day] to utf8 ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12613734",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12613734",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13141283",
                    "key": "ARROW-2229",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13141283",
                    "fields": {
                        "summary": "[C++] Write CSV files from RecordBatch, Table",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jonkeane",
            "name": "jonkeane",
            "key": "jonkeane",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
            },
            "displayName": "Jonathan Keane",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11787/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/587845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic opened a new pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-23T13:39:12.748+0000",
                    "updated": "2021-04-23T13:39:12.748+0000",
                    "started": "2021-04-23T13:39:12.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "587845",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/587847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#issuecomment-825665513\n\n\n   https://issues.apache.org/jira/browse/ARROW-11787\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-23T13:39:39.759+0000",
                    "updated": "2021-04-23T13:39:39.759+0000",
                    "started": "2021-04-23T13:39:39.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "587847",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/591022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r623097697\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -408,6 +408,34 @@ CsvReadOptions$create <- function(use_threads = option_use_threads(),\n   )\n }\n \n+#' @title File writer options\n+#' @rdname CsvWriteOptions\n+#' @name CsvWriteOptions\n+#' @docType class\n+#' @usage NULL\n+#' @format NULL\n+#' @description `CsvReadOptions`, `CsvParseOptions`, `CsvConvertOptions`,\n\nReview comment:\n       This description doesn't look quite correct.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T14:39:02.064+0000",
                    "updated": "2021-04-29T14:39:02.064+0000",
                    "started": "2021-04-29T14:39:02.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591022",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/591059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r623135520\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n\nReview comment:\n       What happens if you remove this and pass a negative batch size?\n\n##########\nFile path: r/tests/testthat/test-csv.R\n##########\n@@ -15,13 +15,101 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-context(\"CsvTableReader\")\n-\n # Not all types round trip via CSV 100% identical by default\n tbl <- example_data[, c(\"dbl\", \"lgl\", \"false\", \"chr\")]\n+tbl_no_dates <- tbl\n # Add a date to test its parsing\n tbl$date <- Sys.Date() + 1:10\n \n+csv_file <- tempfile()\n+\n+test_that(\"Write a CSV file with header\", {\n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl)\n+})\n+\n+\n+test_that(\"Write a CSV file with no header\", {\n+  \n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl_no_dates\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\", \"f4\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+})\n+\n+test_that(\"Write a CSV file with different batch sizes\", {\n\nReview comment:\n       What is this testing? What does batch_size do? It doesn't look like there is an observable difference in the output.\n\n##########\nFile path: r/tests/testthat/test-csv.R\n##########\n@@ -15,13 +15,101 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-context(\"CsvTableReader\")\n-\n # Not all types round trip via CSV 100% identical by default\n tbl <- example_data[, c(\"dbl\", \"lgl\", \"false\", \"chr\")]\n+tbl_no_dates <- tbl\n # Add a date to test its parsing\n tbl$date <- Sys.Date() + 1:10\n \n+csv_file <- tempfile()\n+\n+test_that(\"Write a CSV file with header\", {\n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl)\n+})\n+\n+\n+test_that(\"Write a CSV file with no header\", {\n+  \n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl_no_dates\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\", \"f4\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+})\n+\n+test_that(\"Write a CSV file with different batch sizes\", {\n+  \n+  tbl_out1 <- write_csv_arrow(tbl_no_dates, csv_file, batch_size = 1)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out1, tbl_no_dates)\n+  tbl_in1 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in1, tbl_no_dates)\n+  \n+  tbl_out2 <- write_csv_arrow(tbl_no_dates, csv_file, batch_size = 2)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out2, tbl_no_dates)\n+  tbl_in2 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in2, tbl_no_dates)\n+  \n+  tbl_out3 <- write_csv_arrow(tbl_no_dates, csv_file, batch_size = 12)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out3, tbl_no_dates)\n+  tbl_in3 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in3, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out1 <- write_csv_arrow(tbl, csv_file, batch_size = 1)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out1, tbl)\n+  tbl_in1 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in1, tbl)\n+  \n+  tbl_out2 <- write_csv_arrow(tbl, csv_file, batch_size = 2)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out2, tbl)\n+  tbl_in2 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in2, tbl)\n+  \n+  tbl_out3 <- write_csv_arrow(tbl, csv_file, batch_size = 12)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out3, tbl)\n+  tbl_in3 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in3, tbl)\n+  \n+})\n+\n+\n\nReview comment:\n       You should add tests for handling bad inputs too. Also might make more sense to put the writing tests at the bottom of the test file instead of the top.\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n+  assert_that(length(include_header) == 1)\n+  assert_that(is.logical(include_header))\n+  \n+  write_options = CsvWriteOptions$create(include_header, batch_size)\n+  \n+  x_out <- x\n+  if (is.data.frame(x)) {\n+    x <- Table$create(x)\n+  }\n+  \n+  assert_is(x, c(\"Table\", \"RecordBatch\"))\n\nReview comment:\n       ```suggestion\r\n     assert_is(x, \"ArrowTabular\")\r\n   ```\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n+  assert_that(length(include_header) == 1)\n+  assert_that(is.logical(include_header))\n+  \n+  write_options = CsvWriteOptions$create(include_header, batch_size)\n\nReview comment:\n       ```suggestion\r\n     write_options <- CsvWriteOptions$create(include_header, batch_size)\r\n   ```\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n+  assert_that(length(include_header) == 1)\n+  assert_that(is.logical(include_header))\n\nReview comment:\n       What happens if you remove these--will the C++ static typing validate this enough?\r\n   \r\n   What happens if `include_header = NA`?\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n\nReview comment:\n       Looks like indentation is slightly off here\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -408,6 +408,34 @@ CsvReadOptions$create <- function(use_threads = option_use_threads(),\n   )\n }\n \n+#' @title File writer options\n+#' @rdname CsvWriteOptions\n+#' @name CsvWriteOptions\n+#' @docType class\n+#' @usage NULL\n+#' @format NULL\n+#' @description `CsvReadOptions`, `CsvParseOptions`, `CsvConvertOptions`,\n\nReview comment:\n       An alternative to documenting this here (and cleaning up the bad copy-paste) would be to document it with `CsvReadOptions` et al.\n\n##########\nFile path: r/tests/testthat/test-csv.R\n##########\n@@ -15,13 +15,101 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-context(\"CsvTableReader\")\n-\n # Not all types round trip via CSV 100% identical by default\n tbl <- example_data[, c(\"dbl\", \"lgl\", \"false\", \"chr\")]\n+tbl_no_dates <- tbl\n # Add a date to test its parsing\n tbl$date <- Sys.Date() + 1:10\n \n+csv_file <- tempfile()\n+\n+test_that(\"Write a CSV file with header\", {\n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl)\n+})\n+\n+\n+test_that(\"Write a CSV file with no header\", {\n+  \n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl_no_dates\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n\nReview comment:\n       I don't think you need to test the file-with-dates in every combination of parameters, just the first one is sufficient.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T15:05:10.728+0000",
                    "updated": "2021-04-29T15:05:10.728+0000",
                    "started": "2021-04-29T15:05:10.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591059",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/591664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r624049352\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n\nReview comment:\n       I get the below error.  Shall I remove the assertion as it'd handled at the C++ level, or leave it in as it's a cleaner error message with `assert_that`?\r\n   \r\n   ```\r\n   Error: Invalid: Negative buffer resize: -40\r\n   /home/nic2/arrow/cpp/src/arrow/buffer.cc:262  buffer->Resize(size)\r\n   /home/nic2/arrow/cpp/src/arrow/csv/writer.cc:337  AllocateResizableBuffer( options.batch_size * schema_->num_fields() * kColumnSizeGuess, pool_)\r\n   /home/nic2/arrow/cpp/src/arrow/csv/writer.cc:315  PrepareForContentsWrite(options, out)\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-30T17:35:49.044+0000",
                    "updated": "2021-04-30T17:35:49.044+0000",
                    "started": "2021-04-30T17:35:49.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591664",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/591665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r624050250\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n+  assert_that(length(include_header) == 1)\n+  assert_that(is.logical(include_header))\n\nReview comment:\n       Removed those as totally sensible errors from the C++ as you say.  If `include_header = NA` with the `assert_that` removed, no header is written.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-30T17:37:12.447+0000",
                    "updated": "2021-04-30T17:37:12.447+0000",
                    "started": "2021-04-30T17:37:12.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591665",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/591666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r624051995\n\n\n\n##########\nFile path: r/tests/testthat/test-csv.R\n##########\n@@ -15,13 +15,101 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-context(\"CsvTableReader\")\n-\n # Not all types round trip via CSV 100% identical by default\n tbl <- example_data[, c(\"dbl\", \"lgl\", \"false\", \"chr\")]\n+tbl_no_dates <- tbl\n # Add a date to test its parsing\n tbl$date <- Sys.Date() + 1:10\n \n+csv_file <- tempfile()\n+\n+test_that(\"Write a CSV file with header\", {\n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl)\n+})\n+\n+\n+test_that(\"Write a CSV file with no header\", {\n+  \n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl_no_dates\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n\nReview comment:\n       Agreed - updated.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-30T17:40:19.338+0000",
                    "updated": "2021-04-30T17:40:19.338+0000",
                    "started": "2021-04-30T17:40:19.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591666",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/591957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r624618628\n\n\n\n##########\nFile path: r/tests/testthat/test-csv.R\n##########\n@@ -15,13 +15,101 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-context(\"CsvTableReader\")\n-\n # Not all types round trip via CSV 100% identical by default\n tbl <- example_data[, c(\"dbl\", \"lgl\", \"false\", \"chr\")]\n+tbl_no_dates <- tbl\n # Add a date to test its parsing\n tbl$date <- Sys.Date() + 1:10\n \n+csv_file <- tempfile()\n+\n+test_that(\"Write a CSV file with header\", {\n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl)\n+})\n+\n+\n+test_that(\"Write a CSV file with no header\", {\n+  \n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl_no_dates\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\", \"f4\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+})\n+\n+test_that(\"Write a CSV file with different batch sizes\", {\n\nReview comment:\n       batch size dictates how much data is buffered when translating to CSV\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-02T05:09:40.640+0000",
                    "updated": "2021-05-02T05:09:40.640+0000",
                    "started": "2021-05-02T05:09:40.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591957",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592137",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r625049722\n\n\n\n##########\nFile path: r/tests/testthat/test-csv.R\n##########\n@@ -15,13 +15,101 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-context(\"CsvTableReader\")\n-\n # Not all types round trip via CSV 100% identical by default\n tbl <- example_data[, c(\"dbl\", \"lgl\", \"false\", \"chr\")]\n+tbl_no_dates <- tbl\n # Add a date to test its parsing\n tbl$date <- Sys.Date() + 1:10\n \n+csv_file <- tempfile()\n+\n+test_that(\"Write a CSV file with header\", {\n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl)\n+})\n+\n+\n+test_that(\"Write a CSV file with no header\", {\n+  \n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl_no_dates\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\", \"f4\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+})\n+\n+test_that(\"Write a CSV file with different batch sizes\", {\n\nReview comment:\n       So the output will be the same, but what's happening internally will be different.  I included it as I wanted to make sure I could pass through the param, but I guess it's C++ functionality.  Should I remove the tests for the different batch sizes and just make sure I can pass through the param once?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T12:25:53.595+0000",
                    "updated": "2021-05-03T12:25:53.595+0000",
                    "started": "2021-05-03T12:25:53.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592137",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r625050069\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n+  assert_that(length(include_header) == 1)\n+  assert_that(is.logical(include_header))\n+  \n+  write_options = CsvWriteOptions$create(include_header, batch_size)\n+  \n+  x_out <- x\n+  if (is.data.frame(x)) {\n+    x <- Table$create(x)\n+  }\n+  \n+  assert_is(x, c(\"Table\", \"RecordBatch\"))\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T12:26:36.874+0000",
                    "updated": "2021-05-03T12:26:36.874+0000",
                    "started": "2021-05-03T12:26:36.873+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592138",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r625050158\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n+                          include_header = TRUE,\n+                          batch_size = 1024L\n+                          ) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n+  assert_that(length(include_header) == 1)\n+  assert_that(is.logical(include_header))\n+  \n+  write_options = CsvWriteOptions$create(include_header, batch_size)\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T12:26:50.047+0000",
                    "updated": "2021-05-03T12:26:50.047+0000",
                    "started": "2021-05-03T12:26:50.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592139",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r625050418\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +613,55 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                          sink,\n\nReview comment:\n       Updated now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T12:27:24.460+0000",
                    "updated": "2021-05-03T12:27:24.460+0000",
                    "started": "2021-05-03T12:27:24.459+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592141",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r625050850\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -408,6 +408,34 @@ CsvReadOptions$create <- function(use_threads = option_use_threads(),\n   )\n }\n \n+#' @title File writer options\n+#' @rdname CsvWriteOptions\n+#' @name CsvWriteOptions\n+#' @docType class\n+#' @usage NULL\n+#' @format NULL\n+#' @description `CsvReadOptions`, `CsvParseOptions`, `CsvConvertOptions`,\n\nReview comment:\n       Updated now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T12:28:19.942+0000",
                    "updated": "2021-05-03T12:28:19.942+0000",
                    "started": "2021-05-03T12:28:19.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592142",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r625079599\n\n\n\n##########\nFile path: r/tests/testthat/test-csv.R\n##########\n@@ -15,13 +15,101 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-context(\"CsvTableReader\")\n-\n # Not all types round trip via CSV 100% identical by default\n tbl <- example_data[, c(\"dbl\", \"lgl\", \"false\", \"chr\")]\n+tbl_no_dates <- tbl\n # Add a date to test its parsing\n tbl$date <- Sys.Date() + 1:10\n \n+csv_file <- tempfile()\n+\n+test_that(\"Write a CSV file with header\", {\n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  \n+  tbl_in <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in, tbl)\n+})\n+\n+\n+test_that(\"Write a CSV file with no header\", {\n+  \n+  tbl_out <- write_csv_arrow(tbl_no_dates, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl_no_dates)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl_no_dates\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out <- write_csv_arrow(tbl, csv_file, include_header = FALSE)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out, tbl)\n+  tbl_in <- read_csv_arrow(csv_file, col_names = FALSE)\n+  \n+  tbl_expected <- tbl\n+  names(tbl_expected) <- c(\"f0\", \"f1\", \"f2\", \"f3\", \"f4\")\n+  \n+  expect_identical(tbl_in, tbl_expected)\n+})\n+\n+test_that(\"Write a CSV file with different batch sizes\", {\n+  \n+  tbl_out1 <- write_csv_arrow(tbl_no_dates, csv_file, batch_size = 1)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out1, tbl_no_dates)\n+  tbl_in1 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in1, tbl_no_dates)\n+  \n+  tbl_out2 <- write_csv_arrow(tbl_no_dates, csv_file, batch_size = 2)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out2, tbl_no_dates)\n+  tbl_in2 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in2, tbl_no_dates)\n+  \n+  tbl_out3 <- write_csv_arrow(tbl_no_dates, csv_file, batch_size = 12)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out3, tbl_no_dates)\n+  tbl_in3 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in3, tbl_no_dates)\n+  \n+  skip(\"Doesn't yet work with date columns due to ARROW-12540\")\n+  \n+  tbl_out1 <- write_csv_arrow(tbl, csv_file, batch_size = 1)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out1, tbl)\n+  tbl_in1 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in1, tbl)\n+  \n+  tbl_out2 <- write_csv_arrow(tbl, csv_file, batch_size = 2)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out2, tbl)\n+  tbl_in2 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in2, tbl)\n+  \n+  tbl_out3 <- write_csv_arrow(tbl, csv_file, batch_size = 12)\n+  expect_true(file.exists(csv_file))\n+  expect_identical(tbl_out3, tbl)\n+  tbl_in3 <- read_csv_arrow(csv_file)\n+  expect_identical(tbl_in3, tbl)\n+  \n+})\n+\n+\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T13:19:52.089+0000",
                    "updated": "2021-05-03T13:19:52.089+0000",
                    "started": "2021-05-03T13:19:52.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592167",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141#discussion_r625288659\n\n\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -585,3 +602,52 @@ readr_to_csv_convert_options <- function(na,\n     include_columns = include_columns\n   )\n }\n+\n+#' Write CSV file to disk\n+#'\n+#' @param x `data.frame`, [RecordBatch], or [Table]\n+#' @param sink A string file path, URI, or [OutputStream], or path in a file\n+#' system (`SubTreeFileSystem`)\n+#' @param include_header Whether to write an initial header line with column names\n+#' @param batch_size Maximum number of rows processed at a time. Default is 1024.\n+#'\n+#' @return The input `x`, invisibly. Note that if `sink` is an [OutputStream],\n+#' the stream will be left open.\n+#' @export\n+#' @examples\n+#' \\donttest{\n+#' tf <- tempfile()\n+#' on.exit(unlink(tf))\n+#' write_csv_arrow(mtcars, tf)\n+#' }\n+#' @include arrow-package.R\n+write_csv_arrow <- function(x,\n+                            sink,\n+                            include_header = TRUE,\n+                            batch_size = 1024L) {\n+  # Handle and validate options before touching data\n+  batch_size <- as.integer(batch_size)\n+  assert_that(batch_size > 0)\n\nReview comment:\n       Let's move this to CsvWriteOptions$create(). I like to keep the input validation as close to the C++ call site as possible, just so that if someone uses the lower-level bindings, they still have protection from segfaults.\r\n   ```suggestion\r\n   ```\n\n##########\nFile path: r/R/csv.R\n##########\n@@ -408,6 +413,18 @@ CsvReadOptions$create <- function(use_threads = option_use_threads(),\n   )\n }\n \n+#' @rdname CsvReadOptions\n+#' @export\n+CsvWriteOptions <- R6Class(\"CsvWriteOptions\", inherit = ArrowObject)\n+CsvWriteOptions$create <- function(include_header = TRUE, batch_size = 1024L){\n+  csv___WriteOptions__initialize(\n+    list(\n+      include_header = include_header,\n+      batch_size = batch_size\n+    )\n+  )\n\nReview comment:\n       `rlang::is_integerish` can handle a few other validation cases we want (length 1, not missing):\r\n   \r\n   ```\r\n   > rlang::is_integerish(1:4)\r\n   [1] TRUE\r\n   > rlang::is_integerish(1:4, n = 1)\r\n   [1] FALSE\r\n   > rlang::is_integerish(NA_integer_)\r\n   [1] TRUE\r\n   > rlang::is_integerish(NA_integer_, finite = TRUE)\r\n   [1] FALSE\r\n   ```\r\n   \r\n   ```suggestion\r\n     assert_that(is_integerish(batch_size, n = 1, finite = TRUE), batch_size > 0)\r\n     csv___WriteOptions__initialize(\r\n       list(\r\n         include_header = include_header,\r\n         batch_size = as.integer(batch_size)\r\n       )\r\n     )\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-04T02:18:45.967+0000",
                    "updated": "2021-05-04T02:18:45.967+0000",
                    "started": "2021-05-04T02:18:45.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592528",
                    "issueId": "13361039"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/worklog/592806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #10141:\nURL: https://github.com/apache/arrow/pull/10141\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-04T15:40:10.691+0000",
                    "updated": "2021-05-04T15:40:10.691+0000",
                    "started": "2021-05-04T15:40:10.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592806",
                    "issueId": "13361039"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4b494ba5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5922024e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46563a3c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@faf60ca[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a6fa99b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@27598801[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50a9c10c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@247442e3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23500487[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4822896c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@561d90c5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5078a3bf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 04 15:40:00 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-05-04T15:40:00.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11787/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-02-25T19:39:24.000+0000",
        "updated": "2021-05-04T15:40:11.000+0000",
        "timeoriginalestimate": null,
        "description": "Now that ARROW-2229 has been completed, we can wire up R to use the c++ bindings to write csvs from tables and record batches\r\n\r\nhttps://github.com/apache/arrow/commit/9a9baf6824db91be2c0913367d4b151d9390a4e6#diff-d8b00a9202f9ae1ef6f2f113fec2e0f95f6287969317da520767738d690152d4R39-R44\r\n\r\nThere's a slight catch that it doesn't take shared_ptr so you have to *dereference them in the wrapper\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Implement write csv",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361039/comment/17339089",
                    "id": "17339089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10141\n[https://github.com/apache/arrow/pull/10141]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-05-04T15:40:00.960+0000",
                    "updated": "2021-05-04T15:40:00.960+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0o2o0:",
        "customfield_12314139": null
    }
}