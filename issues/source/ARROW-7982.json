{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13288928",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928",
    "key": "ARROW-7982",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7982/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/397685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535\n \n \n   Avoids the hassle of defining a dedicated struct with ArrayDataVisitor.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T16:50:42.060+0000",
                    "updated": "2020-03-04T16:50:42.060+0000",
                    "started": "2020-03-04T16:50:42.060+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397685",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/397686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#issuecomment-594656593\n \n \n   cc @bkietz \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T16:51:44.370+0000",
                    "updated": "2020-03-04T16:51:44.370+0000",
                    "started": "2020-03-04T16:51:44.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397686",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/397695",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#issuecomment-594663588\n \n \n   https://issues.apache.org/jira/browse/ARROW-7982\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-04T17:02:53.183+0000",
                    "updated": "2020-03-04T17:02:53.183+0000",
                    "started": "2020-03-04T17:02:53.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "397695",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388288072\n \n \n\n ##########\n File path: cpp/src/arrow/visitor_inline.h\n ##########\n @@ -17,8 +17,9 @@\n \n // Private header, not to be exported\n \n Review comment:\n   Also not for this PR:\r\n   I haven't noticed this comment before. This seems inaccurate, since we do install it (its name doesn't contain `_internal`)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T13:33:49.304+0000",
                    "updated": "2020-03-05T13:33:49.304+0000",
                    "started": "2020-03-05T13:33:49.304+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398365",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388281936\n \n \n\n ##########\n File path: cpp/src/arrow/util/functional.h\n ##########\n @@ -73,6 +73,10 @@ struct call_traits {\n \n   template <typename F>\n   using return_type = decltype(return_type_impl(&std::decay<F>::type::operator()));\n+\n+  template <typename F, typename T, typename RT = T>\n+  using enable_if_return_type =\n \n Review comment:\n   ```suggestion\r\n     using enable_if_return_type_is =\r\n   ```\r\n   ```suggestion\r\n     using enable_if_return =\r\n   ```\r\n   Purely because the `_type` suffix has the specific connotation of \"a metafunction which returns some type\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T13:33:49.400+0000",
                    "updated": "2020-03-05T13:33:49.400+0000",
                    "started": "2020-03-05T13:33:49.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398366",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388286100\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -295,59 +295,66 @@ class RegularHashKernelImpl : public HashKernelImpl {\n   }\n \n   template <bool HasError = with_error_status>\n-  enable_if_t<!HasError, Status> VisitNull() {\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveNullFound(memo_index); };\n-    auto on_not_found = [this](int32_t memo_index) {\n-      action_.ObserveNullNotFound(memo_index);\n-    };\n-\n-    if (with_memo_visit_null) {\n-      memo_table_->GetOrInsertNull(on_found, on_not_found);\n-    } else {\n-      action_.ObserveNullNotFound(-1);\n-    }\n-    return Status::OK();\n-  }\n-\n-  template <bool HasError = with_error_status>\n-  enable_if_t<HasError, Status> VisitNull() {\n-    Status s = Status::OK();\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this, &s](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index, &s);\n-    };\n-\n-    if (with_memo_visit_null) {\n-      memo_table_->GetOrInsertNull(on_found, on_not_found);\n-    } else {\n-      action_.ObserveNullNotFound(-1);\n-    }\n-\n-    return s;\n-  }\n-\n-  template <bool HasError = with_error_status>\n-  enable_if_t<!HasError, Status> VisitValue(const Scalar& value) {\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index);\n+  enable_if_t<!HasError, Status> DoAppend(const ArrayData& arr) {\n+    auto process_value = [this](util::optional<Scalar> v) {\n+      if (v.has_value()) {\n+        auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n+        auto on_not_found = [this](int32_t memo_index) {\n+          action_.ObserveNotFound(memo_index);\n+        };\n+\n+        int32_t unused_memo_index;\n+        return memo_table_->GetOrInsert(*v, std::move(on_found), std::move(on_not_found),\n+                                        &unused_memo_index);\n+      } else {\n+        // Null\n+        if (with_memo_visit_null) {\n+          auto on_found = [this](int32_t memo_index) {\n+            action_.ObserveNullFound(memo_index);\n+          };\n+          auto on_not_found = [this](int32_t memo_index) {\n+            action_.ObserveNullNotFound(memo_index);\n+          };\n+          memo_table_->GetOrInsertNull(std::move(on_found), std::move(on_not_found));\n+        } else {\n+          action_.ObserveNullNotFound(-1);\n+        }\n+        return Status::OK();\n+      }\n     };\n-\n-    int32_t unused_memo_index;\n-    return memo_table_->GetOrInsert(value, on_found, on_not_found, &unused_memo_index);\n+    return VisitArrayDataInline<Type>(arr, std::move(process_value));\n   }\n \n   template <bool HasError = with_error_status>\n-  enable_if_t<HasError, Status> VisitValue(const Scalar& value) {\n-    Status s = Status::OK();\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this, &s](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index, &s);\n+  enable_if_t<HasError, Status> DoAppend(const ArrayData& arr) {\n+    auto process_value = [this](util::optional<Scalar> v) {\n+      Status s = Status::OK();\n+      if (v.has_value()) {\n+        auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n+        auto on_not_found = [this, &s](int32_t memo_index) {\n+          action_.ObserveNotFound(memo_index, &s);\n+        };\n+\n+        int32_t unused_memo_index;\n+        RETURN_NOT_OK(memo_table_->GetOrInsert(\n+            *v, std::move(on_found), std::move(on_not_found), &unused_memo_index));\n+      } else {\n+        // Null\n+        if (with_memo_visit_null) {\n \n Review comment:\n   Not necessary for this PR, but: should this branch be moved outside the hot loop? (Would necessitate two implementations of `process_value`)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T13:33:49.403+0000",
                    "updated": "2020-03-05T13:33:49.403+0000",
                    "started": "2020-03-05T13:33:49.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398367",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388292535\n \n \n\n ##########\n File path: cpp/src/arrow/visitor_inline.h\n ##########\n @@ -217,28 +266,68 @@ struct ArrayDataVisitor<T, enable_if_base_binary<T>> {\n         const bool is_null = valid_reader.IsNotSet();\n         valid_reader.Next();\n         if (is_null) {\n-          ARROW_RETURN_NOT_OK(visitor->VisitNull());\n+          ARROW_RETURN_NOT_OK(func(util::optional<util::string_view>()));\n         } else {\n           auto value = util::string_view(reinterpret_cast<const char*>(data + offsets[i]),\n                                          offsets[i + 1] - offsets[i]);\n-          ARROW_RETURN_NOT_OK(visitor->VisitValue(value));\n+          ARROW_RETURN_NOT_OK(func(util::optional<util::string_view>(value)));\n         }\n       }\n     } else {\n       for (int64_t i = 0; i < arr.length; ++i) {\n         auto value = util::string_view(reinterpret_cast<const char*>(data + offsets[i]),\n                                        offsets[i + 1] - offsets[i]);\n-        ARROW_RETURN_NOT_OK(visitor->VisitValue(value));\n+        ARROW_RETURN_NOT_OK(func(util::optional<util::string_view>(value)));\n       }\n     }\n     return Status::OK();\n   }\n+\n+  template <typename VisitFunc>\n+  static void VisitVoid(const ArrayData& arr, VisitFunc&& func) {\n+    using offset_type = typename T::offset_type;\n+    constexpr uint8_t empty_value = 0;\n+\n+    const offset_type* offsets = arr.GetValues<offset_type>(1);\n+    const uint8_t* data;\n+    if (!arr.buffers[2]) {\n+      data = &empty_value;\n+    } else {\n+      // Do not use array offset here, as the sliced offsets array refers\n+      // to the non-sliced values array.\n \n Review comment:\n   ```suggestion\r\n         // Do not apply the array offset to the values array; the value_offsets\r\n         // index the non-sliced values array.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T13:33:49.479+0000",
                    "updated": "2020-03-05T13:33:49.479+0000",
                    "started": "2020-03-05T13:33:49.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398368",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388425098\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -295,59 +295,66 @@ class RegularHashKernelImpl : public HashKernelImpl {\n   }\n \n   template <bool HasError = with_error_status>\n-  enable_if_t<!HasError, Status> VisitNull() {\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveNullFound(memo_index); };\n-    auto on_not_found = [this](int32_t memo_index) {\n-      action_.ObserveNullNotFound(memo_index);\n-    };\n-\n-    if (with_memo_visit_null) {\n-      memo_table_->GetOrInsertNull(on_found, on_not_found);\n-    } else {\n-      action_.ObserveNullNotFound(-1);\n-    }\n-    return Status::OK();\n-  }\n-\n-  template <bool HasError = with_error_status>\n-  enable_if_t<HasError, Status> VisitNull() {\n-    Status s = Status::OK();\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this, &s](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index, &s);\n-    };\n-\n-    if (with_memo_visit_null) {\n-      memo_table_->GetOrInsertNull(on_found, on_not_found);\n-    } else {\n-      action_.ObserveNullNotFound(-1);\n-    }\n-\n-    return s;\n-  }\n-\n-  template <bool HasError = with_error_status>\n-  enable_if_t<!HasError, Status> VisitValue(const Scalar& value) {\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index);\n+  enable_if_t<!HasError, Status> DoAppend(const ArrayData& arr) {\n+    auto process_value = [this](util::optional<Scalar> v) {\n+      if (v.has_value()) {\n+        auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n+        auto on_not_found = [this](int32_t memo_index) {\n+          action_.ObserveNotFound(memo_index);\n+        };\n+\n+        int32_t unused_memo_index;\n+        return memo_table_->GetOrInsert(*v, std::move(on_found), std::move(on_not_found),\n+                                        &unused_memo_index);\n+      } else {\n+        // Null\n+        if (with_memo_visit_null) {\n+          auto on_found = [this](int32_t memo_index) {\n+            action_.ObserveNullFound(memo_index);\n+          };\n+          auto on_not_found = [this](int32_t memo_index) {\n+            action_.ObserveNullNotFound(memo_index);\n+          };\n+          memo_table_->GetOrInsertNull(std::move(on_found), std::move(on_not_found));\n+        } else {\n+          action_.ObserveNullNotFound(-1);\n+        }\n+        return Status::OK();\n+      }\n     };\n-\n-    int32_t unused_memo_index;\n-    return memo_table_->GetOrInsert(value, on_found, on_not_found, &unused_memo_index);\n+    return VisitArrayDataInline<Type>(arr, std::move(process_value));\n   }\n \n   template <bool HasError = with_error_status>\n-  enable_if_t<HasError, Status> VisitValue(const Scalar& value) {\n-    Status s = Status::OK();\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this, &s](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index, &s);\n+  enable_if_t<HasError, Status> DoAppend(const ArrayData& arr) {\n+    auto process_value = [this](util::optional<Scalar> v) {\n+      Status s = Status::OK();\n+      if (v.has_value()) {\n+        auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n+        auto on_not_found = [this, &s](int32_t memo_index) {\n+          action_.ObserveNotFound(memo_index, &s);\n+        };\n+\n+        int32_t unused_memo_index;\n+        RETURN_NOT_OK(memo_table_->GetOrInsert(\n+            *v, std::move(on_found), std::move(on_not_found), &unused_memo_index));\n+      } else {\n+        // Null\n+        if (with_memo_visit_null) {\n \n Review comment:\n   Since this is a compile-time constant, ideally, the C++ should be able to optimize it away. Of course that's in theory, and perhaps the optimization chain makes it lose opportunities...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:52:21.169+0000",
                    "updated": "2020-03-05T16:52:21.169+0000",
                    "started": "2020-03-05T16:52:21.169+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398490",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388425098\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -295,59 +295,66 @@ class RegularHashKernelImpl : public HashKernelImpl {\n   }\n \n   template <bool HasError = with_error_status>\n-  enable_if_t<!HasError, Status> VisitNull() {\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveNullFound(memo_index); };\n-    auto on_not_found = [this](int32_t memo_index) {\n-      action_.ObserveNullNotFound(memo_index);\n-    };\n-\n-    if (with_memo_visit_null) {\n-      memo_table_->GetOrInsertNull(on_found, on_not_found);\n-    } else {\n-      action_.ObserveNullNotFound(-1);\n-    }\n-    return Status::OK();\n-  }\n-\n-  template <bool HasError = with_error_status>\n-  enable_if_t<HasError, Status> VisitNull() {\n-    Status s = Status::OK();\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this, &s](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index, &s);\n-    };\n-\n-    if (with_memo_visit_null) {\n-      memo_table_->GetOrInsertNull(on_found, on_not_found);\n-    } else {\n-      action_.ObserveNullNotFound(-1);\n-    }\n-\n-    return s;\n-  }\n-\n-  template <bool HasError = with_error_status>\n-  enable_if_t<!HasError, Status> VisitValue(const Scalar& value) {\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index);\n+  enable_if_t<!HasError, Status> DoAppend(const ArrayData& arr) {\n+    auto process_value = [this](util::optional<Scalar> v) {\n+      if (v.has_value()) {\n+        auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n+        auto on_not_found = [this](int32_t memo_index) {\n+          action_.ObserveNotFound(memo_index);\n+        };\n+\n+        int32_t unused_memo_index;\n+        return memo_table_->GetOrInsert(*v, std::move(on_found), std::move(on_not_found),\n+                                        &unused_memo_index);\n+      } else {\n+        // Null\n+        if (with_memo_visit_null) {\n+          auto on_found = [this](int32_t memo_index) {\n+            action_.ObserveNullFound(memo_index);\n+          };\n+          auto on_not_found = [this](int32_t memo_index) {\n+            action_.ObserveNullNotFound(memo_index);\n+          };\n+          memo_table_->GetOrInsertNull(std::move(on_found), std::move(on_not_found));\n+        } else {\n+          action_.ObserveNullNotFound(-1);\n+        }\n+        return Status::OK();\n+      }\n     };\n-\n-    int32_t unused_memo_index;\n-    return memo_table_->GetOrInsert(value, on_found, on_not_found, &unused_memo_index);\n+    return VisitArrayDataInline<Type>(arr, std::move(process_value));\n   }\n \n   template <bool HasError = with_error_status>\n-  enable_if_t<HasError, Status> VisitValue(const Scalar& value) {\n-    Status s = Status::OK();\n-    auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n-    auto on_not_found = [this, &s](int32_t memo_index) {\n-      action_.ObserveNotFound(memo_index, &s);\n+  enable_if_t<HasError, Status> DoAppend(const ArrayData& arr) {\n+    auto process_value = [this](util::optional<Scalar> v) {\n+      Status s = Status::OK();\n+      if (v.has_value()) {\n+        auto on_found = [this](int32_t memo_index) { action_.ObserveFound(memo_index); };\n+        auto on_not_found = [this, &s](int32_t memo_index) {\n+          action_.ObserveNotFound(memo_index, &s);\n+        };\n+\n+        int32_t unused_memo_index;\n+        RETURN_NOT_OK(memo_table_->GetOrInsert(\n+            *v, std::move(on_found), std::move(on_not_found), &unused_memo_index));\n+      } else {\n+        // Null\n+        if (with_memo_visit_null) {\n \n Review comment:\n   Since this is a compile-time constant, ideally, the C++ compiler should be able to optimize it away. Of course that's in theory, and perhaps the optimization chain makes it lose opportunities...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:52:29.404+0000",
                    "updated": "2020-03-05T16:52:29.404+0000",
                    "started": "2020-03-05T16:52:29.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398491",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388425969\n \n \n\n ##########\n File path: cpp/src/arrow/visitor_inline.h\n ##########\n @@ -217,28 +266,68 @@ struct ArrayDataVisitor<T, enable_if_base_binary<T>> {\n         const bool is_null = valid_reader.IsNotSet();\n         valid_reader.Next();\n         if (is_null) {\n-          ARROW_RETURN_NOT_OK(visitor->VisitNull());\n+          ARROW_RETURN_NOT_OK(func(util::optional<util::string_view>()));\n         } else {\n           auto value = util::string_view(reinterpret_cast<const char*>(data + offsets[i]),\n                                          offsets[i + 1] - offsets[i]);\n-          ARROW_RETURN_NOT_OK(visitor->VisitValue(value));\n+          ARROW_RETURN_NOT_OK(func(util::optional<util::string_view>(value)));\n         }\n       }\n     } else {\n       for (int64_t i = 0; i < arr.length; ++i) {\n         auto value = util::string_view(reinterpret_cast<const char*>(data + offsets[i]),\n                                        offsets[i + 1] - offsets[i]);\n-        ARROW_RETURN_NOT_OK(visitor->VisitValue(value));\n+        ARROW_RETURN_NOT_OK(func(util::optional<util::string_view>(value)));\n       }\n     }\n     return Status::OK();\n   }\n+\n+  template <typename VisitFunc>\n+  static void VisitVoid(const ArrayData& arr, VisitFunc&& func) {\n+    using offset_type = typename T::offset_type;\n+    constexpr uint8_t empty_value = 0;\n+\n+    const offset_type* offsets = arr.GetValues<offset_type>(1);\n+    const uint8_t* data;\n+    if (!arr.buffers[2]) {\n+      data = &empty_value;\n+    } else {\n+      // Do not use array offset here, as the sliced offsets array refers\n+      // to the non-sliced values array.\n \n Review comment:\n   Thanks, will apply your suggestion.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:53:38.020+0000",
                    "updated": "2020-03-05T16:53:38.020+0000",
                    "started": "2020-03-05T16:53:38.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398492",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#discussion_r388426068\n \n \n\n ##########\n File path: cpp/src/arrow/util/functional.h\n ##########\n @@ -73,6 +73,10 @@ struct call_traits {\n \n   template <typename F>\n   using return_type = decltype(return_type_impl(&std::decay<F>::type::operator()));\n+\n+  template <typename F, typename T, typename RT = T>\n+  using enable_if_return_type =\n \n Review comment:\n   Good point, will do.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:53:46.190+0000",
                    "updated": "2020-03-05T16:53:46.190+0000",
                    "started": "2020-03-05T16:53:46.190+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398493",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/398494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535#issuecomment-595334512\n \n \n   I believe I addressed your comments @bkietz .\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:56:08.053+0000",
                    "updated": "2020-03-05T16:56:08.053+0000",
                    "started": "2020-03-05T16:56:08.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398494",
                    "issueId": "13288928"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/worklog/400098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6535: ARROW-7982: [C++] Add function VisitArrayDataInline() helper\nURL: https://github.com/apache/arrow/pull/6535\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-09T13:23:25.022+0000",
                    "updated": "2020-03-09T13:23:25.022+0000",
                    "started": "2020-03-09T13:23:25.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "400098",
                    "issueId": "13288928"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@353edf0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ab8e140[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50bef46d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4d91bddb[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2807f213[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@11433ed4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3679ad0d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@76c6a17c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61c652dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@69fb65af[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1291bc58[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@511f3237[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 09 13:23:23 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-09T13:23:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7982/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-03-02T15:50:52.000+0000",
        "updated": "2020-03-09T13:23:25.000+0000",
        "timeoriginalestimate": null,
        "description": "It would be nice if {{ArrayDataVisitor}} accepted a visitor struct with void-returning (instead of Status-returning) methods. Always-ok Status may not be entirely optimized away by the compiler in some situations.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Let ArrayDataVisitor accept void-returning functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/comment/17049340",
                    "id": "17049340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~bkietz]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-03-02T15:50:59.042+0000",
                    "updated": "2020-03-02T15:50:59.042+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/comment/17049583",
                    "id": "17049583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Perhaps easier to make this a separate {{VisitArrayDataInline}} that takes a single callable taking a {{optional<T>}}.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-03-02T19:25:33.313+0000",
                    "updated": "2020-03-02T19:25:33.313+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/comment/17049685",
                    "id": "17049685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I had thought about this also. Might be simpler indeed to have a separately-named visitor without the Status checking",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-02T21:56:02.962+0000",
                    "updated": "2020-03-02T21:56:02.962+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288928/comment/17054953",
                    "id": "17054953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 6535\n[https://github.com/apache/arrow/pull/6535]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-03-09T13:23:23.853+0000",
                    "updated": "2020-03-09T13:23:23.853+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0c2ww:",
        "customfield_12314139": null
    }
}