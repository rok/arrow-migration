{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197013",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013",
    "key": "ARROW-3719",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3719/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/worklog/163806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #2918: ARROW-3719: [GLib] Support read/write table to/from Feather\nURL: https://github.com/apache/arrow/pull/2918\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T05:47:57.228+0000",
                    "updated": "2018-11-08T05:47:57.228+0000",
                    "started": "2018-11-08T05:47:57.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163806",
                    "issueId": "13197013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/worklog/163807",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2918: ARROW-3719: [GLib] Support read/write table to/from Feather\nURL: https://github.com/apache/arrow/pull/2918#issuecomment-436880960\n \n \n   @shiro615 Can you review this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T05:48:04.668+0000",
                    "updated": "2018-11-08T05:48:04.668+0000",
                    "started": "2018-11-08T05:48:04.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163807",
                    "issueId": "13197013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/worklog/163824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2918: ARROW-3719: [GLib] Support read/write table to/from Feather\nURL: https://github.com/apache/arrow/pull/2918#issuecomment-436888580\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=h1) Report\n   > Merging [#2918](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8e9cb870de0ecb126a0d7403f34e3a1ce119d618?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2918/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #2918      +/-   ##\n   =========================================\n   - Coverage    86.2%   86.2%   -0.01%     \n   =========================================\n     Files         485     485              \n     Lines       67999   67999              \n   =========================================\n   - Hits        58621   58618       -3     \n   - Misses       9284    9287       +3     \n     Partials       94      94\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/csv/column-builder.cc](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuY2M=) | `94.92% <0%> (-2.18%)` | :arrow_down: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=footer). Last update [8e9cb87...36c31f4](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T06:34:50.527+0000",
                    "updated": "2018-11-08T06:34:50.527+0000",
                    "started": "2018-11-08T06:34:50.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163824",
                    "issueId": "13197013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/worklog/163878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #2918: ARROW-3719: [GLib] Support read/write table to/from Feather\nURL: https://github.com/apache/arrow/pull/2918#discussion_r231859512\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -801,6 +801,92 @@ garrow_feather_file_reader_get_columns(GArrowFeatherFileReader *reader,\n   return g_list_reverse(columns);\n }\n \n+/**\n+ * garrow_feather_file_reader_read:\n+ * @reader: A #GArrowFeatherFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n \n Review comment:\n   typo? `locatipcn` => `location`\r\n   It seems to be using `locatipcn` in several places.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T11:54:23.730+0000",
                    "updated": "2018-11-08T11:54:23.730+0000",
                    "started": "2018-11-08T11:54:23.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163878",
                    "issueId": "13197013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/worklog/163938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #2918: ARROW-3719: [GLib] Support read/write table to/from Feather\nURL: https://github.com/apache/arrow/pull/2918#discussion_r231916081\n \n \n\n ##########\n File path: c_glib/arrow-glib/reader.cpp\n ##########\n @@ -801,6 +801,92 @@ garrow_feather_file_reader_get_columns(GArrowFeatherFileReader *reader,\n   return g_list_reverse(columns);\n }\n \n+/**\n+ * garrow_feather_file_reader_read:\n+ * @reader: A #GArrowFeatherFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n \n Review comment:\n   Good catch!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:47:26.907+0000",
                    "updated": "2018-11-08T14:47:26.907+0000",
                    "started": "2018-11-08T14:47:26.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163938",
                    "issueId": "13197013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/worklog/163954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2918: ARROW-3719: [GLib] Support read/write table to/from Feather\nURL: https://github.com/apache/arrow/pull/2918#issuecomment-436888580\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=h1) Report\n   > Merging [#2918](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8e9cb870de0ecb126a0d7403f34e3a1ce119d618?src=pr&el=desc) will **increase** coverage by `0.03%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2918/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2918      +/-   ##\n   ==========================================\n   + Coverage    86.2%   86.24%   +0.03%     \n   ==========================================\n     Files         485      485              \n     Lines       67999    68132     +133     \n   ==========================================\n   + Hits        58621    58760     +139     \n   + Misses       9284     9278       -6     \n     Partials       94       94\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/pretty\\_print-test.cc](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQtdGVzdC5jYw==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/expr\\_decomposer.h](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2V4cHJfZGVjb21wb3Nlci5o) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_plasma\\_tf\\_op.py](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wbGFzbWFfdGZfb3AucHk=) | `97.87% <0%> (+0.04%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_serialization.py](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9zZXJpYWxpemF0aW9uLnB5) | `90.39% <0%> (+0.08%)` | :arrow_up: |\n   | [python/pyarrow/serialization.pxi](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvc2VyaWFsaXphdGlvbi5weGk=) | `75.9% <0%> (+0.14%)` | :arrow_up: |\n   | [cpp/src/arrow/python/serialize.cc](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vc2VyaWFsaXplLmNj) | `89.95% <0%> (+0.3%)` | :arrow_up: |\n   | [cpp/src/arrow/python/deserialize.cc](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vZGVzZXJpYWxpemUuY2M=) | `91.7% <0%> (+0.49%)` | :arrow_up: |\n   | [cpp/src/arrow/pretty\\_print.cc](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9wcmV0dHlfcHJpbnQuY2M=) | `85.3% <0%> (+1.07%)` | :arrow_up: |\n   | [python/pyarrow/public-api.pxi](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcHVibGljLWFwaS5weGk=) | `55.07% <0%> (+2.89%)` | :arrow_up: |\n   | [python/pyarrow/serialization.py](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvc2VyaWFsaXphdGlvbi5weQ==) | `86.2% <0%> (+4.81%)` | :arrow_up: |\n   | ... and [1 more](https://codecov.io/gh/apache/arrow/pull/2918/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=footer). Last update [8e9cb87...5873f4e](https://codecov.io/gh/apache/arrow/pull/2918?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T15:47:58.500+0000",
                    "updated": "2018-11-08T15:47:58.500+0000",
                    "started": "2018-11-08T15:47:58.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163954",
                    "issueId": "13197013"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/worklog/164121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2918: ARROW-3719: [GLib] Support read/write table to/from Feather\nURL: https://github.com/apache/arrow/pull/2918\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/orc-file-reader.cpp b/c_glib/arrow-glib/orc-file-reader.cpp\nindex 87ba5637b4..5e2bf30fdd 100644\n--- a/c_glib/arrow-glib/orc-file-reader.cpp\n+++ b/c_glib/arrow-glib/orc-file-reader.cpp\n@@ -164,7 +164,7 @@ garrow_orc_file_reader_class_init(GArrowORCFileReaderClass *klass)\n /**\n  * garrow_orc_file_reader_new:\n  * @file: The file to be read.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable): A newly created #GArrowORCFileReader\n  *   or %NULL on error.\n@@ -245,7 +245,7 @@ garrow_orc_file_reader_get_field_indexes(GArrowORCFileReader *reader,\n /**\n  * garrow_orc_file_reader_read_type:\n  * @reader: A #GArrowORCFileReader.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full): A newly read type as\n  *   #GArrowSchema or %NULL on error.\n@@ -269,7 +269,7 @@ garrow_orc_file_reader_read_type(GArrowORCFileReader *reader,\n /**\n  * garrow_orc_file_reader_read_stripes:\n  * @reader: A #GArrowORCFileReader.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full): A newly read stripes as\n  *   #GArrowTable or %NULL on error.\n@@ -310,7 +310,7 @@ garrow_orc_file_reader_read_stripes(GArrowORCFileReader *reader,\n  * garrow_orc_file_reader_read_stripe:\n  * @reader: A #GArrowORCFileReader.\n  * @i: The stripe index to be read.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full): A newly read stripe as\n  *   #GArrowRecordBatch or %NULL on error.\ndiff --git a/c_glib/arrow-glib/reader.cpp b/c_glib/arrow-glib/reader.cpp\nindex f08e8f8bc2..296b911a6e 100644\n--- a/c_glib/arrow-glib/reader.cpp\n+++ b/c_glib/arrow-glib/reader.cpp\n@@ -161,7 +161,7 @@ garrow_record_batch_reader_get_schema(GArrowRecordBatchReader *reader)\n /**\n  * garrow_record_batch_reader_get_next_record_batch:\n  * @reader: A #GArrowRecordBatchReader.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full):\n  *   The next record batch in the stream or %NULL on end of stream.\n@@ -181,7 +181,7 @@ garrow_record_batch_reader_get_next_record_batch(GArrowRecordBatchReader *reader\n /**\n  * garrow_record_batch_reader_read_next_record_batch:\n  * @reader: A #GArrowRecordBatchReader.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full):\n  *   The next record batch in the stream or %NULL on end of stream.\n@@ -201,7 +201,7 @@ garrow_record_batch_reader_read_next_record_batch(GArrowRecordBatchReader *reade\n /**\n  * garrow_record_batch_reader_read_next:\n  * @reader: A #GArrowRecordBatchReader.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full):\n  *   The next record batch in the stream or %NULL on end of stream.\n@@ -279,7 +279,7 @@ garrow_record_batch_stream_reader_class_init(GArrowRecordBatchStreamReaderClass\n /**\n  * garrow_record_batch_stream_reader_new:\n  * @stream: The stream to be read.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable): A newly created #GArrowRecordBatchStreamReader\n  *   or %NULL on error.\n@@ -398,7 +398,7 @@ garrow_record_batch_file_reader_class_init(GArrowRecordBatchFileReaderClass *kla\n /**\n  * garrow_record_batch_file_reader_new:\n  * @file: The file to be read.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable): A newly created #GArrowRecordBatchFileReader\n  *   or %NULL on error.\n@@ -473,7 +473,7 @@ garrow_record_batch_file_reader_get_version(GArrowRecordBatchFileReader *reader)\n  * garrow_record_batch_file_reader_get_record_batch:\n  * @reader: A #GArrowRecordBatchFileReader.\n  * @i: The index of the target record batch.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full):\n  *   The i-th record batch in the file or %NULL on error.\n@@ -495,7 +495,7 @@ garrow_record_batch_file_reader_get_record_batch(GArrowRecordBatchFileReader *re\n  * garrow_record_batch_file_reader_read_record_batch:\n  * @reader: A #GArrowRecordBatchFileReader.\n  * @i: The index of the target record batch.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full):\n  *   The i-th record batch in the file or %NULL on error.\n@@ -535,9 +535,9 @@ G_DEFINE_TYPE_WITH_PRIVATE(GArrowFeatherFileReader,\n                            G_TYPE_OBJECT);\n \n #define GARROW_FEATHER_FILE_READER_GET_PRIVATE(obj)             \\\n-  (G_TYPE_INSTANCE_GET_PRIVATE((obj),                           \\\n-                               GARROW_TYPE_FEATHER_FILE_READER, \\\n-                               GArrowFeatherFileReaderPrivate))\n+  static_cast<GArrowFeatherFileReaderPrivate *>(                \\\n+    garrow_feather_file_reader_get_instance_private(            \\\n+      GARROW_FEATHER_FILE_READER(obj)))\n \n static void\n garrow_feather_file_reader_finalize(GObject *object)\n@@ -614,7 +614,7 @@ garrow_feather_file_reader_class_init(GArrowFeatherFileReaderClass *klass)\n /**\n  * garrow_feather_file_reader_new:\n  * @file: The file to be read.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable): A newly created #GArrowFeatherFileReader\n  *   or %NULL on error.\n@@ -745,7 +745,7 @@ garrow_feather_file_reader_get_column_name(GArrowFeatherFileReader *reader,\n  * garrow_feather_file_reader_get_column:\n  * @reader: A #GArrowFeatherFileReader.\n  * @i: The index of the target column.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable) (transfer full):\n  *   The i-th column in the file or %NULL on error.\n@@ -771,7 +771,7 @@ garrow_feather_file_reader_get_column(GArrowFeatherFileReader *reader,\n /**\n  * garrow_feather_file_reader_get_columns:\n  * @reader: A #GArrowFeatherFileReader.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (element-type GArrowColumn) (transfer full):\n  *   The columns in the file.\n@@ -801,6 +801,92 @@ garrow_feather_file_reader_get_columns(GArrowFeatherFileReader *reader,\n   return g_list_reverse(columns);\n }\n \n+/**\n+ * garrow_feather_file_reader_read:\n+ * @reader: A #GArrowFeatherFileReader.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The table in the file that has all columns.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowTable *\n+garrow_feather_file_reader_read(GArrowFeatherFileReader *reader,\n+                                GError **error)\n+{\n+  auto arrow_reader = garrow_feather_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Table> arrow_table;\n+  auto status = arrow_reader->Read(&arrow_table);\n+  if (garrow_error_check(error, status, \"[feather-file-reader][read]\")) {\n+    return garrow_table_new_raw(&arrow_table);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_feather_file_reader_read_indices:\n+ * @reader: A #GArrowFeatherFileReader.\n+ * @indices: (array length=n_indices): The indices of column to be read.\n+ * @n_indices: The number of indices.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The table in the file that has only the\n+ *   specified columns.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowTable *\n+garrow_feather_file_reader_read_indices(GArrowFeatherFileReader *reader,\n+                                        const gint *indices,\n+                                        guint n_indices,\n+                                        GError **error)\n+{\n+  auto arrow_reader = garrow_feather_file_reader_get_raw(reader);\n+  std::vector<int> cpp_indices(n_indices);\n+  for (guint i = 0; i < n_indices; ++i) {\n+    cpp_indices.push_back(indices[i]);\n+  }\n+  std::shared_ptr<arrow::Table> arrow_table;\n+  auto status = arrow_reader->Read(cpp_indices, &arrow_table);\n+  if (garrow_error_check(error, status, \"[feather-file-reader][read-indices]\")) {\n+    return garrow_table_new_raw(&arrow_table);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_feather_file_reader_read_names:\n+ * @reader: A #GArrowFeatherFileReader.\n+ * @names: (array length=n_names): The names of column to be read.\n+ * @n_names: The number of names.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The table in the file that has only the\n+ *   specified columns.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowTable *\n+garrow_feather_file_reader_read_names(GArrowFeatherFileReader *reader,\n+                                      const gchar **names,\n+                                      guint n_names,\n+                                      GError **error)\n+{\n+  auto arrow_reader = garrow_feather_file_reader_get_raw(reader);\n+  std::vector<std::string> cpp_names(n_names);\n+  for (guint i = 0; i < n_names; ++i) {\n+    cpp_names.push_back(names[i]);\n+  }\n+  std::shared_ptr<arrow::Table> arrow_table;\n+  auto status = arrow_reader->Read(cpp_names, &arrow_table);\n+  if (garrow_error_check(error, status, \"[feather-file-reader][read-names]\")) {\n+    return garrow_table_new_raw(&arrow_table);\n+  } else {\n+    return NULL;\n+  }\n+}\n \n G_END_DECLS\n \ndiff --git a/c_glib/arrow-glib/reader.h b/c_glib/arrow-glib/reader.h\nindex daec676d6b..b043ec1c40 100644\n--- a/c_glib/arrow-glib/reader.h\n+++ b/c_glib/arrow-glib/reader.h\n@@ -194,51 +194,16 @@ GArrowRecordBatch *garrow_record_batch_file_reader_read_record_batch(\n   GError **error);\n \n \n-#define GARROW_TYPE_FEATHER_FILE_READER         \\\n-  (garrow_feather_file_reader_get_type())\n-#define GARROW_FEATHER_FILE_READER(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_FEATHER_FILE_READER,  \\\n-                              GArrowFeatherFileReader))\n-#define GARROW_FEATHER_FILE_READER_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                             \\\n-                           GARROW_TYPE_FEATHER_FILE_READER,     \\\n-                           GArrowFeatherFileReaderClass))\n-#define GARROW_IS_FEATHER_FILE_READER(obj)                      \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_FEATHER_FILE_READER))\n-#define GARROW_IS_FEATHER_FILE_READER_CLASS(klass)              \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_FEATHER_FILE_READER))\n-#define GARROW_FEATHER_FILE_READER_GET_CLASS(obj)               \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_FEATHER_FILE_READER,   \\\n-                             GArrowFeatherFileReaderClass))\n-\n-typedef struct _GArrowFeatherFileReader      GArrowFeatherFileReader;\n-#ifndef __GTK_DOC_IGNORE__\n-typedef struct _GArrowFeatherFileReaderClass GArrowFeatherFileReaderClass;\n-#endif\n-\n-/**\n- * GArrowFeatherFileReader:\n- *\n- * It wraps `arrow::ipc::feather::TableReader`.\n- */\n-struct _GArrowFeatherFileReader\n-{\n-  /*< private >*/\n-  GObject parent_instance;\n-};\n-\n-#ifndef __GTK_DOC_IGNORE__\n+#define GARROW_TYPE_FEATHER_FILE_READER (garrow_feather_file_reader_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowFeatherFileReader,\n+                         garrow_feather_file_reader,\n+                         GARROW,\n+                         FEATHER_FILE_READER,\n+                         GObject)\n struct _GArrowFeatherFileReaderClass\n {\n   GObjectClass parent_class;\n };\n-#endif\n-\n-GType garrow_feather_file_reader_get_type(void) G_GNUC_CONST;\n \n GArrowFeatherFileReader *garrow_feather_file_reader_new(\n   GArrowSeekableInputStream *file,\n@@ -264,5 +229,18 @@ GArrowColumn *garrow_feather_file_reader_get_column(\n GList *garrow_feather_file_reader_get_columns(\n   GArrowFeatherFileReader *reader,\n   GError **error);\n+GArrowTable *\n+garrow_feather_file_reader_read(GArrowFeatherFileReader *reader,\n+                                GError **error);\n+GArrowTable *\n+garrow_feather_file_reader_read_indices(GArrowFeatherFileReader *reader,\n+                                        const gint *indices,\n+                                        guint n_indices,\n+                                        GError **error);\n+GArrowTable *\n+garrow_feather_file_reader_read_names(GArrowFeatherFileReader *reader,\n+                                      const gchar **names,\n+                                      guint n_names,\n+                                      GError **error);\n \n G_END_DECLS\ndiff --git a/c_glib/arrow-glib/writer.cpp b/c_glib/arrow-glib/writer.cpp\nindex 9bcda2dbbf..1ddb5befec 100644\n--- a/c_glib/arrow-glib/writer.cpp\n+++ b/c_glib/arrow-glib/writer.cpp\n@@ -145,7 +145,7 @@ garrow_record_batch_writer_class_init(GArrowRecordBatchWriterClass *klass)\n  * garrow_record_batch_writer_write_record_batch:\n  * @writer: A #GArrowRecordBatchWriter.\n  * @record_batch: The record batch to be written.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  *\n@@ -170,7 +170,7 @@ garrow_record_batch_writer_write_record_batch(GArrowRecordBatchWriter *writer,\n  * garrow_record_batch_writer_write_table:\n  * @writer: A #GArrowRecordBatchWriter.\n  * @table: The table to be written.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  *\n@@ -193,7 +193,7 @@ garrow_record_batch_writer_write_table(GArrowRecordBatchWriter *writer,\n /**\n  * garrow_record_batch_writer_close:\n  * @writer: A #GArrowRecordBatchWriter.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  *\n@@ -228,7 +228,7 @@ garrow_record_batch_stream_writer_class_init(GArrowRecordBatchStreamWriterClass\n  * garrow_record_batch_stream_writer_new:\n  * @sink: The output of the writer.\n  * @schema: The schema of the writer.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable): A newly created #GArrowRecordBatchStreamWriter\n  *   or %NULL on error.\n@@ -275,7 +275,7 @@ garrow_record_batch_file_writer_class_init(GArrowRecordBatchFileWriterClass *kla\n  * garrow_record_batch_file_writer_new:\n  * @sink: The output of the writer.\n  * @schema: The schema of the writer.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable): A newly created #GArrowRecordBatchFileWriter\n  *   or %NULL on error.\n@@ -318,9 +318,9 @@ G_DEFINE_TYPE_WITH_PRIVATE(GArrowFeatherFileWriter,\n                            G_TYPE_OBJECT);\n \n #define GARROW_FEATHER_FILE_WRITER_GET_PRIVATE(obj)             \\\n-  (G_TYPE_INSTANCE_GET_PRIVATE((obj),                           \\\n-                               GARROW_TYPE_FEATHER_FILE_WRITER, \\\n-                               GArrowFeatherFileWriterPrivate))\n+  static_cast<GArrowFeatherFileWriterPrivate *>(                \\\n+    garrow_feather_file_writer_get_instance_private(            \\\n+      GARROW_FEATHER_FILE_WRITER(obj)))\n \n static void\n garrow_feather_file_writer_finalize(GObject *object)\n@@ -396,7 +396,7 @@ garrow_feather_file_writer_class_init(GArrowFeatherFileWriterClass *klass)\n /**\n  * garrow_feather_file_writer_new:\n  * @sink: The output of the writer.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: (nullable): A newly created #GArrowFeatherFileWriter\n  *   or %NULL on error.\n@@ -453,7 +453,7 @@ garrow_feather_file_writer_set_n_rows(GArrowFeatherFileWriter *writer,\n  * @writer: A #GArrowFeatherFileWriter.\n  * @name: The name of the array to be appended.\n  * @array: The array to be appended.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  *\n@@ -469,15 +469,35 @@ garrow_feather_file_writer_append(GArrowFeatherFileWriter *writer,\n   auto arrow_array = garrow_array_get_raw(array);\n \n   auto status = arrow_writer->Append(std::string(name), *arrow_array);\n-  return garrow_error_check(error,\n-                            status,\n-                            \"[feather-file-writer][append]\");\n+  return garrow_error_check(error, status, \"[feather-file-writer][append]\");\n+}\n+\n+/**\n+ * garrow_feather_file_writer_writer:\n+ * @writer: A #GArrowFeatherFileWriter.\n+ * @array: The table to be written.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_feather_file_writer_write(GArrowFeatherFileWriter *writer,\n+                                 GArrowTable *table,\n+                                 GError **error)\n+{\n+  auto arrow_writer = garrow_feather_file_writer_get_raw(writer);\n+  auto arrow_table = garrow_table_get_raw(table);\n+\n+  auto status = arrow_writer->Write(*arrow_table);\n+  return garrow_error_check(error, status, \"[feather-file-writer][write]\");\n }\n \n /**\n  * garrow_feather_file_writer_close:\n  * @writer: A #GArrowFeatherFileWriter.\n- * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n  *\n  * Returns: %TRUE on success, %FALSE if there was an error.\n  *\ndiff --git a/c_glib/arrow-glib/writer.h b/c_glib/arrow-glib/writer.h\nindex 41b5f723d1..8950b213cf 100644\n--- a/c_glib/arrow-glib/writer.h\n+++ b/c_glib/arrow-glib/writer.h\n@@ -190,51 +190,16 @@ GArrowRecordBatchFileWriter *garrow_record_batch_file_writer_new(\n   GError **error);\n \n \n-#define GARROW_TYPE_FEATHER_FILE_WRITER         \\\n-  (garrow_feather_file_writer_get_type())\n-#define GARROW_FEATHER_FILE_WRITER(obj)                         \\\n-  (G_TYPE_CHECK_INSTANCE_CAST((obj),                            \\\n-                              GARROW_TYPE_FEATHER_FILE_WRITER,  \\\n-                              GArrowFeatherFileWriter))\n-#define GARROW_FEATHER_FILE_WRITER_CLASS(klass)                 \\\n-  (G_TYPE_CHECK_CLASS_CAST((klass),                             \\\n-                           GARROW_TYPE_FEATHER_FILE_WRITER,     \\\n-                           GArrowFeatherFileWriterClass))\n-#define GARROW_IS_FEATHER_FILE_WRITER(obj)                      \\\n-  (G_TYPE_CHECK_INSTANCE_TYPE((obj),                            \\\n-                              GARROW_TYPE_FEATHER_FILE_WRITER))\n-#define GARROW_IS_FEATHER_FILE_WRITER_CLASS(klass)              \\\n-  (G_TYPE_CHECK_CLASS_TYPE((klass),                             \\\n-                           GARROW_TYPE_FEATHER_FILE_WRITER))\n-#define GARROW_FEATHER_FILE_WRITER_GET_CLASS(obj)               \\\n-  (G_TYPE_INSTANCE_GET_CLASS((obj),                             \\\n-                             GARROW_TYPE_FEATHER_FILE_WRITER,   \\\n-                             GArrowFeatherFileWriterClass))\n-\n-typedef struct _GArrowFeatherFileWriter      GArrowFeatherFileWriter;\n-#ifndef __GTK_DOC_IGNORE__\n-typedef struct _GArrowFeatherFileWriterClass GArrowFeatherFileWriterClass;\n-#endif\n-\n-/**\n- * GArrowFeatherFileWriter:\n- *\n- * It wraps `arrow::ipc::feather::TableWriter`.\n- */\n-struct _GArrowFeatherFileWriter\n-{\n-  /*< private >*/\n-  GObject parent_instance;\n-};\n-\n-#ifndef __GTK_DOC_IGNORE__\n+#define GARROW_TYPE_FEATHER_FILE_WRITER (garrow_feather_file_writer_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowFeatherFileWriter,\n+                         garrow_feather_file_writer,\n+                         GARROW,\n+                         FEATHER_FILE_WRITER,\n+                         GObject)\n struct _GArrowFeatherFileWriterClass\n {\n   GObjectClass parent_class;\n };\n-#endif\n-\n-GType garrow_feather_file_writer_get_type(void) G_GNUC_CONST;\n \n GArrowFeatherFileWriter *garrow_feather_file_writer_new(GArrowOutputStream *sink,\n                                                         GError **error);\n@@ -246,6 +211,9 @@ gboolean garrow_feather_file_writer_append(GArrowFeatherFileWriter *writer,\n                                            const gchar *name,\n                                            GArrowArray *array,\n                                            GError **error);\n+gboolean garrow_feather_file_writer_write(GArrowFeatherFileWriter *writer,\n+                                          GArrowTable *table,\n+                                          GError **error);\n gboolean garrow_feather_file_writer_close(GArrowFeatherFileWriter *writer,\n                                           GError **error);\n \ndiff --git a/c_glib/test/test-feather-file-reader.rb b/c_glib/test/test-feather-file-reader.rb\nindex 91f2f7467f..901b94d215 100644\n--- a/c_glib/test/test-feather-file-reader.rb\n+++ b/c_glib/test/test-feather-file-reader.rb\n@@ -28,7 +28,9 @@ def setup_file(data)\n           writer.description = data[:description]\n         end\n         writer.n_rows = data[:n_rows] || 0\n-        if data[:columns]\n+        if data[:table]\n+          writer.write(data[:table])\n+        elsif data[:columns]\n           data[:columns].each do |name, array|\n             writer.append(name, array)\n           end\n@@ -97,7 +99,7 @@ def setup_file(data)\n \n   test(\"#n_columns\") do\n     columns = {\n-      \"messages\" => build_string_array([]),\n+      \"message\" => build_string_array([]),\n       \"is_critical\" => build_boolean_array([]),\n     }\n     setup_file(:columns => columns) do |reader|\n@@ -107,12 +109,12 @@ def setup_file(data)\n \n   test(\"#get_column_name\") do\n     columns = {\n-      \"messages\" => build_string_array([]),\n+      \"message\" => build_string_array([]),\n       \"is_critical\" => build_boolean_array([]),\n     }\n     setup_file(:columns => columns) do |reader|\n       assert_equal([\n-                     \"messages\",\n+                     \"message\",\n                      \"is_critical\",\n                    ],\n                    [\n@@ -124,12 +126,12 @@ def setup_file(data)\n \n   test(\"#get_column\") do\n     columns = {\n-      \"messages\" => build_string_array([]),\n+      \"message\" => build_string_array([]),\n       \"is_critical\" => build_boolean_array([]),\n     }\n     setup_file(:columns => columns) do |reader|\n       assert_equal([\n-                     \"messages\",\n+                     \"message\",\n                      \"is_critical\",\n                    ],\n                    [\n@@ -141,15 +143,45 @@ def setup_file(data)\n \n   test(\"#columns\") do\n     columns = {\n-      \"messages\" => build_string_array([]),\n+      \"message\" => build_string_array([]),\n       \"is_critical\" => build_boolean_array([]),\n     }\n     setup_file(:columns => columns) do |reader|\n       assert_equal([\n-                     \"messages\",\n+                     \"message\",\n                      \"is_critical\",\n                    ],\n                    reader.columns.collect(&:name))\n     end\n   end\n+\n+  test(\"#read\") do\n+    table = build_table(\"message\" => build_string_array([\"Login\"]),\n+                        \"is_critical\" => build_boolean_array([true]))\n+    setup_file(:table => table) do |reader|\n+      assert_equal(table, reader.read)\n+    end\n+  end\n+\n+  test(\"#read_indices\") do\n+    table = build_table(\"message\" => build_string_array([\"Login\"]),\n+                        \"is_critical\" => build_boolean_array([true]),\n+                        \"host\" => build_string_array([\"www\"]))\n+    setup_file(:table => table) do |reader|\n+      assert_equal(build_table(\"message\" => build_string_array([\"Login\"]),\n+                               \"host\" => build_string_array([\"www\"])),\n+                   reader.read_indices([2, 0]))\n+    end\n+  end\n+\n+  test(\"#read_names\") do\n+    table = build_table(\"message\" => build_string_array([\"Login\"]),\n+                        \"is_critical\" => build_boolean_array([true]),\n+                        \"host\" => build_string_array([\"www\"]))\n+    setup_file(:table => table) do |reader|\n+      assert_equal(build_table(\"message\" => build_string_array([\"Login\"]),\n+                               \"host\" => build_string_array([\"www\"])),\n+                   reader.read_names([\"host\", \"message\"]))\n+    end\n+  end\n end\ndiff --git a/c_glib/test/test-feather-file-writer.rb b/c_glib/test/test-feather-file-writer.rb\nindex 9939215912..91dd112093 100644\n--- a/c_glib/test/test-feather-file-writer.rb\n+++ b/c_glib/test/test-feather-file-writer.rb\n@@ -65,4 +65,26 @@ def test_append\n       input.close\n     end\n   end\n+\n+  def test_write\n+    messages = build_string_array([\"Crash\", \"Error\", \"Shutdown\"])\n+    is_criticals = build_boolean_array([true, true, false])\n+    table = build_table(\"message\" => messages,\n+                        \"is_critical\" => is_criticals)\n+\n+    tempfile = Tempfile.open(\"arrow-feather-file-writer\")\n+\n+    output = Arrow::FileOutputStream.new(tempfile.path, false)\n+    writer = Arrow::FeatherFileWriter.new(output)\n+    writer.n_rows = table.n_rows\n+    writer.write(table)\n+    writer.close\n+    output.close\n+\n+    input = Arrow::MemoryMappedInputStream.new(tempfile.path)\n+    reader = Arrow::FeatherFileReader.new(input)\n+    assert_equal([table.n_rows, table],\n+                 [reader.n_rows, reader.read])\n+    input.close\n+  end\n end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T22:44:57.457+0000",
                    "updated": "2018-11-08T22:44:57.457+0000",
                    "started": "2018-11-08T22:44:57.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164121",
                    "issueId": "13197013"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@453d2922[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b6e4ff9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59090f13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@70b1924c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47b64820[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@387d2828[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@291dd9a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@55421d3e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2040b8fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@712de8b6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36baf7f1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@73d4b7f5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 08 22:45:08 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-08T22:45:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3719/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-08T05:47:32.000+0000",
        "updated": "2019-01-21T11:07:35.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Support read/write table to/from Feather",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197013/comment/16680530",
                    "id": "16680530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2918\n[https://github.com/apache/arrow/pull/2918]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-08T22:45:08.216+0000",
                    "updated": "2018-11-08T22:45:08.216+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00994:",
        "customfield_12314139": null
    }
}