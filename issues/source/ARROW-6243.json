{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13250887",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887",
    "key": "ARROW-6243",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12573912",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12573912",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13072257",
                    "key": "ARROW-1036",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13072257",
                    "fields": {
                        "summary": "[C++] Define abstract API for filtering Arrow streams (e.g. predicate evaluation)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6243/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 39,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/298948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-21T19:43:08.017+0000",
                    "updated": "2019-08-21T19:43:08.017+0000",
                    "started": "2019-08-21T19:43:08.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "298948",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301882",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318013519\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n \n Review comment:\n   Is there a particular reason for using \"and\" rather than \"&&\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:31.799+0000",
                    "updated": "2019-08-27T11:20:31.799+0000",
                    "started": "2019-08-27T11:20:31.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301882",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318023274\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n \n Review comment:\n   Perhaps it's only my experience, but `all` and `any` general refer to column-wide agregation, not combining individual clauses. I would expect `and` and `or` here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:31.803+0000",
                    "updated": "2019-08-27T11:20:31.803+0000",
                    "started": "2019-08-27T11:20:31.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301883",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318010313\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -235,4 +246,10 @@ class ARROW_EXPORT UnionScalar : public Scalar {};\n class ARROW_EXPORT DictionaryScalar : public Scalar {};\n class ARROW_EXPORT ExtensionScalar : public Scalar {};\n \n+/// \\param[in] type the type of scalar to produce\n+/// \\param[out] null output scalar with is_valid=false\n+/// \\return Status\n+ARROW_EXPORT\n+Status MakeNull(const std::shared_ptr<DataType>& type, std::shared_ptr<Scalar>* null);\n \n Review comment:\n   Call it `MakeNullScalar`? This is in the general namespace.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:31.804+0000",
                    "updated": "2019-08-27T11:20:31.804+0000",
                    "started": "2019-08-27T11:20:31.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301884",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318014793\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationOfCompoundQuery) {\n+  // chained \"and\" expressions are flattened\n+  auto multi_and = \"b\"_ > 5 and \"b\"_ < 10 and \"b\"_ != 7;\n+  AssertOperandsAre(multi_and, ExpressionType::ALL, \"b\"_ > 5, \"b\"_ < 10, \"b\"_ != 7);\n+\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 3, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 6, *always);\n+\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 6, *never);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ == 3, *always);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 3, \"b\"_ == 4);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ >= 3, \"b\"_ == 3 or \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"b\"_ > 0.5 and \"b\"_ < 1.5, not(\"b\"_ < 0.0 or \"b\"_ > 1.0),\n+                     \"b\"_ > 0.5);\n+\n+  AssertSimplifiesTo(\"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"a\"_ == 3 or \"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationAgainstCompoundCondition) {\n+  AssertSimplifiesTo(\"b\"_ > 5, \"b\"_ == 3 or \"b\"_ == 6, \"b\"_ > 5);\n+  AssertSimplifiesTo(\"b\"_ > 7, \"b\"_ == 3 or \"b\"_ == 6, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ > 6 and \"b\"_ < 13, \"b\"_ < 10);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationToNull) {\n+  auto null = ScalarExpression::MakeNull(boolean());\n+  auto null32 = ScalarExpression::MakeNull(int32());\n+\n+  AssertSimplifiesTo(*equal(fieldRef(\"b\"), null32), \"b\"_ == 3, *null);\n \n Review comment:\n   Why can't `*equal(fieldRef(\"b\"), null32)` be written as `\"b\"_ == null32`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:31.804+0000",
                    "updated": "2019-08-27T11:20:31.804+0000",
                    "started": "2019-08-27T11:20:31.803+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301885",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318015152\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationOfCompoundQuery) {\n+  // chained \"and\" expressions are flattened\n+  auto multi_and = \"b\"_ > 5 and \"b\"_ < 10 and \"b\"_ != 7;\n+  AssertOperandsAre(multi_and, ExpressionType::ALL, \"b\"_ > 5, \"b\"_ < 10, \"b\"_ != 7);\n+\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 3, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 6, *always);\n+\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 6, *never);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ == 3, *always);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 3, \"b\"_ == 4);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ >= 3, \"b\"_ == 3 or \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"b\"_ > 0.5 and \"b\"_ < 1.5, not(\"b\"_ < 0.0 or \"b\"_ > 1.0),\n+                     \"b\"_ > 0.5);\n+\n+  AssertSimplifiesTo(\"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"a\"_ == 3 or \"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationAgainstCompoundCondition) {\n+  AssertSimplifiesTo(\"b\"_ > 5, \"b\"_ == 3 or \"b\"_ == 6, \"b\"_ > 5);\n+  AssertSimplifiesTo(\"b\"_ > 7, \"b\"_ == 3 or \"b\"_ == 6, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ > 6 and \"b\"_ < 13, \"b\"_ < 10);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationToNull) {\n+  auto null = ScalarExpression::MakeNull(boolean());\n+  auto null32 = ScalarExpression::MakeNull(int32());\n+\n+  AssertSimplifiesTo(*equal(fieldRef(\"b\"), null32), \"b\"_ == 3, *null);\n \n Review comment:\n   Also, shouldn't it simplify to `never` instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:32.059+0000",
                    "updated": "2019-08-27T11:20:32.059+0000",
                    "started": "2019-08-27T11:20:32.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301886",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318023705\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n+\n+    /// a disjunction of multiple expressions (true if any operand is true)\n+    ANY,\n+\n+    /// a comparison of two other expressions\n+    COMPARISON,\n+\n+    /// extract validity as an expression (true if operand is valid)\n+    // TODO(bkietz) VALIDITY,\n+  };\n+};\n+\n+/// Represents an expression tree\n+class ARROW_DS_EXPORT Expression {\n+ public:\n+  explicit Expression(ExpressionType::type type) : type_(type) {}\n+\n+  virtual ~Expression() = default;\n+\n+  /// Returns true iff the expressions are identical; does not check for equivalence.\n+  /// For example, (A and B) is not equal to (B and A) nor is (A and not A) equal to\n+  /// (false).\n+  virtual bool Equals(const Expression& other) const = 0;\n+\n+  bool Equals(const std::shared_ptr<Expression>& other) const;\n+\n+  /// Validate this expression for execution against a schema. This will check that all\n+  /// reference fields are present (fields not in the schema will be replaced with null)\n+  /// and all subexpressions are executable. Returns the type to which this expression\n+  /// will evaluate.\n+  virtual Result<std::shared_ptr<DataType>> Validate(const Schema& schema) const = 0;\n+\n+  /// Return a simplified form of this expression given some known conditions.\n+  /// For example, (a > 3).Assume(a == 5) == (true). This can be used to do less work\n+  /// in ExpressionFilter when partition conditions guarantee some of this expression.\n+  /// In the example above, *no* filtering need be done on record batches in the\n+  /// partition since (a == 5).\n+  virtual Result<std::shared_ptr<Expression>> Assume(const Expression& given) const {\n+    return Copy();\n+  }\n+\n+  // Evaluate an expression against a RecordBatch.\n+  // Returned Datum must be of either SCALAR or ARRAY kind.\n \n Review comment:\n   In which context can it be a scalar? And if it's an array, what is the type?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:32.061+0000",
                    "updated": "2019-08-27T11:20:32.061+0000",
                    "started": "2019-08-27T11:20:32.061+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301887",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318024012\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n+\n+    /// a disjunction of multiple expressions (true if any operand is true)\n+    ANY,\n+\n+    /// a comparison of two other expressions\n+    COMPARISON,\n+\n+    /// extract validity as an expression (true if operand is valid)\n+    // TODO(bkietz) VALIDITY,\n+  };\n+};\n+\n+/// Represents an expression tree\n+class ARROW_DS_EXPORT Expression {\n+ public:\n+  explicit Expression(ExpressionType::type type) : type_(type) {}\n+\n+  virtual ~Expression() = default;\n+\n+  /// Returns true iff the expressions are identical; does not check for equivalence.\n+  /// For example, (A and B) is not equal to (B and A) nor is (A and not A) equal to\n+  /// (false).\n+  virtual bool Equals(const Expression& other) const = 0;\n+\n+  bool Equals(const std::shared_ptr<Expression>& other) const;\n+\n+  /// Validate this expression for execution against a schema. This will check that all\n+  /// reference fields are present (fields not in the schema will be replaced with null)\n+  /// and all subexpressions are executable. Returns the type to which this expression\n+  /// will evaluate.\n+  virtual Result<std::shared_ptr<DataType>> Validate(const Schema& schema) const = 0;\n+\n+  /// Return a simplified form of this expression given some known conditions.\n+  /// For example, (a > 3).Assume(a == 5) == (true). This can be used to do less work\n+  /// in ExpressionFilter when partition conditions guarantee some of this expression.\n+  /// In the example above, *no* filtering need be done on record batches in the\n+  /// partition since (a == 5).\n+  virtual Result<std::shared_ptr<Expression>> Assume(const Expression& given) const {\n+    return Copy();\n+  }\n+\n+  // Evaluate an expression against a RecordBatch.\n+  // Returned Datum must be of either SCALAR or ARRAY kind.\n+  virtual Result<compute::Datum> Evaluate(compute::FunctionContext* ctx,\n+                                          const RecordBatch& batch) const = 0;\n+\n+  /// returns a debug string representing this expression\n+  virtual std::string ToString() const = 0;\n+\n+  ExpressionType::type type() const { return type_; }\n+\n+  /// If true, this Expression is a ScalarExpression wrapping either a null Scalar or a\n+  /// non-null BooleanScalar. Its value may be retrieved at the same time.\n+  bool IsTrivialCondition(BooleanScalar* value = NULLPTR) const;\n+\n+  /// Copy this expression into a shared pointer.\n+  virtual std::shared_ptr<Expression> Copy() const = 0;\n \n Review comment:\n   You didn't want to use `shared_from_this`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:32.065+0000",
                    "updated": "2019-08-27T11:20:32.065+0000",
                    "started": "2019-08-27T11:20:32.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301888",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318023274\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n \n Review comment:\n   Perhaps it's only my experience, but `all` and `any` generally refer to column-wide agregation, not combining individual clauses. I would expect `and` and `or` here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:20:58.370+0000",
                    "updated": "2019-08-27T11:20:58.370+0000",
                    "started": "2019-08-27T11:20:58.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301890",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318038993\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -235,4 +246,10 @@ class ARROW_EXPORT UnionScalar : public Scalar {};\n class ARROW_EXPORT DictionaryScalar : public Scalar {};\n class ARROW_EXPORT ExtensionScalar : public Scalar {};\n \n+/// \\param[in] type the type of scalar to produce\n+/// \\param[out] null output scalar with is_valid=false\n+/// \\return Status\n+ARROW_EXPORT\n+Status MakeNull(const std::shared_ptr<DataType>& type, std::shared_ptr<Scalar>* null);\n \n Review comment:\n   Alright\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:57:30.713+0000",
                    "updated": "2019-08-27T11:57:30.713+0000",
                    "started": "2019-08-27T11:57:30.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301920",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318039360\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n \n Review comment:\n   Looks more like SQL. I expect somebody will ask me to change it, but I thought it was more readable\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T11:58:26.901+0000",
                    "updated": "2019-08-27T11:58:26.901+0000",
                    "started": "2019-08-27T11:58:26.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301921",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318040368\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n \n Review comment:\n   I can change it if you prefer; it just looked more natural to me to write `all({thing1, thing2, thing3})` than `and_({thing1, thing2, thing3})`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T12:01:15.316+0000",
                    "updated": "2019-08-27T12:01:15.316+0000",
                    "started": "2019-08-27T12:01:15.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301922",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318040544\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n \n Review comment:\n   Well, I learnt something. I didn't know that these \"alternate operator spellings\" existed in C++.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T12:01:43.351+0000",
                    "updated": "2019-08-27T12:01:43.351+0000",
                    "started": "2019-08-27T12:01:43.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301923",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318040944\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n+\n+    /// a disjunction of multiple expressions (true if any operand is true)\n+    ANY,\n+\n+    /// a comparison of two other expressions\n+    COMPARISON,\n+\n+    /// extract validity as an expression (true if operand is valid)\n+    // TODO(bkietz) VALIDITY,\n+  };\n+};\n+\n+/// Represents an expression tree\n+class ARROW_DS_EXPORT Expression {\n+ public:\n+  explicit Expression(ExpressionType::type type) : type_(type) {}\n+\n+  virtual ~Expression() = default;\n+\n+  /// Returns true iff the expressions are identical; does not check for equivalence.\n+  /// For example, (A and B) is not equal to (B and A) nor is (A and not A) equal to\n+  /// (false).\n+  virtual bool Equals(const Expression& other) const = 0;\n+\n+  bool Equals(const std::shared_ptr<Expression>& other) const;\n+\n+  /// Validate this expression for execution against a schema. This will check that all\n+  /// reference fields are present (fields not in the schema will be replaced with null)\n+  /// and all subexpressions are executable. Returns the type to which this expression\n+  /// will evaluate.\n+  virtual Result<std::shared_ptr<DataType>> Validate(const Schema& schema) const = 0;\n+\n+  /// Return a simplified form of this expression given some known conditions.\n+  /// For example, (a > 3).Assume(a == 5) == (true). This can be used to do less work\n+  /// in ExpressionFilter when partition conditions guarantee some of this expression.\n+  /// In the example above, *no* filtering need be done on record batches in the\n+  /// partition since (a == 5).\n+  virtual Result<std::shared_ptr<Expression>> Assume(const Expression& given) const {\n+    return Copy();\n+  }\n+\n+  // Evaluate an expression against a RecordBatch.\n+  // Returned Datum must be of either SCALAR or ARRAY kind.\n+  virtual Result<compute::Datum> Evaluate(compute::FunctionContext* ctx,\n+                                          const RecordBatch& batch) const = 0;\n+\n+  /// returns a debug string representing this expression\n+  virtual std::string ToString() const = 0;\n+\n+  ExpressionType::type type() const { return type_; }\n+\n+  /// If true, this Expression is a ScalarExpression wrapping either a null Scalar or a\n+  /// non-null BooleanScalar. Its value may be retrieved at the same time.\n+  bool IsTrivialCondition(BooleanScalar* value = NULLPTR) const;\n+\n+  /// Copy this expression into a shared pointer.\n+  virtual std::shared_ptr<Expression> Copy() const = 0;\n \n Review comment:\n   `shared_from_this` is pretty tricky because it only works when the object is already managed by a shared_ptr and provides no way to detect whether the object is managed by a shared_ptr. I wanted to be able to safely create a shared_ptr from objects on the stack\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T12:02:54.101+0000",
                    "updated": "2019-08-27T12:02:54.101+0000",
                    "started": "2019-08-27T12:02:54.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301924",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318042068\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n+\n+    /// a disjunction of multiple expressions (true if any operand is true)\n+    ANY,\n+\n+    /// a comparison of two other expressions\n+    COMPARISON,\n+\n+    /// extract validity as an expression (true if operand is valid)\n+    // TODO(bkietz) VALIDITY,\n+  };\n+};\n+\n+/// Represents an expression tree\n+class ARROW_DS_EXPORT Expression {\n+ public:\n+  explicit Expression(ExpressionType::type type) : type_(type) {}\n+\n+  virtual ~Expression() = default;\n+\n+  /// Returns true iff the expressions are identical; does not check for equivalence.\n+  /// For example, (A and B) is not equal to (B and A) nor is (A and not A) equal to\n+  /// (false).\n+  virtual bool Equals(const Expression& other) const = 0;\n+\n+  bool Equals(const std::shared_ptr<Expression>& other) const;\n+\n+  /// Validate this expression for execution against a schema. This will check that all\n+  /// reference fields are present (fields not in the schema will be replaced with null)\n+  /// and all subexpressions are executable. Returns the type to which this expression\n+  /// will evaluate.\n+  virtual Result<std::shared_ptr<DataType>> Validate(const Schema& schema) const = 0;\n+\n+  /// Return a simplified form of this expression given some known conditions.\n+  /// For example, (a > 3).Assume(a == 5) == (true). This can be used to do less work\n+  /// in ExpressionFilter when partition conditions guarantee some of this expression.\n+  /// In the example above, *no* filtering need be done on record batches in the\n+  /// partition since (a == 5).\n+  virtual Result<std::shared_ptr<Expression>> Assume(const Expression& given) const {\n+    return Copy();\n+  }\n+\n+  // Evaluate an expression against a RecordBatch.\n+  // Returned Datum must be of either SCALAR or ARRAY kind.\n+  virtual Result<compute::Datum> Evaluate(compute::FunctionContext* ctx,\n+                                          const RecordBatch& batch) const = 0;\n+\n+  /// returns a debug string representing this expression\n+  virtual std::string ToString() const = 0;\n+\n+  ExpressionType::type type() const { return type_; }\n+\n+  /// If true, this Expression is a ScalarExpression wrapping either a null Scalar or a\n+  /// non-null BooleanScalar. Its value may be retrieved at the same time.\n+  bool IsTrivialCondition(BooleanScalar* value = NULLPTR) const;\n+\n+  /// Copy this expression into a shared pointer.\n+  virtual std::shared_ptr<Expression> Copy() const = 0;\n \n Review comment:\n   Ok, that's fine with me :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T12:05:55.485+0000",
                    "updated": "2019-08-27T12:05:55.485+0000",
                    "started": "2019-08-27T12:05:55.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301925",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++] implement basic filter ex\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318043069\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -18,23 +18,413 @@\n #pragma once\n \n #include <memory>\n+#include <string>\n+#include <utility>\n \n+#include \"arrow/compute/kernels/compare.h\"\n+#include \"arrow/dataset/type_fwd.h\"\n #include \"arrow/dataset/visibility.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/scalar.h\"\n \n namespace arrow {\n namespace dataset {\n \n-class ARROW_DS_EXPORT Filter {\n- public:\n+struct FilterType {\n   enum type {\n     /// Simple boolean predicate consisting of comparisons and boolean\n-    /// logic (AND, OR, NOT) involving Schema fields\n+    /// logic (ALL, ANY, NOT) involving Schema fields\n     EXPRESSION,\n \n-    ///\n+    /// Non decomposable filter; must be evaluated against every record batch\n     GENERIC\n   };\n };\n \n+class ARROW_DS_EXPORT Filter {\n+ public:\n+  explicit Filter(FilterType::type type) : type_(type) {}\n+\n+  virtual ~Filter() = default;\n+\n+  FilterType::type type() const { return type_; }\n+\n+ private:\n+  FilterType::type type_;\n+};\n+\n+/// Filter subclass encapsulating a simple boolean predicate consisting of comparisons\n+/// and boolean logic (ALL, ANY, NOT) involving Schema fields\n+class ARROW_DS_EXPORT ExpressionFilter : public Filter {\n+ public:\n+  explicit ExpressionFilter(const std::shared_ptr<Expression>& expression)\n+      : Filter(FilterType::EXPRESSION), expression_(std::move(expression)) {}\n+\n+  const std::shared_ptr<Expression>& expression() const { return expression_; }\n+\n+ private:\n+  std::shared_ptr<Expression> expression_;\n+};\n+\n+struct ExpressionType {\n+  enum type {\n+    /// a reference to a column within a record batch, will evaluate to an array\n+    FIELD,\n+\n+    /// a literal singular value encapuslated in a Scalar\n+    SCALAR,\n+\n+    /// a literal Array\n+    // TODO(bkietz) ARRAY,\n+\n+    /// an inversion of another expression\n+    NOT,\n+\n+    /// cast an expression to a given DataType\n+    // TODO(bkietz) CAST,\n+\n+    /// a conjunction of multiple expressions (true if all operands are true)\n+    ALL,\n+\n+    /// a disjunction of multiple expressions (true if any operand is true)\n+    ANY,\n+\n+    /// a comparison of two other expressions\n+    COMPARISON,\n+\n+    /// extract validity as an expression (true if operand is valid)\n+    // TODO(bkietz) VALIDITY,\n+  };\n+};\n+\n+/// Represents an expression tree\n+class ARROW_DS_EXPORT Expression {\n+ public:\n+  explicit Expression(ExpressionType::type type) : type_(type) {}\n+\n+  virtual ~Expression() = default;\n+\n+  /// Returns true iff the expressions are identical; does not check for equivalence.\n+  /// For example, (A and B) is not equal to (B and A) nor is (A and not A) equal to\n+  /// (false).\n+  virtual bool Equals(const Expression& other) const = 0;\n+\n+  bool Equals(const std::shared_ptr<Expression>& other) const;\n+\n+  /// Validate this expression for execution against a schema. This will check that all\n+  /// reference fields are present (fields not in the schema will be replaced with null)\n+  /// and all subexpressions are executable. Returns the type to which this expression\n+  /// will evaluate.\n+  virtual Result<std::shared_ptr<DataType>> Validate(const Schema& schema) const = 0;\n+\n+  /// Return a simplified form of this expression given some known conditions.\n+  /// For example, (a > 3).Assume(a == 5) == (true). This can be used to do less work\n+  /// in ExpressionFilter when partition conditions guarantee some of this expression.\n+  /// In the example above, *no* filtering need be done on record batches in the\n+  /// partition since (a == 5).\n+  virtual Result<std::shared_ptr<Expression>> Assume(const Expression& given) const {\n+    return Copy();\n+  }\n+\n+  // Evaluate an expression against a RecordBatch.\n+  // Returned Datum must be of either SCALAR or ARRAY kind.\n \n Review comment:\n   The most trivial case of evaluating to scalar would be evaluation of a ScalarExpression. I could have just refused the bequest of Evaluate and returned an error in that case, but it seemed more robust to do it this way.\r\n   \r\n   `all`, `any`, `not` and the comparison operators will evaluate to `Type::BOOL`, whereas a field reference will evaluate to whatever type that column has in the record batch. In general, the evaluated type of an `Expression` can be examined using `Expression::Validate()`\r\n   \r\n   I can add a comment describing as much of this as you like.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T12:08:31.870+0000",
                    "updated": "2019-08-27T12:08:31.870+0000",
                    "started": "2019-08-27T12:08:31.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301927",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++][Dataset] Filter expressions\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318043938\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n \n Review comment:\n   Relevant change to cpplint exclusions:\r\n   https://github.com/apache/arrow/pull/5157/files#diff-ca3a12ce3f399d977c7dc7c19c893b65R38\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T12:10:52.535+0000",
                    "updated": "2019-08-27T12:10:52.535+0000",
                    "started": "2019-08-27T12:10:52.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301929",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/301934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5157: ARROW-6243: [C++][Dataset] Filter expressions\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318049287\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationOfCompoundQuery) {\n+  // chained \"and\" expressions are flattened\n+  auto multi_and = \"b\"_ > 5 and \"b\"_ < 10 and \"b\"_ != 7;\n+  AssertOperandsAre(multi_and, ExpressionType::ALL, \"b\"_ > 5, \"b\"_ < 10, \"b\"_ != 7);\n+\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 3, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 6, *always);\n+\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 6, *never);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ == 3, *always);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 3, \"b\"_ == 4);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ >= 3, \"b\"_ == 3 or \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"b\"_ > 0.5 and \"b\"_ < 1.5, not(\"b\"_ < 0.0 or \"b\"_ > 1.0),\n+                     \"b\"_ > 0.5);\n+\n+  AssertSimplifiesTo(\"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"a\"_ == 3 or \"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationAgainstCompoundCondition) {\n+  AssertSimplifiesTo(\"b\"_ > 5, \"b\"_ == 3 or \"b\"_ == 6, \"b\"_ > 5);\n+  AssertSimplifiesTo(\"b\"_ > 7, \"b\"_ == 3 or \"b\"_ == 6, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ > 6 and \"b\"_ < 13, \"b\"_ < 10);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationToNull) {\n+  auto null = ScalarExpression::MakeNull(boolean());\n+  auto null32 = ScalarExpression::MakeNull(int32());\n+\n+  AssertSimplifiesTo(*equal(fieldRef(\"b\"), null32), \"b\"_ == 3, *null);\n \n Review comment:\n   Re filters returning nulls:\r\n   If a comparison references a slot which is null, we RefuseToGuess and the result of the comparison is null. [Here's a test](https://github.com/apache/arrow/pull/5157/files#diff-157d3e1f58273646705b1760a1f09770R220) illustrating this:\r\n   \r\n   ```c++\r\n   // filter expression: \"a\"_ != 0 and \"b\"_ > 0.1\r\n   // record batch:\r\n         {\"a\": 0, \"b\": -0.1},  // filtered out because \"a\" == 0, return 0\r\n         {\"a\": 1, \"b\":  0.2},  // included, return 1\r\n         {\"a\": 2, \"b\": -0.1},  // filtered out because \"b\" is not greater than 0.1, return 0\r\n         {\"a\": 0, \"b\": null}   // unknown because \"b\" is null, return null\r\n   ```\r\n   \r\n   RefuseToGuess is also implemented at the level of `Expression::Assume`. This is necessary when (for example) a filter expression references a column absent from some data fragment (perhaps it is an older file from before the referenced column was added). In that case we can't know whether rows in that fragment are relevant or not and we must yield them, but we *can* avoid the work of evaluating a kernel there.\r\n   \r\n   If a user needs to query only rows where a field is defined, use a [`validity` expression](https://github.com/apache/arrow/pull/5157/files/18cae8d2c9bb0f787bba622299a7536523bac468#diff-5f20335a973bd221587e90dc731cf2e0R95) (which extracts the null bitmask of an array to a boolean expression).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T12:24:15.234+0000",
                    "updated": "2019-08-27T12:24:15.234+0000",
                    "started": "2019-08-27T12:24:15.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "301934",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/302008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++][Dataset] Filter expressions\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318099362\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationOfCompoundQuery) {\n+  // chained \"and\" expressions are flattened\n+  auto multi_and = \"b\"_ > 5 and \"b\"_ < 10 and \"b\"_ != 7;\n+  AssertOperandsAre(multi_and, ExpressionType::ALL, \"b\"_ > 5, \"b\"_ < 10, \"b\"_ != 7);\n+\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 3, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 6, *always);\n+\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 6, *never);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ == 3, *always);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 3, \"b\"_ == 4);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ >= 3, \"b\"_ == 3 or \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"b\"_ > 0.5 and \"b\"_ < 1.5, not(\"b\"_ < 0.0 or \"b\"_ > 1.0),\n+                     \"b\"_ > 0.5);\n+\n+  AssertSimplifiesTo(\"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"a\"_ == 3 or \"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationAgainstCompoundCondition) {\n+  AssertSimplifiesTo(\"b\"_ > 5, \"b\"_ == 3 or \"b\"_ == 6, \"b\"_ > 5);\n+  AssertSimplifiesTo(\"b\"_ > 7, \"b\"_ == 3 or \"b\"_ == 6, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ > 6 and \"b\"_ < 13, \"b\"_ < 10);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationToNull) {\n+  auto null = ScalarExpression::MakeNull(boolean());\n+  auto null32 = ScalarExpression::MakeNull(int32());\n+\n+  AssertSimplifiesTo(*equal(fieldRef(\"b\"), null32), \"b\"_ == 3, *null);\n \n Review comment:\n   Hmm, I see. I'll others give their opinion about this. @wesm @fsaintjacques \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T14:03:24.688+0000",
                    "updated": "2019-08-27T14:03:24.688+0000",
                    "started": "2019-08-27T14:03:24.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "302008",
                    "issueId": "13250887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/worklog/302009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5157: ARROW-6243: [C++][Dataset] Filter expressions\nURL: https://github.com/apache/arrow/pull/5157#discussion_r318099362\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -0,0 +1,246 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/filter.h\"\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gmock/gmock.h>\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/compute/api.h\"\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using string_literals::operator\"\"_;\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+class ExpressionsTest : public ::testing::Test {\n+ public:\n+  void AssertSimplifiesTo(const Expression& expr, const Expression& given,\n+                          const Expression& expected) {\n+    auto simplified = expr.Assume(given);\n+    ASSERT_OK(simplified.status());\n+    if (!simplified.ValueOrDie()->Equals(expected)) {\n+      FAIL() << \"  simplification of: \" << expr.ToString() << std::endl\n+             << \"              given: \" << given.ToString() << std::endl\n+             << \"           expected: \" << expected.ToString() << std::endl\n+             << \"                was: \" << simplified.ValueOrDie()->ToString();\n+    }\n+  }\n+\n+  template <typename NnaryExpression, typename... T>\n+  void AssertOperandsAre(const NnaryExpression& expr, ExpressionType::type type,\n+                         T... expected_operands) {\n+    ASSERT_EQ(expr.type(), type);\n+    ASSERT_EQ(expr.operands().size(), sizeof...(T));\n+    std::shared_ptr<Expression> expected_operand_ptrs[] = {expected_operands.Copy()...};\n+\n+    for (size_t i = 0; i < sizeof...(T); ++i) {\n+      ASSERT_TRUE(expr.operands()[i]->Equals(expected_operand_ptrs[i]));\n+    }\n+  }\n+\n+  std::shared_ptr<ScalarExpression> always = ScalarExpression::Make(true);\n+  std::shared_ptr<ScalarExpression> never = ScalarExpression::Make(false);\n+};\n+\n+TEST_F(ExpressionsTest, Equality) {\n+  ASSERT_TRUE(\"a\"_.Equals(\"a\"_));\n+  ASSERT_FALSE(\"a\"_.Equals(\"b\"_));\n+\n+  ASSERT_TRUE((\"b\"_ == 3).Equals(\"b\"_ == 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_ < 3));\n+  ASSERT_FALSE((\"b\"_ == 3).Equals(\"b\"_));\n+\n+  // ordering matters\n+  ASSERT_FALSE((\"b\"_ > 2 and \"b\"_ < 3).Equals(\"b\"_ < 3 and \"b\"_ > 2));\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationOfCompoundQuery) {\n+  // chained \"and\" expressions are flattened\n+  auto multi_and = \"b\"_ > 5 and \"b\"_ < 10 and \"b\"_ != 7;\n+  AssertOperandsAre(multi_and, ExpressionType::ALL, \"b\"_ > 5, \"b\"_ < 10, \"b\"_ != 7);\n+\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 3, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ == 6, *always);\n+\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 6, *never);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ == 3, *always);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ > 3, \"b\"_ == 4);\n+  AssertSimplifiesTo(\"b\"_ == 3 or \"b\"_ == 4, \"b\"_ >= 3, \"b\"_ == 3 or \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"b\"_ > 0.5 and \"b\"_ < 1.5, not(\"b\"_ < 0.0 or \"b\"_ > 1.0),\n+                     \"b\"_ > 0.5);\n+\n+  AssertSimplifiesTo(\"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+\n+  AssertSimplifiesTo(\"a\"_ == 3 or \"b\"_ == 4, \"a\"_ == 0, \"b\"_ == 4);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationAgainstCompoundCondition) {\n+  AssertSimplifiesTo(\"b\"_ > 5, \"b\"_ == 3 or \"b\"_ == 6, \"b\"_ > 5);\n+  AssertSimplifiesTo(\"b\"_ > 7, \"b\"_ == 3 or \"b\"_ == 6, *never);\n+  AssertSimplifiesTo(\"b\"_ > 5 and \"b\"_ < 10, \"b\"_ > 6 and \"b\"_ < 13, \"b\"_ < 10);\n+}\n+\n+TEST_F(ExpressionsTest, SimplificationToNull) {\n+  auto null = ScalarExpression::MakeNull(boolean());\n+  auto null32 = ScalarExpression::MakeNull(int32());\n+\n+  AssertSimplifiesTo(*equal(fieldRef(\"b\"), null32), \"b\"_ == 3, *null);\n \n Review comment:\n   Hmm, I see. I'll let others share their opinions about this. @wesm @fsaintjacques \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-27T14:03:33.368+0000",
                    "updated": "2019-08-27T14:03:33.368+0000",
                    "started": "2019-08-27T14:03:33.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "302009",
                    "issueId": "13250887"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3ec097ec[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@95b451e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ff439cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3c54e298[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@271e09f7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7f2cdc5f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3158a826[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2a83dcb7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d0539a1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6452cc7a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@103f414e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@246d419a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 06 02:11:59 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-11T17:37:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6243/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-08-14T22:18:23.000+0000",
        "updated": "2020-08-06T02:11:59.000+0000",
        "timeoriginalestimate": null,
        "description": "This will draft the basic classes for creating boolean expressions that are passed to the DataSources/DataFragments for predicate push-down.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement basic Filter expression classes",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/comment/16927853",
                    "id": "16927853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 5157\n[https://github.com/apache/arrow/pull/5157]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-09-11T17:37:21.397+0000",
                    "updated": "2019-09-11T17:37:21.397+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/comment/17171227",
                    "id": "17171227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "body": "[~bkietz] [~npr]\u00a0Hi, do we have serialization/deserialization implementation for Expressions\u00a0 now? I didn't found :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "created": "2020-08-05T02:25:07.023+0000",
                    "updated": "2020-08-05T02:25:07.023+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/comment/17171561",
                    "id": "17171561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I don't believe they are serializable. There has been some discussion of this on the mailing list recently: https://lists.apache.org/thread.html/rb6613e1e0bd205a9e1979e99ee87a4b8ef6d2dc2e0e417c7abdea8a6%40%3Cdev.arrow.apache.org%3E",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-08-05T15:01:22.985+0000",
                    "updated": "2020-08-05T15:01:22.985+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13250887/comment/17171865",
                    "id": "17171865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "body": "got it, thanks for your clarification!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=tianchen92",
                        "name": "tianchen92",
                        "key": "tianchen92",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=tianchen92&avatarId=40800",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=tianchen92&avatarId=40800",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=tianchen92&avatarId=40800",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=tianchen92&avatarId=40800"
                        },
                        "displayName": "Ji Liu",
                        "active": true,
                        "timeZone": "Asia/Gaza"
                    },
                    "created": "2020-08-06T02:11:59.098+0000",
                    "updated": "2020-08-06T02:11:59.098+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z05oeg:",
        "customfield_12314139": null
    }
}