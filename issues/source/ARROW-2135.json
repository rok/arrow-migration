{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13137866",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866",
    "key": "ARROW-2135",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12530010",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12530010",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13123495",
                    "key": "ARROW-1899",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123495",
                    "fields": {
                        "summary": "[Python] Refactor handling of null sentinels in python/numpy_to_arrow.cc",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=matthewgilbert",
            "name": "matthewgilbert",
            "key": "matthewgilbert",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Matthew Gilbert",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=matthewgilbert",
            "name": "matthewgilbert",
            "key": "matthewgilbert",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Matthew Gilbert",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2135/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@66a51e1d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d59b20[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31599f81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@187c1e11[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44931ede[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2aa3fb7d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@577bdc3f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2f8fdc57[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73b64296[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@467b378e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fe8815a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1e548194[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 12 19:04:26 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-12T19:03:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2135/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-02-12T14:01:31.000+0000",
        "updated": "2018-03-20T21:18:47.000+0000",
        "timeoriginalestimate": null,
        "description": "If you create a\u00a0{{Table}}\u00a0from a\u00a0{{DataFrame}}\u00a0of ints with a NaN value the NaN is improperly cast. Since pandas casts these to floats, when converted to a table the NaN is interpreted as an integer. This seems\u00a0like a bug since a known limitation in pandas (the inability to have null valued integers data) is taking precedence over arrow's functionality to store these as an IntArray with nulls.\r\n\r\n\u00a0\r\n{code}\r\nimport pyarrow as pa\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame({\"a\":[1, 2, pd.np.NaN]})\r\nschema = pa.schema([pa.field(\"a\", pa.int64(), nullable=True)])\r\ntable = pa.Table.from_pandas(df, schema=schema)\r\ntable[0]\r\n\r\n\r\n<pyarrow.lib.Column object at 0x7f2151d19c90>\r\nchunk 0: <pyarrow.lib.Int64Array object at 0x7f213bf356d8>\r\n[\r\n  1,\r\n  2,\r\n  -9223372036854775808\r\n]{code}\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] NaN values silently casted to int64 when passing explicit schema for conversion in Table.from_pandas",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380730",
                    "id": "16380730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T17:44:33.335+0000",
                    "updated": "2018-02-28T17:44:33.335+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380739",
                    "id": "16380739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171328251\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy-internal.h\n ##########\n @@ -76,16 +76,12 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n     TYPE_CASE(INT16, \"int16\")\n     TYPE_CASE(INT32, \"int32\")\n     TYPE_CASE(INT64, \"int64\")\n-#if (NPY_INT64 != NPY_LONGLONG)\n \n Review comment:\n   Note those inequalities wouldn't have the expected effect because of how macro expansion works (and I don't know how to fix that :-().\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T17:48:06.633+0000",
                    "updated": "2018-02-28T17:48:06.633+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380740",
                    "id": "16380740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171328251\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy-internal.h\n ##########\n @@ -76,16 +76,12 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n     TYPE_CASE(INT16, \"int16\")\n     TYPE_CASE(INT32, \"int32\")\n     TYPE_CASE(INT64, \"int64\")\n-#if (NPY_INT64 != NPY_LONGLONG)\n \n Review comment:\n   Note those inequalities wouldn't have the expected effect because of how macro expansion works (and I don't know how to fix that :-().\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T17:48:22.181+0000",
                    "updated": "2018-02-28T17:48:22.181+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380754",
                    "id": "16380754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171330518\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy-internal.h\n ##########\n @@ -76,16 +76,12 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n     TYPE_CASE(INT16, \"int16\")\n     TYPE_CASE(INT32, \"int32\")\n     TYPE_CASE(INT64, \"int64\")\n-#if (NPY_INT64 != NPY_LONGLONG)\n \n Review comment:\n   For some reason (macro expansion?) these `#if`s wouldn't work correctly here, even though `NPY_INT64` is defined to `NPY_LONG`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T17:55:42.596+0000",
                    "updated": "2018-02-28T17:55:42.596+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380774",
                    "id": "16380774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171334171\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy-internal.h\n ##########\n @@ -76,16 +76,12 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n     TYPE_CASE(INT16, \"int16\")\n     TYPE_CASE(INT32, \"int32\")\n     TYPE_CASE(INT64, \"int64\")\n-#if (NPY_INT64 != NPY_LONGLONG)\n \n Review comment:\n   Hmm, actually, that must be because `NPY_LONGLONG` is not a macro...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T18:08:39.373+0000",
                    "updated": "2018-02-28T18:08:39.373+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380876",
                    "id": "16380876",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou closed pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/numpy-internal.h b/cpp/src/arrow/python/numpy-internal.h\nindex 6c9c871a1..eee4fa46d 100644\n--- a/cpp/src/arrow/python/numpy-internal.h\n+++ b/cpp/src/arrow/python/numpy-internal.h\n@@ -65,6 +65,9 @@ class Ndarray1DIndexer {\n   int64_t stride_;\n };\n \n+// Handling of Numpy Types by their static numbers\n+// (the NPY_TYPES enum and related defines)\n+\n static inline std::string GetNumPyTypeName(int npy_type) {\n #define TYPE_CASE(TYPE, NAME) \\\n   case NPY_##TYPE:            \\\n@@ -76,14 +79,20 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n     TYPE_CASE(INT16, \"int16\")\n     TYPE_CASE(INT32, \"int32\")\n     TYPE_CASE(INT64, \"int64\")\n-#if (NPY_INT64 != NPY_LONGLONG)\n+#if !NPY_INT32_IS_INT\n+    TYPE_CASE(INT, \"intc\")\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n     TYPE_CASE(LONGLONG, \"longlong\")\n #endif\n     TYPE_CASE(UINT8, \"uint8\")\n     TYPE_CASE(UINT16, \"uint16\")\n     TYPE_CASE(UINT32, \"uint32\")\n     TYPE_CASE(UINT64, \"uint64\")\n-#if (NPY_UINT64 != NPY_ULONGLONG)\n+#if !NPY_INT32_IS_INT\n+    TYPE_CASE(UINT, \"uintc\")\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n     TYPE_CASE(ULONGLONG, \"ulonglong\")\n #endif\n     TYPE_CASE(FLOAT16, \"float16\")\n@@ -97,9 +106,48 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n   }\n \n #undef TYPE_CASE\n-  return \"unrecognized type in GetNumPyTypeName\";\n+  std::stringstream ss;\n+  ss << \"unrecognized type (\" << npy_type << \") in GetNumPyTypeName\";\n+  return ss.str();\n }\n \n+#define TYPE_VISIT_INLINE(TYPE) \\\n+  case NPY_##TYPE:              \\\n+    return visitor->template Visit<NPY_##TYPE>(arr);\n+\n+template <typename VISITOR>\n+inline Status VisitNumpyArrayInline(PyArrayObject* arr, VISITOR* visitor) {\n+  switch (PyArray_TYPE(arr)) {\n+    TYPE_VISIT_INLINE(BOOL);\n+    TYPE_VISIT_INLINE(INT8);\n+    TYPE_VISIT_INLINE(UINT8);\n+    TYPE_VISIT_INLINE(INT16);\n+    TYPE_VISIT_INLINE(UINT16);\n+    TYPE_VISIT_INLINE(INT32);\n+    TYPE_VISIT_INLINE(UINT32);\n+    TYPE_VISIT_INLINE(INT64);\n+    TYPE_VISIT_INLINE(UINT64);\n+#if !NPY_INT32_IS_INT\n+    TYPE_VISIT_INLINE(INT);\n+    TYPE_VISIT_INLINE(UINT);\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n+    TYPE_VISIT_INLINE(LONGLONG);\n+    TYPE_VISIT_INLINE(ULONGLONG);\n+#endif\n+    TYPE_VISIT_INLINE(FLOAT16);\n+    TYPE_VISIT_INLINE(FLOAT32);\n+    TYPE_VISIT_INLINE(FLOAT64);\n+    TYPE_VISIT_INLINE(DATETIME);\n+    TYPE_VISIT_INLINE(OBJECT);\n+  }\n+  std::stringstream ss;\n+  ss << \"NumPy type not implemented: \" << GetNumPyTypeName(PyArray_TYPE(arr));\n+  return Status::NotImplemented(ss.str());\n+}\n+\n+#undef TYPE_VISIT_INLINE\n+\n }  // namespace py\n }  // namespace arrow\n \ndiff --git a/cpp/src/arrow/python/numpy_interop.h b/cpp/src/arrow/python/numpy_interop.h\nindex 8c569e232..3531263a6 100644\n--- a/cpp/src/arrow/python/numpy_interop.h\n+++ b/cpp/src/arrow/python/numpy_interop.h\n@@ -43,6 +43,31 @@\n #include <numpy/arrayscalars.h>\n #include <numpy/ufuncobject.h>\n \n+// A bit subtle.  Numpy has 5 canonical integer types:\n+// (or, rather, type pairs: signed and unsigned)\n+//   NPY_BYTE, NPY_SHORT, NPY_INT, NPY_LONG, NPY_LONGLONG\n+// It also has 4 fixed-width integer aliases.\n+// When mapping Arrow integer types to these 4 fixed-width aliases,\n+// we always miss one of the canonical types (even though it may\n+// have the same width as one of the aliases).\n+// Which one depends on the platform...\n+// On a LP64 system, NPY_INT64 maps to NPY_LONG and\n+// NPY_LONGLONG needs to be handled separately.\n+// On a LLP64 system, NPY_INT32 maps to NPY_LONG and\n+// NPY_INT needs to be handled separately.\n+\n+#if NPY_BITSOF_LONG == 32 && NPY_BITSOF_LONGLONG == 64\n+#define NPY_INT64_IS_LONG_LONG 1\n+#else\n+#define NPY_INT64_IS_LONG_LONG 0\n+#endif\n+\n+#if NPY_BITSOF_INT == 32 && NPY_BITSOF_LONG == 64\n+#define NPY_INT32_IS_INT 1\n+#else\n+#define NPY_INT32_IS_INT 0\n+#endif\n+\n namespace arrow {\n namespace py {\n \ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 23418ad92..c474fc383 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -94,6 +94,25 @@ inline bool PyObject_is_integer(PyObject* obj) {\n   return (!PyBool_Check(obj)) && PyArray_IsIntegerScalar(obj);\n }\n \n+Status CheckFlatNumpyArray(PyArrayObject* numpy_array, int np_type) {\n+  if (PyArray_NDIM(numpy_array) != 1) {\n+    return Status::Invalid(\"only handle 1-dimensional arrays\");\n+  }\n+\n+  const int received_type = PyArray_DESCR(numpy_array)->type_num;\n+  if (received_type != np_type) {\n+    std::stringstream ss;\n+    ss << \"trying to convert NumPy type \" << GetNumPyTypeName(np_type) << \" but got \"\n+       << GetNumPyTypeName(received_type);\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  return Status::OK();\n+}\n+\n+// ----------------------------------------------------------------------\n+// Conversion from NumPy-in-Pandas to Arrow null bitmap\n+\n template <int TYPE>\n inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   typedef internal::npy_traits<TYPE> traits;\n@@ -113,6 +132,66 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(InitNullBitmap(PyArray_SIZE(arr)));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_data_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // XXX it's the same as NumPyConverter::InitNullBitmap()\n+  Status InitNullBitmap(int64_t length) {\n+    int64_t null_bytes = BitUtil::BytesForBits(length);\n+\n+    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n+\n+    null_bitmap_data_ = null_bitmap_->mutable_data();\n+    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  NumPyNullsConverter(MemoryPool* pool, PyArrayObject* arr,\n+                      bool use_pandas_null_sentinels)\n+      : pool_(pool),\n+        arr_(arr),\n+        use_pandas_null_sentinels_(use_pandas_null_sentinels),\n+        null_bitmap_data_(nullptr),\n+        null_count_(0) {}\n+\n+  MemoryPool* pool_;\n+  PyArrayObject* arr_;\n+  bool use_pandas_null_sentinels_;\n+  std::shared_ptr<ResizableBuffer> null_bitmap_;\n+  uint8_t* null_bitmap_data_;\n+  int64_t null_count_;\n+};\n+\n // Returns null count\n int64_t MaskToBitmap(PyArrayObject* mask, int64_t length, uint8_t* bitmap) {\n   int64_t null_count = 0;\n@@ -129,22 +208,6 @@ int64_t MaskToBitmap(PyArrayObject* mask, int64_t length, uint8_t* bitmap) {\n   return null_count;\n }\n \n-Status CheckFlatNumpyArray(PyArrayObject* numpy_array, int np_type) {\n-  if (PyArray_NDIM(numpy_array) != 1) {\n-    return Status::Invalid(\"only handle 1-dimensional arrays\");\n-  }\n-\n-  const int received_type = PyArray_DESCR(numpy_array)->type_num;\n-  if (received_type != np_type) {\n-    std::stringstream ss;\n-    ss << \"trying to convert NumPy type \" << GetNumPyTypeName(np_type) << \" but got \"\n-       << GetNumPyTypeName(received_type);\n-    return Status::Invalid(ss.str());\n-  }\n-\n-  return Status::OK();\n-}\n-\n }  // namespace\n \n /// Append as many string objects from NumPy arrays to a `StringBuilder` as we\n@@ -419,31 +482,18 @@ class NumPyConverter {\n \n   template <typename ArrowType>\n   Status VisitNative() {\n-    using traits = internal::arrow_traits<ArrowType::type_id>;\n-\n-    const bool null_sentinels_possible =\n-        // NumPy has a NaT type\n-        (ArrowType::type_id == Type::TIMESTAMP || ArrowType::type_id == Type::DATE32) ||\n-\n-        // Observing pandas's null sentinels\n-        ((use_pandas_null_sentinels_ && traits::supports_nulls));\n-\n-    if (mask_ != nullptr || null_sentinels_possible) {\n+    int64_t null_count = 0;\n+    if (mask_ != nullptr) {\n       RETURN_NOT_OK(InitNullBitmap());\n+      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    } else {\n+      RETURN_NOT_OK(NumPyNullsConverter::Convert(pool_, arr_, use_pandas_null_sentinels_,\n+                                                 &null_bitmap_, &null_count));\n     }\n \n     std::shared_ptr<Buffer> data;\n     RETURN_NOT_OK(ConvertData<ArrowType>(&data));\n \n-    int64_t null_count = 0;\n-    if (mask_ != nullptr) {\n-      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n-    } else if (null_sentinels_possible) {\n-      // TODO(wesm): this presumes the NumPy C type and arrow C type are the\n-      // same\n-      null_count = ValuesToBitmap<traits::npy_type>(arr_, null_bitmap_data_);\n-    }\n-\n     auto arr_data = ArrayData::Make(type_, length_, {null_bitmap_, data}, null_count, 0);\n     return PushArray(arr_data);\n   }\ndiff --git a/cpp/src/arrow/python/type_traits.h b/cpp/src/arrow/python/type_traits.h\nindex 587b27c9a..2ae345ba4 100644\n--- a/cpp/src/arrow/python/type_traits.h\n+++ b/cpp/src/arrow/python/type_traits.h\n@@ -34,6 +34,9 @@ namespace arrow {\n namespace py {\n namespace internal {\n \n+//\n+// Type traits for Numpy -> Arrow equivalence\n+//\n template <int TYPE>\n struct npy_traits {};\n \n@@ -68,7 +71,11 @@ NPY_INT_DECL(UINT16, UInt16, uint16_t);\n NPY_INT_DECL(UINT32, UInt32, uint32_t);\n NPY_INT_DECL(UINT64, UInt64, uint64_t);\n \n-#if NPY_INT64 != NPY_LONGLONG\n+#if !NPY_INT32_IS_INT && NPY_BITSOF_INT == 32\n+NPY_INT_DECL(INT, Int32, int32_t);\n+NPY_INT_DECL(UINT, UInt32, uint32_t);\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG && NPY_BITSOF_LONGLONG == 64\n NPY_INT_DECL(LONGLONG, Int64, int64_t);\n NPY_INT_DECL(ULONGLONG, UInt64, uint64_t);\n #endif\n@@ -127,8 +134,14 @@ template <>\n struct npy_traits<NPY_OBJECT> {\n   typedef PyObject* value_type;\n   static constexpr bool supports_nulls = true;\n+\n+  static inline bool isnull(PyObject* v) { return v != Py_None; }\n };\n \n+//\n+// Type traits for Arrow -> Numpy equivalence\n+// Note *supports_nulls* means the equivalent Numpy type support nulls\n+//\n template <int TYPE>\n struct arrow_traits {};\n \n@@ -252,30 +265,27 @@ struct arrow_traits<Type::BINARY> {\n static inline int NumPyTypeSize(int npy_type) {\n   switch (npy_type) {\n     case NPY_BOOL:\n-      return 1;\n     case NPY_INT8:\n-      return 1;\n-    case NPY_INT16:\n-      return 2;\n-    case NPY_INT32:\n-      return 4;\n-    case NPY_INT64:\n-      return 8;\n-#if (NPY_INT64 != NPY_LONGLONG)\n-    case NPY_LONGLONG:\n-      return 8;\n-#endif\n     case NPY_UINT8:\n       return 1;\n+    case NPY_INT16:\n     case NPY_UINT16:\n       return 2;\n+    case NPY_INT32:\n     case NPY_UINT32:\n       return 4;\n+    case NPY_INT64:\n     case NPY_UINT64:\n       return 8;\n-#if (NPY_UINT64 != NPY_ULONGLONG)\n+#if !NPY_INT32_IS_INT\n+    case NPY_INT:\n+    case NPY_UINT:\n+      return NPY_BITSOF_INT / 8;\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n+    case NPY_LONGLONG:\n     case NPY_ULONGLONG:\n-      return 8;\n+      return NPY_BITSOF_LONGLONG / 8;\n #endif\n     case NPY_FLOAT16:\n       return 2;\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 6e68dd961..859d816dd 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -501,6 +501,14 @@ def test_float_nulls(self):\n         result = table.to_pandas()\n         tm.assert_frame_equal(result, ex_frame)\n \n+    def test_float_nulls_to_ints(self):\n+        # ARROW-2135\n+        df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n+        schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n+        table = pa.Table.from_pandas(df, schema=schema)\n+        assert table[0].to_pylist() == [1, 2, None]\n+        tm.assert_frame_equal(df, table.to_pandas())\n+\n     def test_integer_no_nulls(self):\n         data = OrderedDict()\n         fields = []\n@@ -526,6 +534,20 @@ def test_integer_no_nulls(self):\n         schema = pa.schema(fields)\n         _check_pandas_roundtrip(df, expected_schema=schema)\n \n+    def test_all_integer_types(self):\n+        # Test all Numpy integer aliases\n+        data = OrderedDict()\n+        fields = []\n+\n+        numpy_dtypes = ['i1', 'i2', 'i4', 'i8', 'u1', 'u2', 'u4', 'u8',\n+                        'byte', 'ubyte', 'short', 'ushort', 'intc', 'uintc',\n+                        'long', 'longlong', 'ulonglong']\n+\n+        for dtype in numpy_dtypes:\n+            data[dtype] = np.arange(12, dtype=dtype)\n+        df = pd.DataFrame(data)\n+        _check_pandas_roundtrip(df)\n+\n     def test_integer_with_nulls(self):\n         # pandas requires upcast to float dtype\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T19:16:05.309+0000",
                    "updated": "2018-02-28T19:16:05.309+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380877",
                    "id": "16380877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T19:16:06.722+0000",
                    "updated": "2018-02-28T19:16:06.722+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380986",
                    "id": "16380986",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171373762\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +132,66 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(InitNullBitmap(PyArray_SIZE(arr)));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_data_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // XXX it's the same as NumPyConverter::InitNullBitmap()\n+  Status InitNullBitmap(int64_t length) {\n+    int64_t null_bytes = BitUtil::BytesForBits(length);\n+\n+    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n+\n+    null_bitmap_data_ = null_bitmap_->mutable_data();\n+    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n \n Review comment:\n   `std::fill(null_bitmap_data_, null_bitmap_data_ + null_bytes, 0)` is a bit more idiomatic.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:22:28.514+0000",
                    "updated": "2018-02-28T20:22:28.514+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380988",
                    "id": "16380988",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171374018\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +132,66 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(InitNullBitmap(PyArray_SIZE(arr)));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_data_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // XXX it's the same as NumPyConverter::InitNullBitmap()\n+  Status InitNullBitmap(int64_t length) {\n+    int64_t null_bytes = BitUtil::BytesForBits(length);\n+\n+    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n+\n+    null_bitmap_data_ = null_bitmap_->mutable_data();\n+    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n \n Review comment:\n   Hmm, perhaps. This is really a copy/paste of `NumPyConverter::InitNullBitmap()`...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:23:31.373+0000",
                    "updated": "2018-02-28T20:23:31.373+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380990",
                    "id": "16380990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171374360\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -501,6 +501,14 @@ def test_float_nulls(self):\n         result = table.to_pandas()\n         tm.assert_frame_equal(result, ex_frame)\n \n+    def test_float_nulls_to_ints(self):\n+        # ARROW-2135\n+        df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n+        schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n+        table = pa.Table.from_pandas(df, schema=schema)\n+        assert table[0].to_pylist() == [1, 2, None]\n+        tm.assert_frame_equal(df, table.to_pandas())\n \n Review comment:\n   Is there already a test for things like `a = [1.0, 2.0, 3.1, np.nan]` where a user passes in an integer type?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:25:00.406+0000",
                    "updated": "2018-02-28T20:25:00.406+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380993",
                    "id": "16380993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171374755\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -501,6 +501,14 @@ def test_float_nulls(self):\n         result = table.to_pandas()\n         tm.assert_frame_equal(result, ex_frame)\n \n+    def test_float_nulls_to_ints(self):\n+        # ARROW-2135\n+        df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n+        schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n+        table = pa.Table.from_pandas(df, schema=schema)\n+        assert table[0].to_pylist() == [1, 2, None]\n+        tm.assert_frame_equal(df, table.to_pandas())\n \n Review comment:\n   You mean for the truncation behavior? Let me look.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:26:23.983+0000",
                    "updated": "2018-02-28T20:26:23.983+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380996",
                    "id": "16380996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171374895\n \n \n\n ##########\n File path: cpp/src/arrow/python/type_traits.h\n ##########\n @@ -127,8 +134,14 @@ template <>\n struct npy_traits<NPY_OBJECT> {\n   typedef PyObject* value_type;\n   static constexpr bool supports_nulls = true;\n+\n+  static inline bool isnull(PyObject* v) { return v != Py_None; }\n \n Review comment:\n   `inline` is redundant here: http://en.cppreference.com/w/cpp/language/inline.\r\n   \r\n   > A function defined entirely inside a class/struct/union definition, whether it's a member function or a non-member friend function, is implicitly an inline function.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:27:00.843+0000",
                    "updated": "2018-02-28T20:27:00.843+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380997",
                    "id": "16380997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171375029\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -501,6 +501,14 @@ def test_float_nulls(self):\n         result = table.to_pandas()\n         tm.assert_frame_equal(result, ex_frame)\n \n+    def test_float_nulls_to_ints(self):\n+        # ARROW-2135\n+        df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n+        schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n+        table = pa.Table.from_pandas(df, schema=schema)\n+        assert table[0].to_pylist() == [1, 2, None]\n+        tm.assert_frame_equal(df, table.to_pandas())\n \n Review comment:\n   No, I don't think so. I'm not sure we specify the truncation mode anywhere either?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:27:30.942+0000",
                    "updated": "2018-02-28T20:27:30.942+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16380998",
                    "id": "16380998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171375361\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +132,66 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(InitNullBitmap(PyArray_SIZE(arr)));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_data_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // XXX it's the same as NumPyConverter::InitNullBitmap()\n+  Status InitNullBitmap(int64_t length) {\n+    int64_t null_bytes = BitUtil::BytesForBits(length);\n+\n+    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n+\n+    null_bitmap_data_ = null_bitmap_->mutable_data();\n+    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  NumPyNullsConverter(MemoryPool* pool, PyArrayObject* arr,\n+                      bool use_pandas_null_sentinels)\n+      : pool_(pool),\n+        arr_(arr),\n+        use_pandas_null_sentinels_(use_pandas_null_sentinels),\n+        null_bitmap_data_(nullptr),\n+        null_count_(0) {}\n+\n+  MemoryPool* pool_;\n+  PyArrayObject* arr_;\n+  bool use_pandas_null_sentinels_;\n+  std::shared_ptr<ResizableBuffer> null_bitmap_;\n+  uint8_t* null_bitmap_data_;\n \n Review comment:\n   At some point we may want to have an STL-compatible view class that makes interacting with iterators constructs in the STL much easier. We have a lot of code that is manually handling iteration using a size/count and a buffer.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:28:53.686+0000",
                    "updated": "2018-02-28T20:28:53.686+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381004",
                    "id": "16381004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171375887\n \n \n\n ##########\n File path: cpp/src/arrow/python/type_traits.h\n ##########\n @@ -127,8 +134,14 @@ template <>\n struct npy_traits<NPY_OBJECT> {\n   typedef PyObject* value_type;\n   static constexpr bool supports_nulls = true;\n+\n+  static inline bool isnull(PyObject* v) { return v != Py_None; }\n \n Review comment:\n   I see. This is really using the same convention as the rest of the file, though.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:30:45.437+0000",
                    "updated": "2018-02-28T20:30:45.437+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381023",
                    "id": "16381023",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171379107\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +132,66 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(InitNullBitmap(PyArray_SIZE(arr)));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_data_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // XXX it's the same as NumPyConverter::InitNullBitmap()\n+  Status InitNullBitmap(int64_t length) {\n+    int64_t null_bytes = BitUtil::BytesForBits(length);\n+\n+    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n+\n+    null_bitmap_data_ = null_bitmap_->mutable_data();\n+    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  NumPyNullsConverter(MemoryPool* pool, PyArrayObject* arr,\n+                      bool use_pandas_null_sentinels)\n+      : pool_(pool),\n+        arr_(arr),\n+        use_pandas_null_sentinels_(use_pandas_null_sentinels),\n+        null_bitmap_data_(nullptr),\n+        null_count_(0) {}\n+\n+  MemoryPool* pool_;\n+  PyArrayObject* arr_;\n+  bool use_pandas_null_sentinels_;\n+  std::shared_ptr<ResizableBuffer> null_bitmap_;\n+  uint8_t* null_bitmap_data_;\n \n Review comment:\n   Which iterators are you thinking about? Do you mean the ndarray 1d iterator?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T20:43:34.080+0000",
                    "updated": "2018-02-28T20:43:34.080+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381079",
                    "id": "16381079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171397159\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +132,66 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(InitNullBitmap(PyArray_SIZE(arr)));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_data_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // XXX it's the same as NumPyConverter::InitNullBitmap()\n+  Status InitNullBitmap(int64_t length) {\n+    int64_t null_bytes = BitUtil::BytesForBits(length);\n+\n+    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n+\n+    null_bitmap_data_ = null_bitmap_->mutable_data();\n+    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  NumPyNullsConverter(MemoryPool* pool, PyArrayObject* arr,\n+                      bool use_pandas_null_sentinels)\n+      : pool_(pool),\n+        arr_(arr),\n+        use_pandas_null_sentinels_(use_pandas_null_sentinels),\n+        null_bitmap_data_(nullptr),\n+        null_count_(0) {}\n+\n+  MemoryPool* pool_;\n+  PyArrayObject* arr_;\n+  bool use_pandas_null_sentinels_;\n+  std::shared_ptr<ResizableBuffer> null_bitmap_;\n+  uint8_t* null_bitmap_data_;\n \n Review comment:\n   That's one, though I added `begin()`/`end()` for that in #1651.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T21:52:04.903+0000",
                    "updated": "2018-02-28T21:52:04.903+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381081",
                    "id": "16381081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171397391\n \n \n\n ##########\n File path: cpp/src/arrow/python/type_traits.h\n ##########\n @@ -127,8 +134,14 @@ template <>\n struct npy_traits<NPY_OBJECT> {\n   typedef PyObject* value_type;\n   static constexpr bool supports_nulls = true;\n+\n+  static inline bool isnull(PyObject* v) { return v != Py_None; }\n \n Review comment:\n   Hm, so that's also called `isnull`. Shouldn't that mean `v == Py_None`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T21:52:58.190+0000",
                    "updated": "2018-02-28T21:52:58.190+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381087",
                    "id": "16381087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171398041\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +132,66 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(InitNullBitmap(PyArray_SIZE(arr)));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_data_);\n+    }\n+    return Status::OK();\n+  }\n+\n+  // XXX it's the same as NumPyConverter::InitNullBitmap()\n+  Status InitNullBitmap(int64_t length) {\n+    int64_t null_bytes = BitUtil::BytesForBits(length);\n+\n+    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n+\n+    null_bitmap_data_ = null_bitmap_->mutable_data();\n+    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n \n Review comment:\n   Possibly time for a subclass then?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T21:55:16.084+0000",
                    "updated": "2018-02-28T21:55:16.084+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381228",
                    "id": "16381228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171420485\n \n \n\n ##########\n File path: cpp/src/arrow/python/type_traits.h\n ##########\n @@ -127,8 +134,14 @@ template <>\n struct npy_traits<NPY_OBJECT> {\n   typedef PyObject* value_type;\n   static constexpr bool supports_nulls = true;\n+\n+  static inline bool isnull(PyObject* v) { return v != Py_None; }\n \n Review comment:\n   Probably needs a test as well since it isn't failing.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-28T23:29:53.340+0000",
                    "updated": "2018-02-28T23:29:53.340+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381742",
                    "id": "16381742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171503669\n \n \n\n ##########\n File path: cpp/src/arrow/python/type_traits.h\n ##########\n @@ -127,8 +134,14 @@ template <>\n struct npy_traits<NPY_OBJECT> {\n   typedef PyObject* value_type;\n   static constexpr bool supports_nulls = true;\n+\n+  static inline bool isnull(PyObject* v) { return v != Py_None; }\n \n Review comment:\n   Nice catch :-) I'm not sure how to test it. Defining `isnull` is necessary for compiling, but that path isn't taken at runtime as object arrays are handled separately.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T09:35:49.086+0000",
                    "updated": "2018-03-01T09:35:49.086+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381773",
                    "id": "16381773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171509916\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +145,55 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Always treat Numpy's NaT as null\n+        TYPE == NPY_DATETIME ||\n \n Review comment:\n   By the way, I don't know what that is, but this is required to have the tests pass. Why do we always treat NaT as null but not floating-point NaN? @wesm \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T09:59:28.530+0000",
                    "updated": "2018-03-01T09:59:28.530+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16381816",
                    "id": "16381816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#issuecomment-369552237\n \n \n   I addressed some review comments now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T10:43:40.369+0000",
                    "updated": "2018-03-01T10:43:40.369+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16382205",
                    "id": "16382205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#issuecomment-369636633\n \n \n   AppVeyor build at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.157\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T15:54:25.884+0000",
                    "updated": "2018-03-01T15:54:25.884+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16382734",
                    "id": "16382734",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171710263\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -501,6 +501,14 @@ def test_float_nulls(self):\n         result = table.to_pandas()\n         tm.assert_frame_equal(result, ex_frame)\n \n+    def test_float_nulls_to_ints(self):\n+        # ARROW-2135\n+        df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n+        schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n+        table = pa.Table.from_pandas(df, schema=schema)\n+        assert table[0].to_pylist() == [1, 2, None]\n+        tm.assert_frame_equal(df, table.to_pandas())\n \n Review comment:\n   It looks like it's a hard cast:\r\n   \r\n   ```\r\n   In [7]: pa.array([1, 2, 3.190, np.nan], type=pa.int64())\r\n   Out[6]:\r\n   <pyarrow.lib.Int64Array object at 0x7f537e42dd68>\r\n   [\r\n     1,\r\n     2,\r\n     3,\r\n     NA\r\n   ]\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T22:10:42.457+0000",
                    "updated": "2018-03-01T22:10:42.457+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16382735",
                    "id": "16382735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171710346\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -501,6 +501,14 @@ def test_float_nulls(self):\n         result = table.to_pandas()\n         tm.assert_frame_equal(result, ex_frame)\n \n+    def test_float_nulls_to_ints(self):\n+        # ARROW-2135\n+        df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n+        schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n+        table = pa.Table.from_pandas(df, schema=schema)\n+        assert table[0].to_pylist() == [1, 2, None]\n+        tm.assert_frame_equal(df, table.to_pandas())\n \n Review comment:\n   That's fine. Was just wondering.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T22:11:00.959+0000",
                    "updated": "2018-03-01T22:11:00.959+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16382750",
                    "id": "16382750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#discussion_r171711960\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -113,6 +145,55 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Always treat Numpy's NaT as null\n+        TYPE == NPY_DATETIME ||\n \n Review comment:\n   AFAIU There's no other way to interpret `NaT` other than `NULL` (unless there's a standard that defines it in a different way than \"missing\"). nan is part of the IEEE floating point specification (as I'm sure you know) and it has a different meaning than null.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T22:17:41.453+0000",
                    "updated": "2018-03-01T22:17:41.453+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16391179",
                    "id": "16391179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#issuecomment-371474232\n \n \n   Rebased.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-08T12:33:20.325+0000",
                    "updated": "2018-03-08T12:33:20.325+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16391241",
                    "id": "16391241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#issuecomment-371484306\n \n \n   AppVeyor at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.175\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-08T13:19:57.355+0000",
                    "updated": "2018-03-08T13:19:57.355+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16395730",
                    "id": "16395730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1681\n[https://github.com/apache/arrow/pull/1681]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-12T19:03:22.246+0000",
                    "updated": "2018-03-12T19:03:22.246+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16395731",
                    "id": "16395731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/numpy-internal.h b/cpp/src/arrow/python/numpy-internal.h\nindex 8d4308065..7672861d4 100644\n--- a/cpp/src/arrow/python/numpy-internal.h\n+++ b/cpp/src/arrow/python/numpy-internal.h\n@@ -68,6 +68,9 @@ class Ndarray1DIndexer {\n   int64_t stride_;\n };\n \n+// Handling of Numpy Types by their static numbers\n+// (the NPY_TYPES enum and related defines)\n+\n static inline std::string GetNumPyTypeName(int npy_type) {\n #define TYPE_CASE(TYPE, NAME) \\\n   case NPY_##TYPE:            \\\n@@ -79,14 +82,20 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n     TYPE_CASE(INT16, \"int16\")\n     TYPE_CASE(INT32, \"int32\")\n     TYPE_CASE(INT64, \"int64\")\n-#if (NPY_INT64 != NPY_LONGLONG)\n+#if !NPY_INT32_IS_INT\n+    TYPE_CASE(INT, \"intc\")\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n     TYPE_CASE(LONGLONG, \"longlong\")\n #endif\n     TYPE_CASE(UINT8, \"uint8\")\n     TYPE_CASE(UINT16, \"uint16\")\n     TYPE_CASE(UINT32, \"uint32\")\n     TYPE_CASE(UINT64, \"uint64\")\n-#if (NPY_UINT64 != NPY_ULONGLONG)\n+#if !NPY_INT32_IS_INT\n+    TYPE_CASE(UINT, \"uintc\")\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n     TYPE_CASE(ULONGLONG, \"ulonglong\")\n #endif\n     TYPE_CASE(FLOAT16, \"float16\")\n@@ -100,9 +109,48 @@ static inline std::string GetNumPyTypeName(int npy_type) {\n   }\n \n #undef TYPE_CASE\n-  return \"unrecognized type in GetNumPyTypeName\";\n+  std::stringstream ss;\n+  ss << \"unrecognized type (\" << npy_type << \") in GetNumPyTypeName\";\n+  return ss.str();\n }\n \n+#define TYPE_VISIT_INLINE(TYPE) \\\n+  case NPY_##TYPE:              \\\n+    return visitor->template Visit<NPY_##TYPE>(arr);\n+\n+template <typename VISITOR>\n+inline Status VisitNumpyArrayInline(PyArrayObject* arr, VISITOR* visitor) {\n+  switch (PyArray_TYPE(arr)) {\n+    TYPE_VISIT_INLINE(BOOL);\n+    TYPE_VISIT_INLINE(INT8);\n+    TYPE_VISIT_INLINE(UINT8);\n+    TYPE_VISIT_INLINE(INT16);\n+    TYPE_VISIT_INLINE(UINT16);\n+    TYPE_VISIT_INLINE(INT32);\n+    TYPE_VISIT_INLINE(UINT32);\n+    TYPE_VISIT_INLINE(INT64);\n+    TYPE_VISIT_INLINE(UINT64);\n+#if !NPY_INT32_IS_INT\n+    TYPE_VISIT_INLINE(INT);\n+    TYPE_VISIT_INLINE(UINT);\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n+    TYPE_VISIT_INLINE(LONGLONG);\n+    TYPE_VISIT_INLINE(ULONGLONG);\n+#endif\n+    TYPE_VISIT_INLINE(FLOAT16);\n+    TYPE_VISIT_INLINE(FLOAT32);\n+    TYPE_VISIT_INLINE(FLOAT64);\n+    TYPE_VISIT_INLINE(DATETIME);\n+    TYPE_VISIT_INLINE(OBJECT);\n+  }\n+  std::stringstream ss;\n+  ss << \"NumPy type not implemented: \" << GetNumPyTypeName(PyArray_TYPE(arr));\n+  return Status::NotImplemented(ss.str());\n+}\n+\n+#undef TYPE_VISIT_INLINE\n+\n }  // namespace py\n }  // namespace arrow\n \ndiff --git a/cpp/src/arrow/python/numpy_interop.h b/cpp/src/arrow/python/numpy_interop.h\nindex 8c569e232..0715c66c5 100644\n--- a/cpp/src/arrow/python/numpy_interop.h\n+++ b/cpp/src/arrow/python/numpy_interop.h\n@@ -43,6 +43,31 @@\n #include <numpy/arrayscalars.h>\n #include <numpy/ufuncobject.h>\n \n+// A bit subtle. Numpy has 5 canonical integer types:\n+// (or, rather, type pairs: signed and unsigned)\n+//   NPY_BYTE, NPY_SHORT, NPY_INT, NPY_LONG, NPY_LONGLONG\n+// It also has 4 fixed-width integer aliases.\n+// When mapping Arrow integer types to these 4 fixed-width aliases,\n+// we always miss one of the canonical types (even though it may\n+// have the same width as one of the aliases).\n+// Which one depends on the platform...\n+// On a LP64 system, NPY_INT64 maps to NPY_LONG and\n+// NPY_LONGLONG needs to be handled separately.\n+// On a LLP64 system, NPY_INT32 maps to NPY_LONG and\n+// NPY_INT needs to be handled separately.\n+\n+#if NPY_BITSOF_LONG == 32 && NPY_BITSOF_LONGLONG == 64\n+#define NPY_INT64_IS_LONG_LONG 1\n+#else\n+#define NPY_INT64_IS_LONG_LONG 0\n+#endif\n+\n+#if NPY_BITSOF_INT == 32 && NPY_BITSOF_LONG == 64\n+#define NPY_INT32_IS_INT 1\n+#else\n+#define NPY_INT32_IS_INT 0\n+#endif\n+\n namespace arrow {\n namespace py {\n \ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 04a71c1f6..6ddc4a7be 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -84,6 +84,38 @@ inline bool PyObject_is_integer(PyObject* obj) {\n   return !PyBool_Check(obj) && PyArray_IsIntegerScalar(obj);\n }\n \n+Status CheckFlatNumpyArray(PyArrayObject* numpy_array, int np_type) {\n+  if (PyArray_NDIM(numpy_array) != 1) {\n+    return Status::Invalid(\"only handle 1-dimensional arrays\");\n+  }\n+\n+  const int received_type = PyArray_DESCR(numpy_array)->type_num;\n+  if (received_type != np_type) {\n+    std::stringstream ss;\n+    ss << \"trying to convert NumPy type \" << GetNumPyTypeName(np_type) << \" but got \"\n+       << GetNumPyTypeName(received_type);\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status AllocateNullBitmap(MemoryPool* pool, int64_t length,\n+                          std::shared_ptr<ResizableBuffer>* out) {\n+  int64_t null_bytes = BitUtil::BytesForBits(length);\n+  std::shared_ptr<ResizableBuffer> null_bitmap;\n+\n+  null_bitmap = std::make_shared<PoolBuffer>(pool);\n+  RETURN_NOT_OK(null_bitmap->Resize(null_bytes));\n+\n+  memset(null_bitmap->mutable_data(), 0, static_cast<size_t>(null_bytes));\n+  *out = null_bitmap;\n+  return Status::OK();\n+}\n+\n+// ----------------------------------------------------------------------\n+// Conversion from NumPy-in-Pandas to Arrow null bitmap\n+\n template <int TYPE>\n inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   typedef internal::npy_traits<TYPE> traits;\n@@ -103,6 +135,55 @@ inline int64_t ValuesToBitmap(PyArrayObject* arr, uint8_t* bitmap) {\n   return null_count;\n }\n \n+class NumPyNullsConverter {\n+ public:\n+  /// Convert the given array's null values to a null bitmap.\n+  /// The null bitmap is only allocated if null values are ever possible.\n+  static Status Convert(MemoryPool* pool, PyArrayObject* arr,\n+                        bool use_pandas_null_sentinels,\n+                        std::shared_ptr<ResizableBuffer>* out_null_bitmap_,\n+                        int64_t* out_null_count) {\n+    NumPyNullsConverter converter(pool, arr, use_pandas_null_sentinels);\n+    RETURN_NOT_OK(VisitNumpyArrayInline(arr, &converter));\n+    *out_null_bitmap_ = converter.null_bitmap_;\n+    *out_null_count = converter.null_count_;\n+    return Status::OK();\n+  }\n+\n+  template <int TYPE>\n+  Status Visit(PyArrayObject* arr) {\n+    typedef internal::npy_traits<TYPE> traits;\n+\n+    const bool null_sentinels_possible =\n+        // Always treat Numpy's NaT as null\n+        TYPE == NPY_DATETIME ||\n+        // Observing pandas's null sentinels\n+        (use_pandas_null_sentinels_ && traits::supports_nulls);\n+\n+    if (null_sentinels_possible) {\n+      RETURN_NOT_OK(AllocateNullBitmap(pool_, PyArray_SIZE(arr), &null_bitmap_));\n+      null_count_ = ValuesToBitmap<TYPE>(arr, null_bitmap_->mutable_data());\n+    }\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  NumPyNullsConverter(MemoryPool* pool, PyArrayObject* arr,\n+                      bool use_pandas_null_sentinels)\n+      : pool_(pool),\n+        arr_(arr),\n+        use_pandas_null_sentinels_(use_pandas_null_sentinels),\n+        null_bitmap_data_(nullptr),\n+        null_count_(0) {}\n+\n+  MemoryPool* pool_;\n+  PyArrayObject* arr_;\n+  bool use_pandas_null_sentinels_;\n+  std::shared_ptr<ResizableBuffer> null_bitmap_;\n+  uint8_t* null_bitmap_data_;\n+  int64_t null_count_;\n+};\n+\n // Returns null count\n int64_t MaskToBitmap(PyArrayObject* mask, int64_t length, uint8_t* bitmap) {\n   int64_t null_count = 0;\n@@ -119,22 +200,6 @@ int64_t MaskToBitmap(PyArrayObject* mask, int64_t length, uint8_t* bitmap) {\n   return null_count;\n }\n \n-Status CheckFlatNumpyArray(PyArrayObject* numpy_array, int np_type) {\n-  if (PyArray_NDIM(numpy_array) != 1) {\n-    return Status::Invalid(\"only handle 1-dimensional arrays\");\n-  }\n-\n-  const int received_type = PyArray_DESCR(numpy_array)->type_num;\n-  if (received_type != np_type) {\n-    std::stringstream ss;\n-    ss << \"trying to convert NumPy type \" << GetNumPyTypeName(np_type) << \" but got \"\n-       << GetNumPyTypeName(received_type);\n-    return Status::Invalid(ss.str());\n-  }\n-\n-  return Status::OK();\n-}\n-\n }  // namespace\n \n /// Append as many string objects from NumPy arrays to a `StringBuilder` as we\n@@ -301,7 +366,9 @@ class NumPyConverter {\n         dtype_(PyArray_DESCR(arr_)),\n         mask_(nullptr),\n         use_pandas_null_sentinels_(use_pandas_null_sentinels),\n-        decimal_type_() {\n+        decimal_type_(),\n+        null_bitmap_data_(nullptr),\n+        null_count_(0) {\n     if (mo != nullptr && mo != Py_None) {\n       mask_ = reinterpret_cast<PyArrayObject*>(mo);\n     }\n@@ -356,14 +423,8 @@ class NumPyConverter {\n \n  protected:\n   Status InitNullBitmap() {\n-    int64_t null_bytes = BitUtil::BytesForBits(length_);\n-\n-    null_bitmap_ = std::make_shared<PoolBuffer>(pool_);\n-    RETURN_NOT_OK(null_bitmap_->Resize(null_bytes));\n-\n+    RETURN_NOT_OK(AllocateNullBitmap(pool_, length_, &null_bitmap_));\n     null_bitmap_data_ = null_bitmap_->mutable_data();\n-    memset(null_bitmap_data_, 0, static_cast<size_t>(null_bytes));\n-\n     return Status::OK();\n   }\n \n@@ -414,32 +475,18 @@ class NumPyConverter {\n \n   template <typename ArrowType>\n   Status VisitNative() {\n-    using traits = internal::arrow_traits<ArrowType::type_id>;\n-\n-    const bool null_sentinels_possible =\n-        // NumPy has a NaT type\n-        (ArrowType::type_id == Type::TIMESTAMP || ArrowType::type_id == Type::DATE32) ||\n-\n-        // Observing pandas's null sentinels\n-        ((use_pandas_null_sentinels_ && traits::supports_nulls));\n-\n-    if (mask_ != nullptr || null_sentinels_possible) {\n+    if (mask_ != nullptr) {\n       RETURN_NOT_OK(InitNullBitmap());\n+      null_count_ = MaskToBitmap(mask_, length_, null_bitmap_data_);\n+    } else {\n+      RETURN_NOT_OK(NumPyNullsConverter::Convert(pool_, arr_, use_pandas_null_sentinels_,\n+                                                 &null_bitmap_, &null_count_));\n     }\n \n     std::shared_ptr<Buffer> data;\n     RETURN_NOT_OK(ConvertData<ArrowType>(&data));\n \n-    int64_t null_count = 0;\n-    if (mask_ != nullptr) {\n-      null_count = MaskToBitmap(mask_, length_, null_bitmap_data_);\n-    } else if (null_sentinels_possible) {\n-      // TODO(wesm): this presumes the NumPy C type and arrow C type are the\n-      // same\n-      null_count = ValuesToBitmap<traits::npy_type>(arr_, null_bitmap_data_);\n-    }\n-\n-    auto arr_data = ArrayData::Make(type_, length_, {null_bitmap_, data}, null_count, 0);\n+    auto arr_data = ArrayData::Make(type_, length_, {null_bitmap_, data}, null_count_, 0);\n     return PushArray(arr_data);\n   }\n \n@@ -493,6 +540,7 @@ class NumPyConverter {\n \n   std::shared_ptr<ResizableBuffer> null_bitmap_;\n   uint8_t* null_bitmap_data_;\n+  int64_t null_count_;\n };\n \n Status NumPyConverter::Convert() {\n@@ -659,12 +707,10 @@ inline Status NumPyConverter::ConvertData<Date32Type>(std::shared_ptr<Buffer>* d\n       Status s = StaticCastBuffer<int64_t, int32_t>(**data, length_, pool_, data);\n       RETURN_NOT_OK(s);\n     } else {\n-      // TODO(wesm): This is redundant, and recomputed in VisitNative()\n-      const int64_t null_count = ValuesToBitmap<NPY_DATETIME>(arr_, null_bitmap_data_);\n-\n       RETURN_NOT_OK(NumPyDtypeToArrow(reinterpret_cast<PyObject*>(dtype_), &input_type));\n       if (!input_type->Equals(*type_)) {\n-        RETURN_NOT_OK(CastBuffer(input_type, *data, length_, null_bitmap_, null_count,\n+        // The null bitmap was already computed in VisitNative()\n+        RETURN_NOT_OK(CastBuffer(input_type, *data, length_, null_bitmap_, null_count_,\n                                  type_, pool_, data));\n       }\n     }\ndiff --git a/cpp/src/arrow/python/type_traits.h b/cpp/src/arrow/python/type_traits.h\nindex 587b27c9a..ff39aad67 100644\n--- a/cpp/src/arrow/python/type_traits.h\n+++ b/cpp/src/arrow/python/type_traits.h\n@@ -34,6 +34,9 @@ namespace arrow {\n namespace py {\n namespace internal {\n \n+//\n+// Type traits for Numpy -> Arrow equivalence\n+//\n template <int TYPE>\n struct npy_traits {};\n \n@@ -68,7 +71,11 @@ NPY_INT_DECL(UINT16, UInt16, uint16_t);\n NPY_INT_DECL(UINT32, UInt32, uint32_t);\n NPY_INT_DECL(UINT64, UInt64, uint64_t);\n \n-#if NPY_INT64 != NPY_LONGLONG\n+#if !NPY_INT32_IS_INT && NPY_BITSOF_INT == 32\n+NPY_INT_DECL(INT, Int32, int32_t);\n+NPY_INT_DECL(UINT, UInt32, uint32_t);\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG && NPY_BITSOF_LONGLONG == 64\n NPY_INT_DECL(LONGLONG, Int64, int64_t);\n NPY_INT_DECL(ULONGLONG, UInt64, uint64_t);\n #endif\n@@ -127,8 +134,14 @@ template <>\n struct npy_traits<NPY_OBJECT> {\n   typedef PyObject* value_type;\n   static constexpr bool supports_nulls = true;\n+\n+  static inline bool isnull(PyObject* v) { return v == Py_None; }\n };\n \n+//\n+// Type traits for Arrow -> Numpy equivalence\n+// Note *supports_nulls* means the equivalent Numpy type support nulls\n+//\n template <int TYPE>\n struct arrow_traits {};\n \n@@ -252,30 +265,27 @@ struct arrow_traits<Type::BINARY> {\n static inline int NumPyTypeSize(int npy_type) {\n   switch (npy_type) {\n     case NPY_BOOL:\n-      return 1;\n     case NPY_INT8:\n-      return 1;\n-    case NPY_INT16:\n-      return 2;\n-    case NPY_INT32:\n-      return 4;\n-    case NPY_INT64:\n-      return 8;\n-#if (NPY_INT64 != NPY_LONGLONG)\n-    case NPY_LONGLONG:\n-      return 8;\n-#endif\n     case NPY_UINT8:\n       return 1;\n+    case NPY_INT16:\n     case NPY_UINT16:\n       return 2;\n+    case NPY_INT32:\n     case NPY_UINT32:\n       return 4;\n+    case NPY_INT64:\n     case NPY_UINT64:\n       return 8;\n-#if (NPY_UINT64 != NPY_ULONGLONG)\n+#if !NPY_INT32_IS_INT\n+    case NPY_INT:\n+    case NPY_UINT:\n+      return NPY_BITSOF_INT / 8;\n+#endif\n+#if !NPY_INT64_IS_LONG_LONG\n+    case NPY_LONGLONG:\n     case NPY_ULONGLONG:\n-      return 8;\n+      return NPY_BITSOF_LONGLONG / 8;\n #endif\n     case NPY_FLOAT16:\n       return 2;\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 5abc026bf..aef3dca12 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -501,6 +501,14 @@ def test_float_nulls(self):\n         result = table.to_pandas()\n         tm.assert_frame_equal(result, ex_frame)\n \n+    def test_float_nulls_to_ints(self):\n+        # ARROW-2135\n+        df = pd.DataFrame({\"a\": [1.0, 2.0, pd.np.NaN]})\n+        schema = pa.schema([pa.field(\"a\", pa.int16(), nullable=True)])\n+        table = pa.Table.from_pandas(df, schema=schema)\n+        assert table[0].to_pylist() == [1, 2, None]\n+        tm.assert_frame_equal(df, table.to_pandas())\n+\n     def test_integer_no_nulls(self):\n         data = OrderedDict()\n         fields = []\n@@ -526,6 +534,17 @@ def test_integer_no_nulls(self):\n         schema = pa.schema(fields)\n         _check_pandas_roundtrip(df, expected_schema=schema)\n \n+    def test_all_integer_types(self):\n+        # Test all Numpy integer aliases\n+        data = OrderedDict()\n+        numpy_dtypes = ['i1', 'i2', 'i4', 'i8', 'u1', 'u2', 'u4', 'u8',\n+                        'byte', 'ubyte', 'short', 'ushort', 'intc', 'uintc',\n+                        'int_', 'uint', 'longlong', 'ulonglong']\n+        for dtype in numpy_dtypes:\n+            data[dtype] = np.arange(12, dtype=dtype)\n+        df = pd.DataFrame(data)\n+        _check_pandas_roundtrip(df)\n+\n     def test_integer_with_nulls(self):\n         # pandas requires upcast to float dtype\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-12T19:03:23.739+0000",
                    "updated": "2018-03-12T19:03:23.739+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13137866/comment/16395732",
                    "id": "16395732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1681: ARROW-2135: [Python] Fix NaN conversion when casting from Numpy array\nURL: https://github.com/apache/arrow/pull/1681#issuecomment-372427204\n \n \n   see ARROW-2298 for adding an option about NaN conversions\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-12T19:04:26.513+0000",
                    "updated": "2018-03-12T19:04:26.513+0000"
                }
            ],
            "maxResults": 32,
            "total": 32,
            "startAt": 0
        },
        "customfield_12311820": "0|i3q2lr:",
        "customfield_12314139": null
    }
}