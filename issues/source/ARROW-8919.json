{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13307063",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063",
    "key": "ARROW-8919",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "compute",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589377",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589377",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12606021",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12606021",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13348506",
                    "key": "ARROW-11078",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348506",
                    "fields": {
                        "summary": "[C++] Implement autocasting in arithmetic compute kernels",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12606088",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12606088",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13348520",
                    "key": "ARROW-11080",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348520",
                    "fields": {
                        "summary": "[C++][Dataset] Improvements to implicit casting",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12589236",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589236",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13306892",
                    "key": "ARROW-8901",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306892",
                    "fields": {
                        "summary": "[C++] Reduce number of take kernels",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12589237",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589237",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13306919",
                    "key": "ARROW-8905",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306919",
                    "fields": {
                        "summary": "[C++] Collapse Take APIs from 8 to 1 or 2",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34200,
            "total": 34200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8919/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 57,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/540272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T17:58:58.993+0000",
                    "updated": "2021-01-22T17:58:58.993+0000",
                    "started": "2021-01-22T17:58:58.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540272",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/540273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#issuecomment-765587080\n\n\n   https://issues.apache.org/jira/browse/ARROW-8919\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T17:59:22.901+0000",
                    "updated": "2021-01-22T17:59:22.901+0000",
                    "started": "2021-01-22T17:59:22.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540273",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/540294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r562833164\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -744,3 +749,34 @@ Structural transforms\n * \\(2) For each value in the list child array, the index at which it is found\n   in the list array is appended to the output.  Nulls in the parent list array\n   are discarded.\n+\n+.. _common-numeric-type:\n+\n+Common numeric type\n+~~~~~~~~~~~~~~~~~~~\n+\n+The common numeric type of a set of input numeric types is the smallest numeric\n+type which can accommodate any value of any input. If any input is a floating\n+point type the common numeric type is the widest floating point type among the\n+inputs. Otherwise the common numeric type is integral, is signed if any input\n+is signed, and its width is the maximum width of any input. For example:\n+\n++-------------------+----------------------+-------------------------------------------+\n+| Input types       | Common numeric type  | Notes                                     |\n++===================+======================+===========================================+\n+| int32, int32      | int32                |                                           |\n++-------------------+----------------------+-------------------------------------------+\n+| int16, int32      | int32                | Max width is 32, promote LHS to int32     |\n++-------------------+----------------------+-------------------------------------------+\n+| uint16, uint32    | uint32               | All inputs unsigned, maintain unsigned    |\n++-------------------+----------------------+-------------------------------------------+\n+| uint16, int32     | int32                | One input signed, override unsigned       |\n++-------------------+----------------------+-------------------------------------------+\n+| int16, uint32     | int32                |                                           |\n\nReview comment:\n       A case that is not included here is (uint32, int32), which according to the paragraph above would give int32 as result, while it probably should be int64\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T18:40:29.399+0000",
                    "updated": "2021-01-22T18:40:29.399+0000",
                    "started": "2021-01-22T18:40:29.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540294",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/540317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r562854049\n\n\n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -18,32 +18,31 @@\n test_that(\"Addition\", {\n   a <- Array$create(c(1:4, NA_integer_))\n   expect_type_equal(a, int32())\n-  expect_type_equal(a + 4, int32())\n-  expect_equal(a + 4, Array$create(c(5:8, NA_integer_)))\n-  expect_identical(as.vector(a + 4), c(5:8, NA_integer_))\n+  expect_type_equal(a + 4L, int32())\n+  expect_type_equal(a + 4, float64())\n+  expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n+  expect_identical(as.vector(a + 4L), c(5:8, NA_integer_))\n   expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n   expect_vector(a + 4L, c(5:8, NA_integer_))\n   expect_equal(a + NA_integer_, Array$create(rep(NA_integer_, 5)))\n \n-  # overflow errors \u2014 this is slightly different from R's `NA` coercion when\n-  # overflowing, but better than the alternative of silently restarting\n-  casted <- a$cast(int8())\n-  expect_error(casted + 127)\n-  expect_error(casted + 200)\n+  a8 <- a$cast(int8())\n+  expect_type_equal(a8 + Scalar$create(1, int8()), int8())\n+  expect_type_equal(a8 + 127L, int32())\n+  expect_type_equal(a8 + 200L, int32())\n \n-  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-8919\")\n   expect_type_equal(a + 4.1, float64())\n   expect_equal(a + 4.1, Array$create(c(5.1, 6.1, 7.1, 8.1, NA_real_)))\n })\n \n test_that(\"Subtraction\", {\n   a <- Array$create(c(1:4, NA_integer_))\n-  expect_equal(a - 3, Array$create(c(-2:1, NA_integer_)))\n+  expect_equal(a - 3L, Array$create(c(-2:1, NA_integer_)))\n\nReview comment:\n       These tests aren't doing any autocasting so we should add some that do.\r\n   \r\n   Also would be interesting to add tests that do arithmetic with two arrays since we can support that more generally now.\n\n##########\nFile path: r/tests/testthat/test-dataset.R\n##########\n@@ -554,6 +554,7 @@ test_that(\"filter() on timestamp columns\", {\n   )\n \n   # Now with bare string date\n+  skip(\"Implement more aggressive implicit casting for scalars\")\n\nReview comment:\n       Is there a JIRA for this? \r\n   \r\n   I'm not sure this is about scalars per se (though that may be an issue/part of the \"best\" solution). This seems to be about timestamp-string comparison/ops.\n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -18,32 +18,31 @@\n test_that(\"Addition\", {\n   a <- Array$create(c(1:4, NA_integer_))\n   expect_type_equal(a, int32())\n-  expect_type_equal(a + 4, int32())\n-  expect_equal(a + 4, Array$create(c(5:8, NA_integer_)))\n-  expect_identical(as.vector(a + 4), c(5:8, NA_integer_))\n+  expect_type_equal(a + 4L, int32())\n+  expect_type_equal(a + 4, float64())\n+  expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n+  expect_identical(as.vector(a + 4L), c(5:8, NA_integer_))\n   expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n   expect_vector(a + 4L, c(5:8, NA_integer_))\n   expect_equal(a + NA_integer_, Array$create(rep(NA_integer_, 5)))\n \n-  # overflow errors \u2014 this is slightly different from R's `NA` coercion when\n-  # overflowing, but better than the alternative of silently restarting\n-  casted <- a$cast(int8())\n-  expect_error(casted + 127)\n-  expect_error(casted + 200)\n+  a8 <- a$cast(int8())\n+  expect_type_equal(a8 + Scalar$create(1, int8()), int8())\n+  expect_type_equal(a8 + 127L, int32())\n+  expect_type_equal(a8 + 200L, int32())\n\nReview comment:\n       (1) this should still have a comment explaining the different behavior\r\n   (2) we should assert the values too \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-22T19:22:10.205+0000",
                    "updated": "2021-01-22T19:22:10.205+0000",
                    "started": "2021-01-22T19:22:10.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "540317",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/541167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r563875620\n\n\n\n##########\nFile path: python/pyarrow/tests/parquet/test_dataset.py\n##########\n@@ -206,7 +206,7 @@ def test_filters_equivalency(tempdir, use_legacy_dataset):\n     dataset = pq.ParquetDataset(\n         base_path, filesystem=fs,\n         filters=[('integer', '=', 1), ('string', '!=', 'b'),\n-                 ('boolean', '==', True)],\n+                 ('boolean', '==', 'True')],\n\nReview comment:\n       Was this change needed? (it feels it shouldn't be)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-25T16:49:39.836+0000",
                    "updated": "2021-01-25T16:49:39.836+0000",
                    "started": "2021-01-25T16:49:39.836+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541167",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/541888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r563875620\n\n\n\n##########\nFile path: python/pyarrow/tests/parquet/test_dataset.py\n##########\n@@ -206,7 +206,7 @@ def test_filters_equivalency(tempdir, use_legacy_dataset):\n     dataset = pq.ParquetDataset(\n         base_path, filesystem=fs,\n         filters=[('integer', '=', 1), ('string', '!=', 'b'),\n-                 ('boolean', '==', True)],\n+                 ('boolean', '==', 'True')],\n\nReview comment:\n       Was this change needed? (it feels it shouldn't be)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T04:29:56.353+0000",
                    "updated": "2021-01-26T04:29:56.353+0000",
                    "started": "2021-01-26T04:29:56.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "541888",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/542181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#issuecomment-767549068\n\n\n   @bkietz Could you rebase this and fix conflicts?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-26T13:43:56.881+0000",
                    "updated": "2021-01-26T13:43:56.881+0000",
                    "started": "2021-01-26T13:43:56.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542181",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/542933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r565483217\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -744,3 +749,34 @@ Structural transforms\n * \\(2) For each value in the list child array, the index at which it is found\n   in the list array is appended to the output.  Nulls in the parent list array\n   are discarded.\n+\n+.. _common-numeric-type:\n+\n+Common numeric type\n+~~~~~~~~~~~~~~~~~~~\n+\n+The common numeric type of a set of input numeric types is the smallest numeric\n+type which can accommodate any value of any input. If any input is a floating\n+point type the common numeric type is the widest floating point type among the\n+inputs. Otherwise the common numeric type is integral, is signed if any input\n+is signed, and its width is the maximum width of any input. For example:\n+\n++-------------------+----------------------+-------------------------------------------+\n+| Input types       | Common numeric type  | Notes                                     |\n++===================+======================+===========================================+\n+| int32, int32      | int32                |                                           |\n++-------------------+----------------------+-------------------------------------------+\n+| int16, int32      | int32                | Max width is 32, promote LHS to int32     |\n++-------------------+----------------------+-------------------------------------------+\n+| uint16, uint32    | uint32               | All inputs unsigned, maintain unsigned    |\n++-------------------+----------------------+-------------------------------------------+\n+| uint16, int32     | int32                | One input signed, override unsigned       |\n++-------------------+----------------------+-------------------------------------------+\n+| int16, uint32     | int32                |                                           |\n\nReview comment:\n       I chose to preserve bit width to keep the implicitly cast intermediates a bit smaller (and therefore faster). The downside is direct comparison may raise: `pc.equal(pa.array([0], type='int32'), pa.array([2**31], type='uint32'))` would overflow when casting the RHS to `int32`.\r\n   \r\n   We can certainly use the rule you suggest instead, but note that integer overflow is still a danger: we have nowhere wider to go when comparing `int64, uint64`, and arithmetic can of course overflow as well.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-27T17:09:58.373+0000",
                    "updated": "2021-01-27T17:09:58.373+0000",
                    "started": "2021-01-27T17:09:58.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542933",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/542939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r565491144\n\n\n\n##########\nFile path: r/tests/testthat/test-dataset.R\n##########\n@@ -554,6 +554,7 @@ test_that(\"filter() on timestamp columns\", {\n   )\n \n   # Now with bare string date\n+  skip(\"Implement more aggressive implicit casting for scalars\")\n\nReview comment:\n       https://issues.apache.org/jira/browse/ARROW-11402\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-27T17:20:49.209+0000",
                    "updated": "2021-01-27T17:20:49.209+0000",
                    "started": "2021-01-27T17:20:49.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542939",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/542944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r565494233\n\n\n\n##########\nFile path: r/tests/testthat/test-dataset.R\n##########\n@@ -554,6 +554,7 @@ test_that(\"filter() on timestamp columns\", {\n   )\n \n   # Now with bare string date\n+  skip(\"Implement more aggressive implicit casting for scalars\")\n\nReview comment:\n       We could additionally decide that it's acceptable to compare strings to timestamps, for example by attempting to implicitly parse a string column as timestamps. I'm not sure we want to allow this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-27T17:25:07.035+0000",
                    "updated": "2021-01-27T17:25:07.035+0000",
                    "started": "2021-01-27T17:25:07.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542944",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/542949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r565498799\n\n\n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -18,32 +18,31 @@\n test_that(\"Addition\", {\n   a <- Array$create(c(1:4, NA_integer_))\n   expect_type_equal(a, int32())\n-  expect_type_equal(a + 4, int32())\n-  expect_equal(a + 4, Array$create(c(5:8, NA_integer_)))\n-  expect_identical(as.vector(a + 4), c(5:8, NA_integer_))\n+  expect_type_equal(a + 4L, int32())\n+  expect_type_equal(a + 4, float64())\n+  expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n+  expect_identical(as.vector(a + 4L), c(5:8, NA_integer_))\n   expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n   expect_vector(a + 4L, c(5:8, NA_integer_))\n   expect_equal(a + NA_integer_, Array$create(rep(NA_integer_, 5)))\n \n-  # overflow errors \u2014 this is slightly different from R's `NA` coercion when\n-  # overflowing, but better than the alternative of silently restarting\n-  casted <- a$cast(int8())\n-  expect_error(casted + 127)\n-  expect_error(casted + 200)\n+  a8 <- a$cast(int8())\n+  expect_type_equal(a8 + Scalar$create(1, int8()), int8())\n+  expect_type_equal(a8 + 127L, int32())\n+  expect_type_equal(a8 + 200L, int32())\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-27T17:31:31.136+0000",
                    "updated": "2021-01-27T17:31:31.136+0000",
                    "started": "2021-01-27T17:31:31.135+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542949",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/542964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r565513721\n\n\n\n##########\nFile path: r/tests/testthat/test-compute-arith.R\n##########\n@@ -18,32 +18,31 @@\n test_that(\"Addition\", {\n   a <- Array$create(c(1:4, NA_integer_))\n   expect_type_equal(a, int32())\n-  expect_type_equal(a + 4, int32())\n-  expect_equal(a + 4, Array$create(c(5:8, NA_integer_)))\n-  expect_identical(as.vector(a + 4), c(5:8, NA_integer_))\n+  expect_type_equal(a + 4L, int32())\n+  expect_type_equal(a + 4, float64())\n+  expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n+  expect_identical(as.vector(a + 4L), c(5:8, NA_integer_))\n   expect_equal(a + 4L, Array$create(c(5:8, NA_integer_)))\n   expect_vector(a + 4L, c(5:8, NA_integer_))\n   expect_equal(a + NA_integer_, Array$create(rep(NA_integer_, 5)))\n \n-  # overflow errors \u2014 this is slightly different from R's `NA` coercion when\n-  # overflowing, but better than the alternative of silently restarting\n-  casted <- a$cast(int8())\n-  expect_error(casted + 127)\n-  expect_error(casted + 200)\n+  a8 <- a$cast(int8())\n+  expect_type_equal(a8 + Scalar$create(1, int8()), int8())\n+  expect_type_equal(a8 + 127L, int32())\n+  expect_type_equal(a8 + 200L, int32())\n \n-  skip(\"autocasting should happen in compute kernels; R workaround fails on this ARROW-8919\")\n   expect_type_equal(a + 4.1, float64())\n   expect_equal(a + 4.1, Array$create(c(5.1, 6.1, 7.1, 8.1, NA_real_)))\n })\n \n test_that(\"Subtraction\", {\n   a <- Array$create(c(1:4, NA_integer_))\n-  expect_equal(a - 3, Array$create(c(-2:1, NA_integer_)))\n+  expect_equal(a - 3L, Array$create(c(-2:1, NA_integer_)))\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-27T17:52:48.717+0000",
                    "updated": "2021-01-27T17:52:48.717+0000",
                    "started": "2021-01-27T17:52:48.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "542964",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566200190\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -744,3 +749,41 @@ Structural transforms\n * \\(2) For each value in the list child array, the index at which it is found\n   in the list array is appended to the output.  Nulls in the parent list array\n   are discarded.\n+\n+.. _common-numeric-type:\n+\n+Common numeric type\n+~~~~~~~~~~~~~~~~~~~\n\nReview comment:\n       This is presented like another category of functions (same heading level as \"structural transforms\" above).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/test_util.cc\n##########\n@@ -173,5 +175,35 @@ void CheckScalarBinary(std::string func_name, std::shared_ptr<Array> left_input,\n   CheckScalar(std::move(func_name), {left_input, right_input}, expected, options);\n }\n \n+void CheckDispatchBest(std::string func_name, std::vector<ValueDescr> original_values,\n+                       std::vector<ValueDescr> expected_equivalent_values) {\n+  ASSERT_OK_AND_ASSIGN(auto function, GetFunctionRegistry()->GetFunction(func_name));\n+\n+  auto values = original_values;\n+  ASSERT_OK_AND_ASSIGN(auto actual_kernel, function->DispatchBest(&values));\n+\n+  ASSERT_OK_AND_ASSIGN(auto expected_kernel,\n+                       function->DispatchExact(expected_equivalent_values));\n+\n+  auto Format = [](const std::vector<ValueDescr>& descrs) {\n+    std::stringstream ss;\n+    ss << \"(\";\n+    for (size_t i = 0; i < descrs.size(); ++i) {\n+      if (i > 0) {\n+        ss << \", \";\n+      }\n+      ss << descrs[i].ToString();\n+    }\n+    ss << \")\";\n+    return ss.str();\n+  };\n+\n+  EXPECT_EQ(actual_kernel, expected_kernel)\n+      << \"DispatchBest\" << Format(original_values) << \" => \"\n+      << actual_kernel->signature->ToString() << \"\\n\"\n+      << \"DispatchExact\" << Format(expected_equivalent_values) << \" => \"\n+      << expected_kernel->signature->ToString();\n\nReview comment:\n       If either of `actual_kernel` or `expected_kernel` is null, this is going to crash?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/test_util.cc\n##########\n@@ -173,5 +175,35 @@ void CheckScalarBinary(std::string func_name, std::shared_ptr<Array> left_input,\n   CheckScalar(std::move(func_name), {left_input, right_input}, expected, options);\n }\n \n+void CheckDispatchBest(std::string func_name, std::vector<ValueDescr> original_values,\n+                       std::vector<ValueDescr> expected_equivalent_values) {\n+  ASSERT_OK_AND_ASSIGN(auto function, GetFunctionRegistry()->GetFunction(func_name));\n+\n+  auto values = original_values;\n+  ASSERT_OK_AND_ASSIGN(auto actual_kernel, function->DispatchBest(&values));\n+\n+  ASSERT_OK_AND_ASSIGN(auto expected_kernel,\n+                       function->DispatchExact(expected_equivalent_values));\n+\n+  auto Format = [](const std::vector<ValueDescr>& descrs) {\n+    std::stringstream ss;\n+    ss << \"(\";\n+    for (size_t i = 0; i < descrs.size(); ++i) {\n+      if (i > 0) {\n+        ss << \", \";\n+      }\n+      ss << descrs[i].ToString();\n+    }\n+    ss << \")\";\n+    return ss.str();\n+  };\n\nReview comment:\n       Didn't you define a `ValueDescr::ToString` that does this?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -403,6 +406,77 @@ class TestCast : public TestBase {\n   }\n };\n \n+TEST_F(TestCast, CanCast) {\n+  auto ExpectCanCast = [](std::shared_ptr<DataType> from,\n+                          std::vector<std::shared_ptr<DataType>> to_set,\n+                          bool expected = true) {\n+    for (auto to : to_set) {\n+      EXPECT_EQ(CanCast(*from, *to), expected) << \"  from: \" << from->ToString() << \"\\n\"\n+                                               << \"    to: \" << to->ToString();\n+    }\n+  };\n+\n+  auto ExpectCannotCast = [ExpectCanCast](std::shared_ptr<DataType> from,\n+                                          std::vector<std::shared_ptr<DataType>> to_set) {\n+    ExpectCanCast(from, to_set, /*expected=*/false);\n+  };\n+\n+  ExpectCanCast(null(), {boolean()});\n+  ExpectCanCast(null(), kNumericTypes);\n+  ExpectCanCast(null(), kBaseBinaryTypes);\n+  ExpectCanCast(\n+      null(), {date32(), date64(), time32(TimeUnit::MILLI), timestamp(TimeUnit::SECOND)});\n+  ExpectCanCast(dictionary(uint16(), null()), {null()});\n+\n+  ExpectCanCast(boolean(), {boolean()});\n+  ExpectCanCast(boolean(), kNumericTypes);\n+  ExpectCanCast(boolean(), {utf8(), large_utf8()});\n+  ExpectCanCast(dictionary(int32(), boolean()), {boolean()});\n+\n+  ExpectCannotCast(boolean(), {null()});\n+  ExpectCannotCast(boolean(), {binary(), large_binary()});\n+  ExpectCannotCast(boolean(), {date32(), date64(), time32(TimeUnit::MILLI),\n+                               timestamp(TimeUnit::SECOND)});\n+\n+  for (auto from_numeric : kNumericTypes) {\n+    ExpectCanCast(from_numeric, {boolean()});\n+    ExpectCanCast(from_numeric, kNumericTypes);\n+    ExpectCanCast(from_numeric, {utf8(), large_utf8()});\n+    ExpectCanCast(dictionary(int32(), from_numeric), {from_numeric});\n+\n+    ExpectCannotCast(from_numeric, {null()});\n+  }\n+\n+  for (auto from_base_binary : kBaseBinaryTypes) {\n+    ExpectCanCast(from_base_binary, {boolean()});\n+    ExpectCanCast(from_base_binary, kNumericTypes);\n+    ExpectCanCast(from_base_binary, kBaseBinaryTypes);\n+    ExpectCanCast(dictionary(int64(), from_base_binary), {from_base_binary});\n+\n+    // any cast which is valid for the dictionary is valid for the DictionaryArray\n+    ExpectCanCast(dictionary(uint32(), from_base_binary), kBaseBinaryTypes);\n+    ExpectCanCast(dictionary(int16(), from_base_binary), kNumericTypes);\n+\n+    ExpectCannotCast(from_base_binary, {null()});\n+  }\n+\n+  ExpectCanCast(utf8(), {timestamp(TimeUnit::MILLI)});\n+  ExpectCanCast(large_utf8(), {timestamp(TimeUnit::NANO)});\n+  ExpectCannotCast(timestamp(TimeUnit::MICRO),\n+                   kBaseBinaryTypes);  // no formatting supported\n+\n+  ExpectCannotCast(fixed_size_binary(3),\n+                   {fixed_size_binary(3)});  // FIXME missing identity cast\n+\n+  auto smallint = std::make_shared<SmallintType>();\n+  ASSERT_OK(RegisterExtensionType(smallint));\n+  ExpectCanCast(smallint, {int16()});  // cast storage\n+  ExpectCanCast(smallint,\n+                kNumericTypes);  // any cast which is valid for storage is supported\n+  ExpectCannotCast(null(), {smallint});  // FIXME missing common cast from null\n+  ASSERT_OK(UnregisterExtensionType(\"smallint\"));\n\nReview comment:\n       Use `ExtensionTypeGuard` to avoid side-effects in case of error or exception.\n\n##########\nFile path: cpp/src/arrow/compute/cast.cc\n##########\n@@ -225,13 +208,21 @@ Result<std::shared_ptr<CastFunction>> GetCastFunction(\n }\n \n bool CanCast(const DataType& from_type, const DataType& to_type) {\n-  // TODO\n   internal::EnsureInitCastTable();\n-  auto it = internal::g_cast_table.find(static_cast<int>(from_type.id()));\n+  auto it = internal::g_cast_table.find(static_cast<int>(to_type.id()));\n\nReview comment:\n       Ha!\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -124,7 +179,18 @@ Result<Datum> Function::Execute(const std::vector<Datum>& args,\n     inputs[i] = args[i].descr();\n   }\n \n-  ARROW_ASSIGN_OR_RAISE(auto kernel, DispatchExact(inputs));\n+  ARROW_ASSIGN_OR_RAISE(auto kernel, DispatchBest(&inputs));\n+  for (size_t i = 0; i != args.size(); ++i) {\n+    if (inputs[i] != args[i].descr()) {\n+      if (inputs[i].shape != args[i].shape()) {\n+        return Status::NotImplemented(\n+            \"Automatic broadcasting of scalars to arrays for function \", name());\n+      }\n+\n+      ARROW_ASSIGN_OR_RAISE(args[i], Cast(args[i], inputs[i].type));\n+    }\n+  }\n\nReview comment:\n       This logic (take a `vector<ValueDescr>` and accomodate a `vector<Datum>` to fit them) seems general enough to warrant exposing a helper for it? Perhaps in `cast.h`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -179,6 +179,121 @@ Result<ValueDescr> FirstType(KernelContext*, const std::vector<ValueDescr>& desc\n   return descrs[0];\n }\n \n+void EnsureDictionaryDecoded(std::vector<ValueDescr>* descrs) {\n+  for (ValueDescr& descr : *descrs) {\n+    if (descr.type->id() == Type::DICTIONARY) {\n+      descr.type = checked_cast<const DictionaryType&>(*descr.type).value_type();\n+    }\n+  }\n+}\n+\n+void ReplaceNullWithOtherType(std::vector<ValueDescr>* descrs) {\n+  DCHECK_EQ(descrs->size(), 2);\n+\n+  if (descrs->at(0).type->id() == Type::NA) {\n+    descrs->at(0).type = descrs->at(1).type;\n+    return;\n+  }\n+\n+  if (descrs->at(1).type->id() == Type::NA) {\n+    descrs->at(1).type = descrs->at(0).type;\n+    return;\n+  }\n+}\n+\n+void ReplaceTypes(const std::shared_ptr<DataType>& type,\n+                  std::vector<ValueDescr>* descrs) {\n+  for (auto& descr : *descrs) {\n+    descr.type = type;\n+  }\n+}\n+\n+std::shared_ptr<DataType> CommonNumeric(const std::vector<ValueDescr>& descrs) {\n+  for (const auto& descr : descrs) {\n+    auto id = descr.type->id();\n+    if (!is_floating(id) && !is_integer(id)) {\n+      // a common numeric type is only possible if all types are numeric\n+      return nullptr;\n+    }\n+  }\n+  for (const auto& descr : descrs) {\n+    if (descr.type->id() == Type::DOUBLE) return float64();\n+  }\n+  for (const auto& descr : descrs) {\n+    if (descr.type->id() == Type::FLOAT) return float32();\n+  }\n+\n+  bool at_least_one_signed = false;\n+  int max_width = 0;\n+\n+  for (const auto& descr : descrs) {\n+    auto id = descr.type->id();\n+    at_least_one_signed |= is_signed_integer(id);\n+    max_width = std::max(bit_width(id), max_width);\n+  }\n+\n+  if (max_width == 64) return at_least_one_signed ? int64() : uint64();\n+  if (max_width == 32) return at_least_one_signed ? int32() : uint32();\n\nReview comment:\n       But let's say you are given `{int32(), uint32()}`. Do you want to return `int64()` then?\r\n   (I guess it depends on the intended semantics and use cases)\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -744,3 +749,41 @@ Structural transforms\n * \\(2) For each value in the list child array, the index at which it is found\n   in the list array is appended to the output.  Nulls in the parent list array\n   are discarded.\n+\n+.. _common-numeric-type:\n+\n+Common numeric type\n+~~~~~~~~~~~~~~~~~~~\n+\n+The common numeric type of a set of input numeric types is the smallest numeric\n+type which can accommodate any value of any input. If any input is a floating\n+point type the common numeric type is the widest floating point type among the\n+inputs. Otherwise the common numeric type is integral, is signed if any input\n+is signed, and its width is the maximum width of any input. For example:\n+\n++-------------------+----------------------+-------------------------------------------+\n+| Input types       | Common numeric type  | Notes                                     |\n++===================+======================+===========================================+\n+| int32, int32      | int32                |                                           |\n++-------------------+----------------------+-------------------------------------------+\n+| uint32, int32     | int32                | One input signed, override unsigned       |\n++-------------------+----------------------+-------------------------------------------+\n+| int16, int32      | int32                | Max width is 32, promote LHS to int32     |\n++-------------------+----------------------+-------------------------------------------+\n+| uint16, uint32    | uint32               | All inputs unsigned, maintain unsigned    |\n++-------------------+----------------------+-------------------------------------------+\n+| uint16, int32     | int32                | One input signed, override unsigned       |\n++-------------------+----------------------+-------------------------------------------+\n+| int16, uint32     | int32                |                                           |\n++-------------------+----------------------+-------------------------------------------+\n+| float32, int32    | float32              | Promote RHS to float32                    |\n++-------------------+----------------------+-------------------------------------------+\n+| float32, float64  | float64              |                                           |\n++-------------------+----------------------+-------------------------------------------+\n+| float32, int64    | float32              | int64 is wider, still promotes to float32 |\n\nReview comment:\n       Ok, so this means `int32 is_in float32` may produce false positives because it will do `float32` comparisons even though the `int32 -> float32` conversion may lose precision?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/common.h\n##########\n@@ -51,4 +51,16 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+namespace compute {\n+namespace detail {\n+\n+/// \\brief Look up a kernel in a function. If no Kernel is found, nullptr is returned.\n+ARROW_EXPORT\n+const Kernel* DispatchExactImpl(const Function* func, const std::vector<ValueDescr>&);\n+\n+ARROW_EXPORT\n+Status NoMatchingKernel(const Function* func, const std::vector<ValueDescr>&);\n\nReview comment:\n       Where are these two functions defined? Did I miss something?\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -744,3 +749,41 @@ Structural transforms\n * \\(2) For each value in the list child array, the index at which it is found\n   in the list array is appended to the output.  Nulls in the parent list array\n   are discarded.\n+\n+.. _common-numeric-type:\n+\n+Common numeric type\n+~~~~~~~~~~~~~~~~~~~\n\nReview comment:\n       Instead, perhaps create a section about implicit casts?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_internal.cc\n##########\n@@ -149,17 +149,13 @@ void CastNumberToNumberUnsafe(Type::type in_type, Type::type out_type, const Dat\n // ----------------------------------------------------------------------\n \n void UnpackDictionary(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-  if (out->is_scalar()) {\n-    KERNEL_ASSIGN_OR_RAISE(*out, ctx,\n-                           batch[0].scalar_as<DictionaryScalar>().GetEncodedValue());\n-    return;\n-  }\n+  DCHECK(out->is_array());\n \n   DictionaryArray dict_arr(batch[0].array());\n   const CastOptions& options = checked_cast<const CastState&>(*ctx->state()).options;\n \n   const auto& dict_type = *dict_arr.dictionary()->type();\n-  if (!dict_type.Equals(options.to_type)) {\n+  if (!dict_type.Equals(options.to_type) && !CanCast(dict_type, *options.to_type)) {\n\nReview comment:\n       Hmm... do we need a version of `CanCast` that only returns true if safe casting is always possible?\n\n##########\nFile path: cpp/src/arrow/type_traits.h\n##########\n@@ -929,6 +929,46 @@ static inline bool is_fixed_width(Type::type type_id) {\n   return is_primitive(type_id) || is_dictionary(type_id) || is_fixed_size_binary(type_id);\n }\n \n+static inline int bit_width(Type::type type_id) {\n+  switch (type_id) {\n+    case Type::BOOL:\n+      return 1;\n+    case Type::UINT8:\n+    case Type::INT8:\n+      return 8;\n+    case Type::UINT16:\n+    case Type::INT16:\n+      return 16;\n+    case Type::UINT32:\n+    case Type::INT32:\n+    case Type::DATE32:\n+    case Type::TIME32:\n+      return 32;\n+    case Type::UINT64:\n+    case Type::INT64:\n+    case Type::DATE64:\n+    case Type::TIME64:\n+    case Type::TIMESTAMP:\n+    case Type::DURATION:\n+      return 64;\n+\n+    case Type::HALF_FLOAT:\n+      return 16;\n+    case Type::FLOAT:\n+      return 32;\n+    case Type::DOUBLE:\n+      return 64;\n+\n+    case Type::INTERVAL_MONTHS:\n+      return 32;\n+    case Type::INTERVAL_DAY_TIME:\n+      return 64;\n+    default:\n\nReview comment:\n       Do you want to add `DECIMAL128` and `DECIMAL256`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -264,10 +264,31 @@ ArrayKernelExec NumericEqualTypesBinary(detail::GetTypeId get_id) {\n   }\n }\n \n+struct ArithmeticFunction : ScalarFunction {\n+  using ScalarFunction::ScalarFunction;\n+\n+  Result<const Kernel*> DispatchBest(std::vector<ValueDescr>* values) const override {\n\nReview comment:\n       Why is there both this and `Function::DispatchBest`?\n\n##########\nFile path: cpp/src/arrow/dataset/expression_test.cc\n##########\n@@ -57,40 +57,91 @@ void ExpectResultsEqual(Actual&& actual, Expected&& expected) {\n   MaybeExpected maybe_expected(std::forward<Expected>(expected));\n \n   if (maybe_expected.ok()) {\n-    ASSERT_OK_AND_ASSIGN(auto actual, maybe_actual);\n-    EXPECT_EQ(actual, *maybe_expected);\n+    EXPECT_EQ(maybe_actual, maybe_expected);\n   } else {\n-    EXPECT_EQ(maybe_actual.status().code(), expected.status().code());\n-    EXPECT_NE(maybe_actual.status().message().find(expected.status().message()),\n-              std::string::npos)\n-        << \"  actual:   \" << maybe_actual.status() << \"\\n\"\n-        << \"  expected: \" << maybe_expected.status();\n+    EXPECT_RAISES_WITH_CODE_AND_MESSAGE_THAT(\n+        expected.status().code(), HasSubstr(expected.status().message()), maybe_actual);\n   }\n }\n \n+const auto no_change = util::nullopt;\n+\n TEST(ExpressionUtils, Comparison) {\n   auto Expect = [](Result<std::string> expected, Datum l, Datum r) {\n     ExpectResultsEqual(Comparison::Execute(l, r).Map(Comparison::GetName), expected);\n   };\n \n-  Datum zero(0), one(1), two(2), null(std::make_shared<Int32Scalar>()), str(\"hello\");\n+  Datum zero(0), one(1), two(2), null(std::make_shared<Int32Scalar>());\n+  Datum str(\"hello\"), bin(std::make_shared<BinaryScalar>(Buffer::FromString(\"hello\")));\n+  Datum dict_str(DictionaryScalar::Make(std::make_shared<Int32Scalar>(0),\n+                                        ArrayFromJSON(utf8(), R\"([\"a\", \"b\", \"c\"])\")));\n \n-  Status parse_failure = Status::Invalid(\"Failed to parse\");\n+  Status not_impl = Status::NotImplemented(\"no kernel matching input types\");\n \n   Expect(\"equal\", one, one);\n   Expect(\"less\", one, two);\n   Expect(\"greater\", one, zero);\n \n-  // cast RHS to LHS type; \"hello\" > \"1\"\n-  Expect(\"greater\", str, one);\n-  // cast RHS to LHS type; \"hello\" is not convertible to int\n-  Expect(parse_failure, one, str);\n-\n   Expect(\"na\", one, null);\n-  Expect(\"na\", str, null);\n   Expect(\"na\", null, one);\n-  // cast RHS to LHS type; \"hello\" is not convertible to int\n-  Expect(parse_failure, null, str);\n+\n+  // strings and ints are not comparable without explicit casts\n+  Expect(not_impl, str, one);\n+  Expect(not_impl, one, str);\n+  Expect(not_impl, str, null);  // not even null ints\n+\n+  // string -> binary implicit cast allowed\n+  Expect(\"equal\", str, bin);\n+  Expect(\"equal\", bin, str);\n+\n+  // dict_str -> string, implicit casts allowed\n+  Expect(\"less\", dict_str, str);\n+  Expect(\"less\", dict_str, bin);\n+}\n+\n+TEST(ExpressionUtils, StripOrderPreservingCasts) {\n+  auto Expect = [](Expression expr, util::optional<Expression> expected_stripped) {\n+    ASSERT_OK_AND_ASSIGN(expr, expr.Bind(*kBoringSchema));\n+    if (!expected_stripped) {\n+      expected_stripped = expr;\n+    } else {\n+      ASSERT_OK_AND_ASSIGN(expected_stripped, expected_stripped->Bind(*kBoringSchema));\n+    }\n+    EXPECT_EQ(Comparison::StripOrderPreservingCasts(expr), *expected_stripped);\n+  };\n+\n+  // Casting int to float preserves ordering.\n+  // For example, let\n+  //   a = 3, b = 2, assert(a > b)\n+  // After injecting a cast to float, this ordering still holds\n+  //   float(a) == 3.0, float(b) == 2.0, assert(float(a) > float(b))\n+  Expect(cast(field_ref(\"i32\"), float32()), field_ref(\"i32\"));\n+\n+  // Casting an integral type to a wider integral type preserves ordering.\n+  Expect(cast(field_ref(\"i32\"), int64()), field_ref(\"i32\"));\n+  Expect(cast(field_ref(\"i32\"), int32()), field_ref(\"i32\"));\n+  Expect(cast(field_ref(\"i32\"), int16()), no_change);\n+  Expect(cast(field_ref(\"i32\"), int8()), no_change);\n+\n+  Expect(cast(field_ref(\"u32\"), uint64()), field_ref(\"u32\"));\n+  Expect(cast(field_ref(\"u32\"), uint32()), field_ref(\"u32\"));\n+  Expect(cast(field_ref(\"u32\"), uint16()), no_change);\n+  Expect(cast(field_ref(\"u32\"), uint8()), no_change);\n+\n+  // Casting float to int can affect ordering.\n+  // For example, let\n+  //   a = 3.5, b = 3.0, assert(a > b)\n+  // After injecting a cast to integer, this ordering may no longer hold\n+  //   int(a) == 3, int(b) == 3, assert(!(int(a) > int(b)))\n+  Expect(cast(field_ref(\"f32\"), int32()), no_change);\n+\n+  // casting any float type to another preserves ordering\n+  Expect(cast(field_ref(\"f32\"), float64()), field_ref(\"f32\"));\n+  Expect(cast(field_ref(\"f64\"), float32()), field_ref(\"f64\"));\n\nReview comment:\n       ```python\r\n   >>> a = np.float64(2**47)\r\n   >>> b = a + 1\r\n   >>> b > a\r\n   True\r\n   >>> np.float32(b) > np.float32(a)    # both finite and equal\r\n   False\r\n   \r\n   >>> a = np.float64(1e40)\r\n   >>> b = a + 1e25\r\n   >>> b > a\r\n   True\r\n   >>> np.float32(b) > np.float32(a)    # both infinite\r\n   False\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/cast.cc\n##########\n@@ -225,13 +208,21 @@ Result<std::shared_ptr<CastFunction>> GetCastFunction(\n }\n \n bool CanCast(const DataType& from_type, const DataType& to_type) {\n-  // TODO\n   internal::EnsureInitCastTable();\n-  auto it = internal::g_cast_table.find(static_cast<int>(from_type.id()));\n+  auto it = internal::g_cast_table.find(static_cast<int>(to_type.id()));\n   if (it == internal::g_cast_table.end()) {\n     return false;\n   }\n-  return it->second->CanCastTo(to_type);\n+\n+  const CastFunction* function = it->second.get();\n+  DCHECK_EQ(function->out_type_id(), to_type.id());\n+\n+  for (auto from_id : function->in_type_ids()) {\n+    // XXX should probably check the output type as well\n\nReview comment:\n       What needs to be checked besides the type id?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -179,6 +179,121 @@ Result<ValueDescr> FirstType(KernelContext*, const std::vector<ValueDescr>& desc\n   return descrs[0];\n }\n \n+void EnsureDictionaryDecoded(std::vector<ValueDescr>* descrs) {\n+  for (ValueDescr& descr : *descrs) {\n+    if (descr.type->id() == Type::DICTIONARY) {\n+      descr.type = checked_cast<const DictionaryType&>(*descr.type).value_type();\n+    }\n+  }\n+}\n+\n+void ReplaceNullWithOtherType(std::vector<ValueDescr>* descrs) {\n+  DCHECK_EQ(descrs->size(), 2);\n+\n+  if (descrs->at(0).type->id() == Type::NA) {\n+    descrs->at(0).type = descrs->at(1).type;\n+    return;\n+  }\n+\n+  if (descrs->at(1).type->id() == Type::NA) {\n+    descrs->at(1).type = descrs->at(0).type;\n+    return;\n+  }\n+}\n+\n+void ReplaceTypes(const std::shared_ptr<DataType>& type,\n+                  std::vector<ValueDescr>* descrs) {\n+  for (auto& descr : *descrs) {\n+    descr.type = type;\n+  }\n+}\n+\n+std::shared_ptr<DataType> CommonNumeric(const std::vector<ValueDescr>& descrs) {\n+  for (const auto& descr : descrs) {\n+    auto id = descr.type->id();\n+    if (!is_floating(id) && !is_integer(id)) {\n+      // a common numeric type is only possible if all types are numeric\n\nReview comment:\n       Should you bail out for float16 too?\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -21,62 +21,66 @@\n #include <memory>\n #include <sstream>\n \n+#include \"arrow/compute/cast.h\"\n #include \"arrow/compute/exec.h\"\n #include \"arrow/compute/exec_internal.h\"\n+#include \"arrow/compute/kernels/common.h\"\n #include \"arrow/datum.h\"\n #include \"arrow/util/cpu_info.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace compute {\n \n static const FunctionDoc kEmptyFunctionDoc{};\n \n const FunctionDoc& FunctionDoc::Empty() { return kEmptyFunctionDoc; }\n \n-Status Function::CheckArity(int passed_num_args) const {\n-  if (arity_.is_varargs && passed_num_args < arity_.num_args) {\n-    return Status::Invalid(\"VarArgs function needs at least \", arity_.num_args,\n-                           \" arguments but kernel accepts only \", passed_num_args);\n-  } else if (!arity_.is_varargs && passed_num_args != arity_.num_args) {\n-    return Status::Invalid(\"Function accepts \", arity_.num_args,\n-                           \" arguments but kernel accepts \", passed_num_args);\n+Status CheckArityImpl(const Function* function, int passed_num_args,\n+                      const char* passed_num_args_label) {\n+  if (function->arity().is_varargs && passed_num_args < function->arity().num_args) {\n+    return Status::Invalid(\"VarArgs function needs at least \", function->arity().num_args,\n\nReview comment:\n       Add the function name here too?\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -102,20 +106,71 @@ Result<const KernelType*> DispatchExactImpl(const Function& func,\n     return kernel_matches[SimdLevel::NONE];\n   }\n \n-  return Status::NotImplemented(\"Function \", func.name(),\n-                                \" has no kernel matching input types \",\n-                                FormatArgTypes(values));\n+  return nullptr;\n+}\n+\n+const Kernel* DispatchExactImpl(const Function* func,\n+                                const std::vector<ValueDescr>& values) {\n+  if (func->kind() == Function::SCALAR) {\n+    return DispatchExactImpl(checked_cast<const ScalarFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::VECTOR) {\n+    return DispatchExactImpl(checked_cast<const VectorFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::SCALAR_AGGREGATE) {\n+    return DispatchExactImpl(\n+        checked_cast<const ScalarAggregateFunction*>(func)->kernels(), values);\n+  }\n+\n+  return nullptr;\n+}\n+\n+}  // namespace detail\n+\n+Result<const Kernel*> Function::DispatchExact(\n+    const std::vector<ValueDescr>& values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(values));\n+\n+  if (auto kernel = detail::DispatchExactImpl(this, values)) {\n+    return kernel;\n+  }\n+  return detail::NoMatchingKernel(this, values);\n+}\n+\n+Result<const Kernel*> Function::DispatchBest(std::vector<ValueDescr>* values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(*values));\n+\n+  // first try for an exact match\n+  if (auto kernel = detail::DispatchExactImpl(this, *values)) {\n+    return kernel;\n+  }\n+\n+  // XXX permit generic conversions here, for example dict -> decoded, null -> any?\n+  return DispatchExact(*values);\n\nReview comment:\n       `DispatchExact` will re-run exactly the same steps as above, right? What is the point of calling it?\n\n##########\nFile path: cpp/src/arrow/testing/gtest_util.h\n##########\n@@ -79,15 +79,18 @@\n     EXPECT_THAT(_st.ToString(), (matcher));                                           \\\n   } while (false)\n \n-#define ASSERT_OK(expr)                                                       \\\n-  do {                                                                        \\\n-    auto _res = (expr);                                                       \\\n-    ::arrow::Status _st = ::arrow::internal::GenericToStatus(_res);           \\\n-    if (!_st.ok()) {                                                          \\\n-      FAIL() << \"'\" ARROW_STRINGIFY(expr) \"' failed with \" << _st.ToString(); \\\n-    }                                                                         \\\n+#define EXPECT_RAISES_WITH_CODE_AND_MESSAGE_THAT(code, matcher, expr) \\\n+  do {                                                                \\\n+    auto _res = (expr);                                               \\\n+    ::arrow::Status _st = ::arrow::internal::GenericToStatus(_res);   \\\n+    EXPECT_EQ(_st.CodeAsString(), Status::CodeAsString(code));        \\\n+    EXPECT_THAT(_st.ToString(), (matcher));                           \\\n   } while (false)\n \n+#define ASSERT_OK(expr)                                                              \\\n+  for (::arrow::Status _st = ::arrow::internal::GenericToStatus((expr)); !_st.ok();) \\\n+  FAIL() << \"'\" ARROW_STRINGIFY(expr) \"' failed with \" << _st.ToString()\n\nReview comment:\n       Apart from being more cryptic, what does the `for` loop variant bring?\n\n##########\nFile path: cpp/src/arrow/compute/function.h\n##########\n@@ -162,7 +162,15 @@ class ARROW_EXPORT Function {\n   ///\n   /// NB: This function is overridden in CastFunction.\n   virtual Result<const Kernel*> DispatchExact(\n-      const std::vector<ValueDescr>& values) const = 0;\n+      const std::vector<ValueDescr>& values) const;\n+\n+  /// \\brief Return a best-match kernel that can execute the function given the argument\n+  /// types, after implicit casts are applied.\n+  ///\n+  /// \\param[in,out] values Argument types. An element may be modified to indicate that\n+  /// the returned kernel only approximately matches the input value descriptors; callers\n+  /// are responsible for casting inputs to the type and shape required by the kernel.\n\nReview comment:\n       Does it mean the caller must check again, for each `ValueDescr`, whether it changed or not? Perhaps there's a way to return that info, since `DispatchBest` obviously has to compute it.\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -102,20 +106,71 @@ Result<const KernelType*> DispatchExactImpl(const Function& func,\n     return kernel_matches[SimdLevel::NONE];\n   }\n \n-  return Status::NotImplemented(\"Function \", func.name(),\n-                                \" has no kernel matching input types \",\n-                                FormatArgTypes(values));\n+  return nullptr;\n+}\n+\n+const Kernel* DispatchExactImpl(const Function* func,\n+                                const std::vector<ValueDescr>& values) {\n+  if (func->kind() == Function::SCALAR) {\n+    return DispatchExactImpl(checked_cast<const ScalarFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::VECTOR) {\n+    return DispatchExactImpl(checked_cast<const VectorFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::SCALAR_AGGREGATE) {\n+    return DispatchExactImpl(\n+        checked_cast<const ScalarAggregateFunction*>(func)->kernels(), values);\n+  }\n+\n+  return nullptr;\n+}\n+\n+}  // namespace detail\n+\n+Result<const Kernel*> Function::DispatchExact(\n+    const std::vector<ValueDescr>& values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(values));\n+\n+  if (auto kernel = detail::DispatchExactImpl(this, values)) {\n+    return kernel;\n+  }\n+  return detail::NoMatchingKernel(this, values);\n+}\n+\n+Result<const Kernel*> Function::DispatchBest(std::vector<ValueDescr>* values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(*values));\n+\n+  // first try for an exact match\n+  if (auto kernel = detail::DispatchExactImpl(this, *values)) {\n+    return kernel;\n+  }\n+\n+  // XXX permit generic conversions here, for example dict -> decoded, null -> any?\n\nReview comment:\n       Do you intend to add the implicit casting logic to this PR?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -215,41 +215,41 @@ void AddBinaryToBinaryCast(CastFunction* func) {\n   auto out_ty = TypeTraits<OutType>::type_singleton();\n \n   DCHECK_OK(func->AddKernel(\n-      OutType::type_id, {in_ty}, out_ty,\n+      InType::type_id, {in_ty}, out_ty,\n\nReview comment:\n       Ouch.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_internal.cc\n##########\n@@ -149,17 +149,13 @@ void CastNumberToNumberUnsafe(Type::type in_type, Type::type out_type, const Dat\n // ----------------------------------------------------------------------\n \n void UnpackDictionary(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-  if (out->is_scalar()) {\n-    KERNEL_ASSIGN_OR_RAISE(*out, ctx,\n-                           batch[0].scalar_as<DictionaryScalar>().GetEncodedValue());\n-    return;\n-  }\n+  DCHECK(out->is_array());\n \n   DictionaryArray dict_arr(batch[0].array());\n   const CastOptions& options = checked_cast<const CastState&>(*ctx->state()).options;\n \n   const auto& dict_type = *dict_arr.dictionary()->type();\n-  if (!dict_type.Equals(options.to_type)) {\n+  if (!dict_type.Equals(options.to_type) && !CanCast(dict_type, *options.to_type)) {\n\nReview comment:\n       I definitely don't think we want implicit utf8->int32 casting, for example. Let's not reinvent PHP.\n\n##########\nFile path: cpp/src/arrow/dataset/expression_test.cc\n##########\n@@ -57,40 +57,91 @@ void ExpectResultsEqual(Actual&& actual, Expected&& expected) {\n   MaybeExpected maybe_expected(std::forward<Expected>(expected));\n \n   if (maybe_expected.ok()) {\n-    ASSERT_OK_AND_ASSIGN(auto actual, maybe_actual);\n-    EXPECT_EQ(actual, *maybe_expected);\n+    EXPECT_EQ(maybe_actual, maybe_expected);\n   } else {\n-    EXPECT_EQ(maybe_actual.status().code(), expected.status().code());\n-    EXPECT_NE(maybe_actual.status().message().find(expected.status().message()),\n-              std::string::npos)\n-        << \"  actual:   \" << maybe_actual.status() << \"\\n\"\n-        << \"  expected: \" << maybe_expected.status();\n+    EXPECT_RAISES_WITH_CODE_AND_MESSAGE_THAT(\n+        expected.status().code(), HasSubstr(expected.status().message()), maybe_actual);\n   }\n }\n \n+const auto no_change = util::nullopt;\n+\n TEST(ExpressionUtils, Comparison) {\n   auto Expect = [](Result<std::string> expected, Datum l, Datum r) {\n     ExpectResultsEqual(Comparison::Execute(l, r).Map(Comparison::GetName), expected);\n   };\n \n-  Datum zero(0), one(1), two(2), null(std::make_shared<Int32Scalar>()), str(\"hello\");\n+  Datum zero(0), one(1), two(2), null(std::make_shared<Int32Scalar>());\n+  Datum str(\"hello\"), bin(std::make_shared<BinaryScalar>(Buffer::FromString(\"hello\")));\n+  Datum dict_str(DictionaryScalar::Make(std::make_shared<Int32Scalar>(0),\n+                                        ArrayFromJSON(utf8(), R\"([\"a\", \"b\", \"c\"])\")));\n \n-  Status parse_failure = Status::Invalid(\"Failed to parse\");\n+  Status not_impl = Status::NotImplemented(\"no kernel matching input types\");\n \n   Expect(\"equal\", one, one);\n   Expect(\"less\", one, two);\n   Expect(\"greater\", one, zero);\n \n-  // cast RHS to LHS type; \"hello\" > \"1\"\n-  Expect(\"greater\", str, one);\n-  // cast RHS to LHS type; \"hello\" is not convertible to int\n-  Expect(parse_failure, one, str);\n-\n   Expect(\"na\", one, null);\n-  Expect(\"na\", str, null);\n   Expect(\"na\", null, one);\n-  // cast RHS to LHS type; \"hello\" is not convertible to int\n-  Expect(parse_failure, null, str);\n+\n+  // strings and ints are not comparable without explicit casts\n+  Expect(not_impl, str, one);\n+  Expect(not_impl, one, str);\n+  Expect(not_impl, str, null);  // not even null ints\n+\n+  // string -> binary implicit cast allowed\n+  Expect(\"equal\", str, bin);\n+  Expect(\"equal\", bin, str);\n+\n+  // dict_str -> string, implicit casts allowed\n+  Expect(\"less\", dict_str, str);\n+  Expect(\"less\", dict_str, bin);\n+}\n+\n+TEST(ExpressionUtils, StripOrderPreservingCasts) {\n+  auto Expect = [](Expression expr, util::optional<Expression> expected_stripped) {\n+    ASSERT_OK_AND_ASSIGN(expr, expr.Bind(*kBoringSchema));\n+    if (!expected_stripped) {\n+      expected_stripped = expr;\n+    } else {\n+      ASSERT_OK_AND_ASSIGN(expected_stripped, expected_stripped->Bind(*kBoringSchema));\n+    }\n+    EXPECT_EQ(Comparison::StripOrderPreservingCasts(expr), *expected_stripped);\n+  };\n+\n+  // Casting int to float preserves ordering.\n+  // For example, let\n+  //   a = 3, b = 2, assert(a > b)\n+  // After injecting a cast to float, this ordering still holds\n+  //   float(a) == 3.0, float(b) == 2.0, assert(float(a) > float(b))\n\nReview comment:\n       Are you sure?\r\n   ```python\r\n   >>> a = 1<<28\r\n   >>> b = a + 1\r\n   >>> b > a\r\n   True\r\n   >>> np.float32(b) > np.float32(a)\r\n   False\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/expression_test.cc\n##########\n@@ -57,40 +57,91 @@ void ExpectResultsEqual(Actual&& actual, Expected&& expected) {\n   MaybeExpected maybe_expected(std::forward<Expected>(expected));\n \n   if (maybe_expected.ok()) {\n-    ASSERT_OK_AND_ASSIGN(auto actual, maybe_actual);\n-    EXPECT_EQ(actual, *maybe_expected);\n+    EXPECT_EQ(maybe_actual, maybe_expected);\n   } else {\n-    EXPECT_EQ(maybe_actual.status().code(), expected.status().code());\n-    EXPECT_NE(maybe_actual.status().message().find(expected.status().message()),\n-              std::string::npos)\n-        << \"  actual:   \" << maybe_actual.status() << \"\\n\"\n-        << \"  expected: \" << maybe_expected.status();\n+    EXPECT_RAISES_WITH_CODE_AND_MESSAGE_THAT(\n+        expected.status().code(), HasSubstr(expected.status().message()), maybe_actual);\n   }\n }\n \n+const auto no_change = util::nullopt;\n+\n TEST(ExpressionUtils, Comparison) {\n   auto Expect = [](Result<std::string> expected, Datum l, Datum r) {\n     ExpectResultsEqual(Comparison::Execute(l, r).Map(Comparison::GetName), expected);\n   };\n \n-  Datum zero(0), one(1), two(2), null(std::make_shared<Int32Scalar>()), str(\"hello\");\n+  Datum zero(0), one(1), two(2), null(std::make_shared<Int32Scalar>());\n+  Datum str(\"hello\"), bin(std::make_shared<BinaryScalar>(Buffer::FromString(\"hello\")));\n+  Datum dict_str(DictionaryScalar::Make(std::make_shared<Int32Scalar>(0),\n+                                        ArrayFromJSON(utf8(), R\"([\"a\", \"b\", \"c\"])\")));\n \n-  Status parse_failure = Status::Invalid(\"Failed to parse\");\n+  Status not_impl = Status::NotImplemented(\"no kernel matching input types\");\n \n   Expect(\"equal\", one, one);\n   Expect(\"less\", one, two);\n   Expect(\"greater\", one, zero);\n \n-  // cast RHS to LHS type; \"hello\" > \"1\"\n-  Expect(\"greater\", str, one);\n-  // cast RHS to LHS type; \"hello\" is not convertible to int\n-  Expect(parse_failure, one, str);\n-\n   Expect(\"na\", one, null);\n-  Expect(\"na\", str, null);\n   Expect(\"na\", null, one);\n-  // cast RHS to LHS type; \"hello\" is not convertible to int\n-  Expect(parse_failure, null, str);\n+\n+  // strings and ints are not comparable without explicit casts\n+  Expect(not_impl, str, one);\n+  Expect(not_impl, one, str);\n+  Expect(not_impl, str, null);  // not even null ints\n+\n+  // string -> binary implicit cast allowed\n+  Expect(\"equal\", str, bin);\n+  Expect(\"equal\", bin, str);\n+\n+  // dict_str -> string, implicit casts allowed\n+  Expect(\"less\", dict_str, str);\n+  Expect(\"less\", dict_str, bin);\n+}\n+\n+TEST(ExpressionUtils, StripOrderPreservingCasts) {\n+  auto Expect = [](Expression expr, util::optional<Expression> expected_stripped) {\n+    ASSERT_OK_AND_ASSIGN(expr, expr.Bind(*kBoringSchema));\n+    if (!expected_stripped) {\n+      expected_stripped = expr;\n+    } else {\n+      ASSERT_OK_AND_ASSIGN(expected_stripped, expected_stripped->Bind(*kBoringSchema));\n+    }\n+    EXPECT_EQ(Comparison::StripOrderPreservingCasts(expr), *expected_stripped);\n+  };\n+\n+  // Casting int to float preserves ordering.\n+  // For example, let\n+  //   a = 3, b = 2, assert(a > b)\n+  // After injecting a cast to float, this ordering still holds\n+  //   float(a) == 3.0, float(b) == 2.0, assert(float(a) > float(b))\n+  Expect(cast(field_ref(\"i32\"), float32()), field_ref(\"i32\"));\n+\n+  // Casting an integral type to a wider integral type preserves ordering.\n+  Expect(cast(field_ref(\"i32\"), int64()), field_ref(\"i32\"));\n+  Expect(cast(field_ref(\"i32\"), int32()), field_ref(\"i32\"));\n+  Expect(cast(field_ref(\"i32\"), int16()), no_change);\n+  Expect(cast(field_ref(\"i32\"), int8()), no_change);\n+\n+  Expect(cast(field_ref(\"u32\"), uint64()), field_ref(\"u32\"));\n+  Expect(cast(field_ref(\"u32\"), uint32()), field_ref(\"u32\"));\n+  Expect(cast(field_ref(\"u32\"), uint16()), no_change);\n+  Expect(cast(field_ref(\"u32\"), uint8()), no_change);\n\nReview comment:\n       Also what about uint32 to {int32, int64}?\n\n##########\nFile path: cpp/src/arrow/dataset/expression_internal.h\n##########\n@@ -109,6 +105,40 @@ struct Comparison {\n     return less.scalar_as<BooleanScalar>().value ? LESS : GREATER;\n   }\n \n+  static const Expression& StripOrderPreservingCasts(const Expression& expr) {\n\nReview comment:\n       Add a comment explaining what this does?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_boolean.cc\n##########\n@@ -50,6 +50,7 @@ struct ParseBooleanString {\n std::vector<std::shared_ptr<CastFunction>> GetBooleanCasts() {\n   auto func = std::make_shared<CastFunction>(\"cast_boolean\", Type::BOOL);\n   AddCommonCasts(Type::BOOL, boolean(), func.get());\n+  AddZeroCopyCast(Type::BOOL, boolean(), boolean(), func.get());\n\nReview comment:\n       Hmm, why do we need to add an explicit identity cast?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -637,5 +637,58 @@ TYPED_TEST(TestBinaryArithmeticFloating, Mul) {\n   this->AssertBinop(Multiply, \"[null, 2.0]\", this->MakeNullScalar(), \"[null, null]\");\n }\n \n+TEST(TestBinaryArithmetic, DispatchBest) {\n+  for (std::string name : {\"add\", \"subtract\", \"multiply\", \"divide\"}) {\n+    for (std::string suffix : {\"\", \"_checked\"}) {\n+      name += suffix;\n+\n+      CheckDispatchBest(name, {int32(), int32()}, {int32(), int32()});\n+\n+      CheckDispatchBest(name, {int32(), null()}, {int32(), int32()});\n+\n+      CheckDispatchBest(name, {null(), int32()}, {int32(), int32()});\n+\n+      CheckDispatchBest(name, {int32(), int16()}, {int32(), int32()});\n+\n+      CheckDispatchBest(name, {int32(), float32()}, {float32(), float32()});\n+\n+      CheckDispatchBest(name, {float32(), int64()}, {float32(), float32()});\n+\n+      CheckDispatchBest(name, {float64(), int32()}, {float64(), float64()});\n+\n+      CheckDispatchBest(name, {dictionary(int8(), float64()), float64()},\n+                        {float64(), float64()});\n+\n+      CheckDispatchBest(name, {dictionary(int8(), float64()), int16()},\n+                        {float64(), float64()});\n+    }\n+  }\n+}\n+\n+TEST(TestBinaryArithmetic, AddWithImplicitCasts) {\n+  CheckScalarBinary(\"add\", ArrayFromJSON(int32(), \"[0, 1, 2, null]\"),\n+                    ArrayFromJSON(float64(), \"[0.25, 0.5, 0.75, 1.0]\"),\n+                    ArrayFromJSON(float64(), \"[0.25, 1.5, 2.75, null]\"));\n+\n+  CheckScalarBinary(\"add\", ArrayFromJSON(int8(), \"[-16, 0, 16, null]\"),\n+                    ArrayFromJSON(uint32(), \"[3, 4, 5, 7]\"),\n+                    ArrayFromJSON(int32(), \"[-13, 4, 21, null]\"));\n+\n+  CheckScalarBinary(\"add\", ArrayFromJSON(dictionary(int32(), int32()), \"[0, 1, 2, null]\"),\n\nReview comment:\n       Can you test with a dictionary that's not trivially equal to its indices?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T16:04:33.917+0000",
                    "updated": "2021-01-28T16:04:33.917+0000",
                    "started": "2021-01-28T16:04:33.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543709",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566359504\n\n\n\n##########\nFile path: cpp/src/arrow/compute/cast.cc\n##########\n@@ -225,13 +208,21 @@ Result<std::shared_ptr<CastFunction>> GetCastFunction(\n }\n \n bool CanCast(const DataType& from_type, const DataType& to_type) {\n-  // TODO\n   internal::EnsureInitCastTable();\n-  auto it = internal::g_cast_table.find(static_cast<int>(from_type.id()));\n+  auto it = internal::g_cast_table.find(static_cast<int>(to_type.id()));\n   if (it == internal::g_cast_table.end()) {\n     return false;\n   }\n-  return it->second->CanCastTo(to_type);\n+\n+  const CastFunction* function = it->second.get();\n+  DCHECK_EQ(function->out_type_id(), to_type.id());\n+\n+  for (auto from_id : function->in_type_ids()) {\n+    // XXX should probably check the output type as well\n\nReview comment:\n       For example `CanCast(*list(null()), *list(list(int32())))` currently returns true, even though that cast is not supported. We support *some* casts between list types but since we only check type_ids there's no way to express more than \"Type::LIST -> Type::LIST is supported\"\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T19:40:13.346+0000",
                    "updated": "2021-01-28T19:40:13.346+0000",
                    "started": "2021-01-28T19:40:13.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543819",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566360286\n\n\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -21,62 +21,66 @@\n #include <memory>\n #include <sstream>\n \n+#include \"arrow/compute/cast.h\"\n #include \"arrow/compute/exec.h\"\n #include \"arrow/compute/exec_internal.h\"\n+#include \"arrow/compute/kernels/common.h\"\n #include \"arrow/datum.h\"\n #include \"arrow/util/cpu_info.h\"\n \n namespace arrow {\n+\n+using internal::checked_cast;\n+\n namespace compute {\n \n static const FunctionDoc kEmptyFunctionDoc{};\n \n const FunctionDoc& FunctionDoc::Empty() { return kEmptyFunctionDoc; }\n \n-Status Function::CheckArity(int passed_num_args) const {\n-  if (arity_.is_varargs && passed_num_args < arity_.num_args) {\n-    return Status::Invalid(\"VarArgs function needs at least \", arity_.num_args,\n-                           \" arguments but kernel accepts only \", passed_num_args);\n-  } else if (!arity_.is_varargs && passed_num_args != arity_.num_args) {\n-    return Status::Invalid(\"Function accepts \", arity_.num_args,\n-                           \" arguments but kernel accepts \", passed_num_args);\n+Status CheckArityImpl(const Function* function, int passed_num_args,\n+                      const char* passed_num_args_label) {\n+  if (function->arity().is_varargs && passed_num_args < function->arity().num_args) {\n+    return Status::Invalid(\"VarArgs function needs at least \", function->arity().num_args,\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T19:41:39.371+0000",
                    "updated": "2021-01-28T19:41:39.371+0000",
                    "started": "2021-01-28T19:41:39.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543821",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543822",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566360757\n\n\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -102,20 +106,71 @@ Result<const KernelType*> DispatchExactImpl(const Function& func,\n     return kernel_matches[SimdLevel::NONE];\n   }\n \n-  return Status::NotImplemented(\"Function \", func.name(),\n-                                \" has no kernel matching input types \",\n-                                FormatArgTypes(values));\n+  return nullptr;\n+}\n+\n+const Kernel* DispatchExactImpl(const Function* func,\n+                                const std::vector<ValueDescr>& values) {\n+  if (func->kind() == Function::SCALAR) {\n+    return DispatchExactImpl(checked_cast<const ScalarFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::VECTOR) {\n+    return DispatchExactImpl(checked_cast<const VectorFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::SCALAR_AGGREGATE) {\n+    return DispatchExactImpl(\n+        checked_cast<const ScalarAggregateFunction*>(func)->kernels(), values);\n+  }\n+\n+  return nullptr;\n+}\n+\n+}  // namespace detail\n+\n+Result<const Kernel*> Function::DispatchExact(\n+    const std::vector<ValueDescr>& values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(values));\n+\n+  if (auto kernel = detail::DispatchExactImpl(this, values)) {\n+    return kernel;\n+  }\n+  return detail::NoMatchingKernel(this, values);\n+}\n+\n+Result<const Kernel*> Function::DispatchBest(std::vector<ValueDescr>* values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(*values));\n+\n+  // first try for an exact match\n+  if (auto kernel = detail::DispatchExactImpl(this, *values)) {\n+    return kernel;\n+  }\n+\n+  // XXX permit generic conversions here, for example dict -> decoded, null -> any?\n+  return DispatchExact(*values);\n\nReview comment:\n       Holdover from trying to allow all functions to access generic conversions, as in that comment. I'll revert this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T19:42:32.700+0000",
                    "updated": "2021-01-28T19:42:32.700+0000",
                    "started": "2021-01-28T19:42:32.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543822",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566360757\n\n\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -102,20 +106,71 @@ Result<const KernelType*> DispatchExactImpl(const Function& func,\n     return kernel_matches[SimdLevel::NONE];\n   }\n \n-  return Status::NotImplemented(\"Function \", func.name(),\n-                                \" has no kernel matching input types \",\n-                                FormatArgTypes(values));\n+  return nullptr;\n+}\n+\n+const Kernel* DispatchExactImpl(const Function* func,\n+                                const std::vector<ValueDescr>& values) {\n+  if (func->kind() == Function::SCALAR) {\n+    return DispatchExactImpl(checked_cast<const ScalarFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::VECTOR) {\n+    return DispatchExactImpl(checked_cast<const VectorFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::SCALAR_AGGREGATE) {\n+    return DispatchExactImpl(\n+        checked_cast<const ScalarAggregateFunction*>(func)->kernels(), values);\n+  }\n+\n+  return nullptr;\n+}\n+\n+}  // namespace detail\n+\n+Result<const Kernel*> Function::DispatchExact(\n+    const std::vector<ValueDescr>& values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(values));\n+\n+  if (auto kernel = detail::DispatchExactImpl(this, values)) {\n+    return kernel;\n+  }\n+  return detail::NoMatchingKernel(this, values);\n+}\n+\n+Result<const Kernel*> Function::DispatchBest(std::vector<ValueDescr>* values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(*values));\n+\n+  // first try for an exact match\n+  if (auto kernel = detail::DispatchExactImpl(this, *values)) {\n+    return kernel;\n+  }\n+\n+  // XXX permit generic conversions here, for example dict -> decoded, null -> any?\n+  return DispatchExact(*values);\n\nReview comment:\n       Holdover from trying to allow all functions to access generic conversions, as in that comment. I'll rewrite as a simple call to DispatchExact\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T19:42:45.717+0000",
                    "updated": "2021-01-28T19:42:45.717+0000",
                    "started": "2021-01-28T19:42:45.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543823",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566362789\n\n\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -102,20 +106,71 @@ Result<const KernelType*> DispatchExactImpl(const Function& func,\n     return kernel_matches[SimdLevel::NONE];\n   }\n \n-  return Status::NotImplemented(\"Function \", func.name(),\n-                                \" has no kernel matching input types \",\n-                                FormatArgTypes(values));\n+  return nullptr;\n+}\n+\n+const Kernel* DispatchExactImpl(const Function* func,\n+                                const std::vector<ValueDescr>& values) {\n+  if (func->kind() == Function::SCALAR) {\n+    return DispatchExactImpl(checked_cast<const ScalarFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::VECTOR) {\n+    return DispatchExactImpl(checked_cast<const VectorFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::SCALAR_AGGREGATE) {\n+    return DispatchExactImpl(\n+        checked_cast<const ScalarAggregateFunction*>(func)->kernels(), values);\n+  }\n+\n+  return nullptr;\n+}\n+\n+}  // namespace detail\n+\n+Result<const Kernel*> Function::DispatchExact(\n+    const std::vector<ValueDescr>& values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(values));\n+\n+  if (auto kernel = detail::DispatchExactImpl(this, values)) {\n+    return kernel;\n+  }\n+  return detail::NoMatchingKernel(this, values);\n+}\n+\n+Result<const Kernel*> Function::DispatchBest(std::vector<ValueDescr>* values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(*values));\n+\n+  // first try for an exact match\n+  if (auto kernel = detail::DispatchExactImpl(this, *values)) {\n+    return kernel;\n+  }\n+\n+  // XXX permit generic conversions here, for example dict -> decoded, null -> any?\n\nReview comment:\n       No.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T19:46:02.538+0000",
                    "updated": "2021-01-28T19:46:02.538+0000",
                    "started": "2021-01-28T19:46:02.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543825",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566362789\n\n\n\n##########\nFile path: cpp/src/arrow/compute/function.cc\n##########\n@@ -102,20 +106,71 @@ Result<const KernelType*> DispatchExactImpl(const Function& func,\n     return kernel_matches[SimdLevel::NONE];\n   }\n \n-  return Status::NotImplemented(\"Function \", func.name(),\n-                                \" has no kernel matching input types \",\n-                                FormatArgTypes(values));\n+  return nullptr;\n+}\n+\n+const Kernel* DispatchExactImpl(const Function* func,\n+                                const std::vector<ValueDescr>& values) {\n+  if (func->kind() == Function::SCALAR) {\n+    return DispatchExactImpl(checked_cast<const ScalarFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::VECTOR) {\n+    return DispatchExactImpl(checked_cast<const VectorFunction*>(func)->kernels(),\n+                             values);\n+  }\n+\n+  if (func->kind() == Function::SCALAR_AGGREGATE) {\n+    return DispatchExactImpl(\n+        checked_cast<const ScalarAggregateFunction*>(func)->kernels(), values);\n+  }\n+\n+  return nullptr;\n+}\n+\n+}  // namespace detail\n+\n+Result<const Kernel*> Function::DispatchExact(\n+    const std::vector<ValueDescr>& values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(values));\n+\n+  if (auto kernel = detail::DispatchExactImpl(this, values)) {\n+    return kernel;\n+  }\n+  return detail::NoMatchingKernel(this, values);\n+}\n+\n+Result<const Kernel*> Function::DispatchBest(std::vector<ValueDescr>* values) const {\n+  if (kind_ == Function::META) {\n+    return Status::NotImplemented(\"Dispatch for a MetaFunction's Kernels\");\n+  }\n+  RETURN_NOT_OK(CheckArity(*values));\n+\n+  // first try for an exact match\n+  if (auto kernel = detail::DispatchExactImpl(this, *values)) {\n+    return kernel;\n+  }\n+\n+  // XXX permit generic conversions here, for example dict -> decoded, null -> any?\n\nReview comment:\n       No. I'll remove the comment and write a follow up JIRA\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T19:46:18.503+0000",
                    "updated": "2021-01-28T19:46:18.503+0000",
                    "started": "2021-01-28T19:46:18.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543827",
                    "issueId": "13307063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/worklog/543828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9294:\nURL: https://github.com/apache/arrow/pull/9294#discussion_r566363583\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.cc\n##########\n@@ -179,6 +179,121 @@ Result<ValueDescr> FirstType(KernelContext*, const std::vector<ValueDescr>& desc\n   return descrs[0];\n }\n \n+void EnsureDictionaryDecoded(std::vector<ValueDescr>* descrs) {\n+  for (ValueDescr& descr : *descrs) {\n+    if (descr.type->id() == Type::DICTIONARY) {\n+      descr.type = checked_cast<const DictionaryType&>(*descr.type).value_type();\n+    }\n+  }\n+}\n+\n+void ReplaceNullWithOtherType(std::vector<ValueDescr>* descrs) {\n+  DCHECK_EQ(descrs->size(), 2);\n+\n+  if (descrs->at(0).type->id() == Type::NA) {\n+    descrs->at(0).type = descrs->at(1).type;\n+    return;\n+  }\n+\n+  if (descrs->at(1).type->id() == Type::NA) {\n+    descrs->at(1).type = descrs->at(0).type;\n+    return;\n+  }\n+}\n+\n+void ReplaceTypes(const std::shared_ptr<DataType>& type,\n+                  std::vector<ValueDescr>* descrs) {\n+  for (auto& descr : *descrs) {\n+    descr.type = type;\n+  }\n+}\n+\n+std::shared_ptr<DataType> CommonNumeric(const std::vector<ValueDescr>& descrs) {\n+  for (const auto& descr : descrs) {\n+    auto id = descr.type->id();\n+    if (!is_floating(id) && !is_integer(id)) {\n+      // a common numeric type is only possible if all types are numeric\n\nReview comment:\n       Probably. I'll add this\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-28T19:47:21.929+0000",
                    "updated": "2021-01-28T19:47:21.929+0000",
                    "started": "2021-01-28T19:47:21.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "543828",
                    "issueId": "13307063"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 34200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@68f49513[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7756962[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14dccc36[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@38ce99b6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14cef9b2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@280f8894[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ac05cdf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@160f6d18[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75ef0502[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@21707803[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@798efe56[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@14842bd2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 10 20:48:37 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-10T20:48:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8919/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-05-24T13:09:12.000+0000",
        "updated": "2021-02-19T21:12:41.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently we have \"DispatchExact\" which requires an exact match of input types. \"DispatchBest\" would permit kernel selection with implicit casts required. Since multiple kernels may be valid when allowing implicit casts, we will need to break ties by estimating the \"cost\" of the implicit casts. For example, casting int8 to int32 is \"less expensive\" than implicitly casting to int64",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add \"DispatchBest\" APIs to compute::Function that selects a kernel that may require implicit casts to invoke",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307063/comment/17282705",
                    "id": "17282705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9294\n[https://github.com/apache/arrow/pull/9294]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-02-10T20:48:37.228+0000",
                    "updated": "2021-02-10T20:48:37.228+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0f3q0:",
        "customfield_12314139": null
    }
}