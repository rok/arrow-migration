{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13105228",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228",
    "key": "ARROW-1614",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12587568",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12587568",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13242589",
                    "key": "ARROW-5819",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242589",
                    "fields": {
                        "summary": "[Python] Store sequences of arbitrary ndarrays (with same type) in Tensor value type",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12587564",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12587564",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13303111",
                    "key": "ARROW-8714",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303111",
                    "fields": {
                        "summary": "[C++] Add a Tensor logical value type with varying dimensions, implemented using ExtensionType",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
            "name": "rokm",
            "key": "rokm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Rok Mihevc",
            "active": true,
            "timeZone": "Europe/Amsterdam"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328932",
                "id": "12328932",
                "name": "Format"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1614/votes",
            "votes": 5,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/503772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok opened a new pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510\n\n\n   > [ARROW-1614](https://issues.apache.org/jira/browse/ARROW-1614): In an Arrow table, we would like to add support for a column that has values cells each containing a tensor value, with all tensors having the same dimensions. These would be stored as a binary value, plus some metadata to store type and shape/strides.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-22T15:42:14.013+0000",
                    "updated": "2020-10-22T15:42:14.013+0000",
                    "started": "2020-10-22T15:42:14.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503772",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/503781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#issuecomment-714589639\n\n\n   https://issues.apache.org/jira/browse/ARROW-1614\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-22T15:54:29.020+0000",
                    "updated": "2020-10-22T15:54:29.020+0000",
                    "started": "2020-10-22T15:54:29.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503781",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/503907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r510457429\n\n\n\n##########\nFile path: python/pyarrow/tests/test_extension_type.py\n##########\n@@ -76,6 +76,95 @@ def __reduce__(self):\n         return MyListType, (self.storage_type,)\n \n \n+def _tensor_to_array(obj, dtype):\n+    batch_size = obj.shape[0]\n+    element_shape = obj.shape[1:]\n+    total_num_elements = obj.size\n+    num_elements = 1 if len(obj.shape) == 1 else np.prod(element_shape)\n+\n+    child_buf = pa.py_buffer(obj)\n+    child_array = pa.Array.from_buffers(\n+        dtype, total_num_elements, [None, child_buf])\n+\n+    offset_buf = pa.py_buffer(\n+        np.int32([i * num_elements for i in range(batch_size + 1)]))\n+\n+    storage = pa.Array.from_buffers(pa.list_(dtype), batch_size,\n+                                    [None, offset_buf], children=[child_array])\n+\n+    typ = TensorType(element_shape, dtype)\n+    return pa.ExtensionArray.from_storage(typ, storage)\n+\n+\n+class TensorArray(pa.ExtensionArray):\n+    \"\"\"\n+    Concrete class for Arrow arrays of Tensor data type.\n+    \"\"\"\n+\n+    @classmethod\n+    def from_numpy(cls, obj):\n+        \"\"\"\n+        Convert a single contiguous numpy.ndarray to TensorArray.\n+        \"\"\"\n+        assert isinstance(obj, np.ndarray)\n+        if not obj.flags.c_contiguous:\n+            obj = np.ascontiguousarray(obj)\n+        dtype = pa.from_numpy_dtype(obj.dtype)\n+\n+        return _tensor_to_array(obj, dtype)\n+\n+    @classmethod\n+    def from_tensor(cls, obj):\n+        \"\"\"\n+        Convert a single contiguous pyarrow.Tensor to a TensorArray.\n+        \"\"\"\n+        assert isinstance(obj, pa.Tensor)\n+        assert obj.is_contiguous\n+        dtype = obj.type\n+\n+        return _tensor_to_array(obj, dtype)\n+\n+    def to_numpy(self):\n+        \"\"\"\n+        Convert TensorArray to numpy.ndarray.\n+        \"\"\"\n+        shape = (len(self),) + self.type.shape\n+        buf = self.storage.buffers()[3]\n+        storage_list_type = self.storage.type\n+        ext_dtype = storage_list_type.value_type.to_pandas_dtype()\n+\n+        return np.ndarray(shape, buffer=buf, dtype=ext_dtype)\n+\n+    def to_tensor(self):\n+        \"\"\"\n+        Convert TensorArray to pyarrow.Tensor.\n+        \"\"\"\n+        return pa.Tensor.from_numpy(self.to_numpy())\n+\n+\n+class TensorType(pa.PyExtensionType):\n\nReview comment:\n       Hi @rok , the code in this PR appears to be from https://github.com/CODAIT/text-extensions-for-pandas/blob/master/text_extensions_for_pandas/array/arrow_conversion.py#L306. I know you were looking at it to get started for a C++ implementation, so if your intention is to rewrite for C++, then that's fine. If this ends up being part of a Python implementation, I would appreciate being able to contribute that myself rather than duplicate.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-22T21:06:59.888+0000",
                    "updated": "2020-10-22T21:06:59.888+0000",
                    "started": "2020-10-22T21:06:59.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "503907",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/504159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r510879292\n\n\n\n##########\nFile path: python/pyarrow/tests/test_extension_type.py\n##########\n@@ -76,6 +76,95 @@ def __reduce__(self):\n         return MyListType, (self.storage_type,)\n \n \n+def _tensor_to_array(obj, dtype):\n+    batch_size = obj.shape[0]\n+    element_shape = obj.shape[1:]\n+    total_num_elements = obj.size\n+    num_elements = 1 if len(obj.shape) == 1 else np.prod(element_shape)\n+\n+    child_buf = pa.py_buffer(obj)\n+    child_array = pa.Array.from_buffers(\n+        dtype, total_num_elements, [None, child_buf])\n+\n+    offset_buf = pa.py_buffer(\n+        np.int32([i * num_elements for i in range(batch_size + 1)]))\n+\n+    storage = pa.Array.from_buffers(pa.list_(dtype), batch_size,\n+                                    [None, offset_buf], children=[child_array])\n+\n+    typ = TensorType(element_shape, dtype)\n+    return pa.ExtensionArray.from_storage(typ, storage)\n+\n+\n+class TensorArray(pa.ExtensionArray):\n+    \"\"\"\n+    Concrete class for Arrow arrays of Tensor data type.\n+    \"\"\"\n+\n+    @classmethod\n+    def from_numpy(cls, obj):\n+        \"\"\"\n+        Convert a single contiguous numpy.ndarray to TensorArray.\n+        \"\"\"\n+        assert isinstance(obj, np.ndarray)\n+        if not obj.flags.c_contiguous:\n+            obj = np.ascontiguousarray(obj)\n+        dtype = pa.from_numpy_dtype(obj.dtype)\n+\n+        return _tensor_to_array(obj, dtype)\n+\n+    @classmethod\n+    def from_tensor(cls, obj):\n+        \"\"\"\n+        Convert a single contiguous pyarrow.Tensor to a TensorArray.\n+        \"\"\"\n+        assert isinstance(obj, pa.Tensor)\n+        assert obj.is_contiguous\n+        dtype = obj.type\n+\n+        return _tensor_to_array(obj, dtype)\n+\n+    def to_numpy(self):\n+        \"\"\"\n+        Convert TensorArray to numpy.ndarray.\n+        \"\"\"\n+        shape = (len(self),) + self.type.shape\n+        buf = self.storage.buffers()[3]\n+        storage_list_type = self.storage.type\n+        ext_dtype = storage_list_type.value_type.to_pandas_dtype()\n+\n+        return np.ndarray(shape, buffer=buf, dtype=ext_dtype)\n+\n+    def to_tensor(self):\n+        \"\"\"\n+        Convert TensorArray to pyarrow.Tensor.\n+        \"\"\"\n+        return pa.Tensor.from_numpy(self.to_numpy())\n+\n+\n+class TensorType(pa.PyExtensionType):\n\nReview comment:\n       Hey @BryanCutler. Indeed this is meant just for discussing the design before implementing in C++.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-23T13:22:00.490+0000",
                    "updated": "2020-10-23T13:22:00.490+0000",
                    "started": "2020-10-23T13:22:00.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "504159",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660137",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#issuecomment-934155105\n\n\n   In the context of  testing metadata equality withinin multiple parquet files in a dataset, equality on shape and strides may be a very strict requirement. Would relaxing the equality requirement to only compare the number of tensor dimensions negatively impact the design?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T07:48:45.678+0000",
                    "updated": "2021-10-05T07:48:45.678+0000",
                    "started": "2021-10-05T07:48:45.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660137",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660182",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#issuecomment-934236327\n\n\n   > In the context of testing metadata equality withinin multiple parquet files in a dataset, equality on shape and strides may be a very strict requirement. Would relaxing the equality requirement to only compare the number of tensor dimensions negatively impact the design?\r\n   \r\n   Good point. By tensor dimensions you mean shape, right?\r\n   I think it's ok to relax on the strides check. I've pushed a change, see latest commit.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T09:32:16.707+0000",
                    "updated": "2021-10-05T09:32:16.707+0000",
                    "started": "2021-10-05T09:32:16.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660182",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#issuecomment-934277406\n\n\n   > \r\n   > \r\n   > > In the context of testing metadata equality withinin multiple parquet files in a dataset, equality on shape and strides may be a very strict requirement. Would relaxing the equality requirement to only compare the number of tensor dimensions negatively impact the design?\r\n   > \r\n   > Good point. By tensor dimensions you mean shape, right? I think it's ok to relax on the strides check. I've pushed a change, see latest commit.\r\n   \r\n   I was thinking even looser:\r\n   \r\n   ```python\r\n   def __eq__(self, other):\r\n       len(self.shape) == len(other.shape)\r\n   ```\r\n   \r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T10:26:10.735+0000",
                    "updated": "2021-10-05T10:26:10.735+0000",
                    "started": "2021-10-05T10:26:10.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660206",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#issuecomment-934299009\n\n\n   > I was thinking even looser:\r\n   > \r\n   > ```python\r\n   > def __eq__(self, other):\r\n   >     len(self.shape) == len(other.shape)\r\n   > ```\r\n   \r\n   Done.\r\n   We could introduce comparison options in case there would be differing requirements here.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T10:56:25.684+0000",
                    "updated": "2021-10-05T10:56:25.684+0000",
                    "started": "2021-10-05T10:56:25.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660219",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660220",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722126155\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       I think this should be:\r\n   \r\n   ```suggestion\r\n       return this->shape().size() == static_cast<const TensorArrayType&>(other).shape().size();\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T10:59:35.201+0000",
                    "updated": "2021-10-05T10:59:35.201+0000",
                    "started": "2021-10-05T10:59:35.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660220",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722135047\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       Ah, I misunderstood your suggestion. Why would you need it so loose? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T11:13:06.291+0000",
                    "updated": "2021-10-05T11:13:06.291+0000",
                    "started": "2021-10-05T11:13:06.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660231",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722138642\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       Added a `ndim` method and used it for equality comparison. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T11:18:23.587+0000",
                    "updated": "2021-10-05T11:18:23.587+0000",
                    "started": "2021-10-05T11:18:23.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660243",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722148585\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       > Ah, I misunderstood your suggestion. Why would you need it so loose?\r\n   \r\n   More practically, this means that one cannot have for e.g. a `(10, 5, 4)` shape Tensor and a `(10, 6, 2)` Tensor in separate parquet files in the same dataset -- IIRC the Dataset API will complain that their metadata doesn't agree (due to the strict equality comparison). I do run into these sort of cases in the datasets that I deal with.\r\n   \r\n   I would argue that parameterising Tensors Types on `shape` and `stride` introduces an infinite number of parameterisations and I'm not sure that this class of parameterisations is useful. This doesn't imply that `shape` and `stride` should not be attributes on a Tensor Type!\r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T11:32:42.398+0000",
                    "updated": "2021-10-05T11:32:42.398+0000",
                    "started": "2021-10-05T11:32:42.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660249",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722148585\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       > Ah, I misunderstood your suggestion. Why would you need it so loose?\r\n   \r\n   Practically speaking, this means that one cannot have for e.g. a `(10, 5, 4)` shape Tensor and a `(10, 6, 2)` Tensor in separate parquet files in the same dataset -- IIRC the Dataset API will complain that their metadata doesn't agree (due to the strict equality comparison). I do run into these sort of cases in the datasets that I deal with.\r\n   \r\n   More formally, I would argue that parameterising Tensors Types on `shape` and `stride` introduces an infinite number of parameterisations and I'm not sure that this class of parameterisations is useful. This doesn't imply that `shape` and `stride` should not be attributes on a Tensor Type!\r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T11:33:10.749+0000",
                    "updated": "2021-10-05T11:33:10.749+0000",
                    "started": "2021-10-05T11:33:10.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660251",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722161976\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       > > Ah, I misunderstood your suggestion. Why would you need it so loose?\r\n   > \r\n   > Practically speaking, this means that one cannot have for e.g. a `(10, 5, 4)` shape Tensor and a `(10, 6, 2)` Tensor in separate parquet files in the same dataset -- IIRC the Dataset API will complain that their metadata doesn't agree (due to the strict equality comparison). I do run into these sort of cases in the datasets that I deal with.\r\n   > \r\n   > More formally, I would argue that parameterising Tensors Types on `shape` and `stride` introduces an infinite number of parameterisations and I'm not sure that this class of parameterisations is useful. This doesn't imply that `shape` and `stride` should not be attributes on a Tensor Type!\r\n   \r\n   Got it. Infinite types sounds a bit redundant indeed.\r\n   The only reason I can think of to have dimensions and strides in equality comparison then is if we did some compute kernels that needed to identify type in advance. But even that can probably be solved at runtime.\r\n   \r\n   In that case do we even want to keep `ndim` for equality comparison?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T11:52:00.134+0000",
                    "updated": "2021-10-05T11:52:00.134+0000",
                    "started": "2021-10-05T11:52:00.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660259",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722173704\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       > In that case do we even want to keep ndim for equality comparison?\r\n   \r\n   This is a good question. I might lean towards saying not, but I'm not a maintainer. I guess it depends on how the type is used throughout the rest of the Arrow ecosystem -- you mentioned the Compute Engine for example.\r\n   \r\n   For instance, Numba parameterise their [Array](https://github.com/numba/numba/blob/e617b39a0b4b23d7b69d16f482fd66b4ac6cc307/numba/core/types/npytypes.py#L423) type on `dtype`, `ndim`, `layout`, `readonly` and `alignment`, I would guess because these properties are useful for generating efficient LLVM code.\r\n   \r\n   I'm not suggesting that Arrow should copy Numba's Type parameterisation, but its similar enough to provide food for thought.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T12:08:17.815+0000",
                    "updated": "2021-10-05T12:08:17.815+0000",
                    "started": "2021-10-05T12:08:17.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660265",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722173704\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       > In that case do we even want to keep ndim for equality comparison?\r\n   \r\n   This is a good question. I might lean towards saying not, but I'm not a maintainer. I guess it depends on how the type is used throughout the rest of the Arrow ecosystem -- you mentioned the Compute Engine for example.\r\n   \r\n   For instance, Numba parameterise their [Array](https://github.com/numba/numba/blob/e617b39a0b4b23d7b69d16f482fd66b4ac6cc307/numba/core/types/npytypes.py#L423) type on `dtype`, `ndim`, `layout`, `readonly` and `alignment`, I would guess because these properties are useful for generating efficient LLVM code.\r\n   \r\n   I'm not suggesting that Arrow should copy Numba's Type parameterisation, but there are enough similarities to provide food for thought.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T12:13:18.386+0000",
                    "updated": "2021-10-05T12:13:18.386+0000",
                    "started": "2021-10-05T12:13:18.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660270",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sjperkins commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722184608\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       Also, I think that Google jax include shape in their Type Parameterisations, AFAIK because the XLA compiler can produce very optimal code when array bounds are known. But it does lead to these kind of sharp edges:\r\n   \r\n   - Search for \"functions with argument-value dependent shapes\" under https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html#structured-control-flow-primitives\r\n   - https://github.com/google/jax/issues/5100#issuecomment-738904018\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T12:22:39.807+0000",
                    "updated": "2021-10-05T12:22:39.807+0000",
                    "started": "2021-10-05T12:22:39.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660273",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/660311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#discussion_r722227879\n\n\n\n##########\nFile path: cpp/src/arrow/extension_type_test.cc\n##########\n@@ -333,4 +334,144 @@ TEST_F(TestExtensionType, ValidateExtensionArray) {\n   ASSERT_OK(ext_arr4->ValidateFull());\n }\n \n+class TensorArray : public ExtensionArray {\n+ public:\n+  using ExtensionArray::ExtensionArray;\n+};\n+\n+class TensorArrayType : public ExtensionType {\n+ public:\n+  explicit TensorArrayType(const std::shared_ptr<DataType>& type,\n+                           const std::vector<int64_t>& shape,\n+                           const std::vector<int64_t>& strides)\n+      : ExtensionType(type), type_(type), shape_(shape), strides_(strides) {}\n+\n+  std::shared_ptr<DataType> type() const { return type_; }\n+  std::vector<int64_t> shape() const { return shape_; }\n+  std::vector<int64_t> strides() const { return strides_; }\n+\n+  std::string extension_name() const override {\n+    std::stringstream s;\n+    s << \"ext-array-tensor-type<type=\" << *storage_type() << \", shape=(\";\n+    for (uint64_t i = 0; i < shape_.size(); i++) {\n+      s << shape_[i];\n+      if (i < shape_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \"), strides=(\";\n+    for (uint64_t i = 0; i < strides_.size(); i++) {\n+      s << strides_[i];\n+      if (i < strides_.size() - 1) {\n+        s << \", \";\n+      }\n+    }\n+    s << \")>\";\n+    return s.str();\n+  }\n+\n+  bool ExtensionEquals(const ExtensionType& other) const override {\n+    return this->shape() == static_cast<const TensorArrayType&>(other).shape();\n\nReview comment:\n       I removed the `ndim` check and made equality comparison only check for type name (`ext-array-tensor-type`).\r\n   \r\n   > > In that case do we even want to keep ndim for equality comparison?\r\n   >\r\n   > This is a good question. I might lean towards saying not, but I'm not a maintainer. I guess it depends on how the type is used throughout the rest of the Arrow ecosystem -- you mentioned the Compute Engine for example.\r\n   \r\n   I'm not aware of active work on tensor computation in Arrow at the moment so I don't think there were any decisions made on this yet. It is super interesting to see what were the trade-offs in other places (numba, jax) though.\r\n   \r\n   At the moment this is an `ExtensionArray` in `cpp/src/arrow/extension_type_test.cc`. My understanding is there are no plans to make these extension arrays available elsewhere @jorisvandenbossche @wesm ?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-05T13:14:01.117+0000",
                    "updated": "2021-10-05T13:14:01.117+0000",
                    "started": "2021-10-05T13:14:01.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "660311",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/694118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#issuecomment-991150389\n\n\n   @jorisvandenbossche @sjperkins @pitrou is there interest to get this in?\r\n   If yes is `cpp/src/arrow/extension_type_test.cc` a good place to put it?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-10T17:17:28.907+0000",
                    "updated": "2021-12-10T17:17:28.907+0000",
                    "started": "2021-12-10T17:17:28.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "694118",
                    "issueId": "13105228"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/worklog/694926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8510:\nURL: https://github.com/apache/arrow/pull/8510#issuecomment-992271954\n\n\n   Currently we don't ship any standard extension types. I recommend discussing this on the mailing-list.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-13T09:31:02.807+0000",
                    "updated": "2021-12-13T09:31:02.807+0000",
                    "started": "2021-12-13T09:31:02.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "694926",
                    "issueId": "13105228"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7737bc34[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60550403[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65069bf0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2dbbee4f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29ee8bb4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@54a8a93e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a06140[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@779b2e2d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2af5b841[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3b051578[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d29c939[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@136d62f7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Oct 11 17:51:26 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1614/watchers",
            "watchCount": 16,
            "isWatching": true
        },
        "created": "2017-09-26T19:59:42.000+0000",
        "updated": "2022-10-11T17:53:47.000+0000",
        "timeoriginalestimate": null,
        "description": "In an Arrow table, we would like to add support for a column that has values cells each containing a tensor value, with all tensors having the same shape/dimensions. These would be stored as a binary value, plus some metadata to store type and shape/strides.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add a Tensor logical value type with constant shape, implemented using ExtensionType",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/16205349",
                    "id": "16205349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This can be handled via custom_metadata, so we don't actually need to change the format",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-16T00:05:18.200+0000",
                    "updated": "2017-10-16T00:05:18.200+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17100249",
                    "id": "17100249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "body": "This is a blocker for some Arrow use cases for us, so I'd be willing to work on this, with a bit of guidance. The first step would be to agree on the approach to take.\r\n\r\nFor me, there are two cases I'd need Arrow to support:\r\n # Each row is a tensor of a different shape (e.g images of different sizes), but of the same underlying type (e.g. int32). I don't see needing each row being a tensor with a different number of dimensions, so that could be out of scope if desired.\r\n # All rows have the same shape (so the whole column could potentially be handed off to e.g. scikit-image, as an array of n images of the same size).\r\n\r\nFrom what I understand of Arrow, here's how I would implement this:\r\n # A first column containing the elements from all the tensors (in row-major order), and a second containing a tuple with that tensor's shape. The start offset of the data for the next tensor can be computed from the shape of the previous one. (Would also need a separate column containing the pre-computed start index of for each tensor?)\r\n # Similarly, the data from the tensors would be stored all together in row-major order. The shape (without the first dimension) would be store in the metadata for that column.\r\n\r\nThoughts?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "created": "2020-05-05T20:44:39.158+0000",
                    "updated": "2020-05-05T20:44:39.158+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17100306",
                    "id": "17100306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Sounds like two different extension types. Do you want to split the work into separate PRs for the sake of code review?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-05T22:58:01.377+0000",
                    "updated": "2020-05-05T22:58:01.377+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17100808",
                    "id": "17100808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "body": "Created ARROW-8714 for the varying dimensions case. Renamed this one to be clearer that it is about the constant dimensions case.\r\n\r\nIs the approach proposed sound for this case? What would be a next step in terms of code? Is there an example of another type that's implemented as en ExtensionType that I could have a look at?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "created": "2020-05-06T13:32:54.193+0000",
                    "updated": "2020-05-06T13:32:54.193+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17100822",
                    "id": "17100822",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "[~chrish42] for experimenting, you could also first implement it in Python (to have a prototype, to experiment with and discuss how to store metadata, etc, that might be easier to play with).   \r\nFor Python, we have docs here: https://arrow.apache.org/docs/python/extending_types.html#defining-extension-types-user-defined-types (and there are also examples in the pandas codebase (for intervals and period dtypes): https://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/_arrow_utils.py, or also in the pyarrow tests: https://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_extension_type.py)\r\n\r\nFor implementing it in C++, probably best source are the test extension types: https://github.com/apache/arrow/blob/master/cpp/src/arrow/testing/extension_type.h and https://github.com/apache/arrow/blob/master/cpp/src/arrow/extension_type_test.cc",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-05-06T13:53:18.530+0000",
                    "updated": "2020-05-06T13:53:18.530+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17102790",
                    "id": "17102790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "body": "[~jorisvandenbossche]\u00a0Thanks for all the doc pointers. I think I'll start with a Python prototype, then, as that'll be a lot faster to experiment with. Once we're good with the results of that, I'll port it to C++.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "created": "2020-05-08T17:54:34.163+0000",
                    "updated": "2020-05-08T17:54:34.163+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17106655",
                    "id": "17106655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=csosborn",
                        "name": "csosborn",
                        "key": "csosborn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christopher Osborn",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thank you [~chrish42]\u00a0for taking this on! I was happy to find this ticket. I also need to store constant-dimension tensors in tables, with the intention of then exposing them in Python as ndarrays and in C++ as Eigen Matrix/Tensor views. I'm still ramping up on Arrow (and so far only in C++), and don't really understand the ExtensionType facility yet, but would be happy to lend a hand if possible. I was about to start picking my way painfully down a similar road.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=csosborn",
                        "name": "csosborn",
                        "key": "csosborn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christopher Osborn",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-05-13T20:50:07.311+0000",
                    "updated": "2020-05-13T20:50:07.311+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17209872",
                    "id": "17209872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "I'd like to contribute to this work and will have time available next week. [~chrish42]\u00a0could I help out somehow?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2020-10-07T21:16:19.679+0000",
                    "updated": "2020-10-07T21:16:19.679+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17210489",
                    "id": "17210489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I just wanted to let you all know I have been working on a similar Tensor extension type. I currently have a Pandas extension type for a tensor with conversion to/from an Arrow extension type, just for Python/PyArrow right now, and zero-copy conversion with numpy.ndarrays. It's part of the project [Text Extensions for Pandas|https://github.com/CODAIT/text-extensions-for-pandas] where we use it for NLP feature vectors, but it's really general purpose. You can check it out at\r\n\r\n[https://github.com/CODAIT/text-extensions-for-pandas/blob/master/text_extensions_for_pandas/array/tensor.py]\r\n [https://github.com/CODAIT/text-extensions-for-pandas/blob/master/text_extensions_for_pandas/array/arrow_conversion.py]\r\n Or install the package if you like via {{pip install text-extensions-for-pandas}} (it's currently in alpha)\r\n\r\nWe would love to help out with this effort and contribute what we have to Arrow, if it fits the bill!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-10-08T22:04:10.474+0000",
                    "updated": "2020-10-08T22:04:10.474+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17210537",
                    "id": "17210537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "[~bryanc]\u00a0Text Extensions for Pandas looks like a good start for the Python part.\u00a0 We'd probably want to base it on pyarrow.Tensor instead of np.ndarray? Would you like to do this or shall I start and ask you for review?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2020-10-09T00:10:04.860+0000",
                    "updated": "2020-10-09T00:10:04.860+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17210634",
                    "id": "17210634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~rokm] for our purposes, it wasn't necessary to use pyarrow.Tensor, but there are some limitations with it currently so maybe there are some trade-offs. Please go ahead and start if you like and I'd be happy to help review and discuss further.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-10-09T06:05:44.513+0000",
                    "updated": "2020-10-09T06:05:44.513+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17217666",
                    "id": "17217666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "body": "I manifestly haven't had time to work on this yet, mostly because my Arrow time is still dedicated to trying to figure out why my other Arrow pull request isn't working. Once that other pull request is done, I'll move to working on this one, but if someone else can start working on this, please do so and open a draft pull request with your work. I'll join you there when I can, in that case.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "created": "2020-10-20T15:11:23.709+0000",
                    "updated": "2020-10-20T15:11:23.709+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17219199",
                    "id": "17219199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "As proposed by [~jorisvandenbossche]\u00a0I've made a draft PR ( https://github.com/apache/arrow/pull/8510) with python logic prototype. It was heavily inspired by [~bryanc]'s text-extensions-for-pandas. Once we agree on the design we can rewrite it to c++.\r\n\r\nAs this is for the case where all tensors in the array are of the same shape I propose we store the data in a single Tensor. Is there a good reason not to do that?\r\n\r\nI assume we should support non-contiguous tensors. I'll add that.\r\n\r\nAny comments at this point?\r\n\r\n[~chrish42]\u00a0- feel free to jump in any time.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2020-10-22T17:11:45.415+0000",
                    "updated": "2020-10-22T18:20:21.731+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17219342",
                    "id": "17219342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "bq. As this is for the case where all tensors in the array are of the same shape I propose we store the data in a single Tensor. Is there a good reason not to do that?\r\n\r\nI believe if there is a single pyarrow.Tensor serialized in the backing binary array, that array will have a length of 1.  Then if placing in a Table or RecordBatch, would restrict it to 1 row for the other columns as well.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-10-22T20:56:00.418+0000",
                    "updated": "2020-10-22T20:56:00.418+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17222496",
                    "id": "17222496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~rokm] I had an idea for making a single extension type that would handle constant and varying dimensions, see comment [here|https://issues.apache.org/jira/browse/ARROW-8714?focusedCommentId=17222490&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17222490] and let me know what you think.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-10-28T21:28:41.496+0000",
                    "updated": "2020-10-28T21:29:27.820+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17223211",
                    "id": "17223211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "[~bryanc]\u00a0I've replied in that thread.\r\n\r\nI've also started working on the c++ for this I'll report back soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2020-10-29T21:07:24.464+0000",
                    "updated": "2020-10-29T21:07:24.464+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17223839",
                    "id": "17223839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Great, [~rokm] , looking forward to it. I also updated the title and description to reflect this is for tensors with the same fixed shape.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-10-30T18:29:06.304+0000",
                    "updated": "2020-10-30T18:29:06.304+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17418318",
                    "id": "17418318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wenbing-bai",
                        "name": "wenbing-bai",
                        "key": "wenbing-bai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wenbing-bai&avatarId=40368",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wenbing-bai&avatarId=40368",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wenbing-bai&avatarId=40368",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wenbing-bai&avatarId=40368"
                        },
                        "displayName": "Wenbing Bai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi there, just want to followup the status of this ticket. Any updates?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wenbing-bai",
                        "name": "wenbing-bai",
                        "key": "wenbing-bai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wenbing-bai&avatarId=40368",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wenbing-bai&avatarId=40368",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wenbing-bai&avatarId=40368",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wenbing-bai&avatarId=40368"
                        },
                        "displayName": "Wenbing Bai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-09-21T21:00:32.001+0000",
                    "updated": "2021-09-21T21:00:32.001+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17419118",
                    "id": "17419118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "Hey [~wenbing-bai], I'm planing to take a look at this next week.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2021-09-23T10:35:24.924+0000",
                    "updated": "2021-09-23T10:35:24.924+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17565553",
                    "id": "17565553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:21.507+0000",
                    "updated": "2022-07-12T14:04:21.507+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13105228/comment/17616008",
                    "id": "17616008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-11T17:51:26.493+0000",
                    "updated": "2022-10-11T17:51:26.493+0000"
                }
            ],
            "maxResults": 21,
            "total": 21,
            "startAt": 0
        },
        "customfield_12311820": "0|i3kkqn:",
        "customfield_12314139": null
    }
}