{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13397593",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593",
    "key": "ARROW-13766",
    "fields": {
        "parent": {
            "id": "13476326",
            "key": "ARROW-17384",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13476326",
            "fields": {
                "summary": "[R] Additional dplyr functionality",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12621937",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621937",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13397599",
                    "key": "ARROW-13767",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397599",
                    "fields": {
                        "summary": "[R] Add slice() method",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12621934",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621934",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13103422",
                    "key": "ARROW-1565",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103422",
                    "fields": {
                        "summary": "[C++][Compute] Implement TopK/BottomK",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13766/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request, #14361:\nURL: https://github.com/apache/arrow/pull/14361\n\n   This PR implements slice_head, slice_tail, slice_min, and slice_max. slice_sample is also there, but it does not work because the random() C++ function apparently does not work; see ARROW-17974. If that does not get fixed before this merges, I will remove slice_sample from the list of functions that gets registered. \r\n   \r\n   \n\n\n",
                    "created": "2022-10-10T13:51:01.192+0000",
                    "updated": "2022-10-10T13:51:01.192+0000",
                    "started": "2022-10-10T13:51:01.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815217",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815227",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r991318417\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n\nReview Comment:\n   As @paleolimbot noted on ARROW-13766, it is possible to do `with_ties` but it requires doing the top-k calculation and then using that as a filtering join. I'm inclined either not to support it (as done here, before I saw that comment) or to flip the default value of `with_ties` and perhaps raise a warning the first time the function is called to note the difference. Thoughts?\n\n\n\n",
                    "created": "2022-10-10T13:55:43.066+0000",
                    "updated": "2022-10-10T13:55:43.066+0000",
                    "started": "2022-10-10T13:55:43.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815227",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#issuecomment-1273358764\n\n   https://issues.apache.org/jira/browse/ARROW-13766\n\n\n",
                    "created": "2022-10-10T13:59:55.496+0000",
                    "updated": "2022-10-10T13:59:55.496+0000",
                    "started": "2022-10-10T13:59:55.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815229",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992300613\n\n\n##########\nr/R/expression.R:\n##########\n@@ -173,7 +173,12 @@ Expression$create <- function(function_name,\n   assert_that(is.string(function_name))\n   assert_that(is_list_of(args, \"Expression\"), msg = \"Expression arguments must be Expression objects\")\n   expr <- compute___expr__call(function_name, args, options)\n-  expr$schema <- unify_schemas(schemas = lapply(args, function(x) x$schema))\n+  if (length(args)) {\n+    expr$schema <- unify_schemas(schemas = lapply(args, function(x) x$schema))\n+  } else {\n+    # TODO: this shouldn't be necessary\n+    expr$schema <- schema()\n+  }\n\nReview Comment:\n   Just to check, what's the reason for this change?\n\n\n\n",
                    "created": "2022-10-11T13:04:54.192+0000",
                    "updated": "2022-10-11T13:04:54.192+0000",
                    "started": "2022-10-11T13:04:54.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815666",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992343327\n\n\n##########\nr/R/expression.R:\n##########\n@@ -173,7 +173,12 @@ Expression$create <- function(function_name,\n   assert_that(is.string(function_name))\n   assert_that(is_list_of(args, \"Expression\"), msg = \"Expression arguments must be Expression objects\")\n   expr <- compute___expr__call(function_name, args, options)\n-  expr$schema <- unify_schemas(schemas = lapply(args, function(x) x$schema))\n+  if (length(args)) {\n+    expr$schema <- unify_schemas(schemas = lapply(args, function(x) x$schema))\n+  } else {\n+    # TODO: this shouldn't be necessary\n+    expr$schema <- schema()\n+  }\n\nReview Comment:\n   `random()`, though it does not yet work, is our first nullary compute function, so args is length 0, and unify_schemas assumes at least one schema. Before I got to the point of finding that random() doesn't evaluate correctly, I hit an error here. (The TODO is more a grumble for my future self, I have a jira to refactor some of this expression schema tracking business.)\n\n\n\n",
                    "created": "2022-10-11T13:41:37.187+0000",
                    "updated": "2022-10-11T13:41:37.187+0000",
                    "started": "2022-10-11T13:41:37.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815676",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815680",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992347887\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n\nReview Comment:\n   There's an error message for extraneous `slice_*()`-related arguments which dplyr has but we don't have that here:\r\n   \r\n   ``` r\r\n   library(dplyr)\r\n   library(arrow)\r\n   \r\n   mtcars %>%\r\n     slice_tail(n = 3, with_ties = FALSE) %>%\r\n     collect()\r\n   #> Error in `slice_tail()`:\r\n   #> ! `...` must be empty.\r\n   #> \u2716 Problematic argument:\r\n   #> \u2022 with_ties = FALSE\r\n   \r\n   mtcars %>%\r\n     arrow_table() %>%\r\n     slice_tail(n = 3, with_ties = FALSE) %>%\r\n     collect()\r\n   #>    mpg cyl disp  hp drat   wt qsec vs am gear carb\r\n   #> 1 19.7   6  145 175 3.62 2.77 15.5  0  1    5    6\r\n   #> 2 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8\r\n   #> 3 21.4   4  121 109 4.11 2.78 18.6  1  1    4    2\r\n   ```\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n\nReview Comment:\n   ```suggestion\r\n       arrow_not_supported(\"Slicing grouped data\")\r\n   ```\r\n   Slightly more concise - feel free to disregard\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n\nReview Comment:\n   ```suggestion\r\n       arrow_not_supported(\"Slicing grouped data\")\r\n   ```\r\n   Slightly more concise - feel free to disregard\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(dplyr::arrange(.data, ...), n)\n+}\n+slice_min.Dataset <- slice_min.ArrowTabular <- slice_min.RecordBatchReader <- slice_min.arrow_dplyr_query\n+\n+slice_max.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  sorted <- dplyr::arrange(.data, ...)\n+  # Invert the sort order of the things in ... so they're descending\n+  # TODO: handle possibility that .data was already sorted and we don't want\n+  # to invert those sorts? Does that matter? Or no because there's no promise\n+  # of order of which TopK elements you get if there are ties?\n+  sorted$arrange_desc <- !sorted$arrange_desc\n+  head(sorted, n)\n+}\n+slice_max.Dataset <- slice_max.ArrowTabular <- slice_max.RecordBatchReader <- slice_max.arrow_dplyr_query\n+\n+slice_sample.arrow_dplyr_query <- function(.data,\n+                                           ...,\n+                                           n,\n+                                           prop,\n+                                           weight_by = NULL,\n+                                           replace = FALSE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n\nReview Comment:\n   ```suggestion\r\n       arrow_not_supported(\"Slicing grouped data\")\r\n   ```\r\n   Slightly more concise - feel free to disregard\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n\nReview Comment:\n   Something else isn't quite right here:\r\n   \r\n   ``` r\r\n   library(dplyr)\r\n   library(arrow)\r\n   \r\n   mtcars %>%\r\n     slice_tail(prop = 0.1) %>%\r\n     collect()\r\n   #>                mpg cyl disp  hp drat   wt qsec vs am gear carb\r\n   #> Ferrari Dino  19.7   6  145 175 3.62 2.77 15.5  0  1    5    6\r\n   #> Maserati Bora 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8\r\n   #> Volvo 142E    21.4   4  121 109 4.11 2.78 18.6  1  1    4    2\r\n   \r\n   mtcars %>%\r\n     arrow_table() %>%\r\n     slice_tail(prop = 0.1) %>%\r\n     collect()\r\n   #> Error: Expected single integer value\r\n   ```\r\n   \n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n\nReview Comment:\n   I think you're missing the `order_by` argument to `slice_min()` and `slice_max()` here.\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(dplyr::arrange(.data, ...), n)\n+}\n+slice_min.Dataset <- slice_min.ArrowTabular <- slice_min.RecordBatchReader <- slice_min.arrow_dplyr_query\n+\n+slice_max.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n\nReview Comment:\n   ```suggestion\r\n       arrow_not_supported(\"Slicing grouped data\")\r\n   ```\r\n   Slightly more concise - feel free to disregard\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n\nReview Comment:\n   ```suggestion\r\n       arrow_not_supported(\"Slicing grouped data\")\r\n   ```\r\n   Slightly more concise - feel free to disregard\n\n\n\n",
                    "created": "2022-10-11T13:49:12.831+0000",
                    "updated": "2022-10-11T13:49:12.831+0000",
                    "started": "2022-10-11T13:49:12.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815680",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992596574\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, ..., n, prop, with_ties = TRUE) {\n\nReview Comment:\n   Thanks, fixed now\n\n\n\n",
                    "created": "2022-10-11T17:19:53.274+0000",
                    "updated": "2022-10-11T17:19:53.274+0000",
                    "started": "2022-10-11T17:19:53.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815760",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992597923\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n\nReview Comment:\n   Good catch, added the rlang::check_dots_empty call. I left it as `rlang::` instead of adding it to the importFrom we use because I thought you had some PRs open that were touching that, can move there before merging. (Also need to re-run the docgen.R anyway.)\n\n\n\n",
                    "created": "2022-10-11T17:21:08.411+0000",
                    "updated": "2022-10-11T17:21:08.411+0000",
                    "started": "2022-10-11T17:21:08.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815761",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992598751\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n\nReview Comment:\n   Interesting, apparently head/tail take the floor() of the value provided. Added that in all the places.\n\n\n\n",
                    "created": "2022-10-11T17:21:48.467+0000",
                    "updated": "2022-10-11T17:21:48.467+0000",
                    "started": "2022-10-11T17:21:48.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815762",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#issuecomment-1275306826\n\n   @thisisnic thanks for your excellent review. I've addressed your feedback and pushed a little more to unlock `slice_sample()`, PTAL\n\n\n",
                    "created": "2022-10-11T21:43:25.948+0000",
                    "updated": "2022-10-11T21:43:25.948+0000",
                    "started": "2022-10-11T21:43:25.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815840",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992898441\n\n\n##########\nr/R/dplyr-funcs.R:\n##########\n@@ -160,6 +160,17 @@ create_binding_cache <- function() {\n   register_bindings_type()\n   register_bindings_augmented()\n \n+  # HACK because random() doesn't work (ARROW-17974)\n+  register_scalar_function(\n+    \"_random_along\",\n+    function(context, x) {\n+      Array$create(runif(length(x)))\n+    },\n\nReview Comment:\n   I *think* you can do this with zero arguments and something like `Array$create(runif(context$num_rows)` (I forget the exact name of `num_rows`)\n\n\n\n",
                    "created": "2022-10-12T01:24:34.000+0000",
                    "updated": "2022-10-12T01:24:34.000+0000",
                    "started": "2022-10-12T01:24:34.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815865",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/815868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r992903696\n\n\n##########\nr/R/dplyr-funcs.R:\n##########\n@@ -160,6 +160,17 @@ create_binding_cache <- function() {\n   register_bindings_type()\n   register_bindings_augmented()\n \n+  # HACK because random() doesn't work (ARROW-17974)\n+  register_scalar_function(\n+    \"_random_along\",\n+    function(context, x) {\n+      Array$create(runif(length(x)))\n+    },\n\nReview Comment:\n   Cool, thanks, I'll experiment. Weston linked to some other jiras that suggest that a function with 0 args won't work for other reasons, so that may not end up working, but we'll see. \n\n\n\n",
                    "created": "2022-10-12T01:38:45.666+0000",
                    "updated": "2022-10-12T01:38:45.666+0000",
                    "started": "2022-10-12T01:38:45.665+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "815868",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r993442605\n\n\n##########\nr/R/dplyr-funcs.R:\n##########\n@@ -160,6 +160,17 @@ create_binding_cache <- function() {\n   register_bindings_type()\n   register_bindings_augmented()\n \n+  # HACK because random() doesn't work (ARROW-17974)\n+  register_scalar_function(\n+    \"_random_along\",\n+    function(context, x) {\n+      Array$create(runif(length(x)))\n+    },\n\nReview Comment:\n   I tried this, and it fails with the same error message as the C++ `random()` function: `Error in `collect(.)`: Invalid: ExecuteScalarExpression cannot Execute non-scalar expression (Array[double] < 0.2)`\r\n   \r\n   That suggests that the problem with `random()` isn't random per se but the other issues that Weston flagged.\r\n   \r\n   (FTR, the parameter is `context$batch_length`)\n\n\n\n",
                    "created": "2022-10-12T13:11:23.053+0000",
                    "updated": "2022-10-12T13:11:23.053+0000",
                    "started": "2022-10-12T13:11:23.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816155",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r993561010\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,144 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing Arrow data with groups\")\n+  }\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n\nReview Comment:\n   I had a check, and none of my open PRs are touching that, so good to move whenever.\n\n\n\n",
                    "created": "2022-10-12T14:44:46.642+0000",
                    "updated": "2022-10-12T14:44:46.642+0000",
                    "started": "2022-10-12T14:44:46.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816214",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r993593900\n\n\n##########\nr/tests/testthat/test-dplyr-slice.R:\n##########\n@@ -0,0 +1,192 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr, warn.conflicts = FALSE)\n+\n+tbl <- example_data\n+\n+test_that(\"slice_head/tail, ungrouped\", {\n+  # head/tail are not deterministic in Arrow because data is unordered\n+  # so we can't assert identical to dplyr, just assert right number of rows\n+  tab <- arrow_table(tbl)\n+  expect_equal(\n+    tab %>%\n+      slice_head(n = 5) %>%\n+      nrow(),\n+    5\n+  )\n+  expect_equal(\n+    tab %>%\n+      slice_tail(n = 5) %>%\n+      nrow(),\n+    5\n+  )\n+\n+  expect_equal(\n+    tab %>%\n+      slice_head(prop = .25) %>%\n+      nrow(),\n+    2\n+  )\n+  expect_equal(\n+    tab %>%\n+      slice_tail(prop = .25) %>%\n+      nrow(),\n+    2\n+  )\n+})\n+\n+test_that(\"slice_min/max, ungrouped\", {\n+  # with_ties must be FALSE\n+  tab <- arrow_table(tbl)\n+  expect_error(\n+    tab %>% slice_max(int, n = 5),\n+    \"with_ties = TRUE\"\n+  )\n+  expect_error(\n+    tab %>% slice_min(int, n = 5),\n+    \"with_ties = TRUE\"\n+  )\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_max(int, n = 4, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_min(int, n = 4, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_max(int, prop = .25, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_min(int, prop = .25, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+})\n+\n+test_that(\"slice_sample, ungrouped\", {\n+  tab <- arrow_table(tbl)\n+  expect_error(\n+    tab %>% slice_sample(replace = TRUE),\n+    \"Sampling with replacement\"\n+  )\n+  expect_error(\n+    tab %>% slice_sample(weight_by = dbl),\n+    \"weight_by\"\n+  )\n+\n+  # Because this is random (and we only have 10 rows), try several times\n+  for (i in 1:10) {\n+    sampled_prop <- tab %>%\n+      slice_sample(prop = .2) %>%\n+      collect() %>%\n+      nrow()\n+    if (sampled_prop == 2) break\n+  }\n+  expect_equal(sampled_prop, 2)\n\nReview Comment:\n   I may be under-caffeinated today, but I'm super confused by this.  Wouldn't we always expect 2 rows if 0.2 * 10 is 2?  Can you add a bit more detail in the comment?\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,158 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(dplyr::arrange(.data, {{ order_by }}), n)\n+}\n+slice_min.Dataset <- slice_min.ArrowTabular <- slice_min.RecordBatchReader <- slice_min.arrow_dplyr_query\n+\n+slice_max.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  sorted <- dplyr::arrange(.data, {{ order_by }})\n+  # Invert the sort order of the things in ... so they're descending\n+  # TODO: handle possibility that .data was already sorted and we don't want\n+  # to invert those sorts? Does that matter? Or no because there's no promise\n+  # of order of which TopK elements you get if there are ties?\n+  sorted$arrange_desc <- !sorted$arrange_desc\n+  head(sorted, n)\n+}\n+slice_max.Dataset <- slice_max.ArrowTabular <- slice_max.RecordBatchReader <- slice_max.arrow_dplyr_query\n+\n+slice_sample.arrow_dplyr_query <- function(.data,\n+                                           ...,\n+                                           n,\n+                                           prop,\n+                                           weight_by = NULL,\n+                                           replace = FALSE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (replace) {\n+    arrow_not_supported(\"Sampling with replacement\")\n+  }\n+  if (!missing(weight_by)) {\n+    # You could do this by multiplying the random() column * weight_by\n+    # but you'd need to calculate sum(weight_by) in order to normalize\n+    arrow_not_supported(\"weight_by\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  # If we want n rows sampled, we have to convert n to prop, oversample some\n+  # just to make sure we get enough, then head(n)\n+  sampling_n <- missing(prop)\n+  if (missing(prop)) {\n+    prop <- min(n_to_prop(.data, n) + .05, 1)\n+  }\n+  validate_prop(prop)\n+\n+  if (prop < 1) {\n+    .data <- as_adq(.data)\n+    # TODO(ARROW-17974): expr <- Expression$create(\"random\") < prop\n+    # HACK: use our UDF to generate random. It needs an input column because\n+    # nullary functions don't work, and that column has to be typed. We've\n+    # chosen boolean() type because it's compact and can always be created:\n+    # pick any column and do is.na, that will be boolean.\n+    # TODO: get an actual FieldRef because the first col could be derived\n+    ref <- Expression$create(\"is_null\", .data$selected_columns[[1]])\n+    expr <- Expression$create(\"_random_along\", ref) < prop\n+    .data <- set_filters(.data, expr)\n+  }\n+  if (sampling_n) {\n+    .data <- head(.data, n)\n+  }\n+\n+  .data\n+}\n+slice_sample.Dataset <- slice_sample.ArrowTabular <- slice_sample.RecordBatchReader <- slice_sample.arrow_dplyr_query\n+\n+\n+prop_to_n <- function(.data, prop) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"Slicing with `prop` when `nrow()` requires evaluating the query\")\n+  }\n+  validate_prop(prop)\n+  nrows * prop\n+}\n+\n+validate_prop <- function(prop) {\n+  if (!is.numeric(prop) || length(prop) != 1 || is.na(prop) || prop < 0 || prop > 1) {\n+    stop(\"`prop` must be a single numeric value in [0, 1]\", call. = FALSE)\n+  }\n+}\n+\n+n_to_prop <- function(.data, n) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"slice_sample() with `n` when `nrow()` requires evaluating the query\")\n\nReview Comment:\n   Can we rephrase this? It's not totally clear to me when `nrow()` requires evaluating the query, and I wonder if it'll be clear to a user why they're getting this error.  How about something like \"when `nrow()` is used before `slice()`\" (I know that's wrong, but...) or whatever the concrete external condition is that'll trigger this error.\r\n   \r\n   I guess we probably also want a test for whatever triggers this too?\n\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,158 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(dplyr::arrange(.data, {{ order_by }}), n)\n+}\n+slice_min.Dataset <- slice_min.ArrowTabular <- slice_min.RecordBatchReader <- slice_min.arrow_dplyr_query\n+\n+slice_max.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  sorted <- dplyr::arrange(.data, {{ order_by }})\n+  # Invert the sort order of the things in ... so they're descending\n+  # TODO: handle possibility that .data was already sorted and we don't want\n+  # to invert those sorts? Does that matter? Or no because there's no promise\n+  # of order of which TopK elements you get if there are ties?\n+  sorted$arrange_desc <- !sorted$arrange_desc\n+  head(sorted, n)\n+}\n+slice_max.Dataset <- slice_max.ArrowTabular <- slice_max.RecordBatchReader <- slice_max.arrow_dplyr_query\n+\n+slice_sample.arrow_dplyr_query <- function(.data,\n+                                           ...,\n+                                           n,\n+                                           prop,\n+                                           weight_by = NULL,\n+                                           replace = FALSE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (replace) {\n+    arrow_not_supported(\"Sampling with replacement\")\n+  }\n+  if (!missing(weight_by)) {\n+    # You could do this by multiplying the random() column * weight_by\n+    # but you'd need to calculate sum(weight_by) in order to normalize\n+    arrow_not_supported(\"weight_by\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  # If we want n rows sampled, we have to convert n to prop, oversample some\n+  # just to make sure we get enough, then head(n)\n+  sampling_n <- missing(prop)\n+  if (missing(prop)) {\n+    prop <- min(n_to_prop(.data, n) + .05, 1)\n+  }\n+  validate_prop(prop)\n+\n+  if (prop < 1) {\n+    .data <- as_adq(.data)\n+    # TODO(ARROW-17974): expr <- Expression$create(\"random\") < prop\n+    # HACK: use our UDF to generate random. It needs an input column because\n+    # nullary functions don't work, and that column has to be typed. We've\n+    # chosen boolean() type because it's compact and can always be created:\n+    # pick any column and do is.na, that will be boolean.\n+    # TODO: get an actual FieldRef because the first col could be derived\n+    ref <- Expression$create(\"is_null\", .data$selected_columns[[1]])\n+    expr <- Expression$create(\"_random_along\", ref) < prop\n+    .data <- set_filters(.data, expr)\n+  }\n+  if (sampling_n) {\n+    .data <- head(.data, n)\n+  }\n+\n+  .data\n+}\n+slice_sample.Dataset <- slice_sample.ArrowTabular <- slice_sample.RecordBatchReader <- slice_sample.arrow_dplyr_query\n+\n+\n+prop_to_n <- function(.data, prop) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"Slicing with `prop` when `nrow()` requires evaluating the query\")\n+  }\n+  validate_prop(prop)\n+  nrows * prop\n+}\n+\n+validate_prop <- function(prop) {\n+  if (!is.numeric(prop) || length(prop) != 1 || is.na(prop) || prop < 0 || prop > 1) {\n+    stop(\"`prop` must be a single numeric value in [0, 1]\", call. = FALSE)\n\nReview Comment:\n   ```suggestion\r\n       stop(\"`prop` must be a single numeric value between 0 and 1\", call. = FALSE)\r\n   ```\n\n\n\n",
                    "created": "2022-10-12T15:14:18.124+0000",
                    "updated": "2022-10-12T15:14:18.124+0000",
                    "started": "2022-10-12T15:14:18.123+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816229",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r993691814\n\n\n##########\nr/tests/testthat/test-dplyr-slice.R:\n##########\n@@ -0,0 +1,192 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+library(dplyr, warn.conflicts = FALSE)\n+\n+tbl <- example_data\n+\n+test_that(\"slice_head/tail, ungrouped\", {\n+  # head/tail are not deterministic in Arrow because data is unordered\n+  # so we can't assert identical to dplyr, just assert right number of rows\n+  tab <- arrow_table(tbl)\n+  expect_equal(\n+    tab %>%\n+      slice_head(n = 5) %>%\n+      nrow(),\n+    5\n+  )\n+  expect_equal(\n+    tab %>%\n+      slice_tail(n = 5) %>%\n+      nrow(),\n+    5\n+  )\n+\n+  expect_equal(\n+    tab %>%\n+      slice_head(prop = .25) %>%\n+      nrow(),\n+    2\n+  )\n+  expect_equal(\n+    tab %>%\n+      slice_tail(prop = .25) %>%\n+      nrow(),\n+    2\n+  )\n+})\n+\n+test_that(\"slice_min/max, ungrouped\", {\n+  # with_ties must be FALSE\n+  tab <- arrow_table(tbl)\n+  expect_error(\n+    tab %>% slice_max(int, n = 5),\n+    \"with_ties = TRUE\"\n+  )\n+  expect_error(\n+    tab %>% slice_min(int, n = 5),\n+    \"with_ties = TRUE\"\n+  )\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_max(int, n = 4, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_min(int, n = 4, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_max(int, prop = .25, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+  compare_dplyr_binding(\n+    .input %>%\n+      slice_min(int, prop = .25, with_ties = FALSE) %>%\n+      collect(),\n+    tbl\n+  )\n+})\n+\n+test_that(\"slice_sample, ungrouped\", {\n+  tab <- arrow_table(tbl)\n+  expect_error(\n+    tab %>% slice_sample(replace = TRUE),\n+    \"Sampling with replacement\"\n+  )\n+  expect_error(\n+    tab %>% slice_sample(weight_by = dbl),\n+    \"weight_by\"\n+  )\n+\n+  # Because this is random (and we only have 10 rows), try several times\n+  for (i in 1:10) {\n+    sampled_prop <- tab %>%\n+      slice_sample(prop = .2) %>%\n+      collect() %>%\n+      nrow()\n+    if (sampled_prop == 2) break\n+  }\n+  expect_equal(sampled_prop, 2)\n\nReview Comment:\n   It's implemented as `filter(runif(nrow) < prop)`, and since that's random, you won't always get an exact number or rows.\r\n   \r\n   ```\r\n   > tab <- mtcars %>%\r\n   +   arrow_table() %>%\r\n   +   slice_sample(prop = .2)\r\n   > \r\n   > for (i in 1:10) print(nrow(collect(tab)))\r\n   [1] 3\r\n   [1] 12\r\n   [1] 6\r\n   [1] 4\r\n   [1] 4\r\n   [1] 4\r\n   [1] 4\r\n   [1] 5\r\n   [1] 4\r\n   [1] 7\r\n   > .2 * nrow(mtcars)\r\n   [1] 6.4\r\n   ```\n\n\n\n",
                    "created": "2022-10-12T16:44:40.560+0000",
                    "updated": "2022-10-12T16:44:40.560+0000",
                    "started": "2022-10-12T16:44:40.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816281",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r993695124\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,158 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(dplyr::arrange(.data, {{ order_by }}), n)\n+}\n+slice_min.Dataset <- slice_min.ArrowTabular <- slice_min.RecordBatchReader <- slice_min.arrow_dplyr_query\n+\n+slice_max.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  sorted <- dplyr::arrange(.data, {{ order_by }})\n+  # Invert the sort order of the things in ... so they're descending\n+  # TODO: handle possibility that .data was already sorted and we don't want\n+  # to invert those sorts? Does that matter? Or no because there's no promise\n+  # of order of which TopK elements you get if there are ties?\n+  sorted$arrange_desc <- !sorted$arrange_desc\n+  head(sorted, n)\n+}\n+slice_max.Dataset <- slice_max.ArrowTabular <- slice_max.RecordBatchReader <- slice_max.arrow_dplyr_query\n+\n+slice_sample.arrow_dplyr_query <- function(.data,\n+                                           ...,\n+                                           n,\n+                                           prop,\n+                                           weight_by = NULL,\n+                                           replace = FALSE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (replace) {\n+    arrow_not_supported(\"Sampling with replacement\")\n+  }\n+  if (!missing(weight_by)) {\n+    # You could do this by multiplying the random() column * weight_by\n+    # but you'd need to calculate sum(weight_by) in order to normalize\n+    arrow_not_supported(\"weight_by\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  # If we want n rows sampled, we have to convert n to prop, oversample some\n+  # just to make sure we get enough, then head(n)\n+  sampling_n <- missing(prop)\n+  if (missing(prop)) {\n+    prop <- min(n_to_prop(.data, n) + .05, 1)\n+  }\n+  validate_prop(prop)\n+\n+  if (prop < 1) {\n+    .data <- as_adq(.data)\n+    # TODO(ARROW-17974): expr <- Expression$create(\"random\") < prop\n+    # HACK: use our UDF to generate random. It needs an input column because\n+    # nullary functions don't work, and that column has to be typed. We've\n+    # chosen boolean() type because it's compact and can always be created:\n+    # pick any column and do is.na, that will be boolean.\n+    # TODO: get an actual FieldRef because the first col could be derived\n+    ref <- Expression$create(\"is_null\", .data$selected_columns[[1]])\n+    expr <- Expression$create(\"_random_along\", ref) < prop\n+    .data <- set_filters(.data, expr)\n+  }\n+  if (sampling_n) {\n+    .data <- head(.data, n)\n+  }\n+\n+  .data\n+}\n+slice_sample.Dataset <- slice_sample.ArrowTabular <- slice_sample.RecordBatchReader <- slice_sample.arrow_dplyr_query\n+\n+\n+prop_to_n <- function(.data, prop) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"Slicing with `prop` when `nrow()` requires evaluating the query\")\n+  }\n+  validate_prop(prop)\n+  nrows * prop\n+}\n+\n+validate_prop <- function(prop) {\n+  if (!is.numeric(prop) || length(prop) != 1 || is.na(prop) || prop < 0 || prop > 1) {\n+    stop(\"`prop` must be a single numeric value in [0, 1]\", call. = FALSE)\n+  }\n+}\n+\n+n_to_prop <- function(.data, n) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"slice_sample() with `n` when `nrow()` requires evaluating the query\")\n\nReview Comment:\n   I'll try to reword better. Test is here: https://github.com/apache/arrow/pull/14361/files#diff-e0f2a592a9d129c37b8f12c516013663189acdd94818a826f28096bf83922c79R172\n\n\n\n",
                    "created": "2022-10-12T16:48:25.759+0000",
                    "updated": "2022-10-12T16:48:25.759+0000",
                    "started": "2022-10-12T16:48:25.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816283",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r993708753\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,158 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(dplyr::arrange(.data, {{ order_by }}), n)\n+}\n+slice_min.Dataset <- slice_min.ArrowTabular <- slice_min.RecordBatchReader <- slice_min.arrow_dplyr_query\n+\n+slice_max.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  sorted <- dplyr::arrange(.data, {{ order_by }})\n+  # Invert the sort order of the things in ... so they're descending\n+  # TODO: handle possibility that .data was already sorted and we don't want\n+  # to invert those sorts? Does that matter? Or no because there's no promise\n+  # of order of which TopK elements you get if there are ties?\n+  sorted$arrange_desc <- !sorted$arrange_desc\n+  head(sorted, n)\n+}\n+slice_max.Dataset <- slice_max.ArrowTabular <- slice_max.RecordBatchReader <- slice_max.arrow_dplyr_query\n+\n+slice_sample.arrow_dplyr_query <- function(.data,\n+                                           ...,\n+                                           n,\n+                                           prop,\n+                                           weight_by = NULL,\n+                                           replace = FALSE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (replace) {\n+    arrow_not_supported(\"Sampling with replacement\")\n+  }\n+  if (!missing(weight_by)) {\n+    # You could do this by multiplying the random() column * weight_by\n+    # but you'd need to calculate sum(weight_by) in order to normalize\n+    arrow_not_supported(\"weight_by\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  # If we want n rows sampled, we have to convert n to prop, oversample some\n+  # just to make sure we get enough, then head(n)\n+  sampling_n <- missing(prop)\n+  if (missing(prop)) {\n+    prop <- min(n_to_prop(.data, n) + .05, 1)\n+  }\n+  validate_prop(prop)\n+\n+  if (prop < 1) {\n+    .data <- as_adq(.data)\n+    # TODO(ARROW-17974): expr <- Expression$create(\"random\") < prop\n+    # HACK: use our UDF to generate random. It needs an input column because\n+    # nullary functions don't work, and that column has to be typed. We've\n+    # chosen boolean() type because it's compact and can always be created:\n+    # pick any column and do is.na, that will be boolean.\n+    # TODO: get an actual FieldRef because the first col could be derived\n+    ref <- Expression$create(\"is_null\", .data$selected_columns[[1]])\n+    expr <- Expression$create(\"_random_along\", ref) < prop\n+    .data <- set_filters(.data, expr)\n+  }\n+  if (sampling_n) {\n+    .data <- head(.data, n)\n+  }\n+\n+  .data\n+}\n+slice_sample.Dataset <- slice_sample.ArrowTabular <- slice_sample.RecordBatchReader <- slice_sample.arrow_dplyr_query\n+\n+\n+prop_to_n <- function(.data, prop) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"Slicing with `prop` when `nrow()` requires evaluating the query\")\n+  }\n+  validate_prop(prop)\n+  nrows * prop\n+}\n+\n+validate_prop <- function(prop) {\n+  if (!is.numeric(prop) || length(prop) != 1 || is.na(prop) || prop < 0 || prop > 1) {\n+    stop(\"`prop` must be a single numeric value in [0, 1]\", call. = FALSE)\n+  }\n+}\n+\n+n_to_prop <- function(.data, n) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"slice_sample() with `n` when `nrow()` requires evaluating the query\")\n\nReview Comment:\n   Out of interest, is this only the case of joins, or are there other circumstances in which we may not know `nrow()`?  Like, I guess, aggregations too?\n\n\n\n",
                    "created": "2022-10-12T17:03:41.549+0000",
                    "updated": "2022-10-12T17:03:41.549+0000",
                    "started": "2022-10-12T17:03:41.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816294",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#discussion_r993715247\n\n\n##########\nr/R/dplyr-slice.R:\n##########\n@@ -0,0 +1,158 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\n+# The following S3 methods are registered on load if dplyr is present\n+\n+slice_head.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(.data, n)\n+}\n+slice_head.Dataset <- slice_head.ArrowTabular <- slice_head.RecordBatchReader <- slice_head.arrow_dplyr_query\n+\n+slice_tail.arrow_dplyr_query <- function(.data, ..., n, prop) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  tail(.data, n)\n+}\n+slice_tail.Dataset <- slice_tail.ArrowTabular <- slice_tail.RecordBatchReader <- slice_tail.arrow_dplyr_query\n+\n+slice_min.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  head(dplyr::arrange(.data, {{ order_by }}), n)\n+}\n+slice_min.Dataset <- slice_min.ArrowTabular <- slice_min.RecordBatchReader <- slice_min.arrow_dplyr_query\n+\n+slice_max.arrow_dplyr_query <- function(.data, order_by, ..., n, prop, with_ties = TRUE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (with_ties) {\n+    arrow_not_supported(\"with_ties = TRUE\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  if (missing(n)) {\n+    n <- prop_to_n(.data, prop)\n+  }\n+\n+  sorted <- dplyr::arrange(.data, {{ order_by }})\n+  # Invert the sort order of the things in ... so they're descending\n+  # TODO: handle possibility that .data was already sorted and we don't want\n+  # to invert those sorts? Does that matter? Or no because there's no promise\n+  # of order of which TopK elements you get if there are ties?\n+  sorted$arrange_desc <- !sorted$arrange_desc\n+  head(sorted, n)\n+}\n+slice_max.Dataset <- slice_max.ArrowTabular <- slice_max.RecordBatchReader <- slice_max.arrow_dplyr_query\n+\n+slice_sample.arrow_dplyr_query <- function(.data,\n+                                           ...,\n+                                           n,\n+                                           prop,\n+                                           weight_by = NULL,\n+                                           replace = FALSE) {\n+  if (length(group_vars(.data)) > 0) {\n+    arrow_not_supported(\"Slicing grouped data\")\n+  }\n+  if (replace) {\n+    arrow_not_supported(\"Sampling with replacement\")\n+  }\n+  if (!missing(weight_by)) {\n+    # You could do this by multiplying the random() column * weight_by\n+    # but you'd need to calculate sum(weight_by) in order to normalize\n+    arrow_not_supported(\"weight_by\")\n+  }\n+  rlang::check_dots_empty()\n+\n+  # If we want n rows sampled, we have to convert n to prop, oversample some\n+  # just to make sure we get enough, then head(n)\n+  sampling_n <- missing(prop)\n+  if (missing(prop)) {\n+    prop <- min(n_to_prop(.data, n) + .05, 1)\n+  }\n+  validate_prop(prop)\n+\n+  if (prop < 1) {\n+    .data <- as_adq(.data)\n+    # TODO(ARROW-17974): expr <- Expression$create(\"random\") < prop\n+    # HACK: use our UDF to generate random. It needs an input column because\n+    # nullary functions don't work, and that column has to be typed. We've\n+    # chosen boolean() type because it's compact and can always be created:\n+    # pick any column and do is.na, that will be boolean.\n+    # TODO: get an actual FieldRef because the first col could be derived\n+    ref <- Expression$create(\"is_null\", .data$selected_columns[[1]])\n+    expr <- Expression$create(\"_random_along\", ref) < prop\n+    .data <- set_filters(.data, expr)\n+  }\n+  if (sampling_n) {\n+    .data <- head(.data, n)\n+  }\n+\n+  .data\n+}\n+slice_sample.Dataset <- slice_sample.ArrowTabular <- slice_sample.RecordBatchReader <- slice_sample.arrow_dplyr_query\n+\n+\n+prop_to_n <- function(.data, prop) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"Slicing with `prop` when `nrow()` requires evaluating the query\")\n+  }\n+  validate_prop(prop)\n+  nrows * prop\n+}\n+\n+validate_prop <- function(prop) {\n+  if (!is.numeric(prop) || length(prop) != 1 || is.na(prop) || prop < 0 || prop > 1) {\n+    stop(\"`prop` must be a single numeric value in [0, 1]\", call. = FALSE)\n+  }\n+}\n+\n+n_to_prop <- function(.data, n) {\n+  nrows <- nrow(.data)\n+  if (is.na(nrows)) {\n+    arrow_not_supported(\"slice_sample() with `n` when `nrow()` requires evaluating the query\")\n\nReview Comment:\n   More or less. In practice it is any query that is `collapsed`: https://github.com/apache/arrow/blob/master/r/R/dplyr.R#L172-L174 but see ARROW-14288 about opening that up in some cases. \n\n\n\n",
                    "created": "2022-10-12T17:11:42.017+0000",
                    "updated": "2022-10-12T17:11:42.017+0000",
                    "started": "2022-10-12T17:11:42.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816296",
                    "issueId": "13397593"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/worklog/816630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on PR #14361:\nURL: https://github.com/apache/arrow/pull/14361#issuecomment-1277699003\n\n   @thisisnic want to give this one more look?\n\n\n",
                    "created": "2022-10-13T14:24:32.261+0000",
                    "updated": "2022-10-13T14:24:32.261+0000",
                    "started": "2022-10-13T14:24:32.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816630",
                    "issueId": "13397593"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5f62b5a5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c16ee4d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ce5f68c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37ba15db[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3948e477[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7a089c4a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@597a4411[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3e898628[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@401cb6d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e488857[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75191143[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7d3610e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 13 23:59:36 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-13T23:59:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13766/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-08-26T15:31:33.000+0000",
        "updated": "2022-10-14T21:52:50.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement [{{slice_min()}} and {{slice_max()}}|https://dplyr.tidyverse.org/reference/slice.html]\u00a0methods for\u00a0{{ArrowTabular}}, {{Dataset}},\u00a0and {{arrow_dplyr_query}}\u00a0objects.\r\n\r\nThese dplyr functions supersede the\u00a0older dplyr function [{{top_n()}}|https://dplyr.tidyverse.org/reference/top_n.html] which I suppose we should also consider implementing a method for.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Add Arrow methods slice_min(), slice_max()",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/comment/17461567",
                    "id": "17461567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Some example usage maybe useful for a test:\r\n\r\n{code:R}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\n\r\ndf <- tibble(a = rep(letters, 10), b = 1:260, c = 260:1)\r\n\r\ndf %>% slice_min(a, n = 5, with_ties = TRUE)\r\n#> # A tibble: 10 \u00d7 3\r\n#>    a         b     c\r\n#>    <chr> <int> <int>\r\n#>  1 a         1   260\r\n#>  2 a        27   234\r\n#>  3 a        53   208\r\n#>  4 a        79   182\r\n#>  5 a       105   156\r\n#>  6 a       131   130\r\n#>  7 a       157   104\r\n#>  8 a       183    78\r\n#>  9 a       209    52\r\n#> 10 a       235    26\r\ndf %>% slice_min(a, n = 5, with_ties = FALSE)\r\n#> # A tibble: 5 \u00d7 3\r\n#>   a         b     c\r\n#>   <chr> <int> <int>\r\n#> 1 a         1   260\r\n#> 2 a        27   234\r\n#> 3 a        53   208\r\n#> 4 a        79   182\r\n#> 5 a       105   156\r\n\r\ndf %>% slice_min(c, n = 5)\r\n#> # A tibble: 5 \u00d7 3\r\n#>   a         b     c\r\n#>   <chr> <int> <int>\r\n#> 1 z       260     1\r\n#> 2 y       259     2\r\n#> 3 x       258     3\r\n#> 4 w       257     4\r\n#> 5 v       256     5\r\ndf %>% slice_min(c, prop = 5 / 260)\r\n#> # A tibble: 5 \u00d7 3\r\n#>   a         b     c\r\n#>   <chr> <int> <int>\r\n#> 1 z       260     1\r\n#> 2 y       259     2\r\n#> 3 x       258     3\r\n#> 4 w       257     4\r\n#> 5 v       256     5\r\n{code}\r\n\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2021-12-17T17:08:04.002+0000",
                    "updated": "2021-12-17T17:08:04.002+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/comment/17461577",
                    "id": "17461577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Without ties this isn't bad:\r\n\r\n{code:R}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\n\r\ndf <- tibble(a = rep(letters, 10), b = 1:260, c = 260:1)\r\n\r\n# slice_*() without ties is easier\r\nrecord_batch(df) %>% \r\n  arrange(c) %>% head(5) %>%\r\n  collect()\r\n#> # A tibble: 5 \u00d7 3\r\n#>   a         b     c\r\n#>   <chr> <int> <int>\r\n#> 1 z       260     1\r\n#> 2 y       259     2\r\n#> 3 x       258     3\r\n#> 4 w       257     4\r\n#> 5 v       256     5\r\n\r\nrecord_batch(df) %>% \r\n  arrange(desc(c)) %>% head(5) %>%\r\n  collect()\r\n#> # A tibble: 5 \u00d7 3\r\n#>   a         b     c\r\n#>   <chr> <int> <int>\r\n#> 1 a         1   260\r\n#> 2 b         2   259\r\n#> 3 c         3   258\r\n#> 4 d         4   257\r\n#> 5 e         5   256\r\n{code}\r\n\r\nWith ties isn't too bad either (just needs a join):\r\n\r\n{code:R}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\n\r\ndf <- tibble(a = rep(letters, 10), b = 1:260, c = 260:1)\r\n\r\n# slice_*() with ties needs a join\r\nrb <-  record_batch(df)\r\nrb %>% arrange(a) %>% select(a) %>% head(5) %>% distinct() %>% left_join(rb) %>% collect()\r\n#> # A tibble: 10 \u00d7 3\r\n#>    a         b     c\r\n#>    <chr> <int> <int>\r\n#>  1 a         1   260\r\n#>  2 a        27   234\r\n#>  3 a        53   208\r\n#>  4 a        79   182\r\n#>  5 a       105   156\r\n#>  6 a       131   130\r\n#>  7 a       157   104\r\n#>  8 a       183    78\r\n#>  9 a       209    52\r\n#> 10 a       235    26\r\n{code}\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2021-12-17T17:21:28.050+0000",
                    "updated": "2021-12-17T17:21:28.050+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13397593/comment/17617359",
                    "id": "17617359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 14361\n[https://github.com/apache/arrow/pull/14361]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-10-13T23:59:36.857+0000",
                    "updated": "2022-10-13T23:59:36.857+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ub5c:",
        "customfield_12314139": null
    }
}