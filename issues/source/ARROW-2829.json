{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13171325",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325",
    "key": "ARROW-2829",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2829/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/worklog/121812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #2250: ARROW-2829: [GLib] Add GArrowORCFileReader\nURL: https://github.com/apache/arrow/pull/2250\n \n \n   c_glib/test/fixture/TestOrcFile.test1.orc is copied from\r\n   https://github.com/apache/orc/blob/master/examples/TestOrcFile.test1.orc .\r\n   Its license is Apache License 2.0.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-11T07:43:21.129+0000",
                    "updated": "2018-07-11T07:43:21.129+0000",
                    "started": "2018-07-11T07:43:21.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "121812",
                    "issueId": "13171325"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/worklog/121813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2250: ARROW-2829: [GLib] Add GArrowORCFileReader\nURL: https://github.com/apache/arrow/pull/2250#issuecomment-404076040\n \n \n   This isn't a required change for 0.10.0. This is a nice-to-have change.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-11T07:43:49.582+0000",
                    "updated": "2018-07-11T07:43:49.582+0000",
                    "started": "2018-07-11T07:43:49.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "121813",
                    "issueId": "13171325"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/worklog/122159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2250: ARROW-2829: [GLib] Add GArrowORCFileReader\nURL: https://github.com/apache/arrow/pull/2250#issuecomment-404388481\n \n \n   Oops. I've fixed the test failure.\r\n   And I revised API. I removed field indexes arguments from readers and added accessor for field indexes. We can add API to specify target fields by names like PyArrow did in the future without breaking API.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-12T04:50:09.078+0000",
                    "updated": "2018-07-12T04:50:09.078+0000",
                    "started": "2018-07-12T04:50:09.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "122159",
                    "issueId": "13171325"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/worklog/122654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2250: ARROW-2829: [GLib] Add GArrowORCFileReader\nURL: https://github.com/apache/arrow/pull/2250#issuecomment-404736683\n \n \n   @shiro615 Can you review this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-13T06:13:59.597+0000",
                    "updated": "2018-07-13T06:13:59.597+0000",
                    "started": "2018-07-13T06:13:59.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "122654",
                    "issueId": "13171325"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/worklog/123159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on issue #2250: ARROW-2829: [GLib] Add GArrowORCFileReader\nURL: https://github.com/apache/arrow/pull/2250#issuecomment-404990119\n \n \n   @kou Thanks!\r\n   This PR looks good to me.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-14T01:45:21.252+0000",
                    "updated": "2018-07-14T01:45:21.252+0000",
                    "started": "2018-07-14T01:45:21.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123159",
                    "issueId": "13171325"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/worklog/123211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2250: ARROW-2829: [GLib] Add GArrowORCFileReader\nURL: https://github.com/apache/arrow/pull/2250#issuecomment-405001474\n \n \n   @shiro615 Thanks! I've added one more change after your review. Sorry. It renames `read_schema` to `read_type` because other read family, `read_stripes` and `read_stripe`, use ORC term not Arrow term. So `read_schema` should use ORC term.\r\n   \r\n   I'll merge this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-14T06:00:04.466+0000",
                    "updated": "2018-07-14T06:00:04.466+0000",
                    "started": "2018-07-14T06:00:04.465+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123211",
                    "issueId": "13171325"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/worklog/123213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #2250: ARROW-2829: [GLib] Add GArrowORCFileReader\nURL: https://github.com/apache/arrow/pull/2250\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex 51253f28c5..24b32a4016 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -163,6 +163,7 @@ matrix:\n     language: cpp\n     os: linux\n     env:\n+    - ARROW_TRAVIS_ORC=1\n     - BUILD_TORCH_EXAMPLE=no\n     - CC=\"gcc-4.9\"\n     - CXX=\"g++-4.9\"\n@@ -179,6 +180,8 @@ matrix:\n   - compiler: clang\n     osx_image: xcode8.3\n     os: osx\n+    env:\n+    - ARROW_TRAVIS_ORC=1\n     cache:\n     addons:\n     rvm: 2.2\ndiff --git a/c_glib/arrow-glib/Makefile.am b/c_glib/arrow-glib/Makefile.am\nindex 845048dd75..701714368b 100644\n--- a/c_glib/arrow-glib/Makefile.am\n+++ b/c_glib/arrow-glib/Makefile.am\n@@ -82,6 +82,11 @@ libarrow_glib_la_headers +=\t\t\t\\\n libarrow_glib_la_headers +=\t\t\t\\\n \tcompute.h\n \n+if HAVE_ARROW_ORC\n+libarrow_glib_la_headers +=\t\t\t\\\n+\torc-file-reader.h\n+endif\n+\n libarrow_glib_la_generated_headers =\t\t\\\n \tenums.h\t\t\t\t\t\\\n \tversion.h\n@@ -128,6 +133,11 @@ libarrow_glib_la_sources +=\t\t\t\\\n libarrow_glib_la_sources +=\t\t\t\\\n \tcompute.cpp\n \n+if HAVE_ARROW_ORC\n+libarrow_glib_la_sources +=\t\t\t\\\n+\torc-file-reader.cpp\n+endif\n+\n libarrow_glib_la_cpp_headers =\t\t\t\\\n \tarray.hpp\t\t\t\t\\\n \tarray-builder.hpp\t\t\t\\\n@@ -165,6 +175,11 @@ libarrow_glib_la_cpp_headers +=\t\t\t\\\n libarrow_glib_la_cpp_headers +=\t\t\t\\\n \tcompute.hpp\n \n+if HAVE_ARROW_ORC\n+libarrow_glib_la_cpp_headers +=\t\t\t\\\n+\torc-file-reader.hpp\n+endif\n+\n libarrow_glib_la_SOURCES =\t\t\t\\\n \t$(libarrow_glib_la_sources)\t\t\\\n \t$(libarrow_glib_la_cpp_headers)\n@@ -217,6 +232,11 @@ pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA =\t\t\t\t\\\n \tarrow-glib.pc\n \n+if HAVE_ARROW_ORC\n+pkgconfig_DATA +=\t\t\t\t\\\n+\tarrow-glib-orc.pc\n+endif\n+\n if HAVE_INTROSPECTION\n -include $(INTROSPECTION_MAKEFILE)\n INTROSPECTION_GIRS =\ndiff --git a/c_glib/arrow-glib/arrow-glib-orc.pc.in b/c_glib/arrow-glib/arrow-glib-orc.pc.in\nnew file mode 100644\nindex 0000000000..5d22e143b5\n--- /dev/null\n+++ b/c_glib/arrow-glib/arrow-glib-orc.pc.in\n@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: Apache Arrow GLib ORC\n+Description: ORC modules for Apache Arrow GLib\n+Version: @VERSION@\n+Requires: arrow-glib\ndiff --git a/c_glib/arrow-glib/meson.build b/c_glib/arrow-glib/meson.build\nindex 5e3dbe2111..e5f4860796 100644\n--- a/c_glib/arrow-glib/meson.build\n+++ b/c_glib/arrow-glib/meson.build\n@@ -57,6 +57,12 @@ sources += files(\n   'compute.cpp',\n )\n \n+if arrow_orc_dependency.found()\n+  sources += files(\n+    'orc-file-reader.cpp',\n+  )\n+endif\n+\n c_headers = files(\n   'array.h',\n   'array-builder.h',\n@@ -102,6 +108,12 @@ c_headers += files(\n   'compute.h',\n )\n \n+if arrow_orc_dependency.found()\n+  c_headers += files(\n+    'orc-file-reader.h',\n+  )\n+endif\n+\n \n cpp_headers = files(\n   'array.hpp',\n@@ -144,6 +156,11 @@ cpp_headers += files(\n   'compute.hpp',\n )\n \n+if arrow_orc_dependency.found()\n+  cpp_headers += files(\n+    'orc-file-reader.hpp',\n+  )\n+endif\n \n version_h_conf = configuration_data()\n version_h_conf.set('GARROW_VERSION_MAJOR', version_major)\n@@ -198,6 +215,13 @@ pkgconfig.generate(filebase: meson.project_name(),\n                    version: version,\n                    requires: ['gio-2.0', 'arrow'],\n                    libraries: [libarrow_glib])\n+if arrow_orc_dependency.found()\n+  pkgconfig.generate(filebase: meson.project_name(),\n+                     name: 'Apache Arrow GLib ORC',\n+                     description: 'ORC modules for Apache Arrow GLib',\n+                     version: version,\n+                     requires: ['arrow-glib'])\n+endif\n \n arrow_glib_gir = gnome.generate_gir(libarrow_glib,\n                                     sources: sources + c_headers + enums,\ndiff --git a/c_glib/arrow-glib/orc-file-reader.cpp b/c_glib/arrow-glib/orc-file-reader.cpp\nnew file mode 100644\nindex 0000000000..87ba5637b4\n--- /dev/null\n+++ b/c_glib/arrow-glib/orc-file-reader.cpp\n@@ -0,0 +1,407 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#ifdef HAVE_CONFIG_H\n+#  include <config.h>\n+#endif\n+\n+#include <arrow-glib/error.hpp>\n+#include <arrow-glib/input-stream.hpp>\n+#include <arrow-glib/orc-file-reader.hpp>\n+#include <arrow-glib/record-batch.hpp>\n+#include <arrow-glib/schema.hpp>\n+#include <arrow-glib/table.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: orc-file-reader\n+ * @section_id: orc-file-reader\n+ * @title: ORC reader\n+ * @include: arrow-glib/orc-file-reader.h\n+ *\n+ * #GArrowORCFileReader is a class for reading stripes in ORC file\n+ * format from input.\n+ */\n+\n+typedef struct GArrowORCFileReaderPrivate_ {\n+  GArrowSeekableInputStream *input;\n+  arrow::adapters::orc::ORCFileReader *orc_file_reader;\n+  GArray *field_indexes;\n+} GArrowORCFileReaderPrivate;\n+\n+enum {\n+  PROP_0,\n+  PROP_INPUT,\n+  PROP_ORC_FILE_READER\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowORCFileReader,\n+                           garrow_orc_file_reader,\n+                           G_TYPE_OBJECT);\n+\n+#define GARROW_ORC_FILE_READER_GET_PRIVATE(obj)         \\\n+  static_cast<GArrowORCFileReaderPrivate *>(            \\\n+     garrow_orc_file_reader_get_instance_private(       \\\n+       GARROW_ORC_FILE_READER(obj)))\n+\n+static void\n+garrow_orc_file_reader_dispose(GObject *object)\n+{\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(object);\n+\n+  if (priv->input) {\n+    g_object_unref(priv->input);\n+    priv->input = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_orc_file_reader_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_orc_file_reader_finalize(GObject *object)\n+{\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(object);\n+\n+  delete priv->orc_file_reader;\n+\n+  if (priv->field_indexes) {\n+    g_array_free(priv->field_indexes, TRUE);\n+  }\n+\n+  G_OBJECT_CLASS(garrow_orc_file_reader_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_orc_file_reader_set_property(GObject *object,\n+                                    guint prop_id,\n+                                    const GValue *value,\n+                                    GParamSpec *pspec)\n+{\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INPUT:\n+    priv->input = GARROW_SEEKABLE_INPUT_STREAM(g_value_dup_object(value));\n+    break;\n+  case PROP_ORC_FILE_READER:\n+    priv->orc_file_reader =\n+      static_cast<arrow::adapters::orc::ORCFileReader *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_orc_file_reader_get_property(GObject *object,\n+                                    guint prop_id,\n+                                    GValue *value,\n+                                    GParamSpec *pspec)\n+{\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INPUT:\n+    g_value_set_object(value, priv->input);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_orc_file_reader_init(GArrowORCFileReader *object)\n+{\n+}\n+\n+static void\n+garrow_orc_file_reader_class_init(GArrowORCFileReaderClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose      = garrow_orc_file_reader_dispose;\n+  gobject_class->finalize     = garrow_orc_file_reader_finalize;\n+  gobject_class->set_property = garrow_orc_file_reader_set_property;\n+  gobject_class->get_property = garrow_orc_file_reader_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_object(\"input\",\n+                             \"Input\",\n+                             \"The input stream\",\n+                             GARROW_TYPE_SEEKABLE_INPUT_STREAM,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INPUT, spec);\n+\n+  spec = g_param_spec_pointer(\"orc-file-reader\",\n+                              \"arrow::adapters::orc::ORCFileReader\",\n+                              \"The raw arrow::adapters::orc::ORCFileReader *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_ORC_FILE_READER, spec);\n+}\n+\n+\n+/**\n+ * garrow_orc_file_reader_new:\n+ * @file: The file to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GArrowORCFileReader\n+ *   or %NULL on error.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowORCFileReader *\n+garrow_orc_file_reader_new(GArrowSeekableInputStream *input,\n+                           GError **error)\n+{\n+  auto arrow_random_access_file = garrow_seekable_input_stream_get_raw(input);\n+  auto pool = arrow::default_memory_pool();\n+  std::unique_ptr<arrow::adapters::orc::ORCFileReader> arrow_reader;\n+  auto status =\n+    arrow::adapters::orc::ORCFileReader::Open(arrow_random_access_file,\n+                                              pool,\n+                                              &arrow_reader);\n+  if (garrow_error_check(error, status, \"[orc-file-reader][new]\")) {\n+    return garrow_orc_file_reader_new_raw(input, arrow_reader.release());\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_orc_file_reader_set_field_indexes:\n+ * @reader: A #GArrowORCFileReader.\n+ * @field_indexes: (nullable) (array length=n_field_indexes):\n+ *   The field indexes to be read.\n+ * @n_field_indexes: The number of the specified indexes.\n+ *\n+ * Since: 0.10.0\n+ */\n+void\n+garrow_orc_file_reader_set_field_indexes(GArrowORCFileReader *reader,\n+                                         const gint *field_indexes,\n+                                         guint n_field_indexes)\n+{\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(reader);\n+  if (priv->field_indexes) {\n+    g_array_free(priv->field_indexes, TRUE);\n+  }\n+  if (n_field_indexes == 0) {\n+    priv->field_indexes = NULL;\n+  } else {\n+    priv->field_indexes = g_array_sized_new(FALSE,\n+                                            FALSE,\n+                                            sizeof(gint),\n+                                            n_field_indexes);\n+    g_array_append_vals(priv->field_indexes, field_indexes, n_field_indexes);\n+  }\n+}\n+\n+/**\n+ * garrow_orc_file_reader_get_field_indexes:\n+ * @reader: A #GArrowORCFileReader.\n+ * @n_field_indexes: The number of the specified indexes.\n+ *\n+ * Returns: (nullable) (array length=n_field_indexes) (transfer none):\n+ *  The field indexes to be read.\n+ *\n+ * Since: 0.10.0\n+ */\n+const gint *\n+garrow_orc_file_reader_get_field_indexes(GArrowORCFileReader *reader,\n+                                         guint *n_field_indexes)\n+{\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(reader);\n+  if (priv->field_indexes) {\n+    *n_field_indexes = priv->field_indexes->len;\n+    return reinterpret_cast<gint *>(priv->field_indexes->data);\n+  } else {\n+    *n_field_indexes = 0;\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_orc_file_reader_read_type:\n+ * @reader: A #GArrowORCFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable) (transfer full): A newly read type as\n+ *   #GArrowSchema or %NULL on error.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowSchema *\n+garrow_orc_file_reader_read_type(GArrowORCFileReader *reader,\n+                                 GError **error)\n+{\n+  auto arrow_reader = garrow_orc_file_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Schema> arrow_schema;\n+  auto status = arrow_reader->ReadSchema(&arrow_schema);\n+  if (garrow_error_check(error, status, \"[orc-file-reader][read-type]\")) {\n+    return garrow_schema_new_raw(&arrow_schema);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_orc_file_reader_read_stripes:\n+ * @reader: A #GArrowORCFileReader.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable) (transfer full): A newly read stripes as\n+ *   #GArrowTable or %NULL on error.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowTable *\n+garrow_orc_file_reader_read_stripes(GArrowORCFileReader *reader,\n+                                    GError **error)\n+{\n+  auto arrow_reader = garrow_orc_file_reader_get_raw(reader);\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(reader);\n+  if (priv->field_indexes) {\n+    std::vector<int> arrow_field_indexes;\n+    auto field_indexes = priv->field_indexes;\n+    for (guint i = 0; i < field_indexes->len; ++i) {\n+      arrow_field_indexes.push_back(g_array_index(field_indexes, gint, i));\n+    }\n+    std::shared_ptr<arrow::Table> arrow_table;\n+    auto status = arrow_reader->Read(arrow_field_indexes, &arrow_table);\n+    if (garrow_error_check(error, status, \"[orc-file-reader][read-stripes]\")) {\n+      return garrow_table_new_raw(&arrow_table);\n+    } else {\n+      return NULL;\n+    }\n+  } else {\n+    std::shared_ptr<arrow::Table> arrow_table;\n+    auto status = arrow_reader->Read(&arrow_table);\n+    if (garrow_error_check(error, status, \"[orc-file-reader][read-stripes]\")) {\n+      return garrow_table_new_raw(&arrow_table);\n+    } else {\n+      return NULL;\n+    }\n+  }\n+}\n+\n+/**\n+ * garrow_orc_file_reader_read_stripe:\n+ * @reader: A #GArrowORCFileReader.\n+ * @i: The stripe index to be read.\n+ * @error: (nullable): Return locatipcn for a #GError or %NULL.\n+ *\n+ * Returns: (nullable) (transfer full): A newly read stripe as\n+ *   #GArrowRecordBatch or %NULL on error.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowRecordBatch *\n+garrow_orc_file_reader_read_stripe(GArrowORCFileReader *reader,\n+                                   gint64 i,\n+                                   GError **error)\n+{\n+  auto arrow_reader = garrow_orc_file_reader_get_raw(reader);\n+  if (i < 0) {\n+    i += arrow_reader->NumberOfStripes();\n+  }\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(reader);\n+  if (priv->field_indexes) {\n+    std::vector<int> arrow_field_indexes;\n+    auto field_indexes = priv->field_indexes;\n+    for (guint j = 0; j < field_indexes->len; ++j) {\n+      arrow_field_indexes.push_back(g_array_index(field_indexes, gint, j));\n+    }\n+    std::shared_ptr<arrow::RecordBatch> arrow_record_batch;\n+    auto status = arrow_reader->ReadStripe(i,\n+                                           arrow_field_indexes,\n+                                           &arrow_record_batch);\n+    if (garrow_error_check(error, status, \"[orc-file-reader][read-stripe]\")) {\n+      return garrow_record_batch_new_raw(&arrow_record_batch);\n+    } else {\n+      return NULL;\n+    }\n+  } else {\n+    std::shared_ptr<arrow::RecordBatch> arrow_record_batch;\n+    auto status = arrow_reader->ReadStripe(i, &arrow_record_batch);\n+    if (garrow_error_check(error, status, \"[orc-file-reader][read-stripe]\")) {\n+      return garrow_record_batch_new_raw(&arrow_record_batch);\n+    } else {\n+      return NULL;\n+    }\n+  }\n+}\n+\n+/**\n+ * garrow_orc_file_reader_get_n_stripes:\n+ * @reader: A #GArrowORCFileReader.\n+ *\n+ * Returns: The number of stripes in the file.\n+ *\n+ * Since: 0.10.0\n+ */\n+gint64\n+garrow_orc_file_reader_get_n_stripes(GArrowORCFileReader *reader)\n+{\n+  auto arrow_reader = garrow_orc_file_reader_get_raw(reader);\n+  return arrow_reader->NumberOfStripes();\n+}\n+\n+/**\n+ * garrow_orc_file_reader_get_n_rows:\n+ * @reader: A #GArrowORCFileReader.\n+ *\n+ * Returns: The number of rows in the file.\n+ *\n+ * Since: 0.10.0\n+ */\n+gint64\n+garrow_orc_file_reader_get_n_rows(GArrowORCFileReader *reader)\n+{\n+  auto arrow_reader = garrow_orc_file_reader_get_raw(reader);\n+  return arrow_reader->NumberOfRows();\n+}\n+\n+\n+G_END_DECLS\n+\n+\n+GArrowORCFileReader *\n+garrow_orc_file_reader_new_raw(GArrowSeekableInputStream *input,\n+                               arrow::adapters::orc::ORCFileReader *arrow_reader)\n+{\n+  auto reader =\n+    GARROW_ORC_FILE_READER(g_object_new(GARROW_TYPE_ORC_FILE_READER,\n+                                        \"input\", input,\n+                                        \"orc-file-reader\", arrow_reader,\n+                                        NULL));\n+  return reader;\n+}\n+\n+arrow::adapters::orc::ORCFileReader *\n+garrow_orc_file_reader_get_raw(GArrowORCFileReader *reader)\n+{\n+  auto priv = GARROW_ORC_FILE_READER_GET_PRIVATE(reader);\n+  return priv->orc_file_reader;\n+}\ndiff --git a/c_glib/arrow-glib/orc-file-reader.h b/c_glib/arrow-glib/orc-file-reader.h\nnew file mode 100644\nindex 0000000000..67fd8b0135\n--- /dev/null\n+++ b/c_glib/arrow-glib/orc-file-reader.h\n@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/reader.h>\n+\n+G_BEGIN_DECLS\n+\n+#define GARROW_TYPE_ORC_FILE_READER (garrow_orc_file_reader_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowORCFileReader,\n+                         garrow_orc_file_reader,\n+                         GARROW,\n+                         ORC_FILE_READER,\n+                         GObject)\n+struct _GArrowORCFileReaderClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GArrowORCFileReader *\n+garrow_orc_file_reader_new(GArrowSeekableInputStream *file,\n+                           GError **error);\n+void\n+garrow_orc_file_reader_set_field_indexes(GArrowORCFileReader *reader,\n+                                         const gint *field_indexes,\n+                                         guint n_field_indexes);\n+const gint *\n+garrow_orc_file_reader_get_field_indexes(GArrowORCFileReader *reader,\n+                                         guint *n_field_indexes);\n+GArrowSchema *\n+garrow_orc_file_reader_read_type(GArrowORCFileReader *reader,\n+                                 GError **error);\n+GArrowTable *\n+garrow_orc_file_reader_read_stripes(GArrowORCFileReader *reader,\n+                                    GError **error);\n+GArrowRecordBatch *\n+garrow_orc_file_reader_read_stripe(GArrowORCFileReader *reader,\n+                                   gint64 i,\n+                                   GError **error);\n+gint64 garrow_orc_file_reader_get_n_stripes(GArrowORCFileReader *reader);\n+gint64 garrow_orc_file_reader_get_n_rows(GArrowORCFileReader *reader);\n+\n+G_END_DECLS\ndiff --git a/c_glib/arrow-glib/orc-file-reader.hpp b/c_glib/arrow-glib/orc-file-reader.hpp\nnew file mode 100644\nindex 0000000000..417129052c\n--- /dev/null\n+++ b/c_glib/arrow-glib/orc-file-reader.hpp\n@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow/adapters/orc/adapter.h>\n+\n+#include <arrow-glib/reader.hpp>\n+#include <arrow-glib/orc-file-reader.h>\n+\n+GArrowORCFileReader *\n+garrow_orc_file_reader_new_raw(GArrowSeekableInputStream *input,\n+                               arrow::adapters::orc::ORCFileReader *arrow_reader);\n+arrow::adapters::orc::ORCFileReader *\n+garrow_orc_file_reader_get_raw(GArrowORCFileReader *reader);\ndiff --git a/c_glib/configure.ac b/c_glib/configure.ac\nindex d80cc9edab..d6b7820072 100644\n--- a/c_glib/configure.ac\n+++ b/c_glib/configure.ac\n@@ -115,6 +115,10 @@ if test \"x$GARROW_ARROW_CPP_BUILD_DIR\" = \"x\"; then\n   USE_ARROW_BUILD_DIR=no\n \n   PKG_CHECK_MODULES([ARROW], [arrow arrow-compute])\n+  PKG_CHECK_MODULES([ARROW_ORC],\n+                    [arrow-orc],\n+                    [HAVE_ARROW_ORC=yes],\n+                    [HAVE_ARROW_ORC=no])\n   PKG_CHECK_MODULES([ARROW_GPU],\n                     [arrow-gpu],\n                     [HAVE_ARROW_GPU=yes],\n@@ -135,6 +139,12 @@ else\n   AC_SUBST(ARROW_CFLAGS)\n   AC_SUBST(ARROW_LIBS)\n \n+  if test -f \"${GARROW_ARROW_CPP_BUILD_DIR}/src/arrow/adapters/orc/arrow-orc.pc\"; then\n+    HAVE_ARROW_ORC=yes\n+  else\n+    HAVE_ARROW_ORC=no\n+  fi\n+\n   ARROW_GPU_CFLAGS=\"\"\n   if test -f \"${GARROW_ARROW_CPP_BUILD_DIR}/src/arrow/gpu/arrow-gpu.pc\"; then\n     HAVE_ARROW_GPU=yes\n@@ -150,6 +160,11 @@ fi\n AM_CONDITIONAL([USE_ARROW_BUILD_DIR],\n                [test \"$USE_ARROW_BUILD_DIR\" = \"yes\"])\n \n+AM_CONDITIONAL([HAVE_ARROW_ORC], [test \"$HAVE_ARROW_ORC\" = \"yes\"])\n+if test \"$HAVE_ARROW_ORC\" = \"yes\"; then\n+  AC_DEFINE(HAVE_ARROW_ORC, [1], [Define to 1 if Apache Arrow supports ORC.])\n+fi\n+\n AM_CONDITIONAL([HAVE_ARROW_GPU], [test \"$HAVE_ARROW_GPU\" = \"yes\"])\n if test \"$HAVE_ARROW_GPU\" = \"yes\"; then\n   AC_DEFINE(HAVE_ARROW_GPU, [1], [Define to 1 if Apache Arrow supports GPU.])\n@@ -162,6 +177,7 @@ AC_CONFIG_FILES([\n   Makefile\n   arrow-glib/Makefile\n   arrow-glib/arrow-glib.pc\n+  arrow-glib/arrow-glib-orc.pc\n   arrow-glib/version.h\n   arrow-gpu-glib/Makefile\n   arrow-gpu-glib/arrow-gpu-glib.pc\ndiff --git a/c_glib/doc/reference/Makefile.am b/c_glib/doc/reference/Makefile.am\nindex 6f916a62e3..ad0c938219 100644\n--- a/c_glib/doc/reference/Makefile.am\n+++ b/c_glib/doc/reference/Makefile.am\n@@ -36,6 +36,11 @@ HFILE_GLOB =\t\t\t\t\t\\\n \n IGNORE_HFILES =\n \n+if !HAVE_ARROW_ORC\n+IGNORE_HFILES +=\t\t\t\t\t\\\n+\t$(top_srcdir)/arrow-glib/orc-file-reader.h\n+endif\n+\n CFILE_GLOB =\t\t\t\t\t\\\n \t$(top_srcdir)/arrow-glib/*.cpp\n \ndiff --git a/c_glib/doc/reference/arrow-glib-docs.xml b/c_glib/doc/reference/arrow-glib-docs.xml\nindex 2c75041f13..776a7b7507 100644\n--- a/c_glib/doc/reference/arrow-glib-docs.xml\n+++ b/c_glib/doc/reference/arrow-glib-docs.xml\n@@ -123,6 +123,7 @@\n     <chapter id=\"reader\">\n       <title>Reader</title>\n       <xi:include href=\"xml/reader.xml\"/>\n+      <xi:include href=\"xml/orc-file-reader.xml\"><xi:fallback /></xi:include>\n     </chapter>\n     <chapter id=\"writer\">\n       <title>Writer</title>\ndiff --git a/c_glib/doc/reference/meson.build b/c_glib/doc/reference/meson.build\nindex 431aa0a5c8..4f724249e7 100644\n--- a/c_glib/doc/reference/meson.build\n+++ b/c_glib/doc/reference/meson.build\n@@ -59,10 +59,17 @@ if arrow_gpu_dependency.found()\n     libarrow_gpu_glib_dependency,\n   ]\n endif\n+ignore_headers = []\n+if not arrow_orc_dependency.found()\n+  ignore_headers += [\n+    join_paths(meson.source_root(), 'arrow-glib', 'orc-file-reader.h'),\n+  ]\n+endif\n gnome.gtkdoc(meson.project_name(),\n              main_xml: meson.project_name() + '-docs.xml',\n              src_dir: source_directories,\n              dependencies: dependencies,\n+             ignore_headers: ignore_headers,\n              gobject_typesfile: meson.project_name() + '.types',\n              scan_args: [\n                '--rebuild-types',\ndiff --git a/c_glib/meson.build b/c_glib/meson.build\nindex 9fe1b8cbd7..0f0ea20a02 100644\n--- a/c_glib/meson.build\n+++ b/c_glib/meson.build\n@@ -48,6 +48,8 @@ pkgconfig = import('pkgconfig')\n \n root_inc = include_directories('.')\n \n+arrow_orc_dependency = dependency('arrow-orc', required: false)\n+\n subdir('arrow-glib')\n arrow_gpu_dependency = dependency('arrow-gpu', required: false)\n if arrow_gpu_dependency.found()\ndiff --git a/c_glib/test/fixture/TestOrcFile.test1.orc b/c_glib/test/fixture/TestOrcFile.test1.orc\nnew file mode 100644\nindex 0000000000..4fb0beff86\nBinary files /dev/null and b/c_glib/test/fixture/TestOrcFile.test1.orc differ\ndiff --git a/c_glib/test/helper/fixture.rb b/c_glib/test/helper/fixture.rb\nnew file mode 100644\nindex 0000000000..f07afd0e43\n--- /dev/null\n+++ b/c_glib/test/helper/fixture.rb\n@@ -0,0 +1,24 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Helper\n+  module Fixture\n+    def fixture_path(*components)\n+      File.join(__dir__, \"..\", \"fixture\", *components)\n+    end\n+  end\n+end\ndiff --git a/c_glib/test/run-test.rb b/c_glib/test/run-test.rb\nindex 392c56f33a..366b08395d 100755\n--- a/c_glib/test/run-test.rb\n+++ b/c_glib/test/run-test.rb\n@@ -45,6 +45,7 @@ def initialize(data)\n require \"rbconfig\"\n require \"tempfile\"\n require_relative \"helper/buildable\"\n+require_relative \"helper/fixture\"\n require_relative \"helper/omittable\"\n \n exit(Test::Unit::AutoRunner.run(true, test_dir.to_s))\ndiff --git a/c_glib/test/test-orc-file-reader.rb b/c_glib/test/test-orc-file-reader.rb\nnew file mode 100644\nindex 0000000000..6b5c640bba\n--- /dev/null\n+++ b/c_glib/test/test-orc-file-reader.rb\n@@ -0,0 +1,244 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestORCFileReader < Test::Unit::TestCase\n+  include Helper::Omittable\n+  include Helper::Fixture\n+\n+  def setup\n+    omit(\"Require Apache Arrow ORC\") unless Arrow.const_defined?(:ORCFileReader)\n+    path = fixture_path(\"TestOrcFile.test1.orc\")\n+    input = Arrow::MemoryMappedInputStream.new(path)\n+    @reader = Arrow::ORCFileReader.new(input)\n+  end\n+\n+  def test_read_type\n+    assert_equal(<<-SCHEMA.chomp, @reader.read_type.to_s)\n+boolean1: bool\n+byte1: int8\n+short1: int16\n+int1: int32\n+long1: int64\n+float1: float\n+double1: double\n+bytes1: binary\n+string1: string\n+middle: struct<list: list<item: struct<int1: int32, string1: string>>>\n+list: list<item: struct<int1: int32, string1: string>>\n+map: list<item: struct<key: string, value: struct<int1: int32, string1: string>>>\n+    SCHEMA\n+  end\n+\n+  def test_field_indexes\n+    require_gi(1, 42, 0)\n+    assert_nil(@reader.field_indexes)\n+    @reader.set_field_indexes([1, 3])\n+    assert_equal([1, 3], @reader.field_indexes)\n+  end\n+\n+  sub_test_case(\"#read_stripes\") do\n+    test(\"all\") do\n+      table = @reader.read_stripes\n+      dump = table.n_columns.times.collect do |i|\n+        column = table.get_column(i)\n+        [\n+          column.field.to_s,\n+          column.data.chunks.collect(&:to_s),\n+        ]\n+      end\n+      assert_equal([\n+                     [\"boolean1: bool\", [\"[false, true]\"]],\n+                     [\"byte1: int8\", [\"[1, 100]\"]],\n+                     [\"short1: int16\", [\"[1024, 2048]\"]],\n+                     [\"int1: int32\", [\"[65536, 65536]\"]],\n+                     [\n+                       \"long1: int64\",\n+                       [\"[9223372036854775807, 9223372036854775807]\"],\n+                     ],\n+                     [\"float1: float\", [\"[1, 2]\"]],\n+                     [\"double1: double\", [\"[-15, -5]\"]],\n+                     [\"bytes1: binary\", [\"[0001020304, ]\"]],\n+                     [\"string1: string\", [\"[\\\"hi\\\", \\\"bye\\\"]\"]],\n+                     [\n+                       \"middle: \" +\n+                       \"struct<list: \" +\n+                       \"list<item: struct<int1: int32, string1: string>>>\",\n+                       [\n+                         <<-STRUCT.chomp\n+\n+-- is_valid: all not null\n+-- child 0 type: list<item: struct<int1: int32, string1: string>> values: \n+  -- is_valid: all not null\n+  -- value_offsets: [0, 2, 4]\n+  -- values: \n+    -- is_valid: all not null\n+    -- child 0 type: int32 values: [1, 2, 1, 2]\n+    -- child 1 type: string values: [\"bye\", \"sigh\", \"bye\", \"sigh\"]\n+                          STRUCT\n+                       ]\n+                     ],\n+                     [\n+                       \"list: list<item: struct<int1: int32, string1: string>>\",\n+                       [\n+                         <<-LIST.chomp\n+\n+-- is_valid: all not null\n+-- value_offsets: [0, 2, 5]\n+-- values: \n+  -- is_valid: all not null\n+  -- child 0 type: int32 values: [3, 4, 100000000, -100000, 1234]\n+  -- child 1 type: string values: [\"good\", \"bad\", \"cat\", \"in\", \"hat\"]\n+                         LIST\n+                       ]\n+                     ],\n+                     [\n+                       \"map: list<item: \" +\n+                       \"struct<key: string, value: \" +\n+                       \"struct<int1: int32, string1: string>>>\",\n+                       [\n+                         <<-MAP.chomp\n+\n+-- is_valid: all not null\n+-- value_offsets: [0, 0, 2]\n+-- values: \n+  -- is_valid: all not null\n+  -- child 0 type: string values: [\"chani\", \"mauddib\"]\n+  -- child 1 type: struct<int1: int32, string1: string> values: \n+    -- is_valid: all not null\n+    -- child 0 type: int32 values: [5, 1]\n+    -- child 1 type: string values: [\"chani\", \"mauddib\"]\n+                         MAP\n+                       ],\n+                     ],\n+                   ],\n+                   dump)\n+    end\n+\n+    test(\"select fields\") do\n+      @reader.set_field_indexes([1, 3])\n+      table = @reader.read_stripes\n+      dump = table.n_columns.times.collect do |i|\n+        column = table.get_column(i)\n+        [\n+          column.field.to_s,\n+          column.data.chunks.collect(&:to_s),\n+        ]\n+      end\n+      assert_equal([\n+                     [\"boolean1: bool\", [\"[false, true]\"]],\n+                     [\"short1: int16\", [\"[1024, 2048]\"]],\n+                   ],\n+                   dump)\n+    end\n+  end\n+\n+  sub_test_case(\"#read_stripe\") do\n+    test(\"all\") do\n+      record_batch = @reader.read_stripe(0)\n+      dump = record_batch.n_columns.times.collect do |i|\n+        [\n+          record_batch.schema.get_field(i).to_s,\n+          record_batch.get_column(i).to_s,\n+        ]\n+      end\n+      assert_equal([\n+                     [\"boolean1: bool\", \"[false, true]\"],\n+                     [\"byte1: int8\", \"[1, 100]\"],\n+                     [\"short1: int16\", \"[1024, 2048]\"],\n+                     [\"int1: int32\", \"[65536, 65536]\"],\n+                     [\n+                       \"long1: int64\",\n+                       \"[9223372036854775807, 9223372036854775807]\",\n+                     ],\n+                     [\"float1: float\", \"[1, 2]\"],\n+                     [\"double1: double\", \"[-15, -5]\"],\n+                     [\"bytes1: binary\", \"[0001020304, ]\"],\n+                     [\"string1: string\", \"[\\\"hi\\\", \\\"bye\\\"]\"],\n+                     [\n+                       \"middle: \" +\n+                       \"struct<list: \" +\n+                       \"list<item: struct<int1: int32, string1: string>>>\",\n+                       <<-STRUCT.chomp\n+\n+-- is_valid: all not null\n+-- child 0 type: list<item: struct<int1: int32, string1: string>> values: \n+  -- is_valid: all not null\n+  -- value_offsets: [0, 2, 4]\n+  -- values: \n+    -- is_valid: all not null\n+    -- child 0 type: int32 values: [1, 2, 1, 2]\n+    -- child 1 type: string values: [\"bye\", \"sigh\", \"bye\", \"sigh\"]\n+                        STRUCT\n+                     ],\n+                     [\n+                       \"list: list<item: struct<int1: int32, string1: string>>\",\n+                       <<-LIST.chomp\n+\n+-- is_valid: all not null\n+-- value_offsets: [0, 2, 5]\n+-- values: \n+  -- is_valid: all not null\n+  -- child 0 type: int32 values: [3, 4, 100000000, -100000, 1234]\n+  -- child 1 type: string values: [\"good\", \"bad\", \"cat\", \"in\", \"hat\"]\n+                       LIST\n+                     ],\n+                     [\n+                       \"map: list<item: \" +\n+                       \"struct<key: string, value: \" +\n+                       \"struct<int1: int32, string1: string>>>\",\n+                       <<-MAP.chomp\n+\n+-- is_valid: all not null\n+-- value_offsets: [0, 0, 2]\n+-- values: \n+  -- is_valid: all not null\n+  -- child 0 type: string values: [\"chani\", \"mauddib\"]\n+  -- child 1 type: struct<int1: int32, string1: string> values: \n+    -- is_valid: all not null\n+    -- child 0 type: int32 values: [5, 1]\n+    -- child 1 type: string values: [\"chani\", \"mauddib\"]\n+                       MAP\n+                     ],\n+                   ],\n+                   dump)\n+    end\n+\n+    test(\"select fields\") do\n+      @reader.set_field_indexes([1, 3])\n+      record_batch = @reader.read_stripe(0)\n+      dump = record_batch.n_columns.times.collect do |i|\n+        [\n+          record_batch.schema.get_field(i).to_s,\n+          record_batch.get_column(i).to_s,\n+        ]\n+      end\n+      assert_equal([\n+                     [\"boolean1: bool\", \"[false, true]\"],\n+                     [\"short1: int16\", \"[1024, 2048]\"],\n+                   ],\n+                   dump)\n+    end\n+  end\n+\n+  def test_n_stripes\n+    assert_equal(1, @reader.n_stripes)\n+  end\n+\n+  def test_n_rows\n+    assert_equal(2, @reader.n_rows)\n+  end\n+end\ndiff --git a/dev/tasks/linux-packages/debian/libarrow-glib-dev.install b/dev/tasks/linux-packages/debian/libarrow-glib-dev.install\nindex e59a1f94d6..461fbd4bd5 100644\n--- a/dev/tasks/linux-packages/debian/libarrow-glib-dev.install\n+++ b/dev/tasks/linux-packages/debian/libarrow-glib-dev.install\n@@ -2,5 +2,6 @@ usr/include/arrow-glib/\n usr/lib/*/libarrow-glib.a\n usr/lib/*/libarrow-glib.so\n usr/lib/*/pkgconfig/arrow-glib.pc\n+usr/lib/*/pkgconfig/arrow-glib-orc.pc\n usr/share/gir-1.0/Arrow-1.0.gir\n usr/share/arrow-glib/example/\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-14T06:01:41.750+0000",
                    "updated": "2018-07-14T06:01:41.750+0000",
                    "started": "2018-07-14T06:01:41.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123213",
                    "issueId": "13171325"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@43c46479[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a10f022[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@372fd7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1efe9cd3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22e7df79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6c0a62fb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7887e300[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@12f5e0c7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e75f9f7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@31d75f78[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@768f35a1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4b41106f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Jul 14 06:01:52 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-14T06:01:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2829/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-07-11T07:42:46.000+0000",
        "updated": "2018-07-14T06:01:52.000+0000",
        "timeoriginalestimate": null,
        "description": "It's not a required change for 0.10.0. It's a nice-to-have change.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add GArrowORCFileReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13171325/comment/16544068",
                    "id": "16544068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 2250\n[https://github.com/apache/arrow/pull/2250]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-07-14T06:01:52.775+0000",
                    "updated": "2018-07-14T06:01:52.775+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3vr6v:",
        "customfield_12314139": null
    }
}