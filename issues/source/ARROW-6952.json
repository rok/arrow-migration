{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13263572",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572",
    "key": "ARROW-6952",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6952/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParquetF\u2026\nURL: https://github.com/apache/arrow/pull/5765\n \n \n   \u2026ileFragment\r\n   \r\n   The proposed change can be divided in 3 parts:\r\n   \r\n   - Implement the `FromParquetStatistics(Statistics& stats, Scalar* min, Scalar* max)`\r\n     function to extract statistics as arrow's Scalars.\r\n   \r\n   - Implement the `RowGroupStatisticsAsExpression(RowGroupMetadata& meta, Expression* out)`\r\n     function to represents the RowGroup's statistics as an expression of\r\n     conjunction, e.g. `(a_min <= a AND a <= a_max) AND (b_min <= b AND b <= b_max) AND ...`\r\n   \r\n   - Modifies ParquetScanTaskIterator to skip RowGroups by checking the\r\n     expression derived from the metadata with the filter expression.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T14:58:53.336+0000",
                    "updated": "2019-11-01T14:58:53.336+0000",
                    "started": "2019-11-01T14:58:53.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337369",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#issuecomment-548822500\n \n \n   https://issues.apache.org/jira/browse/ARROW-6952\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T15:05:50.720+0000",
                    "updated": "2019-11-01T15:05:50.720+0000",
                    "started": "2019-11-01T15:05:50.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337373",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341702311\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/scanner.cc\n ##########\n @@ -144,9 +144,12 @@ Status ScannerBuilder::UseThreads(bool use_threads) {\n }\n \n Status ScannerBuilder::Finish(std::unique_ptr<Scanner>* out) const {\n+  scan_options_->schema = dataset_->schema();\n   if (has_projection_ && !project_columns_.empty()) {\n-    scan_options_->projector = std::make_shared<RecordBatchProjector>(\n-        scan_context_->pool, SchemaFromColumnNames(schema(), project_columns_));\n+    auto projected_schema = SchemaFromColumnNames(schema(), project_columns_);\n+    scan_options_->schema = projected_schema;\n \n Review comment:\n   Since `ScanOptions::schema` is always identical to `projected_schema`, let's make it an accessor wrapping `projector->schema()`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.334+0000",
                    "updated": "2019-11-01T19:21:25.334+0000",
                    "started": "2019-11-01T19:21:25.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337497",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341692480\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -29,18 +29,19 @@\n #include \"arrow/util/stl.h\"\n #include \"parquet/arrow/reader.h\"\n #include \"parquet/file_reader.h\"\n+#include \"parquet/statistics.h\"\n \n namespace arrow {\n namespace dataset {\n \n-/// \\brief A ScanTask backed by a parquet file and a subset of RowGroups.\n+/// \\brief A ScanTask backed by a parquet file and a RowGroup.\n \n Review comment:\n   ```suggestion\r\n   /// \\brief A ScanTask backed by a RowGroup within a parquet file.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.334+0000",
                    "updated": "2019-11-01T19:21:25.334+0000",
                    "started": "2019-11-01T19:21:25.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337498",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341705961\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.h\n ##########\n @@ -328,12 +329,23 @@ PARQUET_EXPORT\n ::arrow::Status FromParquetSchema(\n     const SchemaDescriptor* parquet_schema, const ArrowReaderProperties& properties,\n     const std::shared_ptr<const ::arrow::KeyValueMetadata>& key_value_metadata,\n-    std::shared_ptr<::arrow::Schema>* out);\n+    std::shared_ptr<::arrow::Schema>* out, std::vector<int>* out_indices = NULLPTR);\n \n PARQUET_EXPORT\n ::arrow::Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n                                   const ArrowReaderProperties& properties,\n-                                  std::shared_ptr<::arrow::Schema>* out);\n+                                  std::shared_ptr<::arrow::Schema>* out,\n+                                  std::vector<int>* out_indices = NULLPTR);\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n+                                  std::shared_ptr<::arrow::Schema>* out,\n+                                  std::vector<int>* out_indices = NULLPTR);\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetStatistics(const std::shared_ptr<Statistics>& Statistics,\n \n Review comment:\n   ```suggestion\r\n   ::arrow::Status ParquetStatisticsAsScalars(const std::shared_ptr<Statistics>& Statistics,\r\n   ```\r\n   ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.338+0000",
                    "updated": "2019-11-01T19:21:25.338+0000",
                    "started": "2019-11-01T19:21:25.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337499",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341699091\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -77,35 +77,51 @@ class ParquetScanTask : public ScanTask {\n   std::shared_ptr<ScanContext> context_;\n };\n \n-constexpr int64_t kDefaultRowCountPerPartition = 1U << 16;\n-\n-// A class that clusters RowGroups of a Parquet file until the cluster has a specified\n-// total row count. This doesn't guarantee exact row counts; it may exceed the target.\n-class ParquetRowGroupPartitioner {\n+// Skip RowGroups with a filter and metadata\n+class RowGroupSkipper {\n \n Review comment:\n   This *could* be an iterator. I'm not sure if it's advantageous, but if not: please define a constexpr for the end condition (instead of magic number `-1`)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.438+0000",
                    "updated": "2019-11-01T19:21:25.438+0000",
                    "started": "2019-11-01T19:21:25.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337500",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341702654\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/arrow_schema_test.cc\n ##########\n @@ -32,6 +32,7 @@\n \n using arrow::ArrayFromVector;\n using arrow::Field;\n+using arrow::Scalar;\n \n Review comment:\n   ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.517+0000",
                    "updated": "2019-11-01T19:21:25.517+0000",
                    "started": "2019-11-01T19:21:25.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337501",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341698327\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -77,35 +77,51 @@ class ParquetScanTask : public ScanTask {\n   std::shared_ptr<ScanContext> context_;\n };\n \n-constexpr int64_t kDefaultRowCountPerPartition = 1U << 16;\n-\n-// A class that clusters RowGroups of a Parquet file until the cluster has a specified\n-// total row count. This doesn't guarantee exact row counts; it may exceed the target.\n-class ParquetRowGroupPartitioner {\n+// Skip RowGroups with a filter and metadata\n+class RowGroupSkipper {\n  public:\n-  ParquetRowGroupPartitioner(std::shared_ptr<parquet::FileMetaData> metadata,\n-                             int64_t row_count = kDefaultRowCountPerPartition)\n-      : metadata_(std::move(metadata)), row_count_(row_count), row_group_idx_(0) {\n+  RowGroupSkipper(std::shared_ptr<parquet::FileMetaData> metadata,\n+                  std::shared_ptr<Expression> filter)\n+      : metadata_(std::move(metadata)), filter_(filter), row_group_idx_(0) {\n     num_row_groups_ = metadata_->num_row_groups();\n   }\n \n-  std::vector<int> Next() {\n-    int64_t partition_size = 0;\n-    std::vector<int> partitions;\n+  int Next() {\n+    while (row_group_idx_ < num_row_groups_) {\n+      const auto row_group_idx = row_group_idx_++;\n+      const auto row_group = metadata_->RowGroup(row_group_idx);\n+\n+      const auto num_rows = row_group->num_rows();\n+      if (CanSkip(*row_group)) {\n+        rows_skipped_ += num_rows;\n+        continue;\n+      }\n \n-    while (row_group_idx_ < num_row_groups_ && partition_size < row_count_) {\n-      partition_size += metadata_->RowGroup(row_group_idx_)->num_rows();\n-      partitions.push_back(row_group_idx_++);\n+      return row_group_idx;\n     }\n \n-    return partitions;\n+    return -1;\n   }\n \n  private:\n+  bool CanSkip(const parquet::RowGroupMetaData& metadata) const {\n+    auto maybe_expr = RowGroupStatisticsAsExpression(metadata);\n+    // Errors with statistics are ignored and post-filtering will apply.\n+    if (!maybe_expr.ok()) {\n+      return false;\n+    }\n+\n+    // Skip the row group if the expression is not satisfied.\n+    auto expr = maybe_expr.ValueOrDie()->Assume(*filter_);\n \n Review comment:\n   ```suggestion\r\n       auto simplified_filter = filter_->Assume(*maybe_expr.ValueOrDie());\r\n   ```\r\n   \r\n   - Let `filter_ = \"alpha\"_ > 0` and `maybe_expr = 1 <= \"alpha\"_ and \"alpha\"_ >= 2`\r\n     - `filter_.Assume(maybe_expr)` is true: alpha is always between 1 and 2 in this row group. This range is a subset of positive alpha, so the filter is satisfied.\r\n     - `maybe_expr.Assume(filter_)` is identical to `maybe_expr`; no simplification takes place\r\n   \r\n   - Let `filter_ = \"alpha\"_ == 0.5` and `maybe_expr = 1.0 <= \"alpha\"_ and \"alpha\"_ >= 2.0`\r\n     - `maybe_expr.Assume(filter_)` yields true, *error*\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.520+0000",
                    "updated": "2019-11-01T19:21:25.520+0000",
                    "started": "2019-11-01T19:21:25.520+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337502",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341716066\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -685,21 +687,148 @@ Status BuildSchemaManifest(const SchemaDescriptor* schema,\n Status FromParquetSchema(\n     const SchemaDescriptor* schema, const ArrowReaderProperties& properties,\n     const std::shared_ptr<const KeyValueMetadata>& key_value_metadata,\n-    std::shared_ptr<::arrow::Schema>* out) {\n+    std::shared_ptr<::arrow::Schema>* out, std::vector<int>* out_indices) {\n   SchemaManifest manifest;\n   RETURN_NOT_OK(BuildSchemaManifest(schema, key_value_metadata, properties, &manifest));\n   std::vector<std::shared_ptr<Field>> fields(manifest.schema_fields.size());\n+\n+  if (out_indices != nullptr) {\n+    out_indices->clear();\n+  }\n+\n   for (int i = 0; i < static_cast<int>(fields.size()); i++) {\n-    fields[i] = manifest.schema_fields[i].field;\n+    const auto& schema_field = manifest.schema_fields[i];\n+\n+    fields[i] = schema_field.field;\n+\n+    if (out_indices != nullptr) {\n+      int column_index = schema_field.is_leaf() ? schema_field.column_index : -1;\n+      out_indices->push_back(column_index);\n+    }\n   }\n   *out = ::arrow::schema(fields, key_value_metadata);\n   return Status::OK();\n }\n \n Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n                          const ArrowReaderProperties& properties,\n-                         std::shared_ptr<::arrow::Schema>* out) {\n-  return FromParquetSchema(parquet_schema, properties, nullptr, out);\n+                         std::shared_ptr<::arrow::Schema>* out,\n+                         std::vector<int>* out_indices) {\n+  return FromParquetSchema(parquet_schema, properties, nullptr, out, out_indices);\n+}\n+\n+Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n+                         std::shared_ptr<::arrow::Schema>* out,\n+                         std::vector<int>* out_indices) {\n+  ArrowReaderProperties properties;\n+  return FromParquetSchema(parquet_schema, properties, nullptr, out, out_indices);\n+}\n+\n+template <typename CType, typename StatisticsType>\n+Status MakeMinMaxScalar(const std::shared_ptr<Statistics>& statistics,\n+                        std::shared_ptr<::arrow::Scalar>* min,\n+                        std::shared_ptr<::arrow::Scalar>* max) {\n+  auto typed_statistics = std::static_pointer_cast<StatisticsType>(statistics);\n+  *min = ::arrow::MakeScalar(static_cast<CType>(typed_statistics->min()));\n+  *max = ::arrow::MakeScalar(static_cast<CType>(typed_statistics->max()));\n+  return Status::OK();\n+}\n+\n+template <typename StatisticsType>\n+Status MakeMinMaxIntegralScalar(const std::shared_ptr<Statistics>& statistics,\n+                                std::shared_ptr<::arrow::Scalar>* min,\n+                                std::shared_ptr<::arrow::Scalar>* max) {\n+  const auto column_desc = statistics->descr();\n+  const auto& logical_type = column_desc->logical_type();\n+  const auto& integer = checked_pointer_cast<const IntLogicalType>(logical_type);\n+  const bool is_signed = integer->is_signed();\n+\n+  switch (integer->bit_width()) {\n+    case 8:\n+      return is_signed ? MakeMinMaxScalar<int8_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint8_t, StatisticsType>(statistics, min, max);\n+    case 16:\n+      return is_signed ? MakeMinMaxScalar<int16_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint16_t, StatisticsType>(statistics, min, max);\n+    case 32:\n+      return is_signed ? MakeMinMaxScalar<int32_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint32_t, StatisticsType>(statistics, min, max);\n+    case 64:\n+      return is_signed ? MakeMinMaxScalar<int64_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint64_t, StatisticsType>(statistics, min, max);\n+  }\n+\n+  return Status::OK();\n+}\n+\n+template <typename StatisticsType>\n+Status FromParquetStatisticsConverted(const std::shared_ptr<Statistics>& statistics,\n+                                      std::shared_ptr<::arrow::Scalar>* min,\n+                                      std::shared_ptr<::arrow::Scalar>* max) {\n+  return Status::NotImplemented(\"Extract statistics to arrow::Scalar not implemented\");\n+}\n+\n+template <>\n+Status FromParquetStatisticsConverted<Int32Statistics>(\n+    const std::shared_ptr<Statistics>& statistics, std::shared_ptr<::arrow::Scalar>* min,\n+    std::shared_ptr<::arrow::Scalar>* max) {\n+  auto column_desc = statistics->descr();\n+  auto logical_type = column_desc->logical_type();\n+\n+  switch (logical_type->type()) {\n+    case LogicalType::Type::INT:\n+      return MakeMinMaxIntegralScalar<Int32Statistics>(statistics, min, max);\n+    default:\n+      return Status::NotImplemented(\"Cannot extract from Int32Statistics\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+template <>\n+Status FromParquetStatisticsConverted<Int64Statistics>(\n+    const std::shared_ptr<Statistics>& statistics, std::shared_ptr<::arrow::Scalar>* min,\n+    std::shared_ptr<::arrow::Scalar>* max) {\n+  auto column_desc = statistics->descr();\n+  auto logical_type = column_desc->logical_type();\n+\n+  switch (logical_type->type()) {\n+    case LogicalType::Type::INT:\n+      return MakeMinMaxIntegralScalar<Int64Statistics>(statistics, min, max);\n+    default:\n+      return Status::NotImplemented(\"Cannot extract from Int64Statistics\");\n+  }\n \n Review comment:\n   Since `FromParquetStatisticsConverted` is an internal function and the two non-failure overloads are mostly identical, please fold them into a single generic definition\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.526+0000",
                    "updated": "2019-11-01T19:21:25.526+0000",
                    "started": "2019-11-01T19:21:25.526+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337504",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341716795\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -685,21 +687,148 @@ Status BuildSchemaManifest(const SchemaDescriptor* schema,\n Status FromParquetSchema(\n     const SchemaDescriptor* schema, const ArrowReaderProperties& properties,\n     const std::shared_ptr<const KeyValueMetadata>& key_value_metadata,\n-    std::shared_ptr<::arrow::Schema>* out) {\n+    std::shared_ptr<::arrow::Schema>* out, std::vector<int>* out_indices) {\n   SchemaManifest manifest;\n   RETURN_NOT_OK(BuildSchemaManifest(schema, key_value_metadata, properties, &manifest));\n   std::vector<std::shared_ptr<Field>> fields(manifest.schema_fields.size());\n+\n+  if (out_indices != nullptr) {\n+    out_indices->clear();\n+  }\n+\n   for (int i = 0; i < static_cast<int>(fields.size()); i++) {\n-    fields[i] = manifest.schema_fields[i].field;\n+    const auto& schema_field = manifest.schema_fields[i];\n+\n+    fields[i] = schema_field.field;\n+\n+    if (out_indices != nullptr) {\n+      int column_index = schema_field.is_leaf() ? schema_field.column_index : -1;\n+      out_indices->push_back(column_index);\n+    }\n   }\n   *out = ::arrow::schema(fields, key_value_metadata);\n   return Status::OK();\n }\n \n Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n                          const ArrowReaderProperties& properties,\n-                         std::shared_ptr<::arrow::Schema>* out) {\n-  return FromParquetSchema(parquet_schema, properties, nullptr, out);\n+                         std::shared_ptr<::arrow::Schema>* out,\n+                         std::vector<int>* out_indices) {\n+  return FromParquetSchema(parquet_schema, properties, nullptr, out, out_indices);\n+}\n+\n+Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n+                         std::shared_ptr<::arrow::Schema>* out,\n+                         std::vector<int>* out_indices) {\n+  ArrowReaderProperties properties;\n+  return FromParquetSchema(parquet_schema, properties, nullptr, out, out_indices);\n+}\n+\n+template <typename CType, typename StatisticsType>\n+Status MakeMinMaxScalar(const std::shared_ptr<Statistics>& statistics,\n+                        std::shared_ptr<::arrow::Scalar>* min,\n+                        std::shared_ptr<::arrow::Scalar>* max) {\n+  auto typed_statistics = std::static_pointer_cast<StatisticsType>(statistics);\n+  *min = ::arrow::MakeScalar(static_cast<CType>(typed_statistics->min()));\n+  *max = ::arrow::MakeScalar(static_cast<CType>(typed_statistics->max()));\n+  return Status::OK();\n+}\n+\n+template <typename StatisticsType>\n+Status MakeMinMaxIntegralScalar(const std::shared_ptr<Statistics>& statistics,\n+                                std::shared_ptr<::arrow::Scalar>* min,\n+                                std::shared_ptr<::arrow::Scalar>* max) {\n+  const auto column_desc = statistics->descr();\n+  const auto& logical_type = column_desc->logical_type();\n+  const auto& integer = checked_pointer_cast<const IntLogicalType>(logical_type);\n+  const bool is_signed = integer->is_signed();\n+\n+  switch (integer->bit_width()) {\n+    case 8:\n+      return is_signed ? MakeMinMaxScalar<int8_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint8_t, StatisticsType>(statistics, min, max);\n+    case 16:\n+      return is_signed ? MakeMinMaxScalar<int16_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint16_t, StatisticsType>(statistics, min, max);\n+    case 32:\n+      return is_signed ? MakeMinMaxScalar<int32_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint32_t, StatisticsType>(statistics, min, max);\n+    case 64:\n+      return is_signed ? MakeMinMaxScalar<int64_t, StatisticsType>(statistics, min, max)\n+                       : MakeMinMaxScalar<uint64_t, StatisticsType>(statistics, min, max);\n+  }\n+\n+  return Status::OK();\n+}\n+\n+template <typename StatisticsType>\n+Status FromParquetStatisticsConverted(const std::shared_ptr<Statistics>& statistics,\n+                                      std::shared_ptr<::arrow::Scalar>* min,\n+                                      std::shared_ptr<::arrow::Scalar>* max) {\n+  return Status::NotImplemented(\"Extract statistics to arrow::Scalar not implemented\");\n+}\n+\n+template <>\n+Status FromParquetStatisticsConverted<Int32Statistics>(\n+    const std::shared_ptr<Statistics>& statistics, std::shared_ptr<::arrow::Scalar>* min,\n+    std::shared_ptr<::arrow::Scalar>* max) {\n+  auto column_desc = statistics->descr();\n+  auto logical_type = column_desc->logical_type();\n+\n+  switch (logical_type->type()) {\n+    case LogicalType::Type::INT:\n+      return MakeMinMaxIntegralScalar<Int32Statistics>(statistics, min, max);\n+    default:\n+      return Status::NotImplemented(\"Cannot extract from Int32Statistics\");\n+  }\n+\n+  return Status::OK();\n+}\n+\n+template <>\n+Status FromParquetStatisticsConverted<Int64Statistics>(\n+    const std::shared_ptr<Statistics>& statistics, std::shared_ptr<::arrow::Scalar>* min,\n+    std::shared_ptr<::arrow::Scalar>* max) {\n+  auto column_desc = statistics->descr();\n+  auto logical_type = column_desc->logical_type();\n+\n+  switch (logical_type->type()) {\n \n Review comment:\n   Could you add a TODO comment here explaining that this indirection is necessary because integer physical types map to several arrow types and mention how they might be set up? (DATE32, for example)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.526+0000",
                    "updated": "2019-11-01T19:21:25.526+0000",
                    "started": "2019-11-01T19:21:25.526+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337503",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/337505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r341717570\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -215,5 +231,80 @@ Status ParquetFileFormat::OpenReader(\n   return Status::OK();\n }\n \n+using parquet::arrow::FromParquetStatistics;\n+\n+static std::shared_ptr<Expression> ColumnChunkStatisticsAsExpression(\n+    const Field& field, const parquet::ColumnChunkMetaData& metadata) {\n+  // For the remaining of this function, failure to extract/parse statistics\n+  // are ignored by returning the `true` scalar. The goal is two fold. First\n+  // avoid that an optimization break the computation. Second, allow the\n+  // following columns to maybe succeed in extracting column statistics.\n+\n+  auto field_expr = field_ref(field.name());\n+\n+  // In case of missing statistics, return nothing.\n+  if (!metadata.is_stats_set()) {\n+    return scalar(true);\n+  }\n+\n+  auto statistics = metadata.statistics();\n+  if (statistics == nullptr) {\n+    return scalar(true);\n+  }\n+\n+  // Optimize for corner case where all values are nulls\n+  if (statistics->num_values() == statistics->null_count()) {\n+    std::shared_ptr<Scalar> null_scalar;\n+    if (!MakeNullScalar(field.type(), &null_scalar).ok()) {\n+      // MakeNullScalar can fail for some nested/repeated types.\n+      return scalar(true);\n+    }\n+\n+    return equal(field_expr, scalar(null_scalar));\n+  }\n+\n+  // Nothing to infer about this column\n \n Review comment:\n   I think this is redundant; doesn't FromParquetStatistics already check for statistics with no min/max?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-01T19:21:25.536+0000",
                    "updated": "2019-11-01T19:21:25.536+0000",
                    "started": "2019-11-01T19:21:25.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "337505",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/338145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r342100603\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -77,35 +77,51 @@ class ParquetScanTask : public ScanTask {\n   std::shared_ptr<ScanContext> context_;\n };\n \n-constexpr int64_t kDefaultRowCountPerPartition = 1U << 16;\n-\n-// A class that clusters RowGroups of a Parquet file until the cluster has a specified\n-// total row count. This doesn't guarantee exact row counts; it may exceed the target.\n-class ParquetRowGroupPartitioner {\n+// Skip RowGroups with a filter and metadata\n+class RowGroupSkipper {\n  public:\n-  ParquetRowGroupPartitioner(std::shared_ptr<parquet::FileMetaData> metadata,\n-                             int64_t row_count = kDefaultRowCountPerPartition)\n-      : metadata_(std::move(metadata)), row_count_(row_count), row_group_idx_(0) {\n+  RowGroupSkipper(std::shared_ptr<parquet::FileMetaData> metadata,\n+                  std::shared_ptr<Expression> filter)\n+      : metadata_(std::move(metadata)), filter_(filter), row_group_idx_(0) {\n     num_row_groups_ = metadata_->num_row_groups();\n   }\n \n-  std::vector<int> Next() {\n-    int64_t partition_size = 0;\n-    std::vector<int> partitions;\n+  int Next() {\n+    while (row_group_idx_ < num_row_groups_) {\n+      const auto row_group_idx = row_group_idx_++;\n+      const auto row_group = metadata_->RowGroup(row_group_idx);\n+\n+      const auto num_rows = row_group->num_rows();\n+      if (CanSkip(*row_group)) {\n+        rows_skipped_ += num_rows;\n+        continue;\n+      }\n \n-    while (row_group_idx_ < num_row_groups_ && partition_size < row_count_) {\n-      partition_size += metadata_->RowGroup(row_group_idx_)->num_rows();\n-      partitions.push_back(row_group_idx_++);\n+      return row_group_idx;\n     }\n \n-    return partitions;\n+    return -1;\n   }\n \n  private:\n+  bool CanSkip(const parquet::RowGroupMetaData& metadata) const {\n+    auto maybe_expr = RowGroupStatisticsAsExpression(metadata);\n+    // Errors with statistics are ignored and post-filtering will apply.\n+    if (!maybe_expr.ok()) {\n+      return false;\n+    }\n+\n+    // Skip the row group if the expression is not satisfied.\n+    auto expr = maybe_expr.ValueOrDie()->Assume(*filter_);\n \n Review comment:\n   Good catch! definitively worth a unit test.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-04T15:12:55.748+0000",
                    "updated": "2019-11-04T15:12:55.748+0000",
                    "started": "2019-11-04T15:12:55.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338145",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/339534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#issuecomment-550442871\n \n \n   @wesm the crux of the parquet changes is exposing SchemaManifest/SchemaField in `parquet/arrow/schema.h`, renaming the factory `BuildSchemaManiftest` to `SchemaManifest::Make` and move the `SchemaManifest::Reader` out of the class since it's only relevant to reader's implementation.\r\n   \r\n   Making SchemaManifest public is necessary for anyone wanting to infer the parquet's column indices from an arrow schema when nesting is involved, e.g. when giving a list of column to project or extracting statistics from a subset of columns.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-06T18:35:17.350+0000",
                    "updated": "2019-11-06T18:35:17.350+0000",
                    "started": "2019-11-06T18:35:17.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "339534",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/339535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#issuecomment-550442871\n \n \n   @wesm the crux of the parquet changes is exposing SchemaManifest/SchemaField in `parquet/arrow/schema.h`, renaming the factory `BuildSchemaManiftest` to `SchemaManifest::Make` and move the `SchemaManifest::Reader` function out of the class since it's only relevant to reader's implementation.\r\n   \r\n   Making SchemaManifest public is necessary for anyone wanting to infer the parquet's column indices from an arrow schema when nesting is involved, e.g. when giving a list of column to project or extracting statistics from a subset of columns.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-06T18:35:40.822+0000",
                    "updated": "2019-11-06T18:35:40.822+0000",
                    "started": "2019-11-06T18:35:40.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "339535",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/340143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r343860379\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter_test.cc\n ##########\n @@ -62,7 +62,13 @@ class ExpressionsTest : public ::testing::Test {\n     auto simplified = expr.Assume(given);\n     ASSERT_EQ(E{simplified}, E{expected})\n         << \"  simplification of: \" << expr.ToString() << std::endl\n-        << \"              given: \" << given.ToString() << std::endl;\n+        << \"              given: \" << given.ToString() << std::endl\n+        << \"           expected: \" << expected.ToString() << std::endl;\n \n Review comment:\n   This shouldn't be necessary; GTest should print the expected and actual values automatically\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-07T20:33:22.321+0000",
                    "updated": "2019-11-07T20:33:22.321+0000",
                    "started": "2019-11-07T20:33:22.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340143",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/340144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r343859991\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/schema.h\n ##########\n @@ -54,6 +64,102 @@ ::arrow::Status ToParquetSchema(const ::arrow::Schema* arrow_schema,\n                                 const WriterProperties& properties,\n                                 std::shared_ptr<SchemaDescriptor>* out);\n \n+/// @}\n+\n+/// \\defgroup parquet-to-arrow-schema-conversion Functions to convert a Parquet\n+/// schema into an Arrow schema.\n+///\n+/// @{\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetSchema(\n+    const SchemaDescriptor* parquet_schema, const ArrowReaderProperties& properties,\n+    const std::shared_ptr<const ::arrow::KeyValueMetadata>& key_value_metadata,\n+    std::shared_ptr<::arrow::Schema>* out);\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n+                                  const ArrowReaderProperties& properties,\n+                                  std::shared_ptr<::arrow::Schema>* out);\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n+                                  std::shared_ptr<::arrow::Schema>* out);\n+\n+/// @}\n+\n+/// \\brief Bridge between an arrow::Field and parquet column indices.\n+struct PARQUET_EXPORT SchemaField {\n+  std::shared_ptr<::arrow::Field> field;\n+  std::vector<SchemaField> children;\n+\n+  // Only set for leaf nodes\n+  int column_index = -1;\n+\n+  int16_t max_definition_level;\n+  int16_t max_repetition_level;\n+\n+  bool is_leaf() const { return column_index != -1; }\n+};\n+\n+/// \\brief Bridge between a parquet Schema and an arrow Schema.\n+///\n+/// Expose parquet columns as a tree structure. Useful traverse and link\n+/// between arrow's Schema and parquet's Schema.\n+struct PARQUET_EXPORT SchemaManifest {\n \n Review comment:\n   (In a follow up) the implementation of SchemaManifest::Make should probably be moved from reader_internal.cc to schema.cc to match the move of the declaration.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-07T20:33:22.430+0000",
                    "updated": "2019-11-07T20:33:22.430+0000",
                    "started": "2019-11-07T20:33:22.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340144",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/340148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#discussion_r343860996\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/schema.h\n ##########\n @@ -54,6 +64,102 @@ ::arrow::Status ToParquetSchema(const ::arrow::Schema* arrow_schema,\n                                 const WriterProperties& properties,\n                                 std::shared_ptr<SchemaDescriptor>* out);\n \n+/// @}\n+\n+/// \\defgroup parquet-to-arrow-schema-conversion Functions to convert a Parquet\n+/// schema into an Arrow schema.\n+///\n+/// @{\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetSchema(\n+    const SchemaDescriptor* parquet_schema, const ArrowReaderProperties& properties,\n+    const std::shared_ptr<const ::arrow::KeyValueMetadata>& key_value_metadata,\n+    std::shared_ptr<::arrow::Schema>* out);\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n+                                  const ArrowReaderProperties& properties,\n+                                  std::shared_ptr<::arrow::Schema>* out);\n+\n+PARQUET_EXPORT\n+::arrow::Status FromParquetSchema(const SchemaDescriptor* parquet_schema,\n+                                  std::shared_ptr<::arrow::Schema>* out);\n+\n+/// @}\n+\n+/// \\brief Bridge between an arrow::Field and parquet column indices.\n+struct PARQUET_EXPORT SchemaField {\n+  std::shared_ptr<::arrow::Field> field;\n+  std::vector<SchemaField> children;\n+\n+  // Only set for leaf nodes\n+  int column_index = -1;\n+\n+  int16_t max_definition_level;\n+  int16_t max_repetition_level;\n+\n+  bool is_leaf() const { return column_index != -1; }\n+};\n+\n+/// \\brief Bridge between a parquet Schema and an arrow Schema.\n+///\n+/// Expose parquet columns as a tree structure. Useful traverse and link\n+/// between arrow's Schema and parquet's Schema.\n+struct PARQUET_EXPORT SchemaManifest {\n \n Review comment:\n   Probably, I initially tried it but there was too many moving parts.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-07T20:34:45.098+0000",
                    "updated": "2019-11-07T20:34:45.098+0000",
                    "started": "2019-11-07T20:34:45.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340148",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/340813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-08T23:20:52.127+0000",
                    "updated": "2019-11-08T23:20:52.127+0000",
                    "started": "2019-11-08T23:20:52.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340813",
                    "issueId": "13263572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/worklog/340876",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5765: ARROW-6952: [C++][Dataset] Implement predicate pushdown with ParqueFileFragment\nURL: https://github.com/apache/arrow/pull/5765#issuecomment-552060215\n \n \n   I'll plan to review this anyway and perhaps any comments can be addressed as follow ups\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-09T03:09:29.830+0000",
                    "updated": "2019-11-09T03:09:29.830+0000",
                    "started": "2019-11-09T03:09:29.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340876",
                    "issueId": "13263572"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@17d6662e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e349b22[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d471b70[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@47d06a71[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@239a0231[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1debe083[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18f2e4d5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5c359658[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f4d8c65[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6de09ef7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@623b0bd2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@12ccd69b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 08 23:20:53 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-08T23:20:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6952/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-10-21T14:43:35.000+0000",
        "updated": "2020-04-10T15:32:57.000+0000",
        "timeoriginalestimate": null,
        "description": "We should be able to prune RowGroups based on the expression and the statistics.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Ensure expression filter is passed ParquetDataFragment",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263572/comment/16970637",
                    "id": "16970637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 5765\n[https://github.com/apache/arrow/pull/5765]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-11-08T23:20:53.341+0000",
                    "updated": "2019-11-08T23:20:53.341+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z07ssg:",
        "customfield_12314139": null
    }
}