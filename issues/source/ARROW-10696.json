{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13342127",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127",
    "key": "ARROW-10696",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12617149",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12617149",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13337935",
                    "key": "ARROW-10423",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337935",
                    "fields": {
                        "summary": "[C++] Filter compute function seems slow compared to numpy nonzero + take",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10696/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770\n\n\n   A specialized bitmap reader that yields runs of set bits, for use cases where reset bits (e.g. null bits) don't need any handling.\r\n   \r\n   On some use cases it can be significantly faster than the alternatives.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T19:56:49.477+0000",
                    "updated": "2020-11-25T19:56:49.477+0000",
                    "started": "2020-11-25T19:56:49.477+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516813",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-733918746\n\n\n   https://issues.apache.org/jira/browse/ARROW-10696\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T19:57:44.390+0000",
                    "updated": "2020-11-25T19:57:44.390+0000",
                    "started": "2020-11-25T19:57:44.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516814",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-733918851\n\n\n   ArrayRangeEquals benchmarks:\r\n   ```\r\n   22             ArrayRangeEqualsStruct/32768/100   23.863m items/sec  343.067m items/sec  1337.631                {'run_name': 'ArrayRangeEqualsStruct/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 510, 'null_percent': 1.0}\r\n   5     ArrayRangeEqualsFixedSizeBinary/32768/100  614.186m items/sec    5.185b items/sec   744.270     {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 12979, 'null_percent': 1.0}\r\n   33        ArrayRangeEqualsListOfInt32/32768/100   26.215m items/sec  215.239m items/sec   721.041           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 560, 'null_percent': 1.0}\r\n   21          ArrayRangeEqualsBoolean/32768/10000    2.826b items/sec   19.479b items/sec   589.262          {'run_name': 'ArrayRangeEqualsBoolean/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 61059, 'null_percent': 0.01}\r\n   51           ArrayRangeEqualsStruct/32768/10000  222.532m items/sec    1.483b items/sec   566.535            {'run_name': 'ArrayRangeEqualsStruct/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4789, 'null_percent': 0.01}\r\n   47             ArrayRangeEqualsString/32768/100  252.039m items/sec    1.350b items/sec   435.816               {'run_name': 'ArrayRangeEqualsString/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5365, 'null_percent': 1.0}\r\n   20              ArrayRangeEqualsStruct/32768/10   12.987m items/sec   61.633m items/sec   374.582                {'run_name': 'ArrayRangeEqualsStruct/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 277, 'null_percent': 10.0}\r\n   36            ArrayRangeEqualsFloat32/32768/100    1.096b items/sec    4.474b items/sec   308.366             {'run_name': 'ArrayRangeEqualsFloat32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 23270, 'null_percent': 1.0}\r\n   29              ArrayRangeEqualsInt32/32768/100    1.675b items/sec    6.533b items/sec   290.081               {'run_name': 'ArrayRangeEqualsInt32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 35608, 'null_percent': 1.0}\r\n   46              ArrayRangeEqualsString/32768/10  135.386m items/sec  526.754m items/sec   289.076               {'run_name': 'ArrayRangeEqualsString/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2853, 'null_percent': 10.0}\r\n   38         ArrayRangeEqualsListOfInt32/32768/10   12.637m items/sec   43.741m items/sec   246.142           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269, 'null_percent': 10.0}\r\n   28     ArrayRangeEqualsFixedSizeBinary/32768/10  294.337m items/sec  969.941m items/sec   229.534      {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6252, 'null_percent': 10.0}\r\n   42      ArrayRangeEqualsListOfInt32/32768/10000  202.207m items/sec  656.251m items/sec   224.544       {'run_name': 'ArrayRangeEqualsListOfInt32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4360, 'null_percent': 0.01}\r\n   13            ArrayRangeEqualsBoolean/32768/100  979.715m items/sec    2.908b items/sec   196.868             {'run_name': 'ArrayRangeEqualsBoolean/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 21042, 'null_percent': 1.0}\r\n   40              ArrayRangeEqualsBoolean/32768/1   12.017b items/sec   35.217b items/sec   193.068            {'run_name': 'ArrayRangeEqualsBoolean/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 256448, 'null_percent': 100.0}\r\n   45      ArrayRangeEqualsFixedSizeBinary/32768/1   12.204b items/sec   35.234b items/sec   188.703    {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269241, 'null_percent': 100.0}\r\n   17                ArrayRangeEqualsInt32/32768/1   12.406b items/sec   34.810b items/sec   180.598              {'run_name': 'ArrayRangeEqualsInt32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 265638, 'null_percent': 100.0}\r\n   26          ArrayRangeEqualsListOfInt32/32768/1   12.626b items/sec   35.288b items/sec   179.485        {'run_name': 'ArrayRangeEqualsListOfInt32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269942, 'null_percent': 100.0}\r\n   44               ArrayRangeEqualsString/32768/1   13.196b items/sec   35.124b items/sec   166.178             {'run_name': 'ArrayRangeEqualsString/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 281694, 'null_percent': 100.0}\r\n   35              ArrayRangeEqualsFloat32/32768/1   12.898b items/sec   34.159b items/sec   164.846            {'run_name': 'ArrayRangeEqualsFloat32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 277754, 'null_percent': 100.0}\r\n   53               ArrayRangeEqualsStruct/32768/1   13.618b items/sec   35.687b items/sec   162.059             {'run_name': 'ArrayRangeEqualsStruct/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 291514, 'null_percent': 100.0}\r\n   15  ArrayRangeEqualsFixedSizeBinary/32768/10000    4.166b items/sec   10.835b items/sec   160.089  {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 89321, 'null_percent': 0.01}\r\n   16            ArrayRangeEqualsInt32/32768/10000    6.886b items/sec   15.942b items/sec   131.514           {'run_name': 'ArrayRangeEqualsInt32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 146029, 'null_percent': 0.01}\r\n   19               ArrayRangeEqualsStruct/32768/0  748.134m items/sec    1.686b items/sec   125.426                {'run_name': 'ArrayRangeEqualsStruct/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 16023, 'null_percent': 0.0}\r\n   32      ArrayRangeEqualsFixedSizeBinary/32768/2  196.551m items/sec  375.563m items/sec    91.077       {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4153, 'null_percent': 50.0}\r\n   49               ArrayRangeEqualsString/32768/2  139.017m items/sec  239.038m items/sec    71.948                {'run_name': 'ArrayRangeEqualsString/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2953, 'null_percent': 50.0}\r\n   31          ArrayRangeEqualsFloat32/32768/10000    4.639b items/sec    7.537b items/sec    62.473          {'run_name': 'ArrayRangeEqualsFloat32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 96758, 'null_percent': 0.01}\r\n   39          ArrayRangeEqualsListOfInt32/32768/2   12.135m items/sec   19.630m items/sec    61.761            {'run_name': 'ArrayRangeEqualsListOfInt32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 259, 'null_percent': 50.0}\r\n   2                ArrayRangeEqualsStruct/32768/2   21.952m items/sec   34.669m items/sec    57.935                 {'run_name': 'ArrayRangeEqualsStruct/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 465, 'null_percent': 50.0}\r\n   1                ArrayRangeEqualsInt32/32768/10  678.038m items/sec    1.057b items/sec    55.821               {'run_name': 'ArrayRangeEqualsInt32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14391, 'null_percent': 10.0}\r\n   12              ArrayRangeEqualsFloat32/32768/2  271.242m items/sec  394.340m items/sec    45.383               {'run_name': 'ArrayRangeEqualsFloat32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5633, 'null_percent': 50.0}\r\n   24                ArrayRangeEqualsInt32/32768/2  274.259m items/sec  393.021m items/sec    43.303                 {'run_name': 'ArrayRangeEqualsInt32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5764, 'null_percent': 50.0}\r\n   50              ArrayRangeEqualsBoolean/32768/2  221.275m items/sec  307.534m items/sec    38.983               {'run_name': 'ArrayRangeEqualsBoolean/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4708, 'null_percent': 50.0}\r\n   48           ArrayRangeEqualsString/32768/10000    1.330b items/sec    1.816b items/sec    36.476           {'run_name': 'ArrayRangeEqualsString/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 28580, 'null_percent': 0.01}\r\n   8           ArrayRangeEqualsSparseUnion/32768/0   34.852m items/sec   45.628m items/sec    30.919             {'run_name': 'ArrayRangeEqualsSparseUnion/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 737, 'null_percent': 0.0}\r\n   23           ArrayRangeEqualsDenseUnion/32768/0   36.416m items/sec   45.582m items/sec    25.171              {'run_name': 'ArrayRangeEqualsDenseUnion/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 773, 'null_percent': 0.0}\r\n   9           ArrayRangeEqualsSparseUnion/32768/1   22.389m items/sec   27.076m items/sec    20.932           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 478, 'null_percent': 100.0}\r\n   14             ArrayRangeEqualsFloat32/32768/10  569.970m items/sec  660.566m items/sec    15.895             {'run_name': 'ArrayRangeEqualsFloat32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 11970, 'null_percent': 10.0}\r\n   11           ArrayRangeEqualsDenseUnion/32768/1   23.336m items/sec   25.912m items/sec    11.037            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 496, 'null_percent': 100.0}\r\n   0               ArrayRangeEqualsFloat32/32768/0   10.265b items/sec   11.049b items/sec     7.641              {'run_name': 'ArrayRangeEqualsFloat32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 218383, 'null_percent': 0.0}\r\n   43          ArrayRangeEqualsListOfInt32/32768/0  790.628m items/sec  838.173m items/sec     6.014           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 17131, 'null_percent': 0.0}\r\n   27              ArrayRangeEqualsBoolean/32768/0   48.625b items/sec   51.207b items/sec     5.309             {'run_name': 'ArrayRangeEqualsBoolean/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1034591, 'null_percent': 0.0}\r\n   6                ArrayRangeEqualsString/32768/0    1.847b items/sec    1.942b items/sec     5.149                {'run_name': 'ArrayRangeEqualsString/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 39452, 'null_percent': 0.0}\r\n   10      ArrayRangeEqualsFixedSizeBinary/32768/0   15.947b items/sec   16.438b items/sec     3.075      {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 337925, 'null_percent': 0.0}\r\n   30          ArrayRangeEqualsSparseUnion/32768/2   20.058m items/sec   20.362m items/sec     1.514            {'run_name': 'ArrayRangeEqualsSparseUnion/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 427, 'null_percent': 50.0}\r\n   3          ArrayRangeEqualsSparseUnion/32768/10   20.014m items/sec   20.036m items/sec     0.109           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 425, 'null_percent': 10.0}\r\n   7         ArrayRangeEqualsSparseUnion/32768/100   20.000m items/sec   19.925m items/sec    -0.373           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 424, 'null_percent': 1.0}\r\n   25      ArrayRangeEqualsSparseUnion/32768/10000   19.848m items/sec   19.658m items/sec    -0.958        {'run_name': 'ArrayRangeEqualsSparseUnion/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 422, 'null_percent': 0.01}\r\n   37                ArrayRangeEqualsInt32/32768/0   31.782b items/sec   31.411b items/sec    -1.168                {'run_name': 'ArrayRangeEqualsInt32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 665046, 'null_percent': 0.0}\r\n   4              ArrayRangeEqualsBoolean/32768/10  512.687m items/sec  496.923m items/sec    -3.075             {'run_name': 'ArrayRangeEqualsBoolean/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 10930, 'null_percent': 10.0}\r\n   18         ArrayRangeEqualsDenseUnion/32768/100   20.641m items/sec   19.655m items/sec    -4.777            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 440, 'null_percent': 1.0}\r\n   52       ArrayRangeEqualsDenseUnion/32768/10000   20.665m items/sec   19.609m items/sec    -5.113         {'run_name': 'ArrayRangeEqualsDenseUnion/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 442, 'null_percent': 0.01}\r\n   41          ArrayRangeEqualsDenseUnion/32768/10   20.551m items/sec   19.388m items/sec    -5.658            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 441, 'null_percent': 10.0}\r\n   34           ArrayRangeEqualsDenseUnion/32768/2   20.645m items/sec   19.374m items/sec    -6.156             {'run_name': 'ArrayRangeEqualsDenseUnion/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 440, 'null_percent': 50.0}\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T19:57:57.589+0000",
                    "updated": "2020-11-25T19:57:57.589+0000",
                    "started": "2020-11-25T19:57:57.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516815",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-733919445\n\n\n   Parquet benchmarks:\r\n   ```\r\n   199                                     BM_PlainDecodingSpacedFloat/32768/100       5.506 GiB/sec      18.466 GiB/sec   235.349                {'run_name': 'BM_PlainDecodingSpacedFloat/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 31377, 'null_percent': 1.0}\r\n   177                                 BM_PlainEncodingSpacedBoolean/32768/10000      11.377 GiB/sec      33.462 GiB/sec   194.106         {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 259382, 'null_percent': 100.0}\r\n   179                                   BM_PlainDecodingSpacedBoolean/32768/100       1.358 GiB/sec       3.572 GiB/sec   163.120              {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 31133, 'null_percent': 1.0}\r\n   282                                     BM_PlainEncodingSpacedFloat/32768/100       6.276 GiB/sec      15.605 GiB/sec   148.621                {'run_name': 'BM_PlainEncodingSpacedFloat/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 35719, 'null_percent': 1.0}\r\n   152                                  BM_ArrowBinaryDict/EncodeLowLevel/262144      82.896 MiB/sec     203.718 MiB/sec   145.751                                     {'run_name': 'BM_ArrowBinaryDict/EncodeLowLevel/262144', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 38}\r\n   298                                  BM_PlainEncodingSpacedDouble/32768/10000     115.446 GiB/sec     262.819 GiB/sec   127.654          {'run_name': 'BM_PlainEncodingSpacedDouble/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 330346, 'null_percent': 100.0}\r\n   247                                    BM_PlainDecodingSpacedDouble/32768/100       9.953 GiB/sec      22.653 GiB/sec   127.594               {'run_name': 'BM_PlainDecodingSpacedDouble/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 28669, 'null_percent': 1.0}\r\n   207                                   BM_PlainEncodingSpacedFloat/32768/10000      57.732 GiB/sec     130.097 GiB/sec   125.348           {'run_name': 'BM_PlainEncodingSpacedFloat/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 330727, 'null_percent': 100.0}\r\n   203                                       BM_PlainDecodingSpacedFloat/32768/1      21.382 GiB/sec      36.628 GiB/sec    71.298                {'run_name': 'BM_PlainDecodingSpacedFloat/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 122797, 'null_percent': 0.01}\r\n   231                                    BM_PlainEncodingSpacedDouble/32768/100      10.467 GiB/sec      17.029 GiB/sec    62.697               {'run_name': 'BM_PlainEncodingSpacedDouble/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 30042, 'null_percent': 1.0}\r\n   256                                    BM_PlainEncodingSpacedFloat/32768/5000    1008.863 MiB/sec       1.592 GiB/sec    61.538               {'run_name': 'BM_PlainEncodingSpacedFloat/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5619, 'null_percent': 50.0}\r\n   273                                   BM_PlainEncodingSpacedDouble/32768/5000       2.022 GiB/sec       3.201 GiB/sec    58.281              {'run_name': 'BM_PlainEncodingSpacedDouble/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5712, 'null_percent': 50.0}\r\n   162                                    BM_PlainDecodingSpacedFloat/32768/5000     981.563 MiB/sec       1.516 GiB/sec    58.168               {'run_name': 'BM_PlainDecodingSpacedFloat/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5473, 'null_percent': 50.0}\r\n   173                                   BM_PlainDecodingSpacedDouble/32768/5000       1.891 GiB/sec       2.991 GiB/sec    58.157              {'run_name': 'BM_PlainDecodingSpacedDouble/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5401, 'null_percent': 50.0}\r\n   238                                  BM_PlainDecodingSpacedBoolean/32768/5000     250.841 MiB/sec     384.756 MiB/sec    53.386             {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5585, 'null_percent': 50.0}\r\n   264                                  BM_PlainEncodingSpacedBoolean/32768/5000     234.661 MiB/sec     353.009 MiB/sec    50.433             {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5211, 'null_percent': 50.0}\r\n   286                                    BM_PlainDecodingSpacedFloat/32768/1000       2.531 GiB/sec       3.739 GiB/sec    47.699              {'run_name': 'BM_PlainDecodingSpacedFloat/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14280, 'null_percent': 10.0}\r\n   229                                    BM_PlainEncodingSpacedFloat/32768/1000       2.680 GiB/sec       3.783 GiB/sec    41.159              {'run_name': 'BM_PlainEncodingSpacedFloat/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 15210, 'null_percent': 10.0}\r\n   251                                      BM_PlainDecodingSpacedDouble/32768/1      25.016 GiB/sec      34.929 GiB/sec    39.627                {'run_name': 'BM_PlainDecodingSpacedDouble/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 71628, 'null_percent': 0.01}\r\n   201                                   BM_PlainDecodingSpacedDouble/32768/1000       4.987 GiB/sec       6.893 GiB/sec    38.224             {'run_name': 'BM_PlainDecodingSpacedDouble/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14031, 'null_percent': 10.0}\r\n   244                                   BM_PlainEncodingSpacedBoolean/32768/100     664.198 MiB/sec     913.312 MiB/sec    37.506              {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14952, 'null_percent': 1.0}\r\n   239                                   BM_PlainEncodingSpacedDouble/32768/1000       5.174 GiB/sec       7.071 GiB/sec    36.652             {'run_name': 'BM_PlainEncodingSpacedDouble/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14708, 'null_percent': 10.0}\r\n   230                                  BM_PlainDecodingSpacedBoolean/32768/1000     678.559 MiB/sec     857.465 MiB/sec    26.366            {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 15333, 'null_percent': 10.0}\r\n   102       BM_WriteInt64Column<Repetition::OPTIONAL, Compression::LZ4>/1048576     332.343 MiB/sec     409.541 MiB/sec    23.228         {'run_name': 'BM_WriteInt64Column<Repetition::OPTIONAL, Compression::LZ4>/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 109}\r\n   185                                       BM_PlainEncodingSpacedFloat/32768/1      17.571 GiB/sec      21.578 GiB/sec    22.805                {'run_name': 'BM_PlainEncodingSpacedFloat/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 100736, 'null_percent': 0.01}\r\n   176                                  BM_PlainEncodingSpacedBoolean/32768/1000     450.133 MiB/sec     545.271 MiB/sec    21.136             {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 9948, 'null_percent': 10.0}\r\n   187                                     BM_PlainDecodingSpacedBoolean/32768/1       4.496 GiB/sec       5.314 GiB/sec    18.200              {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 103077, 'null_percent': 0.01}\r\n   25                                            BM_WriteColumn<false,Int64Type>       1.057 GiB/sec       1.220 GiB/sec    15.454                                              {'run_name': 'BM_WriteColumn<false,Int64Type>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 10}\r\n   39                                       BM_ReadColumn<true,BooleanType>/5/10     250.138 MiB/sec     283.639 MiB/sec    13.393                                         {'run_name': 'BM_ReadColumn<true,BooleanType>/5/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 18}\r\n   75        BM_WriteInt64Column<Repetition::REQUIRED, Compression::LZ4>/1048576       1.084 GiB/sec       1.216 GiB/sec    12.132         {'run_name': 'BM_WriteInt64Column<Repetition::REQUIRED, Compression::LZ4>/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 443}\r\n   115                                                    BM_RleEncoding/32768/1     724.153 MiB/sec     810.490 MiB/sec    11.923                                                     {'run_name': 'BM_RleEncoding/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 8141}\r\n   92                                                      BM_RleEncoding/1024/1     706.002 MiB/sec     788.645 MiB/sec    11.706                                                    {'run_name': 'BM_RleEncoding/1024/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 232581}\r\n   106                         BM_WriteInt64Column<Repetition::REPEATED>/1048576     218.593 MiB/sec     243.729 MiB/sec    11.499                            {'run_name': 'BM_WriteInt64Column<Repetition::REPEATED>/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 77}\r\n   109                                                    BM_RleEncoding/65536/1     729.356 MiB/sec     811.227 MiB/sec    11.225                                                     {'run_name': 'BM_RleEncoding/65536/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4076}\r\n   89                                                      BM_RleEncoding/4096/1     725.079 MiB/sec     804.486 MiB/sec    10.952                                                     {'run_name': 'BM_RleEncoding/4096/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 64655}\r\n   7                                        BM_ReadColumn<false,Int32Type>/-1/10       1.811 GiB/sec       2.008 GiB/sec    10.851                                         {'run_name': 'BM_ReadColumn<false,Int32Type>/-1/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 32}\r\n   58                                        BM_ReadColumn<false,Int32Type>/-1/1       5.426 GiB/sec       5.999 GiB/sec    10.568                                          {'run_name': 'BM_ReadColumn<false,Int32Type>/-1/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 89}\r\n   87     BM_ReadInt64Column<Repetition::REQUIRED, Compression::ZSTD>/65536/1024      12.156 GiB/sec      11.951 GiB/sec    -1.682    {'run_name': 'BM_ReadInt64Column<Repetition::REQUIRED, Compression::ZSTD>/65536/1024', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 69528}\r\n   [...]\r\n   204                                             BM_PlainEncodingBoolean/65536     802.645 MiB/sec     707.974 MiB/sec   -11.795                                              {'run_name': 'BM_PlainEncodingBoolean/65536', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 8937}\r\n   132                                                    BM_RleEncoding/65536/8     482.792 MiB/sec     424.143 MiB/sec   -12.148                                                     {'run_name': 'BM_RleEncoding/65536/8', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2684}\r\n   15                                            BM_WriteColumn<true,DoubleType>     622.954 MiB/sec     498.484 MiB/sec   -19.981                                               {'run_name': 'BM_WriteColumn<true,DoubleType>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6}\r\n   16                                             BM_WriteColumn<true,Int64Type>     668.120 MiB/sec     526.837 MiB/sec   -21.146                                                {'run_name': 'BM_WriteColumn<true,Int64Type>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6}\r\n   34                                             BM_WriteColumn<true,Int32Type>     362.327 MiB/sec     256.361 MiB/sec   -29.246                                                {'run_name': 'BM_WriteColumn<true,Int32Type>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6}\r\n   27                                           BM_WriteColumn<true,BooleanType>     101.732 MiB/sec      69.602 MiB/sec   -31.583                                              {'run_name': 'BM_WriteColumn<true,BooleanType>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 7}\r\n   60                                       BM_ReadColumn<true,BooleanType>/-1/1     480.372 MiB/sec     219.376 MiB/sec   -54.332                                         {'run_name': 'BM_ReadColumn<true,BooleanType>/-1/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 32}\r\n   289                                 BM_ArrowBinaryDict/EncodeLowLevel/1048576     316.208 MiB/sec     131.127 MiB/sec   -58.531                                    {'run_name': 'BM_ArrowBinaryDict/EncodeLowLevel/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 37}\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T19:59:33.453+0000",
                    "updated": "2020-11-25T19:59:33.453+0000",
                    "started": "2020-11-25T19:59:33.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516816",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-733918851\n\n\n   ArrayRangeEquals benchmarks:\r\n   ```\r\n                                                                       benchmark            baseline           contender  change %                                                                                                                                                                                       counters\r\n   22             ArrayRangeEqualsStruct/32768/100   23.863m items/sec  343.067m items/sec  1337.631                {'run_name': 'ArrayRangeEqualsStruct/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 510, 'null_percent': 1.0}\r\n   5     ArrayRangeEqualsFixedSizeBinary/32768/100  614.186m items/sec    5.185b items/sec   744.270     {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 12979, 'null_percent': 1.0}\r\n   33        ArrayRangeEqualsListOfInt32/32768/100   26.215m items/sec  215.239m items/sec   721.041           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 560, 'null_percent': 1.0}\r\n   21          ArrayRangeEqualsBoolean/32768/10000    2.826b items/sec   19.479b items/sec   589.262          {'run_name': 'ArrayRangeEqualsBoolean/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 61059, 'null_percent': 0.01}\r\n   51           ArrayRangeEqualsStruct/32768/10000  222.532m items/sec    1.483b items/sec   566.535            {'run_name': 'ArrayRangeEqualsStruct/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4789, 'null_percent': 0.01}\r\n   47             ArrayRangeEqualsString/32768/100  252.039m items/sec    1.350b items/sec   435.816               {'run_name': 'ArrayRangeEqualsString/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5365, 'null_percent': 1.0}\r\n   20              ArrayRangeEqualsStruct/32768/10   12.987m items/sec   61.633m items/sec   374.582                {'run_name': 'ArrayRangeEqualsStruct/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 277, 'null_percent': 10.0}\r\n   36            ArrayRangeEqualsFloat32/32768/100    1.096b items/sec    4.474b items/sec   308.366             {'run_name': 'ArrayRangeEqualsFloat32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 23270, 'null_percent': 1.0}\r\n   29              ArrayRangeEqualsInt32/32768/100    1.675b items/sec    6.533b items/sec   290.081               {'run_name': 'ArrayRangeEqualsInt32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 35608, 'null_percent': 1.0}\r\n   46              ArrayRangeEqualsString/32768/10  135.386m items/sec  526.754m items/sec   289.076               {'run_name': 'ArrayRangeEqualsString/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2853, 'null_percent': 10.0}\r\n   38         ArrayRangeEqualsListOfInt32/32768/10   12.637m items/sec   43.741m items/sec   246.142           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269, 'null_percent': 10.0}\r\n   28     ArrayRangeEqualsFixedSizeBinary/32768/10  294.337m items/sec  969.941m items/sec   229.534      {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6252, 'null_percent': 10.0}\r\n   42      ArrayRangeEqualsListOfInt32/32768/10000  202.207m items/sec  656.251m items/sec   224.544       {'run_name': 'ArrayRangeEqualsListOfInt32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4360, 'null_percent': 0.01}\r\n   13            ArrayRangeEqualsBoolean/32768/100  979.715m items/sec    2.908b items/sec   196.868             {'run_name': 'ArrayRangeEqualsBoolean/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 21042, 'null_percent': 1.0}\r\n   40              ArrayRangeEqualsBoolean/32768/1   12.017b items/sec   35.217b items/sec   193.068            {'run_name': 'ArrayRangeEqualsBoolean/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 256448, 'null_percent': 100.0}\r\n   45      ArrayRangeEqualsFixedSizeBinary/32768/1   12.204b items/sec   35.234b items/sec   188.703    {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269241, 'null_percent': 100.0}\r\n   17                ArrayRangeEqualsInt32/32768/1   12.406b items/sec   34.810b items/sec   180.598              {'run_name': 'ArrayRangeEqualsInt32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 265638, 'null_percent': 100.0}\r\n   26          ArrayRangeEqualsListOfInt32/32768/1   12.626b items/sec   35.288b items/sec   179.485        {'run_name': 'ArrayRangeEqualsListOfInt32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269942, 'null_percent': 100.0}\r\n   44               ArrayRangeEqualsString/32768/1   13.196b items/sec   35.124b items/sec   166.178             {'run_name': 'ArrayRangeEqualsString/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 281694, 'null_percent': 100.0}\r\n   35              ArrayRangeEqualsFloat32/32768/1   12.898b items/sec   34.159b items/sec   164.846            {'run_name': 'ArrayRangeEqualsFloat32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 277754, 'null_percent': 100.0}\r\n   53               ArrayRangeEqualsStruct/32768/1   13.618b items/sec   35.687b items/sec   162.059             {'run_name': 'ArrayRangeEqualsStruct/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 291514, 'null_percent': 100.0}\r\n   15  ArrayRangeEqualsFixedSizeBinary/32768/10000    4.166b items/sec   10.835b items/sec   160.089  {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 89321, 'null_percent': 0.01}\r\n   16            ArrayRangeEqualsInt32/32768/10000    6.886b items/sec   15.942b items/sec   131.514           {'run_name': 'ArrayRangeEqualsInt32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 146029, 'null_percent': 0.01}\r\n   19               ArrayRangeEqualsStruct/32768/0  748.134m items/sec    1.686b items/sec   125.426                {'run_name': 'ArrayRangeEqualsStruct/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 16023, 'null_percent': 0.0}\r\n   32      ArrayRangeEqualsFixedSizeBinary/32768/2  196.551m items/sec  375.563m items/sec    91.077       {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4153, 'null_percent': 50.0}\r\n   49               ArrayRangeEqualsString/32768/2  139.017m items/sec  239.038m items/sec    71.948                {'run_name': 'ArrayRangeEqualsString/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2953, 'null_percent': 50.0}\r\n   31          ArrayRangeEqualsFloat32/32768/10000    4.639b items/sec    7.537b items/sec    62.473          {'run_name': 'ArrayRangeEqualsFloat32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 96758, 'null_percent': 0.01}\r\n   39          ArrayRangeEqualsListOfInt32/32768/2   12.135m items/sec   19.630m items/sec    61.761            {'run_name': 'ArrayRangeEqualsListOfInt32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 259, 'null_percent': 50.0}\r\n   2                ArrayRangeEqualsStruct/32768/2   21.952m items/sec   34.669m items/sec    57.935                 {'run_name': 'ArrayRangeEqualsStruct/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 465, 'null_percent': 50.0}\r\n   1                ArrayRangeEqualsInt32/32768/10  678.038m items/sec    1.057b items/sec    55.821               {'run_name': 'ArrayRangeEqualsInt32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14391, 'null_percent': 10.0}\r\n   12              ArrayRangeEqualsFloat32/32768/2  271.242m items/sec  394.340m items/sec    45.383               {'run_name': 'ArrayRangeEqualsFloat32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5633, 'null_percent': 50.0}\r\n   24                ArrayRangeEqualsInt32/32768/2  274.259m items/sec  393.021m items/sec    43.303                 {'run_name': 'ArrayRangeEqualsInt32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5764, 'null_percent': 50.0}\r\n   50              ArrayRangeEqualsBoolean/32768/2  221.275m items/sec  307.534m items/sec    38.983               {'run_name': 'ArrayRangeEqualsBoolean/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4708, 'null_percent': 50.0}\r\n   48           ArrayRangeEqualsString/32768/10000    1.330b items/sec    1.816b items/sec    36.476           {'run_name': 'ArrayRangeEqualsString/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 28580, 'null_percent': 0.01}\r\n   8           ArrayRangeEqualsSparseUnion/32768/0   34.852m items/sec   45.628m items/sec    30.919             {'run_name': 'ArrayRangeEqualsSparseUnion/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 737, 'null_percent': 0.0}\r\n   23           ArrayRangeEqualsDenseUnion/32768/0   36.416m items/sec   45.582m items/sec    25.171              {'run_name': 'ArrayRangeEqualsDenseUnion/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 773, 'null_percent': 0.0}\r\n   9           ArrayRangeEqualsSparseUnion/32768/1   22.389m items/sec   27.076m items/sec    20.932           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 478, 'null_percent': 100.0}\r\n   14             ArrayRangeEqualsFloat32/32768/10  569.970m items/sec  660.566m items/sec    15.895             {'run_name': 'ArrayRangeEqualsFloat32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 11970, 'null_percent': 10.0}\r\n   11           ArrayRangeEqualsDenseUnion/32768/1   23.336m items/sec   25.912m items/sec    11.037            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 496, 'null_percent': 100.0}\r\n   0               ArrayRangeEqualsFloat32/32768/0   10.265b items/sec   11.049b items/sec     7.641              {'run_name': 'ArrayRangeEqualsFloat32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 218383, 'null_percent': 0.0}\r\n   43          ArrayRangeEqualsListOfInt32/32768/0  790.628m items/sec  838.173m items/sec     6.014           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 17131, 'null_percent': 0.0}\r\n   27              ArrayRangeEqualsBoolean/32768/0   48.625b items/sec   51.207b items/sec     5.309             {'run_name': 'ArrayRangeEqualsBoolean/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1034591, 'null_percent': 0.0}\r\n   6                ArrayRangeEqualsString/32768/0    1.847b items/sec    1.942b items/sec     5.149                {'run_name': 'ArrayRangeEqualsString/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 39452, 'null_percent': 0.0}\r\n   10      ArrayRangeEqualsFixedSizeBinary/32768/0   15.947b items/sec   16.438b items/sec     3.075      {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 337925, 'null_percent': 0.0}\r\n   30          ArrayRangeEqualsSparseUnion/32768/2   20.058m items/sec   20.362m items/sec     1.514            {'run_name': 'ArrayRangeEqualsSparseUnion/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 427, 'null_percent': 50.0}\r\n   3          ArrayRangeEqualsSparseUnion/32768/10   20.014m items/sec   20.036m items/sec     0.109           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 425, 'null_percent': 10.0}\r\n   7         ArrayRangeEqualsSparseUnion/32768/100   20.000m items/sec   19.925m items/sec    -0.373           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 424, 'null_percent': 1.0}\r\n   25      ArrayRangeEqualsSparseUnion/32768/10000   19.848m items/sec   19.658m items/sec    -0.958        {'run_name': 'ArrayRangeEqualsSparseUnion/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 422, 'null_percent': 0.01}\r\n   37                ArrayRangeEqualsInt32/32768/0   31.782b items/sec   31.411b items/sec    -1.168                {'run_name': 'ArrayRangeEqualsInt32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 665046, 'null_percent': 0.0}\r\n   4              ArrayRangeEqualsBoolean/32768/10  512.687m items/sec  496.923m items/sec    -3.075             {'run_name': 'ArrayRangeEqualsBoolean/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 10930, 'null_percent': 10.0}\r\n   18         ArrayRangeEqualsDenseUnion/32768/100   20.641m items/sec   19.655m items/sec    -4.777            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 440, 'null_percent': 1.0}\r\n   52       ArrayRangeEqualsDenseUnion/32768/10000   20.665m items/sec   19.609m items/sec    -5.113         {'run_name': 'ArrayRangeEqualsDenseUnion/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 442, 'null_percent': 0.01}\r\n   41          ArrayRangeEqualsDenseUnion/32768/10   20.551m items/sec   19.388m items/sec    -5.658            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 441, 'null_percent': 10.0}\r\n   34           ArrayRangeEqualsDenseUnion/32768/2   20.645m items/sec   19.374m items/sec    -6.156             {'run_name': 'ArrayRangeEqualsDenseUnion/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 440, 'null_percent': 50.0}\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T20:00:07.079+0000",
                    "updated": "2020-11-25T20:00:07.079+0000",
                    "started": "2020-11-25T20:00:07.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516817",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-733919445\n\n\n   Parquet benchmarks:\r\n   ```\r\n                                                                       benchmark            baseline           contender  change %                                                                                                                                                                                       counters\r\n   199                                     BM_PlainDecodingSpacedFloat/32768/100       5.506 GiB/sec      18.466 GiB/sec   235.349                {'run_name': 'BM_PlainDecodingSpacedFloat/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 31377, 'null_percent': 1.0}\r\n   177                                 BM_PlainEncodingSpacedBoolean/32768/10000      11.377 GiB/sec      33.462 GiB/sec   194.106         {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 259382, 'null_percent': 100.0}\r\n   179                                   BM_PlainDecodingSpacedBoolean/32768/100       1.358 GiB/sec       3.572 GiB/sec   163.120              {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 31133, 'null_percent': 1.0}\r\n   282                                     BM_PlainEncodingSpacedFloat/32768/100       6.276 GiB/sec      15.605 GiB/sec   148.621                {'run_name': 'BM_PlainEncodingSpacedFloat/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 35719, 'null_percent': 1.0}\r\n   152                                  BM_ArrowBinaryDict/EncodeLowLevel/262144      82.896 MiB/sec     203.718 MiB/sec   145.751                                     {'run_name': 'BM_ArrowBinaryDict/EncodeLowLevel/262144', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 38}\r\n   298                                  BM_PlainEncodingSpacedDouble/32768/10000     115.446 GiB/sec     262.819 GiB/sec   127.654          {'run_name': 'BM_PlainEncodingSpacedDouble/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 330346, 'null_percent': 100.0}\r\n   247                                    BM_PlainDecodingSpacedDouble/32768/100       9.953 GiB/sec      22.653 GiB/sec   127.594               {'run_name': 'BM_PlainDecodingSpacedDouble/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 28669, 'null_percent': 1.0}\r\n   207                                   BM_PlainEncodingSpacedFloat/32768/10000      57.732 GiB/sec     130.097 GiB/sec   125.348           {'run_name': 'BM_PlainEncodingSpacedFloat/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 330727, 'null_percent': 100.0}\r\n   203                                       BM_PlainDecodingSpacedFloat/32768/1      21.382 GiB/sec      36.628 GiB/sec    71.298                {'run_name': 'BM_PlainDecodingSpacedFloat/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 122797, 'null_percent': 0.01}\r\n   231                                    BM_PlainEncodingSpacedDouble/32768/100      10.467 GiB/sec      17.029 GiB/sec    62.697               {'run_name': 'BM_PlainEncodingSpacedDouble/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 30042, 'null_percent': 1.0}\r\n   256                                    BM_PlainEncodingSpacedFloat/32768/5000    1008.863 MiB/sec       1.592 GiB/sec    61.538               {'run_name': 'BM_PlainEncodingSpacedFloat/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5619, 'null_percent': 50.0}\r\n   273                                   BM_PlainEncodingSpacedDouble/32768/5000       2.022 GiB/sec       3.201 GiB/sec    58.281              {'run_name': 'BM_PlainEncodingSpacedDouble/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5712, 'null_percent': 50.0}\r\n   162                                    BM_PlainDecodingSpacedFloat/32768/5000     981.563 MiB/sec       1.516 GiB/sec    58.168               {'run_name': 'BM_PlainDecodingSpacedFloat/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5473, 'null_percent': 50.0}\r\n   173                                   BM_PlainDecodingSpacedDouble/32768/5000       1.891 GiB/sec       2.991 GiB/sec    58.157              {'run_name': 'BM_PlainDecodingSpacedDouble/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5401, 'null_percent': 50.0}\r\n   238                                  BM_PlainDecodingSpacedBoolean/32768/5000     250.841 MiB/sec     384.756 MiB/sec    53.386             {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5585, 'null_percent': 50.0}\r\n   264                                  BM_PlainEncodingSpacedBoolean/32768/5000     234.661 MiB/sec     353.009 MiB/sec    50.433             {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/5000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5211, 'null_percent': 50.0}\r\n   286                                    BM_PlainDecodingSpacedFloat/32768/1000       2.531 GiB/sec       3.739 GiB/sec    47.699              {'run_name': 'BM_PlainDecodingSpacedFloat/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14280, 'null_percent': 10.0}\r\n   229                                    BM_PlainEncodingSpacedFloat/32768/1000       2.680 GiB/sec       3.783 GiB/sec    41.159              {'run_name': 'BM_PlainEncodingSpacedFloat/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 15210, 'null_percent': 10.0}\r\n   251                                      BM_PlainDecodingSpacedDouble/32768/1      25.016 GiB/sec      34.929 GiB/sec    39.627                {'run_name': 'BM_PlainDecodingSpacedDouble/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 71628, 'null_percent': 0.01}\r\n   201                                   BM_PlainDecodingSpacedDouble/32768/1000       4.987 GiB/sec       6.893 GiB/sec    38.224             {'run_name': 'BM_PlainDecodingSpacedDouble/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14031, 'null_percent': 10.0}\r\n   244                                   BM_PlainEncodingSpacedBoolean/32768/100     664.198 MiB/sec     913.312 MiB/sec    37.506              {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14952, 'null_percent': 1.0}\r\n   239                                   BM_PlainEncodingSpacedDouble/32768/1000       5.174 GiB/sec       7.071 GiB/sec    36.652             {'run_name': 'BM_PlainEncodingSpacedDouble/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14708, 'null_percent': 10.0}\r\n   230                                  BM_PlainDecodingSpacedBoolean/32768/1000     678.559 MiB/sec     857.465 MiB/sec    26.366            {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 15333, 'null_percent': 10.0}\r\n   102       BM_WriteInt64Column<Repetition::OPTIONAL, Compression::LZ4>/1048576     332.343 MiB/sec     409.541 MiB/sec    23.228         {'run_name': 'BM_WriteInt64Column<Repetition::OPTIONAL, Compression::LZ4>/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 109}\r\n   185                                       BM_PlainEncodingSpacedFloat/32768/1      17.571 GiB/sec      21.578 GiB/sec    22.805                {'run_name': 'BM_PlainEncodingSpacedFloat/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 100736, 'null_percent': 0.01}\r\n   176                                  BM_PlainEncodingSpacedBoolean/32768/1000     450.133 MiB/sec     545.271 MiB/sec    21.136             {'run_name': 'BM_PlainEncodingSpacedBoolean/32768/1000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 9948, 'null_percent': 10.0}\r\n   187                                     BM_PlainDecodingSpacedBoolean/32768/1       4.496 GiB/sec       5.314 GiB/sec    18.200              {'run_name': 'BM_PlainDecodingSpacedBoolean/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 103077, 'null_percent': 0.01}\r\n   25                                            BM_WriteColumn<false,Int64Type>       1.057 GiB/sec       1.220 GiB/sec    15.454                                              {'run_name': 'BM_WriteColumn<false,Int64Type>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 10}\r\n   39                                       BM_ReadColumn<true,BooleanType>/5/10     250.138 MiB/sec     283.639 MiB/sec    13.393                                         {'run_name': 'BM_ReadColumn<true,BooleanType>/5/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 18}\r\n   75        BM_WriteInt64Column<Repetition::REQUIRED, Compression::LZ4>/1048576       1.084 GiB/sec       1.216 GiB/sec    12.132         {'run_name': 'BM_WriteInt64Column<Repetition::REQUIRED, Compression::LZ4>/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 443}\r\n   115                                                    BM_RleEncoding/32768/1     724.153 MiB/sec     810.490 MiB/sec    11.923                                                     {'run_name': 'BM_RleEncoding/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 8141}\r\n   92                                                      BM_RleEncoding/1024/1     706.002 MiB/sec     788.645 MiB/sec    11.706                                                    {'run_name': 'BM_RleEncoding/1024/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 232581}\r\n   106                         BM_WriteInt64Column<Repetition::REPEATED>/1048576     218.593 MiB/sec     243.729 MiB/sec    11.499                            {'run_name': 'BM_WriteInt64Column<Repetition::REPEATED>/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 77}\r\n   109                                                    BM_RleEncoding/65536/1     729.356 MiB/sec     811.227 MiB/sec    11.225                                                     {'run_name': 'BM_RleEncoding/65536/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4076}\r\n   89                                                      BM_RleEncoding/4096/1     725.079 MiB/sec     804.486 MiB/sec    10.952                                                     {'run_name': 'BM_RleEncoding/4096/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 64655}\r\n   7                                        BM_ReadColumn<false,Int32Type>/-1/10       1.811 GiB/sec       2.008 GiB/sec    10.851                                         {'run_name': 'BM_ReadColumn<false,Int32Type>/-1/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 32}\r\n   58                                        BM_ReadColumn<false,Int32Type>/-1/1       5.426 GiB/sec       5.999 GiB/sec    10.568                                          {'run_name': 'BM_ReadColumn<false,Int32Type>/-1/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 89}\r\n   87     BM_ReadInt64Column<Repetition::REQUIRED, Compression::ZSTD>/65536/1024      12.156 GiB/sec      11.951 GiB/sec    -1.682    {'run_name': 'BM_ReadInt64Column<Repetition::REQUIRED, Compression::ZSTD>/65536/1024', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 69528}\r\n   [...]\r\n   204                                             BM_PlainEncodingBoolean/65536     802.645 MiB/sec     707.974 MiB/sec   -11.795                                              {'run_name': 'BM_PlainEncodingBoolean/65536', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 8937}\r\n   132                                                    BM_RleEncoding/65536/8     482.792 MiB/sec     424.143 MiB/sec   -12.148                                                     {'run_name': 'BM_RleEncoding/65536/8', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2684}\r\n   15                                            BM_WriteColumn<true,DoubleType>     622.954 MiB/sec     498.484 MiB/sec   -19.981                                               {'run_name': 'BM_WriteColumn<true,DoubleType>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6}\r\n   16                                             BM_WriteColumn<true,Int64Type>     668.120 MiB/sec     526.837 MiB/sec   -21.146                                                {'run_name': 'BM_WriteColumn<true,Int64Type>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6}\r\n   34                                             BM_WriteColumn<true,Int32Type>     362.327 MiB/sec     256.361 MiB/sec   -29.246                                                {'run_name': 'BM_WriteColumn<true,Int32Type>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6}\r\n   27                                           BM_WriteColumn<true,BooleanType>     101.732 MiB/sec      69.602 MiB/sec   -31.583                                              {'run_name': 'BM_WriteColumn<true,BooleanType>', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 7}\r\n   60                                       BM_ReadColumn<true,BooleanType>/-1/1     480.372 MiB/sec     219.376 MiB/sec   -54.332                                         {'run_name': 'BM_ReadColumn<true,BooleanType>/-1/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 32}\r\n   289                                 BM_ArrowBinaryDict/EncodeLowLevel/1048576     316.208 MiB/sec     131.127 MiB/sec   -58.531                                    {'run_name': 'BM_ArrowBinaryDict/EncodeLowLevel/1048576', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 37}\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T20:00:21.562+0000",
                    "updated": "2020-11-25T20:00:21.562+0000",
                    "started": "2020-11-25T20:00:21.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516818",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-733918851\n\n\n   ArrayRangeEquals benchmarks:\r\n   ```\r\n                                         benchmark            baseline           contender  change %                                                                                                                                                                                counters\r\n   22             ArrayRangeEqualsStruct/32768/100   23.863m items/sec  343.067m items/sec  1337.631                {'run_name': 'ArrayRangeEqualsStruct/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 510, 'null_percent': 1.0}\r\n   5     ArrayRangeEqualsFixedSizeBinary/32768/100  614.186m items/sec    5.185b items/sec   744.270     {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 12979, 'null_percent': 1.0}\r\n   33        ArrayRangeEqualsListOfInt32/32768/100   26.215m items/sec  215.239m items/sec   721.041           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 560, 'null_percent': 1.0}\r\n   21          ArrayRangeEqualsBoolean/32768/10000    2.826b items/sec   19.479b items/sec   589.262          {'run_name': 'ArrayRangeEqualsBoolean/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 61059, 'null_percent': 0.01}\r\n   51           ArrayRangeEqualsStruct/32768/10000  222.532m items/sec    1.483b items/sec   566.535            {'run_name': 'ArrayRangeEqualsStruct/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4789, 'null_percent': 0.01}\r\n   47             ArrayRangeEqualsString/32768/100  252.039m items/sec    1.350b items/sec   435.816               {'run_name': 'ArrayRangeEqualsString/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5365, 'null_percent': 1.0}\r\n   20              ArrayRangeEqualsStruct/32768/10   12.987m items/sec   61.633m items/sec   374.582                {'run_name': 'ArrayRangeEqualsStruct/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 277, 'null_percent': 10.0}\r\n   36            ArrayRangeEqualsFloat32/32768/100    1.096b items/sec    4.474b items/sec   308.366             {'run_name': 'ArrayRangeEqualsFloat32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 23270, 'null_percent': 1.0}\r\n   29              ArrayRangeEqualsInt32/32768/100    1.675b items/sec    6.533b items/sec   290.081               {'run_name': 'ArrayRangeEqualsInt32/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 35608, 'null_percent': 1.0}\r\n   46              ArrayRangeEqualsString/32768/10  135.386m items/sec  526.754m items/sec   289.076               {'run_name': 'ArrayRangeEqualsString/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2853, 'null_percent': 10.0}\r\n   38         ArrayRangeEqualsListOfInt32/32768/10   12.637m items/sec   43.741m items/sec   246.142           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269, 'null_percent': 10.0}\r\n   28     ArrayRangeEqualsFixedSizeBinary/32768/10  294.337m items/sec  969.941m items/sec   229.534      {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6252, 'null_percent': 10.0}\r\n   42      ArrayRangeEqualsListOfInt32/32768/10000  202.207m items/sec  656.251m items/sec   224.544       {'run_name': 'ArrayRangeEqualsListOfInt32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4360, 'null_percent': 0.01}\r\n   13            ArrayRangeEqualsBoolean/32768/100  979.715m items/sec    2.908b items/sec   196.868             {'run_name': 'ArrayRangeEqualsBoolean/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 21042, 'null_percent': 1.0}\r\n   40              ArrayRangeEqualsBoolean/32768/1   12.017b items/sec   35.217b items/sec   193.068            {'run_name': 'ArrayRangeEqualsBoolean/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 256448, 'null_percent': 100.0}\r\n   45      ArrayRangeEqualsFixedSizeBinary/32768/1   12.204b items/sec   35.234b items/sec   188.703    {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269241, 'null_percent': 100.0}\r\n   17                ArrayRangeEqualsInt32/32768/1   12.406b items/sec   34.810b items/sec   180.598              {'run_name': 'ArrayRangeEqualsInt32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 265638, 'null_percent': 100.0}\r\n   26          ArrayRangeEqualsListOfInt32/32768/1   12.626b items/sec   35.288b items/sec   179.485        {'run_name': 'ArrayRangeEqualsListOfInt32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 269942, 'null_percent': 100.0}\r\n   44               ArrayRangeEqualsString/32768/1   13.196b items/sec   35.124b items/sec   166.178             {'run_name': 'ArrayRangeEqualsString/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 281694, 'null_percent': 100.0}\r\n   35              ArrayRangeEqualsFloat32/32768/1   12.898b items/sec   34.159b items/sec   164.846            {'run_name': 'ArrayRangeEqualsFloat32/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 277754, 'null_percent': 100.0}\r\n   53               ArrayRangeEqualsStruct/32768/1   13.618b items/sec   35.687b items/sec   162.059             {'run_name': 'ArrayRangeEqualsStruct/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 291514, 'null_percent': 100.0}\r\n   15  ArrayRangeEqualsFixedSizeBinary/32768/10000    4.166b items/sec   10.835b items/sec   160.089  {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 89321, 'null_percent': 0.01}\r\n   16            ArrayRangeEqualsInt32/32768/10000    6.886b items/sec   15.942b items/sec   131.514           {'run_name': 'ArrayRangeEqualsInt32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 146029, 'null_percent': 0.01}\r\n   19               ArrayRangeEqualsStruct/32768/0  748.134m items/sec    1.686b items/sec   125.426                {'run_name': 'ArrayRangeEqualsStruct/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 16023, 'null_percent': 0.0}\r\n   32      ArrayRangeEqualsFixedSizeBinary/32768/2  196.551m items/sec  375.563m items/sec    91.077       {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4153, 'null_percent': 50.0}\r\n   49               ArrayRangeEqualsString/32768/2  139.017m items/sec  239.038m items/sec    71.948                {'run_name': 'ArrayRangeEqualsString/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2953, 'null_percent': 50.0}\r\n   31          ArrayRangeEqualsFloat32/32768/10000    4.639b items/sec    7.537b items/sec    62.473          {'run_name': 'ArrayRangeEqualsFloat32/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 96758, 'null_percent': 0.01}\r\n   39          ArrayRangeEqualsListOfInt32/32768/2   12.135m items/sec   19.630m items/sec    61.761            {'run_name': 'ArrayRangeEqualsListOfInt32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 259, 'null_percent': 50.0}\r\n   2                ArrayRangeEqualsStruct/32768/2   21.952m items/sec   34.669m items/sec    57.935                 {'run_name': 'ArrayRangeEqualsStruct/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 465, 'null_percent': 50.0}\r\n   1                ArrayRangeEqualsInt32/32768/10  678.038m items/sec    1.057b items/sec    55.821               {'run_name': 'ArrayRangeEqualsInt32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 14391, 'null_percent': 10.0}\r\n   12              ArrayRangeEqualsFloat32/32768/2  271.242m items/sec  394.340m items/sec    45.383               {'run_name': 'ArrayRangeEqualsFloat32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5633, 'null_percent': 50.0}\r\n   24                ArrayRangeEqualsInt32/32768/2  274.259m items/sec  393.021m items/sec    43.303                 {'run_name': 'ArrayRangeEqualsInt32/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5764, 'null_percent': 50.0}\r\n   50              ArrayRangeEqualsBoolean/32768/2  221.275m items/sec  307.534m items/sec    38.983               {'run_name': 'ArrayRangeEqualsBoolean/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4708, 'null_percent': 50.0}\r\n   48           ArrayRangeEqualsString/32768/10000    1.330b items/sec    1.816b items/sec    36.476           {'run_name': 'ArrayRangeEqualsString/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 28580, 'null_percent': 0.01}\r\n   8           ArrayRangeEqualsSparseUnion/32768/0   34.852m items/sec   45.628m items/sec    30.919             {'run_name': 'ArrayRangeEqualsSparseUnion/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 737, 'null_percent': 0.0}\r\n   23           ArrayRangeEqualsDenseUnion/32768/0   36.416m items/sec   45.582m items/sec    25.171              {'run_name': 'ArrayRangeEqualsDenseUnion/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 773, 'null_percent': 0.0}\r\n   9           ArrayRangeEqualsSparseUnion/32768/1   22.389m items/sec   27.076m items/sec    20.932           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 478, 'null_percent': 100.0}\r\n   14             ArrayRangeEqualsFloat32/32768/10  569.970m items/sec  660.566m items/sec    15.895             {'run_name': 'ArrayRangeEqualsFloat32/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 11970, 'null_percent': 10.0}\r\n   11           ArrayRangeEqualsDenseUnion/32768/1   23.336m items/sec   25.912m items/sec    11.037            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/1', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 496, 'null_percent': 100.0}\r\n   0               ArrayRangeEqualsFloat32/32768/0   10.265b items/sec   11.049b items/sec     7.641              {'run_name': 'ArrayRangeEqualsFloat32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 218383, 'null_percent': 0.0}\r\n   43          ArrayRangeEqualsListOfInt32/32768/0  790.628m items/sec  838.173m items/sec     6.014           {'run_name': 'ArrayRangeEqualsListOfInt32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 17131, 'null_percent': 0.0}\r\n   27              ArrayRangeEqualsBoolean/32768/0   48.625b items/sec   51.207b items/sec     5.309             {'run_name': 'ArrayRangeEqualsBoolean/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1034591, 'null_percent': 0.0}\r\n   6                ArrayRangeEqualsString/32768/0    1.847b items/sec    1.942b items/sec     5.149                {'run_name': 'ArrayRangeEqualsString/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 39452, 'null_percent': 0.0}\r\n   10      ArrayRangeEqualsFixedSizeBinary/32768/0   15.947b items/sec   16.438b items/sec     3.075      {'run_name': 'ArrayRangeEqualsFixedSizeBinary/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 337925, 'null_percent': 0.0}\r\n   30          ArrayRangeEqualsSparseUnion/32768/2   20.058m items/sec   20.362m items/sec     1.514            {'run_name': 'ArrayRangeEqualsSparseUnion/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 427, 'null_percent': 50.0}\r\n   3          ArrayRangeEqualsSparseUnion/32768/10   20.014m items/sec   20.036m items/sec     0.109           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 425, 'null_percent': 10.0}\r\n   7         ArrayRangeEqualsSparseUnion/32768/100   20.000m items/sec   19.925m items/sec    -0.373           {'run_name': 'ArrayRangeEqualsSparseUnion/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 424, 'null_percent': 1.0}\r\n   25      ArrayRangeEqualsSparseUnion/32768/10000   19.848m items/sec   19.658m items/sec    -0.958        {'run_name': 'ArrayRangeEqualsSparseUnion/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 422, 'null_percent': 0.01}\r\n   37                ArrayRangeEqualsInt32/32768/0   31.782b items/sec   31.411b items/sec    -1.168                {'run_name': 'ArrayRangeEqualsInt32/32768/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 665046, 'null_percent': 0.0}\r\n   4              ArrayRangeEqualsBoolean/32768/10  512.687m items/sec  496.923m items/sec    -3.075             {'run_name': 'ArrayRangeEqualsBoolean/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 10930, 'null_percent': 10.0}\r\n   18         ArrayRangeEqualsDenseUnion/32768/100   20.641m items/sec   19.655m items/sec    -4.777            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 440, 'null_percent': 1.0}\r\n   52       ArrayRangeEqualsDenseUnion/32768/10000   20.665m items/sec   19.609m items/sec    -5.113         {'run_name': 'ArrayRangeEqualsDenseUnion/32768/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 442, 'null_percent': 0.01}\r\n   41          ArrayRangeEqualsDenseUnion/32768/10   20.551m items/sec   19.388m items/sec    -5.658            {'run_name': 'ArrayRangeEqualsDenseUnion/32768/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 441, 'null_percent': 10.0}\r\n   34           ArrayRangeEqualsDenseUnion/32768/2   20.645m items/sec   19.374m items/sec    -6.156             {'run_name': 'ArrayRangeEqualsDenseUnion/32768/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 440, 'null_percent': 50.0}\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T20:01:09.266+0000",
                    "updated": "2020-11-25T20:01:09.266+0000",
                    "started": "2020-11-25T20:01:09.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516819",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-733926480\n\n\n   Also some speedups on no-null filters:\r\n   * before:\r\n   ```\r\n   FilterInt64FilterNoNulls/524288/0          19993 ns        19988 ns        34897 bytes_per_second=24.4281G/s data null%=0 mask null%=0 select%=99.9 size=524.288k\r\n   FilterInt64FilterNoNulls/524288/1         249210 ns       249153 ns         2805 bytes_per_second=1.95976G/s data null%=0 mask null%=0 select%=50 size=524.288k\r\n   FilterInt64FilterNoNulls/524288/2          31896 ns        31889 ns        21867 bytes_per_second=15.3118G/s data null%=0 mask null%=0 select%=1 size=524.288k\r\n   \r\n   FilterStringFilterNoNulls/524288/0         54006 ns        53996 ns        12804 bytes_per_second=9.04295G/s data null%=0 mask null%=0 select%=99.9 size=524.288k\r\n   FilterStringFilterNoNulls/524288/1        256494 ns       256438 ns         2721 bytes_per_second=1.90409G/s data null%=0 mask null%=0 select%=50 size=524.288k\r\n   FilterStringFilterNoNulls/524288/2         16881 ns        16878 ns        40537 bytes_per_second=28.9302G/s data null%=0 mask null%=0 select%=1 size=524.288k\r\n   ```\r\n   \r\n   * after:\r\n   ```\r\n   FilterInt64FilterNoNulls/524288/0          14416 ns        14413 ns        49758 bytes_per_second=33.8771G/s data null%=0 mask null%=0 select%=99.9 size=524.288k\r\n   FilterInt64FilterNoNulls/524288/1         151899 ns       151870 ns         4514 bytes_per_second=3.21512G/s data null%=0 mask null%=0 select%=50 size=524.288k\r\n   FilterInt64FilterNoNulls/524288/2           8578 ns         8577 ns        82823 bytes_per_second=56.931G/s data null%=0 mask null%=0 select%=1 size=524.288k\r\n   \r\n   FilterStringFilterNoNulls/524288/0         45116 ns        45104 ns        15887 bytes_per_second=10.8256G/s data null%=0 mask null%=0 select%=99.9 size=524.288k\r\n   FilterStringFilterNoNulls/524288/1        146822 ns       146796 ns         4746 bytes_per_second=3.32625G/s data null%=0 mask null%=0 select%=50 size=524.288k\r\n   FilterStringFilterNoNulls/524288/2          5438 ns         5437 ns       126135 bytes_per_second=89.8084G/s data null%=0 mask null%=0 select%=1 size=524.288k\r\n   ```\r\n   \r\n   (couldn't run a diff because of ARROW-10738)\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-25T20:16:45.687+0000",
                    "updated": "2020-11-25T20:16:45.687+0000",
                    "started": "2020-11-25T20:16:45.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516823",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-734223439\n\n\n   Aggregation benchmarks:\r\n   ```\r\n                                 benchmark          baseline        contender   change %                                                                                                                                                                      counters\r\n   108         ModeKernelBoolean/1048576/0    57.487 MiB/sec   37.406 GiB/sec  66530.741            {'run_name': 'ModeKernelBoolean/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 41, 'null_percent': 0.0}\r\n   93          ModeKernelBoolean/1048576/2    28.239 MiB/sec    1.863 GiB/sec   6655.773           {'run_name': 'ModeKernelBoolean/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 20, 'null_percent': 50.0}\r\n   56         ModeKernelBoolean/1048576/10    43.613 MiB/sec    1.799 GiB/sec   4123.421          {'run_name': 'ModeKernelBoolean/1048576/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 31, 'null_percent': 10.0}\r\n   29        ModeKernelBoolean/1048576/100    58.888 MiB/sec    1.826 GiB/sec   3075.803          {'run_name': 'ModeKernelBoolean/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 39, 'null_percent': 1.0}\r\n   124     ModeKernelBoolean/1048576/10000    61.189 MiB/sec    1.864 GiB/sec   3018.637       {'run_name': 'ModeKernelBoolean/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 43, 'null_percent': 0.01}\r\n   35             ModeKernelInt8/1048576/0   792.467 MiB/sec    2.473 GiB/sec    219.603             {'run_name': 'ModeKernelInt8/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1000, 'null_percent': 0.0}\r\n   36        ModeKernelInt16/1048576/10000     1.922 GiB/sec    4.217 GiB/sec    119.409       {'run_name': 'ModeKernelInt16/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2138, 'null_percent': 0.01}\r\n   100    VarianceKernelDouble/1048576/100     2.445 GiB/sec    4.960 GiB/sec    102.888     {'run_name': 'VarianceKernelDouble/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1746, 'null_percent': 1.0}\r\n   76            ModeKernelInt32/1048576/0     4.050 GiB/sec    8.075 GiB/sec     99.390            {'run_name': 'ModeKernelInt32/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4419, 'null_percent': 0.0}\r\n   109     VarianceKernelFloat/1048576/100     1.216 GiB/sec    2.387 GiB/sec     96.341       {'run_name': 'VarianceKernelFloat/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 871, 'null_percent': 1.0}\r\n   20        ModeKernelInt64/1048576/10000     5.547 GiB/sec    9.831 GiB/sec     77.229       {'run_name': 'ModeKernelInt64/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6475, 'null_percent': 0.01}\r\n   54      VarianceKernelInt64/1048576/100     3.511 GiB/sec    5.748 GiB/sec     63.693      {'run_name': 'VarianceKernelInt64/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2519, 'null_percent': 1.0}\r\n   28          ModeKernelInt16/1048576/100     1.292 GiB/sec    2.077 GiB/sec     60.697           {'run_name': 'ModeKernelInt16/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 927, 'null_percent': 1.0}\r\n   94          ModeKernelInt32/1048576/100     2.530 GiB/sec    3.969 GiB/sec     56.872          {'run_name': 'ModeKernelInt32/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1805, 'null_percent': 1.0}\r\n   67             ModeKernelInt8/1048576/2   237.264 MiB/sec  362.684 MiB/sec     52.861             {'run_name': 'ModeKernelInt8/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 166, 'null_percent': 50.0}\r\n   11        VarianceKernelFloat/1048576/2   508.083 MiB/sec  727.822 MiB/sec     43.249        {'run_name': 'VarianceKernelFloat/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 355, 'null_percent': 50.0}\r\n   65       VarianceKernelDouble/1048576/2     1.030 GiB/sec    1.457 GiB/sec     41.439       {'run_name': 'VarianceKernelDouble/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 734, 'null_percent': 50.0}\r\n   84            ModeKernelInt64/1048576/2     1.003 GiB/sec    1.409 GiB/sec     40.411            {'run_name': 'ModeKernelInt64/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 713, 'null_percent': 50.0}\r\n   22            ModeKernelInt16/1048576/2   253.082 MiB/sec  355.311 MiB/sec     40.394            {'run_name': 'ModeKernelInt16/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 177, 'null_percent': 50.0}\r\n   15        VarianceKernelInt32/1048576/2  1011.938 MiB/sec    1.387 GiB/sec     40.305        {'run_name': 'VarianceKernelInt32/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 701, 'null_percent': 50.0}\r\n   98            ModeKernelInt32/1048576/2   502.640 MiB/sec  702.642 MiB/sec     39.790            {'run_name': 'ModeKernelInt32/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 341, 'null_percent': 50.0}\r\n   61        VarianceKernelInt64/1048576/2     1.024 GiB/sec    1.422 GiB/sec     38.871        {'run_name': 'VarianceKernelInt64/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 726, 'null_percent': 50.0}\r\n   81       VarianceKernelFloat/1048576/10   854.282 MiB/sec    1.153 GiB/sec     38.189       {'run_name': 'VarianceKernelFloat/1048576/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 598, 'null_percent': 10.0}\r\n   34          ModeKernelInt64/1048576/100     4.766 GiB/sec    6.547 GiB/sec     37.389          {'run_name': 'ModeKernelInt64/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 3416, 'null_percent': 1.0}\r\n   2       VarianceKernelDouble/1048576/10     1.670 GiB/sec    2.290 GiB/sec     37.083     {'run_name': 'VarianceKernelDouble/1048576/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1195, 'null_percent': 10.0}\r\n   111     VarianceKernelInt32/1048576/100     4.159 GiB/sec    5.506 GiB/sec     32.395      {'run_name': 'VarianceKernelInt32/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2978, 'null_percent': 1.0}\r\n   30           ModeKernelInt8/1048576/100     1.276 GiB/sec    1.634 GiB/sec     28.042            {'run_name': 'ModeKernelInt8/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 919, 'null_percent': 1.0}\r\n   73    VarianceKernelInt32/1048576/10000     6.548 GiB/sec    7.310 GiB/sec     11.634   {'run_name': 'VarianceKernelInt32/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4687, 'null_percent': 0.01}\r\n   1         VarianceKernelInt32/1048576/0     7.168 GiB/sec    7.952 GiB/sec     10.944        {'run_name': 'VarianceKernelInt32/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5116, 'null_percent': 0.0}\r\n   [...]\r\n   63        ModeKernelInt32/1048576/10000     6.489 GiB/sec    3.047 GiB/sec    -53.040       {'run_name': 'ModeKernelInt32/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4653, 'null_percent': 0.01}\r\n   45         ModeKernelInt8/1048576/10000     2.262 GiB/sec    1.002 GiB/sec    -55.719        {'run_name': 'ModeKernelInt8/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1617, 'null_percent': 0.01}\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T10:46:12.812+0000",
                    "updated": "2020-11-26T10:46:12.812+0000",
                    "started": "2020-11-26T10:46:12.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516992",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/516993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#issuecomment-734223439\n\n\n   Aggregation benchmarks:\r\n   ```\r\n                                 benchmark          baseline        contender   change %                                                                                                                                                                      counters\r\n   108         ModeKernelBoolean/1048576/0    57.487 MiB/sec   37.406 GiB/sec  66530.741            {'run_name': 'ModeKernelBoolean/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 41, 'null_percent': 0.0}\r\n   93          ModeKernelBoolean/1048576/2    28.239 MiB/sec    1.863 GiB/sec   6655.773           {'run_name': 'ModeKernelBoolean/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 20, 'null_percent': 50.0}\r\n   56         ModeKernelBoolean/1048576/10    43.613 MiB/sec    1.799 GiB/sec   4123.421          {'run_name': 'ModeKernelBoolean/1048576/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 31, 'null_percent': 10.0}\r\n   29        ModeKernelBoolean/1048576/100    58.888 MiB/sec    1.826 GiB/sec   3075.803          {'run_name': 'ModeKernelBoolean/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 39, 'null_percent': 1.0}\r\n   124     ModeKernelBoolean/1048576/10000    61.189 MiB/sec    1.864 GiB/sec   3018.637       {'run_name': 'ModeKernelBoolean/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 43, 'null_percent': 0.01}\r\n   35             ModeKernelInt8/1048576/0   792.467 MiB/sec    2.473 GiB/sec    219.603             {'run_name': 'ModeKernelInt8/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1000, 'null_percent': 0.0}\r\n   36        ModeKernelInt16/1048576/10000     1.922 GiB/sec    4.217 GiB/sec    119.409       {'run_name': 'ModeKernelInt16/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2138, 'null_percent': 0.01}\r\n   100    VarianceKernelDouble/1048576/100     2.445 GiB/sec    4.960 GiB/sec    102.888     {'run_name': 'VarianceKernelDouble/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1746, 'null_percent': 1.0}\r\n   76            ModeKernelInt32/1048576/0     4.050 GiB/sec    8.075 GiB/sec     99.390            {'run_name': 'ModeKernelInt32/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4419, 'null_percent': 0.0}\r\n   109     VarianceKernelFloat/1048576/100     1.216 GiB/sec    2.387 GiB/sec     96.341       {'run_name': 'VarianceKernelFloat/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 871, 'null_percent': 1.0}\r\n   20        ModeKernelInt64/1048576/10000     5.547 GiB/sec    9.831 GiB/sec     77.229       {'run_name': 'ModeKernelInt64/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 6475, 'null_percent': 0.01}\r\n   54      VarianceKernelInt64/1048576/100     3.511 GiB/sec    5.748 GiB/sec     63.693      {'run_name': 'VarianceKernelInt64/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2519, 'null_percent': 1.0}\r\n   28          ModeKernelInt16/1048576/100     1.292 GiB/sec    2.077 GiB/sec     60.697           {'run_name': 'ModeKernelInt16/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 927, 'null_percent': 1.0}\r\n   94          ModeKernelInt32/1048576/100     2.530 GiB/sec    3.969 GiB/sec     56.872          {'run_name': 'ModeKernelInt32/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1805, 'null_percent': 1.0}\r\n   67             ModeKernelInt8/1048576/2   237.264 MiB/sec  362.684 MiB/sec     52.861             {'run_name': 'ModeKernelInt8/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 166, 'null_percent': 50.0}\r\n   11        VarianceKernelFloat/1048576/2   508.083 MiB/sec  727.822 MiB/sec     43.249        {'run_name': 'VarianceKernelFloat/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 355, 'null_percent': 50.0}\r\n   65       VarianceKernelDouble/1048576/2     1.030 GiB/sec    1.457 GiB/sec     41.439       {'run_name': 'VarianceKernelDouble/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 734, 'null_percent': 50.0}\r\n   84            ModeKernelInt64/1048576/2     1.003 GiB/sec    1.409 GiB/sec     40.411            {'run_name': 'ModeKernelInt64/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 713, 'null_percent': 50.0}\r\n   22            ModeKernelInt16/1048576/2   253.082 MiB/sec  355.311 MiB/sec     40.394            {'run_name': 'ModeKernelInt16/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 177, 'null_percent': 50.0}\r\n   15        VarianceKernelInt32/1048576/2  1011.938 MiB/sec    1.387 GiB/sec     40.305        {'run_name': 'VarianceKernelInt32/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 701, 'null_percent': 50.0}\r\n   98            ModeKernelInt32/1048576/2   502.640 MiB/sec  702.642 MiB/sec     39.790            {'run_name': 'ModeKernelInt32/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 341, 'null_percent': 50.0}\r\n   61        VarianceKernelInt64/1048576/2     1.024 GiB/sec    1.422 GiB/sec     38.871        {'run_name': 'VarianceKernelInt64/1048576/2', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 726, 'null_percent': 50.0}\r\n   81       VarianceKernelFloat/1048576/10   854.282 MiB/sec    1.153 GiB/sec     38.189       {'run_name': 'VarianceKernelFloat/1048576/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 598, 'null_percent': 10.0}\r\n   34          ModeKernelInt64/1048576/100     4.766 GiB/sec    6.547 GiB/sec     37.389          {'run_name': 'ModeKernelInt64/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 3416, 'null_percent': 1.0}\r\n   2       VarianceKernelDouble/1048576/10     1.670 GiB/sec    2.290 GiB/sec     37.083     {'run_name': 'VarianceKernelDouble/1048576/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1195, 'null_percent': 10.0}\r\n   111     VarianceKernelInt32/1048576/100     4.159 GiB/sec    5.506 GiB/sec     32.395      {'run_name': 'VarianceKernelInt32/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 2978, 'null_percent': 1.0}\r\n   30           ModeKernelInt8/1048576/100     1.276 GiB/sec    1.634 GiB/sec     28.042            {'run_name': 'ModeKernelInt8/1048576/100', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 919, 'null_percent': 1.0}\r\n   73    VarianceKernelInt32/1048576/10000     6.548 GiB/sec    7.310 GiB/sec     11.634   {'run_name': 'VarianceKernelInt32/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4687, 'null_percent': 0.01}\r\n   1         VarianceKernelInt32/1048576/0     7.168 GiB/sec    7.952 GiB/sec     10.944        {'run_name': 'VarianceKernelInt32/1048576/0', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 5116, 'null_percent': 0.0}\r\n   [...]\r\n   16           ModeKernelInt64/1048576/10     2.376 GiB/sec    2.181 GiB/sec     -8.192          {'run_name': 'ModeKernelInt64/1048576/10', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1700, 'null_percent': 10.0}\r\n   63        ModeKernelInt32/1048576/10000     6.489 GiB/sec    3.047 GiB/sec    -53.040       {'run_name': 'ModeKernelInt32/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 4653, 'null_percent': 0.01}\r\n   45         ModeKernelInt8/1048576/10000     2.262 GiB/sec    1.002 GiB/sec    -55.719        {'run_name': 'ModeKernelInt8/1048576/10000', 'run_type': 'iteration', 'repetitions': 0, 'repetition_index': 0, 'threads': 1, 'iterations': 1617, 'null_percent': 0.01}\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-26T10:46:38.151+0000",
                    "updated": "2020-11-26T10:46:38.151+0000",
                    "started": "2020-11-26T10:46:38.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516993",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/518031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#discussion_r532736857\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -589,37 +590,9 @@ class PrimitiveFilterImpl {\n \n   void ExecNonNull() {\n     // Fast filter when values and filter are not null\n-    // Bit counters used for both null_selection behaviors\n-    BitBlockCounter filter_counter(filter_data_, filter_offset_, values_length_);\n-\n-    int64_t in_position = 0;\n-    BitBlockCount current_block = filter_counter.NextWord();\n-    while (in_position < values_length_) {\n-      if (current_block.AllSet()) {\n-        int64_t run_length = 0;\n-        // If we've found a all-true block, then we scan forward until we find\n-        // a block that has some false values (or we reach the end\n-        while (current_block.length > 0 && current_block.AllSet()) {\n-          run_length += current_block.length;\n-          current_block = filter_counter.NextWord();\n-        }\n-        WriteValueSegment(in_position, run_length);\n-        in_position += run_length;\n-      } else if (current_block.NoneSet()) {\n-        // Nothing selected\n-        in_position += current_block.length;\n-        current_block = filter_counter.NextWord();\n-      } else {\n-        // Some values selected\n-        for (int64_t i = 0; i < current_block.length; ++i) {\n-          if (BitUtil::GetBit(filter_data_, filter_offset_ + in_position)) {\n-            WriteValue(in_position);\n-          }\n-          ++in_position;\n-        }\n-        current_block = filter_counter.NextWord();\n-      }\n-    }\n+    ::arrow::internal::VisitSetBitRunsVoid(\n+        filter_data_, filter_offset_, values_length_,\n+        [&](int64_t position, int64_t length) { WriteValueSegment(position, length); });\n\nReview comment:\n       Very nice\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-30T16:48:33.713+0000",
                    "updated": "2020-11-30T16:48:33.713+0000",
                    "started": "2020-11-30T16:48:33.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518031",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/518613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#discussion_r533640298\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -66,6 +66,15 @@ using internal::InvertBitmap;\n \n using ::testing::ElementsAreArray;\n \n+namespace internal {\n+void PrintTo(const BitRun& run, std::ostream* os) {\n+  *os << run.ToString();  // whatever needed to print bar to os\n+}\n+void PrintTo(const SetBitRun& run, std::ostream* os) {\n+  *os << run.ToString();  // whatever needed to print bar to os\n+}\n\nReview comment:\n       ```suggestion\r\n   void PrintTo(const BitRun& run, std::ostream* os) { *os << run.ToString(); }\r\n   void PrintTo(const SetBitRun& run, std::ostream* os) { *os << run.ToString(); }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -166,7 +167,350 @@ class ARROW_EXPORT BitRunReader {\n using BitRunReader = BitRunReaderLinear;\n #endif\n \n-// TODO SetBitRunReader?\n+struct SetBitRun {\n+  int64_t position;\n+  int64_t length;\n+\n+  bool AtEnd() const { return length == 0; }\n+\n+  std::string ToString() const {\n+    return std::string(\"{pos=\") + std::to_string(position) +\n+           \", len=\" + std::to_string(length) + \"}\";\n+  }\n+\n+  bool operator==(const SetBitRun& other) const {\n+    return position == other.position && length == other.length;\n+  }\n+  bool operator!=(const SetBitRun& other) const {\n+    return position != other.position || length != other.length;\n+  }\n+};\n+\n+template <bool Reverse>\n+class BaseSetBitRunReader {\n+ public:\n+  /// \\brief Constructs new SetBitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  inline BaseSetBitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  SetBitRun NextRun() {\n+    int64_t pos = 0;\n+    int64_t len = 0;\n+    if (current_num_bits_) {\n+      const auto run = FindCurrentRun();\n+      assert(remaining_ >= 0);\n+      if (run.length && current_num_bits_) {\n+        // The run ends in current_word_\n+        return AdjustRun(run);\n+      }\n+      pos = run.position;\n+      len = run.length;\n+    }\n+    if (!len) {\n+      // We didn't get any ones in current_word_, so we can skip any zeros\n+      // in the following words\n+      SkipNextZeros();\n+      if (remaining_ == 0) {\n+        return {0, 0};\n+      }\n+      assert(current_num_bits_);\n+      pos = position();\n+    } else if (!current_num_bits_) {\n+      if (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+        current_word_ = LoadFullWord();\n+        current_num_bits_ = 64;\n+      } else if (remaining_ > 0) {\n+        current_word_ = LoadPartialWord(/*bit_offset=*/0, remaining_);\n+        current_num_bits_ = static_cast<int32_t>(remaining_);\n+      } else {\n+        // No bits remaining, perhaps we found a run?\n+        return AdjustRun({pos, len});\n+      }\n+      // If current word starts with a zero, we got a full run\n+      if (!(current_word_ & kFirstBit)) {\n+        return AdjustRun({pos, len});\n+      }\n+    }\n+    // Current word should now start with a set bit\n+    len += CountNextOnes();\n+    return AdjustRun({pos, len});\n+  }\n+\n+ protected:\n+  int64_t position() const {\n+    if (Reverse) {\n+      return remaining_;\n+    } else {\n+      return length_ - remaining_;\n+    }\n+  }\n+\n+  SetBitRun AdjustRun(SetBitRun run) {\n+    if (Reverse) {\n+      assert(run.position >= run.length);\n+      run.position -= run.length;\n+    }\n+    return run;\n+  }\n+\n+  uint64_t LoadFullWord() {\n+    uint64_t word;\n+    if (Reverse) {\n+      bitmap_ -= 8;\n+    }\n+    memcpy(&word, bitmap_, 8);\n+    if (!Reverse) {\n+      bitmap_ += 8;\n+    }\n+    return BitUtil::ToLittleEndian(word);\n+  }\n+\n+  uint64_t LoadPartialWord(int8_t bit_offset, int64_t num_bits) {\n+    assert(num_bits > 0);\n+    uint64_t word = 0;\n+    const int64_t num_bytes = BitUtil::BytesForBits(num_bits);\n+    if (Reverse) {\n+      // Read in the most significant bytes of the word\n+      bitmap_ -= num_bytes;\n+      memcpy(reinterpret_cast<char*>(&word) + 8 - num_bytes, bitmap_, num_bytes);\n+      // XXX MostSignificantBitmask\n+      return (BitUtil::ToLittleEndian(word) << bit_offset) &\n+             ~BitUtil::LeastSignificantBitMask(64 - num_bits);\n+    } else {\n+      memcpy(&word, bitmap_, num_bytes);\n+      bitmap_ += num_bytes;\n+      return (BitUtil::ToLittleEndian(word) >> bit_offset) &\n+             BitUtil::LeastSignificantBitMask(num_bits);\n+    }\n+  }\n+\n+  void SkipNextZeros() {\n+    assert(current_num_bits_ == 0);\n+    while (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+      current_word_ = LoadFullWord();\n+      const auto num_zeros = CountFirstZeros(current_word_);\n+      if (num_zeros < 64) {\n\nReview comment:\n       ```suggestion\r\n         if (ARROW_PREDICT_FALSE(num_zeros < 64)) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -589,37 +590,9 @@ class PrimitiveFilterImpl {\n \n   void ExecNonNull() {\n     // Fast filter when values and filter are not null\n-    // Bit counters used for both null_selection behaviors\n-    BitBlockCounter filter_counter(filter_data_, filter_offset_, values_length_);\n-\n-    int64_t in_position = 0;\n-    BitBlockCount current_block = filter_counter.NextWord();\n-    while (in_position < values_length_) {\n-      if (current_block.AllSet()) {\n-        int64_t run_length = 0;\n-        // If we've found a all-true block, then we scan forward until we find\n-        // a block that has some false values (or we reach the end\n-        while (current_block.length > 0 && current_block.AllSet()) {\n-          run_length += current_block.length;\n-          current_block = filter_counter.NextWord();\n-        }\n-        WriteValueSegment(in_position, run_length);\n-        in_position += run_length;\n-      } else if (current_block.NoneSet()) {\n-        // Nothing selected\n-        in_position += current_block.length;\n-        current_block = filter_counter.NextWord();\n-      } else {\n-        // Some values selected\n-        for (int64_t i = 0; i < current_block.length; ++i) {\n-          if (BitUtil::GetBit(filter_data_, filter_offset_ + in_position)) {\n-            WriteValue(in_position);\n-          }\n-          ++in_position;\n-        }\n-        current_block = filter_counter.NextWord();\n-      }\n-    }\n+    ::arrow::internal::VisitSetBitRunsVoid(\n+        filter_data_, filter_offset_, values_length_,\n+        [&](int64_t position, int64_t length) { WriteValueSegment(position, length); });\n\nReview comment:\n       :rocket: \n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -166,7 +167,350 @@ class ARROW_EXPORT BitRunReader {\n using BitRunReader = BitRunReaderLinear;\n #endif\n \n-// TODO SetBitRunReader?\n+struct SetBitRun {\n+  int64_t position;\n+  int64_t length;\n+\n+  bool AtEnd() const { return length == 0; }\n+\n+  std::string ToString() const {\n+    return std::string(\"{pos=\") + std::to_string(position) +\n+           \", len=\" + std::to_string(length) + \"}\";\n+  }\n+\n+  bool operator==(const SetBitRun& other) const {\n+    return position == other.position && length == other.length;\n+  }\n+  bool operator!=(const SetBitRun& other) const {\n+    return position != other.position || length != other.length;\n+  }\n+};\n+\n+template <bool Reverse>\n+class BaseSetBitRunReader {\n+ public:\n+  /// \\brief Constructs new SetBitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  inline BaseSetBitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  SetBitRun NextRun() {\n+    int64_t pos = 0;\n+    int64_t len = 0;\n+    if (current_num_bits_) {\n+      const auto run = FindCurrentRun();\n+      assert(remaining_ >= 0);\n+      if (run.length && current_num_bits_) {\n+        // The run ends in current_word_\n+        return AdjustRun(run);\n+      }\n+      pos = run.position;\n+      len = run.length;\n+    }\n+    if (!len) {\n+      // We didn't get any ones in current_word_, so we can skip any zeros\n+      // in the following words\n+      SkipNextZeros();\n+      if (remaining_ == 0) {\n+        return {0, 0};\n+      }\n+      assert(current_num_bits_);\n+      pos = position();\n+    } else if (!current_num_bits_) {\n+      if (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+        current_word_ = LoadFullWord();\n+        current_num_bits_ = 64;\n+      } else if (remaining_ > 0) {\n+        current_word_ = LoadPartialWord(/*bit_offset=*/0, remaining_);\n+        current_num_bits_ = static_cast<int32_t>(remaining_);\n+      } else {\n+        // No bits remaining, perhaps we found a run?\n+        return AdjustRun({pos, len});\n+      }\n+      // If current word starts with a zero, we got a full run\n+      if (!(current_word_ & kFirstBit)) {\n+        return AdjustRun({pos, len});\n+      }\n+    }\n+    // Current word should now start with a set bit\n+    len += CountNextOnes();\n+    return AdjustRun({pos, len});\n+  }\n+\n+ protected:\n+  int64_t position() const {\n+    if (Reverse) {\n+      return remaining_;\n+    } else {\n+      return length_ - remaining_;\n+    }\n+  }\n+\n+  SetBitRun AdjustRun(SetBitRun run) {\n+    if (Reverse) {\n+      assert(run.position >= run.length);\n+      run.position -= run.length;\n+    }\n+    return run;\n+  }\n+\n+  uint64_t LoadFullWord() {\n+    uint64_t word;\n+    if (Reverse) {\n+      bitmap_ -= 8;\n+    }\n+    memcpy(&word, bitmap_, 8);\n+    if (!Reverse) {\n+      bitmap_ += 8;\n+    }\n+    return BitUtil::ToLittleEndian(word);\n+  }\n+\n+  uint64_t LoadPartialWord(int8_t bit_offset, int64_t num_bits) {\n+    assert(num_bits > 0);\n+    uint64_t word = 0;\n+    const int64_t num_bytes = BitUtil::BytesForBits(num_bits);\n+    if (Reverse) {\n+      // Read in the most significant bytes of the word\n+      bitmap_ -= num_bytes;\n+      memcpy(reinterpret_cast<char*>(&word) + 8 - num_bytes, bitmap_, num_bytes);\n+      // XXX MostSignificantBitmask\n+      return (BitUtil::ToLittleEndian(word) << bit_offset) &\n+             ~BitUtil::LeastSignificantBitMask(64 - num_bits);\n+    } else {\n+      memcpy(&word, bitmap_, num_bytes);\n+      bitmap_ += num_bytes;\n+      return (BitUtil::ToLittleEndian(word) >> bit_offset) &\n+             BitUtil::LeastSignificantBitMask(num_bits);\n+    }\n+  }\n+\n+  void SkipNextZeros() {\n+    assert(current_num_bits_ == 0);\n+    while (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+      current_word_ = LoadFullWord();\n+      const auto num_zeros = CountFirstZeros(current_word_);\n+      if (num_zeros < 64) {\n\nReview comment:\n       IMHO, this is much easier to read as `if (num_zeros >= 64) { remaining_ -= 64; continue; } // rest`\n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -166,7 +167,350 @@ class ARROW_EXPORT BitRunReader {\n using BitRunReader = BitRunReaderLinear;\n #endif\n \n-// TODO SetBitRunReader?\n+struct SetBitRun {\n+  int64_t position;\n+  int64_t length;\n+\n+  bool AtEnd() const { return length == 0; }\n+\n+  std::string ToString() const {\n+    return std::string(\"{pos=\") + std::to_string(position) +\n+           \", len=\" + std::to_string(length) + \"}\";\n+  }\n+\n+  bool operator==(const SetBitRun& other) const {\n+    return position == other.position && length == other.length;\n+  }\n+  bool operator!=(const SetBitRun& other) const {\n+    return position != other.position || length != other.length;\n+  }\n+};\n+\n+template <bool Reverse>\n+class BaseSetBitRunReader {\n+ public:\n+  /// \\brief Constructs new SetBitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  inline BaseSetBitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  SetBitRun NextRun() {\n+    int64_t pos = 0;\n+    int64_t len = 0;\n+    if (current_num_bits_) {\n+      const auto run = FindCurrentRun();\n+      assert(remaining_ >= 0);\n+      if (run.length && current_num_bits_) {\n+        // The run ends in current_word_\n+        return AdjustRun(run);\n+      }\n+      pos = run.position;\n+      len = run.length;\n+    }\n+    if (!len) {\n+      // We didn't get any ones in current_word_, so we can skip any zeros\n+      // in the following words\n+      SkipNextZeros();\n+      if (remaining_ == 0) {\n+        return {0, 0};\n+      }\n+      assert(current_num_bits_);\n+      pos = position();\n+    } else if (!current_num_bits_) {\n+      if (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+        current_word_ = LoadFullWord();\n+        current_num_bits_ = 64;\n+      } else if (remaining_ > 0) {\n+        current_word_ = LoadPartialWord(/*bit_offset=*/0, remaining_);\n+        current_num_bits_ = static_cast<int32_t>(remaining_);\n+      } else {\n+        // No bits remaining, perhaps we found a run?\n+        return AdjustRun({pos, len});\n+      }\n+      // If current word starts with a zero, we got a full run\n+      if (!(current_word_ & kFirstBit)) {\n+        return AdjustRun({pos, len});\n+      }\n+    }\n+    // Current word should now start with a set bit\n+    len += CountNextOnes();\n+    return AdjustRun({pos, len});\n+  }\n+\n+ protected:\n+  int64_t position() const {\n+    if (Reverse) {\n+      return remaining_;\n+    } else {\n+      return length_ - remaining_;\n+    }\n+  }\n+\n+  SetBitRun AdjustRun(SetBitRun run) {\n+    if (Reverse) {\n+      assert(run.position >= run.length);\n+      run.position -= run.length;\n+    }\n+    return run;\n+  }\n+\n+  uint64_t LoadFullWord() {\n+    uint64_t word;\n+    if (Reverse) {\n+      bitmap_ -= 8;\n+    }\n+    memcpy(&word, bitmap_, 8);\n+    if (!Reverse) {\n+      bitmap_ += 8;\n+    }\n+    return BitUtil::ToLittleEndian(word);\n+  }\n+\n+  uint64_t LoadPartialWord(int8_t bit_offset, int64_t num_bits) {\n+    assert(num_bits > 0);\n+    uint64_t word = 0;\n+    const int64_t num_bytes = BitUtil::BytesForBits(num_bits);\n+    if (Reverse) {\n+      // Read in the most significant bytes of the word\n+      bitmap_ -= num_bytes;\n+      memcpy(reinterpret_cast<char*>(&word) + 8 - num_bytes, bitmap_, num_bytes);\n+      // XXX MostSignificantBitmask\n+      return (BitUtil::ToLittleEndian(word) << bit_offset) &\n+             ~BitUtil::LeastSignificantBitMask(64 - num_bits);\n+    } else {\n+      memcpy(&word, bitmap_, num_bytes);\n+      bitmap_ += num_bytes;\n+      return (BitUtil::ToLittleEndian(word) >> bit_offset) &\n+             BitUtil::LeastSignificantBitMask(num_bits);\n+    }\n+  }\n+\n+  void SkipNextZeros() {\n+    assert(current_num_bits_ == 0);\n+    while (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+      current_word_ = LoadFullWord();\n+      const auto num_zeros = CountFirstZeros(current_word_);\n+      if (num_zeros < 64) {\n+        current_word_ = ConsumeBits(current_word_, num_zeros);\n+        current_num_bits_ = 64 - num_zeros;\n+        remaining_ -= num_zeros;\n+        assert(remaining_ >= 0);\n+        assert(current_num_bits_ >= 0);\n+        return;\n+      }\n+      remaining_ -= 64;\n+    }\n+    if (remaining_ > 0) {\n+      current_word_ = LoadPartialWord(/*bit_offset=*/0, remaining_);\n+      current_num_bits_ = static_cast<int32_t>(remaining_);\n+      const auto num_zeros =\n+          std::min<int32_t>(current_num_bits_, CountFirstZeros(current_word_));\n+      current_word_ = ConsumeBits(current_word_, num_zeros);\n+      current_num_bits_ -= num_zeros;\n+      remaining_ -= num_zeros;\n+      assert(remaining_ >= 0);\n+      assert(current_num_bits_ >= 0);\n+    }\n+  }\n+\n+  int64_t CountNextOnes() {\n+    assert(current_word_ & kFirstBit);\n+\n+    int64_t len;\n+    if (~current_word_) {\n+      const auto num_ones = CountFirstZeros(~current_word_);\n+      assert(num_ones <= current_num_bits_);\n+      assert(num_ones <= remaining_);\n+      remaining_ -= num_ones;\n+      current_word_ = ConsumeBits(current_word_, num_ones);\n+      current_num_bits_ -= num_ones;\n+      if (current_num_bits_) {\n+        // There are pending zeros in current_word_\n+        return num_ones;\n+      }\n+      len = num_ones;\n+    } else {\n+      // current_word_ is all ones\n+      remaining_ -= 64;\n+      current_num_bits_ = 0;\n+      len = 64;\n+    }\n+\n+    while (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+      current_word_ = LoadFullWord();\n+      const auto num_ones = CountFirstZeros(~current_word_);\n+      len += num_ones;\n+      remaining_ -= num_ones;\n+      if (num_ones < 64) {\n\nReview comment:\n       ```suggestion\r\n         if (ARROW_PREDICT_FALSE(num_ones < 64)) {\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-01T19:22:54.506+0000",
                    "updated": "2020-12-01T19:22:54.506+0000",
                    "started": "2020-12-01T19:22:54.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518613",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/518829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770#discussion_r533955521\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_run_reader.h\n##########\n@@ -166,7 +167,350 @@ class ARROW_EXPORT BitRunReader {\n using BitRunReader = BitRunReaderLinear;\n #endif\n \n-// TODO SetBitRunReader?\n+struct SetBitRun {\n+  int64_t position;\n+  int64_t length;\n+\n+  bool AtEnd() const { return length == 0; }\n+\n+  std::string ToString() const {\n+    return std::string(\"{pos=\") + std::to_string(position) +\n+           \", len=\" + std::to_string(length) + \"}\";\n+  }\n+\n+  bool operator==(const SetBitRun& other) const {\n+    return position == other.position && length == other.length;\n+  }\n+  bool operator!=(const SetBitRun& other) const {\n+    return position != other.position || length != other.length;\n+  }\n+};\n+\n+template <bool Reverse>\n+class BaseSetBitRunReader {\n+ public:\n+  /// \\brief Constructs new SetBitRunReader.\n+  ///\n+  /// \\param[in] bitmap source data\n+  /// \\param[in] start_offset bit offset into the source data\n+  /// \\param[in] length number of bits to copy\n+  inline BaseSetBitRunReader(const uint8_t* bitmap, int64_t start_offset, int64_t length);\n+\n+  SetBitRun NextRun() {\n+    int64_t pos = 0;\n+    int64_t len = 0;\n+    if (current_num_bits_) {\n+      const auto run = FindCurrentRun();\n+      assert(remaining_ >= 0);\n+      if (run.length && current_num_bits_) {\n+        // The run ends in current_word_\n+        return AdjustRun(run);\n+      }\n+      pos = run.position;\n+      len = run.length;\n+    }\n+    if (!len) {\n+      // We didn't get any ones in current_word_, so we can skip any zeros\n+      // in the following words\n+      SkipNextZeros();\n+      if (remaining_ == 0) {\n+        return {0, 0};\n+      }\n+      assert(current_num_bits_);\n+      pos = position();\n+    } else if (!current_num_bits_) {\n+      if (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+        current_word_ = LoadFullWord();\n+        current_num_bits_ = 64;\n+      } else if (remaining_ > 0) {\n+        current_word_ = LoadPartialWord(/*bit_offset=*/0, remaining_);\n+        current_num_bits_ = static_cast<int32_t>(remaining_);\n+      } else {\n+        // No bits remaining, perhaps we found a run?\n+        return AdjustRun({pos, len});\n+      }\n+      // If current word starts with a zero, we got a full run\n+      if (!(current_word_ & kFirstBit)) {\n+        return AdjustRun({pos, len});\n+      }\n+    }\n+    // Current word should now start with a set bit\n+    len += CountNextOnes();\n+    return AdjustRun({pos, len});\n+  }\n+\n+ protected:\n+  int64_t position() const {\n+    if (Reverse) {\n+      return remaining_;\n+    } else {\n+      return length_ - remaining_;\n+    }\n+  }\n+\n+  SetBitRun AdjustRun(SetBitRun run) {\n+    if (Reverse) {\n+      assert(run.position >= run.length);\n+      run.position -= run.length;\n+    }\n+    return run;\n+  }\n+\n+  uint64_t LoadFullWord() {\n+    uint64_t word;\n+    if (Reverse) {\n+      bitmap_ -= 8;\n+    }\n+    memcpy(&word, bitmap_, 8);\n+    if (!Reverse) {\n+      bitmap_ += 8;\n+    }\n+    return BitUtil::ToLittleEndian(word);\n+  }\n+\n+  uint64_t LoadPartialWord(int8_t bit_offset, int64_t num_bits) {\n+    assert(num_bits > 0);\n+    uint64_t word = 0;\n+    const int64_t num_bytes = BitUtil::BytesForBits(num_bits);\n+    if (Reverse) {\n+      // Read in the most significant bytes of the word\n+      bitmap_ -= num_bytes;\n+      memcpy(reinterpret_cast<char*>(&word) + 8 - num_bytes, bitmap_, num_bytes);\n+      // XXX MostSignificantBitmask\n+      return (BitUtil::ToLittleEndian(word) << bit_offset) &\n+             ~BitUtil::LeastSignificantBitMask(64 - num_bits);\n+    } else {\n+      memcpy(&word, bitmap_, num_bytes);\n+      bitmap_ += num_bytes;\n+      return (BitUtil::ToLittleEndian(word) >> bit_offset) &\n+             BitUtil::LeastSignificantBitMask(num_bits);\n+    }\n+  }\n+\n+  void SkipNextZeros() {\n+    assert(current_num_bits_ == 0);\n+    while (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+      current_word_ = LoadFullWord();\n+      const auto num_zeros = CountFirstZeros(current_word_);\n+      if (num_zeros < 64) {\n+        current_word_ = ConsumeBits(current_word_, num_zeros);\n+        current_num_bits_ = 64 - num_zeros;\n+        remaining_ -= num_zeros;\n+        assert(remaining_ >= 0);\n+        assert(current_num_bits_ >= 0);\n+        return;\n+      }\n+      remaining_ -= 64;\n+    }\n+    if (remaining_ > 0) {\n+      current_word_ = LoadPartialWord(/*bit_offset=*/0, remaining_);\n+      current_num_bits_ = static_cast<int32_t>(remaining_);\n+      const auto num_zeros =\n+          std::min<int32_t>(current_num_bits_, CountFirstZeros(current_word_));\n+      current_word_ = ConsumeBits(current_word_, num_zeros);\n+      current_num_bits_ -= num_zeros;\n+      remaining_ -= num_zeros;\n+      assert(remaining_ >= 0);\n+      assert(current_num_bits_ >= 0);\n+    }\n+  }\n+\n+  int64_t CountNextOnes() {\n+    assert(current_word_ & kFirstBit);\n+\n+    int64_t len;\n+    if (~current_word_) {\n+      const auto num_ones = CountFirstZeros(~current_word_);\n+      assert(num_ones <= current_num_bits_);\n+      assert(num_ones <= remaining_);\n+      remaining_ -= num_ones;\n+      current_word_ = ConsumeBits(current_word_, num_ones);\n+      current_num_bits_ -= num_ones;\n+      if (current_num_bits_) {\n+        // There are pending zeros in current_word_\n+        return num_ones;\n+      }\n+      len = num_ones;\n+    } else {\n+      // current_word_ is all ones\n+      remaining_ -= 64;\n+      current_num_bits_ = 0;\n+      len = 64;\n+    }\n+\n+    while (ARROW_PREDICT_TRUE(remaining_ >= 64)) {\n+      current_word_ = LoadFullWord();\n+      const auto num_ones = CountFirstZeros(~current_word_);\n+      len += num_ones;\n+      remaining_ -= num_ones;\n+      if (num_ones < 64) {\n\nReview comment:\n       Well, depending on the distribution of input bits, this may be commonly true (same for the other comment above).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-02T07:44:22.249+0000",
                    "updated": "2020-12-02T07:44:22.249+0000",
                    "started": "2020-12-02T07:44:22.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "518829",
                    "issueId": "13342127"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/worklog/519018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8770:\nURL: https://github.com/apache/arrow/pull/8770\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-02T13:52:18.050+0000",
                    "updated": "2020-12-02T13:52:18.050+0000",
                    "started": "2020-12-02T13:52:18.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519018",
                    "issueId": "13342127"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3c948ab1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44e5d090[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16717f2b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7cfa4c25[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4499c7d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@f9058da[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1285f624[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3c301b35[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@361de42d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3bc63cbc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64fc936[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3a9a9379[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 02 13:52:07 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-02T13:52:07.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10696/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-23T13:17:01.000+0000",
        "updated": "2021-06-10T14:38:12.000+0000",
        "timeoriginalestimate": null,
        "description": "Followup to PR discussion: https://github.com/apache/arrow/pull/8703#discussion_r526263665",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Investigate a bit run reader that would only return runs of set bits",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342127/comment/17242375",
                    "id": "17242375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8770\n[https://github.com/apache/arrow/pull/8770]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-12-02T13:52:07.136+0000",
                    "updated": "2020-12-02T13:52:07.136+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kuj4:",
        "customfield_12314139": null
    }
}