{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13219791",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791",
    "key": "ARROW-4782",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 37200,
            "total": 37200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 37200,
            "total": 37200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4782/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 67,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262790571\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression-test.cc\n ##########\n @@ -0,0 +1,154 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/compute/operation.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// A placeholder operator implementation to use for testing various Expr\n+// behavior\n+class DummyOp : public Operation {\n \n Review comment:\n   would a mock be appropriate here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:14.501+0000",
                    "updated": "2019-03-06T05:08:14.501+0000",
                    "started": "2019-03-06T05:08:14.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208389",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262791108\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression-test.cc\n ##########\n @@ -0,0 +1,154 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/compute/operation.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// A placeholder operator implementation to use for testing various Expr\n+// behavior\n+class DummyOp : public Operation {\n+ public:\n+  Status ToExpr(std::shared_ptr<Expr>* out) const override {\n+    return Status::NotImplemented(\"NYI\");\n+  }\n+};\n+\n+TEST(TestLogicalType, NonNestedToString) {\n+  std::vector<std::pair<std::shared_ptr<LogicalType>, std::string>> cases = {\n+      {type::any(), \"Any\"},\n+      {type::null(), \"Null\"},\n+      {type::boolean(), \"Bool\"},\n+      {type::number(), \"Number\"},\n+      {type::floating(), \"Floating\"},\n+      {type::integer(), \"Integer\"},\n+      {type::signed_integer(), \"SignedInteger\"},\n+      {type::unsigned_integer(), \"UnsignedInteger\"},\n+      {type::int8(), \"Int8\"},\n+      {type::int16(), \"Int16\"},\n+      {type::int32(), \"Int32\"},\n+      {type::int64(), \"Int64\"},\n+      {type::uint8(), \"UInt8\"},\n+      {type::uint16(), \"UInt16\"},\n+      {type::uint32(), \"UInt32\"},\n+      {type::uint64(), \"UInt64\"},\n+      {type::float_(), \"Float\"},\n+      {type::double_(), \"Double\"},\n+      {type::binary(), \"Binary\"},\n+      {type::utf8(), \"Utf8\"}};\n+\n+  for (auto& case_ : cases) {\n+    ASSERT_EQ(case_.second, case_.first->ToString());\n+  }\n+}\n+\n+class DummyExpr : public Expr {\n+ public:\n+  using Expr::Expr;\n+  std::string kind() const override { return \"dummy\"; }\n+};\n+\n+TEST(TestLogicalType, Any) {\n+  auto op = std::make_shared<DummyOp>();\n+  auto t = type::any();\n+  ASSERT_TRUE(t->IsInstance(*scalar::int32(op)));\n+  ASSERT_TRUE(t->IsInstance(*array::binary(op)));\n+  ASSERT_FALSE(t->IsInstance(*std::make_shared<DummyExpr>(op)));\n+}\n+\n+TEST(TestLogicalType, Number) {\n+  auto op = std::make_shared<DummyOp>();\n+  auto t = type::number();\n+\n+  ASSERT_TRUE(t->IsInstance(*scalar::int32(op)));\n+  ASSERT_TRUE(t->IsInstance(*scalar::double_(op)));\n+  ASSERT_FALSE(t->IsInstance(*scalar::boolean(op)));\n+  ASSERT_FALSE(t->IsInstance(*scalar::null(op)));\n+  ASSERT_FALSE(t->IsInstance(*scalar::binary(op)));\n+}\n+\n+TEST(TestLogicalType, IntegerBaseTypes) {\n+  auto op = std::make_shared<DummyOp>();\n+  auto all_ty = type::integer();\n+  auto signed_ty = type::signed_integer();\n+  auto unsigned_ty = type::unsigned_integer();\n+\n+  ASSERT_TRUE(all_ty->IsInstance(*scalar::int32(op)));\n+  ASSERT_TRUE(all_ty->IsInstance(*scalar::uint32(op)));\n+  ASSERT_FALSE(all_ty->IsInstance(*array::double_(op)));\n+  ASSERT_FALSE(all_ty->IsInstance(*array::binary(op)));\n+\n+  ASSERT_TRUE(signed_ty->IsInstance(*array::int32(op)));\n+  ASSERT_FALSE(signed_ty->IsInstance(*scalar::uint32(op)));\n+\n+  ASSERT_TRUE(unsigned_ty->IsInstance(*scalar::uint32(op)));\n+  ASSERT_TRUE(unsigned_ty->IsInstance(*array::uint32(op)));\n+  ASSERT_FALSE(unsigned_ty->IsInstance(*array::int8(op)));\n+}\n+\n+TEST(TestLogicalType, NumberConcreteIsinstance) {\n+  auto op = std::make_shared<DummyOp>();\n+\n+  std::vector<std::shared_ptr<LogicalType>> types = {\n+      type::null(),    type::boolean(), type::int8(),       type::int16(),\n+      type::int32(),   type::int64(),   type::uint8(),      type::uint16(),\n+      type::uint32(),  type::uint64(),  type::half_float(), type::float_(),\n+      type::double_(), type::binary(),  type::utf8()};\n+\n+  std::vector<std::shared_ptr<Expr>> exprs = {\n+      scalar::null(op),      array::null(op),    scalar::boolean(op),\n+      array::boolean(op),    scalar::int8(op),   array::int8(op),\n+      scalar::int16(op),     array::int16(op),   scalar::int32(op),\n+      array::int32(op),      scalar::int64(op),  array::int64(op),\n+      scalar::uint8(op),     array::uint8(op),   scalar::uint16(op),\n+      array::uint16(op),     scalar::uint32(op), array::uint32(op),\n+      scalar::uint64(op),    array::uint64(op),  scalar::half_float(op),\n+      array::half_float(op), scalar::float_(op), array::float_(op),\n+      scalar::double_(op),   array::double_(op)};\n+\n+  for (auto ty : types) {\n+    int num_matches = 0;\n+    for (auto expr : exprs) {\n+      const auto& v_expr = static_cast<const ValueExpr&>(*expr);\n+      const bool ty_matches = v_expr.type()->id() == ty->id();\n+      ASSERT_EQ(ty_matches, ty->IsInstance(v_expr))\n+          << \"Expr: \" << expr->kind() << \" Type: \" << ty->ToString();\n+      num_matches += ty_matches;\n+    }\n+    // No more than 2 matches per type\n \n Review comment:\n   can you give a little bit more detail here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:14.663+0000",
                    "updated": "2019-03-06T05:08:14.663+0000",
                    "started": "2019-03-06T05:08:14.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208390",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262791577\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression.h\n ##########\n @@ -0,0 +1,261 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n+\n+namespace compute {\n+\n+class LogicalType;\n+class ExprVisitor;\n+class Operation;\n+\n+/// \\brief Base class for all analytic expressions. Expressions may represent\n+/// data values (scalars, arrays, tables)\n+class ARROW_EXPORT Expr {\n+ public:\n+  /// \\brief Instantiate expression from an abstract operation\n+  /// \\param[in] op the operation that generates the expression\n+  explicit Expr(std::shared_ptr<const Operation> op);\n+\n+  virtual ~Expr() = default;\n+\n+  /// \\brief A unique string identifier for the kind of expression\n+  virtual std::string kind() const = 0;\n+\n+  /// \\brief Accept expression visitor\n+  /// TODO(wesm)\n+  // virtual Status Accept(ExprVisitor* visitor) const = 0;\n+\n+  /// \\brief\n+  std::shared_ptr<const Operation> op() const { return op_; }\n \n Review comment:\n   is this the pattern we generally use or is it const& return type?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:14.668+0000",
                    "updated": "2019-03-06T05:08:14.668+0000",
                    "started": "2019-03-06T05:08:14.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208391",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262791390\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression.h\n ##########\n @@ -0,0 +1,261 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n \n Review comment:\n   I know we use forward declarations a lot, but this is against the google style guide: https://google.github.io/styleguide/cppguide.html#Forward_Declarations we should probably update ours if we want to continue with the pattern.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:14.698+0000",
                    "updated": "2019-03-06T05:08:14.698+0000",
                    "started": "2019-03-06T05:08:14.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208392",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262790718\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression-test.cc\n ##########\n @@ -0,0 +1,154 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+\n+#include \"arrow/compute/expression.h\"\n+#include \"arrow/compute/logical_type.h\"\n+#include \"arrow/compute/operation.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// A placeholder operator implementation to use for testing various Expr\n+// behavior\n+class DummyOp : public Operation {\n+ public:\n+  Status ToExpr(std::shared_ptr<Expr>* out) const override {\n+    return Status::NotImplemented(\"NYI\");\n+  }\n+};\n+\n+TEST(TestLogicalType, NonNestedToString) {\n+  std::vector<std::pair<std::shared_ptr<LogicalType>, std::string>> cases = {\n \n Review comment:\n   maybe name type_to_name or something similar to make it clear what is being mapped?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:14.735+0000",
                    "updated": "2019-03-06T05:08:14.735+0000",
                    "started": "2019-03-06T05:08:14.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208393",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262791879\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression.h\n ##########\n @@ -0,0 +1,261 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n+\n+namespace compute {\n+\n+class LogicalType;\n+class ExprVisitor;\n+class Operation;\n+\n+/// \\brief Base class for all analytic expressions. Expressions may represent\n+/// data values (scalars, arrays, tables)\n+class ARROW_EXPORT Expr {\n+ public:\n+  /// \\brief Instantiate expression from an abstract operation\n+  /// \\param[in] op the operation that generates the expression\n+  explicit Expr(std::shared_ptr<const Operation> op);\n+\n+  virtual ~Expr() = default;\n+\n+  /// \\brief A unique string identifier for the kind of expression\n+  virtual std::string kind() const = 0;\n+\n+  /// \\brief Accept expression visitor\n+  /// TODO(wesm)\n+  // virtual Status Accept(ExprVisitor* visitor) const = 0;\n+\n+  /// \\brief\n+  std::shared_ptr<const Operation> op() const { return op_; }\n+\n+ protected:\n+  std::shared_ptr<const Operation> op_;\n+};\n+\n+/// \\brief Base class for a data-generated expression with a fixed and known\n+/// type. This includes arrays and scalars\n+class ARROW_EXPORT ValueExpr : public Expr {\n+ public:\n+  /// The value cardinality: one or many. These correspond to the arrow::Scalar\n+  /// and arrow::Array types\n+  enum Rank { SCALAR, ARRAY };\n+  /// \\brief The name of the expression, if any. The default is unnamed\n+  // virtual const ExprName& name() const;\n+\n+  std::shared_ptr<LogicalType> type() const;\n+\n+  /// \\brief The value cardinality (scalar or array) of the expression\n+  Rank rank() const { return rank_; }\n+\n+ protected:\n+  ValueExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type,\n+            Rank rank);\n+\n+  /// \\brief The semantic data type of the expression\n+  std::shared_ptr<LogicalType> type_;\n+\n+  Rank rank_;\n+};\n+\n+class ARROW_EXPORT ArrayExpr : public ValueExpr {\n+ protected:\n+  ArrayExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  std::string kind() const override;\n+};\n+\n+class ARROW_EXPORT ScalarExpr : public ValueExpr {\n+ protected:\n+  ScalarExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  std::string kind() const override;\n+};\n+\n+namespace value {\n+\n+class ValueClass {};\n+class Null : public ValueClass {};\n+class Bool : public ValueClass {};\n+class Number : public ValueClass {};\n+class Integer : public Number {};\n+class SignedInteger : public Integer {};\n+class Int8 : public SignedInteger {};\n+class Int16 : public SignedInteger {};\n+class Int32 : public SignedInteger {};\n+class Int64 : public SignedInteger {};\n+class UnsignedInteger : public Integer {};\n+class UInt8 : public UnsignedInteger {};\n+class UInt16 : public UnsignedInteger {};\n+class UInt32 : public UnsignedInteger {};\n+class UInt64 : public UnsignedInteger {};\n+class Floating : public Number {};\n+class HalfFloat : public Floating {};\n+class Float : public Floating {};\n+class Double : public Floating {};\n+class Binary : public ValueClass {};\n+class Utf8 : public Binary {};\n+class List : public ValueClass {};\n+class Struct : public ValueClass {};\n+\n+}  // namespace value\n+\n+#define SIMPLE_EXPR_FACTORY(NAME) \\\n \n Review comment:\n   macros are strongly discouraged in google c++ style guide (especially in headers): https://google.github.io/styleguide/cppguide.html#Preprocessor_Macros\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:14.845+0000",
                    "updated": "2019-03-06T05:08:14.845+0000",
                    "started": "2019-03-06T05:08:14.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208394",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262790486\n \n \n\n ##########\n File path: cpp/build-support/run_cpplint.py\n ##########\n @@ -28,6 +28,7 @@\n \n _filters = '''\n -whitespace/comments\n+-readability/casting\n \n Review comment:\n   can you add this comment into the file, please?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:14.848+0000",
                    "updated": "2019-03-06T05:08:14.848+0000",
                    "started": "2019-03-06T05:08:14.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208395",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262792376\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression.h\n ##########\n @@ -0,0 +1,261 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n+\n+namespace compute {\n+\n+class LogicalType;\n+class ExprVisitor;\n+class Operation;\n+\n+/// \\brief Base class for all analytic expressions. Expressions may represent\n+/// data values (scalars, arrays, tables)\n+class ARROW_EXPORT Expr {\n+ public:\n+  /// \\brief Instantiate expression from an abstract operation\n+  /// \\param[in] op the operation that generates the expression\n+  explicit Expr(std::shared_ptr<const Operation> op);\n+\n+  virtual ~Expr() = default;\n+\n+  /// \\brief A unique string identifier for the kind of expression\n+  virtual std::string kind() const = 0;\n+\n+  /// \\brief Accept expression visitor\n+  /// TODO(wesm)\n+  // virtual Status Accept(ExprVisitor* visitor) const = 0;\n+\n+  /// \\brief\n+  std::shared_ptr<const Operation> op() const { return op_; }\n+\n+ protected:\n+  std::shared_ptr<const Operation> op_;\n+};\n+\n+/// \\brief Base class for a data-generated expression with a fixed and known\n+/// type. This includes arrays and scalars\n+class ARROW_EXPORT ValueExpr : public Expr {\n+ public:\n+  /// The value cardinality: one or many. These correspond to the arrow::Scalar\n+  /// and arrow::Array types\n+  enum Rank { SCALAR, ARRAY };\n+  /// \\brief The name of the expression, if any. The default is unnamed\n+  // virtual const ExprName& name() const;\n+\n+  std::shared_ptr<LogicalType> type() const;\n+\n+  /// \\brief The value cardinality (scalar or array) of the expression\n+  Rank rank() const { return rank_; }\n+\n+ protected:\n+  ValueExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type,\n+            Rank rank);\n+\n+  /// \\brief The semantic data type of the expression\n+  std::shared_ptr<LogicalType> type_;\n+\n+  Rank rank_;\n+};\n+\n+class ARROW_EXPORT ArrayExpr : public ValueExpr {\n+ protected:\n+  ArrayExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  std::string kind() const override;\n+};\n+\n+class ARROW_EXPORT ScalarExpr : public ValueExpr {\n+ protected:\n+  ScalarExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  std::string kind() const override;\n+};\n+\n+namespace value {\n+\n+class ValueClass {};\n+class Null : public ValueClass {};\n+class Bool : public ValueClass {};\n+class Number : public ValueClass {};\n+class Integer : public Number {};\n+class SignedInteger : public Integer {};\n+class Int8 : public SignedInteger {};\n+class Int16 : public SignedInteger {};\n+class Int32 : public SignedInteger {};\n+class Int64 : public SignedInteger {};\n+class UnsignedInteger : public Integer {};\n+class UInt8 : public UnsignedInteger {};\n+class UInt16 : public UnsignedInteger {};\n+class UInt32 : public UnsignedInteger {};\n+class UInt64 : public UnsignedInteger {};\n+class Floating : public Number {};\n+class HalfFloat : public Floating {};\n+class Float : public Floating {};\n+class Double : public Floating {};\n+class Binary : public ValueClass {};\n+class Utf8 : public Binary {};\n+class List : public ValueClass {};\n+class Struct : public ValueClass {};\n+\n+}  // namespace value\n+\n+#define SIMPLE_EXPR_FACTORY(NAME) \\\n+  ARROW_EXPORT std::shared_ptr<Expr> NAME(std::shared_ptr<const Operation> op);\n+\n+namespace scalar {\n+\n+#define DECLARE_SCALAR_EXPR(TYPE)                                   \\\n+  class ARROW_EXPORT TYPE : public ScalarExpr, public value::TYPE { \\\n+   public:                                                          \\\n+    explicit TYPE(std::shared_ptr<const Operation> op);             \\\n+    using ScalarExpr::kind;                                         \\\n+  };\n+\n+DECLARE_SCALAR_EXPR(Null)\n+DECLARE_SCALAR_EXPR(Bool)\n+DECLARE_SCALAR_EXPR(Int8)\n+DECLARE_SCALAR_EXPR(Int16)\n+DECLARE_SCALAR_EXPR(Int32)\n+DECLARE_SCALAR_EXPR(Int64)\n+DECLARE_SCALAR_EXPR(UInt8)\n+DECLARE_SCALAR_EXPR(UInt16)\n+DECLARE_SCALAR_EXPR(UInt32)\n+DECLARE_SCALAR_EXPR(UInt64)\n+DECLARE_SCALAR_EXPR(HalfFloat)\n+DECLARE_SCALAR_EXPR(Float)\n+DECLARE_SCALAR_EXPR(Double)\n+DECLARE_SCALAR_EXPR(Binary)\n+DECLARE_SCALAR_EXPR(Utf8)\n+\n+SIMPLE_EXPR_FACTORY(null);\n+SIMPLE_EXPR_FACTORY(boolean);\n+SIMPLE_EXPR_FACTORY(int8);\n+SIMPLE_EXPR_FACTORY(int16);\n+SIMPLE_EXPR_FACTORY(int32);\n+SIMPLE_EXPR_FACTORY(int64);\n+SIMPLE_EXPR_FACTORY(uint8);\n+SIMPLE_EXPR_FACTORY(uint16);\n+SIMPLE_EXPR_FACTORY(uint32);\n+SIMPLE_EXPR_FACTORY(uint64);\n+SIMPLE_EXPR_FACTORY(half_float);\n+SIMPLE_EXPR_FACTORY(float_);\n+SIMPLE_EXPR_FACTORY(double_);\n+SIMPLE_EXPR_FACTORY(binary);\n+SIMPLE_EXPR_FACTORY(utf8);\n+\n+class ARROW_EXPORT List : public ScalarExpr, public value::List {\n+ public:\n+  List(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  using ScalarExpr::kind;\n+};\n+\n+class ARROW_EXPORT Struct : public ScalarExpr, public value::Struct {\n+ public:\n+  Struct(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  using ScalarExpr::kind;\n+};\n+\n+}  // namespace scalar\n+\n+namespace array {\n+\n+#define DECLARE_ARRAY_EXPR(TYPE)                                   \\\n+  class ARROW_EXPORT TYPE : public ArrayExpr, public value::TYPE { \\\n+   public:                                                         \\\n+    explicit TYPE(std::shared_ptr<const Operation> op);            \\\n+    using ArrayExpr::kind;                                         \\\n+  };\n+\n+DECLARE_ARRAY_EXPR(Null)\n+DECLARE_ARRAY_EXPR(Bool)\n+DECLARE_ARRAY_EXPR(Int8)\n+DECLARE_ARRAY_EXPR(Int16)\n+DECLARE_ARRAY_EXPR(Int32)\n+DECLARE_ARRAY_EXPR(Int64)\n+DECLARE_ARRAY_EXPR(UInt8)\n+DECLARE_ARRAY_EXPR(UInt16)\n+DECLARE_ARRAY_EXPR(UInt32)\n+DECLARE_ARRAY_EXPR(UInt64)\n+DECLARE_ARRAY_EXPR(HalfFloat)\n+DECLARE_ARRAY_EXPR(Float)\n+DECLARE_ARRAY_EXPR(Double)\n+DECLARE_ARRAY_EXPR(Binary)\n+DECLARE_ARRAY_EXPR(Utf8)\n+\n+SIMPLE_EXPR_FACTORY(null);\n+SIMPLE_EXPR_FACTORY(boolean);\n+SIMPLE_EXPR_FACTORY(int8);\n+SIMPLE_EXPR_FACTORY(int16);\n+SIMPLE_EXPR_FACTORY(int32);\n+SIMPLE_EXPR_FACTORY(int64);\n+SIMPLE_EXPR_FACTORY(uint8);\n+SIMPLE_EXPR_FACTORY(uint16);\n+SIMPLE_EXPR_FACTORY(uint32);\n+SIMPLE_EXPR_FACTORY(uint64);\n+SIMPLE_EXPR_FACTORY(half_float);\n+SIMPLE_EXPR_FACTORY(float_);\n+SIMPLE_EXPR_FACTORY(double_);\n+SIMPLE_EXPR_FACTORY(binary);\n+SIMPLE_EXPR_FACTORY(utf8);\n+\n+class ARROW_EXPORT List : public ArrayExpr, public value::List {\n+ public:\n+  List(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  using ArrayExpr::kind;\n+};\n+\n+class ARROW_EXPORT Struct : public ArrayExpr, public value::Struct {\n+ public:\n+  Struct(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  using ArrayExpr::kind;\n+};\n+\n+}  // namespace array\n+\n+#undef SIMPLE_EXPR_FACTORY\n+\n+template <typename T, typename ObjectType>\n+inline bool InheritsFrom(const ObjectType* obj) {\n+  return dynamic_cast<const T*>(obj) != NULLPTR;\n+}\n+\n+template <typename T, typename ObjectType>\n+inline bool InheritsFrom(const ObjectType& obj) {\n+  return dynamic_cast<const T*>(&obj) != NULLPTR;\n+}\n+\n+/// \\brief Construct a ScalarExpr containing an Operation given a logical type\n+ARROW_EXPORT\n+Status GetScalarExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> ty,\n \n Review comment:\n   Aside: we should look into creating a StatusOr class (https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/stubs/statusor.h)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:15.077+0000",
                    "updated": "2019-03-06T05:08:15.077+0000",
                    "started": "2019-03-06T05:08:15.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208397",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262793112\n \n \n\n ##########\n File path: cpp/src/arrow/compute/operation.h\n ##########\n @@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n+\n+namespace compute {\n+\n+class Expr;\n+\n+/// \\brief An operation is a node in a computation graph, taking input data\n+/// expression dependencies and emitting an output expression\n+class ARROW_EXPORT Operation : public std::enable_shared_from_this<Operation> {\n+ public:\n+  virtual ~Operation() = default;\n+\n+  /// \\brief Check input expression arguments and output the type of resulting\n+  /// expression that this operation produces. If the input arguments are\n+  /// invalid, error Status is returned\n+  /// \\param[out] out the returned well-typed expression\n+  /// \\return success or failure\n+  virtual Status ToExpr(std::shared_ptr<Expr>* out) const = 0;\n \n Review comment:\n   I know we use shared_ptr a lot in the code base, but I'm curious if this signature is just habit or you've though through the ownership semantics (i.e. can it be unique_ptr?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T05:08:15.103+0000",
                    "updated": "2019-03-06T05:08:15.103+0000",
                    "started": "2019-03-06T05:08:15.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208398",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262906978\n \n \n\n ##########\n File path: cpp/src/arrow/compute/expression.h\n ##########\n @@ -0,0 +1,261 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n+\n+namespace compute {\n+\n+class LogicalType;\n+class ExprVisitor;\n+class Operation;\n+\n+/// \\brief Base class for all analytic expressions. Expressions may represent\n+/// data values (scalars, arrays, tables)\n+class ARROW_EXPORT Expr {\n+ public:\n+  /// \\brief Instantiate expression from an abstract operation\n+  /// \\param[in] op the operation that generates the expression\n+  explicit Expr(std::shared_ptr<const Operation> op);\n+\n+  virtual ~Expr() = default;\n+\n+  /// \\brief A unique string identifier for the kind of expression\n+  virtual std::string kind() const = 0;\n+\n+  /// \\brief Accept expression visitor\n+  /// TODO(wesm)\n+  // virtual Status Accept(ExprVisitor* visitor) const = 0;\n+\n+  /// \\brief\n+  std::shared_ptr<const Operation> op() const { return op_; }\n+\n+ protected:\n+  std::shared_ptr<const Operation> op_;\n+};\n+\n+/// \\brief Base class for a data-generated expression with a fixed and known\n+/// type. This includes arrays and scalars\n+class ARROW_EXPORT ValueExpr : public Expr {\n+ public:\n+  /// The value cardinality: one or many. These correspond to the arrow::Scalar\n+  /// and arrow::Array types\n+  enum Rank { SCALAR, ARRAY };\n+  /// \\brief The name of the expression, if any. The default is unnamed\n+  // virtual const ExprName& name() const;\n+\n+  std::shared_ptr<LogicalType> type() const;\n+\n+  /// \\brief The value cardinality (scalar or array) of the expression\n+  Rank rank() const { return rank_; }\n+\n+ protected:\n+  ValueExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type,\n+            Rank rank);\n+\n+  /// \\brief The semantic data type of the expression\n+  std::shared_ptr<LogicalType> type_;\n+\n+  Rank rank_;\n+};\n+\n+class ARROW_EXPORT ArrayExpr : public ValueExpr {\n+ protected:\n+  ArrayExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  std::string kind() const override;\n+};\n+\n+class ARROW_EXPORT ScalarExpr : public ValueExpr {\n+ protected:\n+  ScalarExpr(std::shared_ptr<const Operation> op, std::shared_ptr<LogicalType> type);\n+  std::string kind() const override;\n+};\n+\n+namespace value {\n+\n+class ValueClass {};\n+class Null : public ValueClass {};\n+class Bool : public ValueClass {};\n+class Number : public ValueClass {};\n+class Integer : public Number {};\n+class SignedInteger : public Integer {};\n+class Int8 : public SignedInteger {};\n+class Int16 : public SignedInteger {};\n+class Int32 : public SignedInteger {};\n+class Int64 : public SignedInteger {};\n+class UnsignedInteger : public Integer {};\n+class UInt8 : public UnsignedInteger {};\n+class UInt16 : public UnsignedInteger {};\n+class UInt32 : public UnsignedInteger {};\n+class UInt64 : public UnsignedInteger {};\n+class Floating : public Number {};\n+class HalfFloat : public Floating {};\n+class Float : public Floating {};\n+class Double : public Floating {};\n \n Review comment:\n   `Float16` / `Float32` / `Float64`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T11:47:52.947+0000",
                    "updated": "2019-03-06T11:47:52.947+0000",
                    "started": "2019-03-06T11:47:52.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208750",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#issuecomment-470100804\n \n \n   I'm nut sure that I can see the distinctive the advantage of the `LogicalType` abstraction over the already present type system. Having a decoupled type system would introduce another level of indirection and confusion.\r\n   \r\n   We already have [FloatingPoint and Number](https://github.com/apache/arrow/blob/master/cpp/src/arrow/type.h#L227) classes, which could be used for this purpose (similarly We could have `SignedInteger` and `UnsignedInteger`). The current type system in ibis also works without a `LogicalType` abstraction.\r\n   \r\n   I'm not strongly against it, but neither am I convinced.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T13:09:15.133+0000",
                    "updated": "2019-03-06T13:09:15.133+0000",
                    "started": "2019-03-06T13:09:15.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208784",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262955770\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -143,14 +143,19 @@ if(ARROW_COMPUTE)\n   set(ARROW_SRCS\n       ${ARROW_SRCS}\n       compute/context.cc\n+      compute/expression.cc\n \n Review comment:\n   Are You that this should be organized under compute? I think We should separate it.\r\n   \r\n   Compute does actual computation eagerly, whereas `expression` and `operations` modules are defining a logical plan, which ideally should be optimized before being passed to the execution layer. The execution layer could be `arrow::compute` or `gandiva`or even another pluggable one.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T14:09:37.862+0000",
                    "updated": "2019-03-06T14:09:37.862+0000",
                    "started": "2019-03-06T14:09:37.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208818",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#issuecomment-470100804\n \n \n   I'm not sure that I can see the distinctive the advantage of the `LogicalType` abstraction over the already present type system. Having a decoupled type system would introduce another level of indirection and confusion.\r\n   \r\n   We already have [FloatingPoint and Number](https://github.com/apache/arrow/blob/master/cpp/src/arrow/type.h#L227) classes, which could be used for this purpose (similarly We could have `SignedInteger` and `UnsignedInteger`). The current type system in ibis also works without a `LogicalType` abstraction.\r\n   \r\n   I'm not strongly against it, but neither am I convinced.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T14:30:34.824+0000",
                    "updated": "2019-03-06T14:30:34.824+0000",
                    "started": "2019-03-06T14:30:34.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208831",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262955770\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -143,14 +143,19 @@ if(ARROW_COMPUTE)\n   set(ARROW_SRCS\n       ${ARROW_SRCS}\n       compute/context.cc\n+      compute/expression.cc\n \n Review comment:\n   Are You sure that this should be organized under compute? I think We should separate it.\r\n   \r\n   Compute does actual computation eagerly, whereas `expression` and `operations` modules are defining a logical plan, which ideally should be optimized before being passed to the execution layer. The execution layer could be `arrow::compute` or `gandiva`or even another pluggable one.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T14:30:49.824+0000",
                    "updated": "2019-03-06T14:30:49.824+0000",
                    "started": "2019-03-06T14:30:49.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208832",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262970698\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -143,14 +143,19 @@ if(ARROW_COMPUTE)\n   set(ARROW_SRCS\n       ${ARROW_SRCS}\n       compute/context.cc\n+      compute/expression.cc\n \n Review comment:\n   My intent is to create `arrow/compute/execution` directory\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T14:44:24.015+0000",
                    "updated": "2019-03-06T14:44:24.015+0000",
                    "started": "2019-03-06T14:44:24.015+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208858",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#issuecomment-470134615\n \n \n   > I'm not sure that I can see the distinctive the advantage of the LogicalType abstraction over the already present type system. Having a decoupled type system would introduce another level of indirection and confusion.\r\n   \r\n   I am pretty confident the `arrow::DataType` classes will not work for this, because they are _concrete_ types describing actual data. These are _abstract_ types describing data that is in many cases as yet unobserved. Some things that we can address that are not handled by concrete types:\r\n   \r\n   * Decimal type with unknown scale and precision\r\n   * Dictionary type with unknown codes\r\n   * A type that may or may not be dictionary encoded (i.e. `binary` and `dictionary<binary>` should be considered semantically the same by expressions)\r\n   \r\n   If I end up being wrong and there can be demonstrated to be no benefit, then I will take responsibility for the refactoring. There is not enough work here to arrive at any kind of judgment, yet, and I would like to wait until we have developed a more full-featured system\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T14:48:56.308+0000",
                    "updated": "2019-03-06T14:48:56.308+0000",
                    "started": "2019-03-06T14:48:56.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208859",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262974880\n \n \n\n ##########\n File path: cpp/src/arrow/compute/operation.h\n ##########\n @@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n+\n+namespace compute {\n+\n+class Expr;\n+\n+/// \\brief An operation is a node in a computation graph, taking input data\n+/// expression dependencies and emitting an output expression\n+class ARROW_EXPORT Operation : public std::enable_shared_from_this<Operation> {\n+ public:\n+  virtual ~Operation() = default;\n+\n+  /// \\brief Check input expression arguments and output the type of resulting\n+  /// expression that this operation produces. If the input arguments are\n+  /// invalid, error Status is returned\n+  /// \\param[out] out the returned well-typed expression\n+  /// \\return success or failure\n+  virtual Status ToExpr(std::shared_ptr<Expr>* out) const = 0;\n \n Review comment:\n   An Expr is an immutable, reusable object, so it can be used to create multiple subsequent operations, or even used for multiple arguments to an operation.\r\n   \r\n   Consider the following pseudocode\r\n   \r\n   ```\r\n   b = Cast(a, \"double\")\r\n   c = b + b\r\n   ```\r\n   \r\n   Then we have\r\n   \r\n   ```\r\n   std::shared_ptr<Operation> b_op, c_op;\r\n   std::shared_ptr<Expr> b, c;\r\n   b_op = std::make_shared<ops::Cast>(a, type::float64());\r\n   RETURN_NOT_OK(b_op.ToExpr(&b));\r\n   c_op = std::make_shared<ops::Add>(b, b);\r\n   RETURN_NOT_OK(c_op.ToExpr(&c));\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T14:53:17.320+0000",
                    "updated": "2019-03-06T14:53:17.320+0000",
                    "started": "2019-03-06T14:53:17.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208867",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262974880\n \n \n\n ##########\n File path: cpp/src/arrow/compute/operation.h\n ##########\n @@ -0,0 +1,53 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Status;\n+\n+namespace compute {\n+\n+class Expr;\n+\n+/// \\brief An operation is a node in a computation graph, taking input data\n+/// expression dependencies and emitting an output expression\n+class ARROW_EXPORT Operation : public std::enable_shared_from_this<Operation> {\n+ public:\n+  virtual ~Operation() = default;\n+\n+  /// \\brief Check input expression arguments and output the type of resulting\n+  /// expression that this operation produces. If the input arguments are\n+  /// invalid, error Status is returned\n+  /// \\param[out] out the returned well-typed expression\n+  /// \\return success or failure\n+  virtual Status ToExpr(std::shared_ptr<Expr>* out) const = 0;\n \n Review comment:\n   An Expr is an immutable, reusable object, so it can be used to create multiple subsequent operations, or even used for multiple arguments to an operation.\r\n   \r\n   Consider the following pseudocode\r\n   \r\n   ```\r\n   b = Cast(a, \"double\")\r\n   c = b + b\r\n   ```\r\n   \r\n   Then we have\r\n   \r\n   ```c++\r\n   std::shared_ptr<Operation> b_op, c_op;\r\n   std::shared_ptr<Expr> b, c;\r\n   b_op = std::make_shared<ops::Cast>(a, type::float64());\r\n   RETURN_NOT_OK(b_op.ToExpr(&b));\r\n   c_op = std::make_shared<ops::Add>(b, b);\r\n   RETURN_NOT_OK(c_op.ToExpr(&c));\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T14:53:31.356+0000",
                    "updated": "2019-03-06T14:53:31.356+0000",
                    "started": "2019-03-06T14:53:31.355+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208868",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#discussion_r262970698\n \n \n\n ##########\n File path: cpp/src/arrow/CMakeLists.txt\n ##########\n @@ -143,14 +143,19 @@ if(ARROW_COMPUTE)\n   set(ARROW_SRCS\n       ${ARROW_SRCS}\n       compute/context.cc\n+      compute/expression.cc\n \n Review comment:\n   My intent is to create `arrow/compute/execution` directory (or \"arrow/compute/exec\" maybe more concise)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T15:25:05.430+0000",
                    "updated": "2019-03-06T15:25:05.430+0000",
                    "started": "2019-03-06T15:25:05.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208890",
                    "issueId": "13219791"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/worklog/208904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #3820: ARROW-4782: [C++] Prototype array and scalar expression types to help with building an deferred compute graph\nURL: https://github.com/apache/arrow/pull/3820#issuecomment-470160162\n \n \n   > These are abstract types describing data that is in many cases as yet unobserved. Some things that we can address that are not handled by concrete types:\r\n   \r\n   IMO The DataType class hierarchy should represent/encode the semantic/logical relations between the types. \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T15:51:28.293+0000",
                    "updated": "2019-03-06T15:51:28.293+0000",
                    "started": "2019-03-06T15:51:28.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208904",
                    "issueId": "13219791"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 37200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@44f42879[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@625ac0f0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@526da891[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6684af6c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64630cce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2c5b612c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13cd6d16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@50714fcc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c882c70[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5b2d7acc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23701962[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@79253def[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 37200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Mar 08 18:38:26 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-08T18:38:26.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4782/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-03-06T02:48:26.000+0000",
        "updated": "2019-03-08T18:38:43.000+0000",
        "timeoriginalestimate": null,
        "description": "I am beginning to develop a C++ API for describing analytical expressions on scalars, arrays, and tables in the general style of Ibis (https://docs.ibis-project.org/sql.html) which has been used to successfully model SQL relational algebra as well as a broader variety of analytical operations. This is a large project so I'm starting small",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 37200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Prototype scalar and array expression types for developing deferred operator algebra",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13219791/comment/16788168",
                    "id": "16788168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3820\n[https://github.com/apache/arrow/pull/3820]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-03-08T18:38:26.593+0000",
                    "updated": "2019-03-08T18:38:26.593+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z00dwo:",
        "customfield_12314139": null
    }
}