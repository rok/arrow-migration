{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13291180",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180",
    "key": "ARROW-8079",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8079/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/413536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T21:47:04.453+0000",
                    "updated": "2020-03-31T21:47:04.453+0000",
                    "started": "2020-03-31T21:47:04.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413536",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/413550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#issuecomment-606900447\n \n \n   https://issues.apache.org/jira/browse/ARROW-8079\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T22:02:07.858+0000",
                    "updated": "2020-03-31T22:02:07.858+0000",
                    "started": "2020-03-31T22:02:07.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413550",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/413551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401241489\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n \n Review comment:\n   This is curious, is this needed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T22:05:33.931+0000",
                    "updated": "2020-03-31T22:05:33.931+0000",
                    "started": "2020-03-31T22:05:33.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413551",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/413552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401241177\n \n \n\n ##########\n File path: cpp/src/arrow/util/key_value_metadata.h\n ##########\n @@ -38,9 +40,12 @@ class ARROW_EXPORT KeyValueMetadata {\n   virtual ~KeyValueMetadata() = default;\n \n   void ToUnorderedMap(std::unordered_map<std::string, std::string>* out) const;\n-\n   void Append(const std::string& key, const std::string& value);\n \n+  Result<std::string> Get(const std::string& key) const;\n+  Status Del(const std::string& key);\n \n Review comment:\n   Use `Delete`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T22:05:34.081+0000",
                    "updated": "2020-03-31T22:05:34.081+0000",
                    "started": "2020-03-31T22:05:34.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413552",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/413553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401241887\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n+\n+\n+cdef class KeyValueMetadata(Metadata):\n+    cdef:\n+        shared_ptr[CKeyValueMetadata] wrapped\n \n Review comment:\n   Many types return `const CKeyValueMetadata` though\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T22:05:34.194+0000",
                    "updated": "2020-03-31T22:05:34.194+0000",
                    "started": "2020-03-31T22:05:34.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413553",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/413594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401260819\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n \n Review comment:\n   First base class must be an extension class - according to Cython :)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T22:51:22.855+0000",
                    "updated": "2020-03-31T22:51:22.855+0000",
                    "started": "2020-03-31T22:51:22.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413594",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/413595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401262811\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n+\n+\n+cdef class KeyValueMetadata(Metadata):\n+    cdef:\n+        shared_ptr[CKeyValueMetadata] wrapped\n \n Review comment:\n   I was unsure about whether we should prefer a mutable interface and copy the underlying kvm objects or keep everything immutable. Converting it to immutable.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-31T22:57:00.685+0000",
                    "updated": "2020-03-31T22:57:00.685+0000",
                    "started": "2020-03-31T22:57:00.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "413595",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401631169\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n \n Review comment:\n   I ended up removing collections.abc.Mapping because KeyValueMetadata is not a mapping, but implemented the mapping-like methods manually.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T13:51:15.571+0000",
                    "updated": "2020-04-01T13:51:15.571+0000",
                    "started": "2020-04-01T13:51:15.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414047",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401633526\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n+\n+\n+cdef class KeyValueMetadata(Metadata):\n+    cdef:\n+        shared_ptr[CKeyValueMetadata] wrapped\n \n Review comment:\n   Converted the python side KeyValueMetadata into an immutable object. \r\n   Shouldn't we convert the C++ side KeyValueMetadata into an immutable construct as well?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T13:54:24.488+0000",
                    "updated": "2020-04-01T13:54:24.488+0000",
                    "started": "2020-04-01T13:54:24.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414050",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401688315\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n+\n+\n+cdef class KeyValueMetadata(Metadata):\n+    cdef:\n+        shared_ptr[CKeyValueMetadata] wrapped\n \n Review comment:\n   We handle immutability using const in C++\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T15:06:42.267+0000",
                    "updated": "2020-04-01T15:06:42.267+0000",
                    "started": "2020-04-01T15:06:42.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414078",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401701360\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n+\n+\n+cdef class KeyValueMetadata(Metadata):\n+    cdef:\n+        shared_ptr[CKeyValueMetadata] wrapped\n \n Review comment:\n   @wesm the codebase rarely uses `shared_ptr<const T>`, but still most of the types provide immutable/copy-on-write interfaces.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T15:24:03.053+0000",
                    "updated": "2020-04-01T15:24:03.053+0000",
                    "started": "2020-04-01T15:24:03.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414094",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401734556\n \n \n\n ##########\n File path: python/pyarrow/public-api.pxi\n ##########\n @@ -119,28 +119,22 @@ cdef api object pyarrow_wrap_data_type(\n \n cdef object pyarrow_wrap_metadata(\n         const shared_ptr[const CKeyValueMetadata]& meta):\n-    cdef const CKeyValueMetadata* cmeta = meta.get()\n-\n-    if cmeta == nullptr:\n+    if meta.get() == nullptr:\n         return None\n-\n-    result = ordered_dict()\n-    for i in range(cmeta.size()):\n-        result[cmeta.key(i)] = cmeta.value(i)\n-\n-    return result\n+    else:\n+        return KeyValueMetadata.wrap(meta)\n \n \n cdef shared_ptr[CKeyValueMetadata] pyarrow_unwrap_metadata(object meta) \\\n         except *:\n     cdef vector[c_string] keys, values\n \n-    if isinstance(meta, dict):\n-        keys = map(tobytes, meta.keys())\n-        values = map(tobytes, meta.values())\n-        return make_shared[CKeyValueMetadata](keys, values)\n-\n-    return shared_ptr[CKeyValueMetadata]()\n+    if isinstance(meta, KeyValueMetadata):\n+        return (<KeyValueMetadata>meta).unwrap().get().Copy()\n+    elif isinstance(meta, dict):\n+        return KeyValueMetadata(meta).unwrap().get().Copy()\n \n Review comment:\n   No need to `Copy`, AFAIK, since this is a new object.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:09:16.264+0000",
                    "updated": "2020-04-01T16:09:16.264+0000",
                    "started": "2020-04-01T16:09:16.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414113",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401735577\n \n \n\n ##########\n File path: python/pyarrow/tests/test_types.py\n ##########\n @@ -565,6 +565,67 @@ def test_type_equality_operators():\n                 assert ty != other\n \n \n+def test_key_value_metadata():\n+    m = pa.KeyValueMetadata({'a': 'A', 'b': 'B'})\n+    assert len(m) == 2\n+    assert m['a'] == b'A'\n+    assert m[b'a'] == b'A'\n+    assert m['b'] == b'B'\n+    assert 'a' in m\n+    assert b'a' in m\n+    assert 'c' not in m\n+\n+    m1 = pa.KeyValueMetadata({'a': 'A', 'b': 'B'})\n+    m2 = pa.KeyValueMetadata(a='A', b='B')\n+    m3 = pa.KeyValueMetadata([('a', 'A'), ('b', 'B')])\n+\n+    assert m1 != 2\n+    assert m1 == m2 == m3\n+    assert m1 == {'a': 'A', 'b': 'B'}\n+\n+    with pytest.raises(TypeError):\n+        pa.KeyValueMetadata({'a': 1})\n+    with pytest.raises(TypeError):\n+        pa.KeyValueMetadata({1: 'a'})\n+    with pytest.raises(TypeError):\n+        pa.KeyValueMetadata(a=1)\n+\n+    expected = [(b'a', b'A'), (b'b', b'B')]\n+    result = [(k, v) for k, v in m3.items()]\n+    assert result == expected\n+    assert list(m3.items()) == expected\n+    assert list(m3.keys()) == [b'a', b'b']\n+    assert list(m3.values()) == [b'A', b'B']\n+    assert len(m3) == 2\n+\n+    # test duplicate key support\n+    md = m1 = pa.KeyValueMetadata([\n+        ('a', 'alpha'),\n+        ('b', 'beta'),\n+        ('a', 'Alpha'),\n+        ('a', 'ALPHA'),\n+    ], b='BETA')\n+\n+    expected = [\n+        (b'a', b'alpha'),\n+        (b'b', b'beta'),\n+        (b'a', b'Alpha'),\n+        (b'a', b'ALPHA'),\n+        (b'b', b'BETA')\n+    ]\n+\n+    assert len(md) == 5\n+    assert list(md.items()) == expected\n+    assert list(md.keys()) == [k for k, _ in expected]\n+    assert list(md.values()) == [v for _, v in expected]\n+\n+    # first occurence\n+    assert md['a'] == b'alpha'\n+    assert md['b'] == b'beta'\n+    assert md.get_all('a') == [b'alpha', b'Alpha', b'ALPHA']\n+    assert md.get_all('b') == [b'beta', b'BETA']\n \n Review comment:\n   Also test `get_all` on a non-existent key?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:10:46.679+0000",
                    "updated": "2020-04-01T16:10:46.679+0000",
                    "started": "2020-04-01T16:10:46.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414115",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414116",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401735884\n \n \n\n ##########\n File path: python/pyarrow/types.pxi\n ##########\n @@ -808,6 +809,92 @@ def unregister_extension_type(type_name):\n     check_status(UnregisterPyExtensionType(c_type_name))\n \n \n+cdef class KeyValueMetadata:\n \n Review comment:\n   Why not inherit from `Mapping`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:11:14.064+0000",
                    "updated": "2020-04-01T16:11:14.064+0000",
                    "started": "2020-04-01T16:11:14.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414116",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414119",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401736732\n \n \n\n ##########\n File path: python/pyarrow/types.pxi\n ##########\n @@ -808,6 +809,92 @@ def unregister_extension_type(type_name):\n     check_status(UnregisterPyExtensionType(c_type_name))\n \n \n+cdef class KeyValueMetadata:\n+\n+    def __init__(self, *args, **kwargs):\n+        cdef:\n+            vector[c_string] keys, values\n+            shared_ptr[const CKeyValueMetadata] meta\n+\n+        items = []\n+        if args:\n+            if len(args) > 1:\n+                raise TypeError('expected at most 1 arguments, got {}'\n+                                .format(len(args)))\n+            other = args[0]\n+            items += other.items() if isinstance(other, Mapping) else other\n+\n+        items += kwargs.items()\n+\n+        for key, value in items:\n+            keys.push_back(tobytes(key))\n+            values.push_back(tobytes(value))\n+\n+        meta.reset(new CKeyValueMetadata(keys, values))\n+        self.init(meta)\n+\n+    cdef void init(self, const shared_ptr[const CKeyValueMetadata]& wrapped):\n+        self.wrapped = wrapped\n+        self.metadata = wrapped.get()\n+\n+    @staticmethod\n+    cdef wrap(const shared_ptr[const CKeyValueMetadata]& sp):\n+        cdef KeyValueMetadata self = KeyValueMetadata.__new__(KeyValueMetadata)\n+        self.init(sp)\n+        return self\n+\n+    cdef inline shared_ptr[const CKeyValueMetadata] unwrap(self) nogil:\n+        return self.wrapped\n+\n+    def equals(self, KeyValueMetadata other):\n+        return self.metadata.Equals(deref(other.wrapped))\n+\n+    def __str__(self):\n+        return frombytes(self.metadata.ToString())\n+\n+    def __eq__(self, other):\n+        try:\n+            return self.equals(other)\n+        except TypeError:\n+            pass\n+\n+        if isinstance(other, Mapping):\n+            try:\n+                other = KeyValueMetadata(other)\n+                return self.equals(other)\n+            except TypeError:\n+                pass\n+\n+        return NotImplemented\n+\n+    def __len__(self):\n+        return self.metadata.size()\n+\n+    def __contains__(self, key):\n+        return self.metadata.Contains(tobytes(key))\n+\n+    def __getitem__(self, key):\n+        return GetResultValue(self.metadata.Get(tobytes(key)))\n+\n+    def __iter__(self):\n+        for i in range(self.metadata.size()):\n+            yield self.metadata.key(i)\n+\n+    def keys(self):\n+        return list(self)\n \n Review comment:\n   This should return an iterator, not a list.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:12:33.524+0000",
                    "updated": "2020-04-01T16:12:33.524+0000",
                    "started": "2020-04-01T16:12:33.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414119",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414121",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401736882\n \n \n\n ##########\n File path: python/pyarrow/types.pxi\n ##########\n @@ -808,6 +809,92 @@ def unregister_extension_type(type_name):\n     check_status(UnregisterPyExtensionType(c_type_name))\n \n \n+cdef class KeyValueMetadata:\n+\n+    def __init__(self, *args, **kwargs):\n+        cdef:\n+            vector[c_string] keys, values\n+            shared_ptr[const CKeyValueMetadata] meta\n+\n+        items = []\n+        if args:\n+            if len(args) > 1:\n+                raise TypeError('expected at most 1 arguments, got {}'\n+                                .format(len(args)))\n+            other = args[0]\n+            items += other.items() if isinstance(other, Mapping) else other\n+\n+        items += kwargs.items()\n+\n+        for key, value in items:\n+            keys.push_back(tobytes(key))\n+            values.push_back(tobytes(value))\n+\n+        meta.reset(new CKeyValueMetadata(keys, values))\n+        self.init(meta)\n+\n+    cdef void init(self, const shared_ptr[const CKeyValueMetadata]& wrapped):\n+        self.wrapped = wrapped\n+        self.metadata = wrapped.get()\n+\n+    @staticmethod\n+    cdef wrap(const shared_ptr[const CKeyValueMetadata]& sp):\n+        cdef KeyValueMetadata self = KeyValueMetadata.__new__(KeyValueMetadata)\n+        self.init(sp)\n+        return self\n+\n+    cdef inline shared_ptr[const CKeyValueMetadata] unwrap(self) nogil:\n+        return self.wrapped\n+\n+    def equals(self, KeyValueMetadata other):\n+        return self.metadata.Equals(deref(other.wrapped))\n+\n+    def __str__(self):\n+        return frombytes(self.metadata.ToString())\n+\n+    def __eq__(self, other):\n+        try:\n+            return self.equals(other)\n+        except TypeError:\n+            pass\n+\n+        if isinstance(other, Mapping):\n+            try:\n+                other = KeyValueMetadata(other)\n+                return self.equals(other)\n+            except TypeError:\n+                pass\n+\n+        return NotImplemented\n+\n+    def __len__(self):\n+        return self.metadata.size()\n+\n+    def __contains__(self, key):\n+        return self.metadata.Contains(tobytes(key))\n+\n+    def __getitem__(self, key):\n+        return GetResultValue(self.metadata.Get(tobytes(key)))\n+\n+    def __iter__(self):\n+        for i in range(self.metadata.size()):\n+            yield self.metadata.key(i)\n+\n+    def keys(self):\n+        return list(self)\n+\n+    def values(self):\n+        return [self.metadata.value(i) for i in range(self.metadata.size())]\n \n Review comment:\n   Same here (return an iterator).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:12:47.034+0000",
                    "updated": "2020-04-01T16:12:47.034+0000",
                    "started": "2020-04-01T16:12:47.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414121",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401765827\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n+\n+\n+cdef class KeyValueMetadata(Metadata):\n+    cdef:\n+        shared_ptr[CKeyValueMetadata] wrapped\n \n Review comment:\n   I meant that we use const to control for mutability specifically with KeyValueMetadata\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:56:09.848+0000",
                    "updated": "2020-04-01T16:56:09.848+0000",
                    "started": "2020-04-01T16:56:09.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414162",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401765827\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n+\n+\n+cdef class KeyValueMetadata(Metadata):\n+    cdef:\n+        shared_ptr[CKeyValueMetadata] wrapped\n \n Review comment:\n   I meant that we use const to control for mutability specifically with KeyValueMetadata. You can propose to change that, but it's out of scope for this PR\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T16:56:32.941+0000",
                    "updated": "2020-04-01T16:56:32.941+0000",
                    "started": "2020-04-01T16:56:32.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414163",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414177",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#discussion_r401789138\n \n \n\n ##########\n File path: python/pyarrow/lib.pxd\n ##########\n @@ -142,6 +142,21 @@ cdef class PyExtensionType(ExtensionType):\n     pass\n \n \n+cdef class Metadata:\n+    pass\n \n Review comment:\n   Added it again for instance checks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-01T17:32:51.088+0000",
                    "updated": "2020-04-01T17:32:51.088+0000",
                    "started": "2020-04-01T17:32:51.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414177",
                    "issueId": "13291180"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/worklog/414823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #6793: ARROW-8079: [Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant\nURL: https://github.com/apache/arrow/pull/6793#issuecomment-607951637\n \n \n   +1, should merge when CI green.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T16:28:20.874+0000",
                    "updated": "2020-04-02T16:28:20.874+0000",
                    "started": "2020-04-02T16:28:20.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414823",
                    "issueId": "13291180"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@53e452f5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@153d49ad[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58d93d6d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@27d667fa[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3afa463c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4edfe9c3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f7c9720[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4b01c282[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23a2b678[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1202c23e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@297c82c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6cac40b6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 02 17:07:32 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-04-02T17:07:32.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8079/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-03-11T21:27:25.000+0000",
        "updated": "2020-04-06T07:15:50.000+0000",
        "timeoriginalestimate": null,
        "description": "Per mailing list discussion, it may be better to not return the metadata always as a dict and instead wrap the KeyValueMetadata methods. We can make {{__getitem__}} lookup a key in it of course",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Implement a wrapper for KeyValueMetadata, duck-typing dict where relevant",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/comment/17058040",
                    "id": "17058040",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Returning a dict in the common case has a virtue, though, because it's a well-known type that everybody knows to handle.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-03-12T16:03:42.237+0000",
                    "updated": "2020-03-12T16:03:42.237+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/comment/17058081",
                    "id": "17058081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It's true. This is also a relatively \"advanced\" part of the project (which is already fairly developer-centric more so than user-centric), and so usability considerations should be balanced with featurefulness. If the KeyValueMetadata wrapper implemented the essential dict API, in particular\r\n\r\n* {{__getitem__}}\r\n* {{keys}}\r\n* {{values}}\r\n* {{items}}\r\n\r\nthen there wouldn't be a lot of different (except the surprise \"what is this object\" the first time you see it)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-12T16:41:15.412+0000",
                    "updated": "2020-03-12T16:41:15.412+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13291180/comment/17073910",
                    "id": "17073910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 6793\n[https://github.com/apache/arrow/pull/6793]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-04-02T17:07:32.311+0000",
                    "updated": "2020-04-02T17:07:32.311+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0cftc:",
        "customfield_12314139": null
    }
}