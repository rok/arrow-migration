{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13178388",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388",
    "key": "ARROW-3044",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3044/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/133833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424\n \n \n   + add missing tests\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-10T22:05:46.381+0000",
                    "updated": "2018-08-10T22:05:46.381+0000",
                    "started": "2018-08-10T22:05:46.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "133833",
                    "issueId": "13178388"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/133872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424#issuecomment-412231740\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=h1) Report\n   > Merging [#2424](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5a97cb77415713f0d504a7bad3d6287e94694c8?src=pr&el=desc) will **increase** coverage by `2.15%`.\n   > The diff coverage is `78.4%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2424/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2424      +/-   ##\n   ==========================================\n   + Coverage   84.57%   86.72%   +2.15%     \n   ==========================================\n     Files         298      239      -59     \n     Lines       45500    42621    -2879     \n   ==========================================\n   - Hits        38480    36963    -1517     \n   + Misses       6975     5658    -1317     \n   + Partials       45        0      -45\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_array.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9hcnJheS5weQ==) | `98.94% <100%> (+0.01%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_ipc.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9pcGMucHk=) | `99.46% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_types.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90eXBlcy5weQ==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_io.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9pby5weQ==) | `99.14% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_feather.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9mZWF0aGVyLnB5) | `97.86% <100%> (+0.06%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_scalars.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9zY2FsYXJzLnB5) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `69.66% <50%> (-0.17%)` | :arrow_down: |\n   | [python/pyarrow/builder.pxi](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvYnVpbGRlci5weGk=) | `59.09% <50%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/feather.pxi](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvZmVhdGhlci5weGk=) | `67.44% <50%> (\u00f8)` | :arrow_up: |\n   | ... and [66 more](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=footer). Last update [b5a97cb...c78b3b9](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-10T23:32:49.517+0000",
                    "updated": "2018-08-10T23:32:49.517+0000",
                    "started": "2018-08-10T23:32:49.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "133872",
                    "issueId": "13178388"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/134219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424#discussion_r209704062\n \n \n\n ##########\n File path: python/pyarrow/tests/test_ipc.py\n ##########\n @@ -340,8 +340,13 @@ def test_message_reader(example_messages):\n \n     assert len(messages) == 6\n     assert messages[0].type == 'schema'\n+    assert isinstance(messages[0].metadata, pa.lib.Buffer)\n \n Review comment:\n   Can this simply be `pa.Buffer`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-13T18:08:31.196+0000",
                    "updated": "2018-08-13T18:08:31.196+0000",
                    "started": "2018-08-13T18:08:31.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134219",
                    "issueId": "13178388"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/134394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424#discussion_r209820050\n \n \n\n ##########\n File path: python/pyarrow/tests/test_ipc.py\n ##########\n @@ -340,8 +340,13 @@ def test_message_reader(example_messages):\n \n     assert len(messages) == 6\n     assert messages[0].type == 'schema'\n+    assert isinstance(messages[0].metadata, pa.lib.Buffer)\n \n Review comment:\n   yes, we should use the public API here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-14T03:33:36.312+0000",
                    "updated": "2018-08-14T03:33:36.312+0000",
                    "started": "2018-08-14T03:33:36.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134394",
                    "issueId": "13178388"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/134404",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424#issuecomment-412752133\n \n \n   Doh, there's a merge conflict now. Will merge after resolved + green build\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-14T04:35:52.079+0000",
                    "updated": "2018-08-14T04:35:52.079+0000",
                    "started": "2018-08-14T04:35:52.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134404",
                    "issueId": "13178388"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/134514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424#issuecomment-412231740\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=h1) Report\n   > Merging [#2424](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b99d8f391b455af64182937354024bea2c09fa69?src=pr&el=desc) will **increase** coverage by `1.99%`.\n   > The diff coverage is `78.09%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2424/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2424      +/-   ##\n   ==========================================\n   + Coverage   84.72%   86.72%   +1.99%     \n   ==========================================\n     Files         299      239      -60     \n     Lines       45627    42615    -3012     \n   ==========================================\n   - Hits        38659    36958    -1701     \n   + Misses       6918     5657    -1261     \n   + Partials       50        0      -50\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_types.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90eXBlcy5weQ==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_array.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9hcnJheS5weQ==) | `98.94% <100%> (+0.01%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_ipc.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9pcGMucHk=) | `99.46% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_io.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9pby5weQ==) | `99.14% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_feather.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9mZWF0aGVyLnB5) | `97.86% <100%> (+0.06%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_scalars.py](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9zY2FsYXJzLnB5) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `69.66% <50%> (-0.17%)` | :arrow_down: |\n   | [python/pyarrow/builder.pxi](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvYnVpbGRlci5weGk=) | `59.09% <50%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/feather.pxi](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvZmVhdGhlci5weGk=) | `67.44% <50%> (\u00f8)` | :arrow_up: |\n   | ... and [67 more](https://codecov.io/gh/apache/arrow/pull/2424/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=footer). Last update [b99d8f3...c00fdd3](https://codecov.io/gh/apache/arrow/pull/2424?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-14T13:35:38.608+0000",
                    "updated": "2018-08-14T13:35:38.608+0000",
                    "started": "2018-08-14T13:35:38.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134514",
                    "issueId": "13178388"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/134515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424#issuecomment-412874014\n \n \n   rebased and green\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-14T13:36:36.009+0000",
                    "updated": "2018-08-14T13:36:36.009+0000",
                    "started": "2018-08-14T13:36:36.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134515",
                    "issueId": "13178388"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/worklog/134531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2424: ARROW-3044: [Python] Remove all occurrences of cython's legacy property definition syntax\nURL: https://github.com/apache/arrow/pull/2424\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex e482f41b3e..76a639abfc 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -514,10 +514,9 @@ cdef class Array:\n                              null_count, offset)\n         return pyarrow_wrap_array(MakeArray(ad))\n \n-    property null_count:\n-\n-        def __get__(self):\n-            return self.sp_array.get().null_count()\n+    @property\n+    def null_count(self):\n+        return self.sp_array.get().null_count()\n \n     def __iter__(self):\n         for i in range(len(self)):\n@@ -683,15 +682,14 @@ cdef class Array:\n         with nogil:\n             check_status(ValidateArray(deref(self.ap)))\n \n-    property offset:\n-\n-        def __get__(self):\n-            \"\"\"\n-            A relative position into another array's data, to enable zero-copy\n-            slicing. This value defaults to zero but must be applied on all\n-            operations with the physical storage buffers.\n-            \"\"\"\n-            return self.sp_array.get().offset()\n+    @property\n+    def offset(self):\n+        \"\"\"\n+        A relative position into another array's data, to enable zero-copy\n+        slicing. This value defaults to zero but must be applied on all\n+        operations with the physical storage buffers.\n+        \"\"\"\n+        return self.sp_array.get().offset()\n \n     def buffers(self):\n         \"\"\"\n@@ -1034,25 +1032,23 @@ cdef class DictionaryArray(Array):\n     def dictionary_encode(self):\n         return self\n \n-    property dictionary:\n-\n-        def __get__(self):\n-            cdef CDictionaryArray* darr = <CDictionaryArray*>(self.ap)\n-\n-            if self._dictionary is None:\n-                self._dictionary = pyarrow_wrap_array(darr.dictionary())\n+    @property\n+    def dictionary(self):\n+        cdef CDictionaryArray* darr = <CDictionaryArray*>(self.ap)\n \n-            return self._dictionary\n+        if self._dictionary is None:\n+            self._dictionary = pyarrow_wrap_array(darr.dictionary())\n \n-    property indices:\n+        return self._dictionary\n \n-        def __get__(self):\n-            cdef CDictionaryArray* darr = <CDictionaryArray*>(self.ap)\n+    @property\n+    def indices(self):\n+        cdef CDictionaryArray* darr = <CDictionaryArray*>(self.ap)\n \n-            if self._indices is None:\n-                self._indices = pyarrow_wrap_array(darr.indices())\n+        if self._indices is None:\n+            self._indices = pyarrow_wrap_array(darr.indices())\n \n-            return self._indices\n+        return self._indices\n \n     @staticmethod\n     def from_arrays(indices, dictionary, mask=None, ordered=False,\ndiff --git a/python/pyarrow/builder.pxi b/python/pyarrow/builder.pxi\nindex faeed6c5b4..97d0f86f8b 100644\n--- a/python/pyarrow/builder.pxi\n+++ b/python/pyarrow/builder.pxi\n@@ -16,8 +16,10 @@\n # under the License.\n \n import six\n+\n from pyarrow.compat import tobytes\n \n+\n cdef class StringBuilder:\n     \"\"\"\n     Builder class for UTF8 strings. This class exposes facilities for\n@@ -74,10 +76,9 @@ cdef class StringBuilder:\n             self.builder.get().Finish(&out)\n         return pyarrow_wrap_array(out)\n \n-    property null_count:\n-\n-        def __get__(self):\n-            return self.builder.get().null_count()\n+    @property\n+    def null_count(self):\n+        return self.builder.get().null_count()\n \n     def __len__(self):\n         return self.builder.get().length()\ndiff --git a/python/pyarrow/feather.pxi b/python/pyarrow/feather.pxi\nindex 937e275409..9750aecd51 100644\n--- a/python/pyarrow/feather.pxi\n+++ b/python/pyarrow/feather.pxi\n@@ -82,15 +82,13 @@ cdef class FeatherReader:\n         with nogil:\n             check_status(CFeatherReader.Open(reader, &self.reader))\n \n-    property num_rows:\n+    @property\n+    def num_rows(self):\n+        return self.reader.get().num_rows()\n \n-        def __get__(self):\n-            return self.reader.get().num_rows()\n-\n-    property num_columns:\n-\n-        def __get__(self):\n-            return self.reader.get().num_columns()\n+    @property\n+    def num_columns(self):\n+        return self.reader.get().num_columns()\n \n     def get_column_name(self, int i):\n         cdef c_string name = self.reader.get().GetColumnName(i)\ndiff --git a/python/pyarrow/io.pxi b/python/pyarrow/io.pxi\nindex f0e98abe7a..c8d86cd2c6 100644\n--- a/python/pyarrow/io.pxi\n+++ b/python/pyarrow/io.pxi\n@@ -53,6 +53,7 @@ def _stringify_path(path):\n \n \n cdef class NativeFile:\n+\n     def __cinit__(self):\n         self.closed = True\n         self.own_file = False\n@@ -69,7 +70,8 @@ cdef class NativeFile:\n     def __exit__(self, exc_type, exc_value, tb):\n         self.close()\n \n-    property mode:\n+    @property\n+    def mode(self):\n         \"\"\"\n         The file mode. Currently instances of NativeFile may support:\n \n@@ -77,17 +79,15 @@ cdef class NativeFile:\n         * wb: binary write\n         * rb+: binary read and write\n         \"\"\"\n-\n-        def __get__(self):\n-            # Emulate built-in file modes\n-            if self.is_readable and self.is_writable:\n-                return 'rb+'\n-            elif self.is_readable:\n-                return 'rb'\n-            elif self.is_writable:\n-                return 'wb'\n-            else:\n-                raise ValueError('File object is malformed, has no mode')\n+        # Emulate built-in file modes\n+        if self.is_readable and self.is_writable:\n+            return 'rb+'\n+        elif self.is_readable:\n+            return 'rb'\n+        elif self.is_writable:\n+            return 'wb'\n+        else:\n+            raise ValueError('File object is malformed, has no mode')\n \n     def readable(self):\n         self._assert_open()\n@@ -738,30 +738,26 @@ cdef class Buffer:\n     def __len__(self):\n         return self.size\n \n-    property size:\n-\n-        def __get__(self):\n-            return self.buffer.get().size()\n-\n-    property address:\n-\n-        def __get__(self):\n-            return <uintptr_t> self.buffer.get().data()\n-\n-    property is_mutable:\n+    @property\n+    def size(self):\n+        return self.buffer.get().size()\n \n-        def __get__(self):\n-            return self.buffer.get().is_mutable()\n+    @property\n+    def address(self):\n+        return <uintptr_t> self.buffer.get().data()\n \n-    property parent:\n+    @property\n+    def is_mutable(self):\n+        return self.buffer.get().is_mutable()\n \n-        def __get__(self):\n-            cdef shared_ptr[CBuffer] parent_buf = self.buffer.get().parent()\n+    @property\n+    def parent(self):\n+        cdef shared_ptr[CBuffer] parent_buf = self.buffer.get().parent()\n \n-            if parent_buf.get() == NULL:\n-                return None\n-            else:\n-                return pyarrow_wrap_buffer(parent_buf)\n+        if parent_buf.get() == NULL:\n+            return None\n+        else:\n+            return pyarrow_wrap_buffer(parent_buf)\n \n     def __getitem__(self, key):\n         if PySlice_Check(key):\ndiff --git a/python/pyarrow/ipc.pxi b/python/pyarrow/ipc.pxi\nindex 7ab827e8e5..e00dca8e25 100644\n--- a/python/pyarrow/ipc.pxi\n+++ b/python/pyarrow/ipc.pxi\n@@ -30,24 +30,21 @@ cdef class Message:\n                         \"`pyarrow.ipc.read_message` function instead.\"\n                         .format(self.__class__.__name__))\n \n-    property type:\n-\n-        def __get__(self):\n-            return frombytes(FormatMessageType(self.message.get().type()))\n-\n-    property metadata:\n-\n-        def __get__(self):\n-            return pyarrow_wrap_buffer(self.message.get().metadata())\n-\n-    property body:\n-\n-        def __get__(self):\n-            cdef shared_ptr[CBuffer] body = self.message.get().body()\n-            if body.get() == NULL:\n-                return None\n-            else:\n-                return pyarrow_wrap_buffer(body)\n+    @property\n+    def type(self):\n+        return frombytes(FormatMessageType(self.message.get().type()))\n+\n+    @property\n+    def metadata(self):\n+        return pyarrow_wrap_buffer(self.message.get().metadata())\n+\n+    @property\n+    def body(self):\n+        cdef shared_ptr[CBuffer] body = self.message.get().body()\n+        if body.get() == NULL:\n+            return None\n+        else:\n+            return pyarrow_wrap_buffer(body)\n \n     def equals(self, Message other):\n         \"\"\"\n@@ -357,10 +354,9 @@ cdef class _RecordBatchFileReader:\n \n         self.schema = pyarrow_wrap_schema(self.reader.get().schema())\n \n-    property num_record_batches:\n-\n-        def __get__(self):\n-            return self.reader.get().num_record_batches()\n+    @property\n+    def num_record_batches(self):\n+        return self.reader.get().num_record_batches()\n \n     def get_batch(self, int i):\n         cdef shared_ptr[CRecordBatch] batch\ndiff --git a/python/pyarrow/scalar.pxi b/python/pyarrow/scalar.pxi\nindex 5711d283c1..79d6c2c464 100644\n--- a/python/pyarrow/scalar.pxi\n+++ b/python/pyarrow/scalar.pxi\n@@ -228,12 +228,11 @@ else:\n \n cdef class TimestampValue(ArrayValue):\n \n-    property value:\n-\n-        def __get__(self):\n-            cdef CTimestampArray* ap = <CTimestampArray*> self.sp_array.get()\n-            cdef CTimestampType* dtype = <CTimestampType*> ap.type().get()\n-            return ap.Value(self.index)\n+    @property\n+    def value(self):\n+        cdef CTimestampArray* ap = <CTimestampArray*> self.sp_array.get()\n+        cdef CTimestampType* dtype = <CTimestampType*> ap.type().get()\n+        return ap.Value(self.index)\n \n     def as_py(self):\n         cdef CTimestampArray* ap = <CTimestampArray*> self.sp_array.get()\n@@ -413,23 +412,17 @@ cdef class DictionaryValue(ArrayValue):\n     def as_py(self):\n         return self.dictionary_value.as_py()\n \n-    property index_value:\n-\n-        def __get__(self):\n-            cdef CDictionaryArray* darr\n-\n-            darr = <CDictionaryArray*>(self.sp_array.get())\n-            indices = pyarrow_wrap_array(darr.indices())\n-            return indices[self.index]\n-\n-    property dictionary_value:\n-\n-        def __get__(self):\n-            cdef CDictionaryArray* darr\n-\n-            darr = <CDictionaryArray*>(self.sp_array.get())\n-            dictionary = pyarrow_wrap_array(darr.dictionary())\n-            return dictionary[self.index_value.as_py()]\n+    @property\n+    def index_value(self):\n+        cdef CDictionaryArray* darr = <CDictionaryArray*>(self.sp_array.get())\n+        indices = pyarrow_wrap_array(darr.indices())\n+        return indices[self.index]\n+\n+    @property\n+    def dictionary_value(self):\n+        cdef CDictionaryArray* darr = <CDictionaryArray*>(self.sp_array.get())\n+        dictionary = pyarrow_wrap_array(darr.dictionary())\n+        return dictionary[self.index_value.as_py()]\n \n \n cdef dict _scalar_classes = {\ndiff --git a/python/pyarrow/serialization.pxi b/python/pyarrow/serialization.pxi\nindex 6407347467..b25c8009b5 100644\n--- a/python/pyarrow/serialization.pxi\n+++ b/python/pyarrow/serialization.pxi\n@@ -223,14 +223,13 @@ cdef class SerializedPyObject:\n     cdef readonly:\n         object base\n \n-    property total_bytes:\n-\n-        def __get__(self):\n-            cdef CMockOutputStream mock_stream\n-            with nogil:\n-                check_status(self.data.WriteTo(&mock_stream))\n+    @property\n+    def total_bytes(self):\n+        cdef CMockOutputStream mock_stream\n+        with nogil:\n+            check_status(self.data.WriteTo(&mock_stream))\n \n-            return mock_stream.GetExtentBytesWritten()\n+        return mock_stream.GetExtentBytesWritten()\n \n     def write_to(self, sink):\n         \"\"\"\ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex e0568431d5..825b2b8856 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -53,10 +53,9 @@ cdef class ChunkedArray:\n     def __reduce__(self):\n         return chunked_array, (self.chunks, self.type)\n \n-    property type:\n-\n-        def __get__(self):\n-            return pyarrow_wrap_data_type(self.sp_chunked_array.get().type())\n+    @property\n+    def type(self):\n+        return pyarrow_wrap_data_type(self.sp_chunked_array.get().type())\n \n     def length(self):\n         return self.chunked_array.length()\n@@ -267,14 +266,9 @@ cdef class ChunkedArray:\n \n         return pyarrow_wrap_array(self.chunked_array.chunk(i))\n \n-    property chunks:\n-\n-        def __get__(self):\n-            cdef int i\n-            chunks = []\n-            for i in range(self.num_chunks):\n-                chunks.append(self.chunk(i))\n-            return chunks\n+    @property\n+    def chunks(self):\n+        return list(self.iterchunks())\n \n     def iterchunks(self):\n         for i in range(self.num_chunks):\ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex 425fe09756..4bebe3139a 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -307,6 +307,11 @@ def test_dictionary_from_numpy():\n     d1 = pa.DictionaryArray.from_arrays(indices, dictionary)\n     d2 = pa.DictionaryArray.from_arrays(indices, dictionary, mask=mask)\n \n+    assert d1.indices.to_pylist() == indices.tolist()\n+    assert d1.indices.to_pylist() == indices.tolist()\n+    assert d1.dictionary.to_pylist() == dictionary.tolist()\n+    assert d2.dictionary.to_pylist() == dictionary.tolist()\n+\n     for i in range(len(indices)):\n         assert d1[i].as_py() == dictionary[indices[i]]\n \n@@ -325,6 +330,9 @@ def test_dictionary_from_boxed_arrays():\n \n     d1 = pa.DictionaryArray.from_arrays(iarr, darr)\n \n+    assert d1.indices.to_pylist() == indices.tolist()\n+    assert d1.dictionary.to_pylist() == dictionary.tolist()\n+\n     for i in range(len(indices)):\n         assert d1[i].as_py() == dictionary[indices[i]]\n \ndiff --git a/python/pyarrow/tests/test_feather.py b/python/pyarrow/tests/test_feather.py\nindex 1fcc608e27..01b567216b 100644\n--- a/python/pyarrow/tests/test_feather.py\n+++ b/python/pyarrow/tests/test_feather.py\n@@ -124,6 +124,23 @@ def test_dataset(self):\n         data = FeatherDataset(paths).read_pandas()\n         assert_frame_equal(data, df)\n \n+    def test_num_columns_attr(self):\n+        df0 = pd.DataFrame({})\n+        df1 = pd.DataFrame({\n+            'foo': [1, 2, 3, 4, 5]\n+        })\n+        df2 = pd.DataFrame({\n+            'foo': [1, 2, 3, 4, 5],\n+            'bar': [1, 2, 3, 4, 5]\n+        })\n+        for df, ncols in zip([df0, df1, df2], [0, 1, 2]):\n+            path = random_path()\n+            self.test_files.append(path)\n+            write_feather(df, path)\n+\n+            reader = FeatherReader(path)\n+            assert reader.num_columns == ncols\n+\n     def test_num_rows_attr(self):\n         df = pd.DataFrame({'foo': [1, 2, 3, 4, 5]})\n         path = random_path()\ndiff --git a/python/pyarrow/tests/test_io.py b/python/pyarrow/tests/test_io.py\nindex 2b32c2b95a..78685acae0 100644\n--- a/python/pyarrow/tests/test_io.py\n+++ b/python/pyarrow/tests/test_io.py\n@@ -464,6 +464,7 @@ def test_allocate_buffer():\n     buf = pa.allocate_buffer(100)\n     assert buf.size == 100\n     assert buf.is_mutable\n+    assert buf.parent is None\n \n     bit = b'abcde'\n     writer = pa.FixedSizeBufferWriter(buf)\ndiff --git a/python/pyarrow/tests/test_ipc.py b/python/pyarrow/tests/test_ipc.py\nindex 115d6bdbfe..296882f4df 100644\n--- a/python/pyarrow/tests/test_ipc.py\n+++ b/python/pyarrow/tests/test_ipc.py\n@@ -340,8 +340,13 @@ def test_message_reader(example_messages):\n \n     assert len(messages) == 6\n     assert messages[0].type == 'schema'\n+    assert isinstance(messages[0].metadata, pa.Buffer)\n+    assert isinstance(messages[0].body, pa.Buffer)\n+\n     for msg in messages[1:]:\n         assert msg.type == 'record batch'\n+        assert isinstance(msg.metadata, pa.Buffer)\n+        assert isinstance(msg.body, pa.Buffer)\n \n \n def test_message_serialize_read_message(example_messages):\ndiff --git a/python/pyarrow/tests/test_scalars.py b/python/pyarrow/tests/test_scalars.py\nindex d6cdb6697c..051cf128ae 100644\n--- a/python/pyarrow/tests/test_scalars.py\n+++ b/python/pyarrow/tests/test_scalars.py\n@@ -154,14 +154,15 @@ def test_list(self):\n     def test_timestamp(self):\n         arr = pd.date_range('2000-01-01 12:34:56', periods=10).values\n \n-        units = ['s', 'ms', 'us', 'ns']\n+        units = ['ns', 'us', 'ms', 's']\n \n-        for unit in units:\n+        for i, unit in enumerate(units):\n             dtype = 'datetime64[{0}]'.format(unit)\n             arrow_arr = pa.Array.from_pandas(arr.astype(dtype))\n             expected = pd.Timestamp('2000-01-01 12:34:56')\n \n             assert arrow_arr[0].as_py() == expected\n+            assert arrow_arr[0].value * 1000**i == expected.value\n \n             tz = 'America/New_York'\n             arrow_type = pa.timestamp(unit, tz=tz)\n@@ -174,6 +175,7 @@ def test_timestamp(self):\n                         .tz_convert(tz))\n \n             assert arrow_arr[0].as_py() == expected\n+            assert arrow_arr[0].value * 1000**i == expected.value\n \n     def test_dictionary(self):\n         colors = ['red', 'green', 'blue']\ndiff --git a/python/pyarrow/tests/test_table.py b/python/pyarrow/tests/test_table.py\nindex cc672fc74c..b58a1de5f6 100644\n--- a/python/pyarrow/tests/test_table.py\n+++ b/python/pyarrow/tests/test_table.py\n@@ -28,11 +28,22 @@\n \n def test_chunked_array_basics():\n     data = pa.chunked_array([], type=pa.string())\n+    assert data.type == pa.string()\n     assert data.to_pylist() == []\n \n     with pytest.raises(ValueError):\n         pa.chunked_array([])\n \n+    data = pa.chunked_array([\n+        [1, 2, 3],\n+        [4, 5, 6],\n+        [7, 8, 9]\n+    ])\n+    assert isinstance(data.chunks, list)\n+    assert all(isinstance(c, pa.lib.Int64Array) for c in data.chunks)\n+    assert all(isinstance(c, pa.lib.Int64Array) for c in data.iterchunks())\n+    assert len(data.chunks) == 3\n+\n \n def test_chunked_array_str():\n     data = [\ndiff --git a/python/pyarrow/tests/test_types.py b/python/pyarrow/tests/test_types.py\nindex 61f601819c..c0f593080c 100644\n--- a/python/pyarrow/tests/test_types.py\n+++ b/python/pyarrow/tests/test_types.py\n@@ -182,6 +182,45 @@ def test_is_primitive():\n     assert not types.is_primitive(pa.list_(pa.int32()))\n \n \n+def test_timestamp():\n+    for unit in ('s', 'ms', 'us', 'ns'):\n+        for tz in (None, 'UTC', 'Europe/Paris'):\n+            ty = pa.timestamp(unit, tz=tz)\n+            assert ty.unit == unit\n+            assert ty.tz == tz\n+\n+    for invalid_unit in ('m', 'arbit', 'rary'):\n+        with pytest.raises(ValueError, match='Invalid TimeUnit string'):\n+            pa.timestamp(invalid_unit)\n+\n+\n+def test_time32_units():\n+    for valid_unit in ('s', 'ms'):\n+        ty = pa.time32(valid_unit)\n+        assert ty.unit == valid_unit\n+\n+    for invalid_unit in ('m', 'us', 'ns'):\n+        error_msg = 'Invalid TimeUnit for time32: {}'.format(invalid_unit)\n+        with pytest.raises(ValueError, match=error_msg):\n+            pa.time32(invalid_unit)\n+\n+\n+def test_time64_units():\n+    for valid_unit in ('us', 'ns'):\n+        ty = pa.time64(valid_unit)\n+        assert ty.unit == valid_unit\n+\n+    for invalid_unit in ('m', 's', 'ms'):\n+        error_msg = 'Invalid TimeUnit for time64: {}'.format(invalid_unit)\n+        with pytest.raises(ValueError, match=error_msg):\n+            pa.time64(invalid_unit)\n+\n+\n+def test_list_type():\n+    ty = pa.list_(pa.int64())\n+    assert ty.value_type == pa.int64()\n+\n+\n def test_struct_type():\n     fields = [pa.field('a', pa.int64()),\n               pa.field('a', pa.int32()),\n@@ -215,6 +254,20 @@ def check_fields(ty, fields):\n             pa.union(fields, mode=mode)\n \n \n+def test_dictionary_type():\n+    ty0 = pa.dictionary(pa.int32(), pa.array(['a', 'b', 'c']))\n+    assert ty0.index_type == pa.int32()\n+    assert isinstance(ty0.dictionary, pa.Array)\n+    assert ty0.dictionary.to_pylist() == ['a', 'b', 'c']\n+    assert ty0.ordered is False\n+\n+    ty1 = pa.dictionary(pa.float32(), pa.array([1.0, 2.0]), ordered=True)\n+    assert ty1.index_type == pa.float32()\n+    assert isinstance(ty0.dictionary, pa.Array)\n+    assert ty1.dictionary.to_pylist() == [1.0, 2.0]\n+    assert ty1.ordered is True\n+\n+\n def test_types_hashable():\n     many_types = get_many_types()\n     in_dict = {}\n@@ -232,12 +285,6 @@ def test_types_picklable():\n         assert pickle.loads(data) == ty\n \n \n-def test_dictionary_type():\n-    ty = pa.dictionary(pa.int32(), pa.array(['a', 'b', 'c']))\n-    assert ty.index_type == pa.int32()\n-    assert ty.dictionary.to_pylist() == ['a', 'b', 'c']\n-\n-\n def test_fields_hashable():\n     in_dict = {}\n     fields = [pa.field('a', pa.int32()),\n@@ -273,6 +320,12 @@ def test_exact_primitive_types(t, check_func):\n     assert check_func(t)\n \n \n+def test_type_id():\n+    # enum values are not exposed publicly\n+    for ty in get_many_types():\n+        assert isinstance(ty.id, int)\n+\n+\n def test_bit_width():\n     for ty, expected in [(pa.bool_(), 1),\n                          (pa.int8(), 8),\n@@ -291,9 +344,11 @@ def test_fixed_size_binary_byte_width():\n     assert ty.byte_width == 5\n \n \n-def test_decimal_byte_width():\n+def test_decimal_properties():\n     ty = pa.decimal128(19, 4)\n     assert ty.byte_width == 16\n+    assert ty.precision == 19\n+    assert ty.scale == 4\n \n \n def test_type_equality_operators():\ndiff --git a/python/pyarrow/types.pxi b/python/pyarrow/types.pxi\nindex 044423b0c0..c8bf643be0 100644\n--- a/python/pyarrow/types.pxi\n+++ b/python/pyarrow/types.pxi\n@@ -102,29 +102,19 @@ cdef class DataType:\n         self.type = type.get()\n         self.pep3118_format = _datatype_to_pep3118(self.type)\n \n-    property id:\n-\n-        def __get__(self):\n-            return self.type.id()\n-\n-    property bit_width:\n-\n-        def __get__(self):\n-            cdef _CFixedWidthTypePtr ty\n-            ty = dynamic_cast[_CFixedWidthTypePtr](self.type)\n-            if ty == nullptr:\n-                raise ValueError(\"Non-fixed width type\")\n-            return ty.bit_width()\n+    @property\n+    def id(self):\n+        return self.type.id()\n+\n+    @property\n+    def bit_width(self):\n+        cdef _CFixedWidthTypePtr ty\n+        ty = dynamic_cast[_CFixedWidthTypePtr](self.type)\n+        if ty == nullptr:\n+            raise ValueError(\"Non-fixed width type\")\n+        return ty.bit_width()\n \n     def __str__(self):\n-        if self.type is NULL:\n-            raise TypeError(\n-                '{} is incomplete. The correct way to construct types is '\n-                'through public API functions named '\n-                'pyarrow.int64, pyarrow.list_, etc.'.format(\n-                    type(self).__name__\n-                )\n-            )\n         return frombytes(self.type.ToString())\n \n     def __hash__(self):\n@@ -140,7 +130,7 @@ cdef class DataType:\n         try:\n             return self.equals(other)\n         except (TypeError, ValueError):\n-            return False\n+            return NotImplemented\n \n     def equals(self, other):\n         \"\"\"\n@@ -185,20 +175,17 @@ cdef class DictionaryType(DataType):\n     def __reduce__(self):\n         return dictionary, (self.index_type, self.dictionary, self.ordered)\n \n-    property ordered:\n-\n-        def __get__(self):\n-            return self.dict_type.ordered()\n-\n-    property index_type:\n-\n-        def __get__(self):\n-            return pyarrow_wrap_data_type(self.dict_type.index_type())\n+    @property\n+    def ordered(self):\n+        return self.dict_type.ordered()\n \n-    property dictionary:\n+    @property\n+    def index_type(self):\n+        return pyarrow_wrap_data_type(self.dict_type.index_type())\n \n-        def __get__(self):\n-            return pyarrow_wrap_array(self.dict_type.dictionary())\n+    @property\n+    def dictionary(self):\n+        return pyarrow_wrap_array(self.dict_type.dictionary())\n \n \n cdef class ListType(DataType):\n@@ -210,10 +197,9 @@ cdef class ListType(DataType):\n     def __reduce__(self):\n         return list_, (self.value_type,)\n \n-    property value_type:\n-\n-        def __get__(self):\n-            return pyarrow_wrap_data_type(self.list_type.value_type())\n+    @property\n+    def value_type(self):\n+        return pyarrow_wrap_data_type(self.list_type.value_type())\n \n \n cdef class StructType(DataType):\n@@ -232,35 +218,32 @@ cdef class StructType(DataType):\n         cdef int index = <int> _normalize_index(i, self.num_children)\n         return pyarrow_wrap_field(self.type.child(index))\n \n-    property num_children:\n-\n-        def __get__(self):\n-            return self.type.num_children()\n-\n     def __reduce__(self):\n         return struct, (list(self),)\n \n+    @property\n+    def num_children(self):\n+        return self.type.num_children()\n+\n \n cdef class UnionType(DataType):\n \n     cdef void init(self, const shared_ptr[CDataType]& type):\n         DataType.init(self, type)\n \n-    property num_children:\n-\n-        def __get__(self):\n-            return self.type.num_children()\n-\n-    property mode:\n+    @property\n+    def num_children(self):\n+        return self.type.num_children()\n \n-        def __get__(self):\n-            cdef CUnionType* type = <CUnionType*> self.sp_type.get()\n-            cdef int mode = type.mode()\n-            if mode == _UnionMode_DENSE:\n-                return 'dense'\n-            if mode == _UnionMode_SPARSE:\n-                return 'sparse'\n-            assert 0\n+    @property\n+    def mode(self):\n+        cdef CUnionType* type = <CUnionType*> self.sp_type.get()\n+        cdef int mode = type.mode()\n+        if mode == _UnionMode_DENSE:\n+            return 'dense'\n+        if mode == _UnionMode_SPARSE:\n+            return 'sparse'\n+        assert 0\n \n     def __len__(self):\n         return self.type.num_children()\n@@ -283,18 +266,16 @@ cdef class TimestampType(DataType):\n         DataType.init(self, type)\n         self.ts_type = <const CTimestampType*> type.get()\n \n-    property unit:\n+    @property\n+    def unit(self):\n+        return timeunit_to_string(self.ts_type.unit())\n \n-        def __get__(self):\n-            return timeunit_to_string(self.ts_type.unit())\n-\n-    property tz:\n-\n-        def __get__(self):\n-            if self.ts_type.timezone().size() > 0:\n-                return frombytes(self.ts_type.timezone())\n-            else:\n-                return None\n+    @property\n+    def tz(self):\n+        if self.ts_type.timezone().size() > 0:\n+            return frombytes(self.ts_type.timezone())\n+        else:\n+            return None\n \n     def to_pandas_dtype(self):\n         \"\"\"\n@@ -316,10 +297,9 @@ cdef class Time32Type(DataType):\n         DataType.init(self, type)\n         self.time_type = <const CTime32Type*> type.get()\n \n-    property unit:\n-\n-        def __get__(self):\n-            return timeunit_to_string(self.time_type.unit())\n+    @property\n+    def unit(self):\n+        return timeunit_to_string(self.time_type.unit())\n \n \n cdef class Time64Type(DataType):\n@@ -328,10 +308,9 @@ cdef class Time64Type(DataType):\n         DataType.init(self, type)\n         self.time_type = <const CTime64Type*> type.get()\n \n-    property unit:\n-\n-        def __get__(self):\n-            return timeunit_to_string(self.time_type.unit())\n+    @property\n+    def unit(self):\n+        return timeunit_to_string(self.time_type.unit())\n \n \n cdef class FixedSizeBinaryType(DataType):\n@@ -344,10 +323,9 @@ cdef class FixedSizeBinaryType(DataType):\n     def __reduce__(self):\n         return binary, (self.byte_width,)\n \n-    property byte_width:\n-\n-        def __get__(self):\n-            return self.fixed_size_binary_type.byte_width()\n+    @property\n+    def byte_width(self):\n+        return self.fixed_size_binary_type.byte_width()\n \n \n cdef class Decimal128Type(FixedSizeBinaryType):\n@@ -359,15 +337,13 @@ cdef class Decimal128Type(FixedSizeBinaryType):\n     def __reduce__(self):\n         return decimal128, (self.precision, self.scale)\n \n-    property precision:\n-\n-        def __get__(self):\n-            return self.decimal128_type.precision()\n-\n-    property scale:\n+    @property\n+    def precision(self):\n+        return self.decimal128_type.precision()\n \n-        def __get__(self):\n-            return self.decimal128_type.scale()\n+    @property\n+    def scale(self):\n+        return self.decimal128_type.scale()\n \n \n cdef class Field:\n@@ -411,7 +387,7 @@ cdef class Field:\n         try:\n             return self.equals(other)\n         except TypeError:\n-            return False\n+            return NotImplemented\n \n     def __reduce__(self):\n         return field, (self.name, self.type, self.nullable, self.metadata)\n@@ -425,22 +401,19 @@ cdef class Field:\n     def __hash__(self):\n         return hash((self.field.name(), self.type, self.field.nullable()))\n \n-    property nullable:\n+    @property\n+    def nullable(self):\n+        return self.field.nullable()\n \n-        def __get__(self):\n-            return self.field.nullable()\n+    @property\n+    def name(self):\n+        return frombytes(self.field.name())\n \n-    property name:\n-\n-        def __get__(self):\n-            return frombytes(self.field.name())\n-\n-    property metadata:\n-\n-        def __get__(self):\n-            cdef shared_ptr[const CKeyValueMetadata] metadata = (\n-                self.field.metadata())\n-            return box_metadata(metadata.get())\n+    @property\n+    def metadata(self):\n+        cdef shared_ptr[const CKeyValueMetadata] metadata = (\n+            self.field.metadata())\n+        return box_metadata(metadata.get())\n \n     def add_metadata(self, dict metadata):\n         \"\"\"\n@@ -523,28 +496,26 @@ cdef class Schema:\n     def __reduce__(self):\n         return schema, (list(self), self.metadata)\n \n-    property names:\n-\n-        def __get__(self):\n-            cdef int i\n-            result = []\n-            for i in range(self.schema.num_fields()):\n-                name = frombytes(self.schema.field(i).get().name())\n-                result.append(name)\n-            return result\n-\n-    property metadata:\n+    @property\n+    def names(self):\n+        cdef int i\n+        result = []\n+        for i in range(self.schema.num_fields()):\n+            name = frombytes(self.schema.field(i).get().name())\n+            result.append(name)\n+        return result\n \n-        def __get__(self):\n-            cdef shared_ptr[const CKeyValueMetadata] metadata = (\n-                self.schema.metadata())\n-            return box_metadata(metadata.get())\n+    @property\n+    def metadata(self):\n+        cdef shared_ptr[const CKeyValueMetadata] metadata = (\n+            self.schema.metadata())\n+        return box_metadata(metadata.get())\n \n     def __eq__(self, other):\n         try:\n             return self.equals(other)\n         except TypeError:\n-            return False\n+            return NotImplemented\n \n     def equals(self, other, bint check_metadata=True):\n         \"\"\"\n@@ -1056,7 +1027,7 @@ def time32(unit):\n         TimeUnit unit_code\n         c_string c_timezone\n \n-    if unit == \"s\":\n+    if unit == 's':\n         unit_code = TimeUnit_SECOND\n     elif unit == 'ms':\n         unit_code = TimeUnit_MILLI\n@@ -1094,7 +1065,7 @@ def time64(unit):\n         TimeUnit unit_code\n         c_string c_timezone\n \n-    if unit == \"us\":\n+    if unit == 'us':\n         unit_code = TimeUnit_MICRO\n     elif unit == 'ns':\n         unit_code = TimeUnit_NANO\n@@ -1229,6 +1200,7 @@ cpdef DictionaryType dictionary(DataType index_type, Array dict_values,\n     ----------\n     index_type : DataType\n     dictionary : Array\n+    ordered : boolean\n \n     Returns\n     -------\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-14T14:09:59.067+0000",
                    "updated": "2018-08-14T14:09:59.067+0000",
                    "started": "2018-08-14T14:09:59.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134531",
                    "issueId": "13178388"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@767c9cf4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76d58dc0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71a3fd85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2bc2c5fc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22e551b5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@134fd8d7[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d6e40ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@403e879a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@485e0ed1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@25bafe6d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2adcb304[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1eeaf392[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 14 14:09:48 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-14T14:09:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3044/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-10T22:03:14.000+0000",
        "updated": "2018-08-14T14:09:59.000+0000",
        "timeoriginalestimate": null,
        "description": "As well as add missing tests ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Remove all occurrences of cython's legacy property definition syntax",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178388/comment/16579858",
                    "id": "16579858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2424\n[https://github.com/apache/arrow/pull/2424]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-14T14:09:48.338+0000",
                    "updated": "2018-08-14T14:09:48.338+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wy93:",
        "customfield_12314139": null
    }
}