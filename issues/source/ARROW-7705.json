{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13281989",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989",
    "key": "ARROW-7705",
    "fields": {
        "parent": {
            "id": "13281986",
            "key": "ARROW-7704",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13281986",
            "fields": {
                "summary": "[Rust] Support sort",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7705/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/378397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306\n \n \n   This implements `sort_to_indices` which returns an u32 array of indices that results in the array being sorted. It then implements `sort` by using `take` to sort the array.\r\n   \r\n   Similar to the approach taken in CPP, I think we can start with a correct approach, then focus on performance after. I will keep this PR a draft for comments and until I complete the initial sort implementation (including sorting in descending order).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T18:48:35.892+0000",
                    "updated": "2020-01-28T18:48:35.892+0000",
                    "started": "2020-01-28T18:48:35.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378397",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/378403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#issuecomment-579403122\n \n \n   https://issues.apache.org/jira/browse/ARROW-7705\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-28T19:01:42.886+0000",
                    "updated": "2020-01-28T19:01:42.886+0000",
                    "started": "2020-01-28T19:01:42.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "378403",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/381919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#issuecomment-582146113\n \n \n   I'm still researching around null-order semantics, and want to complete this PR once I've found a working solution.\r\n   \r\n   I'm so far thinking of creating the following:\r\n   \r\n   ```rust\r\n   pub struct SortOptions {\r\n       pub descending: bool, // defaults to false\r\n       pub nulls_first: bool, // defaults to false (current behaviour on the draft PR)\r\n   }\r\n   ```\r\n   \r\n   Follow-up PRs can then add sorting for types that the default sort doesn't handle, such as:\r\n   * lists,\r\n   * structs, to allow for multiple key sort (probably the most difficult)\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-04T22:26:07.025+0000",
                    "updated": "2020-02-04T22:26:07.025+0000",
                    "started": "2020-02-04T22:26:07.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "381919",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/389810",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#issuecomment-588627417\n \n \n   This is ready for review @paddyhoran @sunchao @andygrove. I'd appreciate some inputs/opinions on how we're handling descending sort. Not sure if `std::cmp;:Reverse` is better than sorting and reversing the whole array of indices.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-20T06:10:55.793+0000",
                    "updated": "2020-02-20T06:10:55.793+0000",
                    "started": "2020-02-20T06:10:55.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "389810",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/390800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r382709893\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n \n Review comment:\n   could you add a comment explaining why the floating point ones are commented out?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T17:32:44.593+0000",
                    "updated": "2020-02-21T17:32:44.593+0000",
                    "started": "2020-02-21T17:32:44.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390800",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/390802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r382710321\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n+        // DataType::Float64 => sort_primitive::<Float64Type>(values, v, n, descending),\n+        DataType::Date32(_) => sort_primitive::<Date32Type>(values, v, n, &options),\n+        DataType::Date64(_) => sort_primitive::<Date64Type>(values, v, n, &options),\n+        DataType::Time32(Second) => {\n+            sort_primitive::<Time32SecondType>(values, v, n, &options)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            sort_primitive::<Time32MillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            sort_primitive::<Time64MicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            sort_primitive::<Time64NanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            sort_primitive::<TimestampSecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            sort_primitive::<TimestampMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            sort_primitive::<TimestampMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            sort_primitive::<TimestampNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            sort_primitive::<IntervalYearMonthType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            sort_primitive::<IntervalDayTimeType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            sort_primitive::<DurationSecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            sort_primitive::<DurationMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            sort_primitive::<DurationMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            sort_primitive::<DurationNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Utf8 => sort_string(values, v, n, &options),\n+        t @ _ => Err(ArrowError::ComputeError(format!(\n+            \"Sort not supported for data type {:?}\",\n+            t\n+        ))),\n+    }\n+}\n+\n+/// Options that define how sort kernels should behave\n+#[derive(Clone)]\n+pub struct SortOptions {\n+    /// Whether to sort in descending order\n+    descending: bool,\n+    /// Whether to sort nulls first\n+    nulls_first: bool,\n+}\n+\n+impl Default for SortOptions {\n+    fn default() -> Self {\n+        Self {\n+            descending: false,\n+            nulls_first: false,\n+        }\n+    }\n+}\n+\n+/// Sort primitive values\n+fn sort_primitive<T>(\n+    values: &ArrayRef,\n+    value_indices: Vec<usize>,\n+    null_indices: Vec<u32>,\n+    options: &SortOptions,\n+) -> Result<UInt32Array>\n+where\n+    T: ArrowPrimitiveType,\n+    T::Native: std::cmp::Ord,\n+{\n+    let values = values.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n \n Review comment:\n   Can we use `expect` instead of `unwrap`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T17:32:44.596+0000",
                    "updated": "2020-02-21T17:32:44.596+0000",
                    "started": "2020-02-21T17:32:44.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390802",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/390801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r382711101\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n+        // DataType::Float64 => sort_primitive::<Float64Type>(values, v, n, descending),\n+        DataType::Date32(_) => sort_primitive::<Date32Type>(values, v, n, &options),\n+        DataType::Date64(_) => sort_primitive::<Date64Type>(values, v, n, &options),\n+        DataType::Time32(Second) => {\n+            sort_primitive::<Time32SecondType>(values, v, n, &options)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            sort_primitive::<Time32MillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            sort_primitive::<Time64MicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            sort_primitive::<Time64NanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            sort_primitive::<TimestampSecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            sort_primitive::<TimestampMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            sort_primitive::<TimestampMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            sort_primitive::<TimestampNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            sort_primitive::<IntervalYearMonthType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            sort_primitive::<IntervalDayTimeType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            sort_primitive::<DurationSecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            sort_primitive::<DurationMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            sort_primitive::<DurationMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            sort_primitive::<DurationNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Utf8 => sort_string(values, v, n, &options),\n+        t @ _ => Err(ArrowError::ComputeError(format!(\n+            \"Sort not supported for data type {:?}\",\n+            t\n+        ))),\n+    }\n+}\n+\n+/// Options that define how sort kernels should behave\n+#[derive(Clone)]\n+pub struct SortOptions {\n+    /// Whether to sort in descending order\n+    descending: bool,\n+    /// Whether to sort nulls first\n+    nulls_first: bool,\n+}\n+\n+impl Default for SortOptions {\n+    fn default() -> Self {\n+        Self {\n+            descending: false,\n+            nulls_first: false,\n+        }\n+    }\n+}\n+\n+/// Sort primitive values\n+fn sort_primitive<T>(\n+    values: &ArrayRef,\n+    value_indices: Vec<usize>,\n+    null_indices: Vec<u32>,\n+    options: &SortOptions,\n+) -> Result<UInt32Array>\n+where\n+    T: ArrowPrimitiveType,\n+    T::Native: std::cmp::Ord,\n+{\n+    let values = values.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    // create tuples that are used for sorting\n+    let mut valids = value_indices\n+        .into_iter()\n+        .map(|index| (index as u32, values.value(index)))\n+        .collect::<Vec<(u32, T::Native)>>();\n+    let mut nulls = null_indices;\n+    if !options.descending {\n \n Review comment:\n   In fact, I think I would prefer the options to have a field named `ascending` rather than `descending` since ascending is typically the default.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T17:32:44.596+0000",
                    "updated": "2020-02-21T17:32:44.596+0000",
                    "started": "2020-02-21T17:32:44.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390801",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/390803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r382710828\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n+        // DataType::Float64 => sort_primitive::<Float64Type>(values, v, n, descending),\n+        DataType::Date32(_) => sort_primitive::<Date32Type>(values, v, n, &options),\n+        DataType::Date64(_) => sort_primitive::<Date64Type>(values, v, n, &options),\n+        DataType::Time32(Second) => {\n+            sort_primitive::<Time32SecondType>(values, v, n, &options)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            sort_primitive::<Time32MillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            sort_primitive::<Time64MicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            sort_primitive::<Time64NanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            sort_primitive::<TimestampSecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            sort_primitive::<TimestampMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            sort_primitive::<TimestampMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            sort_primitive::<TimestampNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            sort_primitive::<IntervalYearMonthType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            sort_primitive::<IntervalDayTimeType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            sort_primitive::<DurationSecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            sort_primitive::<DurationMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            sort_primitive::<DurationMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            sort_primitive::<DurationNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Utf8 => sort_string(values, v, n, &options),\n+        t @ _ => Err(ArrowError::ComputeError(format!(\n+            \"Sort not supported for data type {:?}\",\n+            t\n+        ))),\n+    }\n+}\n+\n+/// Options that define how sort kernels should behave\n+#[derive(Clone)]\n+pub struct SortOptions {\n+    /// Whether to sort in descending order\n+    descending: bool,\n+    /// Whether to sort nulls first\n+    nulls_first: bool,\n+}\n+\n+impl Default for SortOptions {\n+    fn default() -> Self {\n+        Self {\n+            descending: false,\n+            nulls_first: false,\n+        }\n+    }\n+}\n+\n+/// Sort primitive values\n+fn sort_primitive<T>(\n+    values: &ArrayRef,\n+    value_indices: Vec<usize>,\n+    null_indices: Vec<u32>,\n+    options: &SortOptions,\n+) -> Result<UInt32Array>\n+where\n+    T: ArrowPrimitiveType,\n+    T::Native: std::cmp::Ord,\n+{\n+    let values = values.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    // create tuples that are used for sorting\n+    let mut valids = value_indices\n+        .into_iter()\n+        .map(|index| (index as u32, values.value(index)))\n+        .collect::<Vec<(u32, T::Native)>>();\n+    let mut nulls = null_indices;\n+    if !options.descending {\n \n Review comment:\n   I think this would be more readable if the if were inverted to remove the `!` from the condition?\r\n   \r\n   ```rust\r\n   if options.decending {\r\n   } else {\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-21T17:32:44.600+0000",
                    "updated": "2020-02-21T17:32:44.600+0000",
                    "started": "2020-02-21T17:32:44.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "390803",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/391307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r382983283\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n \n Review comment:\n   I think I was trigger-happy when thinking that this was ready for review. Floats can't be sorted in the default way, so I need `ordered_float` or an equivalent. I left floats commented out because I wanted to investigate this.\r\n   \r\n   I have at least 2 options, depending on which you prefer;\r\n   \r\n   1. leave a note and open a JIRA to support floats\r\n   2. keep this PR open for longer so I can add the float support.\r\n   \r\n   I'll try the latter in the interim.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-23T08:32:21.415+0000",
                    "updated": "2020-02-23T08:32:21.415+0000",
                    "started": "2020-02-23T08:32:21.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391307",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/391308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r382983548\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n+        // DataType::Float64 => sort_primitive::<Float64Type>(values, v, n, descending),\n+        DataType::Date32(_) => sort_primitive::<Date32Type>(values, v, n, &options),\n+        DataType::Date64(_) => sort_primitive::<Date64Type>(values, v, n, &options),\n+        DataType::Time32(Second) => {\n+            sort_primitive::<Time32SecondType>(values, v, n, &options)\n+        }\n+        DataType::Time32(Millisecond) => {\n+            sort_primitive::<Time32MillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Microsecond) => {\n+            sort_primitive::<Time64MicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Time64(Nanosecond) => {\n+            sort_primitive::<Time64NanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Second, _) => {\n+            sort_primitive::<TimestampSecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Millisecond, _) => {\n+            sort_primitive::<TimestampMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Microsecond, _) => {\n+            sort_primitive::<TimestampMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Timestamp(Nanosecond, _) => {\n+            sort_primitive::<TimestampNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::YearMonth) => {\n+            sort_primitive::<IntervalYearMonthType>(values, v, n, &options)\n+        }\n+        DataType::Interval(IntervalUnit::DayTime) => {\n+            sort_primitive::<IntervalDayTimeType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Second) => {\n+            sort_primitive::<DurationSecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Millisecond) => {\n+            sort_primitive::<DurationMillisecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Microsecond) => {\n+            sort_primitive::<DurationMicrosecondType>(values, v, n, &options)\n+        }\n+        DataType::Duration(TimeUnit::Nanosecond) => {\n+            sort_primitive::<DurationNanosecondType>(values, v, n, &options)\n+        }\n+        DataType::Utf8 => sort_string(values, v, n, &options),\n+        t @ _ => Err(ArrowError::ComputeError(format!(\n+            \"Sort not supported for data type {:?}\",\n+            t\n+        ))),\n+    }\n+}\n+\n+/// Options that define how sort kernels should behave\n+#[derive(Clone)]\n+pub struct SortOptions {\n+    /// Whether to sort in descending order\n+    descending: bool,\n+    /// Whether to sort nulls first\n+    nulls_first: bool,\n+}\n+\n+impl Default for SortOptions {\n+    fn default() -> Self {\n+        Self {\n+            descending: false,\n+            nulls_first: false,\n+        }\n+    }\n+}\n+\n+/// Sort primitive values\n+fn sort_primitive<T>(\n+    values: &ArrayRef,\n+    value_indices: Vec<usize>,\n+    null_indices: Vec<u32>,\n+    options: &SortOptions,\n+) -> Result<UInt32Array>\n+where\n+    T: ArrowPrimitiveType,\n+    T::Native: std::cmp::Ord,\n+{\n+    let values = values.as_any().downcast_ref::<PrimitiveArray<T>>().unwrap();\n+    // create tuples that are used for sorting\n+    let mut valids = value_indices\n+        .into_iter()\n+        .map(|index| (index as u32, values.value(index)))\n+        .collect::<Vec<(u32, T::Native)>>();\n+    let mut nulls = null_indices;\n+    if !options.descending {\n \n Review comment:\n   My justification for using `descending` instead of `ascending` is that the default behaviour should not require passing options. As boolean's default is false, I'd rather the caller opt in explicitly to sorting in a descending order.\r\n   I could set the default to ascending, but I didn't like the below as it'd be less obvious:\r\n   \r\n   ```rust\r\n   impl Default for SortOptions {\r\n       fn default() -> Self {\r\n           Self {\r\n               ascending: true,\r\n               nulls_first: false,\r\n           }\r\n       }\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-23T08:35:50.441+0000",
                    "updated": "2020-02-23T08:35:50.441+0000",
                    "started": "2020-02-23T08:35:50.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391308",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/391385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r383018568\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n \n Review comment:\n   Having a separate JIRA for sorting floats sounds good to me.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-23T16:27:13.132+0000",
                    "updated": "2020-02-23T16:27:13.132+0000",
                    "started": "2020-02-23T16:27:13.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391385",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/391439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#discussion_r383036521\n \n \n\n ##########\n File path: rust/arrow/src/compute/kernels/sort.rs\n ##########\n @@ -0,0 +1,295 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n+pub fn sort(values: &ArrayRef, options: Option<SortOptions>) -> Result<ArrayRef> {\n+    let indices = sort_to_indices(values, options)?;\n+    take(values, &indices, None)\n+}\n+\n+/// Sort elements from `ArrayRef` into an unsigned integer (`UInt32Array`) of indices\n+pub fn sort_to_indices(\n+    values: &ArrayRef,\n+    options: Option<SortOptions>,\n+) -> Result<UInt32Array> {\n+    let options = options.unwrap_or(Default::default());\n+    let range = values.offset()..values.len();\n+    let (v, n): (Vec<usize>, Vec<usize>) =\n+        range.partition(|index| values.is_valid(*index));\n+    let n = n.into_iter().map(|i| i as u32).collect();\n+    match values.data_type() {\n+        DataType::Boolean => sort_primitive::<BooleanType>(values, v, n, &options),\n+        DataType::Int8 => sort_primitive::<Int8Type>(values, v, n, &options),\n+        DataType::Int16 => sort_primitive::<Int16Type>(values, v, n, &options),\n+        DataType::Int32 => sort_primitive::<Int32Type>(values, v, n, &options),\n+        DataType::Int64 => sort_primitive::<Int64Type>(values, v, n, &options),\n+        DataType::UInt8 => sort_primitive::<UInt8Type>(values, v, n, &options),\n+        DataType::UInt16 => sort_primitive::<UInt16Type>(values, v, n, &options),\n+        DataType::UInt32 => sort_primitive::<UInt32Type>(values, v, n, &options),\n+        DataType::UInt64 => sort_primitive::<UInt64Type>(values, v, n, &options),\n+        // DataType::Float32 => sort_primitive::<Float32Type>(values, v, n, descending),\n \n Review comment:\n   https://issues.apache.org/jira/browse/ARROW-7924\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-23T20:38:20.450+0000",
                    "updated": "2020-02-23T20:38:20.450+0000",
                    "started": "2020-02-23T20:38:20.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "391439",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/414480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#issuecomment-607625312\n \n \n   I haven't had time to complete this, I got stuck while writing a macro to help create test cases. I'll ask for help online when I get enough time. I'd like to complete sort capabilities before 1.0.0\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T05:13:21.358+0000",
                    "updated": "2020-04-02T05:13:21.358+0000",
                    "started": "2020-04-02T05:13:21.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414480",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/424333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #6306: ARROW-7705: [Rust] Initial sort implementation\nURL: https://github.com/apache/arrow/pull/6306#issuecomment-615388820\n \n \n   @andygrove I've addressed the review comments, and have added tests.\r\n   I tried creating a macro that allows me to reuse the same inputs for different array types, but wasn't able to, so the tests are rather repetitive.\r\n   \r\n   PTAL @paddyhoran \r\n   \r\n   I'll work on `sort` support for other array types, with the aim of completing the work before `1.0.0`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-17T18:08:29.721+0000",
                    "updated": "2020-04-17T18:08:29.721+0000",
                    "started": "2020-04-17T18:08:29.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "424333",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/426818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #6306:\nURL: https://github.com/apache/arrow/pull/6306#discussion_r414234200\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -0,0 +1,671 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n\nReview comment:\n       nit: and -> an\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T01:45:06.843+0000",
                    "updated": "2020-04-24T01:45:06.843+0000",
                    "started": "2020-04-24T01:45:06.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426818",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/427003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #6306:\nURL: https://github.com/apache/arrow/pull/6306#discussion_r414662522\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -0,0 +1,671 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n\nReview comment:\n       ```suggestion\r\n   /// Returns an `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T15:25:32.208+0000",
                    "updated": "2020-04-24T15:25:32.208+0000",
                    "started": "2020-04-24T15:25:32.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427003",
                    "issueId": "13281989"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/worklog/427006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #6306:\nURL: https://github.com/apache/arrow/pull/6306#discussion_r414663303\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -0,0 +1,671 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines sort kernel for `ArrayRef`\n+\n+use std::cmp::Reverse;\n+\n+use crate::array::*;\n+use crate::compute::take;\n+use crate::datatypes::*;\n+use crate::error::{ArrowError, Result};\n+\n+use TimeUnit::*;\n+\n+/// Sort the `ArrayRef` using `SortOptions`.\n+///\n+/// Performs a stable sort on values and indices, returning nulls after sorted valid values,\n+/// while preserving the order of the nulls.\n+///\n+/// Returns and `ArrowError::ComputeError(String)` if the array type is either unsupported by `sort_to_indices` or `take`.\n\nReview comment:\n       Thanks, I'll merge this after CI completes\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T15:26:31.644+0000",
                    "updated": "2020-04-24T15:26:31.644+0000",
                    "started": "2020-04-24T15:26:31.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427006",
                    "issueId": "13281989"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3759f82a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b08649c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@152d58e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@d19e25a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b45cc63[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@d20abc2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@723520e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@307c07cf[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@157fe377[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1d0934a1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46603dc9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@167218b5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Apr 26 07:20:09 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-04-26T07:20:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7705/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-01-28T16:38:37.000+0000",
        "updated": "2020-04-26T07:20:09.000+0000",
        "timeoriginalestimate": null,
        "description": "An initial sort implementation that allows sorting an array by various options (e.g. sort order). This is mainly to iterate on the design and inner workings of a sort algorithm.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Initial sort implementation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13281989/comment/17092561",
                    "id": "17092561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 6306\n[https://github.com/apache/arrow/pull/6306]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-04-26T07:20:09.542+0000",
                    "updated": "2020-04-26T07:20:09.542+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0axpk:",
        "customfield_12314139": null
    }
}