{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13312703",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703",
    "key": "ARROW-9196",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12591890",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12591890",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13312705",
                    "key": "ARROW-9198",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312705",
                    "fields": {
                        "summary": "[C++] Make string casts work on Scalar inputs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12592230",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12592230",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13313798",
                    "key": "ARROW-9253",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313798",
                    "fields": {
                        "summary": "[C++] Add vectorized \"IntegersMultipleOf\" to arrow/util/int_util.h",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12608706",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12608706",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13312705",
                    "key": "ARROW-9198",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312705",
                    "fields": {
                        "summary": "[C++] Make string casts work on Scalar inputs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12618004",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12618004",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13344604",
                    "key": "ARROW-10835",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344604",
                    "fields": {
                        "summary": "[C++] Implement scalar decimal cast kernels",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9196/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/552225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490\n\n\n   This is primarily a refactoring of the tests for \"cast\" to ensure that every case is also verified with scalar and sliced inputs through `CheckScalarUnary`. Caveat: ExtensionScalar is not implemented, so those checks aren't enabled. It should be straightforward for them to be enabled in a follow up, however.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-13T21:10:50.964+0000",
                    "updated": "2021-02-13T21:10:50.964+0000",
                    "started": "2021-02-13T21:10:50.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552225",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/552226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#issuecomment-778678809\n\n\n   https://issues.apache.org/jira/browse/ARROW-9196\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-13T21:11:04.590+0000",
                    "updated": "2021-02-13T21:11:04.590+0000",
                    "started": "2021-02-13T21:11:04.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "552226",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r576931790\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -94,26 +94,45 @@ struct Utf8Validator {\n };\n \n template <typename I, typename O>\n-struct CastBinaryToBinaryOffsets;\n+static void CastBinaryToBinaryOffsets(KernelContext* ctx, const ArrayData& input,\n\nReview comment:\n       If this is in the anonymous namespace, `static` isn't needed?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -475,1049 +207,821 @@ TEST_F(TestCast, CanCast) {\n   ExpectCannotCast(null(), {smallint()});  // FIXME missing common cast from null\n }\n \n-TEST_F(TestCast, SameTypeZeroCopy) {\n+TEST(Cast, SameTypeZeroCopy) {\n   std::shared_ptr<Array> arr = ArrayFromJSON(int32(), \"[0, null, 2, 3, 4]\");\n   ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> result, Cast(*arr, int32()));\n \n   AssertBufferSame(*arr, *result, 0);\n   AssertBufferSame(*arr, *result, 1);\n }\n \n-TEST_F(TestCast, ZeroChunks) {\n+TEST(Cast, ZeroChunks) {\n   auto chunked_i32 = std::make_shared<ChunkedArray>(ArrayVector{}, int32());\n   ASSERT_OK_AND_ASSIGN(Datum result, Cast(chunked_i32, utf8()));\n \n   ASSERT_EQ(result.kind(), Datum::CHUNKED_ARRAY);\n   AssertChunkedEqual(*result.chunked_array(), ChunkedArray({}, utf8()));\n }\n \n-TEST_F(TestCast, CastDoesNotProvideDefaultOptions) {\n+TEST(Cast, CastDoesNotProvideDefaultOptions) {\n   std::shared_ptr<Array> arr = ArrayFromJSON(int32(), \"[0, null, 2, 3, 4]\");\n   ASSERT_RAISES(Invalid, CallFunction(\"cast\", {arr}));\n }\n \n-TEST_F(TestCast, FromBoolean) {\n-  CastOptions options;\n-\n-  std::vector<bool> is_valid(20, true);\n-  is_valid[3] = false;\n-\n-  std::vector<bool> v1(is_valid.size(), true);\n-  std::vector<int32_t> e1(is_valid.size(), 1);\n-  for (size_t i = 0; i < v1.size(); ++i) {\n-    if (i % 3 == 1) {\n-      v1[i] = false;\n-      e1[i] = 0;\n-    }\n-  }\n-\n-  CheckCase<BooleanType, Int32Type>(v1, is_valid, e1, options);\n+TEST(Cast, FromBoolean) {\n+  std::string vals = \"[1, 0, null, 1, 0, 1, 1, null, 0, 0, 1]\";\n+  CheckCast(ArrayFromJSON(boolean(), vals), ArrayFromJSON(int32(), vals));\n }\n \n-TEST_F(TestCast, ToBoolean) {\n-  CastOptions options;\n+TEST(Cast, ToBoolean) {\n   for (auto type : kNumericTypes) {\n-    CheckCaseJSON(type, boolean(), \"[0, null, 127, 1, 0]\",\n-                  \"[false, null, true, true, false]\");\n+    CheckCast(ArrayFromJSON(type, \"[0, null, 127, 1, 0]\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n   }\n \n   // Check negative numbers\n-  CheckCaseJSON(int8(), boolean(), \"[0, null, 127, -1, 0]\",\n-                \"[false, null, true, true, false]\");\n-  CheckCaseJSON(float64(), boolean(), \"[0, null, 127, -1, 0]\",\n-                \"[false, null, true, true, false]\");\n+  for (auto type : {int8(), float64()}) {\n+    CheckCast(ArrayFromJSON(type, \"[0, null, 127, -1, 0]\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n+  }\n }\n \n-TEST_F(TestCast, ToIntUpcast) {\n-  CastOptions options;\n-  options.allow_int_overflow = false;\n-\n+TEST(Cast, ToIntUpcast) {\n   std::vector<bool> is_valid = {true, false, true, true, true};\n \n   // int8 to int32\n-  std::vector<int8_t> v1 = {0, 1, 127, -1, 0};\n-  std::vector<int32_t> e1 = {0, 1, 127, -1, 0};\n-  CheckCase<Int8Type, Int32Type>(v1, is_valid, e1, options);\n-\n-  // bool to int8\n-  std::vector<bool> v2 = {false, true, false, true, true};\n-  std::vector<int8_t> e2 = {0, 1, 0, 1, 1};\n-  CheckCase<BooleanType, Int8Type>(v2, is_valid, e2, options);\n+  CheckCast(ArrayFromJSON(int8(), \"[0, null, 127, -1, 0]\"),\n+            ArrayFromJSON(int32(), \"[0, null, 127, -1, 0]\"));\n \n   // uint8 to int16, no overflow/underrun\n-  std::vector<uint8_t> v3 = {0, 100, 200, 255, 0};\n-  std::vector<int16_t> e3 = {0, 100, 200, 255, 0};\n-  CheckCase<UInt8Type, Int16Type>(v3, is_valid, e3, options);\n+  CheckCast(ArrayFromJSON(uint8(), \"[0, 100, 200, 255, 0]\"),\n+            ArrayFromJSON(int16(), \"[0, 100, 200, 255, 0]\"));\n }\n \n-TEST_F(TestCast, OverflowInNullSlot) {\n-  CastOptions options;\n-  options.allow_int_overflow = false;\n-\n-  std::vector<bool> is_valid = {true, false, true, true, true};\n-\n-  std::vector<int32_t> v11 = {0, 70000, 2000, 1000, 0};\n-  std::vector<int16_t> e11 = {0, 0, 2000, 1000, 0};\n-\n-  std::shared_ptr<Array> expected;\n-  ArrayFromVector<Int16Type>(int16(), is_valid, e11, &expected);\n-\n-  auto buf = Buffer::Wrap(v11.data(), v11.size());\n-  Int32Array tmp11(5, buf, expected->null_bitmap(), -1);\n-\n-  CheckPass(tmp11, *expected, int16(), options);\n+TEST(Cast, OverflowInNullSlot) {\n+  CheckCast(ArrayFromJSON(int32(), \"[0, null, 2000, 1000, 0]\"),\n+            ArrayFromJSON(int16(), \"[0, null, 2000, 1000, 0]\"));\n\nReview comment:\n       Did you forget to call `MaskArrayWithNullsAt` in this test?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1553,221 +1057,325 @@ TEST_F(TestCast, UnsupportedTargetType) {\n                                   CallFunction(\"cast\", {arr}, &options));\n }\n \n-TEST_F(TestCast, DateTimeZeroCopy) {\n-  std::vector<bool> is_valid = {true, false, true, true, true};\n+TEST(Cast, StringToBoolean) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(ArrayFromJSON(string_type, R\"([\"False\", null, \"true\", \"True\", \"false\"])\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n \n-  std::vector<int32_t> v1 = {0, 70000, 2000, 1000, 0};\n-  std::shared_ptr<Array> arr;\n-  ArrayFromVector<Int32Type>(int32(), is_valid, v1, &arr);\n+    CheckCast(ArrayFromJSON(string_type, R\"([\"0\", null, \"1\", \"1\", \"0\"])\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n \n-  CheckZeroCopy(*arr, time32(TimeUnit::SECOND));\n-  CheckZeroCopy(*arr, date32());\n+    auto options = CastOptions::Safe(boolean());\n+    CheckCastFails(ArrayFromJSON(string_type, R\"([\"false \"])\"), options);\n+    CheckCastFails(ArrayFromJSON(string_type, R\"([\"T\"])\"), options);\n+  }\n+}\n \n-  std::vector<int64_t> v2 = {0, 70000, 2000, 1000, 0};\n-  ArrayFromVector<Int64Type>(int64(), is_valid, v2, &arr);\n+TEST(Cast, StringToInt) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    for (auto signed_type : {int8(), int16(), int32(), int64()}) {\n+      CheckCast(ArrayFromJSON(string_type, R\"([\"0\", null, \"127\", \"-1\", \"0\"])\"),\n+                ArrayFromJSON(signed_type, \"[0, null, 127, -1, 0]\"));\n+    }\n \n-  CheckZeroCopy(*arr, time64(TimeUnit::MICRO));\n-  CheckZeroCopy(*arr, date64());\n-  CheckZeroCopy(*arr, timestamp(TimeUnit::NANO));\n-  CheckZeroCopy(*arr, duration(TimeUnit::MILLI));\n-}\n+    CheckCast(\n+        ArrayFromJSON(string_type, R\"([\"2147483647\", null, \"-2147483648\", \"0\", \"0\"])\"),\n+        ArrayFromJSON(int32(), \"[2147483647, null, -2147483648, 0, 0]\"));\n \n-TEST_F(TestCast, StringToBoolean) {\n-  CastOptions options;\n+    CheckCast(ArrayFromJSON(\n+                  string_type,\n+                  R\"([\"9223372036854775807\", null, \"-9223372036854775808\", \"0\", \"0\"])\"),\n+              ArrayFromJSON(int64(),\n+                            \"[9223372036854775807, null, -9223372036854775808, 0, 0]\"));\n \n-  std::vector<bool> is_valid = {true, false, true, true, true};\n+    for (auto unsigned_type : {uint8(), uint16(), uint32(), uint64()}) {\n+      CheckCast(ArrayFromJSON(string_type, R\"([\"0\", null, \"127\", \"255\", \"0\"])\"),\n+                ArrayFromJSON(unsigned_type, \"[0, null, 127, 255, 0]\"));\n+    }\n \n-  std::vector<std::string> v1 = {\"False\", \"true\", \"true\", \"True\", \"false\"};\n-  std::vector<std::string> v2 = {\"0\", \"1\", \"1\", \"1\", \"0\"};\n-  std::vector<bool> e = {false, true, true, true, false};\n-  CheckCase<StringType, BooleanType, std::string>(utf8(), v1, is_valid, boolean(), e,\n-                                                  options);\n-  CheckCase<StringType, BooleanType, std::string>(utf8(), v2, is_valid, boolean(), e,\n-                                                  options);\n+    CheckCast(\n+        ArrayFromJSON(string_type, R\"([\"2147483647\", null, \"4294967295\", \"0\", \"0\"])\"),\n+        ArrayFromJSON(uint32(), \"[2147483647, null, 4294967295, 0, 0]\"));\n+\n+    CheckCast(ArrayFromJSON(\n+                  string_type,\n+                  R\"([\"9223372036854775807\", null, \"18446744073709551615\", \"0\", \"0\"])\"),\n+              ArrayFromJSON(uint64(),\n+                            \"[9223372036854775807, null, 18446744073709551615, 0, 0]\"));\n+\n+    for (std::string not_int8 : {\n+             \"z\",\n+             \"12 z\",\n+             \"128\",\n+             \"-129\",\n+             \"0.5\",\n+         }) {\n+      auto options = CastOptions::Safe(int8());\n+      CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_int8 + \"\\\"]\"), options);\n+    }\n \n-  // Same with LargeStringType\n-  CheckCase<LargeStringType, BooleanType, std::string>(v1, is_valid, e, options);\n+    for (std::string not_uint8 : {\n+             \"256\",\n+             \"-1\",\n+             \"0.5\",\n+         }) {\n+      auto options = CastOptions::Safe(uint8());\n+      CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_uint8 + \"\\\"]\"), options);\n+    }\n+  }\n }\n \n-TEST_F(TestCast, StringToBooleanErrors) {\n-  CastOptions options;\n-\n-  std::vector<bool> is_valid = {true};\n+TEST(Cast, StringToFloating) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    for (auto float_type : {float32(), float64()}) {\n+      auto strings =\n+          ArrayFromJSON(string_type, R\"([\"0.1\", null, \"127.3\", \"1e3\", \"200.4\", \"0.5\"])\");\n+      auto floats = ArrayFromJSON(float_type, \"[0.1, null, 127.3, 1000, 200.4, 0.5]\");\n+      CheckCast(strings, floats);\n+\n+      for (std::string not_float : {\n+               \"z\",\n+           }) {\n+        auto options = CastOptions::Safe(float32());\n+        CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_float + \"\\\"]\"), options);\n+      }\n \n-  CheckFails<StringType>({\"false \"}, is_valid, boolean(), options);\n-  CheckFails<StringType>({\"T\"}, is_valid, boolean(), options);\n-  CheckFails<LargeStringType>({\"T\"}, is_valid, boolean(), options);\n+#if !defined(_WIN32) || defined(NDEBUG)\n+      // Test that casting is locale-independent\n+      // French locale uses the comma as decimal point\n+      LocaleGuard locale_guard(\"fr_FR.UTF-8\");\n+      CheckCast(strings, floats);\n+#endif\n+    }\n+  }\n }\n \n-TEST_F(TestCast, StringToNumber) { TestCastStringToNumber<StringType>(); }\n+TEST(Cast, StringToTimestamp) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    auto strings = ArrayFromJSON(string_type, R\"([\"1970-01-01\", null, \"2000-02-29\"])\");\n \n-TEST_F(TestCast, LargeStringToNumber) { TestCastStringToNumber<LargeStringType>(); }\n+    CheckCast(strings,\n+              ArrayFromJSON(timestamp(TimeUnit::SECOND), \"[0, null, 951782400]\"));\n \n-TEST_F(TestCast, StringToNumberErrors) {\n-  CastOptions options;\n+    CheckCast(strings,\n+              ArrayFromJSON(timestamp(TimeUnit::MICRO), \"[0, null, 951782400000000]\"));\n \n-  std::vector<bool> is_valid = {true};\n+    for (auto unit :\n+         {TimeUnit::SECOND, TimeUnit::MILLI, TimeUnit::MICRO, TimeUnit::NANO}) {\n+      for (std::string not_ts : {\n+               \"\",\n+               \"xxx\",\n+           }) {\n+        auto options = CastOptions::Safe(timestamp(unit));\n+        CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_ts + \"\\\"]\"), options);\n+      }\n+    }\n+\n+    // NOTE: timestamp parsing is tested comprehensively in parsing-util-test.cc\n+  }\n+}\n \n-  CheckFails<StringType>({\"z\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"12 z\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"128\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"-129\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"0.5\"}, is_valid, int8(), options);\n+static void AssertBinaryZeroCopy(std::shared_ptr<Array> lhs, std::shared_ptr<Array> rhs) {\n+  // null bitmap and data buffers are always zero-copied\n+  AssertBufferSame(*lhs, *rhs, 0);\n+  AssertBufferSame(*lhs, *rhs, 2);\n \n-  CheckFails<StringType>({\"256\"}, is_valid, uint8(), options);\n-  CheckFails<StringType>({\"-1\"}, is_valid, uint8(), options);\n+  if (offset_bit_width(lhs->type_id()) == offset_bit_width(rhs->type_id())) {\n+    // offset buffer is zero copied if possible\n+    AssertBufferSame(*lhs, *rhs, 1);\n+    return;\n+  }\n \n-  CheckFails<StringType>({\"z\"}, is_valid, float32(), options);\n+  // offset buffers are equivalent\n+  ArrayVector offsets;\n+  for (auto array : {lhs, rhs}) {\n+    auto length = array->length();\n+    auto buffer = array->data()->buffers[1];\n+    offsets.push_back(offset_bit_width(array->type_id()) == 32\n+                          ? *Cast(Int32Array(length, buffer), int64())\n+                          : std::make_shared<Int64Array>(length, buffer));\n+  }\n+  AssertArraysEqual(*offsets[0], *offsets[1]);\n }\n \n-TEST_F(TestCast, StringToTimestamp) { TestCastStringToTimestamp<StringType>(); }\n+TEST(Cast, BinaryToString) {\n+  for (auto bin_type : {binary(), large_binary()}) {\n+    for (auto string_type : {utf8(), large_utf8()}) {\n+      // empty -> empty always works\n+      CheckCast(ArrayFromJSON(bin_type, \"[]\"), ArrayFromJSON(string_type, \"[]\"));\n \n-TEST_F(TestCast, LargeStringToTimestamp) { TestCastStringToTimestamp<LargeStringType>(); }\n+      auto invalid_utf8 = InvalidUtf8(bin_type);\n \n-TEST_F(TestCast, StringToTimestampErrors) {\n-  CastOptions options;\n+      // invalid utf-8 masked by a null bit is not an error\n+      CheckCast(MaskArrayWithNullsAt(InvalidUtf8(bin_type), {4}),\n+                MaskArrayWithNullsAt(InvalidUtf8(string_type), {4}));\n \n-  std::vector<bool> is_valid = {true};\n+      // error: invalid utf-8\n+      auto options = CastOptions::Safe(string_type);\n+      CheckCastFails(invalid_utf8, options);\n \n-  for (auto unit : {TimeUnit::SECOND, TimeUnit::MILLI, TimeUnit::MICRO, TimeUnit::NANO}) {\n-    auto type = timestamp(unit);\n-    CheckFails<StringType>({\"\"}, is_valid, type, options);\n-    CheckFails<StringType>({\"xxx\"}, is_valid, type, options);\n+      // override utf-8 check\n+      options.allow_invalid_utf8 = true;\n+      ASSERT_OK_AND_ASSIGN(auto strings, Cast(*invalid_utf8, string_type, options));\n+      ASSERT_RAISES(Invalid, strings->ValidateFull());\n+      AssertBinaryZeroCopy(invalid_utf8, strings);\n+    }\n   }\n }\n \n-TEST_F(TestCast, BinaryToString) { TestCastBinaryToBinary<BinaryType, StringType>(); }\n+TEST(Cast, BinaryOrStringToBinary) {\n+  for (auto from_type : {utf8(), large_utf8(), binary(), large_binary()}) {\n+    for (auto to_type : {binary(), large_binary()}) {\n+      // empty -> empty always works\n+      CheckCast(ArrayFromJSON(from_type, \"[]\"), ArrayFromJSON(to_type, \"[]\"));\n \n-TEST_F(TestCast, BinaryToLargeBinary) {\n-  TestCastBinaryToBinary<BinaryType, LargeBinaryType>();\n-}\n+      auto invalid_utf8 = InvalidUtf8(from_type);\n \n-TEST_F(TestCast, BinaryToLargeString) {\n-  TestCastBinaryToBinary<BinaryType, LargeStringType>();\n-}\n+      // invalid utf-8 is not an error for binary\n+      ASSERT_OK_AND_ASSIGN(auto strings, Cast(*invalid_utf8, to_type));\n+      ASSERT_OK(strings->ValidateFull());\n+      AssertBinaryZeroCopy(invalid_utf8, strings);\n \n-TEST_F(TestCast, LargeBinaryToBinary) {\n-  TestCastBinaryToBinary<LargeBinaryType, BinaryType>();\n+      // invalid utf-8 masked by a null bit is not an error\n+      CheckCast(MaskArrayWithNullsAt(InvalidUtf8(from_type), {4}),\n+                MaskArrayWithNullsAt(InvalidUtf8(to_type), {4}));\n+    }\n+  }\n }\n \n-TEST_F(TestCast, LargeBinaryToString) {\n-  TestCastBinaryToBinary<LargeBinaryType, StringType>();\n-}\n+TEST(Cast, StringToString) {\n+  for (auto from_type : {utf8(), large_utf8()}) {\n+    for (auto to_type : {utf8(), large_utf8()}) {\n+      // empty -> empty always works\n+      CheckCast(ArrayFromJSON(from_type, \"[]\"), ArrayFromJSON(to_type, \"[]\"));\n \n-TEST_F(TestCast, LargeBinaryToLargeString) {\n-  TestCastBinaryToBinary<LargeBinaryType, LargeStringType>();\n-}\n+      auto invalid_utf8 = InvalidUtf8(from_type);\n \n-TEST_F(TestCast, StringToBinary) { TestCastBinaryToBinary<StringType, BinaryType>(); }\n+      // invalid utf-8 masked by a null bit is not an error\n+      CheckCast(MaskArrayWithNullsAt(invalid_utf8, {4}),\n+                MaskArrayWithNullsAt(InvalidUtf8(to_type), {4}));\n \n-TEST_F(TestCast, StringToLargeBinary) {\n-  TestCastBinaryToBinary<StringType, LargeBinaryType>();\n+      // override utf-8 check\n+      auto options = CastOptions::Safe(to_type);\n+      options.allow_invalid_utf8 = true;\n+      // utf-8 is not checked by Cast when the origin guarantees utf-8\n+      ASSERT_OK_AND_ASSIGN(auto strings, Cast(*invalid_utf8, to_type, options));\n+      ASSERT_RAISES(Invalid, strings->ValidateFull());\n+      AssertBinaryZeroCopy(invalid_utf8, strings);\n+    }\n+  }\n }\n \n-TEST_F(TestCast, StringToLargeString) {\n-  TestCastBinaryToBinary<StringType, LargeStringType>();\n-}\n+TEST(Cast, IntToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(ArrayFromJSON(int8(), \"[0, 1, 127, -128, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"127\", \"-128\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint8(), \"[0, 1, 255, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"255\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(int16(), \"[0, 1, 32767, -32768, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"32767\", \"-32768\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint16(), \"[0, 1, 65535, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"65535\", null])\"));\n \n-TEST_F(TestCast, LargeStringToBinary) {\n-  TestCastBinaryToBinary<LargeStringType, BinaryType>();\n+    CheckCast(\n+        ArrayFromJSON(int32(), \"[0, 1, 2147483647, -2147483648, null]\"),\n+        ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"2147483647\", \"-2147483648\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint32(), \"[0, 1, 4294967295, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"4294967295\", null])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(int64(), \"[0, 1, 9223372036854775807, -9223372036854775808, null]\"),\n+        ArrayFromJSON(\n+            string_type,\n+            R\"([\"0\", \"1\", \"9223372036854775807\", \"-9223372036854775808\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint64(), \"[0, 1, 18446744073709551615, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"18446744073709551615\", null])\"));\n+  }\n }\n \n-TEST_F(TestCast, LargeStringToString) {\n-  TestCastBinaryToBinary<LargeStringType, StringType>();\n+TEST(Cast, FloatingToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(\n+        ArrayFromJSON(float32(), \"[0.0, -0.0, 1.5, -Inf, Inf, NaN, null]\"),\n+        ArrayFromJSON(string_type, R\"([\"0\", \"-0\", \"1.5\", \"-inf\", \"inf\", \"nan\", null])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(float64(), \"[0.0, -0.0, 1.5, -Inf, Inf, NaN, null]\"),\n+        ArrayFromJSON(string_type, R\"([\"0\", \"-0\", \"1.5\", \"-inf\", \"inf\", \"nan\", null])\"));\n+  }\n }\n \n-TEST_F(TestCast, LargeStringToLargeBinary) {\n-  TestCastBinaryToBinary<LargeStringType, LargeBinaryType>();\n+TEST(Cast, BooleanToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(ArrayFromJSON(boolean(), \"[true, true, false, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"true\", \"true\", \"false\", null])\"));\n+  }\n }\n \n-TEST_F(TestCast, NumberToString) { TestCastNumberToString<StringType>(); }\n+TEST(Cast, ListToPrimitive) {\n+  ASSERT_RAISES(NotImplemented,\n+                Cast(*ArrayFromJSON(list(int8()), \"[[1, 2], [3, 4]]\"), uint8()));\n \n-TEST_F(TestCast, NumberToLargeString) { TestCastNumberToString<LargeStringType>(); }\n+  ASSERT_RAISES(\n+      NotImplemented,\n+      Cast(*ArrayFromJSON(list(binary()), R\"([[\"1\", \"2\"], [\"3\", \"4\"]])\"), utf8()));\n+}\n \n-TEST_F(TestCast, BooleanToString) { TestCastBooleanToString<StringType>(); }\n+TEST(Cast, ListToList) {\n+  auto list_int32 = checked_pointer_cast<ListArray>(ArrayFromJSON(\n+      list(int32()), \"[[0], [1], null, [2, 3, 4], [5, 6], null, [], [7], [8, 9]]\"));\n \n-TEST_F(TestCast, BooleanToLargeString) { TestCastBooleanToString<LargeStringType>(); }\n+  auto list_int64 = std::make_shared<ListArray>(\n+      list(int64()), list_int32->length(), list_int32->value_offsets(),\n+      *Cast(*list_int32->values(), int64()), list_int32->null_bitmap());\n+  ASSERT_OK(list_int64->ValidateFull());\n \n-TEST_F(TestCast, ListToPrimitive) {\n-  auto from_int = ArrayFromJSON(list(int8()), \"[[1, 2], [3, 4]]\");\n-  auto from_binary = ArrayFromJSON(list(binary()), \"[[\\\"1\\\", \\\"2\\\"], [\\\"3\\\", \\\"4\\\"]]\");\n+  auto list_float32 = std::make_shared<ListArray>(\n+      list(float32()), list_int32->length(), list_int32->value_offsets(),\n+      *Cast(*list_int32->values(), float32()), list_int32->null_bitmap());\n+  ASSERT_OK(list_float32->ValidateFull());\n \n-  ASSERT_RAISES(NotImplemented, Cast(*from_int, uint8()));\n-  ASSERT_RAISES(NotImplemented, Cast(*from_binary, utf8()));\n-}\n+  CheckCast(list_int32, list_float32);\n+  CheckCast(list_float32, list_int64);\n+  CheckCast(list_int64, list_float32);\n \n-TEST_F(TestCast, ListToList) {\n-  CastOptions options;\n-  std::shared_ptr<Array> offsets;\n-\n-  std::vector<int32_t> offsets_values = {0, 1, 2, 5, 7, 7, 8, 10};\n-  std::vector<bool> offsets_is_valid = {true, true, true, true, false, true, true, true};\n-  ArrayFromVector<Int32Type>(offsets_is_valid, offsets_values, &offsets);\n-\n-  std::shared_ptr<Array> int32_plain_array =\n-      TestBase::MakeRandomArray<typename TypeTraits<Int32Type>::ArrayType>(10, 2);\n-  ASSERT_OK_AND_ASSIGN(auto int32_list_array,\n-                       ListArray::FromArrays(*offsets, *int32_plain_array, pool_));\n-\n-  ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> int64_plain_array,\n-                       Cast(*int32_plain_array, int64(), options));\n-  ASSERT_OK_AND_ASSIGN(auto int64_list_array,\n-                       ListArray::FromArrays(*offsets, *int64_plain_array, pool_));\n-\n-  ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> float64_plain_array,\n-                       Cast(*int32_plain_array, float64(), options));\n-  ASSERT_OK_AND_ASSIGN(auto float64_list_array,\n-                       ListArray::FromArrays(*offsets, *float64_plain_array, pool_));\n-\n-  CheckPass(*int32_list_array, *int64_list_array, int64_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*int32_list_array, *float64_list_array, float64_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*int64_list_array, *int32_list_array, int32_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*int64_list_array, *float64_list_array, float64_list_array->type(), options,\n-            /*check_scalar=*/false);\n-\n-  options.allow_float_truncate = true;\n-  CheckPass(*float64_list_array, *int32_list_array, int32_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*float64_list_array, *int64_list_array, int64_list_array->type(), options,\n-            /*check_scalar=*/false);\n+  CheckCast(list_int32, list_int64);\n+  CheckCast(list_float32, list_int32);\n+  CheckCast(list_int64, list_int32);\n }\n\nReview comment:\n       Can we add a simple test for `CastOptions` pass-through? e.g. a cast from `list<int32>` to `list<int16>` that would trigger overflow.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1788,134 +1396,97 @@ TEST_F(TestCast, IdentityCasts) {\n   CheckIdentityCast(date64(), \"[86400000, 0]\");\n   CheckIdentityCast(timestamp(TimeUnit::SECOND), \"[1, 2, 3, 4]\");\n \n-  {\n-    auto dict_values = ArrayFromJSON(int8(), \"[1, 2, 3]\");\n-    auto dict_type = dictionary(int8(), dict_values->type());\n-    auto dict_indices = ArrayFromJSON(int8(), \"[0, 1, 2, 0, null, 2]\");\n-    auto dict_array =\n-        std::make_shared<DictionaryArray>(dict_type, dict_indices, dict_values);\n-    CheckZeroCopy(*dict_array, dict_type);\n-  }\n+  CheckIdentityCast(dictionary(int8(), int8()), \"[1, 2, 3, 1, null, 3]\");\n }\n \n-TEST_F(TestCast, EmptyCasts) {\n+TEST(Cast, EmptyCasts) {\n   // ARROW-4766: 0-length arrays should not segfault\n-  auto CheckEmptyCast = [this](std::shared_ptr<DataType> from,\n-                               std::shared_ptr<DataType> to) {\n-    CastOptions options;\n-\n+  auto CheckCastEmpty = [](std::shared_ptr<DataType> from, std::shared_ptr<DataType> to) {\n     // Python creates array with nullptr instead of 0-length (valid) buffers.\n     auto data = ArrayData::Make(from, /* length */ 0, /* buffers */ {nullptr, nullptr});\n-    auto input = MakeArray(data);\n-    auto expected = ArrayFromJSON(to, \"[]\");\n-    CheckPass(*input, *expected, to, CastOptions{});\n+    CheckCast(MakeArray(data), ArrayFromJSON(to, \"[]\"));\n   };\n \n   for (auto numeric : kNumericTypes) {\n-    CheckEmptyCast(boolean(), numeric);\n-    CheckEmptyCast(numeric, boolean());\n+    CheckCastEmpty(boolean(), numeric);\n+    CheckCastEmpty(numeric, boolean());\n   }\n }\n \n // ----------------------------------------------------------------------\n // Test casting from NullType\n \n-template <typename TestType>\n-class TestNullCast : public TestCast {};\n-\n-typedef ::testing::Types<NullType, UInt8Type, Int8Type, UInt16Type, Int16Type, Int32Type,\n-                         UInt32Type, UInt64Type, Int64Type, FloatType, DoubleType,\n-                         Date32Type, Date64Type, FixedSizeBinaryType, BinaryType>\n-    TestTypes;\n-\n-TYPED_TEST_SUITE(TestNullCast, TestTypes);\n-\n-TYPED_TEST(TestNullCast, FromNull) {\n-  // Null casts to everything\n-  const int length = 10;\n-\n-  // Hack to get a DataType including for parametric types\n-  std::shared_ptr<DataType> out_type =\n-      TestBase::MakeRandomArray<typename TypeTraits<TypeParam>::ArrayType>(0, 0)->type();\n-\n-  NullArray arr(length);\n-\n-  ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> result, Cast(arr, out_type));\n-  ASSERT_OK(result->ValidateFull());\n-\n-  ASSERT_TRUE(result->type()->Equals(*out_type));\n-  ASSERT_EQ(length, result->length());\n-  ASSERT_EQ(length, result->null_count());\n+TEST(Cast, FromNull) {\n+  for (auto to_type : {\n+           null(),\n+           uint8(),\n+           int8(),\n+           uint16(),\n+           int16(),\n+           uint32(),\n+           int32(),\n+           uint64(),\n+           int64(),\n+           float32(),\n+           float64(),\n+           date32(),\n+           date64(),\n+           fixed_size_binary(10),\n+           binary(),\n+           utf8(),\n+       }) {\n+    ASSERT_OK_AND_ASSIGN(auto expected, MakeArrayOfNull(to_type, 10));\n+    CheckCast(std::make_shared<NullArray>(10), expected);\n+  }\n }\n \n // ----------------------------------------------------------------------\n // Test casting from DictionaryType\n \n-template <typename TestType>\n-class TestDictionaryCast : public TestCast {};\n-\n-typedef ::testing::Types<NullType, UInt8Type, Int8Type, UInt16Type, Int16Type, Int32Type,\n-                         UInt32Type, UInt64Type, Int64Type, FloatType, DoubleType,\n-                         Date32Type, Date64Type, FixedSizeBinaryType, BinaryType>\n-    TestTypes;\n+TEST(Cast, FromDictionary) {\n+  ArrayVector dictionaries;\n+  dictionaries.push_back(std::make_shared<NullArray>(5));\n \n-TYPED_TEST_SUITE(TestDictionaryCast, TestTypes);\n+  for (auto num_type : kNumericTypes) {\n+    dictionaries.push_back(ArrayFromJSON(num_type, \"[23, 12, 45, 12, null]\"));\n+  }\n \n-TYPED_TEST(TestDictionaryCast, Basic) {\n-  std::shared_ptr<Array> dict =\n-      TestBase::MakeRandomArray<typename TypeTraits<TypeParam>::ArrayType>(5, 1);\n-  for (auto index_ty : all_dictionary_index_types()) {\n-    auto indices = ArrayFromJSON(index_ty, \"[4, 0, 1, 2, 0, 4, null, 2]\");\n-    auto dict_ty = dictionary(index_ty, dict->type());\n-    auto dict_arr = *DictionaryArray::FromArrays(dict_ty, indices, dict);\n-    std::shared_ptr<Array> expected = *Take(*dict, *indices);\n+  for (auto string_type : kBaseBinaryTypes) {\n+    dictionaries.push_back(\n+        ArrayFromJSON(string_type, R\"([\"foo\", \"bar\", \"baz\", \"foo\", null])\"));\n+  }\n \n-    this->CheckPass(*dict_arr, *expected, expected->type(), CastOptions::Safe(),\n-                    /*check_scalar=*/false);\n+  for (auto dict : dictionaries) {\n+    for (auto index_type : all_dictionary_index_types()) {\n\nReview comment:\n       Nit: should we have `kDictionaryIndexTypes`?\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -556,6 +556,12 @@ Status CastImpl(const ScalarType& from, StringScalar* to) {\n   return Status::OK();\n }\n \n+Status CastImpl(const Decimal128Scalar& from, StringScalar* to) {\n\nReview comment:\n       Should decimal256 be handled here as well?\n\n##########\nFile path: cpp/src/arrow/testing/gtest_util.h\n##########\n@@ -358,6 +354,14 @@ void ArrayFromVector(const std::vector<C_TYPE>& values, std::shared_ptr<Array>*\n   ArrayFromVector<TYPE, C_TYPE>(type, values, out);\n }\n \n+template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n+std::shared_ptr<Array> ArrayFromVector(std::vector<bool> is_valid,\n+                                       std::vector<C_TYPE> values) {\n+  std::shared_ptr<Array> out;\n+  ArrayFromVector<TYPE, C_TYPE>(is_valid, values);\n+  return out;\n\nReview comment:\n       Does this work? It looks like `out` isn't mutated in this function.\n\n##########\nFile path: cpp/src/arrow/type_traits.h\n##########\n@@ -991,4 +991,20 @@ static inline bool is_nested(Type::type type_id) {\n   return false;\n }\n \n+static inline int offset_bit_width(Type::type type_id) {\n+  switch (type_id) {\n+    case Type::STRING:\n+    case Type::BINARY:\n+    case Type::LIST:\n+      return 32;\n+    case Type::LARGE_STRING:\n+    case Type::LARGE_BINARY:\n+    case Type::LARGE_LIST:\n+      return 64;\n\nReview comment:\n       May want to add `MAP` and `DENSE_UNION` here?\n\n##########\nFile path: cpp/src/arrow/testing/gtest_util.h\n##########\n@@ -44,16 +44,12 @@\n // NOTE: failing must be inline in the macros below, to get correct file / line number\n // reporting on test failures.\n \n-#define ASSERT_RAISES(ENUM, expr)                                                     \\\n-  do {                                                                                \\\n-    auto _res = (expr);                                                               \\\n-    ::arrow::Status _st = ::arrow::internal::GenericToStatus(_res);                   \\\n-    if (!_st.Is##ENUM()) {                                                            \\\n-      FAIL() << \"Expected '\" ARROW_STRINGIFY(expr) \"' to fail with \" ARROW_STRINGIFY( \\\n-                    ENUM) \", but got \"                                                \\\n-             << _st.ToString();                                                       \\\n-    }                                                                                 \\\n-  } while (false)\n+#define ASSERT_RAISES(ENUM, expr)                                                 \\\n\nReview comment:\n       Perhaps add a comment above that the `for` loop trick allows `ASSERT_RAISES` to be followed by a `<<` operator.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T16:41:35.033+0000",
                    "updated": "2021-02-16T16:41:35.033+0000",
                    "started": "2021-02-16T16:41:35.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553057",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r576970451\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_string.cc\n##########\n@@ -94,26 +94,45 @@ struct Utf8Validator {\n };\n \n template <typename I, typename O>\n-struct CastBinaryToBinaryOffsets;\n+static void CastBinaryToBinaryOffsets(KernelContext* ctx, const ArrayData& input,\n\nReview comment:\n       yes, will remove\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T16:42:33.667+0000",
                    "updated": "2021-02-16T16:42:33.667+0000",
                    "started": "2021-02-16T16:42:33.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553060",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r576970691\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -556,6 +556,12 @@ Status CastImpl(const ScalarType& from, StringScalar* to) {\n   return Status::OK();\n }\n \n+Status CastImpl(const Decimal128Scalar& from, StringScalar* to) {\n\nReview comment:\n       alright\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T16:42:46.591+0000",
                    "updated": "2021-02-16T16:42:46.591+0000",
                    "started": "2021-02-16T16:42:46.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553061",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r576970778\n\n\n\n##########\nFile path: cpp/src/arrow/testing/gtest_util.h\n##########\n@@ -44,16 +44,12 @@\n // NOTE: failing must be inline in the macros below, to get correct file / line number\n // reporting on test failures.\n \n-#define ASSERT_RAISES(ENUM, expr)                                                     \\\n-  do {                                                                                \\\n-    auto _res = (expr);                                                               \\\n-    ::arrow::Status _st = ::arrow::internal::GenericToStatus(_res);                   \\\n-    if (!_st.Is##ENUM()) {                                                            \\\n-      FAIL() << \"Expected '\" ARROW_STRINGIFY(expr) \"' to fail with \" ARROW_STRINGIFY( \\\n-                    ENUM) \", but got \"                                                \\\n-             << _st.ToString();                                                       \\\n-    }                                                                                 \\\n-  } while (false)\n+#define ASSERT_RAISES(ENUM, expr)                                                 \\\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T16:43:01.411+0000",
                    "updated": "2021-02-16T16:43:01.411+0000",
                    "started": "2021-02-16T16:43:01.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553062",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r576971302\n\n\n\n##########\nFile path: cpp/src/arrow/testing/gtest_util.h\n##########\n@@ -358,6 +354,14 @@ void ArrayFromVector(const std::vector<C_TYPE>& values, std::shared_ptr<Array>*\n   ArrayFromVector<TYPE, C_TYPE>(type, values, out);\n }\n \n+template <typename TYPE, typename C_TYPE = typename TYPE::c_type>\n+std::shared_ptr<Array> ArrayFromVector(std::vector<bool> is_valid,\n+                                       std::vector<C_TYPE> values) {\n+  std::shared_ptr<Array> out;\n+  ArrayFromVector<TYPE, C_TYPE>(is_valid, values);\n+  return out;\n\nReview comment:\n       Doesn't work; I started writing this overload and didn't end up using it. Will remove\n\n##########\nFile path: cpp/src/arrow/type_traits.h\n##########\n@@ -991,4 +991,20 @@ static inline bool is_nested(Type::type type_id) {\n   return false;\n }\n \n+static inline int offset_bit_width(Type::type type_id) {\n+  switch (type_id) {\n+    case Type::STRING:\n+    case Type::BINARY:\n+    case Type::LIST:\n+      return 32;\n+    case Type::LARGE_STRING:\n+    case Type::LARGE_BINARY:\n+    case Type::LARGE_LIST:\n+      return 64;\n\nReview comment:\n       ah, good catch\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T16:43:54.408+0000",
                    "updated": "2021-02-16T16:43:54.408+0000",
                    "started": "2021-02-16T16:43:54.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553063",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r576971785\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -475,1049 +207,821 @@ TEST_F(TestCast, CanCast) {\n   ExpectCannotCast(null(), {smallint()});  // FIXME missing common cast from null\n }\n \n-TEST_F(TestCast, SameTypeZeroCopy) {\n+TEST(Cast, SameTypeZeroCopy) {\n   std::shared_ptr<Array> arr = ArrayFromJSON(int32(), \"[0, null, 2, 3, 4]\");\n   ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> result, Cast(*arr, int32()));\n \n   AssertBufferSame(*arr, *result, 0);\n   AssertBufferSame(*arr, *result, 1);\n }\n \n-TEST_F(TestCast, ZeroChunks) {\n+TEST(Cast, ZeroChunks) {\n   auto chunked_i32 = std::make_shared<ChunkedArray>(ArrayVector{}, int32());\n   ASSERT_OK_AND_ASSIGN(Datum result, Cast(chunked_i32, utf8()));\n \n   ASSERT_EQ(result.kind(), Datum::CHUNKED_ARRAY);\n   AssertChunkedEqual(*result.chunked_array(), ChunkedArray({}, utf8()));\n }\n \n-TEST_F(TestCast, CastDoesNotProvideDefaultOptions) {\n+TEST(Cast, CastDoesNotProvideDefaultOptions) {\n   std::shared_ptr<Array> arr = ArrayFromJSON(int32(), \"[0, null, 2, 3, 4]\");\n   ASSERT_RAISES(Invalid, CallFunction(\"cast\", {arr}));\n }\n \n-TEST_F(TestCast, FromBoolean) {\n-  CastOptions options;\n-\n-  std::vector<bool> is_valid(20, true);\n-  is_valid[3] = false;\n-\n-  std::vector<bool> v1(is_valid.size(), true);\n-  std::vector<int32_t> e1(is_valid.size(), 1);\n-  for (size_t i = 0; i < v1.size(); ++i) {\n-    if (i % 3 == 1) {\n-      v1[i] = false;\n-      e1[i] = 0;\n-    }\n-  }\n-\n-  CheckCase<BooleanType, Int32Type>(v1, is_valid, e1, options);\n+TEST(Cast, FromBoolean) {\n+  std::string vals = \"[1, 0, null, 1, 0, 1, 1, null, 0, 0, 1]\";\n+  CheckCast(ArrayFromJSON(boolean(), vals), ArrayFromJSON(int32(), vals));\n }\n \n-TEST_F(TestCast, ToBoolean) {\n-  CastOptions options;\n+TEST(Cast, ToBoolean) {\n   for (auto type : kNumericTypes) {\n-    CheckCaseJSON(type, boolean(), \"[0, null, 127, 1, 0]\",\n-                  \"[false, null, true, true, false]\");\n+    CheckCast(ArrayFromJSON(type, \"[0, null, 127, 1, 0]\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n   }\n \n   // Check negative numbers\n-  CheckCaseJSON(int8(), boolean(), \"[0, null, 127, -1, 0]\",\n-                \"[false, null, true, true, false]\");\n-  CheckCaseJSON(float64(), boolean(), \"[0, null, 127, -1, 0]\",\n-                \"[false, null, true, true, false]\");\n+  for (auto type : {int8(), float64()}) {\n+    CheckCast(ArrayFromJSON(type, \"[0, null, 127, -1, 0]\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n+  }\n }\n \n-TEST_F(TestCast, ToIntUpcast) {\n-  CastOptions options;\n-  options.allow_int_overflow = false;\n-\n+TEST(Cast, ToIntUpcast) {\n   std::vector<bool> is_valid = {true, false, true, true, true};\n \n   // int8 to int32\n-  std::vector<int8_t> v1 = {0, 1, 127, -1, 0};\n-  std::vector<int32_t> e1 = {0, 1, 127, -1, 0};\n-  CheckCase<Int8Type, Int32Type>(v1, is_valid, e1, options);\n-\n-  // bool to int8\n-  std::vector<bool> v2 = {false, true, false, true, true};\n-  std::vector<int8_t> e2 = {0, 1, 0, 1, 1};\n-  CheckCase<BooleanType, Int8Type>(v2, is_valid, e2, options);\n+  CheckCast(ArrayFromJSON(int8(), \"[0, null, 127, -1, 0]\"),\n+            ArrayFromJSON(int32(), \"[0, null, 127, -1, 0]\"));\n \n   // uint8 to int16, no overflow/underrun\n-  std::vector<uint8_t> v3 = {0, 100, 200, 255, 0};\n-  std::vector<int16_t> e3 = {0, 100, 200, 255, 0};\n-  CheckCase<UInt8Type, Int16Type>(v3, is_valid, e3, options);\n+  CheckCast(ArrayFromJSON(uint8(), \"[0, 100, 200, 255, 0]\"),\n+            ArrayFromJSON(int16(), \"[0, 100, 200, 255, 0]\"));\n }\n \n-TEST_F(TestCast, OverflowInNullSlot) {\n-  CastOptions options;\n-  options.allow_int_overflow = false;\n-\n-  std::vector<bool> is_valid = {true, false, true, true, true};\n-\n-  std::vector<int32_t> v11 = {0, 70000, 2000, 1000, 0};\n-  std::vector<int16_t> e11 = {0, 0, 2000, 1000, 0};\n-\n-  std::shared_ptr<Array> expected;\n-  ArrayFromVector<Int16Type>(int16(), is_valid, e11, &expected);\n-\n-  auto buf = Buffer::Wrap(v11.data(), v11.size());\n-  Int32Array tmp11(5, buf, expected->null_bitmap(), -1);\n-\n-  CheckPass(tmp11, *expected, int16(), options);\n+TEST(Cast, OverflowInNullSlot) {\n+  CheckCast(ArrayFromJSON(int32(), \"[0, null, 2000, 1000, 0]\"),\n+            ArrayFromJSON(int16(), \"[0, null, 2000, 1000, 0]\"));\n\nReview comment:\n       Will do\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1553,221 +1057,325 @@ TEST_F(TestCast, UnsupportedTargetType) {\n                                   CallFunction(\"cast\", {arr}, &options));\n }\n \n-TEST_F(TestCast, DateTimeZeroCopy) {\n-  std::vector<bool> is_valid = {true, false, true, true, true};\n+TEST(Cast, StringToBoolean) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(ArrayFromJSON(string_type, R\"([\"False\", null, \"true\", \"True\", \"false\"])\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n \n-  std::vector<int32_t> v1 = {0, 70000, 2000, 1000, 0};\n-  std::shared_ptr<Array> arr;\n-  ArrayFromVector<Int32Type>(int32(), is_valid, v1, &arr);\n+    CheckCast(ArrayFromJSON(string_type, R\"([\"0\", null, \"1\", \"1\", \"0\"])\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n \n-  CheckZeroCopy(*arr, time32(TimeUnit::SECOND));\n-  CheckZeroCopy(*arr, date32());\n+    auto options = CastOptions::Safe(boolean());\n+    CheckCastFails(ArrayFromJSON(string_type, R\"([\"false \"])\"), options);\n+    CheckCastFails(ArrayFromJSON(string_type, R\"([\"T\"])\"), options);\n+  }\n+}\n \n-  std::vector<int64_t> v2 = {0, 70000, 2000, 1000, 0};\n-  ArrayFromVector<Int64Type>(int64(), is_valid, v2, &arr);\n+TEST(Cast, StringToInt) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    for (auto signed_type : {int8(), int16(), int32(), int64()}) {\n+      CheckCast(ArrayFromJSON(string_type, R\"([\"0\", null, \"127\", \"-1\", \"0\"])\"),\n+                ArrayFromJSON(signed_type, \"[0, null, 127, -1, 0]\"));\n+    }\n \n-  CheckZeroCopy(*arr, time64(TimeUnit::MICRO));\n-  CheckZeroCopy(*arr, date64());\n-  CheckZeroCopy(*arr, timestamp(TimeUnit::NANO));\n-  CheckZeroCopy(*arr, duration(TimeUnit::MILLI));\n-}\n+    CheckCast(\n+        ArrayFromJSON(string_type, R\"([\"2147483647\", null, \"-2147483648\", \"0\", \"0\"])\"),\n+        ArrayFromJSON(int32(), \"[2147483647, null, -2147483648, 0, 0]\"));\n \n-TEST_F(TestCast, StringToBoolean) {\n-  CastOptions options;\n+    CheckCast(ArrayFromJSON(\n+                  string_type,\n+                  R\"([\"9223372036854775807\", null, \"-9223372036854775808\", \"0\", \"0\"])\"),\n+              ArrayFromJSON(int64(),\n+                            \"[9223372036854775807, null, -9223372036854775808, 0, 0]\"));\n \n-  std::vector<bool> is_valid = {true, false, true, true, true};\n+    for (auto unsigned_type : {uint8(), uint16(), uint32(), uint64()}) {\n+      CheckCast(ArrayFromJSON(string_type, R\"([\"0\", null, \"127\", \"255\", \"0\"])\"),\n+                ArrayFromJSON(unsigned_type, \"[0, null, 127, 255, 0]\"));\n+    }\n \n-  std::vector<std::string> v1 = {\"False\", \"true\", \"true\", \"True\", \"false\"};\n-  std::vector<std::string> v2 = {\"0\", \"1\", \"1\", \"1\", \"0\"};\n-  std::vector<bool> e = {false, true, true, true, false};\n-  CheckCase<StringType, BooleanType, std::string>(utf8(), v1, is_valid, boolean(), e,\n-                                                  options);\n-  CheckCase<StringType, BooleanType, std::string>(utf8(), v2, is_valid, boolean(), e,\n-                                                  options);\n+    CheckCast(\n+        ArrayFromJSON(string_type, R\"([\"2147483647\", null, \"4294967295\", \"0\", \"0\"])\"),\n+        ArrayFromJSON(uint32(), \"[2147483647, null, 4294967295, 0, 0]\"));\n+\n+    CheckCast(ArrayFromJSON(\n+                  string_type,\n+                  R\"([\"9223372036854775807\", null, \"18446744073709551615\", \"0\", \"0\"])\"),\n+              ArrayFromJSON(uint64(),\n+                            \"[9223372036854775807, null, 18446744073709551615, 0, 0]\"));\n+\n+    for (std::string not_int8 : {\n+             \"z\",\n+             \"12 z\",\n+             \"128\",\n+             \"-129\",\n+             \"0.5\",\n+         }) {\n+      auto options = CastOptions::Safe(int8());\n+      CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_int8 + \"\\\"]\"), options);\n+    }\n \n-  // Same with LargeStringType\n-  CheckCase<LargeStringType, BooleanType, std::string>(v1, is_valid, e, options);\n+    for (std::string not_uint8 : {\n+             \"256\",\n+             \"-1\",\n+             \"0.5\",\n+         }) {\n+      auto options = CastOptions::Safe(uint8());\n+      CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_uint8 + \"\\\"]\"), options);\n+    }\n+  }\n }\n \n-TEST_F(TestCast, StringToBooleanErrors) {\n-  CastOptions options;\n-\n-  std::vector<bool> is_valid = {true};\n+TEST(Cast, StringToFloating) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    for (auto float_type : {float32(), float64()}) {\n+      auto strings =\n+          ArrayFromJSON(string_type, R\"([\"0.1\", null, \"127.3\", \"1e3\", \"200.4\", \"0.5\"])\");\n+      auto floats = ArrayFromJSON(float_type, \"[0.1, null, 127.3, 1000, 200.4, 0.5]\");\n+      CheckCast(strings, floats);\n+\n+      for (std::string not_float : {\n+               \"z\",\n+           }) {\n+        auto options = CastOptions::Safe(float32());\n+        CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_float + \"\\\"]\"), options);\n+      }\n \n-  CheckFails<StringType>({\"false \"}, is_valid, boolean(), options);\n-  CheckFails<StringType>({\"T\"}, is_valid, boolean(), options);\n-  CheckFails<LargeStringType>({\"T\"}, is_valid, boolean(), options);\n+#if !defined(_WIN32) || defined(NDEBUG)\n+      // Test that casting is locale-independent\n+      // French locale uses the comma as decimal point\n+      LocaleGuard locale_guard(\"fr_FR.UTF-8\");\n+      CheckCast(strings, floats);\n+#endif\n+    }\n+  }\n }\n \n-TEST_F(TestCast, StringToNumber) { TestCastStringToNumber<StringType>(); }\n+TEST(Cast, StringToTimestamp) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    auto strings = ArrayFromJSON(string_type, R\"([\"1970-01-01\", null, \"2000-02-29\"])\");\n \n-TEST_F(TestCast, LargeStringToNumber) { TestCastStringToNumber<LargeStringType>(); }\n+    CheckCast(strings,\n+              ArrayFromJSON(timestamp(TimeUnit::SECOND), \"[0, null, 951782400]\"));\n \n-TEST_F(TestCast, StringToNumberErrors) {\n-  CastOptions options;\n+    CheckCast(strings,\n+              ArrayFromJSON(timestamp(TimeUnit::MICRO), \"[0, null, 951782400000000]\"));\n \n-  std::vector<bool> is_valid = {true};\n+    for (auto unit :\n+         {TimeUnit::SECOND, TimeUnit::MILLI, TimeUnit::MICRO, TimeUnit::NANO}) {\n+      for (std::string not_ts : {\n+               \"\",\n+               \"xxx\",\n+           }) {\n+        auto options = CastOptions::Safe(timestamp(unit));\n+        CheckCastFails(ArrayFromJSON(string_type, \"[\\\"\" + not_ts + \"\\\"]\"), options);\n+      }\n+    }\n+\n+    // NOTE: timestamp parsing is tested comprehensively in parsing-util-test.cc\n+  }\n+}\n \n-  CheckFails<StringType>({\"z\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"12 z\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"128\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"-129\"}, is_valid, int8(), options);\n-  CheckFails<StringType>({\"0.5\"}, is_valid, int8(), options);\n+static void AssertBinaryZeroCopy(std::shared_ptr<Array> lhs, std::shared_ptr<Array> rhs) {\n+  // null bitmap and data buffers are always zero-copied\n+  AssertBufferSame(*lhs, *rhs, 0);\n+  AssertBufferSame(*lhs, *rhs, 2);\n \n-  CheckFails<StringType>({\"256\"}, is_valid, uint8(), options);\n-  CheckFails<StringType>({\"-1\"}, is_valid, uint8(), options);\n+  if (offset_bit_width(lhs->type_id()) == offset_bit_width(rhs->type_id())) {\n+    // offset buffer is zero copied if possible\n+    AssertBufferSame(*lhs, *rhs, 1);\n+    return;\n+  }\n \n-  CheckFails<StringType>({\"z\"}, is_valid, float32(), options);\n+  // offset buffers are equivalent\n+  ArrayVector offsets;\n+  for (auto array : {lhs, rhs}) {\n+    auto length = array->length();\n+    auto buffer = array->data()->buffers[1];\n+    offsets.push_back(offset_bit_width(array->type_id()) == 32\n+                          ? *Cast(Int32Array(length, buffer), int64())\n+                          : std::make_shared<Int64Array>(length, buffer));\n+  }\n+  AssertArraysEqual(*offsets[0], *offsets[1]);\n }\n \n-TEST_F(TestCast, StringToTimestamp) { TestCastStringToTimestamp<StringType>(); }\n+TEST(Cast, BinaryToString) {\n+  for (auto bin_type : {binary(), large_binary()}) {\n+    for (auto string_type : {utf8(), large_utf8()}) {\n+      // empty -> empty always works\n+      CheckCast(ArrayFromJSON(bin_type, \"[]\"), ArrayFromJSON(string_type, \"[]\"));\n \n-TEST_F(TestCast, LargeStringToTimestamp) { TestCastStringToTimestamp<LargeStringType>(); }\n+      auto invalid_utf8 = InvalidUtf8(bin_type);\n \n-TEST_F(TestCast, StringToTimestampErrors) {\n-  CastOptions options;\n+      // invalid utf-8 masked by a null bit is not an error\n+      CheckCast(MaskArrayWithNullsAt(InvalidUtf8(bin_type), {4}),\n+                MaskArrayWithNullsAt(InvalidUtf8(string_type), {4}));\n \n-  std::vector<bool> is_valid = {true};\n+      // error: invalid utf-8\n+      auto options = CastOptions::Safe(string_type);\n+      CheckCastFails(invalid_utf8, options);\n \n-  for (auto unit : {TimeUnit::SECOND, TimeUnit::MILLI, TimeUnit::MICRO, TimeUnit::NANO}) {\n-    auto type = timestamp(unit);\n-    CheckFails<StringType>({\"\"}, is_valid, type, options);\n-    CheckFails<StringType>({\"xxx\"}, is_valid, type, options);\n+      // override utf-8 check\n+      options.allow_invalid_utf8 = true;\n+      ASSERT_OK_AND_ASSIGN(auto strings, Cast(*invalid_utf8, string_type, options));\n+      ASSERT_RAISES(Invalid, strings->ValidateFull());\n+      AssertBinaryZeroCopy(invalid_utf8, strings);\n+    }\n   }\n }\n \n-TEST_F(TestCast, BinaryToString) { TestCastBinaryToBinary<BinaryType, StringType>(); }\n+TEST(Cast, BinaryOrStringToBinary) {\n+  for (auto from_type : {utf8(), large_utf8(), binary(), large_binary()}) {\n+    for (auto to_type : {binary(), large_binary()}) {\n+      // empty -> empty always works\n+      CheckCast(ArrayFromJSON(from_type, \"[]\"), ArrayFromJSON(to_type, \"[]\"));\n \n-TEST_F(TestCast, BinaryToLargeBinary) {\n-  TestCastBinaryToBinary<BinaryType, LargeBinaryType>();\n-}\n+      auto invalid_utf8 = InvalidUtf8(from_type);\n \n-TEST_F(TestCast, BinaryToLargeString) {\n-  TestCastBinaryToBinary<BinaryType, LargeStringType>();\n-}\n+      // invalid utf-8 is not an error for binary\n+      ASSERT_OK_AND_ASSIGN(auto strings, Cast(*invalid_utf8, to_type));\n+      ASSERT_OK(strings->ValidateFull());\n+      AssertBinaryZeroCopy(invalid_utf8, strings);\n \n-TEST_F(TestCast, LargeBinaryToBinary) {\n-  TestCastBinaryToBinary<LargeBinaryType, BinaryType>();\n+      // invalid utf-8 masked by a null bit is not an error\n+      CheckCast(MaskArrayWithNullsAt(InvalidUtf8(from_type), {4}),\n+                MaskArrayWithNullsAt(InvalidUtf8(to_type), {4}));\n+    }\n+  }\n }\n \n-TEST_F(TestCast, LargeBinaryToString) {\n-  TestCastBinaryToBinary<LargeBinaryType, StringType>();\n-}\n+TEST(Cast, StringToString) {\n+  for (auto from_type : {utf8(), large_utf8()}) {\n+    for (auto to_type : {utf8(), large_utf8()}) {\n+      // empty -> empty always works\n+      CheckCast(ArrayFromJSON(from_type, \"[]\"), ArrayFromJSON(to_type, \"[]\"));\n \n-TEST_F(TestCast, LargeBinaryToLargeString) {\n-  TestCastBinaryToBinary<LargeBinaryType, LargeStringType>();\n-}\n+      auto invalid_utf8 = InvalidUtf8(from_type);\n \n-TEST_F(TestCast, StringToBinary) { TestCastBinaryToBinary<StringType, BinaryType>(); }\n+      // invalid utf-8 masked by a null bit is not an error\n+      CheckCast(MaskArrayWithNullsAt(invalid_utf8, {4}),\n+                MaskArrayWithNullsAt(InvalidUtf8(to_type), {4}));\n \n-TEST_F(TestCast, StringToLargeBinary) {\n-  TestCastBinaryToBinary<StringType, LargeBinaryType>();\n+      // override utf-8 check\n+      auto options = CastOptions::Safe(to_type);\n+      options.allow_invalid_utf8 = true;\n+      // utf-8 is not checked by Cast when the origin guarantees utf-8\n+      ASSERT_OK_AND_ASSIGN(auto strings, Cast(*invalid_utf8, to_type, options));\n+      ASSERT_RAISES(Invalid, strings->ValidateFull());\n+      AssertBinaryZeroCopy(invalid_utf8, strings);\n+    }\n+  }\n }\n \n-TEST_F(TestCast, StringToLargeString) {\n-  TestCastBinaryToBinary<StringType, LargeStringType>();\n-}\n+TEST(Cast, IntToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(ArrayFromJSON(int8(), \"[0, 1, 127, -128, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"127\", \"-128\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint8(), \"[0, 1, 255, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"255\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(int16(), \"[0, 1, 32767, -32768, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"32767\", \"-32768\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint16(), \"[0, 1, 65535, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"65535\", null])\"));\n \n-TEST_F(TestCast, LargeStringToBinary) {\n-  TestCastBinaryToBinary<LargeStringType, BinaryType>();\n+    CheckCast(\n+        ArrayFromJSON(int32(), \"[0, 1, 2147483647, -2147483648, null]\"),\n+        ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"2147483647\", \"-2147483648\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint32(), \"[0, 1, 4294967295, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"4294967295\", null])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(int64(), \"[0, 1, 9223372036854775807, -9223372036854775808, null]\"),\n+        ArrayFromJSON(\n+            string_type,\n+            R\"([\"0\", \"1\", \"9223372036854775807\", \"-9223372036854775808\", null])\"));\n+\n+    CheckCast(ArrayFromJSON(uint64(), \"[0, 1, 18446744073709551615, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"0\", \"1\", \"18446744073709551615\", null])\"));\n+  }\n }\n \n-TEST_F(TestCast, LargeStringToString) {\n-  TestCastBinaryToBinary<LargeStringType, StringType>();\n+TEST(Cast, FloatingToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(\n+        ArrayFromJSON(float32(), \"[0.0, -0.0, 1.5, -Inf, Inf, NaN, null]\"),\n+        ArrayFromJSON(string_type, R\"([\"0\", \"-0\", \"1.5\", \"-inf\", \"inf\", \"nan\", null])\"));\n+\n+    CheckCast(\n+        ArrayFromJSON(float64(), \"[0.0, -0.0, 1.5, -Inf, Inf, NaN, null]\"),\n+        ArrayFromJSON(string_type, R\"([\"0\", \"-0\", \"1.5\", \"-inf\", \"inf\", \"nan\", null])\"));\n+  }\n }\n \n-TEST_F(TestCast, LargeStringToLargeBinary) {\n-  TestCastBinaryToBinary<LargeStringType, LargeBinaryType>();\n+TEST(Cast, BooleanToString) {\n+  for (auto string_type : {utf8(), large_utf8()}) {\n+    CheckCast(ArrayFromJSON(boolean(), \"[true, true, false, null]\"),\n+              ArrayFromJSON(string_type, R\"([\"true\", \"true\", \"false\", null])\"));\n+  }\n }\n \n-TEST_F(TestCast, NumberToString) { TestCastNumberToString<StringType>(); }\n+TEST(Cast, ListToPrimitive) {\n+  ASSERT_RAISES(NotImplemented,\n+                Cast(*ArrayFromJSON(list(int8()), \"[[1, 2], [3, 4]]\"), uint8()));\n \n-TEST_F(TestCast, NumberToLargeString) { TestCastNumberToString<LargeStringType>(); }\n+  ASSERT_RAISES(\n+      NotImplemented,\n+      Cast(*ArrayFromJSON(list(binary()), R\"([[\"1\", \"2\"], [\"3\", \"4\"]])\"), utf8()));\n+}\n \n-TEST_F(TestCast, BooleanToString) { TestCastBooleanToString<StringType>(); }\n+TEST(Cast, ListToList) {\n+  auto list_int32 = checked_pointer_cast<ListArray>(ArrayFromJSON(\n+      list(int32()), \"[[0], [1], null, [2, 3, 4], [5, 6], null, [], [7], [8, 9]]\"));\n \n-TEST_F(TestCast, BooleanToLargeString) { TestCastBooleanToString<LargeStringType>(); }\n+  auto list_int64 = std::make_shared<ListArray>(\n+      list(int64()), list_int32->length(), list_int32->value_offsets(),\n+      *Cast(*list_int32->values(), int64()), list_int32->null_bitmap());\n+  ASSERT_OK(list_int64->ValidateFull());\n \n-TEST_F(TestCast, ListToPrimitive) {\n-  auto from_int = ArrayFromJSON(list(int8()), \"[[1, 2], [3, 4]]\");\n-  auto from_binary = ArrayFromJSON(list(binary()), \"[[\\\"1\\\", \\\"2\\\"], [\\\"3\\\", \\\"4\\\"]]\");\n+  auto list_float32 = std::make_shared<ListArray>(\n+      list(float32()), list_int32->length(), list_int32->value_offsets(),\n+      *Cast(*list_int32->values(), float32()), list_int32->null_bitmap());\n+  ASSERT_OK(list_float32->ValidateFull());\n \n-  ASSERT_RAISES(NotImplemented, Cast(*from_int, uint8()));\n-  ASSERT_RAISES(NotImplemented, Cast(*from_binary, utf8()));\n-}\n+  CheckCast(list_int32, list_float32);\n+  CheckCast(list_float32, list_int64);\n+  CheckCast(list_int64, list_float32);\n \n-TEST_F(TestCast, ListToList) {\n-  CastOptions options;\n-  std::shared_ptr<Array> offsets;\n-\n-  std::vector<int32_t> offsets_values = {0, 1, 2, 5, 7, 7, 8, 10};\n-  std::vector<bool> offsets_is_valid = {true, true, true, true, false, true, true, true};\n-  ArrayFromVector<Int32Type>(offsets_is_valid, offsets_values, &offsets);\n-\n-  std::shared_ptr<Array> int32_plain_array =\n-      TestBase::MakeRandomArray<typename TypeTraits<Int32Type>::ArrayType>(10, 2);\n-  ASSERT_OK_AND_ASSIGN(auto int32_list_array,\n-                       ListArray::FromArrays(*offsets, *int32_plain_array, pool_));\n-\n-  ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> int64_plain_array,\n-                       Cast(*int32_plain_array, int64(), options));\n-  ASSERT_OK_AND_ASSIGN(auto int64_list_array,\n-                       ListArray::FromArrays(*offsets, *int64_plain_array, pool_));\n-\n-  ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> float64_plain_array,\n-                       Cast(*int32_plain_array, float64(), options));\n-  ASSERT_OK_AND_ASSIGN(auto float64_list_array,\n-                       ListArray::FromArrays(*offsets, *float64_plain_array, pool_));\n-\n-  CheckPass(*int32_list_array, *int64_list_array, int64_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*int32_list_array, *float64_list_array, float64_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*int64_list_array, *int32_list_array, int32_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*int64_list_array, *float64_list_array, float64_list_array->type(), options,\n-            /*check_scalar=*/false);\n-\n-  options.allow_float_truncate = true;\n-  CheckPass(*float64_list_array, *int32_list_array, int32_list_array->type(), options,\n-            /*check_scalar=*/false);\n-  CheckPass(*float64_list_array, *int64_list_array, int64_list_array->type(), options,\n-            /*check_scalar=*/false);\n+  CheckCast(list_int32, list_int64);\n+  CheckCast(list_float32, list_int32);\n+  CheckCast(list_int64, list_int32);\n }\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T16:44:28.938+0000",
                    "updated": "2021-02-16T16:44:28.938+0000",
                    "started": "2021-02-16T16:44:28.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553064",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r576972069\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -1788,134 +1396,97 @@ TEST_F(TestCast, IdentityCasts) {\n   CheckIdentityCast(date64(), \"[86400000, 0]\");\n   CheckIdentityCast(timestamp(TimeUnit::SECOND), \"[1, 2, 3, 4]\");\n \n-  {\n-    auto dict_values = ArrayFromJSON(int8(), \"[1, 2, 3]\");\n-    auto dict_type = dictionary(int8(), dict_values->type());\n-    auto dict_indices = ArrayFromJSON(int8(), \"[0, 1, 2, 0, null, 2]\");\n-    auto dict_array =\n-        std::make_shared<DictionaryArray>(dict_type, dict_indices, dict_values);\n-    CheckZeroCopy(*dict_array, dict_type);\n-  }\n+  CheckIdentityCast(dictionary(int8(), int8()), \"[1, 2, 3, 1, null, 3]\");\n }\n \n-TEST_F(TestCast, EmptyCasts) {\n+TEST(Cast, EmptyCasts) {\n   // ARROW-4766: 0-length arrays should not segfault\n-  auto CheckEmptyCast = [this](std::shared_ptr<DataType> from,\n-                               std::shared_ptr<DataType> to) {\n-    CastOptions options;\n-\n+  auto CheckCastEmpty = [](std::shared_ptr<DataType> from, std::shared_ptr<DataType> to) {\n     // Python creates array with nullptr instead of 0-length (valid) buffers.\n     auto data = ArrayData::Make(from, /* length */ 0, /* buffers */ {nullptr, nullptr});\n-    auto input = MakeArray(data);\n-    auto expected = ArrayFromJSON(to, \"[]\");\n-    CheckPass(*input, *expected, to, CastOptions{});\n+    CheckCast(MakeArray(data), ArrayFromJSON(to, \"[]\"));\n   };\n \n   for (auto numeric : kNumericTypes) {\n-    CheckEmptyCast(boolean(), numeric);\n-    CheckEmptyCast(numeric, boolean());\n+    CheckCastEmpty(boolean(), numeric);\n+    CheckCastEmpty(numeric, boolean());\n   }\n }\n \n // ----------------------------------------------------------------------\n // Test casting from NullType\n \n-template <typename TestType>\n-class TestNullCast : public TestCast {};\n-\n-typedef ::testing::Types<NullType, UInt8Type, Int8Type, UInt16Type, Int16Type, Int32Type,\n-                         UInt32Type, UInt64Type, Int64Type, FloatType, DoubleType,\n-                         Date32Type, Date64Type, FixedSizeBinaryType, BinaryType>\n-    TestTypes;\n-\n-TYPED_TEST_SUITE(TestNullCast, TestTypes);\n-\n-TYPED_TEST(TestNullCast, FromNull) {\n-  // Null casts to everything\n-  const int length = 10;\n-\n-  // Hack to get a DataType including for parametric types\n-  std::shared_ptr<DataType> out_type =\n-      TestBase::MakeRandomArray<typename TypeTraits<TypeParam>::ArrayType>(0, 0)->type();\n-\n-  NullArray arr(length);\n-\n-  ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> result, Cast(arr, out_type));\n-  ASSERT_OK(result->ValidateFull());\n-\n-  ASSERT_TRUE(result->type()->Equals(*out_type));\n-  ASSERT_EQ(length, result->length());\n-  ASSERT_EQ(length, result->null_count());\n+TEST(Cast, FromNull) {\n+  for (auto to_type : {\n+           null(),\n+           uint8(),\n+           int8(),\n+           uint16(),\n+           int16(),\n+           uint32(),\n+           int32(),\n+           uint64(),\n+           int64(),\n+           float32(),\n+           float64(),\n+           date32(),\n+           date64(),\n+           fixed_size_binary(10),\n+           binary(),\n+           utf8(),\n+       }) {\n+    ASSERT_OK_AND_ASSIGN(auto expected, MakeArrayOfNull(to_type, 10));\n+    CheckCast(std::make_shared<NullArray>(10), expected);\n+  }\n }\n \n // ----------------------------------------------------------------------\n // Test casting from DictionaryType\n \n-template <typename TestType>\n-class TestDictionaryCast : public TestCast {};\n-\n-typedef ::testing::Types<NullType, UInt8Type, Int8Type, UInt16Type, Int16Type, Int32Type,\n-                         UInt32Type, UInt64Type, Int64Type, FloatType, DoubleType,\n-                         Date32Type, Date64Type, FixedSizeBinaryType, BinaryType>\n-    TestTypes;\n+TEST(Cast, FromDictionary) {\n+  ArrayVector dictionaries;\n+  dictionaries.push_back(std::make_shared<NullArray>(5));\n \n-TYPED_TEST_SUITE(TestDictionaryCast, TestTypes);\n+  for (auto num_type : kNumericTypes) {\n+    dictionaries.push_back(ArrayFromJSON(num_type, \"[23, 12, 45, 12, null]\"));\n+  }\n \n-TYPED_TEST(TestDictionaryCast, Basic) {\n-  std::shared_ptr<Array> dict =\n-      TestBase::MakeRandomArray<typename TypeTraits<TypeParam>::ArrayType>(5, 1);\n-  for (auto index_ty : all_dictionary_index_types()) {\n-    auto indices = ArrayFromJSON(index_ty, \"[4, 0, 1, 2, 0, 4, null, 2]\");\n-    auto dict_ty = dictionary(index_ty, dict->type());\n-    auto dict_arr = *DictionaryArray::FromArrays(dict_ty, indices, dict);\n-    std::shared_ptr<Array> expected = *Take(*dict, *indices);\n+  for (auto string_type : kBaseBinaryTypes) {\n+    dictionaries.push_back(\n+        ArrayFromJSON(string_type, R\"([\"foo\", \"bar\", \"baz\", \"foo\", null])\"));\n+  }\n \n-    this->CheckPass(*dict_arr, *expected, expected->type(), CastOptions::Safe(),\n-                    /*check_scalar=*/false);\n+  for (auto dict : dictionaries) {\n+    for (auto index_type : all_dictionary_index_types()) {\n\nReview comment:\n       sure\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T16:44:41.977+0000",
                    "updated": "2021-02-16T16:44:41.977+0000",
                    "started": "2021-02-16T16:44:41.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553065",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#discussion_r577002969\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_test.cc\n##########\n@@ -475,1049 +207,821 @@ TEST_F(TestCast, CanCast) {\n   ExpectCannotCast(null(), {smallint()});  // FIXME missing common cast from null\n }\n \n-TEST_F(TestCast, SameTypeZeroCopy) {\n+TEST(Cast, SameTypeZeroCopy) {\n   std::shared_ptr<Array> arr = ArrayFromJSON(int32(), \"[0, null, 2, 3, 4]\");\n   ASSERT_OK_AND_ASSIGN(std::shared_ptr<Array> result, Cast(*arr, int32()));\n \n   AssertBufferSame(*arr, *result, 0);\n   AssertBufferSame(*arr, *result, 1);\n }\n \n-TEST_F(TestCast, ZeroChunks) {\n+TEST(Cast, ZeroChunks) {\n   auto chunked_i32 = std::make_shared<ChunkedArray>(ArrayVector{}, int32());\n   ASSERT_OK_AND_ASSIGN(Datum result, Cast(chunked_i32, utf8()));\n \n   ASSERT_EQ(result.kind(), Datum::CHUNKED_ARRAY);\n   AssertChunkedEqual(*result.chunked_array(), ChunkedArray({}, utf8()));\n }\n \n-TEST_F(TestCast, CastDoesNotProvideDefaultOptions) {\n+TEST(Cast, CastDoesNotProvideDefaultOptions) {\n   std::shared_ptr<Array> arr = ArrayFromJSON(int32(), \"[0, null, 2, 3, 4]\");\n   ASSERT_RAISES(Invalid, CallFunction(\"cast\", {arr}));\n }\n \n-TEST_F(TestCast, FromBoolean) {\n-  CastOptions options;\n-\n-  std::vector<bool> is_valid(20, true);\n-  is_valid[3] = false;\n-\n-  std::vector<bool> v1(is_valid.size(), true);\n-  std::vector<int32_t> e1(is_valid.size(), 1);\n-  for (size_t i = 0; i < v1.size(); ++i) {\n-    if (i % 3 == 1) {\n-      v1[i] = false;\n-      e1[i] = 0;\n-    }\n-  }\n-\n-  CheckCase<BooleanType, Int32Type>(v1, is_valid, e1, options);\n+TEST(Cast, FromBoolean) {\n+  std::string vals = \"[1, 0, null, 1, 0, 1, 1, null, 0, 0, 1]\";\n+  CheckCast(ArrayFromJSON(boolean(), vals), ArrayFromJSON(int32(), vals));\n }\n \n-TEST_F(TestCast, ToBoolean) {\n-  CastOptions options;\n+TEST(Cast, ToBoolean) {\n   for (auto type : kNumericTypes) {\n-    CheckCaseJSON(type, boolean(), \"[0, null, 127, 1, 0]\",\n-                  \"[false, null, true, true, false]\");\n+    CheckCast(ArrayFromJSON(type, \"[0, null, 127, 1, 0]\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n   }\n \n   // Check negative numbers\n-  CheckCaseJSON(int8(), boolean(), \"[0, null, 127, -1, 0]\",\n-                \"[false, null, true, true, false]\");\n-  CheckCaseJSON(float64(), boolean(), \"[0, null, 127, -1, 0]\",\n-                \"[false, null, true, true, false]\");\n+  for (auto type : {int8(), float64()}) {\n+    CheckCast(ArrayFromJSON(type, \"[0, null, 127, -1, 0]\"),\n+              ArrayFromJSON(boolean(), \"[false, null, true, true, false]\"));\n+  }\n }\n \n-TEST_F(TestCast, ToIntUpcast) {\n-  CastOptions options;\n-  options.allow_int_overflow = false;\n-\n+TEST(Cast, ToIntUpcast) {\n   std::vector<bool> is_valid = {true, false, true, true, true};\n \n   // int8 to int32\n-  std::vector<int8_t> v1 = {0, 1, 127, -1, 0};\n-  std::vector<int32_t> e1 = {0, 1, 127, -1, 0};\n-  CheckCase<Int8Type, Int32Type>(v1, is_valid, e1, options);\n-\n-  // bool to int8\n-  std::vector<bool> v2 = {false, true, false, true, true};\n-  std::vector<int8_t> e2 = {0, 1, 0, 1, 1};\n-  CheckCase<BooleanType, Int8Type>(v2, is_valid, e2, options);\n+  CheckCast(ArrayFromJSON(int8(), \"[0, null, 127, -1, 0]\"),\n+            ArrayFromJSON(int32(), \"[0, null, 127, -1, 0]\"));\n \n   // uint8 to int16, no overflow/underrun\n-  std::vector<uint8_t> v3 = {0, 100, 200, 255, 0};\n-  std::vector<int16_t> e3 = {0, 100, 200, 255, 0};\n-  CheckCase<UInt8Type, Int16Type>(v3, is_valid, e3, options);\n+  CheckCast(ArrayFromJSON(uint8(), \"[0, 100, 200, 255, 0]\"),\n+            ArrayFromJSON(int16(), \"[0, 100, 200, 255, 0]\"));\n }\n \n-TEST_F(TestCast, OverflowInNullSlot) {\n-  CastOptions options;\n-  options.allow_int_overflow = false;\n-\n-  std::vector<bool> is_valid = {true, false, true, true, true};\n-\n-  std::vector<int32_t> v11 = {0, 70000, 2000, 1000, 0};\n-  std::vector<int16_t> e11 = {0, 0, 2000, 1000, 0};\n-\n-  std::shared_ptr<Array> expected;\n-  ArrayFromVector<Int16Type>(int16(), is_valid, e11, &expected);\n-\n-  auto buf = Buffer::Wrap(v11.data(), v11.size());\n-  Int32Array tmp11(5, buf, expected->null_bitmap(), -1);\n-\n-  CheckPass(tmp11, *expected, int16(), options);\n+TEST(Cast, OverflowInNullSlot) {\n+  CheckCast(ArrayFromJSON(int32(), \"[0, null, 2000, 1000, 0]\"),\n+            ArrayFromJSON(int16(), \"[0, null, 2000, 1000, 0]\"));\n\nReview comment:\n       And now this test fails :-/\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-16T17:27:22.541+0000",
                    "updated": "2021-02-16T17:27:22.541+0000",
                    "started": "2021-02-16T17:27:22.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553100",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490#issuecomment-780529771\n\n\n   @pitrou PTAL\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-17T12:41:16.200+0000",
                    "updated": "2021-02-17T12:41:16.200+0000",
                    "started": "2021-02-17T12:41:16.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553583",
                    "issueId": "13312703"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/worklog/553650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #9490:\nURL: https://github.com/apache/arrow/pull/9490\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-17T14:56:08.095+0000",
                    "updated": "2021-02-17T14:56:08.095+0000",
                    "started": "2021-02-17T14:56:08.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553650",
                    "issueId": "13312703"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4c031653[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5877b059[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12f0fc4f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@77e06330[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@524fa7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6d03ee50[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7804753b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@c8960e8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2edc9404[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5cdf9ee1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72985ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@40e03bc1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 17 14:56:03 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-17T14:56:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9196/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-06-21T17:31:03.000+0000",
        "updated": "2021-06-23T16:33:17.000+0000",
        "timeoriginalestimate": null,
        "description": "I'm adding scalar tests to scalar_cast_test.cc in a different patch, so I will disable the scalar tests for these casts until they can be properly implemented",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Make temporal casts work on Scalar inputs",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/comment/17147134",
                    "id": "17147134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This is a good amount of work to do properly, so will probably have to get done post-1.0.0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-27T23:29:35.171+0000",
                    "updated": "2020-06-27T23:29:35.171+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13312703/comment/17285862",
                    "id": "17285862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9490\n[https://github.com/apache/arrow/pull/9490]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-02-17T14:56:03.503+0000",
                    "updated": "2021-02-17T14:56:03.503+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0g2eg:",
        "customfield_12314139": null
    }
}