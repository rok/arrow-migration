{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13162841",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841",
    "key": "ARROW-2646",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12536076",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12536076",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13164500",
                    "key": "ARROW-2679",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13164500",
                    "fields": {
                        "summary": "pyarrow table from/to dataframe is type-lossy",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fjetter",
            "name": "fjetter",
            "key": "fjetter",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Florian Jetter",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fjetter",
            "name": "fjetter",
            "key": "fjetter",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Florian Jetter",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2646/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/142673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #2535: WIP ARROW-2646: [Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-10T11:26:38.177+0000",
                    "updated": "2018-09-10T11:26:38.177+0000",
                    "started": "2018-09-10T11:26:38.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142673",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/142698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2535: ARROW-2646: [Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r216299243\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -906,6 +906,107 @@ def test_pandas_datetime_to_date64_failures(self, mask):\n         with pytest.raises(pa.ArrowInvalid, match=expected_msg):\n             pa.Array.from_pandas(s, type=pa.date64(), mask=mask)\n \n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_chunked_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+        carr = pa.chunked_array([data])\n+\n+        result = carr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(carr.to_pandas(), expected)\n+\n+        result = carr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_column_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        column = pa.column('date', arr)\n+\n+        result = column.to_pandas()\n \n Review comment:\n   `Column.to_pandas` returns a `pd.Series` whereas `Array.to_pandas()` and `ChunkedArray.to_pandas()` returns `ndarrays`. Is it a feature or a bug? Either way it feels weird and inconsistent, I wouldn't expect ndarray as the result of `to_pandas()`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-10T12:18:11.268+0000",
                    "updated": "2018-09-10T12:18:11.268+0000",
                    "started": "2018-09-10T12:18:11.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142698",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/142700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2535: ARROW-2646: [Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r216299803\n \n \n\n ##########\n File path: cpp/src/arrow/python/arrow_to_pandas.cc\n ##########\n @@ -759,6 +794,7 @@ class ObjectBlock : public PandasBlock {\n         CONVERTLISTSLIKE_CASE(StringType, STRING)\n         CONVERTLISTSLIKE_CASE(ListType, LIST)\n         CONVERTLISTSLIKE_CASE(NullType, NA)\n+        // TODO(kszucs) Time and Date?\n \n Review comment:\n   I suspect a couple of types are missing here. If anyone confirms, I'll file a jira ticket.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-10T12:20:09.519+0000",
                    "updated": "2018-09-10T12:20:09.519+0000",
                    "started": "2018-09-10T12:20:09.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142700",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/142718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r216311613\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -906,6 +906,107 @@ def test_pandas_datetime_to_date64_failures(self, mask):\n         with pytest.raises(pa.ArrowInvalid, match=expected_msg):\n             pa.Array.from_pandas(s, type=pa.date64(), mask=mask)\n \n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_chunked_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+        carr = pa.chunked_array([data])\n+\n+        result = carr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(carr.to_pandas(), expected)\n+\n+        result = carr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_column_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        column = pa.column('date', arr)\n+\n+        result = column.to_pandas()\n \n Review comment:\n   So \"to_pandas\" is returning a data representation suitable for pandas (i.e. with the right null special values, type casts for integers, etc.) so neither is wrong, per se, but it would good to be consistent\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-10T13:01:51.304+0000",
                    "updated": "2018-09-10T13:01:51.304+0000",
                    "started": "2018-09-10T13:01:51.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142718",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/142719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r216311713\n \n \n\n ##########\n File path: cpp/src/arrow/python/arrow_to_pandas.cc\n ##########\n @@ -759,6 +794,7 @@ class ObjectBlock : public PandasBlock {\n         CONVERTLISTSLIKE_CASE(StringType, STRING)\n         CONVERTLISTSLIKE_CASE(ListType, LIST)\n         CONVERTLISTSLIKE_CASE(NullType, NA)\n+        // TODO(kszucs) Time and Date?\n \n Review comment:\n   Yes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-10T13:02:06.321+0000",
                    "updated": "2018-09-10T13:02:06.321+0000",
                    "started": "2018-09-10T13:02:06.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142719",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217054623\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -906,6 +906,107 @@ def test_pandas_datetime_to_date64_failures(self, mask):\n         with pytest.raises(pa.ArrowInvalid, match=expected_msg):\n             pa.Array.from_pandas(s, type=pa.date64(), mask=mask)\n \n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_chunked_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+        carr = pa.chunked_array([data])\n+\n+        result = carr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(carr.to_pandas(), expected)\n+\n+        result = carr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_column_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        column = pa.column('date', arr)\n+\n+        result = column.to_pandas()\n \n Review comment:\n   As far as I understood is a `Series` a _named_ array with an index. We never have an index but the `Column` object has a name.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-12T14:27:02.963+0000",
                    "updated": "2018-09-12T14:27:02.963+0000",
                    "started": "2018-09-12T14:27:02.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143535",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143544",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217058475\n \n \n\n ##########\n File path: cpp/src/arrow/python/arrow_to_pandas.cc\n ##########\n @@ -759,6 +794,7 @@ class ObjectBlock : public PandasBlock {\n         CONVERTLISTSLIKE_CASE(StringType, STRING)\n         CONVERTLISTSLIKE_CASE(ListType, LIST)\n         CONVERTLISTSLIKE_CASE(NullType, NA)\n+        // TODO(kszucs) Time and Date?\n \n Review comment:\n   @xhochy created jira https://issues.apache.org/jira/browse/ARROW-3225\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-12T14:36:20.911+0000",
                    "updated": "2018-09-12T14:36:20.911+0000",
                    "started": "2018-09-12T14:36:20.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143544",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217060444\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -906,6 +906,107 @@ def test_pandas_datetime_to_date64_failures(self, mask):\n         with pytest.raises(pa.ArrowInvalid, match=expected_msg):\n             pa.Array.from_pandas(s, type=pa.date64(), mask=mask)\n \n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_chunked_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+        carr = pa.chunked_array([data])\n+\n+        result = carr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(carr.to_pandas(), expected)\n+\n+        result = carr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_column_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        column = pa.column('date', arr)\n+\n+        result = column.to_pandas()\n \n Review comment:\n   Verdict?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-12T14:41:28.484+0000",
                    "updated": "2018-09-12T14:41:28.484+0000",
                    "started": "2018-09-12T14:41:28.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143548",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217393834\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -906,6 +906,107 @@ def test_pandas_datetime_to_date64_failures(self, mask):\n         with pytest.raises(pa.ArrowInvalid, match=expected_msg):\n             pa.Array.from_pandas(s, type=pa.date64(), mask=mask)\n \n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_chunked_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+        carr = pa.chunked_array([data])\n+\n+        result = carr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(carr.to_pandas(), expected)\n+\n+        result = carr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_column_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        column = pa.column('date', arr)\n+\n+        result = column.to_pandas()\n \n Review comment:\n   I think we should just return an ndarray from Column.to_pandas. Open a JIRA and we can change and make sure it's what we want\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-13T13:58:36.354+0000",
                    "updated": "2018-09-13T13:58:36.354+0000",
                    "started": "2018-09-13T13:58:36.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143967",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217393351\n \n \n\n ##########\n File path: python/pyarrow/table.pxi\n ##########\n @@ -140,7 +140,8 @@ cdef class ChunkedArray:\n         return result\n \n     def to_pandas(self, bint strings_to_categorical=False,\n-                  bint zero_copy_only=False, bint integer_object_nulls=False):\n \n Review comment:\n   Do not check in python/pyarrow/plasma_store_server -- add to .gitignore\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-13T13:58:36.426+0000",
                    "updated": "2018-09-13T13:58:36.426+0000",
                    "started": "2018-09-13T13:58:36.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143968",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217394830\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -906,6 +906,107 @@ def test_pandas_datetime_to_date64_failures(self, mask):\n         with pytest.raises(pa.ArrowInvalid, match=expected_msg):\n             pa.Array.from_pandas(s, type=pa.date64(), mask=mask)\n \n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_chunked_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+        carr = pa.chunked_array([data])\n+\n+        result = carr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(carr.to_pandas(), expected)\n+\n+        result = carr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_column_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        column = pa.column('date', arr)\n+\n+        result = column.to_pandas()\n \n Review comment:\n   Done https://issues.apache.org/jira/browse/ARROW-3232\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-13T14:00:55.271+0000",
                    "updated": "2018-09-13T14:00:55.271+0000",
                    "started": "2018-09-13T14:00:55.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143969",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217394972\n \n \n\n ##########\n File path: python/pyarrow/table.pxi\n ##########\n @@ -140,7 +140,8 @@ cdef class ChunkedArray:\n         return result\n \n     def to_pandas(self, bint strings_to_categorical=False,\n-                  bint zero_copy_only=False, bint integer_object_nulls=False):\n \n Review comment:\n   Ouch\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-13T14:01:16.135+0000",
                    "updated": "2018-09-13T14:01:16.135+0000",
                    "started": "2018-09-13T14:01:16.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143970",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/143971",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535#discussion_r217396273\n \n \n\n ##########\n File path: python/pyarrow/table.pxi\n ##########\n @@ -140,7 +140,8 @@ cdef class ChunkedArray:\n         return result\n \n     def to_pandas(self, bint strings_to_categorical=False,\n-                  bint zero_copy_only=False, bint integer_object_nulls=False):\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-13T14:04:48.391+0000",
                    "updated": "2018-09-13T14:04:48.391+0000",
                    "started": "2018-09-13T14:04:48.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "143971",
                    "issueId": "13162841"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/worklog/144081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2535: ARROW-2646: [C++/Python] Pandas roundtrip for date objects\nURL: https://github.com/apache/arrow/pull/2535\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex 9fb919463a..6a142cd7e3 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -632,6 +632,37 @@ inline void ConvertDatetimeNanos(const ChunkedArray& data, int64_t* out_values)\n   }\n }\n \n+template <typename TYPE>\n+static Status ConvertDates(PandasOptions options, const ChunkedArray& data,\n+                           PyObject** out_values) {\n+  using ArrayType = typename TypeTraits<TYPE>::ArrayType;\n+\n+  PyAcquireGIL lock;\n+  OwnedRef date_ref;\n+\n+  PyDateTime_IMPORT;\n+\n+  for (int c = 0; c < data.num_chunks(); c++) {\n+    const auto& arr = checked_cast<const ArrayType&>(*data.chunk(c));\n+    auto type = std::dynamic_pointer_cast<TYPE>(arr.type());\n+    DCHECK(type);\n+\n+    const DateUnit unit = type->unit();\n+\n+    for (int64_t i = 0; i < arr.length(); ++i) {\n+      if (arr.IsNull(i)) {\n+        Py_INCREF(Py_None);\n+        *out_values++ = Py_None;\n+      } else {\n+        RETURN_NOT_OK(PyDate_from_int(arr.Value(i), unit, out_values++));\n+        RETURN_IF_PYERROR();\n+      }\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n template <typename TYPE>\n static Status ConvertTimes(PandasOptions options, const ChunkedArray& data,\n                            PyObject** out_values) {\n@@ -733,6 +764,10 @@ class ObjectBlock : public PandasBlock {\n       RETURN_NOT_OK(ConvertBinaryLike<StringType>(options_, data, out_buffer));\n     } else if (type == Type::FIXED_SIZE_BINARY) {\n       RETURN_NOT_OK(ConvertFixedSizeBinary(options_, data, out_buffer));\n+    } else if (type == Type::DATE32) {\n+      RETURN_NOT_OK(ConvertDates<Date32Type>(options_, data, out_buffer));\n+    } else if (type == Type::DATE64) {\n+      RETURN_NOT_OK(ConvertDates<Date64Type>(options_, data, out_buffer));\n     } else if (type == Type::TIME32) {\n       RETURN_NOT_OK(ConvertTimes<Time32Type>(options_, data, out_buffer));\n     } else if (type == Type::TIME64) {\n@@ -759,6 +794,7 @@ class ObjectBlock : public PandasBlock {\n         CONVERTLISTSLIKE_CASE(StringType, STRING)\n         CONVERTLISTSLIKE_CASE(ListType, LIST)\n         CONVERTLISTSLIKE_CASE(NullType, NA)\n+        // TODO(kszucs) Time and Date?\n         default: {\n           std::stringstream ss;\n           ss << \"Not implemented type for conversion from List to Pandas ObjectBlock: \"\n@@ -1322,10 +1358,8 @@ static Status GetPandasBlockType(const Column& col, const PandasOptions& options\n       *output_type = PandasBlock::OBJECT;\n       break;\n     case Type::DATE32:\n-      *output_type = PandasBlock::DATETIME;\n-      break;\n     case Type::DATE64:\n-      *output_type = PandasBlock::DATETIME;\n+      *output_type = options.date_as_object ? PandasBlock::OBJECT : PandasBlock::DATETIME;\n       break;\n     case Type::TIMESTAMP: {\n       const auto& ts_type = checked_cast<const TimestampType&>(*col.type());\n@@ -1660,9 +1694,7 @@ class ArrowDeserializer {\n   }\n \n   template <typename Type>\n-  typename std::enable_if<std::is_base_of<DateType, Type>::value ||\n-                              std::is_base_of<TimestampType, Type>::value,\n-                          Status>::type\n+  typename std::enable_if<std::is_base_of<TimestampType, Type>::value, Status>::type\n   Visit(const Type& type) {\n     if (options_.zero_copy_only) {\n       return Status::Invalid(\"Copy Needed, but zero_copy_only was True\");\n@@ -1691,6 +1723,39 @@ class ArrowDeserializer {\n     return Status::OK();\n   }\n \n+  template <typename Type>\n+  typename std::enable_if<std::is_base_of<DateType, Type>::value, Status>::type Visit(\n+      const Type& type) {\n+    if (options_.zero_copy_only) {\n+      return Status::Invalid(\"Copy Needed, but zero_copy_only was True\");\n+    }\n+    if (options_.date_as_object) {\n+      return VisitObjects(ConvertDates<Type>);\n+    }\n+\n+    constexpr int TYPE = Type::type_id;\n+    using traits = internal::arrow_traits<TYPE>;\n+    using c_type = typename Type::c_type;\n+\n+    typedef typename traits::T T;\n+\n+    RETURN_NOT_OK(AllocateOutput(traits::npy_type));\n+    auto out_values = reinterpret_cast<T*>(PyArray_DATA(arr_));\n+\n+    constexpr T na_value = traits::na_value;\n+    constexpr int64_t kShift = traits::npy_shift;\n+\n+    for (int c = 0; c < data_.num_chunks(); c++) {\n+      const auto& arr = *data_.chunk(c);\n+      const c_type* in_values = GetPrimitiveValues<c_type>(arr);\n+\n+      for (int64_t i = 0; i < arr.length(); ++i) {\n+        *out_values++ = arr.IsNull(i) ? na_value : static_cast<T>(in_values[i]) / kShift;\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n   template <typename Type>\n   typename std::enable_if<std::is_base_of<TimeType, Type>::value, Status>::type Visit(\n       const Type& type) {\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.h b/cpp/src/arrow/python/arrow_to_pandas.h\nindex 2a338ac0c2..138b010515 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.h\n+++ b/cpp/src/arrow/python/arrow_to_pandas.h\n@@ -46,12 +46,14 @@ struct PandasOptions {\n   bool strings_to_categorical;\n   bool zero_copy_only;\n   bool integer_object_nulls;\n+  bool date_as_object;\n   bool use_threads;\n \n   PandasOptions()\n       : strings_to_categorical(false),\n         zero_copy_only(false),\n         integer_object_nulls(false),\n+        date_as_object(false),\n         use_threads(false) {}\n };\n \ndiff --git a/cpp/src/arrow/python/util/datetime.h b/cpp/src/arrow/python/util/datetime.h\nindex e76c2e0db4..d39178d451 100644\n--- a/cpp/src/arrow/python/util/datetime.h\n+++ b/cpp/src/arrow/python/util/datetime.h\n@@ -211,6 +211,19 @@ static inline Status PyTime_convert_int(int64_t val, const TimeUnit::type unit,\n   return Status::OK();\n }\n \n+static inline Status PyDate_convert_int(int64_t val, const DateUnit unit, int64_t* year,\n+                                        int64_t* month, int64_t* day) {\n+  switch (unit) {\n+    case DateUnit::MILLI:\n+      val /= 86400000LL;\n+    case DateUnit::DAY:\n+      get_date_from_days(val, year, month, day);\n+    default:\n+      break;\n+  }\n+  return Status::OK();\n+}\n+\n static inline Status PyTime_from_int(int64_t val, const TimeUnit::type unit,\n                                      PyObject** out) {\n   int64_t hour = 0, minute = 0, second = 0, microsecond = 0;\n@@ -220,6 +233,14 @@ static inline Status PyTime_from_int(int64_t val, const TimeUnit::type unit,\n   return Status::OK();\n }\n \n+static inline Status PyDate_from_int(int64_t val, const DateUnit unit, PyObject** out) {\n+  int64_t year = 0, month = 0, day = 0;\n+  RETURN_NOT_OK(PyDate_convert_int(val, unit, &year, &month, &day));\n+  *out = PyDate_FromDate(static_cast<int32_t>(year), static_cast<int32_t>(month),\n+                         static_cast<int32_t>(day));\n+  return Status::OK();\n+}\n+\n static inline Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit,\n                                          PyObject** out) {\n   int64_t hour = 0, minute = 0, second = 0, microsecond = 0;\ndiff --git a/python/.gitignore b/python/.gitignore\nindex c6125ad44b..fac4e99493 100644\n--- a/python/.gitignore\n+++ b/python/.gitignore\n@@ -43,3 +43,4 @@ manylinux1/arrow\n \n # plasma store\n pyarrow/plasma_store\n+pyarrow/plasma_store_server\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex 362ebc6ff9..a2faf38988 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -599,7 +599,8 @@ cdef class Array:\n         return pyarrow_wrap_array(result)\n \n     def to_pandas(self, bint strings_to_categorical=False,\n-                  bint zero_copy_only=False, bint integer_object_nulls=False):\n+                  bint zero_copy_only=False, bint integer_object_nulls=False,\n+                  bint date_as_object=False):\n         \"\"\"\n         Convert to a NumPy array object suitable for use in pandas.\n \n@@ -612,6 +613,8 @@ cdef class Array:\n             the underlying data\n         integer_object_nulls : boolean, default False\n             Cast integers with nulls to objects\n+        date_as_object : boolean, default False\n+            Cast dates to objects\n \n         See also\n         --------\n@@ -627,6 +630,7 @@ cdef class Array:\n             strings_to_categorical=strings_to_categorical,\n             zero_copy_only=zero_copy_only,\n             integer_object_nulls=integer_object_nulls,\n+            date_as_object=date_as_object,\n             use_threads=False)\n         with nogil:\n             check_status(ConvertArrayToPandas(options, self.sp_array,\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 8a91bf52c9..1a499df1b0 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -1029,6 +1029,7 @@ cdef extern from \"arrow/python/api.h\" namespace \"arrow::py\" nogil:\n         c_bool strings_to_categorical\n         c_bool zero_copy_only\n         c_bool integer_object_nulls\n+        c_bool date_as_object\n         c_bool use_threads\n \n cdef extern from \"arrow/python/api.h\" namespace 'arrow::py' nogil:\ndiff --git a/python/pyarrow/table.pxi b/python/pyarrow/table.pxi\nindex bbf40e0335..7b35fe4856 100644\n--- a/python/pyarrow/table.pxi\n+++ b/python/pyarrow/table.pxi\n@@ -140,7 +140,8 @@ cdef class ChunkedArray:\n         return result\n \n     def to_pandas(self, bint strings_to_categorical=False,\n-                  bint zero_copy_only=False, bint integer_object_nulls=False):\n+                  bint zero_copy_only=False, bint integer_object_nulls=False,\n+                  bint date_as_object=False):\n         \"\"\"\n         Convert the arrow::ChunkedArray to an array object suitable for use\n         in pandas\n@@ -157,6 +158,7 @@ cdef class ChunkedArray:\n             strings_to_categorical=strings_to_categorical,\n             zero_copy_only=zero_copy_only,\n             integer_object_nulls=integer_object_nulls,\n+            date_as_object=date_as_object,\n             use_threads=False)\n \n         with nogil:\n@@ -483,7 +485,8 @@ cdef class Column:\n         return [pyarrow_wrap_column(col) for col in flattened]\n \n     def to_pandas(self, bint strings_to_categorical=False,\n-                  bint zero_copy_only=False, bint integer_object_nulls=False):\n+                  bint zero_copy_only=False, bint integer_object_nulls=False,\n+                  bint date_as_object=False):\n         \"\"\"\n         Convert the arrow::Column to a pandas.Series\n \n@@ -494,6 +497,7 @@ cdef class Column:\n         values = self.data.to_pandas(\n             strings_to_categorical=strings_to_categorical,\n             zero_copy_only=zero_copy_only,\n+            date_as_object=date_as_object,\n             integer_object_nulls=integer_object_nulls)\n         result = pd.Series(values, name=self.name)\n \n@@ -1286,7 +1290,8 @@ cdef class Table:\n \n     def to_pandas(self, bint strings_to_categorical=False,\n                   memory_pool=None, bint zero_copy_only=False, categories=None,\n-                  bint integer_object_nulls=False, bint use_threads=True):\n+                  bint integer_object_nulls=False, bint date_as_object=False,\n+                  bint use_threads=True):\n         \"\"\"\n         Convert the arrow::Table to a pandas DataFrame\n \n@@ -1303,6 +1308,8 @@ cdef class Table:\n             List of columns that should be returned as pandas.Categorical\n         integer_object_nulls : boolean, default False\n             Cast integers with nulls to objects\n+        date_as_object : boolean, default False\n+            Cast dates to objects\n         use_threads: boolean, default True\n             Whether to parallelize the conversion using multiple threads\n \n@@ -1317,6 +1324,7 @@ cdef class Table:\n             strings_to_categorical=strings_to_categorical,\n             zero_copy_only=zero_copy_only,\n             integer_object_nulls=integer_object_nulls,\n+            date_as_object=date_as_object,\n             use_threads=use_threads)\n \n         mgr = pdcompat.table_to_blockmanager(options, self, memory_pool,\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 3fa7cf4c34..bb53c14f73 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -906,6 +906,85 @@ def test_pandas_datetime_to_date64_failures(self, mask):\n         with pytest.raises(pa.ArrowInvalid, match=expected_msg):\n             pa.Array.from_pandas(s, type=pa.date64(), mask=mask)\n \n+    def test_array_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        assert arr.equals(pa.array(expected))\n+\n+        result = arr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(arr.to_pandas(), expected)\n+\n+        result = arr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_chunked_array_convert_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+        carr = pa.chunked_array([data])\n+\n+        result = carr.to_pandas()\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(carr.to_pandas(), expected)\n+\n+        result = carr.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_column_convert_date_as_object(self):\n+        data = [date(2000, 1, 1),\n+                None,\n+                date(1970, 1, 1),\n+                date(2040, 2, 26)]\n+        expected = np.array(['2000-01-01',\n+                             None,\n+                             '1970-01-01',\n+                             '2040-02-26'], dtype='datetime64')\n+\n+        arr = pa.array(data)\n+        column = pa.column('date', arr)\n+\n+        result = column.to_pandas()\n+        npt.assert_array_equal(column.to_pandas(), expected)\n+\n+        result = column.to_pandas(date_as_object=True)\n+        expected = expected.astype(object)\n+        assert result.dtype == expected.dtype\n+        npt.assert_array_equal(result, expected)\n+\n+    def test_table_convert_date_as_object(self):\n+        df = pd.DataFrame({\n+            'date': [date(2000, 1, 1),\n+                     None,\n+                     date(1970, 1, 1),\n+                     date(2040, 2, 26)]})\n+\n+        table = pa.Table.from_pandas(df, preserve_index=False)\n+\n+        df_datetime = table.to_pandas()\n+        df_object = table.to_pandas(date_as_object=True)\n+\n+        tm.assert_frame_equal(df.astype('datetime64[ns]'), df_datetime,\n+                              check_dtype=True)\n+        tm.assert_frame_equal(df, df_object, check_dtype=True)\n+\n     def test_date_infer(self):\n         df = pd.DataFrame({\n             'date': [date(2000, 1, 1),\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-13T21:15:57.701+0000",
                    "updated": "2018-09-13T21:15:57.701+0000",
                    "started": "2018-09-13T21:15:57.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144081",
                    "issueId": "13162841"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@456cdd64[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32fcf13d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@743383d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2113f172[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4048fd34[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@282ad43d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@406fefeb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7ec90ef5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@796fed45[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@71a4569[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38b5e2d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@ebded93[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 13 21:16:03 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-13T21:16:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2646/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2018-05-30T09:03:29.000+0000",
        "updated": "2018-09-13T21:16:03.000+0000",
        "timeoriginalestimate": null,
        "description": "Arrow currently casts date objects to nanosecond precision datetime objects.\u00a0I'd like to have a way to preserve the type during a roundtrip\r\n{code}\r\n>>> import pandas as pd\r\n>>> import pyarrow as pa\r\n>>> import datetime\r\n>>> pa.date32().to_pandas_dtype()\r\ndtype('<M8[ns]')\r\n>>> df = pd.DataFrame({'date': [datetime.date(2018, 1, 1)]})\r\n>>> df.dtypes\r\ndate object\r\ndtype: object\r\n>>> df_rountrip = pa.Table.from_pandas(df).to_pandas()\r\n>>> df_rountrip.dtypes\r\ndate    datetime64[ns]\r\ndtype: object\r\n{code}\r\nI'd expect something like\u00a0this to work:\r\n{code}\r\n>>> import pandas.testing as pdt\r\n>>> df_rountrip = pa.Table.from_pandas(df).to_pandas(date_as_object=True)\r\n>>> pdt.assert_frame_equal(df_rountrip, df)\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++/Python] Pandas roundtrip for date objects",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/comment/16510173",
                    "id": "16510173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~fjetter] would you like to do this for 0.10.0? We might consider some kind of Options object (like we have in C++) to manage all of these conversion parameters that may show up in many functions (to avoid having to maintain a lot of the same function signatures)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-06-12T20:40:14.427+0000",
                    "updated": "2018-06-12T20:40:14.427+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/comment/16512634",
                    "id": "16512634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "[~wesmckinn] I'm still not convinced that an Options object would work well with Python users. Do you have an example of a Python project that uses it? I would expect that users would much more favour kwargs are done in Pandas/Matplotlib/\u2026 . While there are certain drawbacks for a library developer, I think it will be much more appreciated by users.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-06-14T15:41:46.024+0000",
                    "updated": "2018-06-14T15:41:46.024+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/comment/16527728",
                    "id": "16527728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The standard {{csv}} module has both a notion of \"dialect\" and additional {{**kwargs}} to each function so that you can override individual options. Intuitively, it allows accepting individual option arguments without listing and documenting them explicitly for each method.\r\n\r\nI tend to prefer the options object / dialect approach myself, but it's true I'm more in the library developer camp :-)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-06-29T14:35:47.828+0000",
                    "updated": "2018-06-29T14:36:23.878+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/comment/16609091",
                    "id": "16609091",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "I do prefer kwargs on python side. We could introduce mixins to reduce the redundant function signatures.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-09-10T12:15:31.801+0000",
                    "updated": "2018-09-10T12:15:31.801+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162841/comment/16614075",
                    "id": "16614075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2535\n[https://github.com/apache/arrow/pull/2535]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-13T21:16:03.717+0000",
                    "updated": "2018-09-13T21:16:03.717+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3uaxr:",
        "customfield_12314139": null
    }
}