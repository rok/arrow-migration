{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13235894",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894",
    "key": "ARROW-5429",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12561737",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12561737",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13234555",
                    "key": "ARROW-5386",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234555",
                    "fields": {
                        "summary": "Making the rounding behavior of the buffer capacity configurable",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5429/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400\n \n \n   The current buffer allocation policy works like this:\r\n   \r\n   1. If the requested buffer size is greater than or equal to the chunk size, the buffer size will be as is.\r\n   2. If the requested size is within the chunk size, the buffer size will be rounded to the next power of 2.\r\n   \r\n   This policy can lead to waste of memory in some cases. For example, if we request a buffer of size 10MB, Arrow will round the buffer size to 16 MB. If we only need 10 MB, this will lead to a waste of (16 - 10) / 10 = 60% of memory.\r\n   \r\n   So in this proposal, we provide another policy: the rounded buffer size must be a multiple of some memory unit, like (32 KB). This policy has two benefits:\r\n   \r\n   1. The wasted memory cannot exceed one memory unit (32 KB), which is much smaller than the power-of-two policy.\r\n   2. This is the memory allocation policy adopted by some computation engines (e.g. Apache Flink). \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-28T09:55:53.410+0000",
                    "updated": "2019-05-28T09:55:53.410+0000",
                    "started": "2019-05-28T09:55:53.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249231",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288385885\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n ##########\n @@ -224,6 +224,69 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testSegmentAllocator() {\n+    SegmentAllocator allocator = new SegmentAllocator(1024 * 1024, 1024);\n \n Review comment:\n   please use try: with\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T04:07:23.808+0000",
                    "updated": "2019-05-29T04:07:23.808+0000",
                    "started": "2019-05-29T04:07:23.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249797",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288386174\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   It seems like this is the only thing that changes between this and the method you are overriding.  Can you factor out that code and this into a rounding policy?  Then expose a new constructor on BaseAllocator that takes the policy.  Then the new allocator would propagate the policy?  I think that would reduce the size of this PR dramatically.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T04:07:23.814+0000",
                    "updated": "2019-05-29T04:07:23.814+0000",
                    "started": "2019-05-29T04:07:23.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249798",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288385270\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   Can you use: https://github.com/apache/arrow/blob/43f2a31d3dd31cb2d5d6f0be72dba13a7a4e1e1f/cpp/src/arrow/util/bit-util.h#L146?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T04:07:23.821+0000",
                    "updated": "2019-05-29T04:07:23.821+0000",
                    "started": "2019-05-29T04:07:23.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249799",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288385707\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n ##########\n @@ -224,6 +224,69 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testSegmentAllocator() {\n+    SegmentAllocator allocator = new SegmentAllocator(1024 * 1024, 1024);\n+\n+    ArrowBuf buf = allocator.buffer(798);\n+    assertEquals(1024, buf.capacity());\n+    buf.setInt(333, 959);\n+    assertEquals(959, buf.getInt(333));\n+    buf.close();\n+\n+    buf = allocator.buffer(1025);\n+    assertEquals(2048, buf.capacity());\n+    buf.setInt(193, 939);\n+    assertEquals(939, buf.getInt(193));\n+    buf.close();\n+\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testSegmentAllocator_childAllocator() {\n+    SegmentAllocator allocator = new SegmentAllocator(1024 * 1024, 1024);\n+\n+    BufferAllocator childAllocator = allocator.newChildAllocator(\"child\", 0, 512 * 1024);\n+    assertTrue(childAllocator instanceof SegmentAllocator);\n+    assertEquals(\"child\", childAllocator.getName());\n+\n+    ArrowBuf buf = childAllocator.buffer(798);\n+    assertEquals(1024, buf.capacity());\n+    buf.setInt(333, 959);\n+    assertEquals(959, buf.getInt(333));\n+    buf.close();\n+\n+    buf = childAllocator.buffer(1025);\n+    assertEquals(2048, buf.capacity());\n+    buf.setInt(193, 939);\n+    assertEquals(939, buf.getInt(193));\n+    buf.close();\n+\n+    childAllocator.close();\n+    allocator.close();\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testSegmentAllocator_smallSegment() {\n+    try {\n \n Review comment:\n   Please use junit5 assert throws?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T04:07:23.844+0000",
                    "updated": "2019-05-29T04:07:23.844+0000",
                    "started": "2019-05-29T04:07:23.844+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249800",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288448823\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   Good suggestion. The implementation in bit-util.h is definitely more efficient. I believe other parts of  Arrow code can also benefit from this implementation. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T08:27:55.959+0000",
                    "updated": "2019-05-29T08:27:55.959+0000",
                    "started": "2019-05-29T08:27:55.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249951",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288448988\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n ##########\n @@ -224,6 +224,69 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testSegmentAllocator() {\n+    SegmentAllocator allocator = new SegmentAllocator(1024 * 1024, 1024);\n+\n+    ArrowBuf buf = allocator.buffer(798);\n+    assertEquals(1024, buf.capacity());\n+    buf.setInt(333, 959);\n+    assertEquals(959, buf.getInt(333));\n+    buf.close();\n+\n+    buf = allocator.buffer(1025);\n+    assertEquals(2048, buf.capacity());\n+    buf.setInt(193, 939);\n+    assertEquals(939, buf.getInt(193));\n+    buf.close();\n+\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testSegmentAllocator_childAllocator() {\n+    SegmentAllocator allocator = new SegmentAllocator(1024 * 1024, 1024);\n+\n+    BufferAllocator childAllocator = allocator.newChildAllocator(\"child\", 0, 512 * 1024);\n+    assertTrue(childAllocator instanceof SegmentAllocator);\n+    assertEquals(\"child\", childAllocator.getName());\n+\n+    ArrowBuf buf = childAllocator.buffer(798);\n+    assertEquals(1024, buf.capacity());\n+    buf.setInt(333, 959);\n+    assertEquals(959, buf.getInt(333));\n+    buf.close();\n+\n+    buf = childAllocator.buffer(1025);\n+    assertEquals(2048, buf.capacity());\n+    buf.setInt(193, 939);\n+    assertEquals(939, buf.getInt(193));\n+    buf.close();\n+\n+    childAllocator.close();\n+    allocator.close();\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testSegmentAllocator_smallSegment() {\n+    try {\n \n Review comment:\n   Sure. Thanks for the reminder.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T08:28:20.322+0000",
                    "updated": "2019-05-29T08:28:20.322+0000",
                    "started": "2019-05-29T08:28:20.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249952",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288449218\n \n \n\n ##########\n File path: java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n ##########\n @@ -224,6 +224,69 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testSegmentAllocator() {\n+    SegmentAllocator allocator = new SegmentAllocator(1024 * 1024, 1024);\n \n Review comment:\n   Sure. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T08:29:03.171+0000",
                    "updated": "2019-05-29T08:29:03.171+0000",
                    "started": "2019-05-29T08:29:03.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249954",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288450678\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   This is really good suggestion. Many thanks!\r\n   \r\n   Maybe you have also noticed that, there is some overlap with [PR-4358](https://github.com/apache/arrow/pull/4358). Do you think I should also revise that PR accordingly?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T08:32:04.351+0000",
                    "updated": "2019-05-29T08:32:04.351+0000",
                    "started": "2019-05-29T08:32:04.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249958",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/249960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#issuecomment-496840688\n \n \n   > Thank your @liyafan82 Given the critical nature of this code could you add a benchmark showing before and after results?\r\n   \r\n   Sure. Please let me understand exactly what you want. Do you mean:\r\n   1. Benchmark showing the performance of the allocator.\r\n   2. Benchmark showing the performance of the allocated buffers.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-29T08:35:01.372+0000",
                    "updated": "2019-05-29T08:35:01.372+0000",
                    "started": "2019-05-29T08:35:01.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "249960",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250751",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288872334\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   @liyafan82 I think #4358 is different because it changes the public API of consumers of the class.  In this case you are only adding a constructor.  I'm more comfortable with this change as long as there aren't performance regressions, and I need to confirm there isn't something subtle about the power of 2 rounding policy?\r\n   \r\n   CC @pravindra @praveenbingo  is there a strong reason all rounding was power of 2 or was it just convenience?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:24:57.875+0000",
                    "updated": "2019-05-30T06:24:57.875+0000",
                    "started": "2019-05-30T06:24:57.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250751",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#issuecomment-497219690\n \n \n   @liyafan82 The performance of the allocator.  I don't think there is a reason the buffers should have different performance, do you think there is?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:26:04.252+0000",
                    "updated": "2019-05-30T06:26:04.252+0000",
                    "started": "2019-05-30T06:26:04.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250752",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288872914\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   @liyafan82 sorry to be clear, I don't think you should revise the other PR until we come to consensus on the mailing list that it should be added (I don't want to cause any wasted work, and I appreciate all the effort you have put in being responsive to comments).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:28:02.876+0000",
                    "updated": "2019-05-30T06:28:02.876+0000",
                    "started": "2019-05-30T06:28:02.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250753",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288873155\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n ##########\n @@ -53,7 +53,7 @@\n   private static final PooledByteBufAllocatorL INNER_ALLOCATOR = new PooledByteBufAllocatorL();\n \n   static final UnsafeDirectLittleEndian EMPTY = INNER_ALLOCATOR.empty;\n-  static final long CHUNK_SIZE = INNER_ALLOCATOR.getChunkSize();\n+  public static final long CHUNK_SIZE = INNER_ALLOCATOR.getChunkSize();\n \n Review comment:\n   maybe pass this in as a parameter to the policy, instead of making it public?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:29:09.060+0000",
                    "updated": "2019-05-30T06:29:09.060+0000",
                    "started": "2019-05-30T06:29:09.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250754",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288874399\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/rounding/SegmentRoundingPolicy.java\n ##########\n @@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.rounding;\n+\n+/**\n+ * The rounding policy that each buffer size must a multiple of the segment size.\n+ */\n+public class SegmentRoundingPolicy implements  RoundingPolicy {\n+\n+  /**\n+   * The minimal segment size.\n+   */\n+  public static final long MIN_SEGMENT_SIZE = 1024L;\n+\n+  /**\n+   * The segment size. It must be at least {@link SegmentRoundingPolicy#MIN_SEGMENT_SIZE},\n+   * and be a power of 2.\n+   */\n+  private int segmentSize;\n+\n+  /**\n+   * Constructor for the segment rounding policy.\n+   * @param segmentSize the segment size.\n+   * @throws IllegalArgumentException if the segment size is smaller than\n+   * {@link SegmentRoundingPolicy#MIN_SEGMENT_SIZE}, or is not a power of 2.\n+   */\n+  public SegmentRoundingPolicy(int segmentSize) {\n+    if (segmentSize < MIN_SEGMENT_SIZE) {\n \n Review comment:\n   Can you use Preconditions.checkArgument instead?  providing the passed in size in the error might be helpful as well.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:38:48.787+0000",
                    "updated": "2019-05-30T06:38:48.787+0000",
                    "started": "2019-05-30T06:38:48.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250758",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288874134\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/rounding/RoundingPolicy.java\n ##########\n @@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.rounding;\n+\n+/**\n+ * The policy for rounding the buffer size.\n+ * In particular, given a requested buffer size, the policy will determine the rounded buffer size.\n \n Review comment:\n   maybe comment on why rounding is done?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:38:48.948+0000",
                    "updated": "2019-05-30T06:38:48.948+0000",
                    "started": "2019-05-30T06:38:48.947+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250759",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288874242\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/rounding/SegmentRoundingPolicy.java\n ##########\n @@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory.rounding;\n+\n+/**\n+ * The rounding policy that each buffer size must a multiple of the segment size.\n+ */\n+public class SegmentRoundingPolicy implements  RoundingPolicy {\n+\n+  /**\n+   * The minimal segment size.\n+   */\n+  public static final long MIN_SEGMENT_SIZE = 1024L;\n \n Review comment:\n   Is there a specific rationale for this size?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:38:48.986+0000",
                    "updated": "2019-05-30T06:38:48.986+0000",
                    "started": "2019-05-30T06:38:48.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250760",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288873253\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n ##########\n @@ -57,6 +58,7 @@\n   private final IdentityHashMap<Reservation, Object> reservations;\n   private final HistoricalLog historicalLog;\n   private volatile boolean isClosed = false; // the allocator has been closed\n+  private RoundingPolicy roundingPolicy;\n \n Review comment:\n   can this be final?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T06:38:51.864+0000",
                    "updated": "2019-05-30T06:38:51.864+0000",
                    "started": "2019-05-30T06:38:51.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250761",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288901325\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   > @liyafan82 I think #4358 is different because it changes the public API of consumers of the class. In this case you are only adding a constructor. I'm more comfortable with this change as long as there aren't performance regressions, and I need to confirm there isn't something subtle about the power of 2 rounding policy?\r\n   > \r\n   > CC @pravindra @praveenbingo is there a strong reason all rounding was power of 2 or was it just convenience?\r\n   \r\n   I am also more comfortable with this change, thanks to your suggestion. \r\n   I think power-of-2 rounding have two benefits:\r\n   1. Better performance - whenever a part of a big segment is allocated, the remaining part is still the sum of some valid segments.\r\n   2. Reduce memory fragmentation - this leads to more efficient memory usage.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T08:22:55.858+0000",
                    "updated": "2019-05-30T08:22:55.858+0000",
                    "started": "2019-05-30T08:22:55.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250813",
                    "issueId": "13235894"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/worklog/250816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4400: ARROW-5429: [Java] Provide alternative buffer allocation policy\nURL: https://github.com/apache/arrow/pull/4400#discussion_r288901715\n \n \n\n ##########\n File path: java/memory/src/main/java/org/apache/arrow/memory/SegmentAllocator.java\n ##########\n @@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.memory;\n+\n+import org.apache.arrow.util.Preconditions;\n+\n+import io.netty.buffer.ArrowBuf;\n+import io.netty.util.internal.OutOfDirectMemoryError;\n+\n+/**\n+ * A segment allocator allocates a buffer whose size is a multiple of the segment size.\n+ */\n+public class SegmentAllocator extends BaseAllocator {\n+\n+  protected final int segmentSize;\n+\n+  public SegmentAllocator(final long limit, final int segmentSize) {\n+    this(AllocationListener.NOOP, limit, segmentSize);\n+  }\n+\n+  public SegmentAllocator(final AllocationListener listener, final long limit, final int segmentSize) {\n+    this(null, listener, \"Segment Allocator\", 0, limit, segmentSize);\n+  }\n+\n+  /**\n+   * Initialize an allocator\n+   * @param parentAllocator   parent allocator. null if defining a root allocator\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n+   * @param name              name of this allocator\n+   * @param initReservation   initial reservation. Cannot be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param segmentSize segment size. Must be greater than or equal to 1024, and must be a power of 2.\n+   */\n+  public SegmentAllocator(\n+          final BaseAllocator parentAllocator,\n+          final AllocationListener listener,\n+          final String name,\n+          final long initReservation,\n+          final long maxAllocation,\n+          final int segmentSize) {\n+    super(parentAllocator, listener, name, initReservation, maxAllocation);\n+\n+    if (segmentSize < 1024L) {\n+      throw new IllegalArgumentException(\"The segment size cannot be smaller than 1024\");\n+    }\n+    if ((segmentSize & (segmentSize - 1)) != 0) {\n+      throw new IllegalArgumentException(\"The segment size must be a power of 2\");\n+    }\n+    this.segmentSize = segmentSize;\n+  }\n+\n+  @Override\n+  public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n+    assertOpen();\n+\n+    Preconditions.checkArgument(initialRequestSize >= 0, \"the requested size must be non-negative\");\n+\n+    if (initialRequestSize == 0) {\n+      return empty;\n+    }\n+\n+    // round to next largest multiple of the segment size\n+    final int actualRequestSize =\n \n Review comment:\n   > @liyafan82 sorry to be clear, I don't think you should revise the other PR until we come to consensus on the mailing list that it should be added (I don't want to cause any wasted work, and I appreciate all the effort you have put in being responsive to comments).\r\n   \r\n   Thanks for your consideration. Let's wait for the feedback from the mailing list.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-30T08:24:06.361+0000",
                    "updated": "2019-05-30T08:24:06.361+0000",
                    "started": "2019-05-30T08:24:06.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "250816",
                    "issueId": "13235894"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@64881501[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@241d4345[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63f19661[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2db8e631[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41abaef1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2ba874ec[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4485bd66[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2e6642a9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3226adb2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5ac1b00e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@334648bd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2fa93776[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri May 31 03:37:21 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-05-31T03:37:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5429/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-05-28T02:51:54.000+0000",
        "updated": "2019-05-31T04:25:32.000+0000",
        "timeoriginalestimate": null,
        "description": "The current buffer allocation policy works like this:\r\n * If the requested buffer size is greater than or equal to the chunk size, the buffer size will be as is.\r\n * If the requested size is within the chunk size, the buffer size will be rounded to the next power of 2.\r\n\r\nThis policy can lead to waste of memory in some cases. For example, if we request a buffer of size 10MB, Arrow will round the buffer size to 16 MB. If we only need 10 MB, this will lead to a waste of (16 - 10) / 10 = 60% of memory.\r\n\r\nSo in this proposal, we provide another policy: the rounded buffer size must be a multiple of some memory unit, like (32 KB). This policy has two benefits:\r\n # The wasted memory cannot exceed one memory unit (32 KB), which is much smaller than the power-of-two policy.\r\n # This is the memory allocation policy adopted by some computation engines (e.g. Apache Flink).\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Provide alternative buffer allocation policy",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13235894/comment/16852617",
                    "id": "16852617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4400\n[https://github.com/apache/arrow/pull/4400]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-05-31T03:37:21.678+0000",
                    "updated": "2019-05-31T03:37:21.678+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z034nk:",
        "customfield_12314139": null
    }
}