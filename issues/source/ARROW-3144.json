{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13182000",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000",
    "key": "ARROW-3144",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12560805",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560805",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13090215",
                    "key": "ARROW-1278",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13090215",
                    "fields": {
                        "summary": "Integration tests for Fixed Size List type",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12560981",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560981",
                "type": {
                    "id": "12310560",
                    "name": "Problem/Incident",
                    "inward": "is caused by",
                    "outward": "causes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310560"
                },
                "outwardIssue": {
                    "id": "13234003",
                    "key": "ARROW-5361",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13234003",
                    "fields": {
                        "summary": "[R] Follow DictionaryType/DictionaryArray changes from ARROW-3144",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                            "name": "Blocker",
                            "id": "1"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12560850",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560850",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13233603",
                    "key": "ARROW-5338",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233603",
                    "fields": {
                        "summary": "[Format][Integration] Define how to test for delta dictionary support in the JSON integration test data format",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12560355",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560355",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13232098",
                    "key": "ARROW-5279",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13232098",
                    "fields": {
                        "summary": "[C++] Support reading delta dictionaries in IPC streams",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                            "name": "Blocker",
                            "id": "1"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12566917",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12566917",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13187263",
                    "key": "ARROW-3325",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187263",
                    "fields": {
                        "summary": "[Python] Support reading Parquet binary/string columns directly as DictionaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12560849",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12560849",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13233601",
                    "key": "ARROW-5336",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13233601",
                    "fields": {
                        "summary": "[C++] Implement arrow::Concatenate for dictionary-encoded arrays with unequal dictionaries",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 45600,
            "total": 45600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 45600,
            "total": 45600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3144/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 83,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316\n \n \n   This patch moves the dictionary member out of DictionaryType to a new\r\n   member on the internal ArrayData structure. As a result, serializing\r\n   and deserializing schemas requires only a single IPC message, and\r\n   schemas have no knowledge of what the dictionary values are.\r\n   \r\n   The objective of this change is to correct a long-standing Arrow C++\r\n   design problem with dictionary-encoded arrays where the dictionary\r\n   values must be known at schema construction time. This has plagued us\r\n   all over the codebase:\r\n   \r\n   * In reading Parquet files, reading directly to DictionaryArray is not\r\n     simple because each row group may have a different dictionary\r\n   * In IPC streams, delta dictionaries (not yet implemented) would\r\n     invalidate the pre-existing schema, causing subsequent RecordBatch\r\n     objects to be incompatible\r\n   * In Arrow Flight, schema negotiation requires the dictionaries to be\r\n     sent, having possibly unbounded size.\r\n   * Not possible to have different dictionaries in a ChunkedArray\r\n   * In CSV files, converting columns to dictionary in parallel would\r\n     require an expensive type unification\r\n   \r\n   The summary of what can be learned from this is: do not put data in\r\n   type objects, only metadata. Dictionaries are data, not metadata.\r\n   \r\n   There are a number of unavoidable API changes (straightforward for\r\n   library users to fix) but otherwise no functional difference in the\r\n   library.\r\n   \r\n   As you can see the change is quite complex as significant parts of IPC\r\n   read/write, JSON integration testing, and Flight needed to be reworked\r\n   to alter the control flow around schema resolution and handling the\r\n   first record batch.\r\n   \r\n   Key APIs changed\r\n   \r\n   * `DictionaryType` constructor requires a `DataType` for the\r\n     dictionary value type instead of the dictionary itself. The\r\n     `dictionary` factory method is correspondingly changed. The\r\n     `dictionary` accessor method on `DictionaryType` is replaced with\r\n     `value_type`.\r\n   * `DictionaryArray` constructor and `DictionaryArray::FromArrays` must\r\n     be passed the dictionary values as an additional argument.\r\n   * `DictionaryMemo` is exposed in the public API as it is now required\r\n     for granular interactions with IPC messages with such functions as\r\n     `ipc::ReadSchema` and `ipc::ReadRecordBatch`\r\n   * A `DictionaryMemo*` argument is added to several low-level public\r\n     functions in `ipc/writer.h` and `ipc/reader.h`\r\n   \r\n   I got the C++ and Python codebases totally fixed up but I will\r\n   probably need help with GLib, Ruby, and R, so I wanted to get this up\r\n   for review before that.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T13:14:02.465+0000",
                    "updated": "2019-05-15T13:14:02.465+0000",
                    "started": "2019-05-15T13:14:02.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242477",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284283035\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -765,20 +763,30 @@ static Status TransposeDictIndices(MemoryPool* pool, const ArrayData& in_data,\n }\n \n Status DictionaryArray::Transpose(MemoryPool* pool, const std::shared_ptr<DataType>& type,\n+                                  const std::shared_ptr<Array>& dictionary,\n                                   const std::vector<int32_t>& transpose_map,\n                                   std::shared_ptr<Array>* out) const {\n   DCHECK_EQ(type->id(), Type::DICTIONARY);\n   const auto& out_dict_type = checked_cast<const DictionaryType&>(*type);\n \n \n Review comment:\n   This seems equivalent to `Cast(array=Take(indices=transpose_map, values=data_), to=out_index_type)`. Should we add an explicit output type to `TakeOptions`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:22.138+0000",
                    "updated": "2019-05-15T15:37:22.138+0000",
                    "started": "2019-05-15T15:37:22.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242584",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284286959\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -206,6 +208,10 @@ struct ARROW_EXPORT ArrayData {\n   int64_t offset;\n   std::vector<std::shared_ptr<Buffer>> buffers;\n   std::vector<std::shared_ptr<ArrayData>> child_data;\n+\n+  // The dictionary for this Array, if any. Only used for dictionary\n+  // type\n+  std::shared_ptr<Array> dictionary;\n \n Review comment:\n   Why not use `child_data[0]`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:22.234+0000",
                    "updated": "2019-05-15T15:37:22.234+0000",
                    "started": "2019-05-15T15:37:22.233+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242585",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284301841\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -746,213 +743,159 @@ class FromNullCastKernel : public CastKernelBase {\n // ----------------------------------------------------------------------\n // Dictionary to other things\n \n-template <typename IndexType>\n-void UnpackFixedSizeBinaryDictionary(FunctionContext* ctx, const Array& indices,\n-                                     const FixedSizeBinaryArray& dictionary,\n-                                     ArrayData* output) {\n-  using index_c_type = typename IndexType::c_type;\n+template <typename T, typename Enable = void>\n+struct UnpackHelper {};\n \n-  const index_c_type* in = indices.data()->GetValues<index_c_type>(1);\n-  int32_t byte_width =\n-      checked_cast<const FixedSizeBinaryType&>(*output->type).byte_width();\n+template <typename T>\n+struct UnpackHelper<\n+    T, typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value>::type> {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+  template <typename IndexType>\n+  Status Unpack(FunctionContext* ctx, const ArrayData& indices,\n+                const ArrayType& dictionary, ArrayData* output) {\n+    using index_c_type = typename IndexType::c_type;\n+\n+    const index_c_type* in = indices.GetValues<index_c_type>(1);\n+    int32_t byte_width =\n+        checked_cast<const FixedSizeBinaryType&>(*output->type).byte_width();\n \n-  uint8_t* out = output->buffers[1]->mutable_data() + byte_width * output->offset;\n+    uint8_t* out = output->buffers[1]->mutable_data() + byte_width * output->offset;\n \n-  if (indices.null_count() != 0) {\n-    internal::BitmapReader valid_bits_reader(indices.null_bitmap_data(), indices.offset(),\n-                                             indices.length());\n+    if (indices.GetNullCount() != 0) {\n+      internal::BitmapReader valid_bits_reader(indices.GetValues<uint8_t>(0),\n+                                               indices.offset, indices.length);\n \n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      if (valid_bits_reader.IsSet()) {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        if (valid_bits_reader.IsSet()) {\n+          const uint8_t* value = dictionary.Value(in[i]);\n+          memcpy(out + i * byte_width, value, byte_width);\n+        }\n+        valid_bits_reader.Next();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n         const uint8_t* value = dictionary.Value(in[i]);\n         memcpy(out + i * byte_width, value, byte_width);\n       }\n-      valid_bits_reader.Next();\n-    }\n-  } else {\n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      const uint8_t* value = dictionary.Value(in[i]);\n-      memcpy(out + i * byte_width, value, byte_width);\n-    }\n-  }\n-}\n-\n-template <typename T>\n-struct CastFunctor<\n-    T, DictionaryType,\n-    typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value>::type> {\n-  void operator()(FunctionContext* ctx, const CastOptions& options,\n-                  const ArrayData& input, ArrayData* output) {\n-    DictionaryArray dict_array(input.Copy());\n-\n-    const DictionaryType& type = checked_cast<const DictionaryType&>(*input.type);\n-    const DataType& values_type = *type.dictionary()->type();\n-    const FixedSizeBinaryArray& dictionary =\n-        checked_cast<const FixedSizeBinaryArray&>(*type.dictionary());\n-\n-    // Check if values and output type match\n-    DCHECK(values_type.Equals(*output->type))\n-        << \"Dictionary type: \" << values_type << \" target type: \" << (*output->type);\n-\n-    const Array& indices = *dict_array.indices();\n-    switch (indices.type()->id()) {\n-      case Type::INT8:\n-        UnpackFixedSizeBinaryDictionary<Int8Type>(ctx, indices, dictionary, output);\n-        break;\n-      case Type::INT16:\n-        UnpackFixedSizeBinaryDictionary<Int16Type>(ctx, indices, dictionary, output);\n-        break;\n-      case Type::INT32:\n-        UnpackFixedSizeBinaryDictionary<Int32Type>(ctx, indices, dictionary, output);\n-        break;\n-      case Type::INT64:\n-        UnpackFixedSizeBinaryDictionary<Int64Type>(ctx, indices, dictionary, output);\n-        break;\n-      default:\n-        ctx->SetStatus(\n-            Status::Invalid(\"Invalid index type: \", indices.type()->ToString()));\n-        return;\n     }\n+    return Status::OK();\n   }\n };\n \n-template <typename IndexType>\n-Status UnpackBinaryDictionary(FunctionContext* ctx, const Array& indices,\n-                              const BinaryArray& dictionary, ArrayData* output) {\n-  using index_c_type = typename IndexType::c_type;\n-  std::unique_ptr<ArrayBuilder> builder;\n-  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), output->type, &builder));\n-  BinaryBuilder* binary_builder = checked_cast<BinaryBuilder*>(builder.get());\n-\n-  const index_c_type* in = indices.data()->GetValues<index_c_type>(1);\n-  if (indices.null_count() != 0) {\n-    internal::BitmapReader valid_bits_reader(indices.null_bitmap_data(), indices.offset(),\n-                                             indices.length());\n-\n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      if (valid_bits_reader.IsSet()) {\n+template <typename T>\n+struct UnpackHelper<\n+    T, typename std::enable_if<std::is_base_of<BinaryType, T>::value>::type> {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+  template <typename IndexType>\n+  Status Unpack(FunctionContext* ctx, const ArrayData& indices,\n+                const ArrayType& dictionary, ArrayData* output) {\n+    using index_c_type = typename IndexType::c_type;\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), output->type, &builder));\n+    BinaryBuilder* binary_builder = checked_cast<BinaryBuilder*>(builder.get());\n+\n+    const index_c_type* in = indices.GetValues<index_c_type>(1);\n+    if (indices.GetNullCount() != 0) {\n+      internal::BitmapReader valid_bits_reader(indices.GetValues<uint8_t>(0),\n+                                               indices.offset, indices.length);\n+\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        if (valid_bits_reader.IsSet()) {\n+          RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n+        } else {\n+          RETURN_NOT_OK(binary_builder->AppendNull());\n+        }\n+        valid_bits_reader.Next();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n         RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n-      } else {\n-        RETURN_NOT_OK(binary_builder->AppendNull());\n       }\n-      valid_bits_reader.Next();\n-    }\n-  } else {\n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n     }\n-  }\n-\n-  std::shared_ptr<Array> plain_array;\n-  RETURN_NOT_OK(binary_builder->Finish(&plain_array));\n-  // Copy all buffer except the valid bitmap\n-  for (size_t i = 1; i < plain_array->data()->buffers.size(); i++) {\n-    output->buffers.push_back(plain_array->data()->buffers[i]);\n-  }\n-\n-  return Status::OK();\n-}\n-\n-template <typename T>\n-struct CastFunctor<T, DictionaryType,\n-                   typename std::enable_if<std::is_base_of<BinaryType, T>::value>::type> {\n-  void operator()(FunctionContext* ctx, const CastOptions& options,\n-                  const ArrayData& input, ArrayData* output) {\n-    DictionaryArray dict_array(input.Copy());\n-\n-    const DictionaryType& type = checked_cast<const DictionaryType&>(*input.type);\n-    const DataType& values_type = *type.dictionary()->type();\n-    const BinaryArray& dictionary = checked_cast<const BinaryArray&>(*type.dictionary());\n-\n-    // Check if values and output type match\n-    DCHECK(values_type.Equals(*output->type))\n-        << \"Dictionary type: \" << values_type << \" target type: \" << (*output->type);\n \n-    const Array& indices = *dict_array.indices();\n-    switch (indices.type()->id()) {\n-      case Type::INT8:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int8Type>(ctx, indices, dictionary, output)));\n-        break;\n-      case Type::INT16:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int16Type>(ctx, indices, dictionary, output)));\n-        break;\n-      case Type::INT32:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int32Type>(ctx, indices, dictionary, output)));\n-        break;\n-      case Type::INT64:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int64Type>(ctx, indices, dictionary, output)));\n-        break;\n-      default:\n-        ctx->SetStatus(\n-            Status::Invalid(\"Invalid index type: \", indices.type()->ToString()));\n-        return;\n+    std::shared_ptr<Array> plain_array;\n+    RETURN_NOT_OK(binary_builder->Finish(&plain_array));\n+    // Copy all buffer except the valid bitmap\n+    for (size_t i = 1; i < plain_array->data()->buffers.size(); i++) {\n+      output->buffers.push_back(plain_array->data()->buffers[i]);\n     }\n+\n+    return Status::OK();\n   }\n };\n \n-template <typename IndexType, typename c_type>\n-void UnpackPrimitiveDictionary(const Array& indices, const c_type* dictionary,\n-                               c_type* out) {\n-  const auto& in = indices.data()->GetValues<typename IndexType::c_type>(1);\n-  int64_t length = indices.length();\n-\n-  if (indices.null_count() == 0) {\n-    for (int64_t i = 0; i < length; ++i) {\n-      out[i] = dictionary[in[i]];\n-    }\n-  } else {\n-    auto null_bitmap = indices.null_bitmap_data();\n-    internal::BitmapReader valid_bits_reader(null_bitmap, indices.offset(), length);\n-    for (int64_t i = 0; i < length; ++i) {\n-      if (valid_bits_reader.IsSet()) {\n-        out[i] = dictionary[in[i]];\n+template <typename T>\n+struct UnpackHelper<T, typename std::enable_if<is_number_type<T>::value ||\n+                                               is_temporal_type<T>::value>::type> {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+  template <typename IndexType>\n+  Status Unpack(FunctionContext* ctx, const ArrayData& indices,\n+                const ArrayType& dictionary, ArrayData* output) {\n+    using index_type = typename IndexType::c_type;\n+    using value_type = typename T::c_type;\n+\n+    const index_type* in = indices.GetValues<index_type>(1);\n+    value_type* out = output->GetMutableValues<value_type>(1);\n+    const value_type* dict_values = dictionary.data()->template GetValues<value_type>(1);\n+\n+    if (indices.GetNullCount() == 0) {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        out[i] = dict_values[in[i]];\n+      }\n+    } else {\n+      internal::BitmapReader valid_bits_reader(indices.GetValues<uint8_t>(0),\n+                                               indices.offset, indices.length);\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        if (valid_bits_reader.IsSet()) {\n+          // TODO(wesm): is it worth removing the branch here?\n+          out[i] = dict_values[in[i]];\n+        }\n+        valid_bits_reader.Next();\n       }\n-      valid_bits_reader.Next();\n     }\n+    return Status::OK();\n   }\n-}\n+};\n \n-// Cast from dictionary to plain representation\n+// Dispatch dictionary casts to UnpackHelper\n template <typename T>\n-struct CastFunctor<T, DictionaryType,\n-                   typename std::enable_if<IsNumeric<T>::value>::type> {\n+struct CastFunctor<T, DictionaryType> {\n   void operator()(FunctionContext* ctx, const CastOptions& options,\n                   const ArrayData& input, ArrayData* output) {\n-    using c_type = typename T::c_type;\n-\n-    DictionaryArray dict_array(input.Copy());\n+    using ArrayType = typename TypeTraits<T>::ArrayType;\n \n     const DictionaryType& type = checked_cast<const DictionaryType&>(*input.type);\n-    const DataType& values_type = *type.dictionary()->type();\n+    const Array& dictionary = *input.dictionary;\n+    const DataType& values_type = *dictionary.type();\n \n     // Check if values and output type match\n     DCHECK(values_type.Equals(*output->type))\n         << \"Dictionary type: \" << values_type << \" target type: \" << (*output->type);\n \n-    const c_type* dictionary = type.dictionary()->data()->GetValues<c_type>(1);\n-\n-    auto out = output->GetMutableValues<c_type>(1);\n-    const Array& indices = *dict_array.indices();\n-    switch (indices.type()->id()) {\n+    UnpackHelper<T> unpack_helper;\n+    switch (type.index_type()->id()) {\n       case Type::INT8:\n-        UnpackPrimitiveDictionary<Int8Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int8Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       case Type::INT16:\n-        UnpackPrimitiveDictionary<Int16Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int16Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       case Type::INT32:\n-        UnpackPrimitiveDictionary<Int32Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int32Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       case Type::INT64:\n-        UnpackPrimitiveDictionary<Int64Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int64Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       default:\n         ctx->SetStatus(\n-            Status::Invalid(\"Invalid index type: \", indices.type()->ToString()));\n+            Status::Invalid(\"Invalid index type: \", type.index_type()->ToString()));\n \n Review comment:\n   Use `TypeError` here\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:22.301+0000",
                    "updated": "2019-05-15T15:37:22.301+0000",
                    "started": "2019-05-15T15:37:22.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242586",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284316405\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -292,7 +291,16 @@ struct TypeTraits<ExtensionType> {\n //\n \n template <typename T>\n-using is_number = std::is_base_of<Number, T>;\n \n Review comment:\n   If we're renaming this one, should we do the same for `is_signed_integer` etc?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:22.412+0000",
                    "updated": "2019-05-15T15:37:22.412+0000",
                    "started": "2019-05-15T15:37:22.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242587",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284319016\n \n \n\n ##########\n File path: cpp/src/arrow/util/concatenate.cc\n ##########\n @@ -210,7 +210,24 @@ class ConcatenateImpl {\n \n   Status Visit(const DictionaryType& d) {\n     auto fixed = internal::checked_cast<const FixedWidthType*>(d.index_type().get());\n-    return ConcatenateBuffers(Buffers(1, *fixed), pool_, &out_.buffers[1]);\n+\n+    // Two cases: all the dictionaries are the same, or unification is\n+    // required\n \n Review comment:\n   :+1: \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:22.507+0000",
                    "updated": "2019-05-15T15:37:22.507+0000",
                    "started": "2019-05-15T15:37:22.507+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242588",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284263626\n \n \n\n ##########\n File path: cpp/src/arrow/array-dict-test.cc\n ##########\n @@ -749,47 +773,48 @@ TEST(TestDecimalDictionaryBuilder, DoubleTableSize) {\n   std::shared_ptr<Array> fsb_array;\n   ASSERT_OK(fsb_builder.Finish(&fsb_array));\n \n-  auto dtype = std::make_shared<DictionaryType>(int16(), fsb_array);\n   std::shared_ptr<Array> int_array;\n   ASSERT_OK(int_builder.Finish(&int_array));\n \n-  DictionaryArray expected(dtype, int_array);\n+  DictionaryArray expected(dictionary(int16(), decimal_type), int_array, fsb_array);\n   ASSERT_TRUE(expected.Equals(result));\n }\n \n // ----------------------------------------------------------------------\n // DictionaryArray tests\n \n TEST(TestDictionary, Basics) {\n \n Review comment:\n   Should this be moved to `type-test.cc`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:25.054+0000",
                    "updated": "2019-05-15T15:37:25.054+0000",
                    "started": "2019-05-15T15:37:25.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242589",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284320615\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -778,48 +791,54 @@ class ARROW_EXPORT IntervalType : public FixedWidthType {\n };\n \n // ----------------------------------------------------------------------\n-// DictionaryType (for categorical or dictionary-encoded data)\n+// Dictionary type (for representing categorical or dictionary-encoded\n+// in memory)\n \n-/// Concrete type class for dictionary data\n+/// \\brief Dictionary-encoded value type with data-dependent\n+/// dictionary\n class ARROW_EXPORT DictionaryType : public FixedWidthType {\n \n Review comment:\n   After this refactor DictionaryType looks more like a nested type.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:25.185+0000",
                    "updated": "2019-05-15T15:37:25.185+0000",
                    "started": "2019-05-15T15:37:25.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242590",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284283592\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -765,20 +763,30 @@ static Status TransposeDictIndices(MemoryPool* pool, const ArrayData& in_data,\n }\n \n Status DictionaryArray::Transpose(MemoryPool* pool, const std::shared_ptr<DataType>& type,\n+                                  const std::shared_ptr<Array>& dictionary,\n                                   const std::vector<int32_t>& transpose_map,\n                                   std::shared_ptr<Array>* out) const {\n   DCHECK_EQ(type->id(), Type::DICTIONARY);\n   const auto& out_dict_type = checked_cast<const DictionaryType&>(*type);\n \n \n Review comment:\n   Would we want to use that here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:37:25.315+0000",
                    "updated": "2019-05-15T15:37:25.315+0000",
                    "started": "2019-05-15T15:37:25.223+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242591",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284326232\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -206,6 +208,10 @@ struct ARROW_EXPORT ArrayData {\n   int64_t offset;\n   std::vector<std::shared_ptr<Buffer>> buffers;\n   std::vector<std::shared_ptr<ArrayData>> child_data;\n+\n+  // The dictionary for this Array, if any. Only used for dictionary\n+  // type\n+  std::shared_ptr<Array> dictionary;\n \n Review comment:\n   This was discussed on the mailing list. I agree with the others (Antoine / Micah) that having an explicit dictionary field is more clear. I added a benchmark to assess if it causes meaningful overhead which it does not seem to. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:48:30.864+0000",
                    "updated": "2019-05-15T15:48:30.864+0000",
                    "started": "2019-05-15T15:48:30.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242600",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284326435\n \n \n\n ##########\n File path: cpp/src/arrow/array.cc\n ##########\n @@ -765,20 +763,30 @@ static Status TransposeDictIndices(MemoryPool* pool, const ArrayData& in_data,\n }\n \n Status DictionaryArray::Transpose(MemoryPool* pool, const std::shared_ptr<DataType>& type,\n+                                  const std::shared_ptr<Array>& dictionary,\n                                   const std::vector<int32_t>& transpose_map,\n                                   std::shared_ptr<Array>* out) const {\n   DCHECK_EQ(type->id(), Type::DICTIONARY);\n   const auto& out_dict_type = checked_cast<const DictionaryType&>(*type);\n \n \n Review comment:\n   Possibly, but out of scope for this patch\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:48:52.170+0000",
                    "updated": "2019-05-15T15:48:52.170+0000",
                    "started": "2019-05-15T15:48:52.169+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242601",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284326850\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -746,213 +743,159 @@ class FromNullCastKernel : public CastKernelBase {\n // ----------------------------------------------------------------------\n // Dictionary to other things\n \n-template <typename IndexType>\n-void UnpackFixedSizeBinaryDictionary(FunctionContext* ctx, const Array& indices,\n-                                     const FixedSizeBinaryArray& dictionary,\n-                                     ArrayData* output) {\n-  using index_c_type = typename IndexType::c_type;\n+template <typename T, typename Enable = void>\n+struct UnpackHelper {};\n \n-  const index_c_type* in = indices.data()->GetValues<index_c_type>(1);\n-  int32_t byte_width =\n-      checked_cast<const FixedSizeBinaryType&>(*output->type).byte_width();\n+template <typename T>\n+struct UnpackHelper<\n+    T, typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value>::type> {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+  template <typename IndexType>\n+  Status Unpack(FunctionContext* ctx, const ArrayData& indices,\n+                const ArrayType& dictionary, ArrayData* output) {\n+    using index_c_type = typename IndexType::c_type;\n+\n+    const index_c_type* in = indices.GetValues<index_c_type>(1);\n+    int32_t byte_width =\n+        checked_cast<const FixedSizeBinaryType&>(*output->type).byte_width();\n \n-  uint8_t* out = output->buffers[1]->mutable_data() + byte_width * output->offset;\n+    uint8_t* out = output->buffers[1]->mutable_data() + byte_width * output->offset;\n \n-  if (indices.null_count() != 0) {\n-    internal::BitmapReader valid_bits_reader(indices.null_bitmap_data(), indices.offset(),\n-                                             indices.length());\n+    if (indices.GetNullCount() != 0) {\n+      internal::BitmapReader valid_bits_reader(indices.GetValues<uint8_t>(0),\n+                                               indices.offset, indices.length);\n \n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      if (valid_bits_reader.IsSet()) {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        if (valid_bits_reader.IsSet()) {\n+          const uint8_t* value = dictionary.Value(in[i]);\n+          memcpy(out + i * byte_width, value, byte_width);\n+        }\n+        valid_bits_reader.Next();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n         const uint8_t* value = dictionary.Value(in[i]);\n         memcpy(out + i * byte_width, value, byte_width);\n       }\n-      valid_bits_reader.Next();\n-    }\n-  } else {\n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      const uint8_t* value = dictionary.Value(in[i]);\n-      memcpy(out + i * byte_width, value, byte_width);\n-    }\n-  }\n-}\n-\n-template <typename T>\n-struct CastFunctor<\n-    T, DictionaryType,\n-    typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value>::type> {\n-  void operator()(FunctionContext* ctx, const CastOptions& options,\n-                  const ArrayData& input, ArrayData* output) {\n-    DictionaryArray dict_array(input.Copy());\n-\n-    const DictionaryType& type = checked_cast<const DictionaryType&>(*input.type);\n-    const DataType& values_type = *type.dictionary()->type();\n-    const FixedSizeBinaryArray& dictionary =\n-        checked_cast<const FixedSizeBinaryArray&>(*type.dictionary());\n-\n-    // Check if values and output type match\n-    DCHECK(values_type.Equals(*output->type))\n-        << \"Dictionary type: \" << values_type << \" target type: \" << (*output->type);\n-\n-    const Array& indices = *dict_array.indices();\n-    switch (indices.type()->id()) {\n-      case Type::INT8:\n-        UnpackFixedSizeBinaryDictionary<Int8Type>(ctx, indices, dictionary, output);\n-        break;\n-      case Type::INT16:\n-        UnpackFixedSizeBinaryDictionary<Int16Type>(ctx, indices, dictionary, output);\n-        break;\n-      case Type::INT32:\n-        UnpackFixedSizeBinaryDictionary<Int32Type>(ctx, indices, dictionary, output);\n-        break;\n-      case Type::INT64:\n-        UnpackFixedSizeBinaryDictionary<Int64Type>(ctx, indices, dictionary, output);\n-        break;\n-      default:\n-        ctx->SetStatus(\n-            Status::Invalid(\"Invalid index type: \", indices.type()->ToString()));\n-        return;\n     }\n+    return Status::OK();\n   }\n };\n \n-template <typename IndexType>\n-Status UnpackBinaryDictionary(FunctionContext* ctx, const Array& indices,\n-                              const BinaryArray& dictionary, ArrayData* output) {\n-  using index_c_type = typename IndexType::c_type;\n-  std::unique_ptr<ArrayBuilder> builder;\n-  RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), output->type, &builder));\n-  BinaryBuilder* binary_builder = checked_cast<BinaryBuilder*>(builder.get());\n-\n-  const index_c_type* in = indices.data()->GetValues<index_c_type>(1);\n-  if (indices.null_count() != 0) {\n-    internal::BitmapReader valid_bits_reader(indices.null_bitmap_data(), indices.offset(),\n-                                             indices.length());\n-\n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      if (valid_bits_reader.IsSet()) {\n+template <typename T>\n+struct UnpackHelper<\n+    T, typename std::enable_if<std::is_base_of<BinaryType, T>::value>::type> {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+  template <typename IndexType>\n+  Status Unpack(FunctionContext* ctx, const ArrayData& indices,\n+                const ArrayType& dictionary, ArrayData* output) {\n+    using index_c_type = typename IndexType::c_type;\n+    std::unique_ptr<ArrayBuilder> builder;\n+    RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), output->type, &builder));\n+    BinaryBuilder* binary_builder = checked_cast<BinaryBuilder*>(builder.get());\n+\n+    const index_c_type* in = indices.GetValues<index_c_type>(1);\n+    if (indices.GetNullCount() != 0) {\n+      internal::BitmapReader valid_bits_reader(indices.GetValues<uint8_t>(0),\n+                                               indices.offset, indices.length);\n+\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        if (valid_bits_reader.IsSet()) {\n+          RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n+        } else {\n+          RETURN_NOT_OK(binary_builder->AppendNull());\n+        }\n+        valid_bits_reader.Next();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n         RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n-      } else {\n-        RETURN_NOT_OK(binary_builder->AppendNull());\n       }\n-      valid_bits_reader.Next();\n-    }\n-  } else {\n-    for (int64_t i = 0; i < indices.length(); ++i) {\n-      RETURN_NOT_OK(binary_builder->Append(dictionary.GetView(in[i])));\n     }\n-  }\n-\n-  std::shared_ptr<Array> plain_array;\n-  RETURN_NOT_OK(binary_builder->Finish(&plain_array));\n-  // Copy all buffer except the valid bitmap\n-  for (size_t i = 1; i < plain_array->data()->buffers.size(); i++) {\n-    output->buffers.push_back(plain_array->data()->buffers[i]);\n-  }\n-\n-  return Status::OK();\n-}\n-\n-template <typename T>\n-struct CastFunctor<T, DictionaryType,\n-                   typename std::enable_if<std::is_base_of<BinaryType, T>::value>::type> {\n-  void operator()(FunctionContext* ctx, const CastOptions& options,\n-                  const ArrayData& input, ArrayData* output) {\n-    DictionaryArray dict_array(input.Copy());\n-\n-    const DictionaryType& type = checked_cast<const DictionaryType&>(*input.type);\n-    const DataType& values_type = *type.dictionary()->type();\n-    const BinaryArray& dictionary = checked_cast<const BinaryArray&>(*type.dictionary());\n-\n-    // Check if values and output type match\n-    DCHECK(values_type.Equals(*output->type))\n-        << \"Dictionary type: \" << values_type << \" target type: \" << (*output->type);\n \n-    const Array& indices = *dict_array.indices();\n-    switch (indices.type()->id()) {\n-      case Type::INT8:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int8Type>(ctx, indices, dictionary, output)));\n-        break;\n-      case Type::INT16:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int16Type>(ctx, indices, dictionary, output)));\n-        break;\n-      case Type::INT32:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int32Type>(ctx, indices, dictionary, output)));\n-        break;\n-      case Type::INT64:\n-        FUNC_RETURN_NOT_OK(\n-            (UnpackBinaryDictionary<Int64Type>(ctx, indices, dictionary, output)));\n-        break;\n-      default:\n-        ctx->SetStatus(\n-            Status::Invalid(\"Invalid index type: \", indices.type()->ToString()));\n-        return;\n+    std::shared_ptr<Array> plain_array;\n+    RETURN_NOT_OK(binary_builder->Finish(&plain_array));\n+    // Copy all buffer except the valid bitmap\n+    for (size_t i = 1; i < plain_array->data()->buffers.size(); i++) {\n+      output->buffers.push_back(plain_array->data()->buffers[i]);\n     }\n+\n+    return Status::OK();\n   }\n };\n \n-template <typename IndexType, typename c_type>\n-void UnpackPrimitiveDictionary(const Array& indices, const c_type* dictionary,\n-                               c_type* out) {\n-  const auto& in = indices.data()->GetValues<typename IndexType::c_type>(1);\n-  int64_t length = indices.length();\n-\n-  if (indices.null_count() == 0) {\n-    for (int64_t i = 0; i < length; ++i) {\n-      out[i] = dictionary[in[i]];\n-    }\n-  } else {\n-    auto null_bitmap = indices.null_bitmap_data();\n-    internal::BitmapReader valid_bits_reader(null_bitmap, indices.offset(), length);\n-    for (int64_t i = 0; i < length; ++i) {\n-      if (valid_bits_reader.IsSet()) {\n-        out[i] = dictionary[in[i]];\n+template <typename T>\n+struct UnpackHelper<T, typename std::enable_if<is_number_type<T>::value ||\n+                                               is_temporal_type<T>::value>::type> {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+  template <typename IndexType>\n+  Status Unpack(FunctionContext* ctx, const ArrayData& indices,\n+                const ArrayType& dictionary, ArrayData* output) {\n+    using index_type = typename IndexType::c_type;\n+    using value_type = typename T::c_type;\n+\n+    const index_type* in = indices.GetValues<index_type>(1);\n+    value_type* out = output->GetMutableValues<value_type>(1);\n+    const value_type* dict_values = dictionary.data()->template GetValues<value_type>(1);\n+\n+    if (indices.GetNullCount() == 0) {\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        out[i] = dict_values[in[i]];\n+      }\n+    } else {\n+      internal::BitmapReader valid_bits_reader(indices.GetValues<uint8_t>(0),\n+                                               indices.offset, indices.length);\n+      for (int64_t i = 0; i < indices.length; ++i) {\n+        if (valid_bits_reader.IsSet()) {\n+          // TODO(wesm): is it worth removing the branch here?\n+          out[i] = dict_values[in[i]];\n+        }\n+        valid_bits_reader.Next();\n       }\n-      valid_bits_reader.Next();\n     }\n+    return Status::OK();\n   }\n-}\n+};\n \n-// Cast from dictionary to plain representation\n+// Dispatch dictionary casts to UnpackHelper\n template <typename T>\n-struct CastFunctor<T, DictionaryType,\n-                   typename std::enable_if<IsNumeric<T>::value>::type> {\n+struct CastFunctor<T, DictionaryType> {\n   void operator()(FunctionContext* ctx, const CastOptions& options,\n                   const ArrayData& input, ArrayData* output) {\n-    using c_type = typename T::c_type;\n-\n-    DictionaryArray dict_array(input.Copy());\n+    using ArrayType = typename TypeTraits<T>::ArrayType;\n \n     const DictionaryType& type = checked_cast<const DictionaryType&>(*input.type);\n-    const DataType& values_type = *type.dictionary()->type();\n+    const Array& dictionary = *input.dictionary;\n+    const DataType& values_type = *dictionary.type();\n \n     // Check if values and output type match\n     DCHECK(values_type.Equals(*output->type))\n         << \"Dictionary type: \" << values_type << \" target type: \" << (*output->type);\n \n-    const c_type* dictionary = type.dictionary()->data()->GetValues<c_type>(1);\n-\n-    auto out = output->GetMutableValues<c_type>(1);\n-    const Array& indices = *dict_array.indices();\n-    switch (indices.type()->id()) {\n+    UnpackHelper<T> unpack_helper;\n+    switch (type.index_type()->id()) {\n       case Type::INT8:\n-        UnpackPrimitiveDictionary<Int8Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int8Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       case Type::INT16:\n-        UnpackPrimitiveDictionary<Int16Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int16Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       case Type::INT32:\n-        UnpackPrimitiveDictionary<Int32Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int32Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       case Type::INT64:\n-        UnpackPrimitiveDictionary<Int64Type, c_type>(indices, dictionary, out);\n+        FUNC_RETURN_NOT_OK(unpack_helper.template Unpack<Int64Type>(\n+            ctx, input, static_cast<const ArrayType&>(dictionary), output));\n         break;\n       default:\n         ctx->SetStatus(\n-            Status::Invalid(\"Invalid index type: \", indices.type()->ToString()));\n+            Status::Invalid(\"Invalid index type: \", type.index_type()->ToString()));\n \n Review comment:\n   I prefer to leave the semantics here as unchanged as possible from master\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:49:55.308+0000",
                    "updated": "2019-05-15T15:49:55.308+0000",
                    "started": "2019-05-15T15:49:55.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242602",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242603",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284327289\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -778,48 +791,54 @@ class ARROW_EXPORT IntervalType : public FixedWidthType {\n };\n \n // ----------------------------------------------------------------------\n-// DictionaryType (for categorical or dictionary-encoded data)\n+// Dictionary type (for representing categorical or dictionary-encoded\n+// in memory)\n \n-/// Concrete type class for dictionary data\n+/// \\brief Dictionary-encoded value type with data-dependent\n+/// dictionary\n class ARROW_EXPORT DictionaryType : public FixedWidthType {\n \n Review comment:\n   It's a synthetic construct in C++ since there is no Dictionary type in the protocol metadata...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:50:47.627+0000",
                    "updated": "2019-05-15T15:50:47.627+0000",
                    "started": "2019-05-15T15:50:47.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242603",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284327537\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -292,7 +291,16 @@ struct TypeTraits<ExtensionType> {\n //\n \n template <typename T>\n-using is_number = std::is_base_of<Number, T>;\n \n Review comment:\n   Probably. There's some other cleanup to do but not here, I will open a JIRA\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:51:11.626+0000",
                    "updated": "2019-05-15T15:51:11.626+0000",
                    "started": "2019-05-15T15:51:11.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242604",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284327910\n \n \n\n ##########\n File path: cpp/src/arrow/array-dict-test.cc\n ##########\n @@ -749,47 +773,48 @@ TEST(TestDecimalDictionaryBuilder, DoubleTableSize) {\n   std::shared_ptr<Array> fsb_array;\n   ASSERT_OK(fsb_builder.Finish(&fsb_array));\n \n-  auto dtype = std::make_shared<DictionaryType>(int16(), fsb_array);\n   std::shared_ptr<Array> int_array;\n   ASSERT_OK(int_builder.Finish(&int_array));\n \n-  DictionaryArray expected(dtype, int_array);\n+  DictionaryArray expected(dictionary(int16(), decimal_type), int_array, fsb_array);\n   ASSERT_TRUE(expected.Equals(result));\n }\n \n // ----------------------------------------------------------------------\n // DictionaryArray tests\n \n TEST(TestDictionary, Basics) {\n \n Review comment:\n   Yes, will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T15:51:54.825+0000",
                    "updated": "2019-05-15T15:51:54.825+0000",
                    "started": "2019-05-15T15:51:54.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242606",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284332375\n \n \n\n ##########\n File path: cpp/src/arrow/array.h\n ##########\n @@ -206,6 +208,10 @@ struct ARROW_EXPORT ArrayData {\n   int64_t offset;\n   std::vector<std::shared_ptr<Buffer>> buffers;\n   std::vector<std::shared_ptr<ArrayData>> child_data;\n+\n+  // The dictionary for this Array, if any. Only used for dictionary\n+  // type\n+  std::shared_ptr<Array> dictionary;\n \n Review comment:\n   Relevant mailing list entry: https://lists.apache.org/thread.html/987a9f9a36f491e49d71ddcf9ce91f03420210ec30dd2c24895b2332@%3Cdev.arrow.apache.org%3E\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T16:01:05.281+0000",
                    "updated": "2019-05-15T16:01:05.281+0000",
                    "started": "2019-05-15T16:01:05.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242614",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284307268\n \n \n\n ##########\n File path: cpp/src/arrow/builder-benchmark.cc\n ##########\n @@ -364,11 +364,30 @@ static void BM_BuildStringDictionaryArray(\n   state.SetBytesProcessed(state.iterations() * fodder_size);\n }\n \n+static void BM_ArrayDataConstructDestruct(\n \n Review comment:\n   Is this actually useful?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T16:16:53.201+0000",
                    "updated": "2019-05-15T16:16:53.201+0000",
                    "started": "2019-05-15T16:16:53.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242620",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284310920\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/take.cc\n ##########\n @@ -145,19 +145,21 @@ struct UnpackValues {\n \n   Status Visit(const DictionaryType& t) {\n     std::shared_ptr<Array> taken_indices;\n+    const auto& values = static_cast<const DictionaryArray&>(*params_.values);\n \n Review comment:\n   Should use `checked_cast`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T16:16:53.415+0000",
                    "updated": "2019-05-15T16:16:53.415+0000",
                    "started": "2019-05-15T16:16:53.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242621",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284315660\n \n \n\n ##########\n File path: cpp/src/arrow/flight/server.cc\n ##########\n @@ -53,6 +55,9 @@ using ServerWriter = grpc::ServerWriter<T>;\n namespace pb = arrow::flight::protocol;\n \n namespace arrow {\n+\n+using internal::make_unique;\n \n Review comment:\n   AFAIR, our `make_unique` implementation is buggy on MSVC. @bkietz \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T16:16:53.783+0000",
                    "updated": "2019-05-15T16:16:53.783+0000",
                    "started": "2019-05-15T16:16:53.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242622",
                    "issueId": "13182000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/worklog/242623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4316: ARROW-3144: [C++/Python] Move \"dictionary\" member from DictionaryType to ArrayData to allow for variable dictionaries\nURL: https://github.com/apache/arrow/pull/4316#discussion_r284310066\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -746,213 +743,159 @@ class FromNullCastKernel : public CastKernelBase {\n // ----------------------------------------------------------------------\n // Dictionary to other things\n \n-template <typename IndexType>\n-void UnpackFixedSizeBinaryDictionary(FunctionContext* ctx, const Array& indices,\n-                                     const FixedSizeBinaryArray& dictionary,\n-                                     ArrayData* output) {\n-  using index_c_type = typename IndexType::c_type;\n+template <typename T, typename Enable = void>\n+struct UnpackHelper {};\n \n-  const index_c_type* in = indices.data()->GetValues<index_c_type>(1);\n-  int32_t byte_width =\n-      checked_cast<const FixedSizeBinaryType&>(*output->type).byte_width();\n+template <typename T>\n+struct UnpackHelper<\n+    T, typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value>::type> {\n+  using ArrayType = typename TypeTraits<T>::ArrayType;\n+\n+  template <typename IndexType>\n+  Status Unpack(FunctionContext* ctx, const ArrayData& indices,\n \n Review comment:\n   The `UnpackHelper` implementations could use `ArrayDataVisitor` from `visitor_inline.h`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-15T16:16:53.791+0000",
                    "updated": "2019-05-15T16:16:53.791+0000",
                    "started": "2019-05-15T16:16:53.790+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "242623",
                    "issueId": "13182000"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 45600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@741a75db[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31454f86[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@196aba46[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@248ef92[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f16d624[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6c3b47e5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@204f78ae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@65be274a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cb07a2f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7a020833[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@215385d5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@354362c2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 45600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri May 17 16:41:01 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-05-17T16:41:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3144/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-08-29T21:14:55.000+0000",
        "updated": "2019-08-01T23:01:55.000+0000",
        "timeoriginalestimate": null,
        "description": "There are a couple of inter-related issues:\r\n\r\n* Cases where a system might send the schema without the dictionaries, and the user wishes to reason about the schema and its types without knowing the dictionary values\r\n\r\n* Dictionaries that are changing, e.g. using delta dictionary messages\r\n\r\n{{arrow::DictionaryType}} has no \"linkage\" to any external object. I propose adding a \"LinkedDictionaryType\" or something similar (purely a C++ construct), which functionally would be a subclass of {{DictionaryType}}, which would allow a type to be created which will obtain its dictionary later through some kind of \"Dictionary provider\" interface. There is something similar in Java already. This would allow a dictionary to evolve via delta dictionaries, or for a dictionary to be retrieved later e.g. through an RPC or IPC layer",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "12h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 45600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Move \"dictionary\" member from DictionaryType to ArrayData to allow for changing dictionaries between Array chunks",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/comment/16596865",
                    "id": "16596865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The context for this issue is the design of an Arrow-native RPC system (ie ARROW-249). A \"get info\" request may return the schema without the dictionaries (which could be large), and the dictionaries would be sent later when the dataset is actually requested. Without some improved solution at the C++ API level, we would be unable to deserialize the schema IPC message without the corresponding dictionary batches",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-29T21:16:12.596+0000",
                    "updated": "2018-08-29T21:16:29.407+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/comment/16726351",
                    "id": "16726351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "See related discussion in patch for ARROW-554 https://github.com/apache/arrow/pull/3165#discussion_r243021715",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-21T00:38:07.012+0000",
                    "updated": "2018-12-21T00:38:07.012+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/comment/16782948",
                    "id": "16782948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I suggest we handle dictionaries in Flight in the 0.14 release cycle",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-03-04T04:21:46.637+0000",
                    "updated": "2019-03-04T04:21:46.637+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182000/comment/16842313",
                    "id": "16842313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4316\n[https://github.com/apache/arrow/pull/4316]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-05-17T16:41:01.714+0000",
                    "updated": "2019-05-17T16:41:01.714+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xkh3:",
        "customfield_12314139": null
    }
}