{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13367828",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828",
    "key": "ARROW-12096",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12617435",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12617435",
                "type": {
                    "id": "12310040",
                    "name": "Required",
                    "inward": "is required by",
                    "outward": "requires",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310040"
                },
                "inwardIssue": {
                    "id": "13383975",
                    "key": "ARROW-13086",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383975",
                    "fields": {
                        "summary": "[Python] Expose Parquet ArrowReaderProperties::coerce_int96_timestamp_unit_",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12617440",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12617440",
                "type": {
                    "id": "12310040",
                    "name": "Required",
                    "inward": "is required by",
                    "outward": "requires",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310040"
                },
                "inwardIssue": {
                    "id": "13383977",
                    "key": "ARROW-13087",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13383977",
                    "fields": {
                        "summary": "[R] Expose Parquet ArrowReaderProperties::coerce_int96_timestamp_unit_",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
            "name": "isichei",
            "key": "isichei",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Karik Isichei",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
            "name": "isichei",
            "key": "isichei",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Karik Isichei",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
            "name": "isichei",
            "key": "isichei",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Karik Isichei",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12096/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/607694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "isichei opened a new pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461\n\n\n   Have added functionality in C++ code to allow users to define the arrow timestamp unit when reading parquet INT96 types. This avoids the overflow bug when trying to convert INT96 values which have dates which are out of bounds for Arrow NS Timestamp. \r\n   \r\n   See added test: `TestArrowReadWrite.DownsampleDeprecatedInt96` which demonstrates use and expected results.\r\n   \r\n   Main discussion of changes in [JIRA Issue ARROW-12096](https://issues.apache.org/jira/browse/ARROW-12096).\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T07:56:13.162+0000",
                    "updated": "2021-06-07T07:56:13.162+0000",
                    "started": "2021-06-07T07:56:13.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607694",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/607695",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#issuecomment-855692947\n\n\n   https://issues.apache.org/jira/browse/ARROW-12096\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T07:56:49.177+0000",
                    "updated": "2021-06-07T07:56:49.177+0000",
                    "started": "2021-06-07T07:56:49.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607695",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/607948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646709078\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -1671,6 +1671,91 @@ TEST(TestArrowReadWrite, UseDeprecatedInt96) {\n   ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result, *result));\n }\n \n+// Test for added functionality in ARROW-12096\n+TEST(TestArrowReadWrite, DownsampleDeprecatedInt96) {\n+  using ::arrow::ArrayFromVector;\n+  using ::arrow::field;\n+  using ::arrow::schema;\n+\n+  std::vector<bool> is_valid = {true, true, true, true};\n+\n+  auto t_s = ::arrow::timestamp(TimeUnit::SECOND);\n+  auto t_ms = ::arrow::timestamp(TimeUnit::MILLI);\n+  auto t_us = ::arrow::timestamp(TimeUnit::MICRO);\n+  auto t_ns = ::arrow::timestamp(TimeUnit::NANO);\n+\n+  // Values demonstrate loss of resolution when \"down sampling\" INT96 to units that are not NS\n+  std::vector<int64_t> s_values = {1489269, 1489269, 1489269, 1489269};\n+  std::vector<int64_t> ms_values = {1489269000, 1489269000,\n+                                    1489269000, 1489269001};\n+  std::vector<int64_t> us_values = {1489269000000, 1489269000000,\n+                                    1489269000001, 1489269001000};\n+  std::vector<int64_t> ns_values = {1489269000000000LL, 1489269000000001LL,\n+                                    1489269000001000LL, 1489269001000000LL};\n+\n+  std::shared_ptr<Array> a_s, a_ms, a_us, a_ns;\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_s, is_valid, s_values, &a_s);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ms, is_valid, ms_values, &a_ms);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_us, is_valid, us_values, &a_us);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ns, is_valid, ns_values, &a_ns);\n\nReview comment:\n       I know you're essentially copying this from the test above, but nowadays we have `ArrowFromJSON` which allows to express test data much more easily and tersely (you can grep through the source tree to find examples).\r\n   \r\n   You may also change the test above to use it, at the same time.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -742,20 +752,20 @@ Status TransferColumnData(RecordReader* reader, std::shared_ptr<DataType> value_\n     case ::arrow::Type::TIMESTAMP: {\n       const ::arrow::TimestampType& timestamp_type =\n           checked_cast<::arrow::TimestampType&>(*value_type);\n-      switch (timestamp_type.unit()) {\n-        case ::arrow::TimeUnit::MILLI:\n-        case ::arrow::TimeUnit::MICRO: {\n-          result = TransferZeroCopy(reader, value_type);\n-        } break;\n-        case ::arrow::TimeUnit::NANO: {\n-          if (descr->physical_type() == ::parquet::Type::INT96) {\n-            RETURN_NOT_OK(TransferInt96(reader, pool, value_type, &result));\n-          } else {\n+      if (descr->physical_type() == ::parquet::Type::INT96) {\n+            RETURN_NOT_OK(TransferInt96(reader, pool, value_type, &result, timestamp_type.unit()));\n+        }\n+      else {\n+        switch (timestamp_type.unit()) {\n+          case ::arrow::TimeUnit::SECOND:\n+          case ::arrow::TimeUnit::MILLI:\n+          case ::arrow::TimeUnit::MICRO:\n+          case ::arrow::TimeUnit::NANO: {\n             result = TransferZeroCopy(reader, value_type);\n-          }\n-        } break;\n-        default:\n-          return Status::NotImplemented(\"TimeUnit not supported\");\n+          } break;\n+          default:\n\nReview comment:\n       This `default` case doesn't seem useful, unless the compiler requires it?\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -211,14 +212,22 @@ Result<std::shared_ptr<ArrowType>> GetArrowType(Type::type physical_type,\n   }\n }\n \n+// ARROW-12096 -- Overloading functions with new input (setting default as NANO)\n Result<std::shared_ptr<ArrowType>> GetArrowType(const schema::PrimitiveNode& primitive) {\n   return GetArrowType(primitive.physical_type(), *primitive.logical_type(),\n-                      primitive.type_length());\n+                      primitive.type_length(), ::arrow::TimeUnit::NANO);\n }\n \n Result<std::shared_ptr<ArrowType>> GetArrowType(const ColumnDescriptor& descriptor) {\n   return GetArrowType(descriptor.physical_type(), *descriptor.logical_type(),\n-                      descriptor.type_length());\n+                      descriptor.type_length(), ::arrow::TimeUnit::NANO);\n+}\n+\n+// ARROW-12096 -- Exposing INT96 arrow type definition fromm parquet reader\n\nReview comment:\n       Same here.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -353,7 +353,8 @@ Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n }\n \n Status TransferInt96(RecordReader* reader, MemoryPool* pool,\n-                     const std::shared_ptr<DataType>& type, Datum* out) {\n+                     const std::shared_ptr<DataType>& type, Datum* out,\n+                     const ::arrow::TimeUnit::type& int96_arrow_time_unit) {\n\nReview comment:\n       You do not need to pass `TimeUnit::type` as a reference, since it's a cheap trivial type. Just pass it by value.\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -1671,6 +1671,91 @@ TEST(TestArrowReadWrite, UseDeprecatedInt96) {\n   ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result, *result));\n }\n \n+// Test for added functionality in ARROW-12096\n+TEST(TestArrowReadWrite, DownsampleDeprecatedInt96) {\n+  using ::arrow::ArrayFromVector;\n+  using ::arrow::field;\n+  using ::arrow::schema;\n+\n+  std::vector<bool> is_valid = {true, true, true, true};\n+\n+  auto t_s = ::arrow::timestamp(TimeUnit::SECOND);\n+  auto t_ms = ::arrow::timestamp(TimeUnit::MILLI);\n+  auto t_us = ::arrow::timestamp(TimeUnit::MICRO);\n+  auto t_ns = ::arrow::timestamp(TimeUnit::NANO);\n+\n+  // Values demonstrate loss of resolution when \"down sampling\" INT96 to units that are not NS\n+  std::vector<int64_t> s_values = {1489269, 1489269, 1489269, 1489269};\n+  std::vector<int64_t> ms_values = {1489269000, 1489269000,\n+                                    1489269000, 1489269001};\n+  std::vector<int64_t> us_values = {1489269000000, 1489269000000,\n+                                    1489269000001, 1489269001000};\n+  std::vector<int64_t> ns_values = {1489269000000000LL, 1489269000000001LL,\n+                                    1489269000001000LL, 1489269001000000LL};\n+\n+  std::shared_ptr<Array> a_s, a_ms, a_us, a_ns;\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_s, is_valid, s_values, &a_s);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ms, is_valid, ms_values, &a_ms);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_us, is_valid, us_values, &a_us);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ns, is_valid, ns_values, &a_ns);\n+\n+  // Create single input table of NS to be written to parquet with INT96\n+  auto input_schema = schema({field(\"f\", t_ns)});\n+  auto input = Table::Make(input_schema, {a_ns});\n+\n+  // Create an expected schema for each resulting table (one for each \"down sampled\" ts)\n+  auto ex_schema_s = schema({field(\"f\", t_s)});\n+  auto ex_schema_ms = schema({field(\"f\", t_ms)});\n+  auto ex_schema_us = schema({field(\"f\", t_us)});\n+  \n+  // Create tables\n+  auto ex_result_s = Table::Make(ex_schema_s, {a_s});\n+  auto ex_result_ms = Table::Make(ex_schema_ms, {a_ms});\n+  auto ex_result_us = Table::Make(ex_schema_us, {a_us});\n+\n+  std::shared_ptr<Table> result_s;\n+  std::shared_ptr<Table> result_ms;\n+  std::shared_ptr<Table> result_us;\n+\n+  ArrowReaderProperties arrow_reader_prop_s, arrow_reader_prop_ms, arrow_reader_prop_us;\n+  arrow_reader_prop_s.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::SECOND);\n+  arrow_reader_prop_ms.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MILLI);\n+  arrow_reader_prop_us.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MICRO);\n+\n+// SECOND\n+  ASSERT_NO_FATAL_FAILURE(DoRoundtrip(\n+    input, input->num_rows(), &result_s, default_writer_properties(),\n+    ArrowWriterProperties::Builder().enable_deprecated_int96_timestamps()->build(),\n+    arrow_reader_prop_s));\n+\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertSchemaEqual(*ex_result_s->schema(),\n+                                                     *result_s->schema(),\n+                                                     /*check_metadata=*/false));\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result_s, *result_s));\n\nReview comment:\n       You can probably create a smaller helper function, method, or even a lambda, to avoid repeating those three lines below.\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -181,7 +181,8 @@ Result<std::shared_ptr<ArrowType>> FromInt64(const LogicalType& logical_type) {\n \n Result<std::shared_ptr<ArrowType>> GetArrowType(Type::type physical_type,\n                                                 const LogicalType& logical_type,\n-                                                int type_length) {\n+                                                int type_length,\n+                                                const ::arrow::TimeUnit::type& int96_arrow_time_unit) {\n\nReview comment:\n       Same comment here, with respect to passing by value vs. reference.\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.h\n##########\n@@ -39,8 +39,20 @@ Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type\n                                                         const LogicalType& logical_type,\n                                                         int type_length);\n \n+// ARROW-12096 Exposing int96 arrow timestamp unit definition\n+Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type,\n+                                                        const LogicalType& logical_type,\n+                                                        int type_length,\n+                                                        const ::arrow::TimeUnit::type& int96_arrow_time_unit);\n\nReview comment:\n       I don't think this is the right place to pass int96-specific information. Perhaps this should be done at a higher level (for example in `schema.cc`?).\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.h\n##########\n@@ -39,8 +39,20 @@ Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type\n                                                         const LogicalType& logical_type,\n                                                         int type_length);\n \n+// ARROW-12096 Exposing int96 arrow timestamp unit definition\n+Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type,\n+                                                        const LogicalType& logical_type,\n+                                                        int type_length,\n+                                                        const ::arrow::TimeUnit::type& int96_arrow_time_unit);\n+\n Result<std::shared_ptr<::arrow::DataType>> GetArrowType(\n     const schema::PrimitiveNode& primitive);\n+\n+// ARROW-12096 Exposing int96 arrow timestamp unit definition\n+Result<std::shared_ptr<::arrow::DataType>> GetArrowType(\n\nReview comment:\n       Same here.\n\n##########\nFile path: cpp/src/parquet/types.h\n##########\n@@ -602,6 +602,49 @@ static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\n   return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + nanoseconds);\n }\n \n+// ARROW-12096\n+static inline int64_t Int96GetMicroSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t microseconds = nanoseconds/static_cast<uint64_t>(1000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMicrosecondsPerDay + microseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetMilliSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t milliseconds = nanoseconds/static_cast<uint64_t>(1000000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMillisecondsPerDay + milliseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  \n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t seconds = nanoseconds/(static_cast<uint64_t>(1000000000));\n+\n+  return static_cast<int64_t>(days_since_epoch * kSecondsPerDay + seconds);\n\nReview comment:\n       For example:\r\n   ```c++\r\n   struct DecodedInt96 {\r\n     uint64_t days_since_epoch;\r\n     uint64_t nanoseconds;\r\n   };\r\n   \r\n   static inline int64_t DecodeInt96Timestamp(const parquet::Int96& i96) {\r\n     // We do the computations in the unsigned domain to avoid unsigned behaviour\r\n     // on overflow.\r\n     DecodedInt96 result;\r\n     result.days_since_epoch =\r\n         i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\r\n     result.nanoseconds = 0;\r\n     memcpy(&result.nanoseconds, &i96.value, sizeof(uint64_t));\r\n     return result;\r\n   }\r\n   \r\n   static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\r\n     const auto decoded = DecodeInt96Timestamp(i96);\r\n     return static_cast<int64_t>(decoded.days_since_epoch * kNanosecondsPerDay + decoded.nanoseconds);\r\n   }\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -211,14 +212,22 @@ Result<std::shared_ptr<ArrowType>> GetArrowType(Type::type physical_type,\n   }\n }\n \n+// ARROW-12096 -- Overloading functions with new input (setting default as NANO)\n\nReview comment:\n       This comment doesn't seem terribly informative. Can you remove it?\n\n##########\nFile path: cpp/src/parquet/types.h\n##########\n@@ -602,6 +602,49 @@ static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\n   return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + nanoseconds);\n }\n \n+// ARROW-12096\n+static inline int64_t Int96GetMicroSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t microseconds = nanoseconds/static_cast<uint64_t>(1000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMicrosecondsPerDay + microseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetMilliSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t milliseconds = nanoseconds/static_cast<uint64_t>(1000000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMillisecondsPerDay + milliseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  \n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t seconds = nanoseconds/(static_cast<uint64_t>(1000000000));\n+\n+  return static_cast<int64_t>(days_since_epoch * kSecondsPerDay + seconds);\n\nReview comment:\n       There is some amount of repetition in those four functions that would be nice to avoid, IMHO.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T15:48:27.551+0000",
                    "updated": "2021-06-07T15:48:27.551+0000",
                    "started": "2021-06-07T15:48:27.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607948",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/607949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#issuecomment-856054729\n\n\n   @wesm @emkornfield What do you think about the functionality that is added here? Is it a reasonable burden for us to take on?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T15:48:56.254+0000",
                    "updated": "2021-06-07T15:48:56.254+0000",
                    "started": "2021-06-07T15:48:56.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607949",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/607994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646777158\n\n\n\n##########\nFile path: cpp/src/parquet/types.h\n##########\n@@ -602,6 +602,49 @@ static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\n   return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + nanoseconds);\n }\n \n+// ARROW-12096\n+static inline int64_t Int96GetMicroSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t microseconds = nanoseconds/static_cast<uint64_t>(1000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMicrosecondsPerDay + microseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetMilliSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t milliseconds = nanoseconds/static_cast<uint64_t>(1000000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMillisecondsPerDay + milliseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n\nReview comment:\n       ```suggestion\r\n     // We do the computations in the unsigned domain to avoid undefined behaviour\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T16:54:27.442+0000",
                    "updated": "2021-06-07T16:54:27.442+0000",
                    "started": "2021-06-07T16:54:27.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607994",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/607995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#issuecomment-856103500\n\n\n   > @wesm @emkornfield What do you think about the functionality that is added here? Is it a reasonable burden for us to take on?\r\n   \r\n   It seems like a small enough change so I'm okay with it.  In general, though since Int96 is deprecated we should be looking very carefully at adding new functionality for it.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T16:56:41.369+0000",
                    "updated": "2021-06-07T16:56:41.369+0000",
                    "started": "2021-06-07T16:56:41.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607995",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/608049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "isichei commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646852666\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -742,20 +752,20 @@ Status TransferColumnData(RecordReader* reader, std::shared_ptr<DataType> value_\n     case ::arrow::Type::TIMESTAMP: {\n       const ::arrow::TimestampType& timestamp_type =\n           checked_cast<::arrow::TimestampType&>(*value_type);\n-      switch (timestamp_type.unit()) {\n-        case ::arrow::TimeUnit::MILLI:\n-        case ::arrow::TimeUnit::MICRO: {\n-          result = TransferZeroCopy(reader, value_type);\n-        } break;\n-        case ::arrow::TimeUnit::NANO: {\n-          if (descr->physical_type() == ::parquet::Type::INT96) {\n-            RETURN_NOT_OK(TransferInt96(reader, pool, value_type, &result));\n-          } else {\n+      if (descr->physical_type() == ::parquet::Type::INT96) {\n+            RETURN_NOT_OK(TransferInt96(reader, pool, value_type, &result, timestamp_type.unit()));\n+        }\n+      else {\n+        switch (timestamp_type.unit()) {\n+          case ::arrow::TimeUnit::SECOND:\n+          case ::arrow::TimeUnit::MILLI:\n+          case ::arrow::TimeUnit::MICRO:\n+          case ::arrow::TimeUnit::NANO: {\n             result = TransferZeroCopy(reader, value_type);\n-          }\n-        } break;\n-        default:\n-          return Status::NotImplemented(\"TimeUnit not supported\");\n+          } break;\n+          default:\n\nReview comment:\n       I don't think so. I was just copying how others had written switch expressions in the existing codebase. Will remove \ud83d\udc4d  \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T18:44:55.150+0000",
                    "updated": "2021-06-07T18:44:55.150+0000",
                    "started": "2021-06-07T18:44:55.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608049",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/608059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "isichei commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646865384\n\n\n\n##########\nFile path: cpp/src/parquet/types.h\n##########\n@@ -602,6 +602,49 @@ static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\n   return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + nanoseconds);\n }\n \n+// ARROW-12096\n+static inline int64_t Int96GetMicroSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t microseconds = nanoseconds/static_cast<uint64_t>(1000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMicrosecondsPerDay + microseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetMilliSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t milliseconds = nanoseconds/static_cast<uint64_t>(1000000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMillisecondsPerDay + milliseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  \n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t seconds = nanoseconds/(static_cast<uint64_t>(1000000000));\n+\n+  return static_cast<int64_t>(days_since_epoch * kSecondsPerDay + seconds);\n\nReview comment:\n       Yeah I agree.\r\n   \r\n   I was concerned about changing the original function `Int96GetNanoSeconds` incase I introduced some unexpected change. Perhaps a halfway house is to replace the 3 (`us`, `ms` and `s`) INT96 functions to something like:\r\n   \r\n   ```cpp\r\n   static inline int64_t Int96GetDownsampledTimestamp(const parquet::Int96& i96, const ::arrow::TimeUnit::type unit) {\r\n     // We do the computations in the unsigned domain to avoid unsigned behaviour\r\n     // on overflow.\r\n     uint64_t days_since_epoch =\r\n         i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\r\n     uint64_t nanoseconds = 0;\r\n   \r\n     memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\r\n     uint64_t seconds;\r\n   \r\n     switch (unit){\r\n       case ::arrow::TimeUnit::SECOND:\r\n         seconds = nanoseconds/static_cast<uint64_t>(1000000000);\r\n       case ::arrow::TimeUnit::MILLI:\r\n         seconds = nanoseconds/static_cast<uint64_t>(1000000);\r\n       case ::arrow::TimeUnit::MICRO:\r\n         seconds = nanoseconds/static_cast<uint64_t>(1000);\r\n     }\r\n     return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + seconds);\r\n   }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T19:04:45.073+0000",
                    "updated": "2021-06-07T19:04:45.073+0000",
                    "started": "2021-06-07T19:04:45.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608059",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/608060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "isichei commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646865384\n\n\n\n##########\nFile path: cpp/src/parquet/types.h\n##########\n@@ -602,6 +602,49 @@ static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\n   return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + nanoseconds);\n }\n \n+// ARROW-12096\n+static inline int64_t Int96GetMicroSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t microseconds = nanoseconds/static_cast<uint64_t>(1000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMicrosecondsPerDay + microseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetMilliSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t milliseconds = nanoseconds/static_cast<uint64_t>(1000000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMillisecondsPerDay + milliseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  \n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t seconds = nanoseconds/(static_cast<uint64_t>(1000000000));\n+\n+  return static_cast<int64_t>(days_since_epoch * kSecondsPerDay + seconds);\n\nReview comment:\n       Yeah I agree.\r\n   \r\n   I was concerned about changing the original function `Int96GetNanoSeconds` incase I introduced some unexpected change. Perhaps a halfway house is to replace the 3 (`us`, `ms` and `s`) INT96 functions to something like:\r\n   \r\n   ```cpp\r\n   static inline int64_t Int96GetDownsampledTimestamp(const parquet::Int96& i96, const ::arrow::TimeUnit::type unit) {\r\n     // We do the computations in the unsigned domain to avoid unsigned behaviour\r\n     // on overflow.\r\n     uint64_t days_since_epoch =\r\n         i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\r\n     uint64_t nanoseconds = 0;\r\n   \r\n     memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\r\n     uint64_t seconds;\r\n   \r\n     switch (unit){\r\n       case ::arrow::TimeUnit::SECOND:\r\n         seconds = nanoseconds/static_cast<uint64_t>(1000000000);\r\n       case ::arrow::TimeUnit::MILLI:\r\n         seconds = nanoseconds/static_cast<uint64_t>(1000000);\r\n       case ::arrow::TimeUnit::MICRO:\r\n         seconds = nanoseconds/static_cast<uint64_t>(1000);\r\n     }\r\n     return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + seconds);\r\n   }\r\n   ```\r\n   \r\n   Then there is an if/else in the `TransferInt96` function where default `NANO` unit calls the unchanged `Int96GetNanoSeconds` otherwise it calls the downcast version of the function?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T19:06:51.524+0000",
                    "updated": "2021-06-07T19:06:51.524+0000",
                    "started": "2021-06-07T19:06:51.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608060",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/608067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "isichei commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646870346\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -1671,6 +1671,91 @@ TEST(TestArrowReadWrite, UseDeprecatedInt96) {\n   ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result, *result));\n }\n \n+// Test for added functionality in ARROW-12096\n+TEST(TestArrowReadWrite, DownsampleDeprecatedInt96) {\n+  using ::arrow::ArrayFromVector;\n+  using ::arrow::field;\n+  using ::arrow::schema;\n+\n+  std::vector<bool> is_valid = {true, true, true, true};\n+\n+  auto t_s = ::arrow::timestamp(TimeUnit::SECOND);\n+  auto t_ms = ::arrow::timestamp(TimeUnit::MILLI);\n+  auto t_us = ::arrow::timestamp(TimeUnit::MICRO);\n+  auto t_ns = ::arrow::timestamp(TimeUnit::NANO);\n+\n+  // Values demonstrate loss of resolution when \"down sampling\" INT96 to units that are not NS\n+  std::vector<int64_t> s_values = {1489269, 1489269, 1489269, 1489269};\n+  std::vector<int64_t> ms_values = {1489269000, 1489269000,\n+                                    1489269000, 1489269001};\n+  std::vector<int64_t> us_values = {1489269000000, 1489269000000,\n+                                    1489269000001, 1489269001000};\n+  std::vector<int64_t> ns_values = {1489269000000000LL, 1489269000000001LL,\n+                                    1489269000001000LL, 1489269001000000LL};\n+\n+  std::shared_ptr<Array> a_s, a_ms, a_us, a_ns;\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_s, is_valid, s_values, &a_s);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ms, is_valid, ms_values, &a_ms);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_us, is_valid, us_values, &a_us);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ns, is_valid, ns_values, &a_ns);\n+\n+  // Create single input table of NS to be written to parquet with INT96\n+  auto input_schema = schema({field(\"f\", t_ns)});\n+  auto input = Table::Make(input_schema, {a_ns});\n+\n+  // Create an expected schema for each resulting table (one for each \"down sampled\" ts)\n+  auto ex_schema_s = schema({field(\"f\", t_s)});\n+  auto ex_schema_ms = schema({field(\"f\", t_ms)});\n+  auto ex_schema_us = schema({field(\"f\", t_us)});\n+  \n+  // Create tables\n+  auto ex_result_s = Table::Make(ex_schema_s, {a_s});\n+  auto ex_result_ms = Table::Make(ex_schema_ms, {a_ms});\n+  auto ex_result_us = Table::Make(ex_schema_us, {a_us});\n+\n+  std::shared_ptr<Table> result_s;\n+  std::shared_ptr<Table> result_ms;\n+  std::shared_ptr<Table> result_us;\n+\n+  ArrowReaderProperties arrow_reader_prop_s, arrow_reader_prop_ms, arrow_reader_prop_us;\n+  arrow_reader_prop_s.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::SECOND);\n+  arrow_reader_prop_ms.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MILLI);\n+  arrow_reader_prop_us.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MICRO);\n+\n+// SECOND\n+  ASSERT_NO_FATAL_FAILURE(DoRoundtrip(\n+    input, input->num_rows(), &result_s, default_writer_properties(),\n+    ArrowWriterProperties::Builder().enable_deprecated_int96_timestamps()->build(),\n+    arrow_reader_prop_s));\n+\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertSchemaEqual(*ex_result_s->schema(),\n+                                                     *result_s->schema(),\n+                                                     /*check_metadata=*/false));\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result_s, *result_s));\n\nReview comment:\n       Will give it a go! I'm afraid it has been a long time since I wrote any C++ code so the languange is basically new to me at this point - hence the basic repitition in places.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T19:12:25.088+0000",
                    "updated": "2021-06-07T19:12:25.088+0000",
                    "started": "2021-06-07T19:12:25.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608067",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/608107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646927762\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -1671,6 +1671,91 @@ TEST(TestArrowReadWrite, UseDeprecatedInt96) {\n   ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result, *result));\n }\n \n+// Test for added functionality in ARROW-12096\n+TEST(TestArrowReadWrite, DownsampleDeprecatedInt96) {\n+  using ::arrow::ArrayFromVector;\n+  using ::arrow::field;\n+  using ::arrow::schema;\n+\n+  std::vector<bool> is_valid = {true, true, true, true};\n+\n+  auto t_s = ::arrow::timestamp(TimeUnit::SECOND);\n+  auto t_ms = ::arrow::timestamp(TimeUnit::MILLI);\n+  auto t_us = ::arrow::timestamp(TimeUnit::MICRO);\n+  auto t_ns = ::arrow::timestamp(TimeUnit::NANO);\n+\n+  // Values demonstrate loss of resolution when \"down sampling\" INT96 to units that are not NS\n+  std::vector<int64_t> s_values = {1489269, 1489269, 1489269, 1489269};\n+  std::vector<int64_t> ms_values = {1489269000, 1489269000,\n+                                    1489269000, 1489269001};\n+  std::vector<int64_t> us_values = {1489269000000, 1489269000000,\n+                                    1489269000001, 1489269001000};\n+  std::vector<int64_t> ns_values = {1489269000000000LL, 1489269000000001LL,\n+                                    1489269000001000LL, 1489269001000000LL};\n+\n+  std::shared_ptr<Array> a_s, a_ms, a_us, a_ns;\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_s, is_valid, s_values, &a_s);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ms, is_valid, ms_values, &a_ms);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_us, is_valid, us_values, &a_us);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ns, is_valid, ns_values, &a_ns);\n+\n+  // Create single input table of NS to be written to parquet with INT96\n+  auto input_schema = schema({field(\"f\", t_ns)});\n+  auto input = Table::Make(input_schema, {a_ns});\n+\n+  // Create an expected schema for each resulting table (one for each \"down sampled\" ts)\n+  auto ex_schema_s = schema({field(\"f\", t_s)});\n+  auto ex_schema_ms = schema({field(\"f\", t_ms)});\n+  auto ex_schema_us = schema({field(\"f\", t_us)});\n+  \n+  // Create tables\n+  auto ex_result_s = Table::Make(ex_schema_s, {a_s});\n+  auto ex_result_ms = Table::Make(ex_schema_ms, {a_ms});\n+  auto ex_result_us = Table::Make(ex_schema_us, {a_us});\n+\n+  std::shared_ptr<Table> result_s;\n+  std::shared_ptr<Table> result_ms;\n+  std::shared_ptr<Table> result_us;\n+\n+  ArrowReaderProperties arrow_reader_prop_s, arrow_reader_prop_ms, arrow_reader_prop_us;\n+  arrow_reader_prop_s.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::SECOND);\n+  arrow_reader_prop_ms.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MILLI);\n+  arrow_reader_prop_us.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MICRO);\n+\n+// SECOND\n+  ASSERT_NO_FATAL_FAILURE(DoRoundtrip(\n+    input, input->num_rows(), &result_s, default_writer_properties(),\n+    ArrowWriterProperties::Builder().enable_deprecated_int96_timestamps()->build(),\n+    arrow_reader_prop_s));\n+\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertSchemaEqual(*ex_result_s->schema(),\n+                                                     *result_s->schema(),\n+                                                     /*check_metadata=*/false));\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result_s, *result_s));\n\nReview comment:\n       C++11 is quite a bit better than what was available before, if your experience was with C++98 :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T20:45:10.374+0000",
                    "updated": "2021-06-07T20:45:10.374+0000",
                    "started": "2021-06-07T20:45:10.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608107",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/608108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r646928428\n\n\n\n##########\nFile path: cpp/src/parquet/types.h\n##########\n@@ -602,6 +602,49 @@ static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\n   return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + nanoseconds);\n }\n \n+// ARROW-12096\n+static inline int64_t Int96GetMicroSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t microseconds = nanoseconds/static_cast<uint64_t>(1000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMicrosecondsPerDay + microseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetMilliSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t milliseconds = nanoseconds/static_cast<uint64_t>(1000000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMillisecondsPerDay + milliseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  \n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t seconds = nanoseconds/(static_cast<uint64_t>(1000000000));\n+\n+  return static_cast<int64_t>(days_since_epoch * kSecondsPerDay + seconds);\n\nReview comment:\n       As you prefer really. As long as the chosen solution avoids repeating the same decoding code, it should be ok.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T20:46:17.545+0000",
                    "updated": "2021-06-07T20:46:17.545+0000",
                    "started": "2021-06-07T20:46:17.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608108",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/610434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "isichei commented on a change in pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#discussion_r650521753\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -1671,6 +1671,91 @@ TEST(TestArrowReadWrite, UseDeprecatedInt96) {\n   ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result, *result));\n }\n \n+// Test for added functionality in ARROW-12096\n+TEST(TestArrowReadWrite, DownsampleDeprecatedInt96) {\n+  using ::arrow::ArrayFromVector;\n+  using ::arrow::field;\n+  using ::arrow::schema;\n+\n+  std::vector<bool> is_valid = {true, true, true, true};\n+\n+  auto t_s = ::arrow::timestamp(TimeUnit::SECOND);\n+  auto t_ms = ::arrow::timestamp(TimeUnit::MILLI);\n+  auto t_us = ::arrow::timestamp(TimeUnit::MICRO);\n+  auto t_ns = ::arrow::timestamp(TimeUnit::NANO);\n+\n+  // Values demonstrate loss of resolution when \"down sampling\" INT96 to units that are not NS\n+  std::vector<int64_t> s_values = {1489269, 1489269, 1489269, 1489269};\n+  std::vector<int64_t> ms_values = {1489269000, 1489269000,\n+                                    1489269000, 1489269001};\n+  std::vector<int64_t> us_values = {1489269000000, 1489269000000,\n+                                    1489269000001, 1489269001000};\n+  std::vector<int64_t> ns_values = {1489269000000000LL, 1489269000000001LL,\n+                                    1489269000001000LL, 1489269001000000LL};\n+\n+  std::shared_ptr<Array> a_s, a_ms, a_us, a_ns;\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_s, is_valid, s_values, &a_s);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ms, is_valid, ms_values, &a_ms);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_us, is_valid, us_values, &a_us);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ns, is_valid, ns_values, &a_ns);\n\nReview comment:\n       Have rewritten tests to use a helper function. Hopefully cleaner.\n\n##########\nFile path: cpp/src/parquet/arrow/arrow_reader_writer_test.cc\n##########\n@@ -1671,6 +1671,91 @@ TEST(TestArrowReadWrite, UseDeprecatedInt96) {\n   ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result, *result));\n }\n \n+// Test for added functionality in ARROW-12096\n+TEST(TestArrowReadWrite, DownsampleDeprecatedInt96) {\n+  using ::arrow::ArrayFromVector;\n+  using ::arrow::field;\n+  using ::arrow::schema;\n+\n+  std::vector<bool> is_valid = {true, true, true, true};\n+\n+  auto t_s = ::arrow::timestamp(TimeUnit::SECOND);\n+  auto t_ms = ::arrow::timestamp(TimeUnit::MILLI);\n+  auto t_us = ::arrow::timestamp(TimeUnit::MICRO);\n+  auto t_ns = ::arrow::timestamp(TimeUnit::NANO);\n+\n+  // Values demonstrate loss of resolution when \"down sampling\" INT96 to units that are not NS\n+  std::vector<int64_t> s_values = {1489269, 1489269, 1489269, 1489269};\n+  std::vector<int64_t> ms_values = {1489269000, 1489269000,\n+                                    1489269000, 1489269001};\n+  std::vector<int64_t> us_values = {1489269000000, 1489269000000,\n+                                    1489269000001, 1489269001000};\n+  std::vector<int64_t> ns_values = {1489269000000000LL, 1489269000000001LL,\n+                                    1489269000001000LL, 1489269001000000LL};\n+\n+  std::shared_ptr<Array> a_s, a_ms, a_us, a_ns;\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_s, is_valid, s_values, &a_s);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ms, is_valid, ms_values, &a_ms);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_us, is_valid, us_values, &a_us);\n+  ArrayFromVector<::arrow::TimestampType, int64_t>(t_ns, is_valid, ns_values, &a_ns);\n+\n+  // Create single input table of NS to be written to parquet with INT96\n+  auto input_schema = schema({field(\"f\", t_ns)});\n+  auto input = Table::Make(input_schema, {a_ns});\n+\n+  // Create an expected schema for each resulting table (one for each \"down sampled\" ts)\n+  auto ex_schema_s = schema({field(\"f\", t_s)});\n+  auto ex_schema_ms = schema({field(\"f\", t_ms)});\n+  auto ex_schema_us = schema({field(\"f\", t_us)});\n+  \n+  // Create tables\n+  auto ex_result_s = Table::Make(ex_schema_s, {a_s});\n+  auto ex_result_ms = Table::Make(ex_schema_ms, {a_ms});\n+  auto ex_result_us = Table::Make(ex_schema_us, {a_us});\n+\n+  std::shared_ptr<Table> result_s;\n+  std::shared_ptr<Table> result_ms;\n+  std::shared_ptr<Table> result_us;\n+\n+  ArrowReaderProperties arrow_reader_prop_s, arrow_reader_prop_ms, arrow_reader_prop_us;\n+  arrow_reader_prop_s.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::SECOND);\n+  arrow_reader_prop_ms.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MILLI);\n+  arrow_reader_prop_us.set_coerce_int96_timestamp_unit(::arrow::TimeUnit::MICRO);\n+\n+// SECOND\n+  ASSERT_NO_FATAL_FAILURE(DoRoundtrip(\n+    input, input->num_rows(), &result_s, default_writer_properties(),\n+    ArrowWriterProperties::Builder().enable_deprecated_int96_timestamps()->build(),\n+    arrow_reader_prop_s));\n+\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertSchemaEqual(*ex_result_s->schema(),\n+                                                     *result_s->schema(),\n+                                                     /*check_metadata=*/false));\n+  ASSERT_NO_FATAL_FAILURE(::arrow::AssertTablesEqual(*ex_result_s, *result_s));\n\nReview comment:\n       See previous comment thread.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -353,7 +353,8 @@ Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n }\n \n Status TransferInt96(RecordReader* reader, MemoryPool* pool,\n-                     const std::shared_ptr<DataType>& type, Datum* out) {\n+                     const std::shared_ptr<DataType>& type, Datum* out,\n+                     const ::arrow::TimeUnit::type& int96_arrow_time_unit) {\n\nReview comment:\n       Addressed.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -353,7 +353,8 @@ Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n }\n \n Status TransferInt96(RecordReader* reader, MemoryPool* pool,\n-                     const std::shared_ptr<DataType>& type, Datum* out) {\n+                     const std::shared_ptr<DataType>& type, Datum* out,\n+                     const ::arrow::TimeUnit::type& int96_arrow_time_unit) {\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -742,20 +752,20 @@ Status TransferColumnData(RecordReader* reader, std::shared_ptr<DataType> value_\n     case ::arrow::Type::TIMESTAMP: {\n       const ::arrow::TimestampType& timestamp_type =\n           checked_cast<::arrow::TimestampType&>(*value_type);\n-      switch (timestamp_type.unit()) {\n-        case ::arrow::TimeUnit::MILLI:\n-        case ::arrow::TimeUnit::MICRO: {\n-          result = TransferZeroCopy(reader, value_type);\n-        } break;\n-        case ::arrow::TimeUnit::NANO: {\n-          if (descr->physical_type() == ::parquet::Type::INT96) {\n-            RETURN_NOT_OK(TransferInt96(reader, pool, value_type, &result));\n-          } else {\n+      if (descr->physical_type() == ::parquet::Type::INT96) {\n+            RETURN_NOT_OK(TransferInt96(reader, pool, value_type, &result, timestamp_type.unit()));\n+        }\n+      else {\n+        switch (timestamp_type.unit()) {\n+          case ::arrow::TimeUnit::SECOND:\n+          case ::arrow::TimeUnit::MILLI:\n+          case ::arrow::TimeUnit::MICRO:\n+          case ::arrow::TimeUnit::NANO: {\n             result = TransferZeroCopy(reader, value_type);\n-          }\n-        } break;\n-        default:\n-          return Status::NotImplemented(\"TimeUnit not supported\");\n+          } break;\n+          default:\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -181,7 +181,8 @@ Result<std::shared_ptr<ArrowType>> FromInt64(const LogicalType& logical_type) {\n \n Result<std::shared_ptr<ArrowType>> GetArrowType(Type::type physical_type,\n                                                 const LogicalType& logical_type,\n-                                                int type_length) {\n+                                                int type_length,\n+                                                const ::arrow::TimeUnit::type& int96_arrow_time_unit) {\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -211,14 +212,22 @@ Result<std::shared_ptr<ArrowType>> GetArrowType(Type::type physical_type,\n   }\n }\n \n+// ARROW-12096 -- Overloading functions with new input (setting default as NANO)\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -211,14 +212,22 @@ Result<std::shared_ptr<ArrowType>> GetArrowType(Type::type physical_type,\n   }\n }\n \n+// ARROW-12096 -- Overloading functions with new input (setting default as NANO)\n Result<std::shared_ptr<ArrowType>> GetArrowType(const schema::PrimitiveNode& primitive) {\n   return GetArrowType(primitive.physical_type(), *primitive.logical_type(),\n-                      primitive.type_length());\n+                      primitive.type_length(), ::arrow::TimeUnit::NANO);\n }\n \n Result<std::shared_ptr<ArrowType>> GetArrowType(const ColumnDescriptor& descriptor) {\n   return GetArrowType(descriptor.physical_type(), *descriptor.logical_type(),\n-                      descriptor.type_length());\n+                      descriptor.type_length(), ::arrow::TimeUnit::NANO);\n+}\n+\n+// ARROW-12096 -- Exposing INT96 arrow type definition fromm parquet reader\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.h\n##########\n@@ -39,8 +39,20 @@ Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type\n                                                         const LogicalType& logical_type,\n                                                         int type_length);\n \n+// ARROW-12096 Exposing int96 arrow timestamp unit definition\n+Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type,\n+                                                        const LogicalType& logical_type,\n+                                                        int type_length,\n+                                                        const ::arrow::TimeUnit::type& int96_arrow_time_unit);\n\nReview comment:\n       Went back to to review this and not sure how to address.\r\n   \r\n   Only thing I can imagine would be to add to `GetTypeForNode` (from `arrow/schema.cc`) and overwrite the standard `storage_type` if the parquet physical_type is INT96 and reader properties are not set to NANO? Let me know if I have misunderstood.\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.h\n##########\n@@ -39,8 +39,20 @@ Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type\n                                                         const LogicalType& logical_type,\n                                                         int type_length);\n \n+// ARROW-12096 Exposing int96 arrow timestamp unit definition\n+Result<std::shared_ptr<::arrow::DataType>> GetArrowType(Type::type physical_type,\n+                                                        const LogicalType& logical_type,\n+                                                        int type_length,\n+                                                        const ::arrow::TimeUnit::type& int96_arrow_time_unit);\n+\n Result<std::shared_ptr<::arrow::DataType>> GetArrowType(\n     const schema::PrimitiveNode& primitive);\n+\n+// ARROW-12096 Exposing int96 arrow timestamp unit definition\n+Result<std::shared_ptr<::arrow::DataType>> GetArrowType(\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/parquet/types.h\n##########\n@@ -602,6 +602,49 @@ static inline int64_t Int96GetNanoSeconds(const parquet::Int96& i96) {\n   return static_cast<int64_t>(days_since_epoch * kNanosecondsPerDay + nanoseconds);\n }\n \n+// ARROW-12096\n+static inline int64_t Int96GetMicroSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t microseconds = nanoseconds/static_cast<uint64_t>(1000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMicrosecondsPerDay + microseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetMilliSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t milliseconds = nanoseconds/static_cast<uint64_t>(1000000);\n+\n+  return static_cast<int64_t>(days_since_epoch * kMillisecondsPerDay + milliseconds);\n+}\n+\n+// ARROW-12096\n+static inline int64_t Int96GetSeconds(const parquet::Int96& i96) {\n+  // We do the computations in the unsigned domain to avoid unsigned behaviour\n+  // on overflow.\n+  uint64_t days_since_epoch =\n+      i96.value[2] - static_cast<uint64_t>(kJulianToUnixEpochDays);\n+  \n+  uint64_t nanoseconds = 0;\n+  memcpy(&nanoseconds, &i96.value, sizeof(uint64_t));\n+\n+  uint64_t seconds = nanoseconds/(static_cast<uint64_t>(1000000000));\n+\n+  return static_cast<int64_t>(days_since_epoch * kSecondsPerDay + seconds);\n\nReview comment:\n       Went with your example in the end. As it made far more sense IMO.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T07:50:58.382+0000",
                    "updated": "2021-06-14T07:50:58.382+0000",
                    "started": "2021-06-14T07:50:58.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610434",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/611372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#issuecomment-861557116\n\n\n   It will probably be useful to expose this in Python (or R) as well? (the original JIRA report is also using a pyarrow example)  \r\n   \r\n   (this can be done in a follow-up to be clear, just to be sure we then create a JIRA for a follow-up task)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T14:39:45.527+0000",
                    "updated": "2021-06-15T14:39:45.527+0000",
                    "started": "2021-06-15T14:39:45.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611372",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/611434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T16:25:30.864+0000",
                    "updated": "2021-06-15T16:25:30.864+0000",
                    "started": "2021-06-15T16:25:30.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611434",
                    "issueId": "13367828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/worklog/611437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10461:\nURL: https://github.com/apache/arrow/pull/10461#issuecomment-861645603\n\n\n   Thank you @isichei !\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T16:26:42.766+0000",
                    "updated": "2021-06-15T16:26:42.766+0000",
                    "started": "2021-06-15T16:26:42.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611437",
                    "issueId": "13367828"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@288164f4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e8c0130[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a06de31[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@144dc1c0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@90ca041[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6df280fa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e92c23[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7bd0be1f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17b2078c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6ebeb0d0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26fe0110[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@58a07396[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 15 16:25:19 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-15T16:25:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12096/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2021-03-26T10:54:59.000+0000",
        "updated": "2021-06-15T16:28:21.000+0000",
        "timeoriginalestimate": null,
        "description": "When reading Parquet data with timestamps stored as INT96 pyarrow will assume that the timestamp type should be\u00a0nanoseconds\u00a0and when converted into an arrow table will cause overflow if the parquet col has stored values that are out of bounds for nanoseconds.\u00a0\r\n\r\n\r\n{code:python}\r\n# Round Trip Example\r\nimport datetime\r\nimport pandas as pd\r\nimport pyarrow as pa\r\nfrom pyarrow import parquet as pq\r\n\r\ndf = pd.DataFrame({\"a\": [datetime.datetime(1000,1,1), datetime.datetime(2000,1,1), datetime.datetime(3000,1,1)]})\r\na_df = pa.Table.from_pandas(df)\r\na_df.schema # a: timestamp[us] \r\n\r\npq.write_table(a_df, \"test_round_trip.parquet\", use_deprecated_int96_timestamps=True, version=\"1.0\")\r\npfile = pq.ParquetFile(\"test_round_trip.parquet\")\r\npfile.schema_arrow # a: timestamp[ns]\r\npq.read_table(\"test_round_trip.parquet\").to_pandas()\r\n# # Results in values:\r\n# 2169-02-08 23:09:07.419103232\r\n# 2000-01-01 00:00:00\r\n# 1830-11-23 00:50:52.580896768\r\n{code}\r\n\r\n\r\nThe above example is just trying to demonstrate this bug by getting pyarrow to write out the parquet format to a similar state of original file (where this bug was discovered). This bug was originally found when trying to read in Parquet outputs from Amazon Athena with pyarrow (where we can't control the output format of the parquet file format) [Context|https://github.com/awslabs/aws-data-wrangler/issues/592].\r\n\r\nI found some existing issues that might also be related:\r\n\r\n* [ARROW-10444|https://issues.apache.org/jira/browse/ARROW-10444] \r\n* [ARROW-6779|https://issues.apache.org/jira/browse/ARROW-6779] (This shows a similar response although testing this on pyarrow v3 will raise an out of bounds error)\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][C++] Pyarrow Parquet reader overflows INT96 timestamps when converting to Arrow Array (timestamp[ns])",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": "macos mojave 10.14.6\r\nPython 3.8.3\r\npyarrow 3.0.0\r\npandas 1.2.3",
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17333300",
                    "id": "17333300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Hmm... ideally Athena would stop emitting the deprecated INT96 type.\r\nIn the meantime, solving this would require adding a new option to choose the mapped timestamp type.\r\ncc [~emkornfield]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-04-27T14:37:23.906+0000",
                    "updated": "2021-04-27T14:37:23.906+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17333338",
                    "id": "17333338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~apitrou]\u00a0yeah definitely agree. But I am not sure when they are going to do that (I haven't seen or heard anything that suggests it would be soon unfortunately).\u00a0\r\n\r\nHappy to give it a go myself, is there a prescribed process that I would go about tackling this? Would a good start for me be to look through a similar PR (like this one: [https://github.com/apache/arrow/pull/4597/files)|https://github.com/apache/arrow/pull/4597/files]\u00a0to get an idea of how exposing a new option for the parquet reader in pyarrow would be done?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-04-27T15:39:02.797+0000",
                    "updated": "2021-04-27T15:39:02.797+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17333367",
                    "id": "17333367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~isichei] You first need to solve the issue on the C++ side. There are probably several places to look into:\r\n\r\n* {{ArrowReaderProperties}} in {{cpp/src/parquet/properties.h}}: you'll need to add the new option here\r\n* {{GetArrowType}} in {{cpp/src/parquet/arrow/schema_internal.cc}}: you'll need to take the option into account here\r\n* {{TransferInt96}} in {{cpp/src/parquet/arrow/reader_internal.cc}}: ditto\r\n\r\nYou'll also need to expand the existing tests in {{cpp/src/parquet/arrow/arrow_reader_writer_test.cc}}.\r\n\r\nOnce that is done you'll be able to expose the option in Python.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-04-27T16:29:25.729+0000",
                    "updated": "2021-04-27T16:29:35.429+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17337599",
                    "id": "17337599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks [~apitrou]\u00a0for pointing me in the right direction, appreciate it!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-04-30T19:54:04.271+0000",
                    "updated": "2021-04-30T19:54:04.271+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17337953",
                    "id": "17337953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Agree, IIUC int96 should be a deprecated type at this point.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
                        "name": "emkornfield",
                        "key": "emkornfield",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-05-02T04:54:14.306+0000",
                    "updated": "2021-05-02T04:54:14.306+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17339339",
                    "id": "17339339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi all,\r\n\r\nHave had some time to look at this / get my head around the CPP codebase. What makes sense to me following [~apitrou]'s advice (exposing the {{ArrowReaderProperties}} options and taking them into account in {{GetArrowType}},\u00a0{{TransferInt96}}) would be to do the following:\r\n\r\n1. Add the option like {{int96_timestamp_type_as}} = <any arrow timestamp defaults to NS for backwards compatibility>\r\n\r\n2. Change\u00a0{{Int96GetNanoSeconds}}(in {{cpp/src/parquet/types.h)\u00a0}}to something like\u00a0{{Int96GetSeconds}} where it has an aditional parameter which is the interval size (again defaults to NS). Then if the interval was defined as anything other than NS the users may get truncated TS / data loss when converting the nanosecond component of the INT96 timestamp to the specified interval.\r\n\r\n*Some Questions on the above:*\r\n * Does this sound like an O.K. approach to take? Not sure if renaming functions in your codebase is against any contribution styles (etc) as far as I can tell that function isn't really used too much so a rename wouldn't be too much effort. Otherwise would a preferred approach be to create a function for each INT96 -> Timestamp Interval?\r\n\r\n * Do I need to raise any warning stuff if timestamps are being truncated in the C++ code or is it something that would just be expressed in the docs? I.e. if you specify your own timestamp for INT96 that is at your own risk.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-05-04T22:49:44.495+0000",
                    "updated": "2021-05-04T22:49:44.495+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17358424",
                    "id": "17358424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Have created a PR for the fix (only on the C++ functionality).\r\n\r\n[https://github.com/apache/arrow/pull/10461]\r\n\r\n\u00a0\r\n\r\nLet me know if there are any problems or improvements. I was thinking of doing C++ and Python but thought better to solve the C++ functionality first and then do a secondary PR for exposing the functionality in Python.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=isichei",
                        "name": "isichei",
                        "key": "isichei",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Karik Isichei",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-07T07:58:25.338+0000",
                    "updated": "2021-06-07T07:58:25.338+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17358678",
                    "id": "17358678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Thanks for the PR [~isichei]. I've answered there.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-07T15:51:08.710+0000",
                    "updated": "2021-06-07T15:51:08.710+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13367828/comment/17363752",
                    "id": "17363752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10461\n[https://github.com/apache/arrow/pull/10461]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-15T16:25:19.078+0000",
                    "updated": "2021-06-15T16:25:19.078+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z0p8fk:",
        "customfield_12314139": null
    }
}