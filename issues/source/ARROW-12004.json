{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13365912",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912",
    "key": "ARROW-12004",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "async-util",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12004/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/591301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace opened a new pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205\n\n\n   Per the JIRA\r\n   \r\n   `Future<>::AddCallback` callbacks receive a `Status`.\r\n   `Future<T>::AddCallback` callbacks receive a `Result<T>`\r\n   `Future<>::Then` callbacks receive nothing\r\n   `Future<T>::Then` callbacks receive `const T&`\r\n   \r\n   To achieve this I had to explicitly specialize the empty `Future` but I introduced `FutureBase` to reduce the amount of duplicated code.  `detail::Empty` is still around (although it got renamed to `internal::Empty` as a side effect of moving into `functional.h`).  It could be removed if one wanted to create a specialized `FutureImpl` but I that doesn't seem to be needed at the moment.\r\n   \r\n   Draft while still in cleanup/WIP but all tests pass on my machine.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T23:30:41.611+0000",
                    "updated": "2021-04-29T23:30:41.611+0000",
                    "started": "2021-04-29T23:30:41.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591301",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/591302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#issuecomment-829682096\n\n\n   https://issues.apache.org/jira/browse/ARROW-12004\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T23:31:06.298+0000",
                    "updated": "2021-04-29T23:31:06.298+0000",
                    "started": "2021-04-29T23:31:06.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "591302",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/592183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r625111464\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool_test.cc\n##########\n@@ -189,11 +189,7 @@ TEST_P(TestRunSynchronously, SpawnMoreNested) {\n   auto top_level_task = [&](Executor* executor) -> Future<> {\n     auto fut_a = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n     auto fut_b = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n-    return AllComplete({fut_a, fut_b})\n-        .Then([&](const Result<arrow::detail::Empty>& result) {\n-          nested_ran++;\n-          return result;\n-        });\n+    return AllComplete({fut_a, fut_b}).Then([&]() { nested_ran++; });\n\nReview comment:\n       I'm curious why the old version took a `Result` and returned it. Was there a discrepancy between `Future<T>::Then` and `Future<Empty>::Then`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T14:08:35.656+0000",
                    "updated": "2021-05-03T14:08:35.656+0000",
                    "started": "2021-05-03T14:08:35.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592183",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/592290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r625263718\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool_test.cc\n##########\n@@ -189,11 +189,7 @@ TEST_P(TestRunSynchronously, SpawnMoreNested) {\n   auto top_level_task = [&](Executor* executor) -> Future<> {\n     auto fut_a = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n     auto fut_b = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n-    return AllComplete({fut_a, fut_b})\n-        .Then([&](const Result<arrow::detail::Empty>& result) {\n-          nested_ran++;\n-          return result;\n-        });\n+    return AllComplete({fut_a, fut_b}).Then([&]() { nested_ran++; });\n\nReview comment:\n       What a continuation returns is a separate decision from what it accepts.  However, returning a result here was essentially a no-op before and would still be one now.\r\n   \r\n   The first argument (or only argument in the 1-argument overload) to `Then` will only be called on success and it is given `result.ValueOrDie()` so accepting a `Result` is somewhat counter-productive.  This is different from `AddCallback` which is called on success or failure.\r\n   \r\n   It would be good to make it a compile error to accept a `Result<T>` in all cases of `Then` to avoid this confusion.  The current state of the PR will make a compile error for `Future<Empty>::Then` (which is why this was caught) so I'll update it to catch the `Future<T>::Then` case as well.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T18:02:46.543+0000",
                    "updated": "2021-05-03T18:02:46.543+0000",
                    "started": "2021-05-03T18:02:46.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592290",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/592562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r625504477\n\n\n\n##########\nFile path: cpp/src/arrow/util/thread_pool_test.cc\n##########\n@@ -189,11 +189,7 @@ TEST_P(TestRunSynchronously, SpawnMoreNested) {\n   auto top_level_task = [&](Executor* executor) -> Future<> {\n     auto fut_a = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n     auto fut_b = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n-    return AllComplete({fut_a, fut_b})\n-        .Then([&](const Result<arrow::detail::Empty>& result) {\n-          nested_ran++;\n-          return result;\n-        });\n+    return AllComplete({fut_a, fut_b}).Then([&]() { nested_ran++; });\n\nReview comment:\n       I took a stab at preventing `Then` callbacks accepting `Result<T>` but didn't make much headway and so I'd prefer to defer that to a future PR.  The problem is that we have `Args` in `ContinueFuture` but no `T` to check if `Args[0] == Result<T>`.  In the `Then` method we have `T` but no idea what `Args` are.\r\n   \r\n   I suspect there is someway to test if `Args[0]` is a `Result<?>` but I tried a few things and didn't figure it out.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-04T04:37:18.546+0000",
                    "updated": "2021-05-04T04:37:18.546+0000",
                    "started": "2021-05-04T04:37:18.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592562",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/592802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r625876665\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -78,28 +102,31 @@ struct ContinueFuture {\n   template <typename ContinueFunc, typename... Args,\n             typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n             typename NextFuture = ForReturn<ContinueResult>>\n-  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n-                          !is_future<ContinueResult>::value>::type\n+  typename std::enable_if<\n+      !std::is_void<ContinueResult>::value && !is_future<ContinueResult>::value &&\n+      (!NextFuture::is_empty || std::is_same<ContinueResult, Status>::value)>::type\n   operator()(NextFuture next, ContinueFunc&& f, Args&&... a) const {\n     next.MarkFinished(std::forward<ContinueFunc>(f)(std::forward<Args>(a)...));\n   }\n \n+  template <typename ContinueFunc, typename... Args,\n+            typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n+            typename NextFuture = ForReturn<ContinueResult>>\n+  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n+                          !is_future<ContinueResult>::value && NextFuture::is_empty &&\n+                          !std::is_same<ContinueResult, Status>::value>::type\n+  operator()(NextFuture next, ContinueFunc&& f, Args&&... a) const {\n+    next.MarkFinished(std::forward<ContinueFunc>(f)(std::forward<Args>(a)...).status());\n+  }\n+\n   template <typename ContinueFunc, typename... Args,\n             typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n             typename NextFuture = ForReturn<ContinueResult>>\n   typename std::enable_if<is_future<ContinueResult>::value>::type operator()(\n       NextFuture next, ContinueFunc&& f, Args&&... a) const {\n     ContinueResult signal_to_complete_next =\n         std::forward<ContinueFunc>(f)(std::forward<Args>(a)...);\n-\n-    struct MarkNextFinished {\n-      void operator()(const Result<typename ContinueResult::ValueType>& result) && {\n-        next.MarkFinished(result);\n-      }\n-      NextFuture next;\n-    };\n-\n-    signal_to_complete_next.AddCallback(MarkNextFinished{std::move(next)});\n+    Propagate<ContinueResult, NextFuture>(signal_to_complete_next, std::move(next));\n\nReview comment:\n       It might be more clear to only extract a callback factory, rather than calling AddCallback in Propagate:\r\n   ```suggestion\r\n       auto callback = MakeMarkNextFinished<ContinueResult>(std::move(next));\r\n       signal_to_complete_next.AddCallback(std::move(callback));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -56,6 +47,39 @@ struct is_future<Future<T>> : std::true_type {};\n template <typename Signature>\n using result_of_t = typename std::result_of<Signature>::type;\n \n+template <typename Source, typename Dest>\n+typename std::enable_if<Source::is_empty>::type Propagate(Source& source, Dest dest) {\n\nReview comment:\n       Style nit: mutable references should be avoided\r\n   ```suggestion\r\n   typename std::enable_if<Source::is_empty>::type Propagate(Source* source, Dest dest) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/thread_pool.h\n##########\n@@ -227,14 +228,14 @@ class ARROW_EXPORT SerialExecutor : public Executor {\n   std::shared_ptr<State> state_;\n \n   template <typename T>\n-  Result<T> Run(TopLevelTask<T> initial_task) {\n+  Future<T> Run(TopLevelTask<T> initial_task) {\n     auto final_fut = std::move(initial_task)(this);\n     if (final_fut.is_finished()) {\n-      return final_fut.result();\n+      return final_fut;\n     }\n-    final_fut.AddCallback([this](const Result<T>&) { MarkFinished(); });\n+    final_fut.AddCallback([this](...) { MarkFinished(); });\n\nReview comment:\n       `...` can only be used to ignore trivially copyable/destructible arguments, so I'd revert this\r\n   ```suggestion\r\n       final_fut.AddCallback([this](const Result<T>&) { MarkFinished(); });\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -691,20 +862,29 @@ struct Continue {\n   }\n };\n \n-template <typename T = detail::Empty>\n+template <typename T = internal::Empty>\n util::optional<T> Break(T break_value = {}) {\n   return util::optional<T>{std::move(break_value)};\n }\n \n-template <typename T = detail::Empty>\n+template <typename T = internal::Empty>\n using ControlFlow = util::optional<T>;\n \n+template <typename T>\n+void ForwardControlResult(const Result<ControlFlow<T>>& result, Future<T>& sink) {\n\nReview comment:\n       ```suggestion\r\n   void ForwardControlResult(const Result<ControlFlow<T>>& result, Future<T>* sink) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/thread_pool_test.cc\n##########\n@@ -189,11 +189,7 @@ TEST_P(TestRunSynchronously, SpawnMoreNested) {\n   auto top_level_task = [&](Executor* executor) -> Future<> {\n     auto fut_a = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n     auto fut_b = DeferNotOk(executor->Submit([&] { nested_ran++; }));\n-    return AllComplete({fut_a, fut_b})\n-        .Then([&](const Result<arrow::detail::Empty>& result) {\n-          nested_ran++;\n-          return result;\n-        });\n+    return AllComplete({fut_a, fut_b}).Then([&]() { nested_ran++; });\n\nReview comment:\n       you could add the following assertion to the body of Then:\r\n   ```c++\r\n       using OnSuccessArg =\r\n           typename std::decay<internal::call_traits::argument_type<0, OnSuccess>>::type;\r\n       static_assert(\r\n           !std::is_same<OnSuccessArg, typename EnsureResult<OnSuccessArg>::type>::value,\r\n           \"OnSuccess' argument should not be a Result\");\r\n   ```\r\n   \r\n   Currently `call_traits::argument_type` breaks when trying to examine an ellipsis, so the following wouldn't compile anymore:\r\n   ```c++\r\n   int_future.Then([](...) {});\r\n   ```\r\n   But that'd probably be an acceptable loss\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-04T15:35:13.437+0000",
                    "updated": "2021-05-04T15:35:13.437+0000",
                    "started": "2021-05-04T15:35:13.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592802",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/593953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r629340021\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -78,28 +110,32 @@ struct ContinueFuture {\n   template <typename ContinueFunc, typename... Args,\n             typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n             typename NextFuture = ForReturn<ContinueResult>>\n-  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n-                          !is_future<ContinueResult>::value>::type\n+  typename std::enable_if<\n+      !std::is_void<ContinueResult>::value && !is_future<ContinueResult>::value &&\n+      (!NextFuture::is_empty || std::is_same<ContinueResult, Status>::value)>::type\n\nReview comment:\n       You should add comments before each of these overloads because it's getting very hard to guess what their role is.\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -56,6 +47,47 @@ struct is_future<Future<T>> : std::true_type {};\n template <typename Signature>\n using result_of_t = typename std::result_of<Signature>::type;\n \n+template <typename Source, typename Dest>\n+typename std::enable_if<Source::is_empty>::type Propagate(Source* source, Dest dest) {\n\nReview comment:\n       Is this used somewhere?\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -322,56 +341,98 @@ class ARROW_MUST_USE_TYPE Future {\n     return impl_->Wait(seconds);\n   }\n \n-  // Producer API\n+ protected:\n+  void InitializeFromResult(Result<ValueType> res) {\n+    if (ARROW_PREDICT_TRUE(res.ok())) {\n+      impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+    } else {\n+      impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+    }\n+    SetResult(std::move(res));\n+  }\n \n-  /// \\brief Producer API: mark Future finished\n-  ///\n-  /// The Future's result is set to `res`.\n-  void MarkFinished(Result<ValueType> res) { DoMarkFinished(std::move(res)); }\n+  void Initialize() { impl_ = FutureImpl::Make(); }\n \n-  /// \\brief Mark a Future<> completed with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  void MarkFinished(Status s = Status::OK()) {\n-    return DoMarkFinished(E::ToResult(std::move(s)));\n+  Result<ValueType>* GetResult() const {\n+    return static_cast<Result<ValueType>*>(impl_->result_.get());\n   }\n \n-  /// \\brief Producer API: instantiate a valid Future\n-  ///\n-  /// The Future's state is initialized with PENDING.  If you are creating a future with\n-  /// this method you must ensure that future is eventually completed (with success or\n-  /// failure).  Creating a future, returning it, and never completing the future can lead\n-  /// to memory leaks (for example, see Loop).\n-  static Future Make() {\n-    Future fut;\n-    fut.impl_ = FutureImpl::Make();\n-    return fut;\n+  void SetResult(Result<ValueType> res) {\n+    impl_->result_ = {new Result<ValueType>(std::move(res)),\n+                      [](void* p) { delete static_cast<Result<ValueType>*>(p); }};\n   }\n \n-  /// \\brief Producer API: instantiate a finished Future\n-  static Future MakeFinished(Result<ValueType> res) {\n-    Future fut;\n-    if (ARROW_PREDICT_TRUE(res.ok())) {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+  void DoMarkFinished(Result<ValueType> res) {\n+    SetResult(std::move(res));\n+\n+    if (ARROW_PREDICT_TRUE(GetResult()->ok())) {\n+      impl_->MarkFinished();\n     } else {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+      impl_->MarkFailed();\n     }\n-    fut.SetResult(std::move(res));\n-    return fut;\n   }\n \n-  /// \\brief Make a finished Future<> with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  static Future<> MakeFinished(Status s = Status::OK()) {\n-    return MakeFinished(E::ToResult(std::move(s)));\n+  void CheckValid() const {\n+#ifndef NDEBUG\n+    if (!is_valid()) {\n+      Status::Invalid(\"Invalid Future (default-initialized?)\").Abort();\n+    }\n+#endif\n+  }\n+\n+  explicit FutureBase(std::shared_ptr<FutureImpl> impl) : impl_(std::move(impl)) {}\n+\n+  std::shared_ptr<FutureImpl> impl_;\n+\n+  friend class FutureWaiter;\n+  friend struct detail::ContinueFuture;\n+};\n+\n+template <typename T>\n+class ARROW_MUST_USE_TYPE Future : public FutureBase<T> {\n+ public:\n+  using ValueType = T;\n+  using SyncType = Result<T>;\n+  static constexpr bool is_empty = false;\n+\n+  Future() = default;\n+\n+  /// \\brief Returns an rvalue to the result.  This method is potentially unsafe\n+  ///\n+  /// The future is not the unique owner of the result, copies of a future will\n+  /// also point to the same result.  You must make sure that no other copies\n+  /// of the future exist.  Attempts to add callbacks after you move the result\n+  /// will result in undefined behavior.\n+  Result<ValueType>&& MoveResult() {\n+    FutureBase<T>::Wait();\n+    return std::move(*FutureBase<T>::GetResult());\n+  }\n+\n+  /// \\brief Wait for the Future to complete and return its Result (or Status for an empty\n+  /// future)\n+  ///\n+  /// This method is useful for general purpose code converting from async to sync where T\n+  /// is a template parameter and may be empty.\n+  const SyncType& to_sync() const { return FutureBase<T>::result(); }\n\nReview comment:\n       So this is just the `result()` method? Is there an actual need in introducing this?\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -322,56 +341,98 @@ class ARROW_MUST_USE_TYPE Future {\n     return impl_->Wait(seconds);\n   }\n \n-  // Producer API\n+ protected:\n+  void InitializeFromResult(Result<ValueType> res) {\n+    if (ARROW_PREDICT_TRUE(res.ok())) {\n+      impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+    } else {\n+      impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+    }\n+    SetResult(std::move(res));\n+  }\n \n-  /// \\brief Producer API: mark Future finished\n-  ///\n-  /// The Future's result is set to `res`.\n-  void MarkFinished(Result<ValueType> res) { DoMarkFinished(std::move(res)); }\n+  void Initialize() { impl_ = FutureImpl::Make(); }\n \n-  /// \\brief Mark a Future<> completed with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  void MarkFinished(Status s = Status::OK()) {\n-    return DoMarkFinished(E::ToResult(std::move(s)));\n+  Result<ValueType>* GetResult() const {\n+    return static_cast<Result<ValueType>*>(impl_->result_.get());\n   }\n \n-  /// \\brief Producer API: instantiate a valid Future\n-  ///\n-  /// The Future's state is initialized with PENDING.  If you are creating a future with\n-  /// this method you must ensure that future is eventually completed (with success or\n-  /// failure).  Creating a future, returning it, and never completing the future can lead\n-  /// to memory leaks (for example, see Loop).\n-  static Future Make() {\n-    Future fut;\n-    fut.impl_ = FutureImpl::Make();\n-    return fut;\n+  void SetResult(Result<ValueType> res) {\n+    impl_->result_ = {new Result<ValueType>(std::move(res)),\n+                      [](void* p) { delete static_cast<Result<ValueType>*>(p); }};\n   }\n \n-  /// \\brief Producer API: instantiate a finished Future\n-  static Future MakeFinished(Result<ValueType> res) {\n-    Future fut;\n-    if (ARROW_PREDICT_TRUE(res.ok())) {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+  void DoMarkFinished(Result<ValueType> res) {\n+    SetResult(std::move(res));\n+\n+    if (ARROW_PREDICT_TRUE(GetResult()->ok())) {\n+      impl_->MarkFinished();\n     } else {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+      impl_->MarkFailed();\n     }\n-    fut.SetResult(std::move(res));\n-    return fut;\n   }\n \n-  /// \\brief Make a finished Future<> with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  static Future<> MakeFinished(Status s = Status::OK()) {\n-    return MakeFinished(E::ToResult(std::move(s)));\n+  void CheckValid() const {\n+#ifndef NDEBUG\n+    if (!is_valid()) {\n+      Status::Invalid(\"Invalid Future (default-initialized?)\").Abort();\n+    }\n+#endif\n+  }\n+\n+  explicit FutureBase(std::shared_ptr<FutureImpl> impl) : impl_(std::move(impl)) {}\n+\n+  std::shared_ptr<FutureImpl> impl_;\n+\n+  friend class FutureWaiter;\n+  friend struct detail::ContinueFuture;\n+};\n+\n+template <typename T>\n+class ARROW_MUST_USE_TYPE Future : public FutureBase<T> {\n+ public:\n+  using ValueType = T;\n+  using SyncType = Result<T>;\n\nReview comment:\n       Call this `ResultType`?\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -56,6 +47,47 @@ struct is_future<Future<T>> : std::true_type {};\n template <typename Signature>\n using result_of_t = typename std::result_of<Signature>::type;\n \n+template <typename Source, typename Dest>\n+typename std::enable_if<Source::is_empty>::type Propagate(Source* source, Dest dest) {\n+  struct MarkNextFinished {\n+    void operator()(const Status& status) && { next.MarkFinished(status); }\n+    Dest next;\n+  };\n+  source->AddCallback(MarkNextFinished{std::move(dest)});\n+}\n+\n+template <typename Source, typename Dest, bool SourceEmpty = Source::is_empty,\n+          bool DestEmpty = Dest::is_empty>\n+struct MarkNextFinished {};\n+\n+template <typename Source, typename Dest>\n+struct MarkNextFinished<Source, Dest, true, false> {\n+  void operator()(const Status& status) && { next.MarkFinished(status); }\n\nReview comment:\n       Is this one valid? If the status is ok, then `next` needs an actual `Result` object.\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -78,28 +110,32 @@ struct ContinueFuture {\n   template <typename ContinueFunc, typename... Args,\n             typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n             typename NextFuture = ForReturn<ContinueResult>>\n-  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n-                          !is_future<ContinueResult>::value>::type\n+  typename std::enable_if<\n+      !std::is_void<ContinueResult>::value && !is_future<ContinueResult>::value &&\n+      (!NextFuture::is_empty || std::is_same<ContinueResult, Status>::value)>::type\n   operator()(NextFuture next, ContinueFunc&& f, Args&&... a) const {\n     next.MarkFinished(std::forward<ContinueFunc>(f)(std::forward<Args>(a)...));\n   }\n \n+  template <typename ContinueFunc, typename... Args,\n+            typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n+            typename NextFuture = ForReturn<ContinueResult>>\n+  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n+                          !is_future<ContinueResult>::value && NextFuture::is_empty &&\n+                          !std::is_same<ContinueResult, Status>::value>::type\n+  operator()(NextFuture next, ContinueFunc&& f, Args&&... a) const {\n+    next.MarkFinished(std::forward<ContinueFunc>(f)(std::forward<Args>(a)...).status());\n\nReview comment:\n       Hmm... so why not create a specialized helper such as:\r\n   ```c++\r\n   void ForwardResult(const Result<T>&, Future<U>* fut);\r\n   void ForwardResult(const Result<T>&, Future<>* fut);\r\n   void ForwardResult(const Status&, Future<>* fut);\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -691,34 +876,41 @@ struct Continue {\n   }\n };\n \n-template <typename T = detail::Empty>\n+template <typename T = internal::Empty>\n util::optional<T> Break(T break_value = {}) {\n   return util::optional<T>{std::move(break_value)};\n }\n \n-template <typename T = detail::Empty>\n+template <typename T = internal::Empty>\n using ControlFlow = util::optional<T>;\n \n+template <typename T>\n+void ForwardControlResult(const Result<ControlFlow<T>>& result, Future<T> sink) {\n+  sink.MarkFinished(**result);\n+}\n+template <>\n+inline void ForwardControlResult(const Result<ControlFlow<>>& result, Future<> sink) {\n+  sink.MarkFinished();\n\nReview comment:\n       I'm a bit skeptical that we have to introduce this yet another result-to-future forwarding primitive.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-10T13:13:49.693+0000",
                    "updated": "2021-05-10T13:13:49.693+0000",
                    "started": "2021-05-10T13:13:49.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "593953",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/595068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#issuecomment-839428127\n\n\n   > Overall I'm a bit surprised by the amount of complication that seems necessary. Is there a way to straighten this up.\r\n   \r\n   Most of your comments should be addressable.  However, I'm not certain if this comment is referring to the overall idea of splitting `Future` into three classes (well two with one specialization) `FutureBase`, `Future<>`, and `Future<T>`.\r\n   \r\n   The need there stems from the fact that I cannot (to my knowledge) apply SFINAE to a method based on a class template parameter (`T`).  I think I could take the \"dummy parameter\" approach (e.g. something like `void f(T&& x, typename std::enable_if<!std::is_reference<T_>::value, std::nullptr_t>::type = nullptr)`) but I personally find that to be less readable and, since the inheritance is non-virtual, I don't think it would be more performant.\r\n   \r\n   Another approach could be to allow `Result<Status>` (perhaps with a special factory method to allow the static assert to remain) but I seem to recall that being frowned upon.  If that is on the table then I'd be happy to investigate that option as well.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T04:41:23.531+0000",
                    "updated": "2021-05-12T04:41:23.531+0000",
                    "started": "2021-05-12T04:41:23.531+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595068",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/595109",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#issuecomment-839549165\n\n\n   Hmm, ok, I may be hoping too much from C++ :-) I'll let @bkietz chime in.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T07:52:48.003+0000",
                    "updated": "2021-05-12T07:52:48.003+0000",
                    "started": "2021-05-12T07:52:48.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595109",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/595503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#issuecomment-839985461\n\n\n   Instead of sniffing the class' template parameter, it'd be straightforward to check a callback's argument type.\r\n   \r\n   in `AddCallback(on_complete)`:\r\n   - if `on_complete` takes a Status, let it be completed with just the status (ignoring the value)\r\n   - otherwise, let it be completed with the Result\r\n   \r\n   in `Then(on_success, on_failure)`:\r\n   - if `on_success` takes no args, let it be wrapped in an on_success which ignores the value\r\n   - otherwise, let it receive the value\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T18:04:22.449+0000",
                    "updated": "2021-05-12T18:04:22.449+0000",
                    "started": "2021-05-12T18:04:22.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595503",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/595881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#issuecomment-840311677\n\n\n   Ok, using @bkietz 's suggestions I was able to collapse the two classes back into one.  I still have some cleanup to do so this is not ready for review yet.  The result is more compact, although I'm not necessarily convinced it is any more maintainable but :shrug: .\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T05:28:52.369+0000",
                    "updated": "2021-05-13T05:28:52.369+0000",
                    "started": "2021-05-13T05:28:52.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595881",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/595884",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r631576939\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -322,56 +341,98 @@ class ARROW_MUST_USE_TYPE Future {\n     return impl_->Wait(seconds);\n   }\n \n-  // Producer API\n+ protected:\n+  void InitializeFromResult(Result<ValueType> res) {\n+    if (ARROW_PREDICT_TRUE(res.ok())) {\n+      impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+    } else {\n+      impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+    }\n+    SetResult(std::move(res));\n+  }\n \n-  /// \\brief Producer API: mark Future finished\n-  ///\n-  /// The Future's result is set to `res`.\n-  void MarkFinished(Result<ValueType> res) { DoMarkFinished(std::move(res)); }\n+  void Initialize() { impl_ = FutureImpl::Make(); }\n \n-  /// \\brief Mark a Future<> completed with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  void MarkFinished(Status s = Status::OK()) {\n-    return DoMarkFinished(E::ToResult(std::move(s)));\n+  Result<ValueType>* GetResult() const {\n+    return static_cast<Result<ValueType>*>(impl_->result_.get());\n   }\n \n-  /// \\brief Producer API: instantiate a valid Future\n-  ///\n-  /// The Future's state is initialized with PENDING.  If you are creating a future with\n-  /// this method you must ensure that future is eventually completed (with success or\n-  /// failure).  Creating a future, returning it, and never completing the future can lead\n-  /// to memory leaks (for example, see Loop).\n-  static Future Make() {\n-    Future fut;\n-    fut.impl_ = FutureImpl::Make();\n-    return fut;\n+  void SetResult(Result<ValueType> res) {\n+    impl_->result_ = {new Result<ValueType>(std::move(res)),\n+                      [](void* p) { delete static_cast<Result<ValueType>*>(p); }};\n   }\n \n-  /// \\brief Producer API: instantiate a finished Future\n-  static Future MakeFinished(Result<ValueType> res) {\n-    Future fut;\n-    if (ARROW_PREDICT_TRUE(res.ok())) {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+  void DoMarkFinished(Result<ValueType> res) {\n+    SetResult(std::move(res));\n+\n+    if (ARROW_PREDICT_TRUE(GetResult()->ok())) {\n+      impl_->MarkFinished();\n     } else {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+      impl_->MarkFailed();\n     }\n-    fut.SetResult(std::move(res));\n-    return fut;\n   }\n \n-  /// \\brief Make a finished Future<> with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  static Future<> MakeFinished(Status s = Status::OK()) {\n-    return MakeFinished(E::ToResult(std::move(s)));\n+  void CheckValid() const {\n+#ifndef NDEBUG\n+    if (!is_valid()) {\n+      Status::Invalid(\"Invalid Future (default-initialized?)\").Abort();\n+    }\n+#endif\n+  }\n+\n+  explicit FutureBase(std::shared_ptr<FutureImpl> impl) : impl_(std::move(impl)) {}\n+\n+  std::shared_ptr<FutureImpl> impl_;\n+\n+  friend class FutureWaiter;\n+  friend struct detail::ContinueFuture;\n+};\n+\n+template <typename T>\n+class ARROW_MUST_USE_TYPE Future : public FutureBase<T> {\n+ public:\n+  using ValueType = T;\n+  using SyncType = Result<T>;\n\nReview comment:\n       `SyncType` is the synchronous analogue of the future.  For `Future<T>` it is `Result<T>` and for `Future<>` it is `Status`.\r\n   \r\n   Any code that needs to convert from asynchronous to synchronous and does not know the type of `T` will need to rely on this.  It's currently used in `arrow::internal::RunSynchronously`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T05:30:41.116+0000",
                    "updated": "2021-05-13T05:30:41.116+0000",
                    "started": "2021-05-13T05:30:41.115+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595884",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/595885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r631577351\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -322,56 +341,98 @@ class ARROW_MUST_USE_TYPE Future {\n     return impl_->Wait(seconds);\n   }\n \n-  // Producer API\n+ protected:\n+  void InitializeFromResult(Result<ValueType> res) {\n+    if (ARROW_PREDICT_TRUE(res.ok())) {\n+      impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+    } else {\n+      impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+    }\n+    SetResult(std::move(res));\n+  }\n \n-  /// \\brief Producer API: mark Future finished\n-  ///\n-  /// The Future's result is set to `res`.\n-  void MarkFinished(Result<ValueType> res) { DoMarkFinished(std::move(res)); }\n+  void Initialize() { impl_ = FutureImpl::Make(); }\n \n-  /// \\brief Mark a Future<> completed with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  void MarkFinished(Status s = Status::OK()) {\n-    return DoMarkFinished(E::ToResult(std::move(s)));\n+  Result<ValueType>* GetResult() const {\n+    return static_cast<Result<ValueType>*>(impl_->result_.get());\n   }\n \n-  /// \\brief Producer API: instantiate a valid Future\n-  ///\n-  /// The Future's state is initialized with PENDING.  If you are creating a future with\n-  /// this method you must ensure that future is eventually completed (with success or\n-  /// failure).  Creating a future, returning it, and never completing the future can lead\n-  /// to memory leaks (for example, see Loop).\n-  static Future Make() {\n-    Future fut;\n-    fut.impl_ = FutureImpl::Make();\n-    return fut;\n+  void SetResult(Result<ValueType> res) {\n+    impl_->result_ = {new Result<ValueType>(std::move(res)),\n+                      [](void* p) { delete static_cast<Result<ValueType>*>(p); }};\n   }\n \n-  /// \\brief Producer API: instantiate a finished Future\n-  static Future MakeFinished(Result<ValueType> res) {\n-    Future fut;\n-    if (ARROW_PREDICT_TRUE(res.ok())) {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::SUCCESS);\n+  void DoMarkFinished(Result<ValueType> res) {\n+    SetResult(std::move(res));\n+\n+    if (ARROW_PREDICT_TRUE(GetResult()->ok())) {\n+      impl_->MarkFinished();\n     } else {\n-      fut.impl_ = FutureImpl::MakeFinished(FutureState::FAILURE);\n+      impl_->MarkFailed();\n     }\n-    fut.SetResult(std::move(res));\n-    return fut;\n   }\n \n-  /// \\brief Make a finished Future<> with the provided Status.\n-  template <typename E = ValueType, typename = typename std::enable_if<\n-                                        std::is_same<E, detail::Empty>::value>::type>\n-  static Future<> MakeFinished(Status s = Status::OK()) {\n-    return MakeFinished(E::ToResult(std::move(s)));\n+  void CheckValid() const {\n+#ifndef NDEBUG\n+    if (!is_valid()) {\n+      Status::Invalid(\"Invalid Future (default-initialized?)\").Abort();\n+    }\n+#endif\n+  }\n+\n+  explicit FutureBase(std::shared_ptr<FutureImpl> impl) : impl_(std::move(impl)) {}\n+\n+  std::shared_ptr<FutureImpl> impl_;\n+\n+  friend class FutureWaiter;\n+  friend struct detail::ContinueFuture;\n+};\n+\n+template <typename T>\n+class ARROW_MUST_USE_TYPE Future : public FutureBase<T> {\n+ public:\n+  using ValueType = T;\n+  using SyncType = Result<T>;\n+  static constexpr bool is_empty = false;\n+\n+  Future() = default;\n+\n+  /// \\brief Returns an rvalue to the result.  This method is potentially unsafe\n+  ///\n+  /// The future is not the unique owner of the result, copies of a future will\n+  /// also point to the same result.  You must make sure that no other copies\n+  /// of the future exist.  Attempts to add callbacks after you move the result\n+  /// will result in undefined behavior.\n+  Result<ValueType>&& MoveResult() {\n+    FutureBase<T>::Wait();\n+    return std::move(*FutureBase<T>::GetResult());\n+  }\n+\n+  /// \\brief Wait for the Future to complete and return its Result (or Status for an empty\n+  /// future)\n+  ///\n+  /// This method is useful for general purpose code converting from async to sync where T\n+  /// is a template parameter and may be empty.\n+  const SyncType& to_sync() const { return FutureBase<T>::result(); }\n\nReview comment:\n       So based on the other comment this will return either `result()` or `status()` depending on `T`.  It's the opposite of the \"result-to-future\" forwarding primitive.  Note: after switching to one class this became a standalone static method `FutureToSync`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T05:31:59.677+0000",
                    "updated": "2021-05-13T05:31:59.677+0000",
                    "started": "2021-05-13T05:31:59.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595885",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/595886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r631578198\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -56,6 +47,47 @@ struct is_future<Future<T>> : std::true_type {};\n template <typename Signature>\n using result_of_t = typename std::result_of<Signature>::type;\n \n+template <typename Source, typename Dest>\n+typename std::enable_if<Source::is_empty>::type Propagate(Source* source, Dest dest) {\n+  struct MarkNextFinished {\n+    void operator()(const Status& status) && { next.MarkFinished(status); }\n+    Dest next;\n+  };\n+  source->AddCallback(MarkNextFinished{std::move(dest)});\n+}\n+\n+template <typename Source, typename Dest, bool SourceEmpty = Source::is_empty,\n+          bool DestEmpty = Dest::is_empty>\n+struct MarkNextFinished {};\n+\n+template <typename Source, typename Dest>\n+struct MarkNextFinished<Source, Dest, true, false> {\n+  void operator()(const Status& status) && { next.MarkFinished(status); }\n\nReview comment:\n       Correct.  I've removed this method.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T05:34:46.955+0000",
                    "updated": "2021-05-13T05:34:46.955+0000",
                    "started": "2021-05-13T05:34:46.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595886",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/596209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r631921595\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -56,6 +47,47 @@ struct is_future<Future<T>> : std::true_type {};\n template <typename Signature>\n using result_of_t = typename std::result_of<Signature>::type;\n \n+template <typename Source, typename Dest>\n+typename std::enable_if<Source::is_empty>::type Propagate(Source* source, Dest dest) {\n\nReview comment:\n       No.  I have removed it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T16:01:37.228+0000",
                    "updated": "2021-05-13T16:01:37.228+0000",
                    "started": "2021-05-13T16:01:37.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596209",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/596210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r631921805\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -78,28 +110,32 @@ struct ContinueFuture {\n   template <typename ContinueFunc, typename... Args,\n             typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n             typename NextFuture = ForReturn<ContinueResult>>\n-  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n-                          !is_future<ContinueResult>::value>::type\n+  typename std::enable_if<\n+      !std::is_void<ContinueResult>::value && !is_future<ContinueResult>::value &&\n+      (!NextFuture::is_empty || std::is_same<ContinueResult, Status>::value)>::type\n\nReview comment:\n       I added some comments helping to explain how each are different.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T16:01:50.547+0000",
                    "updated": "2021-05-13T16:01:50.547+0000",
                    "started": "2021-05-13T16:01:50.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596210",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/596216",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#discussion_r631925048\n\n\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -78,28 +110,32 @@ struct ContinueFuture {\n   template <typename ContinueFunc, typename... Args,\n             typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n             typename NextFuture = ForReturn<ContinueResult>>\n-  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n-                          !is_future<ContinueResult>::value>::type\n+  typename std::enable_if<\n+      !std::is_void<ContinueResult>::value && !is_future<ContinueResult>::value &&\n+      (!NextFuture::is_empty || std::is_same<ContinueResult, Status>::value)>::type\n   operator()(NextFuture next, ContinueFunc&& f, Args&&... a) const {\n     next.MarkFinished(std::forward<ContinueFunc>(f)(std::forward<Args>(a)...));\n   }\n \n+  template <typename ContinueFunc, typename... Args,\n+            typename ContinueResult = result_of_t<ContinueFunc && (Args && ...)>,\n+            typename NextFuture = ForReturn<ContinueResult>>\n+  typename std::enable_if<!std::is_void<ContinueResult>::value &&\n+                          !is_future<ContinueResult>::value && NextFuture::is_empty &&\n+                          !std::is_same<ContinueResult, Status>::value>::type\n+  operator()(NextFuture next, ContinueFunc&& f, Args&&... a) const {\n+    next.MarkFinished(std::forward<ContinueFunc>(f)(std::forward<Args>(a)...).status());\n\nReview comment:\n       That could maybe collapse two of these cases.  Although that middle overload is a partial function specialization which I don't think is allowed.  I'm not sure it ends up being any simpler.  I think this was more necessary with the two classes approach.\n\n##########\nFile path: cpp/src/arrow/util/future.h\n##########\n@@ -691,34 +876,41 @@ struct Continue {\n   }\n };\n \n-template <typename T = detail::Empty>\n+template <typename T = internal::Empty>\n util::optional<T> Break(T break_value = {}) {\n   return util::optional<T>{std::move(break_value)};\n }\n \n-template <typename T = detail::Empty>\n+template <typename T = internal::Empty>\n using ControlFlow = util::optional<T>;\n \n+template <typename T>\n+void ForwardControlResult(const Result<ControlFlow<T>>& result, Future<T> sink) {\n+  sink.MarkFinished(**result);\n+}\n+template <>\n+inline void ForwardControlResult(const Result<ControlFlow<>>& result, Future<> sink) {\n+  sink.MarkFinished();\n\nReview comment:\n       This has gone away.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T16:06:40.944+0000",
                    "updated": "2021-05-13T16:06:40.944+0000",
                    "started": "2021-05-13T16:06:40.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596216",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/596225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#issuecomment-840670844\n\n\n   I've cleaned up now and, assuming CI passes, this is ready for another round of review.  Thanks for all the feedback so far.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T16:19:47.924+0000",
                    "updated": "2021-05-13T16:19:47.924+0000",
                    "started": "2021-05-13T16:19:47.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596225",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/596391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205#issuecomment-840876262\n\n\n   Ok, @bkietz 's tricks **almost** worked.  Turns out some older MSVC compilers can get confused when figuring out overloads based only on the return value (https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/39152166/job/ewlnjonukpbaiaet)...\r\n   \r\n   ```\r\n   ..\\src\\arrow/util/future.h(603): note: could be 'std::enable_if<false,ForReturnImpl<Return>::type>::type arrow::Future<std::shared_ptr<arrow::RecordBatch>>::Then<_Ty,arrow::Future<std::shared_ptr<arrow::RecordBatch>>::Then::<lambda_0aa43ac6ba74e671a09c4f431b6e6fbf>,ForReturnImp\r\n   ```\r\n   ^-- MSVC is considering the overload even though the return type is `std::enable_if<false,ForReturnImpl<Return>::type>::type`\r\n   \r\n   So I went ahead and just made a dummy method arg which appears to have satisfied Windows (MinGW failures are unrelated I believe).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T22:42:36.238+0000",
                    "updated": "2021-05-13T22:42:36.238+0000",
                    "started": "2021-05-13T22:42:36.238+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596391",
                    "issueId": "13365912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/worklog/597679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #10205:\nURL: https://github.com/apache/arrow/pull/10205\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-17T14:19:51.500+0000",
                    "updated": "2021-05-17T14:19:51.500+0000",
                    "started": "2021-05-17T14:19:51.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "597679",
                    "issueId": "13365912"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@649d79cf[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c7334b1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29414ba2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@c323487[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46cb544e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@8f5594d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b4a1faa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@36419048[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a34dbea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@8a9d0d0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73e53920[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@491c24c4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon May 17 14:19:47 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-05-17T14:19:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12004/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-17T18:46:22.000+0000",
        "updated": "2021-05-17T18:09:17.000+0000",
        "timeoriginalestimate": null,
        "description": "When I add a callback (using {{AddCallback}} or {{Then}}) to a {{Future<T>}}, I would like the callback to take a {{Status}} rather than a {{Result<detail::Empty>}}.\r\n\r\nI managed to get this done for {{AddCallback}}, but {{Then}} is another pile of complication due to template hackery.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Result<detail::Empty> is annoying",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/comment/17303654",
                    "id": "17303654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "In case you want to be amused: even empty types can take space:\r\nhttps://en.cppreference.com/w/cpp/language/attributes/no_unique_address\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-17T18:50:33.360+0000",
                    "updated": "2021-03-17T18:50:33.360+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/comment/17303678",
                    "id": "17303678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "If you are interested, here is what I started doing:\r\nhttps://gist.github.com/pitrou/6c4aa0994eeb4c5b93a49fbe979c7928",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-17T19:18:46.681+0000",
                    "updated": "2021-03-17T19:18:46.681+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13365912/comment/17346196",
                    "id": "17346196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10205\n[https://github.com/apache/arrow/pull/10205]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-17T14:19:47.394+0000",
                    "updated": "2021-05-17T14:19:47.394+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0owls:",
        "customfield_12314139": null
    }
}