{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13412635",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635",
    "key": "ARROW-14772",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/8",
            "id": "8",
            "description": "The described issue is not actually a problem - it is as designed.",
            "name": "Not A Problem"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "scanner"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350712",
                "id": "12350712",
                "description": "",
                "name": "6.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2021-11-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12626860",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12626860",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13236209",
                    "key": "ARROW-5436",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13236209",
                    "fields": {
                        "summary": "[Python] expose filters argument in parquet.read_table",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337837",
                "id": "12337837",
                "name": "Parquet"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
            "name": "vadik_mironov",
            "key": "JIRAUSER280463",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Vadim Mironov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
            "name": "vadik_mironov",
            "key": "JIRAUSER280463",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Vadim Mironov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14772/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@78edd2a6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1beec48b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14a1847a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7906c0f9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fa81491[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@56e01b5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d74d736[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@52bacd69[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d895733[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@189f909e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@236939dc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@273c695d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Aug 27 14:41:45 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-20T09:13:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14772/watchers",
            "watchCount": 5,
            "isWatching": true
        },
        "created": "2021-11-18T21:12:26.000+0000",
        "updated": "2022-08-27T14:41:45.000+0000",
        "timeoriginalestimate": null,
        "description": "While experimenting with the partitioned dataset persistence in parquet, I stumbled upon an interesting feature (or bug?) where after restoring only a certain partition and applying groupby I suddenly get all the filtered rows in the dataframe.\u00a0\r\n\r\nFollowing code demonstrates the issue:\r\n{code:java}\r\nimport numpy as np\r\nimport os\r\nimport pandas as pd \u00a0# 1.3.4\r\nimport pyarrow as pa \u00a0# 6.0.1\r\nimport random\r\nimport shutil\r\nimport string\r\nimport tempfile\r\n\r\nfrom datetime import datetime, timedelta\r\n\r\nif __name__ == '__main__':\r\n\u00a0 \u00a0 # 1. generate random data frame\r\n\u00a0 \u00a0 day_count = 5\r\n\u00a0 \u00a0 data_length = 10\r\n\r\n\u00a0 \u00a0 numpy_random_gen = np.random.default_rng()\r\n\u00a0 \u00a0 label_choices = [''.join(random.choices(string.ascii_uppercase + string.digits, k=8)) for _ in range(5)]\r\n\u00a0 \u00a0 partial_dfs = []\r\n\r\n\u00a0 \u00a0 start_date = datetime.today().date() - timedelta(days=day_count)\r\n\u00a0 \u00a0 for date in (start_date + timedelta(n) for n in range(day_count)):\r\n\u00a0 \u00a0 \u00a0 \u00a0 date_array = pd.to_datetime(np.full(data_length, date)).date\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 label_array = np.full(data_length, [random.choice(label_choices) for _ in range(data_length)])\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 value_array = numpy_random_gen.integers(low=1, high=500, size=data_length)\r\n\r\n\u00a0 \u00a0 \u00a0 \u00a0 partial_dfs.append(pd.DataFrame(data={'date': date_array, 'label': label_array, 'value': value_array}))\r\n\r\n\u00a0 \u00a0 df = pd.concat(partial_dfs, ignore_index=True)\r\n\u00a0 \u00a0 print(f\"Unique dates before restore:\\n{df.drop_duplicates(subset='date')['date']}\")\r\n\r\n\u00a0 \u00a0 # 2. persist data frame partitioned by date\r\n\u00a0 \u00a0 dataset_dir = tempfile.mkdtemp()\r\n\r\n\u00a0 \u00a0 df.to_parquet(path=dataset_dir, engine='pyarrow', partition_cols=['date', 'label'])\r\n\r\n\u00a0 \u00a0 # 3. restore from parquet partitioned dataset\r\n\u00a0 \u00a0 restored_df = pd.read_parquet(dataset_dir, engine='pyarrow', filters=[\r\n\u00a0 \u00a0 \u00a0 \u00a0 ('date', '=', str(start_date))], use_legacy_dataset=False)\r\n\u00a0 \u00a0 print(f\"Unique dates after restore:\\n{restored_df.drop_duplicates(subset='date')['date']}\")\r\n\r\n\u00a0 \u00a0 group_by_df = restored_df.groupby(by=['date', 'label'])['value'].sum().reset_index(name='val_sum')\r\n\u00a0 \u00a0 print(group_by_df)\r\n\r\n\u00a0 \u00a0 shutil.rmtree(dataset_dir) {code}\r\nIt correctly reports five unique dates upon random df generation and correctly reports only one after reading back from parquet:\r\n{noformat}\r\nUnique dates after restore:\r\n0 \u00a0 \u00a02021-11-13\r\nName: date, dtype: category\r\nCategories (5, object): ['2021-11-13', '2021-11-14', '2021-11-15', '2021-11-16', '2021-11-17']{noformat}\r\nAlbeit it adds that there are 5 categories. When subsequently I perform a groupby, all dates that were filtered out at read miracolously appear:\r\n{code:java}\r\n\u00a0 \u00a0 group_by_df = restored_df.groupby(by=['date', 'label'])['value'].sum().reset_index(name='val_sum')\r\n\u00a0 \u00a0 print(group_by_df)\r\n{code}\r\nWith the following output:\r\n{noformat}\r\n  \u00a0 \u00a0 \u00a0 \u00a0 date \u00a0 \u00a0 label \u00a0val_sum\r\n0 \u00a0 2021-11-13 \u00a004LOXJCH \u00a0 \u00a0 \u00a0494\r\n1 \u00a0 2021-11-13 \u00a04QOZ321D \u00a0 \u00a0 \u00a0819\r\n2 \u00a0 2021-11-13 \u00a0GG6YO5FS \u00a0 \u00a0 \u00a0394\r\n3 \u00a0 2021-11-13 \u00a0J7ZD3LDS \u00a0 \u00a0 \u00a0203\r\n4 \u00a0 2021-11-13 \u00a0TFVIXE6L \u00a0 \u00a0 \u00a0164\r\n5 \u00a0 2021-11-14 \u00a004LOXJCH \u00a0 \u00a0 \u00a0 \u00a00\r\n6 \u00a0 2021-11-14 \u00a04QOZ321D \u00a0 \u00a0 \u00a0 \u00a00\r\n7 \u00a0 2021-11-14 \u00a0GG6YO5FS \u00a0 \u00a0 \u00a0 \u00a00\r\n8 \u00a0 2021-11-14 \u00a0J7ZD3LDS \u00a0 \u00a0 \u00a0 \u00a00\r\n9 \u00a0 2021-11-14 \u00a0TFVIXE6L \u00a0 \u00a0 \u00a0 \u00a00\r\n10 \u00a02021-11-15 \u00a004LOXJCH \u00a0 \u00a0 \u00a0 \u00a00\r\n11 \u00a02021-11-15 \u00a04QOZ321D \u00a0 \u00a0 \u00a0 \u00a00\r\n12 \u00a02021-11-15 \u00a0GG6YO5FS \u00a0 \u00a0 \u00a0 \u00a00\r\n13 \u00a02021-11-15 \u00a0J7ZD3LDS \u00a0 \u00a0 \u00a0 \u00a00\r\n14 \u00a02021-11-15 \u00a0TFVIXE6L \u00a0 \u00a0 \u00a0 \u00a00\r\n15 \u00a02021-11-16 \u00a004LOXJCH \u00a0 \u00a0 \u00a0 \u00a00\r\n16 \u00a02021-11-16 \u00a04QOZ321D \u00a0 \u00a0 \u00a0 \u00a00\r\n17 \u00a02021-11-16 \u00a0GG6YO5FS \u00a0 \u00a0 \u00a0 \u00a00\r\n18 \u00a02021-11-16 \u00a0J7ZD3LDS \u00a0 \u00a0 \u00a0 \u00a00\r\n19 \u00a02021-11-16 \u00a0TFVIXE6L \u00a0 \u00a0 \u00a0 \u00a00\r\n20 \u00a02021-11-17 \u00a004LOXJCH \u00a0 \u00a0 \u00a0 \u00a00\r\n21 \u00a02021-11-17 \u00a04QOZ321D \u00a0 \u00a0 \u00a0 \u00a00\r\n22 \u00a02021-11-17 \u00a0GG6YO5FS \u00a0 \u00a0 \u00a0 \u00a00\r\n23 \u00a02021-11-17 \u00a0J7ZD3LDS \u00a0 \u00a0 \u00a0 \u00a00\r\n24 \u00a02021-11-17 \u00a0TFVIXE6L \u00a0 \u00a0 \u00a0 \u00a00{noformat}\r\nPerhaps I am doing something incorrectly within read_parquet call or something, but my expectation would be for filtered data just be gone after the read operation.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] unexpected content after groupby on a dataframe restored from partitioned parquet with filters",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17446169",
                    "id": "17446169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I'm not really sure what the correct behavior should be.\u00a0 Maybe [~cpcloud] [~icook] have an opinion?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-11-18T22:18:09.190+0000",
                    "updated": "2021-11-18T22:18:09.190+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17446240",
                    "id": "17446240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~jorisvandenbossche]\u00a0do you know what might explain this behavior?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-11-19T01:58:06.687+0000",
                    "updated": "2021-11-19T01:58:06.687+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17446622",
                    "id": "17446622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Oh, I can probably explain it.\u00a0 The partition column is returned as a dictionary encoded string (in pandas this is converted to a category).\u00a0 There is only one value but the \"dictionary\" part has all the possibilities.\u00a0 You can see this above here:\r\n{noformat}\r\nUnique dates after restore:\r\n0 \u00a0 \u00a02021-11-13\r\nName: date, dtype: category\r\nCategories (5, object): ['2021-11-13', '2021-11-14', '2021-11-15', '2021-11-16', '2021-11-17'] {noformat}\r\nEven though there is only one unique value in the array (2021-11-13) there are five different values in the dictionary part (five categories in pandas).\r\n\r\nSo my question isn't \"how is this happening\" but \"what behavior do we want?\"\u00a0 For futher, example, note that we get the exact same result if we read in the entire dataset and do the filtering in Pandas.\r\n{noformat}\r\nrestored_df = pd.read_parquet(dataset_dir, engine='pyarrow', use_legacy_dataset=False)\r\nrestored_df[restored_df['date'] == str(start_date)]{noformat}\r\nI can see arguments for both sides.\u00a0 On the one hand there is a bunch of unexpected and often useless info.\u00a0 On the other hand there may be rare cases where it would be handy to know what the full range of possible values was.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-11-19T18:28:13.786+0000",
                    "updated": "2021-11-19T18:28:13.786+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17446679",
                    "id": "17446679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
                        "name": "vadik_mironov",
                        "key": "JIRAUSER280463",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Vadim Mironov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks a lot Weston. I see. It restores the date column as a categorical type with all possible values in the dictionary. On your point regarding API expectations - it's a fair point. Although as you can see from my initial confusion, I expected the filter parameter to act as a true filter and have no other data in the data frame other than what I specified. I am not sure whether this would be an expectation of majority of API users for partitioned datasets, but if so then perhaps the behavior where all categories are restored should be available only via a dedicated argument.\r\n\r\nIn terms of practicality of current behaviour, it would be a bit cumbersome to pepper the code working with these filtered dataframes with all sorts of safeguards to catch zeroes or NaNs against the rows that were supposed to be filtered out. Besides, if I would to use multiple filters with 'greather than' or 'in' operators, post processing of the dataframe would be complex and I essentially would need to redo the filter rule logic.\r\n\r\nAnother point which is rather minor compared to the considerations outlined above is the conversion of data column to categorical type upon recovery. Is my assumption correct that this would be true for any column that was used to partition dataset? If so I am not sure what practical implications it may have beyond the need to format dates to strings, but it may also be a source of few surprizes.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
                        "name": "vadik_mironov",
                        "key": "JIRAUSER280463",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Vadim Mironov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-11-19T22:11:53.454+0000",
                    "updated": "2021-11-19T22:11:53.454+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17446720",
                    "id": "17446720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "It seems that pandas [groupby function](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html) has an \"observed\" parameter:\r\n\r\n{noformat}\r\nobserved : bool, default False\r\n\r\nThis only applies if any of the groupers are Categoricals.\r\nIf True: only show observed values for categorical groupers.\r\nIf False: show all values for categorical groupers.\r\n{noformat}\r\n\r\nDoes this help?\r\n\r\n{quote}Another point which is rather minor compared to the considerations outlined above is the conversion of data column to categorical type upon recovery. Is my assumption correct that this would be true for any column that was used to partition dataset?\r\n{quote}\r\n\r\nYes and no (note, panda's \"categorical\" is the same as arrow's \"dictionary\" so when I say \"dictionary\" here I am referring to the same concept).  Pyarrow exposes this as an option in the newer dataset API and it actually defaults to *not* dictionary encoded so you have to go out of your way a little to get this behavior.\r\n\r\nHowever, the legacy dataset API (passing a directory name to pq.read_table) always sets \"infer_dictionary\" to true.  This is the API that is used by the pandas' pyarrow engine.  So, as a workaround, you could do something like...\r\n\r\n{noformat}\r\nimport pyarrow.dataset as ds\r\nrestored_df = ds.dataset(dataset_dir, partitioning='hive').to_table(filter=ds.field('date') == str(start_date)).to_pandas()\r\n{noformat}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-11-19T23:27:48.004+0000",
                    "updated": "2021-11-19T23:30:57.813+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17446771",
                    "id": "17446771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
                        "name": "vadik_mironov",
                        "key": "JIRAUSER280463",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Vadim Mironov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I see. Thanks Weston and I confirm that either of the two ways gives exactly what I would expect to see as a result of a groupby. Certainly, the suggestion to use a\u00a0 pyarrow.dataset API directly is the most appealing one as I am quite hesitant to retrofit all the pandas groupby calls with observed=True.\u00a0\r\n\r\nI will close this issue, but perhaps one last question - I could not find in pandas git tracker any open issues for dataset pyarrow API transition. Would you happen to know if this is something on their 1.4 roadmap or maybe it would be worth for me go there and raise something on the back of this curious find?\r\n\r\nDefinitely want to leave some trace for others who might stumble on the same issue and it feels like it belongs more to pandas tracker if anything.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
                        "name": "vadik_mironov",
                        "key": "JIRAUSER280463",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Vadim Mironov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-11-20T09:12:49.765+0000",
                    "updated": "2021-11-20T09:12:49.765+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17447399",
                    "id": "17447399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Sorry for the late response here, this was indeed a classical case of \"all _known_ categories versus all _present_ categories\" confusion in pandas, for which the {{observed}} keyword was added, as mentioned above. \r\n\r\n> I could not find in pandas git tracker any open issues for dataset pyarrow API transition. Would you happen to know if this is something on their 1.4 roadmap or maybe it would be worth for me go there and raise something on the back of this curious find?\r\n\r\nPandas is actually already using the datasets code under the hood, but just through the {{pq.read_table}} interface instead of through the {{ds.dataset}} interface (since the default for {{pq.read_table}} is to already use datasets under the hood). So I am not sure it is necessary for pandas to explicitly transition to the datasets interface ({{pq.read_table}} has some useful boilerplate around {{ds.datasets}} that otherwise would need to be replicated in pandas).  \r\nBut it would certainly be useful to consider the few behavioural differences, such as the dictionary encoding for the partition columns.\r\n\r\nFor example, something pandas could add (or pyarrow in {{pq.read_table}}) is a keyword to disable reading partition columns as dictionary/categorical data type. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-11-22T13:28:48.173+0000",
                    "updated": "2021-11-22T13:28:48.173+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17447456",
                    "id": "17447456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
                        "name": "vadik_mironov",
                        "key": "JIRAUSER280463",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Vadim Mironov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks Joris. Perhaps my understanding is wrong, but with the state as you describe it by enabling partitioning I suddenly get a change in behavior of pandas groupby and then has to go through all the models doing this type of aggregation to add the additional parameter. That is if I know that the issue is caused by partitioning columns turning into categoricals. Sound to me a bit too harsh for the users unless the observed parameter is widely used by everyone (which is unlikely as it would be enabled by default then).\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vadik_mironov",
                        "name": "vadik_mironov",
                        "key": "JIRAUSER280463",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Vadim Mironov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-11-22T14:57:54.266+0000",
                    "updated": "2021-11-22T14:57:54.266+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13412635/comment/17585824",
                    "id": "17585824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "Transitioning issue from Resolved to Closed to based on resolution field value.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-08-27T14:41:45.116+0000",
                    "updated": "2022-08-27T14:41:45.116+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z0wvrk:",
        "customfield_12314139": null
    }
}