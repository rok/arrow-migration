{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13120798",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798",
    "key": "ARROW-1861",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1861/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@292b731b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@198c68b6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28acbe8a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@529faaf1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@517413f1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@66451abd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b50b011[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4b74fa8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@752d2f54[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3b7353be[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@158dbcf9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2b797bef[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 01 18:27:20 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-02-01T18:11:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1861/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-11-26T17:52:48.000+0000",
        "updated": "2018-02-01T18:28:11.000+0000",
        "timeoriginalestimate": null,
        "description": "We need to start writing more microbenchmarks as we go to prevent unintentional performance regressions (this has been a constant thorn in my side for years: http://wesmckinney.com/blog/introducing-vbench-new-code-performance-analysis-and-monitoring-tool/). ",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Fix up ASV setup, add developer instructions for writing new benchmarks and running benchmark suite locally",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16346791",
                    "id": "16346791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Is there a point in testing so many different sizes in the benchmarks? Intuitively I would test two different sizes (\"small\" and \"large\" e.g. 10 and 1e6). More sounds overkill",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-31T13:17:22.978+0000",
                    "updated": "2018-01-31T13:17:22.978+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16346856",
                    "id": "16346856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Also the \"peakmem\" tests don't look terribly useful as they measure the weight of the benchmark harness (e.g. the pure Python list we're trying to convert) rather than the overhead of the benchmarked operation.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-31T13:49:07.587+0000",
                    "updated": "2018-01-31T13:49:07.587+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16346964",
                    "id": "16346964",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "As for the ASV setup itself, the main reason it doesn't work is that ASV expects to be able to install the benchmarked Python package from the git repo's base directory: see [https://github.com/airspeed-velocity/asv/issues/547]\r\n\r\nOne possible workaround would be to add a {{setup.py}} in our base directory that simply redirects to the {{python}} subdirectory's {{setup.py}}. What do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-31T15:01:02.371+0000",
                    "updated": "2018-01-31T15:01:02.371+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16347012",
                    "id": "16347012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Looks like a simple {{setup.py}} is not enough, as ASV then calls {{pip}} in that parent directory, which fails to create files at place expected by pip.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-31T15:29:23.912+0000",
                    "updated": "2018-01-31T15:29:23.912+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16347044",
                    "id": "16347044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Hm, I wonder how hard it would be to patch ASV, that seems pretty inflexible",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-31T15:49:56.763+0000",
                    "updated": "2018-01-31T15:49:56.763+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16347049",
                    "id": "16347049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I wouldn't read too much into the existing benchmarks; they have not been well attended-to, so we can make changes as seems reasonable",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-31T15:50:51.114+0000",
                    "updated": "2018-01-31T15:50:51.114+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16347055",
                    "id": "16347055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Yeah, we can probably patch ASV for this.\r\npip installation is also broken by ARROW-2067 currently.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-31T16:02:04.238+0000",
                    "updated": "2018-01-31T16:02:04.238+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16347204",
                    "id": "16347204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "(note: a PR for ASV is submitted at [https://github.com/airspeed-velocity/asv/pull/611] )",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-31T17:12:59.399+0000",
                    "updated": "2018-01-31T17:12:59.399+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348641",
                    "id": "16348641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1543: [WIP] ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543\n \n \n   This PR focusses on:\r\n   * ASV setup fixes\r\n   * splitting the benchmark file\r\n   * improving the array from/to pylist conversion benchmarks\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T14:23:09.425+0000",
                    "updated": "2018-02-01T14:23:09.425+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348872",
                    "id": "16348872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#issuecomment-362324773\n \n \n   Now ready for review.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T16:40:15.960+0000",
                    "updated": "2018-02-01T16:40:15.960+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348918",
                    "id": "16348918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#discussion_r165421521\n \n \n\n ##########\n File path: python/benchmarks/convert_builtins.py\n ##########\n @@ -0,0 +1,291 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from functools import partial\n+import itertools\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+from . import common\n+\n+\n+DEFAULT_NONE_PROB = 0.3\n+\n+\n+class BuiltinsGenerator(object):\n+\n+    def __init__(self, seed=42):\n+        self.rnd = np.random.RandomState(seed)\n+\n+    def sprinkle_nones(self, lst, prob):\n+        \"\"\"\n+        Sprinkle None entries in list *lst* with likelihood *prob*.\n+        \"\"\"\n+        for i, p in enumerate(self.rnd.random_sample(size=len(lst))):\n+            if p < prob:\n+                lst[i] = None\n+\n+    def generate_int_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python ints with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        data = list(range(n))\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_float_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python floats with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        # Make sure we get Python floats, not np.float64\n+        data = list(map(float, self.rnd.uniform(0.0, 1.0, n)))\n+        assert len(data) == n\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_bool_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python bools with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        # Make sure we get Python bools, not np.bool_\n+        data = [bool(x >= 0.5) for x in self.rnd.uniform(0.0, 1.0, n)]\n+        assert len(data) == n\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def _generate_varying_sequences(self, random_factory, n, min_size, max_size, none_prob):\n+        \"\"\"\n+        Generate a list of *n* sequences of varying size between *min_size*\n+        and *max_size*, with *none_prob* probability of an entry being None.\n+        The base material for each sequence is obtained by calling\n+        `random_factory(<some size>)`\n+        \"\"\"\n+        base_size = 10000\n+        base = random_factory(base_size + max_size)\n+        data = []\n+        for i in range(n):\n+            off = self.rnd.randint(base_size)\n+            if min_size == max_size:\n+                size = min_size\n+            else:\n+                size = self.rnd.randint(min_size, max_size + 1)\n+            data.append(base[off:off + size])\n+        self.sprinkle_nones(data, none_prob)\n+        assert len(data) == n\n+        return data\n+\n+    def generate_fixed_binary_list(self, n, size, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a fixed *size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_bytes, n,\n+                                                size, size, none_prob)\n+\n+\n+    def generate_varying_binary_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_bytes, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_ascii_string_list(self, n, min_size, max_size,\n+                                   none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of ASCII strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_ascii, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_unicode_string_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of unicode strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_unicode, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_int_list_list(self, n, min_size, max_size,\n+                               none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of lists of Python ints with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(\n+            partial(self.generate_int_list, none_prob=none_prob),\n+            n, min_size, max_size, none_prob)\n+\n+\n+    def generate_dict_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of dicts with a random size between *min_size* and\n+        *max_size*.\n+        Each dict has the form `{'u': int value, 'v': float value, 'w': bool value}`\n+        \"\"\"\n+        ints = self.generate_int_list(n, none_prob=none_prob)\n+        floats = self.generate_float_list(n, none_prob=none_prob)\n+        bools = self.generate_bool_list(n, none_prob=none_prob)\n+        dicts = []\n+        # Keep half the Nones, omit the other half\n+        keep_nones = itertools.cycle([True, False])\n+        for u, v, w in zip(ints, floats, bools):\n+            d = {}\n+            if u is not None or next(keep_nones):\n+                d['u'] = u\n+            if v is not None or next(keep_nones):\n+                d['v'] = v\n+            if w is not None or next(keep_nones):\n+                d['w'] = w\n+            dicts.append(d)\n+        self.sprinkle_nones(dicts, none_prob)\n+        assert len(dicts) == n\n+        return dicts\n+\n+    def get_type_and_builtins(self, n, type_name):\n+        \"\"\"\n+        Return a `(arrow type, list)` tuple where the arrow type\n+        corresponds to the given logical *type_name*, and the list\n+        is a list of *n* random-generated Python objects compatible\n+        with the arrow type.\n+        \"\"\"\n+        size = None\n+\n+        if type_name in ('bool', 'ascii', 'unicode', 'int64 list', 'struct'):\n+            kind = type_name\n+        elif type_name.startswith(('int', 'uint')):\n+            kind = 'int'\n+        elif type_name.startswith('float'):\n+            kind = 'float'\n+        elif type_name == 'binary':\n+            kind = 'varying binary'\n+        elif type_name.startswith('binary'):\n+            kind = 'fixed binary'\n+            size = int(type_name[6:])\n+            assert size > 0\n+        else:\n+            raise ValueError(\"unrecognized type %r\" % (type_name,))\n+\n+        if kind in ('int', 'float'):\n+            ty = getattr(pa, type_name)()\n+        elif kind == 'bool':\n+            ty = pa.bool_()\n+        elif kind == 'fixed binary':\n+            ty = pa.binary(size)\n+        elif kind == 'varying binary':\n+            ty = pa.binary()\n+        elif kind in ('ascii', 'unicode'):\n+            ty = pa.string()\n+        elif kind == 'int64 list':\n+            ty = pa.list_(pa.int64())\n+        elif kind == 'struct':\n+            ty = pa.struct([pa.field('u', pa.int64()),\n+                            pa.field('v', pa.float64()),\n+                            pa.field('w', pa.bool_())])\n+\n+        factories = {\n+            'int': self.generate_int_list,\n+            'float': self.generate_float_list,\n+            'bool': self.generate_bool_list,\n+            'fixed binary': partial(self.generate_fixed_binary_list,\n+                                    size=size),\n+            'varying binary': partial(self.generate_varying_binary_list,\n+                                      min_size=3, max_size=40),\n+            'ascii': partial(self.generate_ascii_string_list,\n+                             min_size=3, max_size=40),\n+            'unicode': partial(self.generate_unicode_string_list,\n+                               min_size=3, max_size=40),\n+            'int64 list': partial(self.generate_int_list_list,\n+                                  min_size=0, max_size=20),\n+            'struct': self.generate_dict_list,\n+            }\n \n Review comment:\n   Can you dedent this 4 spaces.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:08:40.168+0000",
                    "updated": "2018-02-01T17:08:40.168+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348919",
                    "id": "16348919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#discussion_r165422869\n \n \n\n ##########\n File path: python/asv.conf.json\n ##########\n @@ -28,12 +28,19 @@\n \n     // The URL or local path of the source code repository for the\n     // project being benchmarked\n-    \"repo\": \"https://github.com/apache/arrow/\",\n+    //\"repo\": \"https://github.com/apache/arrow/\",\n \n Review comment:\n   Probably ok to blow away the commented out things\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:08:40.337+0000",
                    "updated": "2018-02-01T17:08:40.337+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348920",
                    "id": "16348920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#discussion_r165422542\n \n \n\n ##########\n File path: python/benchmarks/array_ops.py\n ##########\n @@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+class ScalarAccess(object):\n+    n = 10 ** 5\n+\n+    def setUp(self):\n+        self._array = pa.array(list(range(self.n)), type=pa.int64())\n+\n+    def time_getitem(self):\n+        for i in range(self.n):\n+            self._array[i]\n+\n+    def time_getitem_as_py(self):\n+        for i in range(self.n):\n+            self._array[i].as_py()\n \n Review comment:\n   I wonder if this should loop over the array with elements already indexed so that we don't have to compute the difference between `time_getitem` and `time_getitem_as_py` to see the overhead of `as_py`. Something like\r\n   \r\n   ```python\r\n   for el in self._array2:\r\n       el.as_py()\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:08:40.423+0000",
                    "updated": "2018-02-01T17:08:40.423+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348923",
                    "id": "16348923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#discussion_r165424398\n \n \n\n ##########\n File path: python/benchmarks/array_ops.py\n ##########\n @@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+class ScalarAccess(object):\n+    n = 10 ** 5\n+\n+    def setUp(self):\n+        self._array = pa.array(list(range(self.n)), type=pa.int64())\n+\n+    def time_getitem(self):\n+        for i in range(self.n):\n+            self._array[i]\n+\n+    def time_getitem_as_py(self):\n+        for i in range(self.n):\n+            self._array[i].as_py()\n \n Review comment:\n   Then we'll be benchmarking array iteration ;-) Instead I think I'll store the list of indexed values in the setup() method.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:12:07.886+0000",
                    "updated": "2018-02-01T17:12:07.886+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348924",
                    "id": "16348924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#discussion_r165424423\n \n \n\n ##########\n File path: python/benchmarks/convert_builtins.py\n ##########\n @@ -0,0 +1,291 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from functools import partial\n+import itertools\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+from . import common\n+\n+\n+DEFAULT_NONE_PROB = 0.3\n+\n+\n+class BuiltinsGenerator(object):\n+\n+    def __init__(self, seed=42):\n+        self.rnd = np.random.RandomState(seed)\n+\n+    def sprinkle_nones(self, lst, prob):\n+        \"\"\"\n+        Sprinkle None entries in list *lst* with likelihood *prob*.\n+        \"\"\"\n+        for i, p in enumerate(self.rnd.random_sample(size=len(lst))):\n+            if p < prob:\n+                lst[i] = None\n+\n+    def generate_int_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python ints with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        data = list(range(n))\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_float_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python floats with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        # Make sure we get Python floats, not np.float64\n+        data = list(map(float, self.rnd.uniform(0.0, 1.0, n)))\n+        assert len(data) == n\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_bool_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python bools with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        # Make sure we get Python bools, not np.bool_\n+        data = [bool(x >= 0.5) for x in self.rnd.uniform(0.0, 1.0, n)]\n+        assert len(data) == n\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def _generate_varying_sequences(self, random_factory, n, min_size, max_size, none_prob):\n+        \"\"\"\n+        Generate a list of *n* sequences of varying size between *min_size*\n+        and *max_size*, with *none_prob* probability of an entry being None.\n+        The base material for each sequence is obtained by calling\n+        `random_factory(<some size>)`\n+        \"\"\"\n+        base_size = 10000\n+        base = random_factory(base_size + max_size)\n+        data = []\n+        for i in range(n):\n+            off = self.rnd.randint(base_size)\n+            if min_size == max_size:\n+                size = min_size\n+            else:\n+                size = self.rnd.randint(min_size, max_size + 1)\n+            data.append(base[off:off + size])\n+        self.sprinkle_nones(data, none_prob)\n+        assert len(data) == n\n+        return data\n+\n+    def generate_fixed_binary_list(self, n, size, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a fixed *size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_bytes, n,\n+                                                size, size, none_prob)\n+\n+\n+    def generate_varying_binary_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_bytes, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_ascii_string_list(self, n, min_size, max_size,\n+                                   none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of ASCII strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_ascii, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_unicode_string_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of unicode strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_unicode, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_int_list_list(self, n, min_size, max_size,\n+                               none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of lists of Python ints with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(\n+            partial(self.generate_int_list, none_prob=none_prob),\n+            n, min_size, max_size, none_prob)\n+\n+\n+    def generate_dict_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of dicts with a random size between *min_size* and\n+        *max_size*.\n+        Each dict has the form `{'u': int value, 'v': float value, 'w': bool value}`\n+        \"\"\"\n+        ints = self.generate_int_list(n, none_prob=none_prob)\n+        floats = self.generate_float_list(n, none_prob=none_prob)\n+        bools = self.generate_bool_list(n, none_prob=none_prob)\n+        dicts = []\n+        # Keep half the Nones, omit the other half\n+        keep_nones = itertools.cycle([True, False])\n+        for u, v, w in zip(ints, floats, bools):\n+            d = {}\n+            if u is not None or next(keep_nones):\n+                d['u'] = u\n+            if v is not None or next(keep_nones):\n+                d['v'] = v\n+            if w is not None or next(keep_nones):\n+                d['w'] = w\n+            dicts.append(d)\n+        self.sprinkle_nones(dicts, none_prob)\n+        assert len(dicts) == n\n+        return dicts\n+\n+    def get_type_and_builtins(self, n, type_name):\n+        \"\"\"\n+        Return a `(arrow type, list)` tuple where the arrow type\n+        corresponds to the given logical *type_name*, and the list\n+        is a list of *n* random-generated Python objects compatible\n+        with the arrow type.\n+        \"\"\"\n+        size = None\n+\n+        if type_name in ('bool', 'ascii', 'unicode', 'int64 list', 'struct'):\n+            kind = type_name\n+        elif type_name.startswith(('int', 'uint')):\n+            kind = 'int'\n+        elif type_name.startswith('float'):\n+            kind = 'float'\n+        elif type_name == 'binary':\n+            kind = 'varying binary'\n+        elif type_name.startswith('binary'):\n+            kind = 'fixed binary'\n+            size = int(type_name[6:])\n+            assert size > 0\n+        else:\n+            raise ValueError(\"unrecognized type %r\" % (type_name,))\n+\n+        if kind in ('int', 'float'):\n+            ty = getattr(pa, type_name)()\n+        elif kind == 'bool':\n+            ty = pa.bool_()\n+        elif kind == 'fixed binary':\n+            ty = pa.binary(size)\n+        elif kind == 'varying binary':\n+            ty = pa.binary()\n+        elif kind in ('ascii', 'unicode'):\n+            ty = pa.string()\n+        elif kind == 'int64 list':\n+            ty = pa.list_(pa.int64())\n+        elif kind == 'struct':\n+            ty = pa.struct([pa.field('u', pa.int64()),\n+                            pa.field('v', pa.float64()),\n+                            pa.field('w', pa.bool_())])\n+\n+        factories = {\n+            'int': self.generate_int_list,\n+            'float': self.generate_float_list,\n+            'bool': self.generate_bool_list,\n+            'fixed binary': partial(self.generate_fixed_binary_list,\n+                                    size=size),\n+            'varying binary': partial(self.generate_varying_binary_list,\n+                                      min_size=3, max_size=40),\n+            'ascii': partial(self.generate_ascii_string_list,\n+                             min_size=3, max_size=40),\n+            'unicode': partial(self.generate_unicode_string_list,\n+                               min_size=3, max_size=40),\n+            'int64 list': partial(self.generate_int_list_list,\n+                                  min_size=0, max_size=20),\n+            'struct': self.generate_dict_list,\n+            }\n \n Review comment:\n   Okk.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:12:12.663+0000",
                    "updated": "2018-02-01T17:12:12.663+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348927",
                    "id": "16348927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#discussion_r165424791\n \n \n\n ##########\n File path: python/benchmarks/array_ops.py\n ##########\n @@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+class ScalarAccess(object):\n+    n = 10 ** 5\n+\n+    def setUp(self):\n+        self._array = pa.array(list(range(self.n)), type=pa.int64())\n+\n+    def time_getitem(self):\n+        for i in range(self.n):\n+            self._array[i]\n+\n+    def time_getitem_as_py(self):\n+        for i in range(self.n):\n+            self._array[i].as_py()\n \n Review comment:\n   Fair enough.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:13:31.078+0000",
                    "updated": "2018-02-01T17:13:31.078+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348938",
                    "id": "16348938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#discussion_r165425785\n \n \n\n ##########\n File path: python/benchmarks/array_ops.py\n ##########\n @@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+class ScalarAccess(object):\n+    n = 10 ** 5\n+\n+    def setUp(self):\n+        self._array = pa.array(list(range(self.n)), type=pa.int64())\n+\n+    def time_getitem(self):\n+        for i in range(self.n):\n+            self._array[i]\n+\n+    def time_getitem_as_py(self):\n+        for i in range(self.n):\n+            self._array[i].as_py()\n \n Review comment:\n   Note we may want to benchmark `as_py()` on different types.\r\n   (though the inner machinery may already be exercised as part of `to_pylist`?)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:17:09.897+0000",
                    "updated": "2018-02-01T17:17:09.897+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16348946",
                    "id": "16348946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543#issuecomment-362338257\n \n \n   By the way, do you have any ideas for further benchmarks?\r\n   For example, is it useful to benchmark creation of a `pa.Array` from a Numpy array?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T17:19:46.947+0000",
                    "updated": "2018-02-01T17:19:46.947+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16349028",
                    "id": "16349028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1543: ARROW-1861: [Python] Rework benchmark suite [skip ci]\nURL: https://github.com/apache/arrow/pull/1543\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/python/README-benchmarks.md b/python/README-benchmarks.md\nnew file mode 100644\nindex 000000000..6389665b0\n--- /dev/null\n+++ b/python/README-benchmarks.md\n@@ -0,0 +1,54 @@\n+<!---\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing,\n+  software distributed under the License is distributed on an\n+  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  KIND, either express or implied.  See the License for the\n+  specific language governing permissions and limitations\n+  under the License.\n+-->\n+\n+# Benchmarks\n+\n+The `pyarrow` package comes with a suite of benchmarks meant to\n+run with [ASV](https://asv.readthedocs.io).  You'll need to install\n+the `asv` package first (`pip install asv`).\n+\n+## Running with your local tree\n+\n+When developing, the simplest and fastest way to run the benchmark suite\n+against your local changes is to use the `asv dev` command.  This will\n+use your current Python interpreter and environment.\n+\n+## Running with arbitrary revisions\n+\n+ASV allows to store results and generate graphs of the benchmarks over\n+the project's evolution.  Doing this requires a bit more massaging\n+currently.\n+\n+First you have to install our ASV fork:\n+\n+```shell\n+pip install git+https://github.com/pitrou/asv.git@issue-547-specify-project-subdir\n+```\n+\n+<!--- TODO remove the above once https://github.com/airspeed-velocity/asv/pull/611 is merged -->\n+\n+Then you need to set up a few environment variables:\n+\n+```shell\n+export SETUPTOOLS_SCM_PRETEND_VERSION=0.0.1\n+export PYARROW_BUNDLE_ARROW_CPP=1\n+```\n+\n+Now you should be ready to run `asv run` or whatever other command\n+suits your needs.\ndiff --git a/python/asv.conf.json b/python/asv.conf.json\nindex 2a1dd42ab..150153c80 100644\n--- a/python/asv.conf.json\n+++ b/python/asv.conf.json\n@@ -28,12 +28,17 @@\n \n     // The URL or local path of the source code repository for the\n     // project being benchmarked\n-    \"repo\": \"https://github.com/apache/arrow/\",\n+    \"repo\": \"..\",\n+\n+    // The Python project's subdirectory in your repo.  If missing or\n+    // the empty string, the project is assumed to be located at the root\n+    // of the repository.\n+    \"repo_subdir\": \"python\",\n \n     // List of branches to benchmark. If not provided, defaults to \"master\"\n-    // (for git) or \"tip\" (for mercurial).\n+    // (for git) or \"default\" (for mercurial).\n     // \"branches\": [\"master\"], // for git\n-    // \"branches\": [\"tip\"],    // for mercurial\n+    // \"branches\": [\"default\"],    // for mercurial\n \n     // The DVCS being used.  If not set, it will be automatically\n     // determined from \"repo\" by looking at the protocol in the URL\n@@ -46,22 +51,72 @@\n     // If missing or the empty string, the tool will be automatically\n     // determined by looking for tools on the PATH environment\n     // variable.\n-    \"environment_type\": \"virtualenv\",\n+    \"environment_type\": \"conda\",\n+    \"conda_channels\": [\"conda-forge\", \"defaults\"],\n \n     // the base URL to show a commit for the project.\n     \"show_commit_url\": \"https://github.com/apache/arrow/commit/\",\n \n     // The Pythons you'd like to test against.  If not provided, defaults\n     // to the current version of Python used to run `asv`.\n-    // \"pythons\": [\"2.7\", \"3.3\"],\n+    \"pythons\": [\"3.6\"],\n \n     // The matrix of dependencies to test.  Each key is the name of a\n     // package (in PyPI) and the values are version numbers.  An empty\n-    // list indicates to just test against the default (latest)\n-    // version.\n+    // list or empty string indicates to just test against the default\n+    // (latest) version. null indicates that the package is to not be\n+    // installed. If the package to be tested is only available from\n+    // PyPi, and the 'environment_type' is conda, then you can preface\n+    // the package name by 'pip+', and the package will be installed via\n+    // pip (with all the conda available packages installed first,\n+    // followed by the pip installed packages).\n+    //\n     // \"matrix\": {\n-    //     \"numpy\": [\"1.6\", \"1.7\"]\n+    //     \"numpy\": [\"1.6\", \"1.7\"],\n+    //     \"six\": [\"\", null],        // test with and without six installed\n+    //     \"pip+emcee\": [\"\"],   // emcee is only available for install with pip.\n     // },\n+    \"matrix\": {\n+        \"boost-cpp\": [],\n+        \"cmake\": [],\n+        \"cython\": [],\n+        \"numpy\": [\"1.14\"],\n+        \"pandas\": [\"0.22\"],\n+        \"pip+setuptools_scm\": [],\n+    },\n+\n+    // Combinations of libraries/python versions can be excluded/included\n+    // from the set to test. Each entry is a dictionary containing additional\n+    // key-value pairs to include/exclude.\n+    //\n+    // An exclude entry excludes entries where all values match. The\n+    // values are regexps that should match the whole string.\n+    //\n+    // An include entry adds an environment. Only the packages listed\n+    // are installed. The 'python' key is required. The exclude rules\n+    // do not apply to includes.\n+    //\n+    // In addition to package names, the following keys are available:\n+    //\n+    // - python\n+    //     Python version, as in the *pythons* variable above.\n+    // - environment_type\n+    //     Environment type, as above.\n+    // - sys_platform\n+    //     Platform, as in sys.platform. Possible values for the common\n+    //     cases: 'linux2', 'win32', 'cygwin', 'darwin'.\n+    //\n+    // \"exclude\": [\n+    //     {\"python\": \"3.2\", \"sys_platform\": \"win32\"}, // skip py3.2 on windows\n+    //     {\"environment_type\": \"conda\", \"six\": null}, // don't run without six on conda\n+    // ],\n+    //\n+    // \"include\": [\n+    //     // additional env for python2.7\n+    //     {\"python\": \"2.7\", \"numpy\": \"1.8\"},\n+    //     // additional env if run on windows+conda\n+    //     {\"platform\": \"win32\", \"environment_type\": \"conda\", \"python\": \"2.7\", \"libpython\": \"\"},\n+    // ],\n \n     // The directory (relative to the current directory) that benchmarks are\n     // stored in.  If not provided, defaults to \"benchmarks\"\n@@ -71,7 +126,6 @@\n     // environments in.  If not provided, defaults to \"env\"\n     \"env_dir\": \".asv/env\",\n \n-\n     // The directory (relative to the current directory) that raw benchmark\n     // results are stored in.  If not provided, defaults to \"results\".\n     \"results_dir\": \".asv/results\",\n@@ -86,5 +140,29 @@\n     // `asv` will cache wheels of the recent builds in each\n     // environment, making them faster to install next time.  This is\n     // number of builds to keep, per environment.\n-    // \"wheel_cache_size\": 0\n+    // \"wheel_cache_size\": 0,\n+\n+    // The commits after which the regression search in `asv publish`\n+    // should start looking for regressions. Dictionary whose keys are\n+    // regexps matching to benchmark names, and values corresponding to\n+    // the commit (exclusive) after which to start looking for\n+    // regressions.  The default is to start from the first commit\n+    // with results. If the commit is `null`, regression detection is\n+    // skipped for the matching benchmark.\n+    //\n+    // \"regressions_first_commits\": {\n+    //    \"some_benchmark\": \"352cdf\",  // Consider regressions only after this commit\n+    //    \"another_benchmark\": null,   // Skip regression detection altogether\n+    // }\n+\n+    // The thresholds for relative change in results, after which `asv\n+    // publish` starts reporting regressions. Dictionary of the same\n+    // form as in ``regressions_first_commits``, with values\n+    // indicating the thresholds.  If multiple entries match, the\n+    // maximum is taken. If no entry matches, the default is 5%.\n+    //\n+    // \"regressions_thresholds\": {\n+    //    \"some_benchmark\": 0.01,     // Threshold of 1%\n+    //    \"another_benchmark\": 0.5,   // Threshold of 50%\n+    // }\n }\ndiff --git a/python/benchmarks/array_ops.py b/python/benchmarks/array_ops.py\nnew file mode 100644\nindex 000000000..70ee7f1e1\n--- /dev/null\n+++ b/python/benchmarks/array_ops.py\n@@ -0,0 +1,35 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+\n+class ScalarAccess(object):\n+    n = 10 ** 5\n+\n+    def setUp(self):\n+        self._array = pa.array(list(range(self.n)), type=pa.int64())\n+        self._array_items = list(self._array)\n+\n+    def time_getitem(self):\n+        for i in range(self.n):\n+            self._array[i]\n+\n+    def time_as_py(self):\n+        for item in self._array_items:\n+            item.as_py()\ndiff --git a/python/benchmarks/common.py b/python/benchmarks/common.py\nnew file mode 100644\nindex 000000000..7dd42fde5\n--- /dev/null\n+++ b/python/benchmarks/common.py\n@@ -0,0 +1,84 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import codecs\n+import os\n+import sys\n+import unicodedata\n+\n+import numpy as np\n+\n+\n+def _multiplicate_sequence(base, target_size):\n+    q, r = divmod(target_size, len(base))\n+    return [base] * q + [base[:r]]\n+\n+\n+def get_random_bytes(n):\n+    rnd = np.random.RandomState(42)\n+    # Computing a huge random bytestring can be costly, so we get at most\n+    # 100KB and duplicate the result as needed\n+    base_size = 100003\n+    q, r = divmod(n, base_size)\n+    if q == 0:\n+        result = rnd.bytes(r)\n+    else:\n+        base = rnd.bytes(base_size)\n+        result = b''.join(_multiplicate_sequence(base, n))\n+    assert len(result) == n\n+    return result\n+\n+\n+def get_random_ascii(n):\n+    arr = np.frombuffer(get_random_bytes(n), dtype=np.int8) & 0x7f\n+    result, _ = codecs.ascii_decode(arr)\n+    assert isinstance(result, str)\n+    assert len(result) == n\n+    return result\n+\n+\n+def _random_unicode_letters(n):\n+    \"\"\"\n+    Generate a string of random unicode letters (slow).\n+    \"\"\"\n+    def _get_more_candidates():\n+        return rnd.randint(0, sys.maxunicode, size=n).tolist()\n+\n+    rnd = np.random.RandomState(42)\n+    out = []\n+    candidates = []\n+\n+    while len(out) < n:\n+        if not candidates:\n+            candidates = _get_more_candidates()\n+        ch = chr(candidates.pop())\n+        # XXX Do we actually care that the code points are valid?\n+        if unicodedata.category(ch)[0] == 'L':\n+            out.append(ch)\n+    return out\n+\n+\n+_1024_random_unicode_letters = _random_unicode_letters(1024)\n+\n+\n+def get_random_unicode(n):\n+    indices = np.frombuffer(get_random_bytes(n * 2), dtype=np.int16) & 1023\n+    unicode_arr = np.array(_1024_random_unicode_letters)[indices]\n+\n+    result = ''.join(unicode_arr.tolist())\n+    assert len(result) == n, (len(result), len(unicode_arr))\n+    return result\ndiff --git a/python/benchmarks/convert_builtins.py b/python/benchmarks/convert_builtins.py\nnew file mode 100644\nindex 000000000..92b2b850f\n--- /dev/null\n+++ b/python/benchmarks/convert_builtins.py\n@@ -0,0 +1,295 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+from functools import partial\n+import itertools\n+\n+import numpy as np\n+import pyarrow as pa\n+\n+from . import common\n+\n+\n+DEFAULT_NONE_PROB = 0.3\n+\n+\n+# TODO:\n+# - test dates and times\n+# - test decimals\n+\n+class BuiltinsGenerator(object):\n+\n+    def __init__(self, seed=42):\n+        self.rnd = np.random.RandomState(seed)\n+\n+    def sprinkle_nones(self, lst, prob):\n+        \"\"\"\n+        Sprinkle None entries in list *lst* with likelihood *prob*.\n+        \"\"\"\n+        for i, p in enumerate(self.rnd.random_sample(size=len(lst))):\n+            if p < prob:\n+                lst[i] = None\n+\n+    def generate_int_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python ints with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        data = list(range(n))\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_float_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python floats with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        # Make sure we get Python floats, not np.float64\n+        data = list(map(float, self.rnd.uniform(0.0, 1.0, n)))\n+        assert len(data) == n\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def generate_bool_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of Python bools with *none_prob* probability of\n+        an entry being None.\n+        \"\"\"\n+        # Make sure we get Python bools, not np.bool_\n+        data = [bool(x >= 0.5) for x in self.rnd.uniform(0.0, 1.0, n)]\n+        assert len(data) == n\n+        self.sprinkle_nones(data, none_prob)\n+        return data\n+\n+    def _generate_varying_sequences(self, random_factory, n, min_size, max_size, none_prob):\n+        \"\"\"\n+        Generate a list of *n* sequences of varying size between *min_size*\n+        and *max_size*, with *none_prob* probability of an entry being None.\n+        The base material for each sequence is obtained by calling\n+        `random_factory(<some size>)`\n+        \"\"\"\n+        base_size = 10000\n+        base = random_factory(base_size + max_size)\n+        data = []\n+        for i in range(n):\n+            off = self.rnd.randint(base_size)\n+            if min_size == max_size:\n+                size = min_size\n+            else:\n+                size = self.rnd.randint(min_size, max_size + 1)\n+            data.append(base[off:off + size])\n+        self.sprinkle_nones(data, none_prob)\n+        assert len(data) == n\n+        return data\n+\n+    def generate_fixed_binary_list(self, n, size, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a fixed *size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_bytes, n,\n+                                                size, size, none_prob)\n+\n+\n+    def generate_varying_binary_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of bytestrings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_bytes, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_ascii_string_list(self, n, min_size, max_size,\n+                                   none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of ASCII strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_ascii, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_unicode_string_list(self, n, min_size, max_size,\n+                                     none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of unicode strings with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(common.get_random_unicode, n,\n+                                                min_size, max_size, none_prob)\n+\n+\n+    def generate_int_list_list(self, n, min_size, max_size,\n+                               none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of lists of Python ints with a random size between\n+        *min_size* and *max_size*.\n+        \"\"\"\n+        return self._generate_varying_sequences(\n+            partial(self.generate_int_list, none_prob=none_prob),\n+            n, min_size, max_size, none_prob)\n+\n+\n+    def generate_dict_list(self, n, none_prob=DEFAULT_NONE_PROB):\n+        \"\"\"\n+        Generate a list of dicts with a random size between *min_size* and\n+        *max_size*.\n+        Each dict has the form `{'u': int value, 'v': float value, 'w': bool value}`\n+        \"\"\"\n+        ints = self.generate_int_list(n, none_prob=none_prob)\n+        floats = self.generate_float_list(n, none_prob=none_prob)\n+        bools = self.generate_bool_list(n, none_prob=none_prob)\n+        dicts = []\n+        # Keep half the Nones, omit the other half\n+        keep_nones = itertools.cycle([True, False])\n+        for u, v, w in zip(ints, floats, bools):\n+            d = {}\n+            if u is not None or next(keep_nones):\n+                d['u'] = u\n+            if v is not None or next(keep_nones):\n+                d['v'] = v\n+            if w is not None or next(keep_nones):\n+                d['w'] = w\n+            dicts.append(d)\n+        self.sprinkle_nones(dicts, none_prob)\n+        assert len(dicts) == n\n+        return dicts\n+\n+    def get_type_and_builtins(self, n, type_name):\n+        \"\"\"\n+        Return a `(arrow type, list)` tuple where the arrow type\n+        corresponds to the given logical *type_name*, and the list\n+        is a list of *n* random-generated Python objects compatible\n+        with the arrow type.\n+        \"\"\"\n+        size = None\n+\n+        if type_name in ('bool', 'ascii', 'unicode', 'int64 list', 'struct'):\n+            kind = type_name\n+        elif type_name.startswith(('int', 'uint')):\n+            kind = 'int'\n+        elif type_name.startswith('float'):\n+            kind = 'float'\n+        elif type_name == 'binary':\n+            kind = 'varying binary'\n+        elif type_name.startswith('binary'):\n+            kind = 'fixed binary'\n+            size = int(type_name[6:])\n+            assert size > 0\n+        else:\n+            raise ValueError(\"unrecognized type %r\" % (type_name,))\n+\n+        if kind in ('int', 'float'):\n+            ty = getattr(pa, type_name)()\n+        elif kind == 'bool':\n+            ty = pa.bool_()\n+        elif kind == 'fixed binary':\n+            ty = pa.binary(size)\n+        elif kind == 'varying binary':\n+            ty = pa.binary()\n+        elif kind in ('ascii', 'unicode'):\n+            ty = pa.string()\n+        elif kind == 'int64 list':\n+            ty = pa.list_(pa.int64())\n+        elif kind == 'struct':\n+            ty = pa.struct([pa.field('u', pa.int64()),\n+                            pa.field('v', pa.float64()),\n+                            pa.field('w', pa.bool_())])\n+\n+        factories = {\n+            'int': self.generate_int_list,\n+            'float': self.generate_float_list,\n+            'bool': self.generate_bool_list,\n+            'fixed binary': partial(self.generate_fixed_binary_list,\n+                                    size=size),\n+            'varying binary': partial(self.generate_varying_binary_list,\n+                                      min_size=3, max_size=40),\n+            'ascii': partial(self.generate_ascii_string_list,\n+                             min_size=3, max_size=40),\n+            'unicode': partial(self.generate_unicode_string_list,\n+                               min_size=3, max_size=40),\n+            'int64 list': partial(self.generate_int_list_list,\n+                                  min_size=0, max_size=20),\n+            'struct': self.generate_dict_list,\n+        }\n+        data = factories[kind](n)\n+        return ty, data\n+\n+\n+class ConvertPyListToArray(object):\n+    \"\"\"\n+    Benchmark pa.array(list of values, type=...)\n+    \"\"\"\n+    size = 10 ** 5\n+    types = ('int32', 'uint32', 'int64', 'uint64',\n+             'float32', 'float64', 'bool',\n+             'binary', 'binary10', 'ascii', 'unicode',\n+             'int64 list', 'struct')\n+\n+    param_names = ['type']\n+    params = [types]\n+\n+    def setup(self, type_name):\n+        gen = BuiltinsGenerator()\n+        self.ty, self.data = gen.get_type_and_builtins(self.size, type_name)\n+\n+    def time_convert(self, *args):\n+        pa.array(self.data, type=self.ty)\n+\n+\n+class InferPyListToArray(object):\n+    \"\"\"\n+    Benchmark pa.array(list of values) with type inference\n+    \"\"\"\n+    size = 10 ** 5\n+    types = ('int64', 'float64', 'bool', 'binary', 'ascii', 'unicode',\n+             'int64 list')\n+    # TODO add 'struct' when supported\n+\n+    param_names = ['type']\n+    params = [types]\n+\n+    def setup(self, type_name):\n+        gen = BuiltinsGenerator()\n+        self.ty, self.data = gen.get_type_and_builtins(self.size, type_name)\n+\n+    def time_infer(self, *args):\n+        arr = pa.array(self.data)\n+        assert arr.type == self.ty\n+\n+\n+class ConvertArrayToPyList(object):\n+    \"\"\"\n+    Benchmark pa.array.to_pylist()\n+    \"\"\"\n+    size = 10 ** 5\n+    types = ('int32', 'uint32', 'int64', 'uint64',\n+             'float32', 'float64', 'bool',\n+             'binary', 'binary10', 'ascii', 'unicode',\n+             'int64 list', 'struct')\n+\n+    param_names = ['type']\n+    params = [types]\n+\n+    def setup(self, type_name):\n+        gen = BuiltinsGenerator()\n+        self.ty, self.data = gen.get_type_and_builtins(self.size, type_name)\n+        self.arr = pa.array(self.data, type=self.ty)\n+\n+    def time_convert(self, *args):\n+        self.arr.to_pylist()\ndiff --git a/python/benchmarks/array.py b/python/benchmarks/convert_pandas.py\nsimilarity index 59%\nrename from python/benchmarks/array.py\nrename to python/benchmarks/convert_pandas.py\nindex e22c0f7fc..c4a7a59cb 100644\n--- a/python/benchmarks/array.py\n+++ b/python/benchmarks/convert_pandas.py\n@@ -17,21 +17,7 @@\n \n import numpy as np\n import pandas as pd\n-import pyarrow as A\n-\n-\n-class PyListConversions(object):\n-    param_names = ('size',)\n-    params = (1, 10 ** 5, 10 ** 6, 10 ** 7)\n-\n-    def setup(self, n):\n-        self.data = list(range(n))\n-\n-    def time_from_pylist(self, n):\n-        A.from_pylist(self.data)\n-\n-    def peakmem_from_pylist(self, n):\n-        A.from_pylist(self.data)\n+import pyarrow as pa\n \n \n class PandasConversionsBase(object):\n@@ -46,37 +32,19 @@ def setup(self, n, dtype):\n \n class PandasConversionsToArrow(PandasConversionsBase):\n     param_names = ('size', 'dtype')\n-    params = ((1, 10 ** 5, 10 ** 6, 10 ** 7), ('int64', 'float64', 'float64_nans', 'str'))\n+    params = ((10, 10 ** 6), ('int64', 'float64', 'float64_nans', 'str'))\n \n     def time_from_series(self, n, dtype):\n-        A.Table.from_pandas(self.data)\n-\n-    def peakmem_from_series(self, n, dtype):\n-        A.Table.from_pandas(self.data)\n+        pa.Table.from_pandas(self.data)\n \n \n class PandasConversionsFromArrow(PandasConversionsBase):\n     param_names = ('size', 'dtype')\n-    params = ((1, 10 ** 5, 10 ** 6, 10 ** 7), ('int64', 'float64', 'float64_nans', 'str'))\n+    params = ((10, 10 ** 6), ('int64', 'float64', 'float64_nans', 'str'))\n \n     def setup(self, n, dtype):\n         super(PandasConversionsFromArrow, self).setup(n, dtype)\n-        self.arrow_data = A.Table.from_pandas(self.data)\n+        self.arrow_data = pa.Table.from_pandas(self.data)\n \n     def time_to_series(self, n, dtype):\n         self.arrow_data.to_pandas()\n-\n-    def peakmem_to_series(self, n, dtype):\n-        self.arrow_data.to_pandas()\n-\n-\n-class ScalarAccess(object):\n-    param_names = ('size',)\n-    params = (1, 10 ** 5, 10 ** 6, 10 ** 7)\n-\n-    def setUp(self, n):\n-        self._array = A.from_pylist(list(range(n)))\n-\n-    def time_as_py(self, n):\n-        for i in range(n):\n-            self._array[i].as_py()\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T18:11:40.542+0000",
                    "updated": "2018-02-01T18:11:40.542+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16349029",
                    "id": "16349029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1543\n[https://github.com/apache/arrow/pull/1543]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-02-01T18:11:45.959+0000",
                    "updated": "2018-02-01T18:11:45.959+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120798/comment/16349055",
                    "id": "16349055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "We should probably open a new issue for further benchmark suite improvements (add more benchmarks to cover more important behaviour).\r\n\r\nAlso perhaps another issue for automating benchmark runs and publishing benchmark results somewhere on the WWW?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-02-01T18:27:20.164+0000",
                    "updated": "2018-02-01T18:28:11.517+0000"
                }
            ],
            "maxResults": 21,
            "total": 21,
            "startAt": 0
        },
        "customfield_12311820": "0|i3n72n:",
        "customfield_12314139": null
    }
}