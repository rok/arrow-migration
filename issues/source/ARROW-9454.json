{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13316625",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625",
    "key": "ARROW-9454",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12593540",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12593540",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13317057",
                    "key": "ARROW-9499",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13317057",
                    "fields": {
                        "summary": "[C++] AdaptiveIntBuilder::AppendNull does not increment the null count",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9454/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/458484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn opened a new pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-14T06:58:10.963+0000",
                    "updated": "2020-07-14T06:58:10.963+0000",
                    "started": "2020-07-14T06:58:10.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "458484",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/458499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#issuecomment-658017492\n\n\n   https://issues.apache.org/jira/browse/ARROW-9454\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-14T07:25:14.751+0000",
                    "updated": "2020-07-14T07:25:14.751+0000",
                    "started": "2020-07-14T07:25:14.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "458499",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/460819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#discussion_r456917750\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -4182,6 +4182,32 @@ gint64 garrow_string_dictionary_array_builder_get_dictionary_length(GArrowString\n   return arrow_builder->dictionary_length();\n }\n \n+/**\n+ * garrow_string_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowStringDictionaryArrayBuilder.\n+ * @out_delta: (transfer full): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_string_dictionary_array_builder_finish_delta(GArrowStringDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n\nReview comment:\n       @kou I don't know how to handle this `out_delta` in the test code written in Ruby.  Could you tell me the way to handle it?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-19T14:49:18.342+0000",
                    "updated": "2020-07-19T14:49:18.342+0000",
                    "started": "2020-07-19T14:49:18.342+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "460819",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/460845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#discussion_r456960478\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -4182,6 +4182,32 @@ gint64 garrow_string_dictionary_array_builder_get_dictionary_length(GArrowString\n   return arrow_builder->dictionary_length();\n }\n \n+/**\n+ * garrow_string_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowStringDictionaryArrayBuilder.\n+ * @out_delta: (transfer full): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_string_dictionary_array_builder_finish_delta(GArrowStringDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n\nReview comment:\n       See d3395c9.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-19T21:59:14.666+0000",
                    "updated": "2020-07-19T21:59:14.666+0000",
                    "started": "2020-07-19T21:59:14.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "460845",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/461818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#discussion_r458473605\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -4182,6 +4182,32 @@ gint64 garrow_string_dictionary_array_builder_get_dictionary_length(GArrowString\n   return arrow_builder->dictionary_length();\n }\n \n+/**\n+ * garrow_string_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowStringDictionaryArrayBuilder.\n+ * @out_delta: (transfer full): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_string_dictionary_array_builder_finish_delta(GArrowStringDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n\nReview comment:\n       Thanks!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-22T01:03:03.906+0000",
                    "updated": "2020-07-22T01:03:03.906+0000",
                    "started": "2020-07-22T01:03:03.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461818",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/461827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#discussion_r458488424\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n\nReview comment:\n       ```suggestion\r\n    * Since: 2.0.0\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/array-builder.h\n##########\n@@ -44,6 +44,24 @@ GArrowType garrow_array_builder_get_value_type(GArrowArrayBuilder *builder);\n GArrowArray        *garrow_array_builder_finish   (GArrowArrayBuilder *builder,\n                                                    GError **error);\n \n+GARROW_AVAILABLE_IN_1_0\n\nReview comment:\n       ```suggestion\r\n   GARROW_AVAILABLE_IN_2_0\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n\nReview comment:\n       ```suggestion\r\n     auto data = g_bytes_get_data(value, &size);\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n+  auto status = arrow_builder->Append(static_cast<const uint8_t *>(data),\n+                                      size);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-value-bytes]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_binary_array:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @array: A #GArrowBinaryArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_binary_array(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                           GArrowBinaryArray *array,\n+                                                           GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto arrow_array = garrow_array_get_raw<arrow::BinaryType>(GARROW_ARRAY(array));\n+\n+  auto status = arrow_builder->AppendArray(*arrow_array);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-binary-array]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_indices:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @values: (array length=values_length): The array of indices.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   0 or 1 that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is 1, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append dictionary indices directly without modifying the internal memo.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_indices(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                      const gint64 *values,\n+                                                      gint64 values_length,\n+                                                      const gboolean *is_valids,\n+                                                      gint64 is_valids_length,\n+                                                      GError **error)\n+{\n+  static const char *context = \"[binary-dictionary-array-builder][append-indices]\";\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto append_function = [&arrow_builder](\n+      const gint64 *values,\n+      gint64 values_length,\n+      const uint8_t *valid_bytes) -> arrow::Status {\n+    return arrow_builder->AppendIndices(values, values_length, valid_bytes);\n+  };\n+  return garrow_array_builder_append_values(values, values_length, is_valids,\n+                                            is_valids_length, error, context,\n+                                            append_function);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_get_dictionary_length:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Returns: A number of entries in the dicitonary.\n+ *\n+ * Since: 1.0\n+ */\n+gint64 garrow_binary_dictionary_array_builder_get_dictionary_length(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  return arrow_builder->dictionary_length();\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @out_delta: (out): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_binary_dictionary_array_builder_finish_delta(GArrowBinaryDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n+                                                    GError **error)\n+{\n+  static const char *context = \"[binary-dictionary-array-builder][finish-delta]\";\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  std::shared_ptr<arrow::Array> arrow_indices, arrow_delta;\n+  auto status = arrow_builder->FinishDelta(&arrow_indices, &arrow_delta);\n+  if (!garrow_error_check(error, status, context)) {\n+    return NULL;\n+  }\n+  *out_delta = garrow_array_new_raw(&arrow_delta);\n+  return garrow_array_new_raw(&arrow_indices);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_insert_memo_values:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @array: A #GArrowBinaryArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_insert_memo_values(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GArrowBinaryArray *values,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto arrow_array = garrow_array_get_raw<arrow::BinaryType>(GARROW_ARRAY(values));\n+\n+  auto status = arrow_builder->InsertMemoValues(*arrow_array);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][insert-memo-values]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_reset_full:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ */\n\nReview comment:\n       ```suggestion\r\n    *\r\n    * Reset and also clear accumulated dictionary values in memo table.\r\n    */\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n\nReview comment:\n       Can we use `garrow_array_builder_new()` here?\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n+  auto status = arrow_builder->Append(static_cast<const uint8_t *>(data),\n+                                      size);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-value-bytes]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_binary_array:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @array: A #GArrowBinaryArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_binary_array(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                           GArrowBinaryArray *array,\n+                                                           GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto arrow_array = garrow_array_get_raw<arrow::BinaryType>(GARROW_ARRAY(array));\n+\n+  auto status = arrow_builder->AppendArray(*arrow_array);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-binary-array]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_indices:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @values: (array length=values_length): The array of indices.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   0 or 1 that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is 1, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append dictionary indices directly without modifying the internal memo.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_indices(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                      const gint64 *values,\n+                                                      gint64 values_length,\n+                                                      const gboolean *is_valids,\n+                                                      gint64 is_valids_length,\n+                                                      GError **error)\n+{\n+  static const char *context = \"[binary-dictionary-array-builder][append-indices]\";\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto append_function = [&arrow_builder](\n+      const gint64 *values,\n+      gint64 values_length,\n+      const uint8_t *valid_bytes) -> arrow::Status {\n+    return arrow_builder->AppendIndices(values, values_length, valid_bytes);\n+  };\n+  return garrow_array_builder_append_values(values, values_length, is_valids,\n+                                            is_valids_length, error, context,\n+                                            append_function);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_get_dictionary_length:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Returns: A number of entries in the dicitonary.\n+ *\n+ * Since: 1.0\n+ */\n+gint64 garrow_binary_dictionary_array_builder_get_dictionary_length(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  return arrow_builder->dictionary_length();\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @out_delta: (out): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_binary_dictionary_array_builder_finish_delta(GArrowBinaryDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n+                                                    GError **error)\n\nReview comment:\n       How about returning indices by output parameter instead of return value?\r\n   Because there are no importance different between indices and delta.\r\n   \r\n   ```suggestion\r\n   gboolean\r\n   garrow_binary_dictionary_array_builder_finish_delta(GArrowBinaryDictionaryArrayBuilder* builder,\r\n                                                       GArrowArray **out_indices,\r\n                                                       GArrowArray **out_delta,\r\n                                                       GError **error)\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n+  auto status = arrow_builder->Append(static_cast<const uint8_t *>(data),\n+                                      size);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-value-bytes]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_binary_array:\n\nReview comment:\n       How about removing `binary_`?\r\n   Because we only accept binary array. (We don't have any other `append_*_array` variants.)\n\n##########\nFile path: c_glib/test/test-dictionary-array-builder.rb\n##########\n@@ -0,0 +1,342 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestDictinaryArrayBuilder < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def setup\n+    @values = [\n+                *%w(foo bar foo),\n+                nil,\n+                *%w(foo baz bar baz baz)\n+              ]\n+  end\n+\n+  sub_test_case(\"BinaryDictionaryArrayBuilder\") do\n+    sub_test_case(\"constructed from empty\") do\n+      def setup\n+        super\n+\n+        @dictionary = %w(foo bar baz)\n+        @dictionary_array = build_binary_array(@dictionary)\n+        @indices = @values.map {|x| x ? @dictionary.index(x) : nil }\n+        @indices_array = build_int8_array(@indices)\n+        @data_type = Arrow::DictionaryDataType.new(@indices_array.value_data_type,\n+                                                   @dictionary_array.value_data_type,\n+                                                   false)\n+        @expected_array = Arrow::DictionaryArray.new(@data_type,\n+                                                     @indices_array,\n+                                                     @dictionary_array)\n+        @builder = Arrow::BinaryDictionaryArrayBuilder.new\n+        @values.each do |value|\n+          if value\n+            @builder.append_value_bytes(value)\n+          else\n+            @builder.append_null\n+          end\n+        end\n+      end\n+\n+      test(\"append_value_bytes\") do\n+        dictionary_array = build_binary_array([*@dictionary, \"qux\"])\n+        indices_array = build_int8_array([*@indices, 3])\n+        expected_array = Arrow::DictionaryArray.new(@data_type,\n+                                                    indices_array,\n+                                                    dictionary_array)\n+\n+        @builder.append_value_bytes(\"qux\")\n+        assert do\n+          expected_array == @builder.finish\n+        end\n\nReview comment:\n       ```suggestion\r\n           assert_equal(expected_array, @builder.finish)\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n+  auto status = arrow_builder->Append(static_cast<const uint8_t *>(data),\n+                                      size);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-value-bytes]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_binary_array:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @array: A #GArrowBinaryArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_binary_array(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                           GArrowBinaryArray *array,\n+                                                           GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto arrow_array = garrow_array_get_raw<arrow::BinaryType>(GARROW_ARRAY(array));\n+\n+  auto status = arrow_builder->AppendArray(*arrow_array);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-binary-array]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_indices:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @values: (array length=values_length): The array of indices.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   0 or 1 that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is 1, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n\nReview comment:\n       ```suggestion\r\n    *   %TRUE or %FALSE that shows whether the Nth value is valid or not. If the\r\n    *   Nth `is_valids` is %TRUE, the Nth `values` is valid value. Otherwise\r\n    *   the Nth value is null value.\r\n   ```\n\n##########\nFile path: c_glib/arrow-glib/basic-array.hpp\n##########\n@@ -35,3 +35,10 @@ garrow_array_new_raw_valist(std::shared_ptr<arrow::Array> *arrow_array,\n                             va_list args);\n std::shared_ptr<arrow::Array>\n garrow_array_get_raw(GArrowArray *array);\n+\n+template <typename DataType>\n+inline std::shared_ptr<typename arrow::TypeTraits<DataType>::ArrayType>\n+garrow_array_get_raw(GArrowArray *array) {\n+  auto arrow_array = garrow_array_get_raw(GARROW_ARRAY(array));\n\nReview comment:\n       ```suggestion\r\n     auto arrow_array = garrow_array_get_raw(array);\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-07-22T02:23:10.404+0000",
                    "updated": "2020-07-22T02:23:10.404+0000",
                    "started": "2020-07-22T02:23:10.404+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "461827",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/465979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#discussion_r464740479\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n+  auto status = arrow_builder->Append(static_cast<const uint8_t *>(data),\n+                                      size);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-value-bytes]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_binary_array:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @array: A #GArrowBinaryArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_binary_array(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                           GArrowBinaryArray *array,\n+                                                           GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto arrow_array = garrow_array_get_raw<arrow::BinaryType>(GARROW_ARRAY(array));\n+\n+  auto status = arrow_builder->AppendArray(*arrow_array);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-binary-array]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_indices:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @values: (array length=values_length): The array of indices.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   0 or 1 that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is 1, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append dictionary indices directly without modifying the internal memo.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_indices(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                      const gint64 *values,\n+                                                      gint64 values_length,\n+                                                      const gboolean *is_valids,\n+                                                      gint64 is_valids_length,\n+                                                      GError **error)\n+{\n+  static const char *context = \"[binary-dictionary-array-builder][append-indices]\";\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto append_function = [&arrow_builder](\n+      const gint64 *values,\n+      gint64 values_length,\n+      const uint8_t *valid_bytes) -> arrow::Status {\n+    return arrow_builder->AppendIndices(values, values_length, valid_bytes);\n+  };\n+  return garrow_array_builder_append_values(values, values_length, is_valids,\n+                                            is_valids_length, error, context,\n+                                            append_function);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_get_dictionary_length:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Returns: A number of entries in the dicitonary.\n+ *\n+ * Since: 1.0\n+ */\n+gint64 garrow_binary_dictionary_array_builder_get_dictionary_length(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  return arrow_builder->dictionary_length();\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @out_delta: (out): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_binary_dictionary_array_builder_finish_delta(GArrowBinaryDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n+                                                    GError **error)\n\nReview comment:\n       @kou This change lets `finish_delta` return a triplet of (boolean, indices, delta).\r\n   Is this return-value change intentional?\r\n   \r\n   See [here](https://github.com/apache/arrow/pull/7747/commits/ceae1fee6928cf3d965d705e55174f23fb583222#diff-f69ee1822872cdd0148e49b5c8949cdbR101) about the effect.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-04T01:05:33.523+0000",
                    "updated": "2020-08-04T01:05:33.523+0000",
                    "started": "2020-08-04T01:05:33.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "465979",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/465984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#discussion_r464746088\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n+  auto status = arrow_builder->Append(static_cast<const uint8_t *>(data),\n+                                      size);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-value-bytes]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_binary_array:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @array: A #GArrowBinaryArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_binary_array(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                           GArrowBinaryArray *array,\n+                                                           GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto arrow_array = garrow_array_get_raw<arrow::BinaryType>(GARROW_ARRAY(array));\n+\n+  auto status = arrow_builder->AppendArray(*arrow_array);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-binary-array]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_indices:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @values: (array length=values_length): The array of indices.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   0 or 1 that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is 1, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append dictionary indices directly without modifying the internal memo.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_indices(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                      const gint64 *values,\n+                                                      gint64 values_length,\n+                                                      const gboolean *is_valids,\n+                                                      gint64 is_valids_length,\n+                                                      GError **error)\n+{\n+  static const char *context = \"[binary-dictionary-array-builder][append-indices]\";\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto append_function = [&arrow_builder](\n+      const gint64 *values,\n+      gint64 values_length,\n+      const uint8_t *valid_bytes) -> arrow::Status {\n+    return arrow_builder->AppendIndices(values, values_length, valid_bytes);\n+  };\n+  return garrow_array_builder_append_values(values, values_length, is_valids,\n+                                            is_valids_length, error, context,\n+                                            append_function);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_get_dictionary_length:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Returns: A number of entries in the dicitonary.\n+ *\n+ * Since: 1.0\n+ */\n+gint64 garrow_binary_dictionary_array_builder_get_dictionary_length(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  return arrow_builder->dictionary_length();\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @out_delta: (out): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_binary_dictionary_array_builder_finish_delta(GArrowBinaryDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n+                                                    GError **error)\n\nReview comment:\n       Yes.\r\n   We can ignore the first boolean in Ruby layer.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-04T01:26:55.814+0000",
                    "updated": "2020-08-04T01:26:55.814+0000",
                    "started": "2020-08-04T01:26:55.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "465984",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/465985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747#discussion_r464747555\n\n\n\n##########\nFile path: c_glib/arrow-glib/array-builder.cpp\n##########\n@@ -3914,6 +4023,466 @@ garrow_time64_array_builder_append_nulls(GArrowTime64ArrayBuilder *builder,\n }\n \n \n+G_DEFINE_TYPE(GArrowBinaryDictionaryArrayBuilder,\n+              garrow_binary_dictionary_array_builder,\n+              GARROW_TYPE_ARRAY_BUILDER)\n+\n+static void\n+garrow_binary_dictionary_array_builder_init(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+}\n+\n+static void\n+garrow_binary_dictionary_array_builder_class_init(GArrowBinaryDictionaryArrayBuilderClass *klass)\n+{\n+}\n+\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_new:\n+ *\n+ * Returns: A newly created #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowBinaryDictionaryArrayBuilder *\n+garrow_binary_dictionary_array_builder_new(void)\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  auto arrow_builder = new arrow::BinaryDictionaryBuilder(memory_pool);\n+  auto builder = garrow_array_builder_new_raw(arrow_builder, GARROW_TYPE_BINARY_DICTIONARY_ARRAY_BUILDER);\n+  return GARROW_BINARY_DICTIONARY_ARRAY_BUILDER(builder);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_null:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_null(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                   GError **error)\n+{\n+  return garrow_array_builder_append_null<arrow::BinaryDictionaryBuilder *>\n+    (GARROW_ARRAY_BUILDER(builder),\n+     error,\n+     \"[binary-dictionary-array-builder][append-null]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_value_bytes:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @value: A binary value.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_value_bytes(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                          GBytes *value,\n+                                                          GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+\n+  gsize size;\n+  gconstpointer data = g_bytes_get_data(value, &size);\n+  auto status = arrow_builder->Append(static_cast<const uint8_t *>(data),\n+                                      size);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-value-bytes]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_binary_array:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @array: A #GArrowBinaryArray.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_binary_array(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                           GArrowBinaryArray *array,\n+                                                           GError **error)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto arrow_array = garrow_array_get_raw<arrow::BinaryType>(GARROW_ARRAY(array));\n+\n+  auto status = arrow_builder->AppendArray(*arrow_array);\n+\n+  return garrow_error_check(error,\n+                            status,\n+                            \"[binary-dictionary-array-builder][append-binary-array]\");\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_append_indices:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @values: (array length=values_length): The array of indices.\n+ * @values_length: The length of `values`.\n+ * @is_valids: (nullable) (array length=is_valids_length): The array of\n+ *   0 or 1 that shows whether the Nth value is valid or not. If the\n+ *   Nth `is_valids` is 1, the Nth `values` is valid value. Otherwise\n+ *   the Nth value is null value.\n+ * @is_valids_length: The length of `is_valids`.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Append dictionary indices directly without modifying the internal memo.\n+ *\n+ * Returns: %TRUE on success, %FALSE if there was an error.\n+ *\n+ * Since: 1.0\n+ */\n+gboolean\n+garrow_binary_dictionary_array_builder_append_indices(GArrowBinaryDictionaryArrayBuilder *builder,\n+                                                      const gint64 *values,\n+                                                      gint64 values_length,\n+                                                      const gboolean *is_valids,\n+                                                      gint64 is_valids_length,\n+                                                      GError **error)\n+{\n+  static const char *context = \"[binary-dictionary-array-builder][append-indices]\";\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  auto append_function = [&arrow_builder](\n+      const gint64 *values,\n+      gint64 values_length,\n+      const uint8_t *valid_bytes) -> arrow::Status {\n+    return arrow_builder->AppendIndices(values, values_length, valid_bytes);\n+  };\n+  return garrow_array_builder_append_values(values, values_length, is_valids,\n+                                            is_valids_length, error, context,\n+                                            append_function);\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_get_dictionary_length:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ *\n+ * Returns: A number of entries in the dicitonary.\n+ *\n+ * Since: 1.0\n+ */\n+gint64 garrow_binary_dictionary_array_builder_get_dictionary_length(GArrowBinaryDictionaryArrayBuilder *builder)\n+{\n+  auto arrow_builder =\n+    static_cast<arrow::BinaryDictionaryBuilder *>(\n+      garrow_array_builder_get_raw(GARROW_ARRAY_BUILDER(builder)));\n+  return arrow_builder->dictionary_length();\n+}\n+\n+/**\n+ * garrow_binary_dictionary_array_builder_finish_delta:\n+ * @builder: A #GArrowBinaryDictionaryArrayBuilder.\n+ * @out_delta: (out): The built #GArrowArray containing dictionary.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (transfer full): The built #GArrowArray containing indices on\n+ *   success, %NULL on error.\n+ *\n+ * Since: 1.0\n+ */\n+GArrowArray *\n+garrow_binary_dictionary_array_builder_finish_delta(GArrowBinaryDictionaryArrayBuilder* builder,\n+                                                    GArrowArray **out_delta,\n+                                                    GError **error)\n\nReview comment:\n       I got it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-04T01:32:41.012+0000",
                    "updated": "2020-08-04T01:32:41.012+0000",
                    "started": "2020-08-04T01:32:41.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "465985",
                    "issueId": "13316625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/worklog/466072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #7747:\nURL: https://github.com/apache/arrow/pull/7747\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-04T07:20:06.932+0000",
                    "updated": "2020-08-04T07:20:06.932+0000",
                    "started": "2020-08-04T07:20:06.932+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "466072",
                    "issueId": "13316625"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@d91ebab[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20ca8366[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@60a0f25[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@72af7d31[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@715fbeb2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@56393974[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9c77b1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@953c466[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57551d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1a983a93[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@795ae78e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6e3d7c37[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 04 07:21:54 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-04T07:21:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9454/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-07-14T06:56:07.000+0000",
        "updated": "2020-08-04T07:21:54.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add binding of some dictionary builders",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316625/comment/17170607",
                    "id": "17170607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 7747\n[https://github.com/apache/arrow/pull/7747]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2020-08-04T07:21:54.460+0000",
                    "updated": "2020-08-04T07:21:54.460+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0gqe0:",
        "customfield_12314139": null
    }
}