{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13192095",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095",
    "key": "ARROW-3536",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3536/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916\n \n \n   The baseline UTF8 decoder is Bjoern Hoehrmann's DFA-based implementation.\r\n   The common case of runs of ASCII chars benefit from a fast path handling 8 bytes at a time.\r\n   \r\n   Benchmark results (on a Ryzen 7 machine with gcc 7.3):\r\n   ```\r\n   --------------------------------------------------------------------------\r\n   Benchmark                                   Time           CPU Iterations\r\n   --------------------------------------------------------------------------\r\n   BM_ValidateTinyAscii/repeats:1              3 ns          3 ns  245079875    3.2611GB/s\r\n   BM_ValidateTinyNonAscii/repeats:1          13 ns         12 ns   55855752   839.286MB/s\r\n   BM_ValidateSmallAscii/repeats:1            10 ns         10 ns   73187485   13.3891GB/s\r\n   BM_ValidateSmallNonAscii/repeats:1         70 ns         70 ns    9900000   1.97228GB/s\r\n   BM_ValidateLargeAscii/repeats:1          4095 ns       4094 ns     170235   22.7493GB/s\r\n   BM_ValidateLargeNonAscii/repeats:1      44279 ns      44272 ns      15740   2.10464GB/s\r\n   ```\r\n   \r\n   The case of tiny strings is probably the most important for the use case of CSV type inference.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-07T15:34:47.132+0000",
                    "updated": "2018-11-07T15:34:47.132+0000",
                    "started": "2018-11-07T15:34:47.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163464",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-436991299\n \n \n   I've got a version that doesn't do any unaligned accesses, its performance is less good:\r\n   ```\r\n   --------------------------------------------------------------------------\r\n   Benchmark                                   Time           CPU Iterations\r\n   --------------------------------------------------------------------------\r\n   BM_ValidateTinyAscii/repeats:1             12 ns         12 ns   56286434   767.287MB/s\r\n   BM_ValidateTinyNonAscii/repeats:1          14 ns         14 ns   50224538   751.087MB/s\r\n   BM_ValidateSmallAscii/repeats:1            10 ns         10 ns   67798709   13.1149GB/s\r\n   BM_ValidateSmallNonAscii/repeats:1         81 ns         81 ns    8730830   1.69635GB/s\r\n   BM_ValidateLargeAscii/repeats:1          4090 ns       4090 ns     171068   22.7755GB/s\r\n   BM_ValidateLargeNonAscii/repeats:1      54660 ns      54651 ns      12399   1.70495GB/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T13:20:40.241+0000",
                    "updated": "2018-11-08T13:20:40.241+0000",
                    "started": "2018-11-08T13:20:40.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163909",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-437011200\n \n \n   I've changed the implementation to speed up non-ASCII speed by 20%+.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:26:14.043+0000",
                    "updated": "2018-11-08T14:26:14.043+0000",
                    "started": "2018-11-08T14:26:14.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163924",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-437011200\n \n \n   I've changed the implementation to improve non-ASCII speed by 20%+.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:26:26.889+0000",
                    "updated": "2018-11-08T14:26:26.889+0000",
                    "started": "2018-11-08T14:26:26.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163925",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-436991299\n \n \n   I've got a version that doesn't do any unaligned accesses (even with `memcpy`), its performance is less good:\r\n   ```\r\n   --------------------------------------------------------------------------\r\n   Benchmark                                   Time           CPU Iterations\r\n   --------------------------------------------------------------------------\r\n   BM_ValidateTinyAscii/repeats:1             12 ns         12 ns   56286434   767.287MB/s\r\n   BM_ValidateTinyNonAscii/repeats:1          14 ns         14 ns   50224538   751.087MB/s\r\n   BM_ValidateSmallAscii/repeats:1            10 ns         10 ns   67798709   13.1149GB/s\r\n   BM_ValidateSmallNonAscii/repeats:1         81 ns         81 ns    8730830   1.69635GB/s\r\n   BM_ValidateLargeAscii/repeats:1          4090 ns       4090 ns     171068   22.7755GB/s\r\n   BM_ValidateLargeNonAscii/repeats:1      54660 ns      54651 ns      12399   1.70495GB/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:26:55.813+0000",
                    "updated": "2018-11-08T14:26:55.813+0000",
                    "started": "2018-11-08T14:26:55.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163926",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-436991299\n \n \n   I've got a version that doesn't do any unaligned accesses (even with `memcpy`), its performance is less good (gcc):\r\n   ```\r\n   --------------------------------------------------------------------------\r\n   Benchmark                                   Time           CPU Iterations\r\n   --------------------------------------------------------------------------\r\n   BM_ValidateTinyAscii/repeats:1             12 ns         12 ns   56286434   767.287MB/s\r\n   BM_ValidateTinyNonAscii/repeats:1          14 ns         14 ns   50224538   751.087MB/s\r\n   BM_ValidateSmallAscii/repeats:1            10 ns         10 ns   67798709   13.1149GB/s\r\n   BM_ValidateSmallNonAscii/repeats:1         81 ns         81 ns    8730830   1.69635GB/s\r\n   BM_ValidateLargeAscii/repeats:1          4090 ns       4090 ns     171068   22.7755GB/s\r\n   BM_ValidateLargeNonAscii/repeats:1      54660 ns      54651 ns      12399   1.70495GB/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:45:25.043+0000",
                    "updated": "2018-11-08T14:45:25.043+0000",
                    "started": "2018-11-08T14:45:25.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163933",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163936",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-436991299\n \n \n   I've got a version that doesn't do any unaligned accesses (even with `memcpy`), its performance is less good (gcc 7.3):\r\n   ```\r\n   --------------------------------------------------------------------------\r\n   Benchmark                                   Time           CPU Iterations\r\n   --------------------------------------------------------------------------\r\n   BM_ValidateTinyAscii/repeats:1             12 ns         12 ns   56286434   767.287MB/s\r\n   BM_ValidateTinyNonAscii/repeats:1          14 ns         14 ns   50224538   751.087MB/s\r\n   BM_ValidateSmallAscii/repeats:1            10 ns         10 ns   67798709   13.1149GB/s\r\n   BM_ValidateSmallNonAscii/repeats:1         81 ns         81 ns    8730830   1.69635GB/s\r\n   BM_ValidateLargeAscii/repeats:1          4090 ns       4090 ns     171068   22.7755GB/s\r\n   BM_ValidateLargeNonAscii/repeats:1      54660 ns      54651 ns      12399   1.70495GB/s\r\n   ```\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T14:46:57.834+0000",
                    "updated": "2018-11-08T14:46:57.834+0000",
                    "started": "2018-11-08T14:46:57.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163936",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/163976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-437011200\n \n \n   I've changed the implementation to improve non-ASCII speed by 20%+, and updated the benchmark results.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T17:02:02.390+0000",
                    "updated": "2018-11-08T17:02:02.390+0000",
                    "started": "2018-11-08T17:02:02.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163976",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/164041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#issuecomment-437113646\n \n \n   I've changed the implementation to use a larger one-lookup table, increasing non-ASCII performance again. Updating benchmark results.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T18:51:42.696+0000",
                    "updated": "2018-11-08T18:51:42.696+0000",
                    "started": "2018-11-08T18:51:42.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164041",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/164163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#discussion_r232105217\n \n \n\n ##########\n File path: cpp/src/arrow/util/utf8-util-benchmark.cc\n ##########\n @@ -0,0 +1,127 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/utf8.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+static const char* tiny_valid_ascii = \"characters\";\n+static const char* tiny_valid_non_ascii = \"caract\u00e8res\";\n+\n+static const char* valid_ascii =\n+    \"UTF-8 is a variable width character encoding capable of encoding all 1,112,064 \"\n+    \"valid code points in Unicode using one to four 8-bit bytes\";\n+static const char* valid_almost_ascii =\n+    \"UTF-8 est un codage de caract\u00e8res informatiques con\u00e7u pour coder l\u2019ensemble des \"\n+    \"caract\u00e8res du \u00ab r\u00e9pertoire universel de caract\u00e8res cod\u00e9s \u00bb\";\n+static const char* valid_non_ascii =\n+    \"UTF-8 \u306fISO/IEC 10646 (UCS) \"\n+    \"\u3068Unicode\u3067\u4f7f\u3048\u308b8\u30d3\u30c3\u30c8\u7b26\u53f7\u5358\u4f4d\u306e\u6587\u5b57\u7b26\u53f7\u5316\u5f62\u5f0f\u53ca\u3073\u6587\u5b57\u7b26\u53f7\u5316\u30b9\u30ad\u30fc\u30e0\u3002 \";\n+\n+static std::string MakeLargeString(const std::string& base, int64_t nbytes) {\n+  int64_t nrepeats = (nbytes + base.size() - 1) / base.size();\n+  std::string s;\n+  s.reserve(nrepeats * nbytes);\n+  for (int64_t i = 0; i < nrepeats; ++i) {\n+    s += base;\n+  }\n+  return s;\n+}\n+\n+static void BenchmarkUTF8Validation(\n+    benchmark::State& state,  // NOLINT non-const reference\n+    const std::string& s, bool expected) {\n+  auto data = reinterpret_cast<const uint8_t*>(s.data());\n+  auto data_size = static_cast<int64_t>(s.size());\n+\n+  InitializeUTF8();\n+  bool b = ValidateUTF8(data, data_size);\n+  if (b != expected) {\n+    std::cerr << \"Unexpected validation result\" << std::endl;\n+    std::abort();\n+  }\n+\n+  while (state.KeepRunning()) {\n \n Review comment:\n   Apparently there is a faster way than using `state.KeepRunning()`: https://github.com/google/benchmark#a-faster-keeprunning-loop. We should perhaps change all our benchmarks to use the C++11 form for less overhead\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T00:26:32.058+0000",
                    "updated": "2018-11-09T00:26:32.058+0000",
                    "started": "2018-11-09T00:26:32.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164163",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/164164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916#discussion_r232106107\n \n \n\n ##########\n File path: cpp/src/arrow/util/utf8.cc\n ##########\n @@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <mutex>\n+\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/utf8.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+// Copyright (c) 2008-2010 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n+// See http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for details.\n+\n+// clang-format off\n+const uint8_t utf8_small_table[] = { // NOLINT\n+  // The first part of the table maps bytes to character classes that\n+  // to reduce the size of the transition table and create bitmasks.\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,  // NOLINT\n+   7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  // NOLINT\n+   8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  // NOLINT\n+  10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3, 11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,  // NOLINT\n+\n+  // The second part is a transition table that maps a combination\n+  // of a state of the automaton and a character class to a state.\n+  // Character classes are between 0 and 11, states are multiples of 12.\n+   0,12,24,36,60,96,84,12,12,12,48,72, 12,12,12,12,12,12,12,12,12,12,12,12,  // NOLINT\n+  12, 0,12,12,12,12,12, 0,12, 0,12,12, 12,24,12,12,12,12,12,24,12,24,12,12,  // NOLINT\n+  12,12,12,12,12,12,12,24,12,12,12,12, 12,24,12,12,12,12,12,12,12,24,12,12,  // NOLINT\n+  12,12,12,12,12,12,12,36,12,36,12,12, 12,36,12,12,12,12,12,36,12,36,12,12,  // NOLINT\n+  12,36,12,12,12,12,12,12,12,12,12,12,  // NOLINT\n+};\n+// clang-format on\n+\n+uint16_t utf8_large_table[9 * 256] = {0xffff};\n+\n+static void InitializeLargeTable() {\n+  for (uint32_t state = 0; state < 9; ++state) {\n+    for (uint32_t byte = 0; byte < 256; ++byte) {\n+      uint32_t byte_class = utf8_small_table[byte];\n+      uint8_t next_state = utf8_small_table[256 + state * 12 + byte_class] / 12;\n+      DCHECK_LT(next_state, 9);\n+      utf8_large_table[state * 256 + byte] = static_cast<uint16_t>(next_state * 256);\n+    }\n+  }\n+}\n+\n+#ifndef NDEBUG\n+ARROW_EXPORT void CheckUTF8Initialized() {\n+  DCHECK_EQ(utf8_large_table[0], 0)\n+      << \"InitializeUTF8() must be called before calling UTF8 routines\";\n+}\n+#endif\n+\n+}  // namespace internal\n+\n+static std::once_flag utf8_initialized;\n \n Review comment:\n   Seeing `once_flag` gives stress flashbacks to the symbol conflicts in TensorFlow =/ \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T00:26:32.107+0000",
                    "updated": "2018-11-09T00:26:32.107+0000",
                    "started": "2018-11-09T00:26:32.106+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164164",
                    "issueId": "13192095"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/worklog/164166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2916: ARROW-3536: [C++] Add UTF8 validation functions\nURL: https://github.com/apache/arrow/pull/2916\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/LICENSE.txt b/LICENSE.txt\nindex 17801c69cf..85a9bbd9ef 100644\n--- a/LICENSE.txt\n+++ b/LICENSE.txt\n@@ -743,3 +743,29 @@ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n+\n+--------------------------------------------------------------------------------\n+\n+The file cpp/src/arrow/util/utf8.h includes code adapted from the page\n+  https://bjoern.hoehrmann.de/utf-8/decoder/dfa/\n+with the following license (MIT)\n+\n+Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex e026cc17bd..7fb083cb0c 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -50,10 +50,11 @@ set(ARROW_SRCS\n   util/decimal.cc\n   util/hash.cc\n   util/io-util.cc\n+  util/logging.cc\n   util/key_value_metadata.cc\n   util/task-group.cc\n   util/thread-pool.cc\n-  util/logging.cc\n+  util/utf8.cc\n )\n \n if (\"${COMPILER_FAMILY}\" STREQUAL \"clang\")\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex 28c611637b..b9d37624e4 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -51,6 +51,7 @@ install(FILES\n   string.h\n   thread-pool.h\n   type_traits.h\n+  utf8.h\n   variant.h\n   visibility.h\n   windows_compatibility.h\n@@ -87,18 +88,20 @@ ADD_ARROW_TEST(checked-cast-test)\n ADD_ARROW_TEST(compression-test)\n ADD_ARROW_TEST(decimal-test)\n ADD_ARROW_TEST(key-value-metadata-test)\n-ADD_ARROW_TEST(rle-encoding-test)\n+ADD_ARROW_TEST(lazy-test)\n+ADD_ARROW_TEST(logging-test)\n ADD_ARROW_TEST(parsing-util-test)\n+ADD_ARROW_TEST(rle-encoding-test)\n ADD_ARROW_TEST(stl-util-test)\n-ADD_ARROW_TEST(thread-pool-test)\n ADD_ARROW_TEST(task-group-test)\n-ADD_ARROW_TEST(lazy-test)\n-ADD_ARROW_TEST(logging-test)\n+ADD_ARROW_TEST(thread-pool-test)\n+ADD_ARROW_TEST(utf8-util-test)\n \n ADD_ARROW_BENCHMARK(bit-util-benchmark)\n ADD_ARROW_BENCHMARK(compression-benchmark)\n ADD_ARROW_BENCHMARK(decimal-benchmark)\n ADD_ARROW_BENCHMARK(lazy-benchmark)\n ADD_ARROW_BENCHMARK(number-parsing-benchmark)\n+ADD_ARROW_BENCHMARK(utf8-util-benchmark)\n \n add_subdirectory(variant)\ndiff --git a/cpp/src/arrow/util/utf8-util-benchmark.cc b/cpp/src/arrow/util/utf8-util-benchmark.cc\nnew file mode 100644\nindex 0000000000..29c5e2c25f\n--- /dev/null\n+++ b/cpp/src/arrow/util/utf8-util-benchmark.cc\n@@ -0,0 +1,127 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <string>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/utf8.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+static const char* tiny_valid_ascii = \"characters\";\n+static const char* tiny_valid_non_ascii = \"caract\u00e8res\";\n+\n+static const char* valid_ascii =\n+    \"UTF-8 is a variable width character encoding capable of encoding all 1,112,064 \"\n+    \"valid code points in Unicode using one to four 8-bit bytes\";\n+static const char* valid_almost_ascii =\n+    \"UTF-8 est un codage de caract\u00e8res informatiques con\u00e7u pour coder l\u2019ensemble des \"\n+    \"caract\u00e8res du \u00ab r\u00e9pertoire universel de caract\u00e8res cod\u00e9s \u00bb\";\n+static const char* valid_non_ascii =\n+    \"UTF-8 \u306fISO/IEC 10646 (UCS) \"\n+    \"\u3068Unicode\u3067\u4f7f\u3048\u308b8\u30d3\u30c3\u30c8\u7b26\u53f7\u5358\u4f4d\u306e\u6587\u5b57\u7b26\u53f7\u5316\u5f62\u5f0f\u53ca\u3073\u6587\u5b57\u7b26\u53f7\u5316\u30b9\u30ad\u30fc\u30e0\u3002 \";\n+\n+static std::string MakeLargeString(const std::string& base, int64_t nbytes) {\n+  int64_t nrepeats = (nbytes + base.size() - 1) / base.size();\n+  std::string s;\n+  s.reserve(nrepeats * nbytes);\n+  for (int64_t i = 0; i < nrepeats; ++i) {\n+    s += base;\n+  }\n+  return s;\n+}\n+\n+static void BenchmarkUTF8Validation(\n+    benchmark::State& state,  // NOLINT non-const reference\n+    const std::string& s, bool expected) {\n+  auto data = reinterpret_cast<const uint8_t*>(s.data());\n+  auto data_size = static_cast<int64_t>(s.size());\n+\n+  InitializeUTF8();\n+  bool b = ValidateUTF8(data, data_size);\n+  if (b != expected) {\n+    std::cerr << \"Unexpected validation result\" << std::endl;\n+    std::abort();\n+  }\n+\n+  while (state.KeepRunning()) {\n+    bool b = ValidateUTF8(data, data_size);\n+    benchmark::DoNotOptimize(b);\n+  }\n+  state.SetBytesProcessed(state.iterations() * s.size());\n+}\n+\n+static void BM_ValidateTinyAscii(benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkUTF8Validation(state, tiny_valid_ascii, true);\n+}\n+\n+static void BM_ValidateTinyNonAscii(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkUTF8Validation(state, tiny_valid_non_ascii, true);\n+}\n+\n+static void BM_ValidateSmallAscii(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkUTF8Validation(state, valid_ascii, true);\n+}\n+\n+static void BM_ValidateSmallAlmostAscii(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkUTF8Validation(state, valid_almost_ascii, true);\n+}\n+\n+static void BM_ValidateSmallNonAscii(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkUTF8Validation(state, valid_non_ascii, true);\n+}\n+\n+static void BM_ValidateLargeAscii(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  auto s = MakeLargeString(valid_ascii, 100000);\n+  BenchmarkUTF8Validation(state, s, true);\n+}\n+\n+static void BM_ValidateLargeAlmostAscii(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  auto s = MakeLargeString(valid_almost_ascii, 100000);\n+  BenchmarkUTF8Validation(state, s, true);\n+}\n+\n+static void BM_ValidateLargeNonAscii(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  auto s = MakeLargeString(valid_non_ascii, 100000);\n+  BenchmarkUTF8Validation(state, s, true);\n+}\n+\n+static const int kRepetitions = 1;\n+\n+BENCHMARK(BM_ValidateTinyAscii)->Repetitions(kRepetitions);\n+BENCHMARK(BM_ValidateTinyNonAscii)->Repetitions(kRepetitions);\n+BENCHMARK(BM_ValidateSmallAscii)->Repetitions(kRepetitions);\n+BENCHMARK(BM_ValidateSmallAlmostAscii)->Repetitions(kRepetitions);\n+BENCHMARK(BM_ValidateSmallNonAscii)->Repetitions(kRepetitions);\n+BENCHMARK(BM_ValidateLargeAscii)->Repetitions(kRepetitions);\n+BENCHMARK(BM_ValidateLargeAlmostAscii)->Repetitions(kRepetitions);\n+BENCHMARK(BM_ValidateLargeNonAscii)->Repetitions(kRepetitions);\n+\n+}  // namespace util\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/utf8-util-test.cc b/cpp/src/arrow/util/utf8-util-test.cc\nnew file mode 100644\nindex 0000000000..992024ae79\n--- /dev/null\n+++ b/cpp/src/arrow/util/utf8-util-test.cc\n@@ -0,0 +1,253 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <random>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/utf8.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+class UTF8Test : public ::testing::Test {\n+ protected:\n+  static void SetUpTestCase() {\n+    InitializeUTF8();\n+\n+    all_valid_sequences.clear();\n+    for (const auto& v :\n+         {valid_sequences_1, valid_sequences_2, valid_sequences_3, valid_sequences_4}) {\n+      all_valid_sequences.insert(all_valid_sequences.end(), v.begin(), v.end());\n+    }\n+\n+    all_invalid_sequences.clear();\n+    for (const auto& v : {invalid_sequences_1, invalid_sequences_2, invalid_sequences_3,\n+                          invalid_sequences_4}) {\n+      all_invalid_sequences.insert(all_invalid_sequences.end(), v.begin(), v.end());\n+    }\n+  }\n+\n+  static std::vector<std::string> valid_sequences_1;\n+  static std::vector<std::string> valid_sequences_2;\n+  static std::vector<std::string> valid_sequences_3;\n+  static std::vector<std::string> valid_sequences_4;\n+\n+  static std::vector<std::string> all_valid_sequences;\n+\n+  static std::vector<std::string> invalid_sequences_1;\n+  static std::vector<std::string> invalid_sequences_2;\n+  static std::vector<std::string> invalid_sequences_3;\n+  static std::vector<std::string> invalid_sequences_4;\n+\n+  static std::vector<std::string> all_invalid_sequences;\n+};\n+\n+std::vector<std::string> UTF8Test::valid_sequences_1 = {\"a\", \"\\x7f\"};\n+std::vector<std::string> UTF8Test::valid_sequences_2 = {\"\\xc2\\x80\", \"\\xc3\\xbf\",\n+                                                        \"\\xdf\\xbf\"};\n+std::vector<std::string> UTF8Test::valid_sequences_3 = {\"\\xe0\\xa0\\x80\", \"\\xe8\\x9d\\xa5\",\n+                                                        \"\\xef\\xbf\\xbf\"};\n+std::vector<std::string> UTF8Test::valid_sequences_4 = {\n+    \"\\xf0\\x90\\x80\\x80\", \"\\xf0\\x9f\\xbf\\xbf\", \"\\xf4\\x80\\x80\\x80\", \"\\xf4\\x8f\\xbf\\xbf\"};\n+\n+std::vector<std::string> UTF8Test::all_valid_sequences;\n+\n+std::vector<std::string> UTF8Test::invalid_sequences_1 = {\"\\x80\", \"\\xa0\", \"\\xbf\", \"\\xc0\",\n+                                                          \"\\xc1\"};\n+std::vector<std::string> UTF8Test::invalid_sequences_2 = {\n+    \"\\x80\\x80\", \"\\x80\\xbf\", \"\\xbf\\x80\", \"\\xbf\\xbf\",\n+    \"\\xc1\\x80\", \"\\xc2\\x7f\", \"\\xc3\\xff\", \"\\xdf\\xc0\"};\n+std::vector<std::string> UTF8Test::invalid_sequences_3 = {\n+    \"\\xe0\\x80\\x80\", \"\\xe0\\x9f\\x80\", \"\\xef\\xbf\\xc0\", \"\\xef\\xc0\\xbf\", \"\\xef\\xff\\xff\",\n+    // Surrogates\n+    \"\\xed\\xa0\\x80\", \"\\xed\\xbf\\xbf\"};\n+std::vector<std::string> UTF8Test::invalid_sequences_4 = {\n+    \"\\xf0\\x80\\x80\\x80\", \"\\xf0\\x8f\\x80\\x80\", \"\\xf4\\x8f\\xbf\\xc0\", \"\\xf4\\x8f\\xc0\\xbf\",\n+    \"\\xf4\\x90\\x80\\x80\"};\n+\n+std::vector<std::string> UTF8Test::all_invalid_sequences;\n+\n+class UTF8ValidationTest : public UTF8Test {};\n+\n+::testing::AssertionResult IsValidUTF8(const std::string& s) {\n+  if (ValidateUTF8(reinterpret_cast<const uint8_t*>(s.data()), s.size())) {\n+    return ::testing::AssertionSuccess();\n+  } else {\n+    std::string h = HexEncode(reinterpret_cast<const uint8_t*>(s.data()),\n+                              static_cast<int32_t>(s.size()));\n+    return ::testing::AssertionFailure()\n+           << \"string '\" << h << \"' didn't validate as UTF8\";\n+  }\n+}\n+\n+::testing::AssertionResult IsInvalidUTF8(const std::string& s) {\n+  if (!ValidateUTF8(reinterpret_cast<const uint8_t*>(s.data()), s.size())) {\n+    return ::testing::AssertionSuccess();\n+  } else {\n+    std::string h = HexEncode(reinterpret_cast<const uint8_t*>(s.data()),\n+                              static_cast<int32_t>(s.size()));\n+    return ::testing::AssertionFailure() << \"string '\" << h << \"' validated as UTF8\";\n+  }\n+}\n+\n+void AssertValidUTF8(const std::string& s) { ASSERT_TRUE(IsValidUTF8(s)); }\n+\n+void AssertInvalidUTF8(const std::string& s) { ASSERT_TRUE(IsInvalidUTF8(s)); }\n+\n+TEST_F(UTF8ValidationTest, EmptyString) { AssertValidUTF8(\"\"); }\n+\n+TEST_F(UTF8ValidationTest, OneCharacterValid) {\n+  for (const auto& s : all_valid_sequences) {\n+    AssertValidUTF8(s);\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, TwoCharacterValid) {\n+  for (const auto& s1 : all_valid_sequences) {\n+    for (const auto& s2 : all_valid_sequences) {\n+      AssertValidUTF8(s1 + s2);\n+    }\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, RandomValid) {\n+#ifdef ARROW_VALGRIND\n+  const int niters = 50;\n+#else\n+  const int niters = 1000;\n+#endif\n+  const int nchars = 100;\n+  std::default_random_engine gen(42);\n+  std::uniform_int_distribution<size_t> valid_dist(0, all_valid_sequences.size() - 1);\n+\n+  for (int i = 0; i < niters; ++i) {\n+    std::string s;\n+    s.reserve(nchars * 4);\n+    for (int j = 0; j < nchars; ++j) {\n+      s += all_valid_sequences[valid_dist(gen)];\n+    }\n+    AssertValidUTF8(s);\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, OneCharacterTruncated) {\n+  for (const auto& s : all_valid_sequences) {\n+    if (s.size() > 1) {\n+      AssertInvalidUTF8(s.substr(0, s.size() - 1));\n+    }\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, TwoCharacterTruncated) {\n+  for (const auto& s1 : all_valid_sequences) {\n+    for (const auto& s2 : all_valid_sequences) {\n+      if (s2.size() > 1) {\n+        AssertInvalidUTF8(s1 + s2.substr(0, s2.size() - 1));\n+        AssertInvalidUTF8(s2.substr(0, s2.size() - 1) + s1);\n+      }\n+    }\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, OneCharacterInvalid) {\n+  for (const auto& s : all_invalid_sequences) {\n+    AssertInvalidUTF8(s);\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, TwoCharacterInvalid) {\n+  for (const auto& s1 : all_valid_sequences) {\n+    for (const auto& s2 : all_invalid_sequences) {\n+      AssertInvalidUTF8(s1 + s2);\n+      AssertInvalidUTF8(s2 + s1);\n+    }\n+  }\n+  for (const auto& s1 : all_invalid_sequences) {\n+    for (const auto& s2 : all_invalid_sequences) {\n+      AssertInvalidUTF8(s1 + s2);\n+    }\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, RandomInvalid) {\n+#ifdef ARROW_VALGRIND\n+  const int niters = 50;\n+#else\n+  const int niters = 1000;\n+#endif\n+  const int nchars = 100;\n+  std::default_random_engine gen(42);\n+  std::uniform_int_distribution<size_t> valid_dist(0, all_valid_sequences.size() - 1);\n+  std::uniform_int_distribution<int> invalid_pos_dist(0, nchars - 1);\n+  std::uniform_int_distribution<size_t> invalid_dist(0, all_invalid_sequences.size() - 1);\n+\n+  for (int i = 0; i < niters; ++i) {\n+    std::string s;\n+    s.reserve(nchars * 4);\n+    // Stuff a single invalid sequence somewhere in a valid UTF8 stream\n+    int invalid_pos = invalid_pos_dist(gen);\n+    for (int j = 0; j < nchars; ++j) {\n+      if (j == invalid_pos) {\n+        s += all_invalid_sequences[invalid_dist(gen)];\n+      } else {\n+        s += all_valid_sequences[valid_dist(gen)];\n+      }\n+    }\n+    AssertInvalidUTF8(s);\n+  }\n+}\n+\n+TEST_F(UTF8ValidationTest, RandomTruncated) {\n+#ifdef ARROW_VALGRIND\n+  const int niters = 50;\n+#else\n+  const int niters = 1000;\n+#endif\n+  const int nchars = 100;\n+  std::default_random_engine gen(42);\n+  std::uniform_int_distribution<size_t> valid_dist(0, all_valid_sequences.size() - 1);\n+  std::uniform_int_distribution<int> invalid_pos_dist(0, nchars - 1);\n+\n+  for (int i = 0; i < niters; ++i) {\n+    std::string s;\n+    s.reserve(nchars * 4);\n+    // Truncate a single sequence somewhere in a valid UTF8 stream\n+    int invalid_pos = invalid_pos_dist(gen);\n+    for (int j = 0; j < nchars; ++j) {\n+      if (j == invalid_pos) {\n+        while (true) {\n+          // Ensure we truncate a 2-byte or more sequence\n+          const std::string& t = all_valid_sequences[valid_dist(gen)];\n+          if (t.size() > 1) {\n+            s += t.substr(0, t.size() - 1);\n+            break;\n+          }\n+        }\n+      } else {\n+        s += all_valid_sequences[valid_dist(gen)];\n+      }\n+    }\n+    AssertInvalidUTF8(s);\n+  }\n+}\n+\n+}  // namespace util\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/utf8.cc b/cpp/src/arrow/util/utf8.cc\nnew file mode 100644\nindex 0000000000..75b0979ab0\n--- /dev/null\n+++ b/cpp/src/arrow/util/utf8.cc\n@@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <mutex>\n+\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/utf8.h\"\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+// Copyright (c) 2008-2010 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n+// See http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for details.\n+\n+// clang-format off\n+const uint8_t utf8_small_table[] = { // NOLINT\n+  // The first part of the table maps bytes to character classes that\n+  // to reduce the size of the transition table and create bitmasks.\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,  // NOLINT\n+   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,  9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,  // NOLINT\n+   7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,  // NOLINT\n+   8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  // NOLINT\n+  10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3, 11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,  // NOLINT\n+\n+  // The second part is a transition table that maps a combination\n+  // of a state of the automaton and a character class to a state.\n+  // Character classes are between 0 and 11, states are multiples of 12.\n+   0,12,24,36,60,96,84,12,12,12,48,72, 12,12,12,12,12,12,12,12,12,12,12,12,  // NOLINT\n+  12, 0,12,12,12,12,12, 0,12, 0,12,12, 12,24,12,12,12,12,12,24,12,24,12,12,  // NOLINT\n+  12,12,12,12,12,12,12,24,12,12,12,12, 12,24,12,12,12,12,12,12,12,24,12,12,  // NOLINT\n+  12,12,12,12,12,12,12,36,12,36,12,12, 12,36,12,12,12,12,12,36,12,36,12,12,  // NOLINT\n+  12,36,12,12,12,12,12,12,12,12,12,12,  // NOLINT\n+};\n+// clang-format on\n+\n+uint16_t utf8_large_table[9 * 256] = {0xffff};\n+\n+static void InitializeLargeTable() {\n+  for (uint32_t state = 0; state < 9; ++state) {\n+    for (uint32_t byte = 0; byte < 256; ++byte) {\n+      uint32_t byte_class = utf8_small_table[byte];\n+      uint8_t next_state = utf8_small_table[256 + state * 12 + byte_class] / 12;\n+      DCHECK_LT(next_state, 9);\n+      utf8_large_table[state * 256 + byte] = static_cast<uint16_t>(next_state * 256);\n+    }\n+  }\n+}\n+\n+#ifndef NDEBUG\n+ARROW_EXPORT void CheckUTF8Initialized() {\n+  DCHECK_EQ(utf8_large_table[0], 0)\n+      << \"InitializeUTF8() must be called before calling UTF8 routines\";\n+}\n+#endif\n+\n+}  // namespace internal\n+\n+static std::once_flag utf8_initialized;\n+\n+void InitializeUTF8() {\n+  std::call_once(utf8_initialized, internal::InitializeLargeTable);\n+}\n+\n+}  // namespace util\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/utf8.h b/cpp/src/arrow/util/utf8.h\nnew file mode 100644\nindex 0000000000..f5a18be05a\n--- /dev/null\n+++ b/cpp/src/arrow/util/utf8.h\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_UTF8_H\n+#define ARROW_UTIL_UTF8_H\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+namespace internal {\n+\n+// Copyright (c) 2008-2010 Bjoern Hoehrmann <bjoern@hoehrmann.de>\n+// See http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for details.\n+\n+// A compact state table allowing UTF8 decoding using two dependent\n+// lookups per byte.  The first lookup determines the character class\n+// and the second lookup reads the next state.\n+// In this table states are multiples of 12.\n+ARROW_EXPORT extern const uint8_t utf8_small_table[256 + 9 * 12];\n+\n+// Success / reject states when looked up in the small table\n+static constexpr uint8_t kUTF8DecodeAccept = 0;\n+static constexpr uint8_t kUTF8DecodeReject = 12;\n+\n+// An expanded state table allowing transitions using a single lookup\n+// at the expense of a larger memory footprint (but on non-random data,\n+// not all the table will end up accessed and cached).\n+// In this table states are multiples of 256.\n+ARROW_EXPORT extern uint16_t utf8_large_table[9 * 256];\n+\n+// Success / reject states when looked up in the large table\n+static constexpr uint16_t kUTF8ValidateAccept = 0;\n+static constexpr uint16_t kUTF8ValidateReject = 256;\n+\n+static inline uint8_t DecodeOneUTF8Byte(uint8_t byte, uint8_t state, uint32_t* codep) {\n+  uint8_t type = utf8_small_table[byte];\n+\n+  *codep = (state != kUTF8DecodeAccept) ? (byte & 0x3fu) | (*codep << 6)\n+                                        : (0xff >> type) & (byte);\n+\n+  state = utf8_small_table[256 + state + type];\n+  return state;\n+}\n+\n+static inline uint16_t ValidateOneUTF8Byte(uint8_t byte, uint16_t state) {\n+  return utf8_large_table[state + byte];\n+}\n+\n+#ifndef NDEBUG\n+ARROW_EXPORT void CheckUTF8Initialized();\n+#endif\n+\n+}  // namespace internal\n+\n+// This function needs to be called before doing UTF8 validation.\n+ARROW_EXPORT void InitializeUTF8();\n+\n+inline bool ValidateUTF8(const uint8_t* data, int64_t size) {\n+  static constexpr uint64_t high_bits_64 = 0x8080808080808080ULL;\n+  // For some reason, defining this variable outside the loop helps clang\n+  uint64_t mask;\n+\n+#ifndef NDEBUG\n+  internal::CheckUTF8Initialized();\n+#endif\n+\n+  while (size >= 8) {\n+    // XXX This is doing an unaligned access.  Contemporary architectures\n+    // (x86-64, AArch64, PPC64) support it natively and often have good\n+    // performance nevertheless.\n+    memcpy(&mask, data, 8);\n+    if (ARROW_PREDICT_TRUE((mask & high_bits_64) == 0)) {\n+      // 8 bytes of pure ASCII, move forward\n+      size -= 8;\n+      data += 8;\n+      continue;\n+    }\n+    // Non-ASCII run detected.\n+    // We process at least 4 bytes, to avoid too many spurious 64-bit reads\n+    // in case the non-ASCII bytes are at the end of the tested 64-bit word.\n+    // We also only check for rejection at the end since that state is stable\n+    // (once in reject state, we always remain in reject state).\n+    // It is guaranteed that size >= 8 when arriving here, which allows\n+    // us to avoid size checks.\n+    uint16_t state = internal::kUTF8ValidateAccept;\n+    // Byte 0\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    // Byte 1\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    // Byte 2\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    // Byte 3\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    // Byte 4\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    if (state == internal::kUTF8ValidateAccept) {\n+      continue;  // Got full char, switch back to ASCII detection\n+    }\n+    // Byte 5\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    if (state == internal::kUTF8ValidateAccept) {\n+      continue;  // Got full char, switch back to ASCII detection\n+    }\n+    // Byte 6\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    if (state == internal::kUTF8ValidateAccept) {\n+      continue;  // Got full char, switch back to ASCII detection\n+    }\n+    // Byte 7\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+    --size;\n+    if (state == internal::kUTF8ValidateAccept) {\n+      continue;  // Got full char, switch back to ASCII detection\n+    }\n+    // kUTF8ValidateAccept not reached along 4 transitions has to mean a rejection\n+    assert(state == internal::kUTF8ValidateReject);\n+    return false;\n+  }\n+\n+  // Validate string tail one byte at a time\n+  // Note the state table is designed so that, once in the reject state,\n+  // we remain in that state until the end.  So we needn't check for\n+  // rejection at each char (we don't gain much by short-circuiting here).\n+  uint16_t state = internal::kUTF8ValidateAccept;\n+  while (size-- > 0) {\n+    state = internal::ValidateOneUTF8Byte(*data++, state);\n+  }\n+  return ARROW_PREDICT_TRUE(state == internal::kUTF8ValidateAccept);\n+}\n+\n+}  // namespace util\n+}  // namespace arrow\n+\n+#endif\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T00:28:06.809+0000",
                    "updated": "2018-11-09T00:28:06.809+0000",
                    "started": "2018-11-09T00:28:06.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164166",
                    "issueId": "13192095"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@24d82856[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8ca3c3a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@285a00c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7128c219[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6528c2ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@355dcd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7891312f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4f9e0c2e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c8092da[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@467171b2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3798281a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@8d8bdbb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 09 00:28:01 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-09T00:28:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3536/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-10-17T01:48:56.000+0000",
        "updated": "2018-11-09T00:28:06.000+0000",
        "timeoriginalestimate": null,
        "description": "[~lemire] discusses this topic in https://lemire.me/blog/2018/05/16/validating-utf-8-strings-using-as-little-as-0-7-cycles-per-byte/\r\n\r\nIn Java there is also\r\n\r\nhttps://lemire.me/blog/2018/10/16/validating-utf-8-bytes-java-edition/\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Fast UTF8 validation functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16653282",
                    "id": "16653282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The ASCII validation function looks fine (though my experiments show that a non-SIMD version would be as fast).\r\n\r\nThe UTF8 validation function is unreadable, and not battle-tested, so I wouldn't want to integrate it (also, does it accept surrogates? It's not obvious).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-17T09:50:22.260+0000",
                    "updated": "2018-10-17T09:50:22.260+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16653294",
                    "id": "16653294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I'll note that in the (probably typical) case where we want to validate many small strings, asymptotic bytes/cycle performance can be less important than the setup overhead. In other words, we may need some kind of \"fast path\" at the beginning for small strings.\r\n\r\nAnother possible approach is to have an AdaptiveStringBuilder that validates at the end and yields either a String array or a Binary array. For the pure ASCII case, we can validate the whole array at once.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-17T10:04:00.153+0000",
                    "updated": "2018-10-17T10:04:00.153+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16654094",
                    "id": "16654094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lemire",
                        "name": "lemire",
                        "key": "lemire",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=lemire&avatarId=13132",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lemire&avatarId=13132",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lemire&avatarId=13132",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lemire&avatarId=13132"
                        },
                        "displayName": "Daniel Lemire",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~pitrou] is correct that there is probably no need for explicit vectorization via intrinsic functions for the ASCII checks but as I pointed out elsewhere, that's because the compiler is smart enough to autovectorize. That is maybe unsurprising in the sense that all we need to do is to check one bit per byte. That's something that optimizing compilers can deal with.\r\n\r\nIn fact, you can check that GNU GCC and clang can autovectorize this function...\r\n\r\n\u00a0\r\n{code:java}\r\nbool is_ascii(char* cs, size_t len) {\r\n char c = 0;\r\n for(intk = 0; k < len; k++)\r\n   c |= cs[k] & 0x80;\r\n  return c == 0;\r\n}\r\n{code}\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nSo that's good!\r\n\r\n\u00a0\r\n\r\nBut there is some non-trivial insight involved here: the difference between the code you see there in C and what the compiler produces is enormous. So this code is a *lot* more efficient than you might think at first.\r\n\r\n\u00a0\r\n\r\n _The UTF8 validation function is unreadable_\r\n\r\n\u00a0\r\n\r\nThis hurts!!!\r\n\r\n:)\r\n\r\nKidding aside,\u00a0I am willing to help out.\u00a0\r\n\r\n\u00a0\r\n\r\n(Programming with function intrinsics does tend to produce unreadable code. There are many people, me included, trying to work on this problem to alleviate it.)\r\n\r\n\u00a0\r\n\r\n _does it accept surrogates_\r\n\r\nThey are malformed in UTF-8, so they are rejected. I don't think that this is even debatable.\u00a0\r\n\r\n(Of course, all code can be buggy, so it would be fair to test.)\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lemire",
                        "name": "lemire",
                        "key": "lemire",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=lemire&avatarId=13132",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lemire&avatarId=13132",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lemire&avatarId=13132",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lemire&avatarId=13132"
                        },
                        "displayName": "Daniel Lemire",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-10-17T19:39:53.619+0000",
                    "updated": "2018-10-17T19:39:53.619+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16667574",
                    "id": "16667574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Thanks for the heads-up [~lemire]. Two points:\r\n # the major interest in \"non-SIMD\" code is for readability and portability. So, the compiler being able to autovectorize it is an advantage in my mind\r\n # In the case of the code I posted on [https://github.com/lemire/fastvalidate-utf-8/issues/15] , I did the measurements with {{-O2}} to try and ensure that no vectorization happened.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-29T18:31:49.354+0000",
                    "updated": "2018-10-29T18:31:49.354+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16667659",
                    "id": "16667659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lemire",
                        "name": "lemire",
                        "key": "lemire",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=lemire&avatarId=13132",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lemire&avatarId=13132",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lemire&avatarId=13132",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lemire&avatarId=13132"
                        },
                        "displayName": "Daniel Lemire",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I totally understand and respect your distaste for intrinsic functions and explicit vectorization. There is work to help solve this problem, including work being done at the C++ standard level (and also within Java).\r\n\r\nYour fast ASCII approach, and it is indeed almost as fast as a version using vector instructions, is something I would qualify as being SWAR (SIMD Within A Register) so it is SIMD technically speaking, using a 64-bit word as if it were 8 distinct byte-sized values. I am sure you will agree that it is not optimized for readability... the simple code I just posted is probably better for readability. So I think that the readability issue you object to as to do, specifically, with intrinsic functions. The SWAR approach is indeed more portable, and that's an appealing advantage. I would definitively favor it over an approaching using mysterious-looking intrinsic functions, on portability grounds alone.\r\n\r\nAs for autovectorization... Indeed, I am pretty sure that GNU GCC does not autovectorize with -O2, so that's a good point. But that's also a shame (I prefer -O3 with GCC) because, in this instance, you can write naive code, optimized for simplicity and readability and let the optimizing compiler do the heavy lifting for  you. I think that using modern-day compilers without at least autovectorization leaves performance on the table... but even there, there is ample room for disagreements (e.g., as far as I can tell, the Go compiler does not autovectorize, though Java certainly does). Note that if you do rely on autovectorization, you have to make sure that the target machine supports the prefered instructions.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lemire",
                        "name": "lemire",
                        "key": "lemire",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=lemire&avatarId=13132",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lemire&avatarId=13132",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lemire&avatarId=13132",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lemire&avatarId=13132"
                        },
                        "displayName": "Daniel Lemire",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-10-29T19:52:13.921+0000",
                    "updated": "2018-10-29T19:52:13.921+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16667666",
                    "id": "16667666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "> Your fast ASCII approach, and it is indeed almost as fast as a version using vector instructions, is something I would qualify as being SWAR (SIMD Within A Register) so it is SIMD technically speaking\r\n\r\nIndeed. But using standard C++ operators instead of clumsily-named intrinsics is what makes it vastly more readable IMHO.\r\n\r\nIn other words, using a dedicated intrinsic-abstracting library (e.g. xsimd or Vc) would probably help. It would also help portability.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-29T19:57:38.784+0000",
                    "updated": "2018-10-29T19:57:38.784+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16667710",
                    "id": "16667710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lemire",
                        "name": "lemire",
                        "key": "lemire",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=lemire&avatarId=13132",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lemire&avatarId=13132",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lemire&avatarId=13132",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lemire&avatarId=13132"
                        },
                        "displayName": "Daniel Lemire",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "_In other words, using a dedicated intrinsic-abstracting library (e.g. xsimd or Vc) would probably help. It would also help portability._\r\n\r\n\u00a0\r\n\r\nI'd be interested in resuming this discussion after you have taken one of these libraries and worked on doing UTF-8 processing with it.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lemire",
                        "name": "lemire",
                        "key": "lemire",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=lemire&avatarId=13132",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lemire&avatarId=13132",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lemire&avatarId=13132",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lemire&avatarId=13132"
                        },
                        "displayName": "Daniel Lemire",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-10-29T20:25:57.512+0000",
                    "updated": "2018-10-29T20:25:57.512+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13192095/comment/16680657",
                    "id": "16680657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2916\n[https://github.com/apache/arrow/pull/2916]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-09T00:28:01.782+0000",
                    "updated": "2018-11-09T00:28:01.782+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|i3za9b:",
        "customfield_12314139": null
    }
}