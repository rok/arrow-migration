{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13215458",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458",
    "key": "ARROW-4560",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4560/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/198001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635\n \n \n   This will simplify the handling of the `type` argument. \r\n   \r\n   jira: https://issues.apache.org/jira/browse/ARROW-4560?filter=12344983\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T09:50:35.629+0000",
                    "updated": "2019-02-13T09:50:35.629+0000",
                    "started": "2019-02-13T09:50:35.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198001",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/198005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#issuecomment-463135335\n \n \n   Also planning to work on https://issues.apache.org/jira/browse/ARROW-3810 in this PR\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-13T09:59:23.797+0000",
                    "updated": "2019-02-13T09:59:23.797+0000",
                    "started": "2019-02-13T09:59:23.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198005",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/198656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#issuecomment-463620389\n \n \n   To handle the `type=` argument in `array()` we need to be able to infer arrow types from R objects, so I've added the `type()` function: \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   type(1:10)\r\n   #> arrow::Int32 \r\n   #> int32\r\n   type(1)\r\n   #> arrow::Float64 \r\n   #> double\r\n   type(\"\")\r\n   #> arrow::Utf8 \r\n   #> string\r\n   type(iris$Species)\r\n   #> arrow::DictionaryType \r\n   #> dictionary<values=string, indices=int8, ordered=0>\r\n   ```\r\n   \r\n   <sup>Created on 2019-02-14 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1.9000)</sup>\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-14T13:07:52.164+0000",
                    "updated": "2019-02-14T13:07:52.164+0000",
                    "started": "2019-02-14T13:07:52.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "198656",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/201175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#issuecomment-465494516\n \n \n   I'm now fairly confident about this PR. `array()` used to take `...` and rely on `vctrs` to first combine to a common type using `vctrs` type system, though the `.ptype`. I've changed that so that `array()` only take one vector `x` and the `type=` argument is an arrow logical type, e.g. `int32()`. \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   a <- array(1:10, type = int64())\r\n   a$type\r\n   #> arrow::Int64 \r\n   #> int64\r\n   a$as_vector()\r\n   #> integer64\r\n   #>  [1] 1  2  3  4  5  6  7  8  9  10\r\n   \r\n   a <- array(1:10, type = float64())\r\n   a$type\r\n   #> arrow::Float64 \r\n   #> double\r\n   a$as_vector()\r\n   #>  [1]  1  2  3  4  5  6  7  8  9 10\r\n   ```\r\n   \r\n   The type of array that is made is governed by the `type=` argument. If missing, the type is inferred from the data, e.g. \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   a <- array(rnorm(10))\r\n   a$type\r\n   #> arrow::Float64 \r\n   #> double\r\n   a$as_vector()\r\n   #>  [1]  0.48428301  0.74399694  0.48991163  0.35701469  0.60517996\r\n   #>  [6]  0.53463545  0.12579375  0.02414986 -0.49127583  0.17194012\r\n   ```\r\n   \r\n   The `chunked_array()` factory handles `...` and a type argument too: \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   a <- chunked_array(rnorm(10), 1:10)\r\n   a$type\r\n   #> arrow::Float64 \r\n   #> double\r\n   a$as_vector()\r\n   #>  [1]  1.64642028 -1.47423016  0.84996187  1.21151724 -1.52303727\r\n   #>  [6] -0.04387242 -0.47798708 -0.18693768 -0.98903429  0.30376938\r\n   #> [11]  1.00000000  2.00000000  3.00000000  4.00000000  5.00000000\r\n   #> [16]  6.00000000  7.00000000  8.00000000  9.00000000 10.00000000\r\n   \r\n   a <- chunked_array(1:5, 1:10, type = int64())\r\n   a$type\r\n   #> arrow::Int64 \r\n   #> int64\r\n   a$as_vector()\r\n   #> integer64\r\n   #>  [1] 1  2  3  4  5  1  2  3  4  5  6  7  8  9  10\r\n   ```\r\n   \r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T09:26:29.096+0000",
                    "updated": "2019-02-20T09:26:29.096+0000",
                    "started": "2019-02-20T09:26:29.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201175",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r260987012\n \n \n\n ##########\n File path: r/tests/testthat/test-type.R\n ##########\n @@ -0,0 +1,52 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"test-type\")\n+\n+test_that(\"type() gets the right type for arrow::Array\", {\n+  a <- array(1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() gets the right type for arrow::ChunkedArray\", {\n+  a <- chunked_array(1:10, 1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() infers from R type\", {\n+  expect_equal(type(1:10), int32())\n+  expect_equal(type(1), float64())\n \n Review comment:\n   The optics of this are a bit odd =)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-27T23:15:45.140+0000",
                    "updated": "2019-02-27T23:15:45.140+0000",
                    "started": "2019-02-27T23:15:45.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205465",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r260987187\n \n \n\n ##########\n File path: r/tests/testthat/test-type.R\n ##########\n @@ -0,0 +1,52 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"test-type\")\n+\n+test_that(\"type() gets the right type for arrow::Array\", {\n+  a <- array(1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() gets the right type for arrow::ChunkedArray\", {\n+  a <- chunked_array(1:10, 1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() infers from R type\", {\n+  expect_equal(type(1:10), int32())\n+  expect_equal(type(1), float64())\n+  expect_equal(type(TRUE), boolean())\n+  expect_equal(type(raw()), int8())\n+  expect_equal(type(\"\"), utf8())\n+  expect_equal(\n+    type(iris$Species),\n+    dictionary(int8(), array(levels(iris$Species)), FALSE)\n \n Review comment:\n   maybe test for ordered factors at some point also?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-27T23:15:45.140+0000",
                    "updated": "2019-02-27T23:15:45.140+0000",
                    "started": "2019-02-27T23:15:45.139+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205464",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r260987062\n \n \n\n ##########\n File path: r/tests/testthat/test-type.R\n ##########\n @@ -0,0 +1,52 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"test-type\")\n+\n+test_that(\"type() gets the right type for arrow::Array\", {\n+  a <- array(1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() gets the right type for arrow::ChunkedArray\", {\n+  a <- chunked_array(1:10, 1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() infers from R type\", {\n+  expect_equal(type(1:10), int32())\n+  expect_equal(type(1), float64())\n+  expect_equal(type(TRUE), boolean())\n+  expect_equal(type(raw()), int8())\n \n Review comment:\n   also slightly odd\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-27T23:15:45.173+0000",
                    "updated": "2019-02-27T23:15:45.173+0000",
                    "started": "2019-02-27T23:15:45.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205466",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-27T23:18:04.408+0000",
                    "updated": "2019-02-27T23:18:04.408+0000",
                    "started": "2019-02-27T23:18:04.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205467",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#issuecomment-468070248\n \n \n   Oops I missed array_from_vector.cpp in my code review because it was hidden. silly GitHub. I'll take a skim through anyway\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-27T23:18:45.325+0000",
                    "updated": "2019-02-27T23:18:45.325+0000",
                    "started": "2019-02-27T23:18:45.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205469",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r260988783\n \n \n\n ##########\n File path: r/src/array_from_vector.cpp\n ##########\n @@ -0,0 +1,1014 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+namespace arrow {\n+namespace r {\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer;\n+  std::shared_ptr<Buffer> offset_buffer;\n+  std::shared_ptr<Buffer> value_buffer;\n+\n+  // there is always an offset buffer\n+  STOP_IF_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n \n Review comment:\n   Seems like you might want to turn some of this into helper functions\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T01:13:26.336+0000",
                    "updated": "2019-02-28T01:13:26.336+0000",
                    "started": "2019-02-28T01:13:26.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205539",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r261012517\n \n \n\n ##########\n File path: r/src/array_from_vector.cpp\n ##########\n @@ -0,0 +1,1014 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+namespace arrow {\n+namespace r {\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer;\n+  std::shared_ptr<Buffer> offset_buffer;\n+  std::shared_ptr<Buffer> value_buffer;\n+\n+  // there is always an offset buffer\n+  STOP_IF_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_offset, null_bitmap_writer.Next()) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s == NA_STRING) {\n+        null_bitmap_writer.Clear();\n+        *p_offset = current_offset;\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_offset = current_offset += LENGTH(s);\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+  }\n+\n+  // ----- data buffer\n+  if (current_offset > 0) {\n+    STOP_IF_NOT_OK(AllocateBuffer(current_offset, &value_buffer));\n+    p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+    auto p_data = reinterpret_cast<char*>(value_buffer->mutable_data());\n+\n+    for (R_xlen_t i = 0; i < n; i++) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s != NA_STRING) {\n+        auto ni = LENGTH(s);\n+        std::copy_n(CHAR(s), ni, p_data);\n+        p_data += ni;\n+      }\n+    }\n+  }\n+\n+  auto data = ArrayData::Make(arrow::utf8(), n,\n+  {null_buffer, offset_buffer, value_buffer}, null_count, 0);\n+  return MakeArray(data);\n+}\n+\n+template <typename Type>\n+std::shared_ptr<Array> MakeFactorArrayImpl(Rcpp::IntegerVector_ factor, const std::shared_ptr<arrow::DataType>& type) {\n+  using value_type = typename arrow::TypeTraits<Type>::ArrayType::value_type;\n+  auto n = factor.size();\n+\n+  std::shared_ptr<Buffer> indices_buffer;\n+  STOP_IF_NOT_OK(AllocateBuffer(n * sizeof(value_type), &indices_buffer));\n+\n+  std::vector<std::shared_ptr<Buffer>> buffers{nullptr, indices_buffer};\n+\n+  int64_t null_count = 0;\n+  R_xlen_t i = 0;\n+  auto p_factor = factor.begin();\n+  auto p_indices = reinterpret_cast<value_type*>(indices_buffer->mutable_data());\n+  for (; i < n; i++, ++p_indices, ++p_factor) {\n+    if (*p_factor == NA_INTEGER) break;\n+    *p_indices = *p_factor - 1;\n+  }\n+\n+  if (i < n) {\n+    // there are NA's so we need a null buffer\n+    std::shared_ptr<Buffer> null_buffer;\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_indices, ++p_factor, null_bitmap_writer.Next()) {\n+      if (*p_factor == NA_INTEGER) {\n+        null_bitmap_writer.Clear();\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_indices = *p_factor - 1;\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+    buffers[0] = std::move(null_buffer);\n+  }\n+\n+  auto array_indices_data =\n+    ArrayData::Make(std::make_shared<Type>(), n, std::move(buffers), null_count, 0);\n+  auto array_indices = MakeArray(array_indices_data);\n+\n+  std::shared_ptr<Array> out;\n+  STOP_IF_NOT_OK(DictionaryArray::FromArrays(type, array_indices, &out));\n+  return out;\n+}\n+\n+std::shared_ptr<Array> MakeFactorArray(Rcpp::IntegerVector_ factor, const std::shared_ptr<arrow::DataType>& type) {\n+  SEXP levels = factor.attr(\"levels\");\n+  int n = Rf_length(levels);\n+  if (n < 128) {\n+    return MakeFactorArrayImpl<arrow::Int8Type>(factor, type);\n+  } else if (n < 32768) {\n+    return MakeFactorArrayImpl<arrow::Int16Type>(factor, type);\n+  } else {\n+    return MakeFactorArrayImpl<arrow::Int32Type>(factor, type);\n+  }\n+}\n+\n+template <typename T>\n+int64_t time_cast(T value);\n+\n+template <>\n+inline int64_t time_cast<int>(int value) {\n+  return static_cast<int64_t>(value) * 1000;\n+}\n+\n+template <>\n+inline int64_t time_cast<double>(double value) {\n+  return static_cast<int64_t>(value * 1000);\n+}\n+\n+}\n+}\n+\n+// ---------------- new api\n+\n+\n+\n+\n+\n+namespace arrow{\n+using internal::checked_cast;\n+\n+namespace internal{\n+\n+template <typename T, typename Target>\n+Status int_cast(T x, Target* out) {\n+  if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\n+    return Status::Invalid(\"Value is too large to fit in C integer type\");\n+  }\n+  *out = static_cast<Target>(x);\n+  return Status::OK();\n+}\n+\n+template <typename Int>\n+Status double_cast(Int x, double* out) {\n+  *out = static_cast<double>(x);\n+  return Status::OK();\n+}\n+\n+template <>\n+Status double_cast<int64_t>(int64_t x, double* out) {\n+  constexpr int64_t kDoubleMax = 1LL << 53;\n+  constexpr int64_t kDoubleMin = -(1LL << 53);\n+\n+  if (x < kDoubleMin || x > kDoubleMax) {\n+    return Status::Invalid(\"integer value \", x, \" is outside of the range exactly\",\n+      \" representable by a IEEE 754 double precision value\");\n+  }\n+  *out = static_cast<double>(x);\n+  return Status::OK();\n+}\n+\n+// used for int and int64_t\n+template <typename T>\n+Status float_cast(T x, float* out) {\n+  constexpr int64_t kHalfFloatMax = 1LL << 24;\n+  constexpr int64_t kHalfFloatMin = -(1LL << 24);\n+\n+  int64_t x64 = static_cast<int64_t>(x);\n+  if (x64 < kHalfFloatMin || x64 > kHalfFloatMax) {\n+    return Status::Invalid(\"integer value \", x, \" is outside of the range exactly\",\n+      \" representable by a IEEE 754 half precision value\");\n+  }\n+\n+  *out = static_cast<float>(x);\n+  return Status::OK();\n+}\n+\n+template <>\n+Status float_cast<double>(double x, float* out) {\n+  //  TODO: is there some sort of floating point overflow ?\n+  *out = static_cast<float>(x);\n+  return Status::OK();\n+}\n+\n+}\n+\n+namespace r{\n+\n+class VectorConverter;\n+\n+Status GetConverter(const std::shared_ptr<DataType>& type, std::unique_ptr<VectorConverter>* out);\n+\n+class VectorConverter {\n+public:\n+  virtual ~VectorConverter() = default;\n+\n+  virtual Status Init(ArrayBuilder* builder) = 0;\n+\n+  virtual Status Ingest(SEXP obj) = 0;\n+\n+  virtual Status GetResult(std::shared_ptr<arrow::Array>* result) {\n+    RETURN_NOT_OK(builder_->Finish(result));\n+    return Status::OK();\n \n Review comment:\n   you can `return builder_->Finish(result)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T01:13:26.345+0000",
                    "updated": "2019-02-28T01:13:26.345+0000",
                    "started": "2019-02-28T01:13:26.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205540",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r260988543\n \n \n\n ##########\n File path: r/src/array_from_vector.cpp\n ##########\n @@ -0,0 +1,1014 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+namespace arrow {\n+namespace r {\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer;\n+  std::shared_ptr<Buffer> offset_buffer;\n+  std::shared_ptr<Buffer> value_buffer;\n+\n+  // there is always an offset buffer\n+  STOP_IF_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_offset, null_bitmap_writer.Next()) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s == NA_STRING) {\n+        null_bitmap_writer.Clear();\n+        *p_offset = current_offset;\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_offset = current_offset += LENGTH(s);\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+  }\n+\n+  // ----- data buffer\n \n Review comment:\n   It is efficient to visit the string elements twice? I think you should have some benchmarks about this\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T01:13:26.350+0000",
                    "updated": "2019-02-28T01:13:26.350+0000",
                    "started": "2019-02-28T01:13:26.349+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205541",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/205542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r260991430\n \n \n\n ##########\n File path: r/src/array_from_vector.cpp\n ##########\n @@ -0,0 +1,1014 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+namespace arrow {\n+namespace r {\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer;\n+  std::shared_ptr<Buffer> offset_buffer;\n+  std::shared_ptr<Buffer> value_buffer;\n+\n+  // there is always an offset buffer\n+  STOP_IF_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_offset, null_bitmap_writer.Next()) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s == NA_STRING) {\n+        null_bitmap_writer.Clear();\n+        *p_offset = current_offset;\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_offset = current_offset += LENGTH(s);\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+  }\n+\n+  // ----- data buffer\n+  if (current_offset > 0) {\n+    STOP_IF_NOT_OK(AllocateBuffer(current_offset, &value_buffer));\n+    p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+    auto p_data = reinterpret_cast<char*>(value_buffer->mutable_data());\n+\n+    for (R_xlen_t i = 0; i < n; i++) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s != NA_STRING) {\n+        auto ni = LENGTH(s);\n+        std::copy_n(CHAR(s), ni, p_data);\n+        p_data += ni;\n+      }\n+    }\n+  }\n+\n+  auto data = ArrayData::Make(arrow::utf8(), n,\n+  {null_buffer, offset_buffer, value_buffer}, null_count, 0);\n+  return MakeArray(data);\n+}\n+\n+template <typename Type>\n+std::shared_ptr<Array> MakeFactorArrayImpl(Rcpp::IntegerVector_ factor, const std::shared_ptr<arrow::DataType>& type) {\n+  using value_type = typename arrow::TypeTraits<Type>::ArrayType::value_type;\n+  auto n = factor.size();\n+\n+  std::shared_ptr<Buffer> indices_buffer;\n+  STOP_IF_NOT_OK(AllocateBuffer(n * sizeof(value_type), &indices_buffer));\n+\n+  std::vector<std::shared_ptr<Buffer>> buffers{nullptr, indices_buffer};\n+\n+  int64_t null_count = 0;\n+  R_xlen_t i = 0;\n+  auto p_factor = factor.begin();\n+  auto p_indices = reinterpret_cast<value_type*>(indices_buffer->mutable_data());\n+  for (; i < n; i++, ++p_indices, ++p_factor) {\n+    if (*p_factor == NA_INTEGER) break;\n+    *p_indices = *p_factor - 1;\n+  }\n+\n+  if (i < n) {\n+    // there are NA's so we need a null buffer\n+    std::shared_ptr<Buffer> null_buffer;\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_indices, ++p_factor, null_bitmap_writer.Next()) {\n+      if (*p_factor == NA_INTEGER) {\n+        null_bitmap_writer.Clear();\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_indices = *p_factor - 1;\n+      }\n \n Review comment:\n   You might be able to write this without a branch\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-28T01:13:26.352+0000",
                    "updated": "2019-02-28T01:13:26.352+0000",
                    "started": "2019-02-28T01:13:26.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "205542",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/208718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r262888421\n \n \n\n ##########\n File path: r/tests/testthat/test-type.R\n ##########\n @@ -0,0 +1,52 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"test-type\")\n+\n+test_that(\"type() gets the right type for arrow::Array\", {\n+  a <- array(1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() gets the right type for arrow::ChunkedArray\", {\n+  a <- chunked_array(1:10, 1:10)\n+  expect_equal(type(a), a$type)\n+})\n+\n+test_that(\"type() infers from R type\", {\n+  expect_equal(type(1:10), int32())\n+  expect_equal(type(1), float64())\n \n Review comment:\n   yeah maybe that can be `infer_type()` or something\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T10:51:57.043+0000",
                    "updated": "2019-03-06T10:51:57.043+0000",
                    "started": "2019-03-06T10:51:57.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208718",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/208720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r262888865\n \n \n\n ##########\n File path: r/src/array_from_vector.cpp\n ##########\n @@ -0,0 +1,1014 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+namespace arrow {\n+namespace r {\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer;\n+  std::shared_ptr<Buffer> offset_buffer;\n+  std::shared_ptr<Buffer> value_buffer;\n+\n+  // there is always an offset buffer\n+  STOP_IF_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n \n Review comment:\n   Sure. We can revisit next time on this. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T10:53:14.892+0000",
                    "updated": "2019-03-06T10:53:14.892+0000",
                    "started": "2019-03-06T10:53:14.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208720",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/208726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r262892396\n \n \n\n ##########\n File path: r/src/array_from_vector.cpp\n ##########\n @@ -0,0 +1,1014 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+namespace arrow {\n+namespace r {\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer;\n+  std::shared_ptr<Buffer> offset_buffer;\n+  std::shared_ptr<Buffer> value_buffer;\n+\n+  // there is always an offset buffer\n+  STOP_IF_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_offset, null_bitmap_writer.Next()) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s == NA_STRING) {\n+        null_bitmap_writer.Clear();\n+        *p_offset = current_offset;\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_offset = current_offset += LENGTH(s);\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+  }\n+\n+  // ----- data buffer\n \n Review comment:\n   This is so we only `AllocateBuffer` the buffer with the final size we need. The `LENGTH()` here is quick, R strings know their size: https://purrple.cat/blog/2018/03/05/strings-know-their-own-length/\r\n   \r\n   Is the alternative to grow a buffer as we go ? Maybe there is a `StringArrayBuilder` I can use\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T11:02:21.695+0000",
                    "updated": "2019-03-06T11:02:21.695+0000",
                    "started": "2019-03-06T11:02:21.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208726",
                    "issueId": "13215458"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/worklog/208729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #3635: ARROW-4560: [R] array() needs to take single input, not ...\nURL: https://github.com/apache/arrow/pull/3635#discussion_r262893998\n \n \n\n ##########\n File path: r/src/array_from_vector.cpp\n ##########\n @@ -0,0 +1,1014 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+namespace arrow {\n+namespace r {\n+\n+std::shared_ptr<Array> MakeStringArray(StringVector_ vec) {\n+  R_xlen_t n = vec.size();\n+\n+  std::shared_ptr<Buffer> null_buffer;\n+  std::shared_ptr<Buffer> offset_buffer;\n+  std::shared_ptr<Buffer> value_buffer;\n+\n+  // there is always an offset buffer\n+  STOP_IF_NOT_OK(AllocateBuffer((n + 1) * sizeof(int32_t), &offset_buffer));\n+\n+  R_xlen_t i = 0;\n+  int current_offset = 0;\n+  int64_t null_count = 0;\n+  auto p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+  *p_offset = 0;\n+  for (++p_offset; i < n; i++, ++p_offset) {\n+    SEXP s = STRING_ELT(vec, i);\n+    if (s == NA_STRING) {\n+      // break as we are going to need a null_bitmap buffer\n+      break;\n+    }\n+\n+    *p_offset = current_offset += LENGTH(s);\n+  }\n+\n+  if (i < n) {\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_offset, null_bitmap_writer.Next()) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s == NA_STRING) {\n+        null_bitmap_writer.Clear();\n+        *p_offset = current_offset;\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_offset = current_offset += LENGTH(s);\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+  }\n+\n+  // ----- data buffer\n+  if (current_offset > 0) {\n+    STOP_IF_NOT_OK(AllocateBuffer(current_offset, &value_buffer));\n+    p_offset = reinterpret_cast<int32_t*>(offset_buffer->mutable_data());\n+    auto p_data = reinterpret_cast<char*>(value_buffer->mutable_data());\n+\n+    for (R_xlen_t i = 0; i < n; i++) {\n+      SEXP s = STRING_ELT(vec, i);\n+      if (s != NA_STRING) {\n+        auto ni = LENGTH(s);\n+        std::copy_n(CHAR(s), ni, p_data);\n+        p_data += ni;\n+      }\n+    }\n+  }\n+\n+  auto data = ArrayData::Make(arrow::utf8(), n,\n+  {null_buffer, offset_buffer, value_buffer}, null_count, 0);\n+  return MakeArray(data);\n+}\n+\n+template <typename Type>\n+std::shared_ptr<Array> MakeFactorArrayImpl(Rcpp::IntegerVector_ factor, const std::shared_ptr<arrow::DataType>& type) {\n+  using value_type = typename arrow::TypeTraits<Type>::ArrayType::value_type;\n+  auto n = factor.size();\n+\n+  std::shared_ptr<Buffer> indices_buffer;\n+  STOP_IF_NOT_OK(AllocateBuffer(n * sizeof(value_type), &indices_buffer));\n+\n+  std::vector<std::shared_ptr<Buffer>> buffers{nullptr, indices_buffer};\n+\n+  int64_t null_count = 0;\n+  R_xlen_t i = 0;\n+  auto p_factor = factor.begin();\n+  auto p_indices = reinterpret_cast<value_type*>(indices_buffer->mutable_data());\n+  for (; i < n; i++, ++p_indices, ++p_factor) {\n+    if (*p_factor == NA_INTEGER) break;\n+    *p_indices = *p_factor - 1;\n+  }\n+\n+  if (i < n) {\n+    // there are NA's so we need a null buffer\n+    std::shared_ptr<Buffer> null_buffer;\n+    STOP_IF_NOT_OK(AllocateBuffer(BitUtil::BytesForBits(n), &null_buffer));\n+    internal::FirstTimeBitmapWriter null_bitmap_writer(null_buffer->mutable_data(), 0, n);\n+\n+    // catch up\n+    for (R_xlen_t j = 0; j < i; j++, null_bitmap_writer.Next()) {\n+      null_bitmap_writer.Set();\n+    }\n+\n+    // resume offset filling\n+    for (; i < n; i++, ++p_indices, ++p_factor, null_bitmap_writer.Next()) {\n+      if (*p_factor == NA_INTEGER) {\n+        null_bitmap_writer.Clear();\n+        null_count++;\n+      } else {\n+        null_bitmap_writer.Set();\n+        *p_indices = *p_factor - 1;\n+      }\n+    }\n+\n+    null_bitmap_writer.Finish();\n+    buffers[0] = std::move(null_buffer);\n+  }\n+\n+  auto array_indices_data =\n+    ArrayData::Make(std::make_shared<Type>(), n, std::move(buffers), null_count, 0);\n+  auto array_indices = MakeArray(array_indices_data);\n+\n+  std::shared_ptr<Array> out;\n+  STOP_IF_NOT_OK(DictionaryArray::FromArrays(type, array_indices, &out));\n+  return out;\n+}\n+\n+std::shared_ptr<Array> MakeFactorArray(Rcpp::IntegerVector_ factor, const std::shared_ptr<arrow::DataType>& type) {\n+  SEXP levels = factor.attr(\"levels\");\n+  int n = Rf_length(levels);\n+  if (n < 128) {\n+    return MakeFactorArrayImpl<arrow::Int8Type>(factor, type);\n+  } else if (n < 32768) {\n+    return MakeFactorArrayImpl<arrow::Int16Type>(factor, type);\n+  } else {\n+    return MakeFactorArrayImpl<arrow::Int32Type>(factor, type);\n+  }\n+}\n+\n+template <typename T>\n+int64_t time_cast(T value);\n+\n+template <>\n+inline int64_t time_cast<int>(int value) {\n+  return static_cast<int64_t>(value) * 1000;\n+}\n+\n+template <>\n+inline int64_t time_cast<double>(double value) {\n+  return static_cast<int64_t>(value * 1000);\n+}\n+\n+}\n+}\n+\n+// ---------------- new api\n+\n+\n+\n+\n+\n+namespace arrow{\n+using internal::checked_cast;\n+\n+namespace internal{\n+\n+template <typename T, typename Target>\n+Status int_cast(T x, Target* out) {\n+  if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\n+    return Status::Invalid(\"Value is too large to fit in C integer type\");\n+  }\n+  *out = static_cast<Target>(x);\n+  return Status::OK();\n+}\n+\n+template <typename Int>\n+Status double_cast(Int x, double* out) {\n+  *out = static_cast<double>(x);\n+  return Status::OK();\n+}\n+\n+template <>\n+Status double_cast<int64_t>(int64_t x, double* out) {\n+  constexpr int64_t kDoubleMax = 1LL << 53;\n+  constexpr int64_t kDoubleMin = -(1LL << 53);\n+\n+  if (x < kDoubleMin || x > kDoubleMax) {\n+    return Status::Invalid(\"integer value \", x, \" is outside of the range exactly\",\n+      \" representable by a IEEE 754 double precision value\");\n+  }\n+  *out = static_cast<double>(x);\n+  return Status::OK();\n+}\n+\n+// used for int and int64_t\n+template <typename T>\n+Status float_cast(T x, float* out) {\n+  constexpr int64_t kHalfFloatMax = 1LL << 24;\n+  constexpr int64_t kHalfFloatMin = -(1LL << 24);\n+\n+  int64_t x64 = static_cast<int64_t>(x);\n+  if (x64 < kHalfFloatMin || x64 > kHalfFloatMax) {\n+    return Status::Invalid(\"integer value \", x, \" is outside of the range exactly\",\n+      \" representable by a IEEE 754 half precision value\");\n+  }\n+\n+  *out = static_cast<float>(x);\n+  return Status::OK();\n+}\n+\n+template <>\n+Status float_cast<double>(double x, float* out) {\n+  //  TODO: is there some sort of floating point overflow ?\n+  *out = static_cast<float>(x);\n+  return Status::OK();\n+}\n+\n+}\n+\n+namespace r{\n+\n+class VectorConverter;\n+\n+Status GetConverter(const std::shared_ptr<DataType>& type, std::unique_ptr<VectorConverter>* out);\n+\n+class VectorConverter {\n+public:\n+  virtual ~VectorConverter() = default;\n+\n+  virtual Status Init(ArrayBuilder* builder) = 0;\n+\n+  virtual Status Ingest(SEXP obj) = 0;\n+\n+  virtual Status GetResult(std::shared_ptr<arrow::Array>* result) {\n+    RETURN_NOT_OK(builder_->Finish(result));\n+    return Status::OK();\n \n Review comment:\n   Thanks. Will do in a next PR. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-06T11:06:56.157+0000",
                    "updated": "2019-03-06T11:06:56.157+0000",
                    "started": "2019-03-06T11:06:56.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "208729",
                    "issueId": "13215458"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@459cb9a6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76b55d98[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4454779[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@584093f4[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b436ace[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5ba990fd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75797a7e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@297a9816[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@692f82ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e96c94d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4082e66b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3d456c45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 27 23:17:53 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-27T23:17:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4560/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-02-13T09:25:11.000+0000",
        "updated": "2019-03-06T11:06:56.000+0000",
        "timeoriginalestimate": null,
        "description": "The `array()` factory takes `...` and this makes this harder than it needs to be because then we have two competing views on type:\u00a0\r\n\r\n\u00a0- `vctrs::vec_c(.ptype=)` which uses R specific typing system\r\n\r\n\u00a0- the arrow type\u00a0\r\n\r\n\u00a0\r\n\r\nSo `array()` should really take a single thing for `data`, which may be the result of a `vctrs::vec_c(...)` if we do want R type promotion.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] array() needs to take single input, not ...",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13215458/comment/16779878",
                    "id": "16779878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3635\n[https://github.com/apache/arrow/pull/3635]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-27T23:17:53.903+0000",
                    "updated": "2019-02-27T23:17:53.903+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0xnk:",
        "customfield_12314139": null
    }
}