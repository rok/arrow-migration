{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13329950",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950",
    "key": "ARROW-10135",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "parquet",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348647",
                "id": "12348647",
                "name": "1.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2020-08-21"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rdettai",
            "name": "rdettai",
            "key": "rdettai",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rdettai&avatarId=42994",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rdettai&avatarId=42994",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rdettai&avatarId=42994",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rdettai&avatarId=42994"
            },
            "displayName": "R\u00e9mi Dettai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rdettai",
            "name": "rdettai",
            "key": "rdettai",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rdettai&avatarId=42994",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rdettai&avatarId=42994",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rdettai&avatarId=42994",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rdettai&avatarId=42994"
            },
            "displayName": "R\u00e9mi Dettai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rdettai",
            "name": "rdettai",
            "key": "rdettai",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rdettai&avatarId=42994",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rdettai&avatarId=42994",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rdettai&avatarId=42994",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rdettai&avatarId=42994"
            },
            "displayName": "R\u00e9mi Dettai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10135/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 45,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/492483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai opened a new pull request #8299:\nURL: https://github.com/apache/arrow/pull/8299\n\n\n   https://issues.apache.org/jira/browse/ARROW-10135\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T14:21:02.962+0000",
                    "updated": "2020-09-29T14:21:02.962+0000",
                    "started": "2020-09-29T14:21:02.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492483",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/492484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai closed pull request #8299:\nURL: https://github.com/apache/arrow/pull/8299\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T14:22:39.371+0000",
                    "updated": "2020-09-29T14:22:39.371+0000",
                    "started": "2020-09-29T14:22:39.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492484",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/492485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai opened a new pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300\n\n\n   https://issues.apache.org/jira/browse/ARROW-10135\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T14:24:12.472+0000",
                    "updated": "2020-09-29T14:24:12.472+0000",
                    "started": "2020-09-29T14:24:12.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492485",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/492487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-700742388\n\n\n   https://issues.apache.org/jira/browse/ARROW-10135\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T14:27:33.761+0000",
                    "updated": "2020-09-29T14:27:33.761+0000",
                    "started": "2020-09-29T14:27:33.761+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492487",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/492488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-700744261\n\n\n   I first moved the footer parsing out of the `SerializedFileReader`. I will now try to move as much logic as possible from the `SerializedFileReader` and `SerializedRowGroupReader` traits to the more generic `FileReader` and `RowGroupReader` traits\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T14:30:08.581+0000",
                    "updated": "2020-09-29T14:30:08.581+0000",
                    "started": "2020-09-29T14:30:08.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492488",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/492489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai edited a comment on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-700744261\n\n\n   I first moved the footer parsing out of the `SerializedFileReader`. I will now try to move as much logic as possible from the `SerializedFileReader` and `SerializedRowGroupReader` implems to the `FileReader` and `RowGroupReader` traits\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T14:30:32.785+0000",
                    "updated": "2020-09-29T14:30:32.785+0000",
                    "started": "2020-09-29T14:30:32.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492489",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/493116",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-701575470\n\n\n   from https://issues.apache.org/jira/browse/ARROW-10135, it seems like your goal is to support reading parquet files from sources other than files. \r\n   \r\n   I wonder if you have tried implementing the `ParquetReader` trait for another data source?\r\n   \r\n   Then you can create a file reader from that other source like:\r\n   ```\r\n   let source = ThingThatImplementsParquetReader::new();\r\n   let file_reader = SerializedFileReader::new(source);\r\n   ...\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T18:47:27.742+0000",
                    "updated": "2020-09-30T18:47:27.742+0000",
                    "started": "2020-09-30T18:47:27.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493116",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/493117",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb edited a comment on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-701575470\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T18:48:11.189+0000",
                    "updated": "2020-09-30T18:48:11.189+0000",
                    "started": "2020-09-30T18:48:11.189+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493117",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/496395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-704796994\n\n\n   The discussion with @alamb about the need for an intermediate layer when reading a parquet file is discussed on [JIRA](https://issues.apache.org/jira/browse/ARROW-10135)\r\n   \r\n   The highlights of the current implementation:\r\n   - The public API has changed, but keeps working for `File` and `Path` thanks to the corresponding trait implementations. `Cursor` cannot be used any more because it requires data copies when being passed around with `clone()` (this was already the case before in the implem of `TryClone` for `Cursor<Vec<u8>>`).\r\n   - I have added a custom cursor type (`SliceableCursor`) that allows to generate cursor slices without cloning the underlying data. This can be used to read in-memory files. I guess it could be made more generic, but this would be for convenience only and I find it simple and clear as is.\r\n   - I have separated the implem (`SerializedFileReader`, `SerializedRowGroupReader`...) from the traits (`FileReader`, `RowGroupReader`...) for more clarity. I know that this is not how the code base is structured in the rest of the project but I tend to get lost in these huge files with millions of struct/trait/impl blocks. I'm very much open to suggestion about this point!\r\n   - There is nothing about async/parallelism yet, I have to think about it a little bit.\r\n   \r\n   @alamb : can you take a look at the new `ChunckReader` trait and how it is integrated to the rest of the reader? What do you think about it? \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T09:00:35.863+0000",
                    "updated": "2020-10-07T09:00:35.863+0000",
                    "started": "2020-10-07T09:00:35.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496395",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/496473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#discussion_r500903617\n\n\n\n##########\nFile path: rust/parquet/src/util/cursor.rs\n##########\n@@ -0,0 +1,203 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp;\n+use std::io::{self, Error, ErrorKind, Read, Seek, SeekFrom};\n+use std::rc::Rc;\n+\n+/// This is object to use if your file is already in memory.\n+/// The sliceable cursor is similar to std::io::Cursor, except that it makes it easy to create \"cursor slices\".\n+/// To achieve this, it uses Rc instead of shared references. Indeed reference fields are painfull\n\nReview comment:\n       I would personally suggest moving to `Arc` here rather than `Rc` across the board in the Parquet reader. I suggest `Arc` to \"future proof\" the code as `Arc` almost always is needed with `async` and multi-threading (as `Rc` doesn't implement `Send`)\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -19,34 +19,48 @@\n //! readers to read individual column chunks, or access record iterator.\n \n use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n+    boxed::Box,\n+    io::{Read, Seek},\n     rc::Rc,\n };\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n+/// It's mainly used to read the metadata, which is at the end of the source.\n+#[allow(clippy::len_without_is_empty)]\n+pub trait Length {\n+    /// Returns the amount of bytes of the inner source.\n+    fn len(&self) -> u64;\n+}\n+\n+pub trait ReadChunck: Read + Length {}\n+pub trait ReadSeekChunck: ReadChunck + Seek {}\n+impl<T: Read + Length> ReadChunck for T {}\n\nReview comment:\n       I like this pattern (of automatically implementing the combined trait for anything that implements `Read` + `Length` (I struggled doing that with FileReader when working with the Parquet API earlier in my Rust days)\n\n##########\nFile path: rust/parquet/src/util/io.rs\n##########\n@@ -17,11 +17,31 @@\n \n use std::{cell::RefCell, cmp, io::*};\n \n-use crate::file::{reader::ParquetReader, writer::ParquetWriter};\n+use crate::file::{reader::Length, writer::ParquetWriter};\n \n const DEFAULT_BUF_SIZE: usize = 8 * 1024;\n \n // ----------------------------------------------------------------------\n+\n+/// TryClone tries to clone the type and should maintain the `Seek` position of the given\n\nReview comment:\n       \ud83d\udc4d  for comments\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T10:35:03.412+0000",
                    "updated": "2020-10-07T10:35:03.412+0000",
                    "started": "2020-10-07T10:35:03.412+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496473",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/496605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-704940018\n\n\n   Thanks a lot for your time and comments! \r\n   \r\n   > using a more standard spelling of Chunk rather than Chunck\r\n   \r\n   You mean \"a more correct spelling\" \ud83d\ude09 \r\n   \r\n   > I wonder how important separating out `get_read` and `get_read_seek` is\r\n   \r\n   Right, I was just looking at this. There might be some simplifications that could be implemented here.\r\n   \r\n   > I think we should begin moving the parquet reader towards using Arc\r\n   \r\n   That is true, but there is a major problem with the way `FileSource` works in that case. The fact that we share a single file handle between instances (because it is the behavior of `File::clone()`) prevents us from accessing concurrently a same file.\r\n   \r\n   Give me a bit of time, I will try to fix these. I'll come back to you if I have further doubts. Thanks again !!!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T13:35:25.386+0000",
                    "updated": "2020-10-07T13:35:25.386+0000",
                    "started": "2020-10-07T13:35:25.385+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496605",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/497435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-705682739\n\n\n   @alamb I think I addressed most of your concerns. The only one that remains is the necessity to prepare for async, but I have digged a little bit into and I think that tackling this properly will require work that is not really in the scope of this PR. There is more to it than converting Rc to Arc because of this shared handle to the file. Lets do that work in an other PR associated to a sub-tasks of [ARROW-9464](https://issues.apache.org/jira/browse/ARROW-9464) or simply associated to [ARROW-9674](https://issues.apache.org/jira/browse/ARROW-9674). I will work on it next week, but until then we can validate and merge this one.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T16:27:43.332+0000",
                    "updated": "2020-10-08T16:27:43.332+0000",
                    "started": "2020-10-08T16:27:43.331+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497435",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/497566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-705805870\n\n\n   > The only one that remains is the necessity to prepare for async, but I have digged a little bit into and I think that tackling this properly will require work that is not really in the scope of this PR\r\n   \r\n   I agree\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-08T20:29:34.975+0000",
                    "updated": "2020-10-08T20:29:34.975+0000",
                    "started": "2020-10-08T20:29:34.975+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497566",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/497877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#discussion_r502329941\n\n\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n\nReview comment:\n       ```suggestion\r\n   /// Length should return the total number of bytes in the input source.\r\n   ```\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n+/// It's mainly used to read the metadata, which is at the end of the source.\n+#[allow(clippy::len_without_is_empty)]\n+pub trait Length {\n+    /// Returns the amount of bytes of the inner source.\n+    fn len(&self) -> u64;\n+}\n+\n+/// The ChunkReader trait generates readers of chunks of a source.\n+/// For a file system reader, each chunk might contain a clone of File bounded on a given range.\n+/// For an object store reader, each read can be mapped to a range request.\n+pub trait ChunkReader: Length {\n+    type T: Read;\n+    /// get a serialy readeable slice of the current reader\n+    /// This should fail if the slice exceeds the current bounds\n+    fn get_read(&self, start: u64, length: usize) -> Result<Self::T>;\n+}\n \n // ----------------------------------------------------------------------\n\nReview comment:\n       For backwards compatibility in other projects, I think we need to allow  `use parquet::file::reader::TryClone` to keep working (`TryClone` moved to `util::io::TryClone`, and appears not to be public anymore). \r\n   \r\n   Perhap something like this (untested):\r\n   ```suggestion\r\n   pub use super::TryClone;\r\n   // ----------------------------------------------------------------------\r\n   ```\r\n   \r\n   When I tried to compile an in-house project with this branch I got the following error: \r\n   \r\n   ```\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n     --> delorean_parquet/src/lib.rs:13:28\r\n      |\r\n   13 |     file::reader::{Length, TryClone},\r\n      |                            ^^^^^^^^ no `TryClone` in `parquet::file::reader`\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n   ```\r\n   \r\n   When I tried to use the copy in `util::io` I got: \r\n   \r\n   ```\r\n   error[E0603]: module `util` is private\r\n     --> delorean_parquet/src/lib.rs:14:5\r\n      |\r\n   14 |     util::io::{TryClone},\r\n      |     ^^^^ private module\r\n      |\r\n   \r\n   ```\r\n   \r\n   When I used the import in `seriailized_reader` I got a similar error: \r\n   \r\n   ```\r\n   error[E0603]: trait `TryClone` is private\r\n     --> delorean_parquet/src/lib.rs:14:30\r\n      |\r\n   14 |     file::serialized_reader::TryClone,\r\n      |                              ^^^^^^^^ private trait\r\n      |\r\n   ```\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n+/// It's mainly used to read the metadata, which is at the end of the source.\n+#[allow(clippy::len_without_is_empty)]\n+pub trait Length {\n+    /// Returns the amount of bytes of the inner source.\n+    fn len(&self) -> u64;\n+}\n+\n+/// The ChunkReader trait generates readers of chunks of a source.\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/parquet/src/util/cursor.rs\n##########\n@@ -0,0 +1,203 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       I discovered above that the entire `util` module is not public -- \r\n   \r\n   https://github.com/apache/arrow/blob/master/rust/parquet/src/lib.rs#L39\r\n   \r\n   ```\r\n   #[macro_use]\r\n   mod util;\r\n   ```\r\n   \r\n   So none of these pub traits can be used outside this crate at the moment\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T10:52:25.436+0000",
                    "updated": "2020-10-09T10:52:25.436+0000",
                    "started": "2020-10-09T10:52:25.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497877",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/497878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#discussion_r502332349\n\n\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n+/// It's mainly used to read the metadata, which is at the end of the source.\n+#[allow(clippy::len_without_is_empty)]\n+pub trait Length {\n+    /// Returns the amount of bytes of the inner source.\n+    fn len(&self) -> u64;\n+}\n+\n+/// The ChunkReader trait generates readers of chunks of a source.\n+/// For a file system reader, each chunk might contain a clone of File bounded on a given range.\n+/// For an object store reader, each read can be mapped to a range request.\n+pub trait ChunkReader: Length {\n+    type T: Read;\n+    /// get a serialy readeable slice of the current reader\n+    /// This should fail if the slice exceeds the current bounds\n+    fn get_read(&self, start: u64, length: usize) -> Result<Self::T>;\n+}\n \n // ----------------------------------------------------------------------\n\nReview comment:\n       \r\n   When I tried to compile an in-house project with this branch I got the following error: \r\n   \r\n   ```\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n     --> delorean_parquet/src/lib.rs:13:28\r\n      |\r\n   13 |     file::reader::{Length, TryClone},\r\n      |                            ^^^^^^^^ no `TryClone` in `parquet::file::reader`\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n   ```\r\n   \r\n   When I tried to use the copy in `util::io` I got: \r\n   \r\n   ```\r\n   error[E0603]: module `util` is private\r\n     --> delorean_parquet/src/lib.rs:14:5\r\n      |\r\n   14 |     util::io::{TryClone},\r\n      |     ^^^^ private module\r\n      |\r\n   \r\n   ```\r\n   \r\n   When I used the import in `seriailized_reader` I got a similar error: \r\n   \r\n   ```\r\n   error[E0603]: trait `TryClone` is private\r\n     --> delorean_parquet/src/lib.rs:14:30\r\n      |\r\n   14 |     file::serialized_reader::TryClone,\r\n      |                              ^^^^^^^^ private trait\r\n      |\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T10:52:58.649+0000",
                    "updated": "2020-10-09T10:52:58.649+0000",
                    "started": "2020-10-09T10:52:58.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "497878",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/498444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#discussion_r502329941\n\n\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n\nReview comment:\n       ```suggestion\r\n   /// Length should return the total number of bytes in the input source.\r\n   ```\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n+/// It's mainly used to read the metadata, which is at the end of the source.\n+#[allow(clippy::len_without_is_empty)]\n+pub trait Length {\n+    /// Returns the amount of bytes of the inner source.\n+    fn len(&self) -> u64;\n+}\n+\n+/// The ChunkReader trait generates readers of chunks of a source.\n+/// For a file system reader, each chunk might contain a clone of File bounded on a given range.\n+/// For an object store reader, each read can be mapped to a range request.\n+pub trait ChunkReader: Length {\n+    type T: Read;\n+    /// get a serialy readeable slice of the current reader\n+    /// This should fail if the slice exceeds the current bounds\n+    fn get_read(&self, start: u64, length: usize) -> Result<Self::T>;\n+}\n \n // ----------------------------------------------------------------------\n\nReview comment:\n       For backwards compatibility in other projects, I think we need to allow  `use parquet::file::reader::TryClone` to keep working (`TryClone` moved to `util::io::TryClone`, and appears not to be public anymore). \r\n   \r\n   Perhap something like this (untested):\r\n   ```suggestion\r\n   pub use super::TryClone;\r\n   // ----------------------------------------------------------------------\r\n   ```\r\n   \r\n   When I tried to compile an in-house project with this branch I got the following error: \r\n   \r\n   ```\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n     --> delorean_parquet/src/lib.rs:13:28\r\n      |\r\n   13 |     file::reader::{Length, TryClone},\r\n      |                            ^^^^^^^^ no `TryClone` in `parquet::file::reader`\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n   ```\r\n   \r\n   When I tried to use the copy in `util::io` I got: \r\n   \r\n   ```\r\n   error[E0603]: module `util` is private\r\n     --> delorean_parquet/src/lib.rs:14:5\r\n      |\r\n   14 |     util::io::{TryClone},\r\n      |     ^^^^ private module\r\n      |\r\n   \r\n   ```\r\n   \r\n   When I used the import in `seriailized_reader` I got a similar error: \r\n   \r\n   ```\r\n   error[E0603]: trait `TryClone` is private\r\n     --> delorean_parquet/src/lib.rs:14:30\r\n      |\r\n   14 |     file::serialized_reader::TryClone,\r\n      |                              ^^^^^^^^ private trait\r\n      |\r\n   ```\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n+/// It's mainly used to read the metadata, which is at the end of the source.\n+#[allow(clippy::len_without_is_empty)]\n+pub trait Length {\n+    /// Returns the amount of bytes of the inner source.\n+    fn len(&self) -> u64;\n+}\n+\n+/// The ChunkReader trait generates readers of chunks of a source.\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/parquet/src/util/cursor.rs\n##########\n@@ -0,0 +1,203 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n\nReview comment:\n       I discovered above that the entire `util` module is not public -- \r\n   \r\n   https://github.com/apache/arrow/blob/master/rust/parquet/src/lib.rs#L39\r\n   \r\n   ```\r\n   #[macro_use]\r\n   mod util;\r\n   ```\r\n   \r\n   So none of these pub traits can be used outside this crate at the moment\n\n##########\nFile path: rust/parquet/src/file/reader.rs\n##########\n@@ -18,35 +18,37 @@\n //! Contains file reader API and provides methods to access file metadata, row group\n //! readers to read individual column chunks, or access record iterator.\n \n-use std::{\n-    convert::TryFrom,\n-    fs::File,\n-    io::{BufReader, Cursor, Read, Seek, SeekFrom},\n-    path::Path,\n-    rc::Rc,\n-};\n+use std::{boxed::Box, io::Read, rc::Rc};\n \n-use byteorder::{ByteOrder, LittleEndian};\n-use parquet_format::{\n-    ColumnOrder as TColumnOrder, FileMetaData as TFileMetaData, PageHeader, PageType,\n-};\n-use thrift::protocol::TCompactInputProtocol;\n-\n-use crate::basic::{ColumnOrder, Compression, Encoding, Type};\n use crate::column::page::PageIterator;\n-use crate::column::{\n-    page::{Page, PageReader},\n-    reader::{ColumnReader, ColumnReaderImpl},\n-};\n-use crate::compression::{create_codec, Codec};\n+use crate::column::{page::PageReader, reader::ColumnReader};\n use crate::errors::{ParquetError, Result};\n-use crate::file::{metadata::*, statistics, FOOTER_SIZE, PARQUET_MAGIC};\n+use crate::file::metadata::*;\n+pub use crate::file::serialized_reader::{SerializedFileReader, SerializedPageReader};\n use crate::record::reader::RowIter;\n-use crate::record::Row;\n-use crate::schema::types::{\n-    self, ColumnDescPtr, SchemaDescPtr, SchemaDescriptor, Type as SchemaType,\n-};\n-use crate::util::{io::FileSource, memory::ByteBufferPtr};\n+use crate::schema::types::{ColumnDescPtr, SchemaDescPtr, Type as SchemaType};\n+\n+use crate::basic::Type;\n+\n+use crate::column::reader::ColumnReaderImpl;\n+\n+/// Length should return the amount of bytes that implementor contains.\n+/// It's mainly used to read the metadata, which is at the end of the source.\n+#[allow(clippy::len_without_is_empty)]\n+pub trait Length {\n+    /// Returns the amount of bytes of the inner source.\n+    fn len(&self) -> u64;\n+}\n+\n+/// The ChunkReader trait generates readers of chunks of a source.\n+/// For a file system reader, each chunk might contain a clone of File bounded on a given range.\n+/// For an object store reader, each read can be mapped to a range request.\n+pub trait ChunkReader: Length {\n+    type T: Read;\n+    /// get a serialy readeable slice of the current reader\n+    /// This should fail if the slice exceeds the current bounds\n+    fn get_read(&self, start: u64, length: usize) -> Result<Self::T>;\n+}\n \n // ----------------------------------------------------------------------\n\nReview comment:\n       \r\n   When I tried to compile an in-house project with this branch I got the following error: \r\n   \r\n   ```\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n     --> delorean_parquet/src/lib.rs:13:28\r\n      |\r\n   13 |     file::reader::{Length, TryClone},\r\n      |                            ^^^^^^^^ no `TryClone` in `parquet::file::reader`\r\n   \r\n   error[E0432]: unresolved import `delorean_parquet::parquet::file::reader::TryClone`\r\n   ```\r\n   \r\n   When I tried to use the copy in `util::io` I got: \r\n   \r\n   ```\r\n   error[E0603]: module `util` is private\r\n     --> delorean_parquet/src/lib.rs:14:5\r\n      |\r\n   14 |     util::io::{TryClone},\r\n      |     ^^^^ private module\r\n      |\r\n   \r\n   ```\r\n   \r\n   When I used the import in `seriailized_reader` I got a similar error: \r\n   \r\n   ```\r\n   error[E0603]: trait `TryClone` is private\r\n     --> delorean_parquet/src/lib.rs:14:30\r\n      |\r\n   14 |     file::serialized_reader::TryClone,\r\n      |                              ^^^^^^^^ private trait\r\n      |\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:07:33.691+0000",
                    "updated": "2020-10-09T14:07:33.691+0000",
                    "started": "2020-10-09T14:07:33.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498444",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/498452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rdettai commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-705682739\n\n\n   @alamb I think I addressed most of your concerns. The only one that remains is the necessity to prepare for async, but I have digged a little bit into and I think that tackling this properly will require work that is not really in the scope of this PR. There is more to it than converting Rc to Arc because of this shared handle to the file. Lets do that work in an other PR associated to a sub-tasks of [ARROW-9464](https://issues.apache.org/jira/browse/ARROW-9464) or simply associated to [ARROW-9674](https://issues.apache.org/jira/browse/ARROW-9674). I will work on it next week, but until then we can validate and merge this one.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-09T14:08:32.118+0000",
                    "updated": "2020-10-09T14:08:32.118+0000",
                    "started": "2020-10-09T14:08:32.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498452",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/498926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-706546221\n\n\n   Sorry I don't have more time to spend on this -- I am still struggling to get my existing project code to compile against this branch and this PR is pretty massive to digest. \r\n   \r\n   One other thing I found this morning is that the `TryClone` trait is still used in `ParquetWriter` so I do think it needs to be publically exported somehow (or we need to refactor the writer)\r\n   \r\n   I have also been trying to figure out if the `ParquetReader` trait is still needed after this refactoring.\r\n   \r\n   So I guess all in all my conclusion is that the ideas behind this PR are good but:\r\n   1. It is hard to review given its size\r\n   2. There will likely be a fairly substantial backwards incompatible change for anyone using the ParquetReader in their project\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-10T13:03:21.911+0000",
                    "updated": "2020-10-10T13:03:21.911+0000",
                    "started": "2020-10-10T13:03:21.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498926",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/498928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-706548010\n\n\n   I'll also only be able to review this in the next 2 week(end)s, and I'd like to go through it before it's merged.\r\n   \r\n   I'm also going to reach out to a few active crates that depend on Parquet, so I can solicit their feedback on these changes.\r\n   I anticipate a lot of changes + improvements for the 3.0.0 release, so if we can manage that without causing a lot of breakage; I think we should go for it.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-10T13:17:54.797+0000",
                    "updated": "2020-10-10T13:17:54.797+0000",
                    "started": "2020-10-10T13:17:54.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "498928",
                    "issueId": "13329950"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/worklog/499065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8300:\nURL: https://github.com/apache/arrow/pull/8300#issuecomment-706680795\n\n\n   I should probably make clear that anyone using the `SerializedFileReader` with `File` will likely have no issues (as @rdettai  has done a great job of keeping the that level interface consistent. Any project that uses a custom input source (as we did in my internal project) by implementing `ParquetReader` and associated traits may have more to change.\r\n   \r\n   I actually think the changes in this PR will make such custom input sources easier to write in the future, but existing code will have to be rejiggered.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-11T10:06:43.605+0000",
                    "updated": "2020-10-11T10:06:43.605+0000",
                    "started": "2020-10-11T10:06:43.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "499065",
                    "issueId": "13329950"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 27000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5bd4c529[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e85e5d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@254e3974[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@63929136[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45aea025[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6fdcfad3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b0debc5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4c61d6b3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c7ef892[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@74fc8fac[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20fb1135[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@626d8fd7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 27000,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Oct 25 20:26:27 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-10-25T20:25:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10135/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2020-09-29T13:51:39.000+0000",
        "updated": "2020-12-24T19:09:44.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, the Parquet reader is very strongly tied to file system reads. This makes it hard to add other sources. For instance, to implement S3, we would need a reader that loads entire columns at once rather than buffered reads of a few Ko.\r\n\r\nTo improve modularity, we could try to move as much logic as possible to the generic traits (FileReader, RowGroupReader...) and reduce the code in the implementing structs (SerializedFileReader, SerializedRowGroupReader...) to the part that is specific to file/buffered reads.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 27000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [Parquet] Refactor file module to help adding sources",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17204855",
                    "id": "17204855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "[~chaosun] [~nevi_me] [~alamb] [~jorgecarleitao] I think you may be interested in this one",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-30T16:19:13.801+0000",
                    "updated": "2020-09-30T16:19:13.801+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17204856",
                    "id": "17204856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Personally, I agree with the direction of this. Given that DataFusion is now async, we should at least bear this in mind as we do this refactoring.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-30T16:20:08.206+0000",
                    "updated": "2020-09-30T16:20:08.206+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17204955",
                    "id": "17204955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I also agree with keeping as much IO logic in the generic traits. \r\n\r\nHowever, I think you could implement an S3 reader that implements `ParquetReader` and avoid fetching the entire file at once without changing how the parquet reader is implemented. \r\n\r\n\r\nDespite the trait and struct names, which I find confusing,  I don't think `SerializedFileReader` [link|https://github.com/apache/arrow/blob/master/rust/parquet/src/file/reader.rs#L158]  is tied to files per-se -- it is implemented in terms of a `ParquetReader` \r\n\r\nParquetReader is defined as {{ParquetReader: Read + Seek + Length + TryClone {} }} -- in other words it is defined in terms of the standard rust IO traits Read and Seek and also requires knowledge of the input length as well as the ability to clone itself (so multiple read streams can be read in parallel).\r\n\r\nIf you implemented ParquetReader for your S3 reader you should be able to read parquet files in a streaming fashion just fine.\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-09-30T18:42:15.619+0000",
                    "updated": "2020-09-30T18:42:15.619+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17205356",
                    "id": "17205356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rdettai",
                        "name": "rdettai",
                        "key": "rdettai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rdettai&avatarId=42994",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rdettai&avatarId=42994",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rdettai&avatarId=42994",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rdettai&avatarId=42994"
                        },
                        "displayName": "R\u00e9mi Dettai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Hi [~alamb] ! Thanks for your insight. The problem when you use S3 (or any http blob storage) is that you typically want to query large chunks at once because each call is costly and has high latency. I am not talking about optimization here, calling tiny ranges from a blob storage is just baaaaad ;) (and using a buffered reader is also very sub-optimal).\r\n\r\nIn the parquet from S3 use case, you'll want to download the footer at once then entire columns at each call. This is not compatible with the standard IO traits that are typically tailored to read only the amount of data that is needed for the current operation: read footer length+magic bytes, deserialize row group header, deserialize page... The problem is the same in the C++ implem, but it was left to the `ParquetFileReader` implementation to fetch those full chunks at once when calling `ReadAt(position,nbytes)` IO interface. This is not the case in Rust, and I don't believe it is a good solution: it is hidden in the implementation how the IO API will be called and nothing guards from updates in the `FileReader` to break it again.\r\n\r\nWhat I'm working on is introducing an intermediate `ChunckReader` trait object that generates \"sliced readers\" implementing the standard IO traits. These \"sliced readers\" will be of the maximum size (e.g. entire footer, entire columns) but the rest of the implementation can keep using normal \"small reads\". These brings together the best of two worlds: the standard FS reader can keep working with its buffered reader with barely no overhead and blob storage clients can get large ranges at once then read the response stream progressively.\r\n\r\n[~andygrove] It is not entirely clear to me how to introduce async efficiently into this, but I will try to figure it out as I go.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rdettai",
                        "name": "rdettai",
                        "key": "rdettai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rdettai&avatarId=42994",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rdettai&avatarId=42994",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rdettai&avatarId=42994",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rdettai&avatarId=42994"
                        },
                        "displayName": "R\u00e9mi Dettai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-10-01T08:11:03.980+0000",
                    "updated": "2020-10-01T08:11:03.980+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17205405",
                    "id": "17205405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~rdettai] -- It seems to me that buffering (either in memory or on the local disk) is going to be required in any general purpose solution when reading from object store. \r\n\r\nEven if you implement a ChunkReader that reads entire column chunks, for many parquet files that will result in a substantial number of calls to S3 (e.g. a 100 column parquet file in 10 row groups will be at least 1001 S3 calls, in a naive implementation).\r\n\r\nAnother way to achieve similar outcome that might result in a less intrusive code change could be to extend SerializedReader to pass \"hints\" somehow to the underlying ParquetReader of what I/O will be necessary soon (e.g. call \"read_hint(chunk_start, chunk_len)\" so you could start the S3 I/O for the entire chunk)\r\n\r\nAdding some way to avoid the SerializedReader's direct use of BufferedReader definitely seems like a good idea (perhaps factor out into `RawSerializedReader` that doesn't doesn't use BufferedReader and then have `SerializedReader` create a RawSerializedReader after first wrapping the input in a BufferedReader. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-10-01T10:14:05.707+0000",
                    "updated": "2020-10-01T10:14:05.707+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17206012",
                    "id": "17206012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rdettai",
                        "name": "rdettai",
                        "key": "rdettai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rdettai&avatarId=42994",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rdettai&avatarId=42994",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rdettai&avatarId=42994",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rdettai&avatarId=42994"
                        },
                        "displayName": "R\u00e9mi Dettai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~alamb] thanks again for you response, very interesting elements !\r\n\r\nI agree that you might need another mechanism to keep the number of calls to S3 under control. For instance the C++ implementation uses read coalescing. This is not easy to balance though because you will want to:\r\n * increase the number of GETs to parallelize downloads and speed up bandwidth\r\n * limit the total number of GETs to control overhead and price\r\n * avoid reading data from columns that you are not going to use\r\n\r\nThe way I see it, ChunckReader is nothing more than a way to write the \"read_hint(chunk_start, chunk_len)\" and the required indirection between the SerializedReader and the BufferedReader. I'm going to give the implementation a try, it might not be that intrusive if I manage to use traits correctly :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rdettai",
                        "name": "rdettai",
                        "key": "rdettai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=rdettai&avatarId=42994",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=rdettai&avatarId=42994",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=rdettai&avatarId=42994",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=rdettai&avatarId=42994"
                        },
                        "displayName": "R\u00e9mi Dettai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-10-02T07:18:14.261+0000",
                    "updated": "2020-10-02T07:18:14.261+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17206083",
                    "id": "17206083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~rdettai] that sounds like a good plan. Good luck and I'll look forward to checking out the PRs.  Thank you for working on this issue. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-10-02T10:09:52.480+0000",
                    "updated": "2020-10-02T10:09:52.480+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17220381",
                    "id": "17220381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8300\n[https://github.com/apache/arrow/pull/8300]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-10-25T20:25:37.555+0000",
                    "updated": "2020-10-25T20:25:37.555+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13329950/comment/17220382",
                    "id": "17220382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "I'm unable to assign this to Remi",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-10-25T20:26:27.135+0000",
                    "updated": "2020-10-25T20:26:27.135+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|z0j0e8:",
        "customfield_12314139": null
    }
}