{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13400461",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461",
    "key": "ARROW-13973",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12623784",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623784",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13378189",
                    "key": "ARROW-12763",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378189",
                    "fields": {
                        "summary": "[R] Optimize dplyr queries that use head/tail after arrange",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=aocsa",
            "name": "aocsa",
            "key": "aocsa",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=aocsa&avatarId=47387",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=aocsa&avatarId=47387",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=aocsa&avatarId=47387",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=aocsa&avatarId=47387"
            },
            "displayName": "Alexander Ocsa",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13973/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa opened a new pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274\n\n\n   Hook up the SelectK kernel in ARROW-1565 to the query engine as another type of sink node.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:27:39.996+0000",
                    "updated": "2021-09-29T19:27:39.996+0000",
                    "started": "2021-09-29T19:27:39.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657500",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#issuecomment-930477898\n\n\n   https://issues.apache.org/jira/browse/ARROW-13973\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:27:53.714+0000",
                    "updated": "2021-09-29T19:27:53.714+0000",
                    "started": "2021-09-29T19:27:53.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657501",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r718824824\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/plan_test.cc\n##########\n@@ -664,6 +664,45 @@ TEST(ExecPlanExecution, SourceFilterProjectGroupedSumOrderBy) {\n   }\n }\n \n+TEST(ExecPlanExecution, SourceFilterProjectGroupedSumTopK) {\n+  for (bool parallel : {false, true}) {\n+    SCOPED_TRACE(parallel ? \"parallel/merged\" : \"serial\");\n+\n+    int batch_multiplicity = parallel ? 100 : 1;\n+    auto input = MakeGroupableBatches(/*multiplicity=*/batch_multiplicity);\n+\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+\n+    SelectKOptions options = SelectKOptions::TopKDefault(/*k=*/2, {\"str\"});\n+    ASSERT_OK(\n+        Declaration::Sequence(\n+            {\n+                {\"source\",\n+                 SourceNodeOptions{input.schema, input.gen(parallel, /*slow=*/false)}},\n+                {\"filter\",\n+                 FilterNodeOptions{greater_equal(field_ref(\"i32\"), literal(0))}},\n+                {\"project\", ProjectNodeOptions{{\n+                                field_ref(\"str\"),\n+                                call(\"multiply\", {field_ref(\"i32\"), literal(2)}),\n+                            }}},\n+                {\"aggregate\", AggregateNodeOptions{/*aggregates=*/{{\"hash_sum\", nullptr}},\n+                                                   /*targets=*/{\"multiply(i32, 2)\"},\n+                                                   /*names=*/{\"sum(multiply(i32, 2))\"},\n+                                                   /*keys=*/{\"str\"}}},\n+                {\"filter\", FilterNodeOptions{greater(field_ref(\"sum(multiply(i32, 2))\"),\n+                                                     literal(10 * batch_multiplicity))}},\n+                {\"select_k_sink\", SelectKSinkNodeOptions{options, &sink_gen}},\n+            })\n+            .AddToPlan(plan.get()));\n+\n+    ASSERT_THAT(StartAndCollect(plan.get(), sink_gen),\n+                Finishes(ResultWith(ElementsAreArray({ExecBatchFromJSON(\n+                    {int64(), utf8()}, parallel ? R\"([[2000, \"beta\"], [3600, \"alfa\"]])\"\n+                                                : R\"([[20, \"beta\"], [36, \"alfa\"]])\")}))));\n\nReview comment:\n       Given the results/pipeline are exactly the same as the test immediately above, it's a little hard to be sure that the select_k worked as intended (after all, in this case, an order by would give the exact same results). Maybe we could remove the aggregate or a filter or something, so that it's clearer that we are actually getting a TopK? Or change k to 1.\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       Or really, looking at how similar the SelectK and OrderBy sink nodes are, I wonder if the right strategy is to create a single sink node that can then be templated on the final kernel to call, all in one file, if the worry is code reuse. (After all, it seems the InputReceived implementation and everything else is going to be essentially identical, while a streaming TopK is going to necessarily be implemented entirely differently.)\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       Is this really worth breaking out instead of inlining into the node itself?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:37:29.913+0000",
                    "updated": "2021-09-29T19:37:29.913+0000",
                    "started": "2021-09-29T19:37:29.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657506",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r718834634\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       I was thinking about a streaming and concurrent version of SelectK, however even though it is possible to implement that It will still require to use `Take` kernel, and `Take` needs the all the batches (table input).\r\n   \r\n   The other option is to have a container with the first k elements, not only the indices, and select `top_k/bottom_k` rows while baches passed through it. However columnar format for RecordBatches  is not friendly with this operation, I think  this version is implementable but the cost could be worst that the bulkload version of it.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:49:46.382+0000",
                    "updated": "2021-09-29T19:49:46.382+0000",
                    "started": "2021-09-29T19:49:46.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657510",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r718837311\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       I think such a version would work entirely differently, as you mention in the second paragraph. Each thread would track the top K values it's seen so far (not indices! - this would be more similar to something like hash_distinct), and at the end, all the thread states would be merged and then the top K values of the merged state would be taken.\r\n   \r\n   IMO, my inclination is not to factor things out like this right now, especially because the streaming version might not fit that well into this framework anyways? (It'd probably look like a cross between SinkNode and AggregateNode.) But the order by and select K nodes look extremely similar right now and could be consolidated if desired (though, I'm not sure what other kernels you'd want implemented)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:53:45.559+0000",
                    "updated": "2021-09-29T19:53:45.559+0000",
                    "started": "2021-09-29T19:53:45.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657513",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r718861305\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       > Or really, looking at how similar the SelectK and OrderBy sink nodes are, I wonder if the right strategy is to create a single sink node that can then be templated on the final kernel to call, all in one file, if the worry is code reuse. \r\n   \r\n   I agree, I will refactor a little these classes into one.  \r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T20:30:16.978+0000",
                    "updated": "2021-09-29T20:30:16.978+0000",
                    "started": "2021-09-29T20:30:16.978+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657530",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r718834634\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       I was thinking about a streaming and concurrent version of SelectK, however even though it is possible to implement that It will still require to use `Take` kernel, and `Take` needs the all the batches (table input).\r\n   \r\n   The other option is to have a container with the first k elements, not only the indices, and select `top_k/bottom_k` rows while baches passed through it. However columnar format for RecordBatches  is not friendly with this operation, I think  this version is implementable but the cost could be worst that the bulkload version of it.\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       > Or really, looking at how similar the SelectK and OrderBy sink nodes are, I wonder if the right strategy is to create a single sink node that can then be templated on the final kernel to call, all in one file, if the worry is code reuse. \r\n   \r\n   I agree, I will refactor a little these classes into one.  \r\n   \r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:12:54.859+0000",
                    "updated": "2021-09-30T00:12:54.859+0000",
                    "started": "2021-09-30T00:12:54.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657659",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa opened a new pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274\n\n\n   Hook up the SelectK kernel in ARROW-1565 to the query engine as another type of sink node.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:31:03.472+0000",
                    "updated": "2021-09-30T00:31:03.472+0000",
                    "started": "2021-09-30T00:31:03.472+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657856",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/657899",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#issuecomment-930477898\n\n\n   https://issues.apache.org/jira/browse/ARROW-13973\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:35:29.896+0000",
                    "updated": "2021-09-30T00:35:29.896+0000",
                    "started": "2021-09-30T00:35:29.895+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657899",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/658006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r718824824\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/plan_test.cc\n##########\n@@ -664,6 +664,45 @@ TEST(ExecPlanExecution, SourceFilterProjectGroupedSumOrderBy) {\n   }\n }\n \n+TEST(ExecPlanExecution, SourceFilterProjectGroupedSumTopK) {\n+  for (bool parallel : {false, true}) {\n+    SCOPED_TRACE(parallel ? \"parallel/merged\" : \"serial\");\n+\n+    int batch_multiplicity = parallel ? 100 : 1;\n+    auto input = MakeGroupableBatches(/*multiplicity=*/batch_multiplicity);\n+\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+\n+    SelectKOptions options = SelectKOptions::TopKDefault(/*k=*/2, {\"str\"});\n+    ASSERT_OK(\n+        Declaration::Sequence(\n+            {\n+                {\"source\",\n+                 SourceNodeOptions{input.schema, input.gen(parallel, /*slow=*/false)}},\n+                {\"filter\",\n+                 FilterNodeOptions{greater_equal(field_ref(\"i32\"), literal(0))}},\n+                {\"project\", ProjectNodeOptions{{\n+                                field_ref(\"str\"),\n+                                call(\"multiply\", {field_ref(\"i32\"), literal(2)}),\n+                            }}},\n+                {\"aggregate\", AggregateNodeOptions{/*aggregates=*/{{\"hash_sum\", nullptr}},\n+                                                   /*targets=*/{\"multiply(i32, 2)\"},\n+                                                   /*names=*/{\"sum(multiply(i32, 2))\"},\n+                                                   /*keys=*/{\"str\"}}},\n+                {\"filter\", FilterNodeOptions{greater(field_ref(\"sum(multiply(i32, 2))\"),\n+                                                     literal(10 * batch_multiplicity))}},\n+                {\"select_k_sink\", SelectKSinkNodeOptions{options, &sink_gen}},\n+            })\n+            .AddToPlan(plan.get()));\n+\n+    ASSERT_THAT(StartAndCollect(plan.get(), sink_gen),\n+                Finishes(ResultWith(ElementsAreArray({ExecBatchFromJSON(\n+                    {int64(), utf8()}, parallel ? R\"([[2000, \"beta\"], [3600, \"alfa\"]])\"\n+                                                : R\"([[20, \"beta\"], [36, \"alfa\"]])\")}))));\n\nReview comment:\n       Given the results/pipeline are exactly the same as the test immediately above, it's a little hard to be sure that the select_k worked as intended (after all, in this case, an order by would give the exact same results). Maybe we could remove the aggregate or a filter or something, so that it's clearer that we are actually getting a TopK? Or change k to 1.\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       Or really, looking at how similar the SelectK and OrderBy sink nodes are, I wonder if the right strategy is to create a single sink node that can then be templated on the final kernel to call, all in one file, if the worry is code reuse. (After all, it seems the InputReceived implementation and everything else is going to be essentially identical, while a streaming TopK is going to necessarily be implemented entirely differently.)\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       Is this really worth breaking out instead of inlining into the node itself?\n\n##########\nFile path: cpp/src/arrow/compute/exec/select_k.cc\n##########\n@@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/select_k.h\"\n+\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <vector>\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class SelectKBasicImpl : public SelectKImpl {\n\nReview comment:\n       I think such a version would work entirely differently, as you mention in the second paragraph. Each thread would track the top K values it's seen so far (not indices! - this would be more similar to something like hash_distinct), and at the end, all the thread states would be merged and then the top K values of the merged state would be taken.\r\n   \r\n   IMO, my inclination is not to factor things out like this right now, especially because the streaming version might not fit that well into this framework anyways? (It'd probably look like a cross between SinkNode and AggregateNode.) But the order by and select K nodes look extremely similar right now and could be consolidated if desired (though, I'm not sure what other kernels you'd want implemented)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T00:44:57.623+0000",
                    "updated": "2021-09-30T00:44:57.623+0000",
                    "started": "2021-09-30T00:44:57.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658006",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/658190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r719191427\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/plan_test.cc\n##########\n@@ -664,6 +664,45 @@ TEST(ExecPlanExecution, SourceFilterProjectGroupedSumOrderBy) {\n   }\n }\n \n+TEST(ExecPlanExecution, SourceFilterProjectGroupedSumTopK) {\n+  for (bool parallel : {false, true}) {\n+    SCOPED_TRACE(parallel ? \"parallel/merged\" : \"serial\");\n+\n+    int batch_multiplicity = parallel ? 100 : 1;\n+    auto input = MakeGroupableBatches(/*multiplicity=*/batch_multiplicity);\n+\n+    ASSERT_OK_AND_ASSIGN(auto plan, ExecPlan::Make());\n+    AsyncGenerator<util::optional<ExecBatch>> sink_gen;\n+\n+    SelectKOptions options = SelectKOptions::TopKDefault(/*k=*/2, {\"str\"});\n+    ASSERT_OK(\n+        Declaration::Sequence(\n+            {\n+                {\"source\",\n+                 SourceNodeOptions{input.schema, input.gen(parallel, /*slow=*/false)}},\n+                {\"filter\",\n+                 FilterNodeOptions{greater_equal(field_ref(\"i32\"), literal(0))}},\n+                {\"project\", ProjectNodeOptions{{\n+                                field_ref(\"str\"),\n+                                call(\"multiply\", {field_ref(\"i32\"), literal(2)}),\n+                            }}},\n+                {\"aggregate\", AggregateNodeOptions{/*aggregates=*/{{\"hash_sum\", nullptr}},\n+                                                   /*targets=*/{\"multiply(i32, 2)\"},\n+                                                   /*names=*/{\"sum(multiply(i32, 2))\"},\n+                                                   /*keys=*/{\"str\"}}},\n+                {\"filter\", FilterNodeOptions{greater(field_ref(\"sum(multiply(i32, 2))\"),\n+                                                     literal(10 * batch_multiplicity))}},\n+                {\"select_k_sink\", SelectKSinkNodeOptions{options, &sink_gen}},\n+            })\n+            .AddToPlan(plan.get()));\n+\n+    ASSERT_THAT(StartAndCollect(plan.get(), sink_gen),\n+                Finishes(ResultWith(ElementsAreArray({ExecBatchFromJSON(\n+                    {int64(), utf8()}, parallel ? R\"([[2000, \"beta\"], [3600, \"alfa\"]])\"\n+                                                : R\"([[20, \"beta\"], [36, \"alfa\"]])\")}))));\n\nReview comment:\n       sure\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T08:44:57.949+0000",
                    "updated": "2021-09-30T08:44:57.949+0000",
                    "started": "2021-09-30T08:44:57.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658190",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/658509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#discussion_r719616956\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -131,54 +132,64 @@ class SinkNode : public ExecNode {\n   PushGenerator<util::optional<ExecBatch>>::Producer producer_;\n };\n \n-// A sink node that accumulates inputs, then sorts them before emitting them.\n struct OrderBySinkNode final : public SinkNode {\n-  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs, SortOptions sort_options,\n+  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                  std::unique_ptr<OrderByImpl> impl,\n                   AsyncGenerator<util::optional<ExecBatch>>* generator)\n-      : SinkNode(plan, std::move(inputs), generator),\n-        sort_options_(std::move(sort_options)) {}\n+      : SinkNode(plan, std::move(inputs), generator), impl_{std::move(impl)} {}\n \n   const char* kind_name() const override { return \"OrderBySinkNode\"; }\n \n-  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n-                                const ExecNodeOptions& options) {\n+  // A sink node that accumulates inputs, then sorts them before emitting them.\n+  static Result<ExecNode*> MakeSort(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                    const ExecNodeOptions& options) {\n     RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n \n     const auto& sink_options = checked_cast<const OrderBySinkNodeOptions&>(options);\n-    return plan->EmplaceNode<OrderBySinkNode>(\n-        plan, std::move(inputs), sink_options.sort_options, sink_options.generator);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSort(plan->exec_context(), inputs[0]->output_schema(),\n+                              sink_options.sort_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n+  }\n+\n+  // A sink node that receives inputs and then compute top_k/bottom_k.\n+  static Result<ExecNode*> MakeSelectK(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                       const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n+\n+    const auto& sink_options = checked_cast<const SelectKSinkNodeOptions&>(options);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSelectK(plan->exec_context(), inputs[0]->output_schema(),\n+                                 sink_options.select_k_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n   }\n \n   void InputReceived(ExecNode* input, ExecBatch batch) override {\n     DCHECK_EQ(input, inputs_[0]);\n \n-    // Accumulate data\n-    {\n-      std::unique_lock<std::mutex> lock(mutex_);\n-      auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n-                                             plan()->exec_context()->memory_pool());\n-      if (ErrorIfNotOk(maybe_batch.status())) return;\n-      batches_.push_back(maybe_batch.MoveValueUnsafe());\n-    }\n+    auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n+                                           plan()->exec_context()->memory_pool());\n+    if (ErrorIfNotOk(maybe_batch.status())) return;\n+    auto record_batch = maybe_batch.MoveValueUnsafe();\n \n+    Status status = impl_->InputReceived(std::move(record_batch));\n+    if (!status.ok()) {\n\nReview comment:\n       This should use the same pattern as above.\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -131,54 +132,64 @@ class SinkNode : public ExecNode {\n   PushGenerator<util::optional<ExecBatch>>::Producer producer_;\n };\n \n-// A sink node that accumulates inputs, then sorts them before emitting them.\n struct OrderBySinkNode final : public SinkNode {\n-  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs, SortOptions sort_options,\n+  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                  std::unique_ptr<OrderByImpl> impl,\n                   AsyncGenerator<util::optional<ExecBatch>>* generator)\n-      : SinkNode(plan, std::move(inputs), generator),\n-        sort_options_(std::move(sort_options)) {}\n+      : SinkNode(plan, std::move(inputs), generator), impl_{std::move(impl)} {}\n \n   const char* kind_name() const override { return \"OrderBySinkNode\"; }\n \n-  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n-                                const ExecNodeOptions& options) {\n+  // A sink node that accumulates inputs, then sorts them before emitting them.\n+  static Result<ExecNode*> MakeSort(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                    const ExecNodeOptions& options) {\n     RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n \n     const auto& sink_options = checked_cast<const OrderBySinkNodeOptions&>(options);\n-    return plan->EmplaceNode<OrderBySinkNode>(\n-        plan, std::move(inputs), sink_options.sort_options, sink_options.generator);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSort(plan->exec_context(), inputs[0]->output_schema(),\n+                              sink_options.sort_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n+  }\n+\n+  // A sink node that receives inputs and then compute top_k/bottom_k.\n+  static Result<ExecNode*> MakeSelectK(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                       const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n+\n+    const auto& sink_options = checked_cast<const SelectKSinkNodeOptions&>(options);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSelectK(plan->exec_context(), inputs[0]->output_schema(),\n+                                 sink_options.select_k_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n   }\n \n   void InputReceived(ExecNode* input, ExecBatch batch) override {\n     DCHECK_EQ(input, inputs_[0]);\n \n-    // Accumulate data\n-    {\n-      std::unique_lock<std::mutex> lock(mutex_);\n-      auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n-                                             plan()->exec_context()->memory_pool());\n-      if (ErrorIfNotOk(maybe_batch.status())) return;\n-      batches_.push_back(maybe_batch.MoveValueUnsafe());\n-    }\n+    auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n+                                           plan()->exec_context()->memory_pool());\n+    if (ErrorIfNotOk(maybe_batch.status())) return;\n\nReview comment:\n       It seems a little hard to write a test case for this, however. Practically this can only come up if there's an allocation failure.\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -131,54 +132,64 @@ class SinkNode : public ExecNode {\n   PushGenerator<util::optional<ExecBatch>>::Producer producer_;\n };\n \n-// A sink node that accumulates inputs, then sorts them before emitting them.\n struct OrderBySinkNode final : public SinkNode {\n-  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs, SortOptions sort_options,\n+  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                  std::unique_ptr<OrderByImpl> impl,\n                   AsyncGenerator<util::optional<ExecBatch>>* generator)\n-      : SinkNode(plan, std::move(inputs), generator),\n-        sort_options_(std::move(sort_options)) {}\n+      : SinkNode(plan, std::move(inputs), generator), impl_{std::move(impl)} {}\n \n   const char* kind_name() const override { return \"OrderBySinkNode\"; }\n \n-  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n-                                const ExecNodeOptions& options) {\n+  // A sink node that accumulates inputs, then sorts them before emitting them.\n+  static Result<ExecNode*> MakeSort(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                    const ExecNodeOptions& options) {\n     RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n \n     const auto& sink_options = checked_cast<const OrderBySinkNodeOptions&>(options);\n-    return plan->EmplaceNode<OrderBySinkNode>(\n-        plan, std::move(inputs), sink_options.sort_options, sink_options.generator);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSort(plan->exec_context(), inputs[0]->output_schema(),\n+                              sink_options.sort_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n+  }\n+\n+  // A sink node that receives inputs and then compute top_k/bottom_k.\n+  static Result<ExecNode*> MakeSelectK(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                       const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n+\n+    const auto& sink_options = checked_cast<const SelectKSinkNodeOptions&>(options);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSelectK(plan->exec_context(), inputs[0]->output_schema(),\n+                                 sink_options.select_k_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n   }\n \n   void InputReceived(ExecNode* input, ExecBatch batch) override {\n     DCHECK_EQ(input, inputs_[0]);\n \n-    // Accumulate data\n-    {\n-      std::unique_lock<std::mutex> lock(mutex_);\n-      auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n-                                             plan()->exec_context()->memory_pool());\n-      if (ErrorIfNotOk(maybe_batch.status())) return;\n-      batches_.push_back(maybe_batch.MoveValueUnsafe());\n-    }\n+    auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n+                                           plan()->exec_context()->memory_pool());\n+    if (ErrorIfNotOk(maybe_batch.status())) return;\n\nReview comment:\n       Hmm, I realize this error was in the original impl, but ErrorIfNotOk here basically just throws away the error since there's no outputs. Instead, we should do the same thing as Finish.\n\n##########\nFile path: cpp/src/arrow/compute/exec/sink_node.cc\n##########\n@@ -131,54 +132,64 @@ class SinkNode : public ExecNode {\n   PushGenerator<util::optional<ExecBatch>>::Producer producer_;\n };\n \n-// A sink node that accumulates inputs, then sorts them before emitting them.\n struct OrderBySinkNode final : public SinkNode {\n-  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs, SortOptions sort_options,\n+  OrderBySinkNode(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                  std::unique_ptr<OrderByImpl> impl,\n                   AsyncGenerator<util::optional<ExecBatch>>* generator)\n-      : SinkNode(plan, std::move(inputs), generator),\n-        sort_options_(std::move(sort_options)) {}\n+      : SinkNode(plan, std::move(inputs), generator), impl_{std::move(impl)} {}\n \n   const char* kind_name() const override { return \"OrderBySinkNode\"; }\n \n-  static Result<ExecNode*> Make(ExecPlan* plan, std::vector<ExecNode*> inputs,\n-                                const ExecNodeOptions& options) {\n+  // A sink node that accumulates inputs, then sorts them before emitting them.\n+  static Result<ExecNode*> MakeSort(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                    const ExecNodeOptions& options) {\n     RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n \n     const auto& sink_options = checked_cast<const OrderBySinkNodeOptions&>(options);\n-    return plan->EmplaceNode<OrderBySinkNode>(\n-        plan, std::move(inputs), sink_options.sort_options, sink_options.generator);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSort(plan->exec_context(), inputs[0]->output_schema(),\n+                              sink_options.sort_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n+  }\n+\n+  // A sink node that receives inputs and then compute top_k/bottom_k.\n+  static Result<ExecNode*> MakeSelectK(ExecPlan* plan, std::vector<ExecNode*> inputs,\n+                                       const ExecNodeOptions& options) {\n+    RETURN_NOT_OK(ValidateExecNodeInputs(plan, inputs, 1, \"OrderBySinkNode\"));\n+\n+    const auto& sink_options = checked_cast<const SelectKSinkNodeOptions&>(options);\n+    ARROW_ASSIGN_OR_RAISE(\n+        std::unique_ptr<OrderByImpl> impl,\n+        OrderByImpl::MakeSelectK(plan->exec_context(), inputs[0]->output_schema(),\n+                                 sink_options.select_k_options));\n+    return plan->EmplaceNode<OrderBySinkNode>(plan, std::move(inputs), std::move(impl),\n+                                              sink_options.generator);\n   }\n \n   void InputReceived(ExecNode* input, ExecBatch batch) override {\n     DCHECK_EQ(input, inputs_[0]);\n \n-    // Accumulate data\n-    {\n-      std::unique_lock<std::mutex> lock(mutex_);\n-      auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n-                                             plan()->exec_context()->memory_pool());\n-      if (ErrorIfNotOk(maybe_batch.status())) return;\n-      batches_.push_back(maybe_batch.MoveValueUnsafe());\n-    }\n+    auto maybe_batch = batch.ToRecordBatch(inputs_[0]->output_schema(),\n+                                           plan()->exec_context()->memory_pool());\n+    if (ErrorIfNotOk(maybe_batch.status())) return;\n\nReview comment:\n       ```suggestion\r\n       if (ErrorIfNotOk(maybe_batch.status())) {\r\n         StopProducing();\r\n         bool cancelled = input_counter_.Cancel();\r\n         DCHECK(cancelled);\r\n         finished_.MarkFinished(maybe_batch.status());\r\n         return;\r\n       }\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T17:34:53.388+0000",
                    "updated": "2021-09-30T17:34:53.388+0000",
                    "started": "2021-09-30T17:34:53.388+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658509",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/658928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#issuecomment-932193176\n\n\n   There is a JIRA (can't find it right now) for a streaming/scalar aggregate version of the kernel, yes. I think this suffices to get things out the door, though, so to speak. We don't really have an out-of-core story in general right now.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-01T12:42:54.456+0000",
                    "updated": "2021-10-01T12:42:54.456+0000",
                    "started": "2021-10-01T12:42:54.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658928",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/659083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-01T17:13:33.836+0000",
                    "updated": "2021-10-01T17:13:33.836+0000",
                    "started": "2021-10-01T17:13:33.836+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659083",
                    "issueId": "13400461"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/worklog/659135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aocsa commented on pull request #11274:\nURL: https://github.com/apache/arrow/pull/11274#issuecomment-932528690\n\n\n   > I think this is a good starting point. Although, if I'm using \"head\", \"limit\", or a size-limited sink node of any kind, I think my motivation would be concern that I have a lot of data and I would expect the node to limit that.\r\n   > \r\n   > For example, a top-k implementation could periodically (when batches_ has some configurable # of rows) run through and discard data. The way it is written now it would still require me to buffer the entire dataset in memory (and/or spillover).\r\n   > \r\n   > Admittedly this would be more CPU efficient but I think that can be a reasonable tradeoff in some cases. Do we have a JIRA for a more RAM-efficient top-k sink?\r\n   \r\n   L\r\n   \r\n   > I think this is a good starting point. Although, if I'm using \"head\", \"limit\", or a size-limited sink node of any kind, I think my motivation would be concern that I have a lot of data and I would expect the node to limit that.\r\n   > \r\n   > For example, a top-k implementation could periodically (when batches_ has some configurable # of rows) run through and discard data. The way it is written now it would still require me to buffer the entire dataset in memory (and/or spillover).\r\n   > \r\n   > Admittedly this would be more CPU efficient but I think that can be a reasonable tradeoff in some cases. Do we have a JIRA for a more RAM-efficient top-k sink?\r\n   \r\n   Yes it's here: https://issues.apache.org/jira/browse/ARROW-14202\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-01T20:25:46.006+0000",
                    "updated": "2021-10-01T20:25:46.006+0000",
                    "started": "2021-10-01T20:25:46.005+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659135",
                    "issueId": "13400461"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@333ce723[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1575b7c1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d7d1ef6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@250e7927[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26e816dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@802d30a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7dfde652[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2b6c7f8b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4dd4cac5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@53d0daf6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@410d79a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@955d625[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 01 17:13:21 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-01T17:13:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13973/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-09-10T12:43:13.000+0000",
        "updated": "2021-10-01T20:25:47.000+0000",
        "timeoriginalestimate": null,
        "description": "Hook up the SelectK kernel in ARROW-1565 to the query engine as another type of sink node.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add a SelectKSinkNode",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400461/comment/17423375",
                    "id": "17423375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 11274\n[https://github.com/apache/arrow/pull/11274]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-10-01T17:13:21.330+0000",
                    "updated": "2021-10-01T17:13:21.330+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0usu8:",
        "customfield_12314139": null
    }
}