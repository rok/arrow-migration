{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13119434",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434",
    "key": "ARROW-1832",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342291",
                "id": "12342291",
                "name": "JS-0.3.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-02-21"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1832/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "toddhay-NOAA commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271987439\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   Hello.  This is probably not the best place to ask this question given that this is closed, if so, I can open a new jira ticket, just let me know what you prefer.  I'm looking to retrieve a json or csv dataset from an online web service, and then convert that to an arrow table.  The readJSON function in the json.ts file listed above seems like it would do the trick, but I don't see it available in the latest arrow release.  Can you point me to where that lives or how best to ingest a JSON (or CSV for that matter) file with the JS version of arrow and turn it into an arrow table?  I'm not readily finding examples for how to do this.\r\n   \r\n   For what it's worth, here is a snippet of the ts code I'm working on for this:\r\n   `    \r\n   import { Table, RecordBatchWriter, RecordBatchStreamReader, RecordBatchFileReader, RecordBatchReader  } from \"apache-arrow\";\r\n   import Axios from 'axios';\r\n   let dwUrl = \"https://www.nwfsc.noaa.gov/data/api/v1/source/trawl.operation_haul_fact/selection.json\";\r\n   const response = await Axios.get(dwUrl);\r\n   const data = response.data;`\r\n   \r\n   which can be found here:\r\n   https://github.com/nwfsc-fram/OceanTS/blob/master/src/utilities.ts\r\n   \r\n   I want to be able to turn the response.data into an arrow table.\r\n   \r\n   Thanks for all that you're doing with arrow!  It's a great effort and I'm really enjoying using it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T01:12:32.295+0000",
                    "updated": "2019-04-04T01:12:32.295+0000",
                    "started": "2019-04-04T01:12:32.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222742",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271993014\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   Hi @toddhay-NOAA. This PR was related to implementing the JSON reader and writer for testing interop between the different language implementations (and has since been rewritten as the RecordBatchJSONReader/Writer classes). The JSON format isn't really suitable as an IPC mechanism in production setups, it's only meant for our integration tests.\r\n   \r\n   It sounds like what you're really looking for is the Vector builders, which are presently a work-in-progress. I've been in the process of extracting what I have inside Graphistry to [this branch in my fork](https://github.com/trxcllnt/arrow/tree/js/data-builders/js). I've made a bit more progress on our internal versions and should be picking it up again early next week. If you need to get started sooner and/or want to collaborate feel free to shoot me an email and I can work to update this branch with my latest fixes.\r\n   \r\n   You can start [here](https://github.com/trxcllnt/arrow/blob/c4aec7743286e6678bd0ea0c1247b9dcc79f3eb2/js/test/unit/builders/utils.ts#L86) to get an idea of what they'll look like. The idea is to enable aggregating chunks of Vectors into RecordBatches via iteration/async-iteration/streams. I do plan to add convenience APIs that expose the builders as Node/DOM streams similar to the Readers and Writers, but haven't gotten to that stage yet:\r\n   \r\n   ```ts\r\n   let fieldsAndChunks = [...getSourceColumns()].map(jsTypesToArrowBuilders);\r\n   \r\n   let fields = fieldsAndChunks.map(({ field }) => field);\r\n   let columnChunks = fieldsAndChunks.map(({ chunks }) => chunks);\r\n   let recordBatches = []\r\n   \r\n   for (let columns of zip(...chunks)) {\r\n       recordBatches.push(RecordBatch.new(data, fields))\r\n   }\r\n   \r\n   type ColumnStreamDesc = { colName: string, jsType: 'string', valuesStream: Iterable<any> };\r\n   function jsTypesToArrowBuilders({ colName, jsType, valuesStream }: ColumnStreamDesc) {\r\n       let arrowType: DataType;\r\n       let valuesThatIndicateNull: any[];\r\n       switch (jsType) {\r\n         case 'integer':\r\n           arrowType = new Int32();\r\n           valuesThatIndicateNull = [0x7ffffff];\r\n           break;\r\n         case 'float':\r\n           arrowType = new Float64();\r\n           valuesThatIndicateNull = [NaN];\r\n           break;\r\n         // etc.\r\n         default:\r\n           arrowType = new Utf8();\r\n           valuesThatIndicateNull = [null, 'null', 'n/a', 'NA', ''];\r\n           break;\r\n       }\r\n       let builder = DataBuilder.new(arrowType, valuesThatIndicateNull);\r\n       return {\r\n           field: new Field(colName, arrowType),\r\n           chunks: builder.fromIterable(valuesStream)\r\n       };\r\n   }\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T01:52:03.718+0000",
                    "updated": "2019-04-04T01:52:03.718+0000",
                    "started": "2019-04-04T01:52:03.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222758",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271993014\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   Hi @toddhay-NOAA. This PR was related to implementing the JSON reader and writer for testing interop between the different language implementations (and has since been rewritten as the RecordBatchJSONReader/Writer classes). The JSON format isn't really suitable as an IPC mechanism in production setups, it's only meant for our integration tests.\r\n   \r\n   It sounds like what you're really looking for is the Vector builders, which are presently a work-in-progress. I've been in the process of extracting what I have inside Graphistry to [this branch in my fork](https://github.com/trxcllnt/arrow/tree/js/data-builders/js). I've made a bit more progress on our internal versions and should be picking it up again early next week. If you need to get started sooner and/or want to collaborate feel free to shoot me an email and I can work to update this branch with my latest fixes.\r\n   \r\n   You can start [here](https://github.com/trxcllnt/arrow/blob/c4aec7743286e6678bd0ea0c1247b9dcc79f3eb2/js/test/unit/builders/utils.ts#L86) to get an idea of what they'll look like. The idea is to enable aggregating chunks of Vectors into RecordBatches via iteration/async-iteration/streams. I do plan to add convenience APIs that expose the builders as Node/DOM streams similar to the Readers and Writers, but haven't gotten to that stage yet:\r\n   \r\n   ```ts\r\n   let fieldsAndChunks = [...getSourceColumns()].map(jsTypesToArrowBuilders);\r\n   \r\n   let fields = fieldsAndChunks.map(({ field }) => field);\r\n   let columnChunks = fieldsAndChunks.map(({ chunks }) => chunks);\r\n   let recordBatches = []\r\n   \r\n   for (let columns of zip(...chunks)) {\r\n       recordBatches.push(RecordBatch.new(data, fields))\r\n   }\r\n   \r\n   type ColumnStreamDesc = { colName: string, jsType: string, valuesStream: Iterable<any> };\r\n   function jsTypesToArrowBuilders({ colName, jsType, valuesStream }: ColumnStreamDesc) {\r\n       let arrowType: DataType;\r\n       let valuesThatIndicateNull: any[];\r\n       switch (jsType) {\r\n         case 'integer':\r\n           arrowType = new Int32();\r\n           valuesThatIndicateNull = [0x7ffffff];\r\n           break;\r\n         case 'float':\r\n           arrowType = new Float64();\r\n           valuesThatIndicateNull = [NaN];\r\n           break;\r\n         // etc.\r\n         default:\r\n           arrowType = new Utf8();\r\n           valuesThatIndicateNull = [null, 'null', 'n/a', 'NA', ''];\r\n           break;\r\n       }\r\n       let builder = DataBuilder.new(arrowType, valuesThatIndicateNull);\r\n       return {\r\n           field: new Field(colName, arrowType),\r\n           chunks: builder.fromIterable(valuesStream)\r\n       };\r\n   }\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T01:53:05.630+0000",
                    "updated": "2019-04-04T01:53:05.630+0000",
                    "started": "2019-04-04T01:53:05.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222760",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271993014\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   Hi @toddhay-NOAA. This PR was related to implementing the JSON reader and writer for testing interop between the different language implementations (and has since been rewritten as the RecordBatchJSONReader/Writer classes). The JSON format isn't really suitable as an IPC mechanism in production setups, it's only meant for our integration tests.\r\n   \r\n   It sounds like what you're really looking for is the Vector builders, which are presently a work-in-progress. I've been in the process of extracting what I have inside Graphistry to [this branch in my fork](https://github.com/trxcllnt/arrow/tree/js/data-builders/js). I've made a bit more progress on our internal versions and should be picking it up again early next week. If you need to get started sooner and/or want to collaborate feel free to shoot me an email and I can work to update this branch with my latest fixes.\r\n   \r\n   You can start [here](https://github.com/trxcllnt/arrow/blob/c4aec7743286e6678bd0ea0c1247b9dcc79f3eb2/js/test/unit/builders/utils.ts#L86) to get an idea of what they'll look like. The idea is to enable aggregating chunks of Vectors into RecordBatches via iteration/async-iteration/streams. I do plan to add convenience APIs that expose the builders as Node/DOM streams similar to the Readers and Writers, but haven't gotten to that stage yet:\r\n   \r\n   ```ts\r\n   let fieldsAndChunks = [...getSourceColumns()].map(jsTypesToArrowBuilders);\r\n   \r\n   let fields = fieldsAndChunks.map(({ field }) => field);\r\n   let columnChunks = fieldsAndChunks.map(({ chunks }) => chunks);\r\n   let recordBatches = []\r\n   \r\n   for (let columns of zip(...chunks)) {\r\n       recordBatches.push(RecordBatch.new(columns, fields))\r\n   }\r\n   \r\n   type ColumnStreamDesc = { colName: string, jsType: string, valuesStream: Iterable<any> };\r\n   function jsTypesToArrowBuilders({ colName, jsType, valuesStream }: ColumnStreamDesc) {\r\n       let arrowType: DataType;\r\n       let valuesThatIndicateNull: any[];\r\n       switch (jsType) {\r\n         case 'integer':\r\n           arrowType = new Int32();\r\n           valuesThatIndicateNull = [0x7ffffff];\r\n           break;\r\n         case 'float':\r\n           arrowType = new Float64();\r\n           valuesThatIndicateNull = [NaN];\r\n           break;\r\n         // etc.\r\n         default:\r\n           arrowType = new Utf8();\r\n           valuesThatIndicateNull = [null, 'null', 'n/a', 'NA', ''];\r\n           break;\r\n       }\r\n       let builder = DataBuilder.new(arrowType, valuesThatIndicateNull);\r\n       return {\r\n           field: new Field(colName, arrowType),\r\n           chunks: builder.fromIterable(valuesStream)\r\n       };\r\n   }\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T01:53:56.915+0000",
                    "updated": "2019-04-04T01:53:56.915+0000",
                    "started": "2019-04-04T01:53:56.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222761",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271993014\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   Hi @toddhay-NOAA. This PR was related to implementing the JSON reader and writer for testing interop between the different language implementations (and has since been rewritten as the RecordBatchJSONReader/Writer classes). The JSON format isn't really suitable as an IPC mechanism in production setups, it's only meant for our integration tests.\r\n   \r\n   It sounds like what you're really looking for is the Vector builders, which are presently a work-in-progress. I've been in the process of extracting what I have inside Graphistry to [this branch in my fork](https://github.com/trxcllnt/arrow/tree/js/data-builders/js). I've made a bit more progress on our internal versions and should be picking it up again early next week. If you need to get started sooner and/or want to collaborate feel free to shoot me an email and I can work to update this branch with my latest fixes.\r\n   \r\n   You can start [here](https://github.com/trxcllnt/arrow/blob/c4aec7743286e6678bd0ea0c1247b9dcc79f3eb2/js/test/unit/builders/utils.ts#L86) to get an idea of what they'll look like. The idea is to enable aggregating chunks of Vectors into RecordBatches via iteration/async-iteration/streams. I do plan to add convenience APIs that expose the builders as Node/DOM streams similar to the Readers and Writers, but haven't gotten to that stage yet:\r\n   \r\n   ```ts\r\n   let fieldsAndChunks = [...getSourceColumns()].map(jsTypesToArrowBuilders);\r\n   \r\n   let fields = fieldsAndChunks.map(({ field }) => field);\r\n   let chunks = fieldsAndChunks.map(({ chunks }) => chunks);\r\n   let recordBatches = []\r\n   \r\n   for (let columns of zip(...chunks)) {\r\n       recordBatches.push(RecordBatch.new(columns, fields))\r\n   }\r\n   \r\n   type ColumnStreamDesc = { colName: string, jsType: string, valuesStream: Iterable<any> };\r\n   function jsTypesToArrowBuilders({ colName, jsType, valuesStream }: ColumnStreamDesc) {\r\n       let arrowType: DataType;\r\n       let valuesThatIndicateNull: any[];\r\n       switch (jsType) {\r\n         case 'integer':\r\n           arrowType = new Int32();\r\n           valuesThatIndicateNull = [0x7ffffff];\r\n           break;\r\n         case 'float':\r\n           arrowType = new Float64();\r\n           valuesThatIndicateNull = [NaN];\r\n           break;\r\n         // etc.\r\n         default:\r\n           arrowType = new Utf8();\r\n           valuesThatIndicateNull = [null, 'null', 'n/a', 'NA', ''];\r\n           break;\r\n       }\r\n       let builder = DataBuilder.new(arrowType, valuesThatIndicateNull);\r\n       return {\r\n           field: new Field(colName, arrowType),\r\n           chunks: builder.fromIterable(valuesStream)\r\n       };\r\n   }\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T01:54:37.999+0000",
                    "updated": "2019-04-04T01:54:37.999+0000",
                    "started": "2019-04-04T01:54:37.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222762",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271993505\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   Maybe open a JIRA about adding some documentation or making other improvements? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T01:55:38.166+0000",
                    "updated": "2019-04-04T01:55:38.166+0000",
                    "started": "2019-04-04T01:55:38.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222763",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271994063\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   @wesm ah for some reason I thought I'd already opened a JIRA for the builders. Adding one now.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T01:59:39.069+0000",
                    "updated": "2019-04-04T01:59:39.069+0000",
                    "started": "2019-04-04T01:59:39.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222764",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "toddhay-NOAA commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271987439\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   Hello.  This is probably not the best place to ask this question given that this is closed, if so, I can open a new jira ticket, just let me know what you prefer.  I'm looking to retrieve a json or csv dataset from an online web service, and then convert that to an arrow table.  The readJSON function in the json.ts file listed above seems like it would do the trick, but I don't see it available in the latest arrow release.  Can you point me to where that lives or how best to ingest a JSON (or CSV for that matter) file with the JS version of arrow and turn it into an arrow table?  I'm not readily finding examples for how to do this.\r\n   \r\n   For what it's worth, here is a snippet of the ts code I'm working on for this:\r\n   ```js    \r\n   import { Table, RecordBatchWriter, RecordBatchStreamReader, RecordBatchFileReader, RecordBatchReader  } from \"apache-arrow\";\r\n   import Axios from 'axios';\r\n   let dwUrl = \"https://www.nwfsc.noaa.gov/data/api/v1/source/trawl.operation_haul_fact/selection.json\";\r\n   const response = await Axios.get(dwUrl);\r\n   const data = response.data;\r\n   ```\r\n   \r\n   which can be found here:\r\n   https://github.com/nwfsc-fram/OceanTS/blob/master/src/utilities.ts\r\n   \r\n   I want to be able to turn the response.data into an arrow table.\r\n   \r\n   Thanks for all that you're doing with arrow!  It's a great effort and I'm really enjoying using it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T02:01:09.475+0000",
                    "updated": "2019-04-04T02:01:09.475+0000",
                    "started": "2019-04-04T02:01:09.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222765",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271997608\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   @toddhay-NOAA you can also look at this project for some examples of sending/receiving Arrow over HTTP via node: https://github.com/trxcllnt/fastify-arrow\r\n   \r\n   If you want to inspect the JSON-encoded version of an existing Arrow table, you can reach into the internals and write out a Table in the JSON format like this:\r\n   ```ts\r\n   // test.js\r\n   const { RecordBatchJSONWriter } = require('apache-arrow')\r\n   const table = Table.from(someDataSource())\r\n   RecordBatchJSONWriter.writeAll(table).pipe(process.stdout)\r\n   ```\r\n   \r\n   Then you can execute that script from the command line. The JSON isn't formatted, so I recommend piping it through [`jq`](https://stedolan.github.io/jq/) to fix up the indentation. The result should look something [like this](https://gist.github.com/trxcllnt/805aa7f066e9fda09a6827657f4eff75):\r\n   ```\r\n   $ node test.js | jq\r\n   ```\r\n   \r\n   You can also pipe the JSON into the `arrow2csv` utility that we ship to inspect tables that way:\r\n   ```\r\n   $ node test.js | jq -r '.' | npx arrow2csv | less\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T02:26:04.271+0000",
                    "updated": "2019-04-04T02:26:04.271+0000",
                    "started": "2019-04-04T02:26:04.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222767",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/222768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r271997608\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   @toddhay-NOAA you can also look at this project for some examples of sending/receiving Arrow over HTTP via node: https://github.com/trxcllnt/fastify-arrow\r\n   \r\n   If you want to inspect the JSON-encoded version of an existing Arrow table, you can use the RecordBatchJSONWriter to write out a Table in the JSON format like this:\r\n   ```ts\r\n   // test.js\r\n   const { RecordBatchJSONWriter } = require('apache-arrow')\r\n   const table = Table.from(someDataSource())\r\n   RecordBatchJSONWriter.writeAll(table).pipe(process.stdout)\r\n   ```\r\n   \r\n   Then you can execute that script from the command line. The JSON isn't formatted, so I recommend piping it through [`jq`](https://stedolan.github.io/jq/) to fix up the indentation. The result should look something [like this](https://gist.github.com/trxcllnt/805aa7f066e9fda09a6827657f4eff75):\r\n   ```\r\n   $ node test.js | jq\r\n   ```\r\n   \r\n   You can also pipe the JSON into the `arrow2csv` utility that we ship to inspect tables that way:\r\n   ```\r\n   $ node test.js | jq -r '.' | npx arrow2csv | less\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-04T02:26:29.189+0000",
                    "updated": "2019-04-04T02:26:29.189+0000",
                    "started": "2019-04-04T02:26:29.189+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "222768",
                    "issueId": "13119434"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/worklog/223983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "toddhay-NOAA commented on pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r272779144\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   @trxcllnt, thanks for your quick replies on all of this, it sounds Vector builders might be want I want.  I would like to get started this weekend if possible.  I see your [jira ](https://issues.apache.org/jira/browse/ARROW-5115) ticket for this and so will move the conversation over there.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-04-06T01:46:04.716+0000",
                    "updated": "2019-04-06T01:46:04.716+0000",
                    "started": "2019-04-06T01:46:04.716+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "223983",
                    "issueId": "13119434"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@45752432[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@339399e1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a431dc1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b0c5f9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@685122df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@719f5d78[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4380eb9f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@409c611b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21baf40d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2a4519df[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e5dc31b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4d6ae372[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 19 03:53:43 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-12-19T03:53:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1832/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-11-18T19:13:11.000+0000",
        "updated": "2019-04-06T01:46:04.000+0000",
        "timeoriginalestimate": null,
        "description": "Implementing a JSON reader will allow us to write a \"validate\" script for the consumer half of the integration tests.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Implement JSON reader for integration tests",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16261183",
                    "id": "16261183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit opened a new pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343\n \n \n   Add JSON reader, as well as `js/bin/integration.js` script for running integration test validation\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T18:06:16.112+0000",
                    "updated": "2017-11-21T18:06:16.112+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16261205",
                    "id": "16261205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-346114553\n \n \n   @trxcllnt I seem to have broken the closure compiler build by adding `src/format/arrow.ts` - any idea what's wrong?\r\n   \r\n   Also, I'm interested in your feedback on some of the re-structuring I did. I made a [`FieldBuilder` and `FieldNodeBuilder`](https://github.com/apache/arrow/pull/1343/commits/4e9767aca59fe471e62c3b770f3946d51eab2012#diff-b4be157e615dd41b8b50ad1c6021e506R26) which replicate the flatbuffers `Field` and `FieldNode` interfaces, and then I made the `fieldMixin` constructor accept [either type](https://github.com/apache/arrow/pull/1343/commits/4e9767aca59fe471e62c3b770f3946d51eab2012#diff-7ae84ba988036361542a685bcd1d672dR22). That way I can create \"field\" vectors from the JSON reader without building flatbuffers objects.\r\n   \r\n   I thought something like this may be useful for a writer in the future, which is why I went ahead and stubbed out some [write() methods](https://github.com/apache/arrow/pull/1343/commits/4e9767aca59fe471e62c3b770f3946d51eab2012#diff-b4be157e615dd41b8b50ad1c6021e506R43). What do you think?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T18:15:33.683+0000",
                    "updated": "2017-11-21T18:15:33.683+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16261280",
                    "id": "16261280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-346124815\n \n \n   @theneuralbit awesome! Will look closer when I\u2019m on my laptop. To fix the closure build issue, just update [this line](https://github.com/apache/arrow/blob/master/js/gulp/typescript-task.js#L58) to the new generated JS files glob path.\r\n   \r\n   It\u2019s hacky, but cc with advanced opts can\u2019t track the property names through the nested function declaration IEFE\u2019s that TS compiles namespaces to while mangling, so we use the flatc generated JS files here instead.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T18:52:26.588+0000",
                    "updated": "2017-11-21T18:52:26.588+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16261470",
                    "id": "16261470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-346124815\n \n \n   @theneuralbit awesome! Will look closer when I\u2019m on my laptop. To fix the closure build issue, just update [lines 55 and 58](https://github.com/apache/arrow/blob/master/js/gulp/typescript-task.js#L55) to the new generated JS files glob path.\r\n   \r\n   It\u2019s hacky, but cc with advanced opts can\u2019t track the property names through the nested function declaration IEFE\u2019s that TS compiles namespaces to while mangling, so we use the flatc generated JS files here instead.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-21T20:52:02.659+0000",
                    "updated": "2017-11-21T20:52:02.659+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16262161",
                    "id": "16262161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r152498412\n \n \n\n ##########\n File path: js/src/reader/arrow.ts\n ##########\n @@ -31,6 +31,7 @@ import ByteBuffer = flatbuffers.ByteBuffer;\n import Footer = File_.org.apache.arrow.flatbuf.Footer;\n import Field = Schema_.org.apache.arrow.flatbuf.Field;\n import Schema = Schema_.org.apache.arrow.flatbuf.Schema;\n+import Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\n \n Review comment:\n   @TheNeuralBit typo?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T08:47:55.827+0000",
                    "updated": "2017-11-22T08:47:55.827+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16262331",
                    "id": "16262331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r152535906\n \n \n\n ##########\n File path: js/src/reader/json.ts\n ##########\n @@ -0,0 +1,238 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { flatbuffers } from 'flatbuffers';\n+import { Vector } from '../vector/vector';\n+import { TypedArray, TypedArrayConstructor } from '../vector/types';\n+import { BinaryVector, BoolVector, Utf8Vector, Int8Vector,\n+         Int16Vector, Int32Vector, Int64Vector, Uint8Vector,\n+         Uint16Vector, Uint32Vector, Uint64Vector,\n+         Float32Vector, Float64Vector, ListVector, StructVector } from '../vector/arrow';\n+\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+import { TextEncoder } from 'text-encoding-utf-8';\n+const encoder = new TextEncoder('utf-8');\n+\n+export function* readJSON(jsonString: string): IterableIterator<Vector<any>[]> {\n+    let obj: any = JSON.parse(jsonString);\n+    let schema: any = {};\n+    for (const field of obj.schema.fields) {\n+        schema[field.name] = field;\n+    }\n+\n+    for (const batch of obj.batches) {\n+        yield batch.columns.map((column: any): Vector => readVector(schema[column.name], column));\n+    }\n+}\n+\n+function readVector(field: any, column: any): Vector {\n+    return readDictionaryVector(field, column) || readValueVector(field, column);\n+}\n+\n+function readDictionaryVector(field: any, column: any) {\n+    if (field.name == column.name) { return null; } else { return null; }\n+}\n+\n+function readValueVector(field: any, column: any): Vector {\n+    switch (field.type.name) {\n+        //case \"NONE\": return readNullVector(field, column);\n+        //case \"null\": return readNullVector(field, column);\n+        //case \"map\": return readMapVector(field, column);\n+        case 'int': return readIntVector(field, column);\n+        case 'bool': return readBoolVector(field, column);\n+        //case \"date\": return readDateVector(field, column);\n+        case 'list': return readListVector(field, column);\n+        case 'utf8': return readUtf8Vector(field, column);\n+        //case \"time\": return readTimeVector(field, column);\n+        //case \"union\": return readUnionVector(field, column);\n+        case 'binary': return readBinaryVector(field, column);\n+        //case \"decimal\": return readDecimalVector(field, column);\n+        case 'struct': return readStructVector(field, column);\n+        case 'floatingpoint': return readFloatVector(field, column);\n+        //case \"timestamp\": return readTimestampVector(field, column);\n+        //case \"fixedsizelist\": return readFixedSizeListVector(field, column);\n+        //case \"fixedsizebinary\": return readFixedSizeBinaryVector(field, column);\n+    }\n+    throw new Error(`Unrecognized Vector { name: ${field.name}, type: ${field.type.name} }`);\n+}\n+\n+function readIntVector(field: any, column: any) {\n+    if (field.type.isSigned) {\n+        switch (field.type.bitWidth) {\n+            case  8: return new  Int8Vector(readNumeric(field, column, Int8Array));\n+            case 16: return new Int16Vector(readNumeric(field, column, Int16Array));\n+            case 32: return new Int32Vector(readNumeric(field, column, Int32Array));\n+            case 64: return new Int64Vector(readInt64(field, column, Int32Array));\n+        }\n+    }\n+    switch (field.type.bitWidth) {\n+        case  8: return new  Uint8Vector(readNumeric(field, column, Uint8Array));\n+        case 16: return new Uint16Vector(readNumeric(field, column, Uint16Array));\n+        case 32: return new Uint32Vector(readNumeric(field, column, Uint32Array));\n+        case 64: return new Uint64Vector(readInt64(field, column, Uint32Array));\n+    }\n+    throw new Error(`Unrecognized Int { isSigned: ${field.type.isSigned}, bitWidth: ${field.type.bitWidth} }`);\n+}\n+\n+function readBoolVector(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readBoolean(column.DATA);\n+    return new BoolVector({field, fieldNode, validity, data});\n+}\n+\n+function readListVector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    return new ListVector({\n+        field, fieldNode, validity, offsets,\n+        values: readVector(fieldObj.children[0], column.children[0])\n+    });\n+}\n+\n+function readUtf8Vector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    const data = encoder.encode(column.DATA.join(''));\n+    return new Utf8Vector({\n+        field, fieldNode,\n+        values: new BinaryVector({\n+            validity, offsets, data\n+        })\n+    });\n+}\n+\n+function readBinaryVector(field: any, column: any) {\n+    return new BinaryVector(readBinary(field, column));\n+}\n+\n+function readStructVector(fieldObj: any, column: any) {\n+    const n = fieldObj.children.length;\n+    const columns = new Array<Vector>(n);\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    for (let i = -1; ++i < n;) {\n+            columns[i] = readVector(fieldObj.children[i], column.children[i]);\n+    }\n+    return new StructVector({ field, fieldNode, validity, columns });\n+}\n+\n+function readFloatVector(field: any, column: any) {\n+    switch (field.type.precision) {\n+        // TODO: case \"HALF\":   return new Float16Vector(readNumeric(field, column, Uint16Array));\n+        case 'SINGLE': return new Float32Vector(readNumeric(field, column, Float32Array));\n+        case 'DOUBLE': return new Float64Vector(readNumeric(field, column, Float64Array));\n+    }\n+    throw new Error(`Unrecognized FloatingPoint { precision: ${field.type.precision} }`);\n+}\n+\n+function readList(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    return { field, fieldNode, validity, offsets };\n+}\n+\n+// \"VALIDITY\": [1,1],\n+// \"OFFSET\": [0,7,14],\n+// \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n+function readBinary(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    // There are definitely more efficient ways to do this... but it gets the\n+    // job done.\n+    const joined = column.DATA.join('');\n+    let data = new Uint8Array(joined.length / 2);\n+    for (let i = 0; i < joined.length; i += 2) {\n+        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n+    }\n+    return { field, fieldNode, validity, offsets, data };\n+}\n+\n+function readNumeric<T extends TypedArray>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readData(ArrayConstructor, column.DATA);\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readInt64<T extends (Uint32Array|Int32Array)>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    let data = new ArrayConstructor(column.DATA.length * 2);\n+    for (let i = 0; i < column.DATA.length; ++i) {\n+        data[2 * i  ] = column.DATA[i] >>> 0;\n+        data[2 * i + 1] = Math.floor((column.DATA[i] / 0xFFFFFFFF));\n+    }\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readData<T extends TypedArray>(ArrayConstructor: TypedArrayConstructor<T>, column: [number]) {\n+    return new ArrayConstructor(column);\n+}\n+\n+function readValidity(column: any) {\n+    return readBoolean(column.VALIDITY);\n+}\n+\n+function readBoolean(arr: Array<number>) {\n+    let rtrn: Uint8Array = new Uint8Array(Math.ceil(arr.length / 8));\n+    for (const {item, index} of arr.map((item: any, index: number) => ({item, index}))) {\n+        rtrn[index / 8 | 0] |= item << (index % 8);\n+    }\n+    return rtrn;\n \n Review comment:\n   Should we use the [`BoolVector.pack`](https://github.com/apache/arrow/blob/master/js/src/vector/numeric.ts#L51) method here? I _think_ BoolVector's Uin8Array needs be padded with 0's till it aligns with the next 8'th byte\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T11:22:23.215+0000",
                    "updated": "2017-11-22T11:22:23.215+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16262339",
                    "id": "16262339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r152536620\n \n \n\n ##########\n File path: js/src/reader/json.ts\n ##########\n @@ -0,0 +1,238 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { flatbuffers } from 'flatbuffers';\n+import { Vector } from '../vector/vector';\n+import { TypedArray, TypedArrayConstructor } from '../vector/types';\n+import { BinaryVector, BoolVector, Utf8Vector, Int8Vector,\n+         Int16Vector, Int32Vector, Int64Vector, Uint8Vector,\n+         Uint16Vector, Uint32Vector, Uint64Vector,\n+         Float32Vector, Float64Vector, ListVector, StructVector } from '../vector/arrow';\n+\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+import { TextEncoder } from 'text-encoding-utf-8';\n+const encoder = new TextEncoder('utf-8');\n+\n+export function* readJSON(jsonString: string): IterableIterator<Vector<any>[]> {\n+    let obj: any = JSON.parse(jsonString);\n+    let schema: any = {};\n+    for (const field of obj.schema.fields) {\n+        schema[field.name] = field;\n+    }\n+\n+    for (const batch of obj.batches) {\n+        yield batch.columns.map((column: any): Vector => readVector(schema[column.name], column));\n+    }\n+}\n+\n+function readVector(field: any, column: any): Vector {\n+    return readDictionaryVector(field, column) || readValueVector(field, column);\n+}\n+\n+function readDictionaryVector(field: any, column: any) {\n+    if (field.name == column.name) { return null; } else { return null; }\n+}\n+\n+function readValueVector(field: any, column: any): Vector {\n+    switch (field.type.name) {\n+        //case \"NONE\": return readNullVector(field, column);\n+        //case \"null\": return readNullVector(field, column);\n+        //case \"map\": return readMapVector(field, column);\n+        case 'int': return readIntVector(field, column);\n+        case 'bool': return readBoolVector(field, column);\n+        //case \"date\": return readDateVector(field, column);\n+        case 'list': return readListVector(field, column);\n+        case 'utf8': return readUtf8Vector(field, column);\n+        //case \"time\": return readTimeVector(field, column);\n+        //case \"union\": return readUnionVector(field, column);\n+        case 'binary': return readBinaryVector(field, column);\n+        //case \"decimal\": return readDecimalVector(field, column);\n+        case 'struct': return readStructVector(field, column);\n+        case 'floatingpoint': return readFloatVector(field, column);\n+        //case \"timestamp\": return readTimestampVector(field, column);\n+        //case \"fixedsizelist\": return readFixedSizeListVector(field, column);\n+        //case \"fixedsizebinary\": return readFixedSizeBinaryVector(field, column);\n+    }\n+    throw new Error(`Unrecognized Vector { name: ${field.name}, type: ${field.type.name} }`);\n+}\n+\n+function readIntVector(field: any, column: any) {\n+    if (field.type.isSigned) {\n+        switch (field.type.bitWidth) {\n+            case  8: return new  Int8Vector(readNumeric(field, column, Int8Array));\n+            case 16: return new Int16Vector(readNumeric(field, column, Int16Array));\n+            case 32: return new Int32Vector(readNumeric(field, column, Int32Array));\n+            case 64: return new Int64Vector(readInt64(field, column, Int32Array));\n+        }\n+    }\n+    switch (field.type.bitWidth) {\n+        case  8: return new  Uint8Vector(readNumeric(field, column, Uint8Array));\n+        case 16: return new Uint16Vector(readNumeric(field, column, Uint16Array));\n+        case 32: return new Uint32Vector(readNumeric(field, column, Uint32Array));\n+        case 64: return new Uint64Vector(readInt64(field, column, Uint32Array));\n+    }\n+    throw new Error(`Unrecognized Int { isSigned: ${field.type.isSigned}, bitWidth: ${field.type.bitWidth} }`);\n+}\n+\n+function readBoolVector(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readBoolean(column.DATA);\n+    return new BoolVector({field, fieldNode, validity, data});\n+}\n+\n+function readListVector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    return new ListVector({\n+        field, fieldNode, validity, offsets,\n+        values: readVector(fieldObj.children[0], column.children[0])\n+    });\n+}\n+\n+function readUtf8Vector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    const data = encoder.encode(column.DATA.join(''));\n+    return new Utf8Vector({\n+        field, fieldNode,\n+        values: new BinaryVector({\n+            validity, offsets, data\n+        })\n+    });\n+}\n+\n+function readBinaryVector(field: any, column: any) {\n+    return new BinaryVector(readBinary(field, column));\n+}\n+\n+function readStructVector(fieldObj: any, column: any) {\n+    const n = fieldObj.children.length;\n+    const columns = new Array<Vector>(n);\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    for (let i = -1; ++i < n;) {\n+            columns[i] = readVector(fieldObj.children[i], column.children[i]);\n+    }\n+    return new StructVector({ field, fieldNode, validity, columns });\n+}\n+\n+function readFloatVector(field: any, column: any) {\n+    switch (field.type.precision) {\n+        // TODO: case \"HALF\":   return new Float16Vector(readNumeric(field, column, Uint16Array));\n+        case 'SINGLE': return new Float32Vector(readNumeric(field, column, Float32Array));\n+        case 'DOUBLE': return new Float64Vector(readNumeric(field, column, Float64Array));\n+    }\n+    throw new Error(`Unrecognized FloatingPoint { precision: ${field.type.precision} }`);\n+}\n+\n+function readList(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    return { field, fieldNode, validity, offsets };\n+}\n+\n+// \"VALIDITY\": [1,1],\n+// \"OFFSET\": [0,7,14],\n+// \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n+function readBinary(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    // There are definitely more efficient ways to do this... but it gets the\n+    // job done.\n+    const joined = column.DATA.join('');\n+    let data = new Uint8Array(joined.length / 2);\n+    for (let i = 0; i < joined.length; i += 2) {\n+        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n+    }\n+    return { field, fieldNode, validity, offsets, data };\n+}\n+\n+function readNumeric<T extends TypedArray>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readData(ArrayConstructor, column.DATA);\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readInt64<T extends (Uint32Array|Int32Array)>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    let data = new ArrayConstructor(column.DATA.length * 2);\n+    for (let i = 0; i < column.DATA.length; ++i) {\n+        data[2 * i  ] = column.DATA[i] >>> 0;\n+        data[2 * i + 1] = Math.floor((column.DATA[i] / 0xFFFFFFFF));\n+    }\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readData<T extends TypedArray>(ArrayConstructor: TypedArrayConstructor<T>, column: [number]) {\n+    return new ArrayConstructor(column);\n+}\n+\n+function readValidity(column: any) {\n+    return readBoolean(column.VALIDITY);\n+}\n+\n+function readBoolean(arr: Array<number>) {\n+    let rtrn: Uint8Array = new Uint8Array(Math.ceil(arr.length / 8));\n+    for (const {item, index} of arr.map((item: any, index: number) => ({item, index}))) {\n+        rtrn[index / 8 | 0] |= item << (index % 8);\n+    }\n+    return rtrn;\n+}\n+\n+const TYPE_LOOKUP: {[index: string]: fb.Schema.Type} = {\n+    'NONE':            fb.Schema.Type.NONE,\n+    'null':            fb.Schema.Type.Null,\n+    'map':             fb.Schema.Type.Map,\n+    'int':             fb.Schema.Type.Int,\n+    'bool':            fb.Schema.Type.Bool,\n+    'date':            fb.Schema.Type.Date,\n+    'list':            fb.Schema.Type.List,\n+    'utf8':            fb.Schema.Type.Utf8,\n+    'time':            fb.Schema.Type.Time,\n+    'union':           fb.Schema.Type.Union,\n+    'binary':          fb.Schema.Type.Binary,\n+    'decimal':         fb.Schema.Type.Decimal,\n+    'struct_':         fb.Schema.Type.Struct_,\n+    'floatingpoint':   fb.Schema.Type.FloatingPoint,\n+    'timestamp':       fb.Schema.Type.Timestamp,\n+    'fixedsizelist':   fb.Schema.Type.FixedSizeList,\n+    'fixedsizebinary': fb.Schema.Type.FixedSizeBinary\n+};\n \n Review comment:\n   TS enums do the identifier <-> value mappings, so I think we can avoid adding another type map here if we \r\n   `strtoupper` on the `obj.type.name` as we read. Thoughts?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T11:26:10.891+0000",
                    "updated": "2017-11-22T11:26:10.891+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16262340",
                    "id": "16262340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r152536620\n \n \n\n ##########\n File path: js/src/reader/json.ts\n ##########\n @@ -0,0 +1,238 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { flatbuffers } from 'flatbuffers';\n+import { Vector } from '../vector/vector';\n+import { TypedArray, TypedArrayConstructor } from '../vector/types';\n+import { BinaryVector, BoolVector, Utf8Vector, Int8Vector,\n+         Int16Vector, Int32Vector, Int64Vector, Uint8Vector,\n+         Uint16Vector, Uint32Vector, Uint64Vector,\n+         Float32Vector, Float64Vector, ListVector, StructVector } from '../vector/arrow';\n+\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+import { TextEncoder } from 'text-encoding-utf-8';\n+const encoder = new TextEncoder('utf-8');\n+\n+export function* readJSON(jsonString: string): IterableIterator<Vector<any>[]> {\n+    let obj: any = JSON.parse(jsonString);\n+    let schema: any = {};\n+    for (const field of obj.schema.fields) {\n+        schema[field.name] = field;\n+    }\n+\n+    for (const batch of obj.batches) {\n+        yield batch.columns.map((column: any): Vector => readVector(schema[column.name], column));\n+    }\n+}\n+\n+function readVector(field: any, column: any): Vector {\n+    return readDictionaryVector(field, column) || readValueVector(field, column);\n+}\n+\n+function readDictionaryVector(field: any, column: any) {\n+    if (field.name == column.name) { return null; } else { return null; }\n+}\n+\n+function readValueVector(field: any, column: any): Vector {\n+    switch (field.type.name) {\n+        //case \"NONE\": return readNullVector(field, column);\n+        //case \"null\": return readNullVector(field, column);\n+        //case \"map\": return readMapVector(field, column);\n+        case 'int': return readIntVector(field, column);\n+        case 'bool': return readBoolVector(field, column);\n+        //case \"date\": return readDateVector(field, column);\n+        case 'list': return readListVector(field, column);\n+        case 'utf8': return readUtf8Vector(field, column);\n+        //case \"time\": return readTimeVector(field, column);\n+        //case \"union\": return readUnionVector(field, column);\n+        case 'binary': return readBinaryVector(field, column);\n+        //case \"decimal\": return readDecimalVector(field, column);\n+        case 'struct': return readStructVector(field, column);\n+        case 'floatingpoint': return readFloatVector(field, column);\n+        //case \"timestamp\": return readTimestampVector(field, column);\n+        //case \"fixedsizelist\": return readFixedSizeListVector(field, column);\n+        //case \"fixedsizebinary\": return readFixedSizeBinaryVector(field, column);\n+    }\n+    throw new Error(`Unrecognized Vector { name: ${field.name}, type: ${field.type.name} }`);\n+}\n+\n+function readIntVector(field: any, column: any) {\n+    if (field.type.isSigned) {\n+        switch (field.type.bitWidth) {\n+            case  8: return new  Int8Vector(readNumeric(field, column, Int8Array));\n+            case 16: return new Int16Vector(readNumeric(field, column, Int16Array));\n+            case 32: return new Int32Vector(readNumeric(field, column, Int32Array));\n+            case 64: return new Int64Vector(readInt64(field, column, Int32Array));\n+        }\n+    }\n+    switch (field.type.bitWidth) {\n+        case  8: return new  Uint8Vector(readNumeric(field, column, Uint8Array));\n+        case 16: return new Uint16Vector(readNumeric(field, column, Uint16Array));\n+        case 32: return new Uint32Vector(readNumeric(field, column, Uint32Array));\n+        case 64: return new Uint64Vector(readInt64(field, column, Uint32Array));\n+    }\n+    throw new Error(`Unrecognized Int { isSigned: ${field.type.isSigned}, bitWidth: ${field.type.bitWidth} }`);\n+}\n+\n+function readBoolVector(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readBoolean(column.DATA);\n+    return new BoolVector({field, fieldNode, validity, data});\n+}\n+\n+function readListVector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    return new ListVector({\n+        field, fieldNode, validity, offsets,\n+        values: readVector(fieldObj.children[0], column.children[0])\n+    });\n+}\n+\n+function readUtf8Vector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    const data = encoder.encode(column.DATA.join(''));\n+    return new Utf8Vector({\n+        field, fieldNode,\n+        values: new BinaryVector({\n+            validity, offsets, data\n+        })\n+    });\n+}\n+\n+function readBinaryVector(field: any, column: any) {\n+    return new BinaryVector(readBinary(field, column));\n+}\n+\n+function readStructVector(fieldObj: any, column: any) {\n+    const n = fieldObj.children.length;\n+    const columns = new Array<Vector>(n);\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    for (let i = -1; ++i < n;) {\n+            columns[i] = readVector(fieldObj.children[i], column.children[i]);\n+    }\n+    return new StructVector({ field, fieldNode, validity, columns });\n+}\n+\n+function readFloatVector(field: any, column: any) {\n+    switch (field.type.precision) {\n+        // TODO: case \"HALF\":   return new Float16Vector(readNumeric(field, column, Uint16Array));\n+        case 'SINGLE': return new Float32Vector(readNumeric(field, column, Float32Array));\n+        case 'DOUBLE': return new Float64Vector(readNumeric(field, column, Float64Array));\n+    }\n+    throw new Error(`Unrecognized FloatingPoint { precision: ${field.type.precision} }`);\n+}\n+\n+function readList(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    return { field, fieldNode, validity, offsets };\n+}\n+\n+// \"VALIDITY\": [1,1],\n+// \"OFFSET\": [0,7,14],\n+// \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n+function readBinary(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    // There are definitely more efficient ways to do this... but it gets the\n+    // job done.\n+    const joined = column.DATA.join('');\n+    let data = new Uint8Array(joined.length / 2);\n+    for (let i = 0; i < joined.length; i += 2) {\n+        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n+    }\n+    return { field, fieldNode, validity, offsets, data };\n+}\n+\n+function readNumeric<T extends TypedArray>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readData(ArrayConstructor, column.DATA);\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readInt64<T extends (Uint32Array|Int32Array)>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    let data = new ArrayConstructor(column.DATA.length * 2);\n+    for (let i = 0; i < column.DATA.length; ++i) {\n+        data[2 * i  ] = column.DATA[i] >>> 0;\n+        data[2 * i + 1] = Math.floor((column.DATA[i] / 0xFFFFFFFF));\n+    }\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readData<T extends TypedArray>(ArrayConstructor: TypedArrayConstructor<T>, column: [number]) {\n+    return new ArrayConstructor(column);\n+}\n+\n+function readValidity(column: any) {\n+    return readBoolean(column.VALIDITY);\n+}\n+\n+function readBoolean(arr: Array<number>) {\n+    let rtrn: Uint8Array = new Uint8Array(Math.ceil(arr.length / 8));\n+    for (const {item, index} of arr.map((item: any, index: number) => ({item, index}))) {\n+        rtrn[index / 8 | 0] |= item << (index % 8);\n+    }\n+    return rtrn;\n+}\n+\n+const TYPE_LOOKUP: {[index: string]: fb.Schema.Type} = {\n+    'NONE':            fb.Schema.Type.NONE,\n+    'null':            fb.Schema.Type.Null,\n+    'map':             fb.Schema.Type.Map,\n+    'int':             fb.Schema.Type.Int,\n+    'bool':            fb.Schema.Type.Bool,\n+    'date':            fb.Schema.Type.Date,\n+    'list':            fb.Schema.Type.List,\n+    'utf8':            fb.Schema.Type.Utf8,\n+    'time':            fb.Schema.Type.Time,\n+    'union':           fb.Schema.Type.Union,\n+    'binary':          fb.Schema.Type.Binary,\n+    'decimal':         fb.Schema.Type.Decimal,\n+    'struct_':         fb.Schema.Type.Struct_,\n+    'floatingpoint':   fb.Schema.Type.FloatingPoint,\n+    'timestamp':       fb.Schema.Type.Timestamp,\n+    'fixedsizelist':   fb.Schema.Type.FixedSizeList,\n+    'fixedsizebinary': fb.Schema.Type.FixedSizeBinary\n+};\n \n Review comment:\n   TS enums do the identifier <-> value mappings, so I think we can avoid adding another type map here if we `strtoupper` on the `obj.type.name` as we read. Thoughts?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T11:26:21.009+0000",
                    "updated": "2017-11-22T11:26:21.009+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16262346",
                    "id": "16262346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r152537314\n \n \n\n ##########\n File path: js/src/format/arrow.ts\n ##########\n @@ -0,0 +1,61 @@\n+import { flatbuffers } from 'flatbuffers';\n+\n+import * as Schema_ from './Schema';\n+import * as Message_ from './Message';\n+import * as File_ from './Message';\n+\n+export namespace fb {\n+    export import Schema = Schema_.org.apache.arrow.flatbuf;\n+    export import Message = Message_.org.apache.arrow.flatbuf;\n+    export import File = File_.org.apache.arrow.flatbuf;\n+}\n \n Review comment:\n   @TheNeuralBit ah I misunderstood how you did these exports. In order to get closure compiler to work, we have to put the generated flatbuffers code in its own folder. We can move the generated files to `format/fb` and just re-export them from this file like you're doing here. I've got this working now in a branch, want me to PR?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T11:29:26.363+0000",
                    "updated": "2017-11-22T11:29:26.363+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16262352",
                    "id": "16262352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r152537908\n \n \n\n ##########\n File path: js/src/vector/traits.ts\n ##########\n @@ -17,11 +17,26 @@\n \n import { Vector } from './vector';\n import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+export type Field = ( fb.Schema.Field | FieldBuilder );\n+export type FieldNode = ( fb.Message.FieldNode | FieldNodeBuilder );\n \n Review comment:\n   This is great! I love it\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T11:32:18.289+0000",
                    "updated": "2017-11-22T11:32:18.289+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16262414",
                    "id": "16262414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r152544796\n \n \n\n ##########\n File path: js/src/format/arrow.ts\n ##########\n @@ -0,0 +1,61 @@\n+import { flatbuffers } from 'flatbuffers';\n+\n+import * as Schema_ from './Schema';\n+import * as Message_ from './Message';\n+import * as File_ from './Message';\n+\n+export namespace fb {\n+    export import Schema = Schema_.org.apache.arrow.flatbuf;\n+    export import Message = Message_.org.apache.arrow.flatbuf;\n+    export import File = File_.org.apache.arrow.flatbuf;\n+}\n \n Review comment:\n   Ah, actually I spoke too soon. The way TS compiles namespaces to nested IEFEs in JS confuses Closure Compiler's mangler, so all the `fb.Schema.Foo` references get mangled to different names. I remember figuring this out when I first turned on CC, and that's why we do the ugly `import * as Schema_` and `import Type = Schema_.org.apache.arrow.flatbuf.Type` nonsense everywhere. Ugh.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T12:07:21.135+0000",
                    "updated": "2017-11-22T12:07:21.135+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16263726",
                    "id": "16263726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-346523014\n \n \n   @TheNeuralBit thinking about this more, I think with a few modifications we could reuse all the [vector reader](https://github.com/apache/arrow/blob/9b2dc77a4d95c7415edd5be087a5abafc5a7f64c/js/src/reader/vector.ts#L49) functions for the JSON reader.\r\n   \r\n   If we move [`createTypedArray` and `createValidityArray`](https://github.com/apache/arrow/blob/9b2dc77a4d95c7415edd5be087a5abafc5a7f64c/js/src/reader/vector.ts#L261) into the `VectorReaderContext` interface, the `offset` field can become a private impl detail of how the [`BufferReaderContext`](https://github.com/apache/arrow/blob/9b2dc77a4d95c7415edd5be087a5abafc5a7f64c/js/src/reader/arrow.ts#L167) creates TypedArrays. Then we can implement a `JSONReaderContext` that creates its TypedArrays from the json. Lastly, we can keep going with your idea for shimming the flatbuffers interfaces. With a bit of reflection I think we can make this pretty slim.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T03:03:18.212+0000",
                    "updated": "2017-11-23T03:03:18.212+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16264862",
                    "id": "16264862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-346717240\n \n \n   Nice! Yeah it felt like I was copying a lot of code so I figured there must be some better way to combine the readers. I'm caught up working on parsing the 128-bit integer strings. Hopefully I'll find some time to wrap that up this weekend\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-24T01:16:56.343+0000",
                    "updated": "2017-11-24T01:16:56.343+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16277912",
                    "id": "16277912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on a change in pull request #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#discussion_r154833221\n \n \n\n ##########\n File path: js/src/reader/json.ts\n ##########\n @@ -0,0 +1,238 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { flatbuffers } from 'flatbuffers';\n+import { Vector } from '../vector/vector';\n+import { TypedArray, TypedArrayConstructor } from '../vector/types';\n+import { BinaryVector, BoolVector, Utf8Vector, Int8Vector,\n+         Int16Vector, Int32Vector, Int64Vector, Uint8Vector,\n+         Uint16Vector, Uint32Vector, Uint64Vector,\n+         Float32Vector, Float64Vector, ListVector, StructVector } from '../vector/arrow';\n+\n+import { fb, FieldBuilder, FieldNodeBuilder } from '../format/arrow';\n+\n+import { TextEncoder } from 'text-encoding-utf-8';\n+const encoder = new TextEncoder('utf-8');\n+\n+export function* readJSON(jsonString: string): IterableIterator<Vector<any>[]> {\n+    let obj: any = JSON.parse(jsonString);\n+    let schema: any = {};\n+    for (const field of obj.schema.fields) {\n+        schema[field.name] = field;\n+    }\n+\n+    for (const batch of obj.batches) {\n+        yield batch.columns.map((column: any): Vector => readVector(schema[column.name], column));\n+    }\n+}\n+\n+function readVector(field: any, column: any): Vector {\n+    return readDictionaryVector(field, column) || readValueVector(field, column);\n+}\n+\n+function readDictionaryVector(field: any, column: any) {\n+    if (field.name == column.name) { return null; } else { return null; }\n+}\n+\n+function readValueVector(field: any, column: any): Vector {\n+    switch (field.type.name) {\n+        //case \"NONE\": return readNullVector(field, column);\n+        //case \"null\": return readNullVector(field, column);\n+        //case \"map\": return readMapVector(field, column);\n+        case 'int': return readIntVector(field, column);\n+        case 'bool': return readBoolVector(field, column);\n+        //case \"date\": return readDateVector(field, column);\n+        case 'list': return readListVector(field, column);\n+        case 'utf8': return readUtf8Vector(field, column);\n+        //case \"time\": return readTimeVector(field, column);\n+        //case \"union\": return readUnionVector(field, column);\n+        case 'binary': return readBinaryVector(field, column);\n+        //case \"decimal\": return readDecimalVector(field, column);\n+        case 'struct': return readStructVector(field, column);\n+        case 'floatingpoint': return readFloatVector(field, column);\n+        //case \"timestamp\": return readTimestampVector(field, column);\n+        //case \"fixedsizelist\": return readFixedSizeListVector(field, column);\n+        //case \"fixedsizebinary\": return readFixedSizeBinaryVector(field, column);\n+    }\n+    throw new Error(`Unrecognized Vector { name: ${field.name}, type: ${field.type.name} }`);\n+}\n+\n+function readIntVector(field: any, column: any) {\n+    if (field.type.isSigned) {\n+        switch (field.type.bitWidth) {\n+            case  8: return new  Int8Vector(readNumeric(field, column, Int8Array));\n+            case 16: return new Int16Vector(readNumeric(field, column, Int16Array));\n+            case 32: return new Int32Vector(readNumeric(field, column, Int32Array));\n+            case 64: return new Int64Vector(readInt64(field, column, Int32Array));\n+        }\n+    }\n+    switch (field.type.bitWidth) {\n+        case  8: return new  Uint8Vector(readNumeric(field, column, Uint8Array));\n+        case 16: return new Uint16Vector(readNumeric(field, column, Uint16Array));\n+        case 32: return new Uint32Vector(readNumeric(field, column, Uint32Array));\n+        case 64: return new Uint64Vector(readInt64(field, column, Uint32Array));\n+    }\n+    throw new Error(`Unrecognized Int { isSigned: ${field.type.isSigned}, bitWidth: ${field.type.bitWidth} }`);\n+}\n+\n+function readBoolVector(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readBoolean(column.DATA);\n+    return new BoolVector({field, fieldNode, validity, data});\n+}\n+\n+function readListVector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    return new ListVector({\n+        field, fieldNode, validity, offsets,\n+        values: readVector(fieldObj.children[0], column.children[0])\n+    });\n+}\n+\n+function readUtf8Vector(fieldObj: any, column: any): Vector {\n+    const { field, fieldNode, validity, offsets } = readList(fieldObj, column);\n+    const data = encoder.encode(column.DATA.join(''));\n+    return new Utf8Vector({\n+        field, fieldNode,\n+        values: new BinaryVector({\n+            validity, offsets, data\n+        })\n+    });\n+}\n+\n+function readBinaryVector(field: any, column: any) {\n+    return new BinaryVector(readBinary(field, column));\n+}\n+\n+function readStructVector(fieldObj: any, column: any) {\n+    const n = fieldObj.children.length;\n+    const columns = new Array<Vector>(n);\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    for (let i = -1; ++i < n;) {\n+            columns[i] = readVector(fieldObj.children[i], column.children[i]);\n+    }\n+    return new StructVector({ field, fieldNode, validity, columns });\n+}\n+\n+function readFloatVector(field: any, column: any) {\n+    switch (field.type.precision) {\n+        // TODO: case \"HALF\":   return new Float16Vector(readNumeric(field, column, Uint16Array));\n+        case 'SINGLE': return new Float32Vector(readNumeric(field, column, Float32Array));\n+        case 'DOUBLE': return new Float64Vector(readNumeric(field, column, Float64Array));\n+    }\n+    throw new Error(`Unrecognized FloatingPoint { precision: ${field.type.precision} }`);\n+}\n+\n+function readList(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    return { field, fieldNode, validity, offsets };\n+}\n+\n+// \"VALIDITY\": [1,1],\n+// \"OFFSET\": [0,7,14],\n+// \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n+function readBinary(fieldObj: any, column: any) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const offsets = readData(Int32Array, column.OFFSET);\n+    // There are definitely more efficient ways to do this... but it gets the\n+    // job done.\n+    const joined = column.DATA.join('');\n+    let data = new Uint8Array(joined.length / 2);\n+    for (let i = 0; i < joined.length; i += 2) {\n+        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n+    }\n+    return { field, fieldNode, validity, offsets, data };\n+}\n+\n+function readNumeric<T extends TypedArray>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    const data = readData(ArrayConstructor, column.DATA);\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readInt64<T extends (Uint32Array|Int32Array)>(fieldObj: any, column: any, ArrayConstructor: TypedArrayConstructor<T>) {\n+    const field = fieldFromJSON(fieldObj);\n+    const fieldNode = fieldNodeFromJSON(column);\n+    const validity = readValidity(column);\n+    let data = new ArrayConstructor(column.DATA.length * 2);\n+    for (let i = 0; i < column.DATA.length; ++i) {\n+        data[2 * i  ] = column.DATA[i] >>> 0;\n+        data[2 * i + 1] = Math.floor((column.DATA[i] / 0xFFFFFFFF));\n+    }\n+    return { field, fieldNode, validity, data };\n+}\n+\n+function readData<T extends TypedArray>(ArrayConstructor: TypedArrayConstructor<T>, column: [number]) {\n+    return new ArrayConstructor(column);\n+}\n+\n+function readValidity(column: any) {\n+    return readBoolean(column.VALIDITY);\n+}\n+\n+function readBoolean(arr: Array<number>) {\n+    let rtrn: Uint8Array = new Uint8Array(Math.ceil(arr.length / 8));\n+    for (const {item, index} of arr.map((item: any, index: number) => ({item, index}))) {\n+        rtrn[index / 8 | 0] |= item << (index % 8);\n+    }\n+    return rtrn;\n+}\n+\n+const TYPE_LOOKUP: {[index: string]: fb.Schema.Type} = {\n+    'NONE':            fb.Schema.Type.NONE,\n+    'null':            fb.Schema.Type.Null,\n+    'map':             fb.Schema.Type.Map,\n+    'int':             fb.Schema.Type.Int,\n+    'bool':            fb.Schema.Type.Bool,\n+    'date':            fb.Schema.Type.Date,\n+    'list':            fb.Schema.Type.List,\n+    'utf8':            fb.Schema.Type.Utf8,\n+    'time':            fb.Schema.Type.Time,\n+    'union':           fb.Schema.Type.Union,\n+    'binary':          fb.Schema.Type.Binary,\n+    'decimal':         fb.Schema.Type.Decimal,\n+    'struct_':         fb.Schema.Type.Struct_,\n+    'floatingpoint':   fb.Schema.Type.FloatingPoint,\n+    'timestamp':       fb.Schema.Type.Timestamp,\n+    'fixedsizelist':   fb.Schema.Type.FixedSizeList,\n+    'fixedsizebinary': fb.Schema.Type.FixedSizeBinary\n+};\n \n Review comment:\n   @trxcllnt I like the idea but I don't think I can make it work since the identifiers are camel cased. If they were all lower or all upper I could just toupper or tolower `obj.type.name`, but as it stands now I don't see an easy way to make the key's case match the identifier's case for every option. Maybe I'm missing something?\r\n   \r\n   I could clean it up a bit by generating the lookup programmatically:\r\n   ``` typescript\r\n   const TYPE_LOOKUP: {[index: string]: Type} = {};\r\n   Object.keys(Type)   \r\n       .filter(k => typeof Type[k as any] === \"number\") // filter out reverse lookups\r\n       .forEach(k => TYPE_LOOKUP[k.toLowerCase()] = Type[k as any] as any as Type);\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-05T02:35:48.294+0000",
                    "updated": "2017-12-05T02:35:48.294+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16278610",
                    "id": "16278610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "TheNeuralBit commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-349317350\n \n \n   @trxcllnt here's a summary of the major remaining tasks on this item as I see it:\r\n   \r\n   1. Use strings for 64-bit ints everywhere, get rid of json-bignum dependency ([ARROW-1875](https://issues.apache.org/jira/browse/ARROW-1875)).\r\n   1. Use an actual equality check in `bin/integration.js` rather than comparing `Table.toString()`. Ideally, include diffs in output.\r\n   1. Create a `JSONReaderContext` implementation of `VectorReaderContext` and re-use the vector readers.\r\n   \r\n   I think the first two can wait until future PRs, but I'd like to get the last one done - what do you think?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-05T14:19:24.338+0000",
                    "updated": "2017-12-05T14:19:24.338+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16286944",
                    "id": "16286944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-350916758\n \n \n   @TheNeuralBit 087da8b03be90c017f6006f92715582758d64f0c should take care of item 3. A bit of refactoring to the buffer and JSON readers to create intermediate Arrow format AST, plus making the vector batch reader use the AST types. I based it mostly off the Java implementation, and I have a mostly-working buffer Writer locally that's also using this. Will be following up with that and more tests in the next few days.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-12T01:37:49.163+0000",
                    "updated": "2017-12-12T01:37:49.163+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16286945",
                    "id": "16286945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-350916758\n \n \n   @TheNeuralBit 087da8b03be90c017f6006f92715582758d64f0c should take care of item 3. A bit of refactoring to the buffer and JSON readers to create intermediate Arrow format AST, plus making the vector batch reader use the AST types. I based it off the Java implementation, and I have a mostly-working buffer Writer locally that's also using this. Will be following up with that and more tests in the next few days.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-12T01:38:07.323+0000",
                    "updated": "2017-12-12T01:38:07.323+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16286946",
                    "id": "16286946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-350916758\n \n \n   @TheNeuralBit 087da8b03be90c017f6006f92715582758d64f0c should take care of item 3. A bit of refactoring to the buffer and JSON readers to create intermediate Arrow format AST, plus making the vector batch reader use the AST types. I based it off the Java implementation, and I have a mostly-working buffer Writer locally that's also using the AST nodes. Will be following up with that and more tests in the next few days.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-12T01:38:20.589+0000",
                    "updated": "2017-12-12T01:38:20.589+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16291513",
                    "id": "16291513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-351820842\n \n \n   @wesm assuming the latest ci build passes, @TheNeuralBit and I think this is about ready to merge\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-14T20:04:19.122+0000",
                    "updated": "2017-12-14T20:04:19.122+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16293624",
                    "id": "16293624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "trxcllnt commented on issue #1343: [WIP] ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343#issuecomment-352156613\n \n \n   rebased from master\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-16T03:09:43.804+0000",
                    "updated": "2017-12-16T03:09:43.804+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16296155",
                    "id": "16296155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1343: ARROW-1832: [JS] Implement JSON reader for integration tests\nURL: https://github.com/apache/arrow/pull/1343\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/travis_script_integration.sh b/ci/travis_script_integration.sh\nindex 9514a30a8..0c415dc48 100755\n--- a/ci/travis_script_integration.sh\n+++ b/ci/travis_script_integration.sh\n@@ -20,6 +20,7 @@\n set -e\n \n source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n+export ARROW_CPP_EXE_PATH=$ARROW_CPP_BUILD_DIR/debug\n \n pushd $ARROW_JAVA_DIR\n \n@@ -28,8 +29,15 @@ mvn -B clean package 2>&1 > mvn_package.log || (cat mvn_package.log && false)\n \n popd\n \n+pushd $ARROW_JS_DIR\n+\n+# lint and compile JS source\n+npm run lint\n+npm run build\n+\n+popd\n+\n pushd $ARROW_INTEGRATION_DIR\n-export ARROW_CPP_EXE_PATH=$ARROW_CPP_BUILD_DIR/debug\n \n CONDA_ENV_NAME=arrow-integration-test\n conda create -y -q -n $CONDA_ENV_NAME python=3.5\n@@ -45,21 +53,11 @@ python integration_test.py --debug\n \n popd\n \n-pushd $ARROW_JS_DIR\n+# pushd $ARROW_JS_DIR\n \n-# lint and compile JS source\n-npm run lint\n-npm run build\n-# create initial test data\n-npm run create:testdata\n-# run once to write the snapshots\n-npm test -- -t ts -u --integration\n-# run again to test all builds against the snapshots\n-npm test -- --integration\n # run tests against source to generate coverage data\n-npm run test:coverage -- --integration\n+# npm run test:coverage\n # Uncomment to upload to coveralls\n # cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js;\n \n-\n-popd\n\\ No newline at end of file\n+# popd\n\\ No newline at end of file\ndiff --git a/integration/integration_test.py b/integration/integration_test.py\nindex 5468ab19d..79b098a61 100644\n--- a/integration/integration_test.py\n+++ b/integration/integration_test.py\n@@ -868,8 +868,8 @@ def __init__(self, json_files, testers, debug=False):\n         self.debug = debug\n \n     def run(self):\n-        for producer, consumer in itertools.product(self.testers,\n-                                                    self.testers):\n+        for producer, consumer in itertools.product(filter(lambda t: t.PRODUCER, self.testers),\n+                                                    filter(lambda t: t.CONSUMER, self.testers)):\n             self._compare_implementations(producer, consumer)\n \n     def _compare_implementations(self, producer, consumer):\n@@ -909,6 +909,8 @@ def _compare_implementations(self, producer, consumer):\n \n \n class Tester(object):\n+    PRODUCER = False\n+    CONSUMER = False\n \n     def __init__(self, debug=False):\n         self.debug = debug\n@@ -927,6 +929,8 @@ def validate(self, json_path, arrow_path):\n \n \n class JavaTester(Tester):\n+    PRODUCER = True\n+    CONSUMER = True\n \n     _arrow_version = load_version_from_pom()\n     ARROW_TOOLS_JAR = os.environ.get(\n@@ -978,6 +982,8 @@ def file_to_stream(self, file_path, stream_path):\n \n \n class CPPTester(Tester):\n+    PRODUCER = True\n+    CONSUMER = True\n \n     EXE_PATH = os.environ.get(\n         'ARROW_CPP_EXE_PATH',\n@@ -1025,6 +1031,41 @@ def file_to_stream(self, file_path, stream_path):\n             print(cmd)\n         os.system(cmd)\n \n+class JSTester(Tester):\n+    PRODUCER = False\n+    CONSUMER = True\n+\n+    INTEGRATION_EXE = os.path.join(ARROW_HOME, 'js/bin/integration.js')\n+\n+    name = 'JS'\n+\n+    def _run(self, arrow_path=None, json_path=None, command='VALIDATE'):\n+        cmd = [self.INTEGRATION_EXE]\n+\n+        if arrow_path is not None:\n+            cmd.extend(['-a', arrow_path])\n+\n+        if json_path is not None:\n+            cmd.extend(['-j', json_path])\n+\n+        cmd.extend(['--mode', command])\n+\n+        if self.debug:\n+            print(' '.join(cmd))\n+\n+        run_cmd(cmd)\n+\n+    def validate(self, json_path, arrow_path):\n+        return self._run(arrow_path, json_path, 'VALIDATE')\n+\n+    def stream_to_file(self, stream_path, file_path):\n+        # Just copy stream to file, we can read the stream directly\n+        cmd = ['cp', stream_path, file_path]\n+        cmd = ' '.join(cmd)\n+        if self.debug:\n+            print(cmd)\n+        os.system(cmd)\n+\n \n def get_static_json_files():\n     glob_pattern = os.path.join(ARROW_HOME, 'integration', 'data', '*.json')\n@@ -1032,7 +1073,7 @@ def get_static_json_files():\n \n \n def run_all_tests(debug=False):\n-    testers = [CPPTester(debug=debug), JavaTester(debug=debug)]\n+    testers = [CPPTester(debug=debug), JavaTester(debug=debug), JSTester(debug=debug)]\n     static_json_files = get_static_json_files()\n     generated_json_files = get_generated_json_files()\n     json_files = static_json_files + generated_json_files\ndiff --git a/js/bin/integration.js b/js/bin/integration.js\nnew file mode 100755\nindex 000000000..fe32433d3\n--- /dev/null\n+++ b/js/bin/integration.js\n@@ -0,0 +1,86 @@\n+#! /usr/bin/env node\n+\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+var path = require('path');\n+var gulp = require.resolve(path.join(`..`, `node_modules/gulp/bin/gulp.js`));\n+var child_process = require(`child_process`);\n+var optionList = [\n+    {\n+        type: String,\n+        name: 'mode',\n+        description: 'The integration test to run'\n+    },\n+    {\n+        type: String,\n+        name: 'arrow', alias: 'a',\n+        description: 'The Arrow file to read/write'\n+    },\n+    {\n+        type: String,\n+        name: 'json', alias: 'j',\n+        description: 'The JSON file to read/write'\n+    }\n+];\n+\n+var argv = require(`command-line-args`)(optionList, { partial: true });\n+\n+function print_usage() {\n+    console.log(require('command-line-usage')([\n+        {\n+            header: 'integration',\n+            content: 'Script for running Arrow integration tests'\n+        },\n+        {\n+            header: 'Synopsis',\n+            content: [\n+                '$ integration.js -j file.json -a file.arrow --mode validate'\n+            ]\n+        },\n+        {\n+            header: 'Options',\n+            optionList: [\n+                ...optionList,\n+                {\n+                    name: 'help',\n+                    description: 'Print this usage guide.'\n+                }\n+            ]\n+        },\n+    ]));\n+    process.exit(1);\n+}\n+\n+if (!argv.arrow || !argv.json || !argv.mode) {\n+    return print_usage();\n+}\n+\n+switch (argv.mode.toUpperCase()) {\n+    case 'VALIDATE':\n+        child_process.spawnSync(\n+            gulp,\n+            [`test`, `-i`].concat(process.argv.slice(2)),\n+            {\n+                cwd: path.resolve(__dirname, '..'),\n+                stdio: ['ignore', 'inherit', 'inherit']\n+            }\n+        );\n+        break;\n+    default:\n+        print_usage();\n+}\ndiff --git a/js/examples/read_file.html b/js/examples/read_file.html\nindex 2a1ebaba8..3093622fc 100644\n--- a/js/examples/read_file.html\n+++ b/js/examples/read_file.html\n@@ -40,7 +40,7 @@\n }\n reader.onload = function (evt) {\n \n-  var arrowTable = Arrow.Table.from(new Uint8Array(evt.target.result));\n+  var arrowTable = Arrow.Table.from([new Uint8Array(evt.target.result)]);\n   var thead = document.getElementById(\"thead\");\n   var tbody = document.getElementById(\"tbody\");\n \n@@ -53,13 +53,13 @@\n   }\n \n   var header_row = document.createElement(\"tr\");\n-  for (let column of arrowTable.cols()) {\n+  for (let column of arrowTable.columns) {\n     addCell(header_row, \"th\", column.name);\n   }\n \n   thead.appendChild(header_row);\n \n-  for (let row of arrowTable.rows(true)) {\n+  for (let row of arrowTable) {\n     var tr = document.createElement(\"tr\");\n     for (let cell of row) {\n       addCell(tr, \"td\",\n@@ -85,6 +85,6 @@\n       <tbody id=\"tbody\">\n       </tbody>\n     </table>\n-    <script type=\"text/javascript\" src=\"../dist/Arrow.js\"></script>\n+    <script type=\"text/javascript\" src=\"../targets/apache-arrow/Arrow.es5.min.js\"></script>\n   </body>\n </html>\ndiff --git a/js/gulp/argv.js b/js/gulp/argv.js\nindex 253553c73..6f80912e9 100644\n--- a/js/gulp/argv.js\n+++ b/js/gulp/argv.js\n@@ -16,12 +16,14 @@\n // under the License.\n \n const argv = require(`command-line-args`)([\n-    { name: `all`, alias: `a`, type: Boolean },\n+    { name: `all`, type: Boolean },\n     { name: 'update', alias: 'u', type: Boolean },\n     { name: 'verbose', alias: 'v', type: Boolean },\n     { name: `target`, type: String, defaultValue: `` },\n     { name: `module`, type: String, defaultValue: `` },\n     { name: `coverage`, type: Boolean, defaultValue: false },\n+    { name: `json_file`, alias: `j`, type: String, defaultValue: null },\n+    { name: `arrow_file`, alias: `a`, type: String, defaultValue: null },\n     { name: `integration`, alias: `i`, type: Boolean, defaultValue: false },\n     { name: `targets`, alias: `t`, type: String, multiple: true, defaultValue: [] },\n     { name: `modules`, alias: `m`, type: String, multiple: true, defaultValue: [] },\n@@ -36,4 +38,4 @@ argv.module && !modules.length && modules.push(argv.module);\n (argv.all || !targets.length) && targets.push(`all`);\n (argv.all || !modules.length) && modules.push(`all`);\n \n-module.exports = { argv, targets, modules };\n\\ No newline at end of file\n+module.exports = { argv, targets, modules };\ndiff --git a/js/gulp/closure-task.js b/js/gulp/closure-task.js\nindex a1f0a9a69..1bd872fd3 100644\n--- a/js/gulp/closure-task.js\n+++ b/js/gulp/closure-task.js\n@@ -27,6 +27,8 @@ const gulp = require('gulp');\n const path = require('path');\n const sourcemaps = require('gulp-sourcemaps');\n const { memoizeTask } = require('./memoize-task');\n+const ASTBuilders = require('ast-types').builders;\n+const transformAST = require('gulp-transform-js-ast');\n const { Observable, ReplaySubject } = require('rxjs');\n const closureCompiler = require('google-closure-compiler').gulp();\n \n@@ -48,6 +50,9 @@ const closureTask = ((cache) => memoizeTask(cache, function closure(target, form\n         ], { base: `./` }),\n         sourcemaps.init(),\n         closureCompiler(createClosureArgs(entry, externs)),\n+        // Strip out closure compiler's error-throwing iterator-return methods\n+        // see this issue: https://github.com/google/closure-compiler/issues/2728\n+        transformAST(iteratorReturnVisitor),\n         // rename the sourcemaps from *.js.map files to *.min.js.map\n         sourcemaps.write(`.`, { mapFile: (mapPath) => mapPath.replace(`.js.map`, `.${target}.min.js.map`) }),\n         gulp.dest(out)\n@@ -62,8 +67,9 @@ const createClosureArgs = (entry, externs) => ({\n     externs: `${externs}.js`,\n     entry_point: `${entry}.js`,\n     module_resolution: `NODE`,\n-    // formatting: `PRETTY_PRINT`,\n+    // formatting: `PRETTY_PRINT`, debug: true,\n     compilation_level: `ADVANCED`,\n+    allow_method_call_decomposing: true,\n     package_json_entry_names: `module,jsnext:main,main`,\n     assume_function_wrapper: true,\n     js_output_file: `${mainExport}.js`,\n@@ -95,3 +101,24 @@ const createClosureArgs = (entry, externs) => ({\n \n module.exports = closureTask;\n module.exports.closureTask = closureTask;\n+\n+const iteratorReturnVisitor = {\n+    visitObjectExpression(p) {\n+        const node = p.node, value = p.value;\n+        if (!node.properties || !(node.properties.length === 3)) { return value; }\n+        if (!propertyIsThrowingIteratorReturn(node.properties[2])) { return value; }\n+        value.properties = value.properties.slice(0, 2);\n+        return value;\n+    }\n+};\n+\n+function propertyIsThrowingIteratorReturn(p) {\n+    if (!p || !(p.kind === 'init')) { return false; }\n+    if (!p.key || !(p.key.type === 'Identifier') || !(p.key.name === 'return')) { return false; }\n+    if (!p.value || !(p.value.type === 'FunctionExpression') || !p.value.params || !(p.value.params.length === 0)) { return false; }\n+    if (!p.value.body || !p.value.body.body || !(p.value.body.body.length === 1) || !(p.value.body.body[0].type === 'ThrowStatement')) { return false; }\n+    if (!p.value.body.body[0].argument || !(p.value.body.body[0].argument.type === 'CallExpression')) { return false; }\n+    if (!p.value.body.body[0].argument.arguments || !(p.value.body.body[0].argument.arguments.length === 1)) { return false; }\n+    if (!p.value.body.body[0].argument.arguments[0] || !(p.value.body.body[0].argument.arguments[0].type === 'Literal')) { return false; }\n+    return p.value.body.body[0].argument.arguments[0].value === 'Not yet implemented';\n+}\n\\ No newline at end of file\ndiff --git a/js/gulp/package-task.js b/js/gulp/package-task.js\nindex 824284e6a..fc9596435 100644\n--- a/js/gulp/package-task.js\n+++ b/js/gulp/package-task.js\n@@ -53,7 +53,12 @@ const createMainPackageJson = (target, format) => (orig) => ({\n   \n const createTypeScriptPackageJson = (target, format) => (orig) => ({\n     ...createScopedPackageJSON(target, format)(orig),\n-    main: `${mainExport}.ts`, types: `${mainExport}.ts`\n+    main: `${mainExport}.ts`, types: `${mainExport}.ts`,\n+    dependencies: {\n+        '@types/flatbuffers': '*',\n+        '@types/node': '*',\n+        ...orig.dependencies\n+    }\n });\n   \n const createScopedPackageJSON = (target, format) => (({ name, ...orig }) =>\ndiff --git a/js/gulp/test-task.js b/js/gulp/test-task.js\nindex ac9755e11..f21aaf236 100644\n--- a/js/gulp/test-task.js\n+++ b/js/gulp/test-task.js\n@@ -36,16 +36,20 @@ argv.coverage && jestArgv.push(`--coverage`);\n \n const debugArgv = [`--runInBand`, `--env`, `jest-environment-node-debug`];\n const jest = require.resolve(path.join(`..`, `node_modules`, `.bin`, `jest`));\n+const testOptions = {\n+    env: { ...process.env },\n+    stdio: [`ignore`, `inherit`, `inherit`],\n+};\n \n const testTask = ((cache, execArgv, testOptions) => memoizeTask(cache, function test(target, format, debug = false) {\n     const opts = { ...testOptions };\n     const args = !debug ? [...execArgv] : [...debugArgv, ...execArgv];\n-    if (!argv.integration) {\n-        args.push('test/vector-tests.ts');\n-    }\n+    args.push(`test/${argv.integration ? `integration/*` : `unit/*`}`);\n     opts.env = { ...opts.env,\n         TEST_TARGET: target,\n         TEST_MODULE: format,\n+        JSON_PATH: argv.json_file,\n+        ARROW_PATH: argv.arrow_file,\n         TEST_TS_SOURCE: !!argv.coverage,\n         TEST_SOURCES: JSON.stringify(Array.isArray(argv.sources) ? argv.sources : [argv.sources]),\n         TEST_FORMATS: JSON.stringify(Array.isArray(argv.formats) ? argv.formats : [argv.formats]),\n@@ -53,10 +57,7 @@ const testTask = ((cache, execArgv, testOptions) => memoizeTask(cache, function\n     return !debug ?\n         child_process.spawn(jest, args, opts) :\n         child_process.exec(`node --inspect-brk ${jest} ${args.join(` `)}`, opts);\n-}))({}, jestArgv, {\n-    env: { ...process.env },\n-    stdio: [`ignore`, `inherit`, `inherit`],\n-});\n+}))({}, jestArgv, testOptions);\n \n module.exports = testTask;\n module.exports.testTask = testTask;\ndiff --git a/js/gulp/typescript-task.js b/js/gulp/typescript-task.js\nindex 2fd9f1350..8b755cf7f 100644\n--- a/js/gulp/typescript-task.js\n+++ b/js/gulp/typescript-task.js\n@@ -52,10 +52,10 @@ function maybeCopyRawJSArrowFormatFiles(target, format) {\n         return Observable.empty();\n     }\n     return Observable.defer(async () => {\n-        const outFormatDir = path.join(targetDir(target, format), `format`);\n+        const outFormatDir = path.join(targetDir(target, format), `format`, `fb`);\n         await del(path.join(outFormatDir, '*.js'));\n         await observableFromStreams(\n-            gulp.src(path.join(`src`, `format`, `*_generated.js`)),\n+            gulp.src(path.join(`src`, `format`, `fb`, `*_generated.js`)),\n             gulpRename((p) => { p.basename = p.basename.replace(`_generated`, ``); }),\n             gulp.dest(outFormatDir)\n         ).toPromise();\ndiff --git a/js/gulp/util.js b/js/gulp/util.js\nindex 23476da2d..ba6ebece5 100644\n--- a/js/gulp/util.js\n+++ b/js/gulp/util.js\n@@ -27,11 +27,12 @@ const npmOrgName = `@${npmPkgName}`;\n const releasesRootDir = `targets`;\n const knownTargets = [`es5`, `es2015`, `esnext`];\n const knownModules = [`cjs`, `esm`, `cls`, `umd`];\n-const moduleFormatsToSkipCombosOf = { cls: true };\n+const moduleFormatsToSkipCombosOf = { cls: { test: true, integration: true } };\n const packageJSONFields = [\n   `version`, `license`, `description`,\n   `author`, `homepage`, `repository`,\n-  `bugs`, `keywords`,  `dependencies`\n+  `bugs`, `keywords`,  `dependencies`,\n+  `bin`\n ];\n \n const metadataFiles = [`LICENSE.txt`, `NOTICE.txt`, `README.md`].map((filename) => {\ndiff --git a/js/gulpfile.js b/js/gulpfile.js\nindex a60363214..7b8296203 100644\n--- a/js/gulpfile.js\n+++ b/js/gulpfile.js\n@@ -93,13 +93,13 @@ gulp.task(`debug`, gulp.series(getTasks(`debug`)));\n gulp.task(`clean`, gulp.parallel(getTasks(`clean`)));\n gulp.task(`build`, buildConcurrent(getTasks(`build`)));\n gulp.task(`default`,  gulp.series(`build`, `test`));\n-  \n+\n function getTasks(name) {\n     const tasks = [];\n     if (targets.indexOf(`ts`) !== -1) tasks.push(`${name}:ts`);\n     if (targets.indexOf(npmPkgName) !== -1) tasks.push(`${name}:${npmPkgName}`);\n     for (const [target, format] of combinations(targets, modules)) {\n-        if (moduleFormatsToSkipCombosOf[format] && name === `test`) {\n+        if (moduleFormatsToSkipCombosOf[format] && moduleFormatsToSkipCombosOf[format][name]) {\n             continue;\n         }\n         tasks.push(`${name}:${taskName(target, format)}`);\ndiff --git a/js/package.json b/js/package.json\nindex 8e5c42ef7..179107b63 100644\n--- a/js/package.json\n+++ b/js/package.json\n@@ -1,14 +1,10 @@\n {\n-  \"name\": \"apache-arrow\",\n   \"version\": \"0.2.0\",\n-  \"types\": \"./types/Arrow.d.ts\",\n-  \"typings\": \"./types/Arrow.d.ts\",\n-  \"main\": \"./targets/es5/cjs/Arrow.js\",\n-  \"module\": \"./targets/es5/esm/Arrow.js\",\n-  \"browser\": \"./targets/es5/umd/Arrow.js\",\n-  \"jsnext:main\": \"./targets/es2015/esm/Arrow.js\",\n-  \"esnext:main\": \"./targets/esnext/esm/Arrow.js\",\n+  \"name\": \"apache-arrow\",\n   \"description\": \"Apache Arrow columnar in-memory format\",\n+  \"bin\": {\n+    \"arrow2csv\": \"bin/arrow2csv\"\n+  },\n   \"scripts\": {\n     \"lerna\": \"lerna\",\n     \"test\": \"gulp test\",\n@@ -57,50 +53,54 @@\n     \"command-line-usage\": \"4.0.1\"\n   },\n   \"dependencies\": {\n+    \"command-line-args\": \"4.0.7\",\n+    \"command-line-usage\": \"4.0.2\",\n     \"flatbuffers\": \"trxcllnt/flatbuffers-esm\",\n+    \"json-bignum\": \"0.0.3\",\n     \"text-encoding-utf-8\": \"^1.0.2\",\n-    \"tslib\": \"^1.8.0\"\n+    \"tslib\": \"1.8.1\"\n   },\n   \"devDependencies\": {\n-    \"@std/esm\": \"0.13.0\",\n+    \"@std/esm\": \"0.18.0\",\n     \"@types/flatbuffers\": \"1.6.5\",\n-    \"@types/glob\": \"5.0.33\",\n-    \"@types/jest\": \"21.1.6\",\n-    \"@types/node\": \"8.0.51\",\n+    \"@types/glob\": \"5.0.34\",\n+    \"@types/jest\": \"21.1.8\",\n+    \"@types/node\": \"8.5.0\",\n     \"@types/text-encoding\": \"0.0.32\",\n+    \"ast-types\": \"0.10.1\",\n     \"benchmark\": \"2.1.4\",\n-    \"command-line-args\": \"4.0.7\",\n     \"coveralls\": \"3.0.0\",\n     \"del\": \"3.0.0\",\n     \"esdoc\": \"1.0.3\",\n     \"esdoc-standard-plugin\": \"1.0.0\",\n     \"glob\": \"7.1.2\",\n-    \"google-closure-compiler\": \"20171112.0.0\",\n+    \"google-closure-compiler\": \"20171203.0.0\",\n     \"gulp\": \"github:gulpjs/gulp#4.0\",\n     \"gulp-json-transform\": \"0.4.5\",\n     \"gulp-rename\": \"1.2.2\",\n     \"gulp-sourcemaps\": \"2.6.1\",\n+    \"gulp-transform-js-ast\": \"1.0.2\",\n     \"gulp-typescript\": \"3.2.3\",\n-    \"ix\": \"2.3.1\",\n+    \"ix\": \"2.3.4\",\n     \"jest\": \"21.2.1\",\n     \"jest-environment-node-debug\": \"2.0.0\",\n     \"json\": \"9.0.6\",\n     \"lerna\": \"2.5.1\",\n-    \"lint-staged\": \"5.0.0\",\n+    \"lint-staged\": \"6.0.0\",\n     \"merge2\": \"1.2.0\",\n     \"mkdirp\": \"0.5.1\",\n     \"npm-run-all\": \"4.1.2\",\n     \"pump\": \"1.0.2\",\n     \"rimraf\": \"2.6.2\",\n-    \"rxjs\": \"5.5.2\",\n+    \"rxjs\": \"5.5.5\",\n     \"shx\": \"0.2.2\",\n     \"source-map-loader\": \"0.2.3\",\n-    \"trash\": \"4.1.0\",\n-    \"ts-jest\": \"21.2.1\",\n+    \"trash\": \"4.2.1\",\n+    \"ts-jest\": \"21.2.4\",\n     \"tslint\": \"5.8.0\",\n-    \"typescript\": \"2.6.1\",\n-    \"uglifyjs-webpack-plugin\": \"1.0.1\",\n-    \"webpack\": \"3.8.1\",\n+    \"typescript\": \"2.6.2\",\n+    \"uglifyjs-webpack-plugin\": \"1.1.2\",\n+    \"webpack\": \"3.10.0\",\n     \"xml2js\": \"0.4.19\"\n   },\n   \"lint-staged\": {\ndiff --git a/js/src/Arrow.ts b/js/src/Arrow.ts\nindex e6527b34e..3a8943434 100644\n--- a/js/src/Arrow.ts\n+++ b/js/src/Arrow.ts\n@@ -20,7 +20,8 @@ import { Vector } from './vector/vector';\n import { Utf8Vector } from './vector/utf8';\n import { DictionaryVector } from './vector/dictionary';\n import { StructVector, StructRow } from './vector/struct';\n-import { readVectors, readVectorsAsync } from './reader/arrow';\n+import { read, readAsync } from './reader/arrow';\n+import { Uint64, Int64, Int128 } from './util/int';\n import { ListVector, BinaryVector, FixedSizeListVector } from './vector/list';\n \n import {\n@@ -44,8 +45,16 @@ import {\n     TimestampVector,\n } from './vector/numeric';\n \n+// closure compiler always erases static method names:\n+// https://github.com/google/closure-compiler/issues/1776\n+// set them via string indexers to save them from the mangler\n+Table['from'] = Table.from;\n+Table['fromAsync'] = Table.fromAsync;\n+BoolVector['pack'] = BoolVector.pack;\n+\n+export { read, readAsync };\n export { Table, Vector, StructRow };\n-export { readVectors, readVectorsAsync };\n+export { Uint64, Int64, Int128 };\n export { NumericVectorConstructor } from './vector/numeric';\n export { List, TypedArray, TypedArrayConstructor } from './vector/types';\n export {\n@@ -80,8 +89,8 @@ try {\n     const Arrow = eval('exports');\n     if (typeof Arrow === 'object') {\n         // string indexers tell closure compiler not to rename these properties\n-        Arrow['readVectors'] = readVectors;\n-        Arrow['readVectorsAsync'] = readVectorsAsync;\n+        Arrow['read'] = read;\n+        Arrow['readAsync'] = readAsync;\n         Arrow['Table'] = Table;\n         Arrow['Vector'] = Vector;\n         Arrow['StructRow'] = StructRow;\ndiff --git a/js/bin/arrow2csv.js b/js/src/bin/arrow2csv.ts\nold mode 100755\nnew mode 100644\nsimilarity index 53%\nrename from js/bin/arrow2csv.js\nrename to js/src/bin/arrow2csv.ts\nindex f316b84b6..01ef0b848\n--- a/js/bin/arrow2csv.js\n+++ b/js/src/bin/arrow2csv.ts\n@@ -1,4 +1,4 @@\n-#! /usr/bin/env node\n+// #! /usr/bin/env node\n \n // Licensed to the Apache Software Foundation (ASF) under one\n // or more contributor license agreements.  See the NOTICE file\n@@ -17,13 +17,19 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-var fs = require('fs');\n-var Table = require('../dist/Arrow.js').Table;\n-var optionList = [\n+/* tslint:disable */\n+\n+import * as Arrow from '../Arrow';\n+\n+(function() {\n+\n+const fs = require('fs');\n+const { parse } = require('json-bignum');\n+const optionList = [\n     {\n         type: String,\n-        name: 'schema',\n-        alias: 's', multiple: true,\n+        name: 'schema', alias: 's',\n+        optional: true, multiple: true,\n         typeLabel: '[underline]{columns}',\n         description: 'A space-delimited list of column names'\n     },\n@@ -34,12 +40,10 @@ var optionList = [\n     }\n ];\n \n-var argv = require(`command-line-args`)(optionList, { partial: true });\n-var files = [argv.file, ...(argv._unknown || [])].filter(Boolean);\n-\n-// console.log(JSON.stringify(argv));\n+const argv = require(`command-line-args`)(optionList, { partial: true });\n+const files = [argv.file, ...(argv._unknown || [])].filter(Boolean);\n \n-if (!argv.schema || !files.length) {\n+if (!files.length) {\n     console.log(require('command-line-usage')([\n         {\n             header: 'arrow2csv',\n@@ -81,9 +85,51 @@ if (!argv.schema || !files.length) {\n }\n \n files.forEach((source) => {\n-    var allColumns = Table.from(fs.readFileSync(source));\n-    var selectedColumns = new Table(argv.schema.map((columnName) => {\n-        return allColumns.getColumn(columnName);\n-    }));\n-    console.log(selectedColumns.toString());\n+    let table: any, input = fs.readFileSync(source);\n+    try {\n+        table = Arrow.Table.from([input]);\n+    } catch (e) {\n+        table = Arrow.Table.from(parse(input + ''));\n+    }\n+    if (argv.schema && argv.schema.length) {\n+        table = table.select(...argv.schema);\n+    }\n+    printTable(table);\n });\n+\n+function printTable(table: Arrow.Table<any>) {\n+    let header = [...table.columns.map((_, i) => table.key(i))].map(stringify);\n+    let maxColumnWidths = header.map(x => x.length);\n+    // Pass one to convert to strings and count max column widths\n+    for (let i = -1, n = table.length - 1; ++i < n;) {\n+        let val,\n+            row = [i, ...table.get(i)];\n+        for (let j = -1, k = row.length; ++j < k; ) {\n+            val = stringify(row[j]);\n+            maxColumnWidths[j] = Math.max(maxColumnWidths[j], val.length);\n+        }\n+    }\n+    console.log(header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(' | '));\n+    // Pass two to pad each one to max column width\n+    for (let i = -1, n = table.length; ++i < n; ) {\n+        console.log(\n+            [...table.get(i)]\n+                .map(stringify)\n+                .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n+                .join(' | ')\n+        );\n+    }\n+}\n+\n+function leftPad(str: string, fill: string, n: number) {\n+    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n+}\n+\n+function stringify(x: any) {\n+    return typeof x === 'string' ? `\"${x}\"`\n+              : Array.isArray(x) ? JSON.stringify(x)\n+              : ArrayBuffer.isView(x) ? `[${x}]`\n+                                      : `${x}`;\n+}\n+\n+})();\n\\ No newline at end of file\ndiff --git a/js/src/format/arrow.ts b/js/src/format/arrow.ts\nnew file mode 100644\nindex 000000000..14adf9040\n--- /dev/null\n+++ b/js/src/format/arrow.ts\n@@ -0,0 +1,32 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { footerFromByteBuffer, messageFromByteBuffer } from './fb';\n+import { schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n+import {\n+    IntBitWidth, TimeBitWidth,\n+    VisitorNode, Visitor, Footer, Block, Message, Schema, RecordBatch, DictionaryBatch, Field, DictionaryEncoding, Buffer, FieldNode,\n+    Null, Int, FloatingPoint, Binary, Bool, Utf8, Decimal, Date, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n+} from './types';\n+\n+export {\n+    IntBitWidth, TimeBitWidth,\n+    footerFromByteBuffer, messageFromByteBuffer,\n+    schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON,\n+    VisitorNode, Visitor, Footer, Block, Message, Schema, RecordBatch, DictionaryBatch, Field, DictionaryEncoding, Buffer, FieldNode,\n+    Null, Int, FloatingPoint, Binary, Bool, Utf8, Decimal, Date, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_ as Map,\n+};\ndiff --git a/js/src/format/fb.ts b/js/src/format/fb.ts\nnew file mode 100644\nindex 000000000..fdf7f7b0e\n--- /dev/null\n+++ b/js/src/format/fb.ts\n@@ -0,0 +1,234 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import * as File_ from './fb/File';\n+import * as Schema_ from './fb/Schema';\n+import * as Message_ from './fb/Message';\n+import { flatbuffers } from 'flatbuffers';\n+import ByteBuffer = flatbuffers.ByteBuffer;\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\n+import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n+import _Footer = File_.org.apache.arrow.flatbuf.Footer;\n+import _Block = File_.org.apache.arrow.flatbuf.Block;\n+import _Message = Message_.org.apache.arrow.flatbuf.Message;\n+import _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\n+import _Field = Schema_.org.apache.arrow.flatbuf.Field;\n+import _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\n+import _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\n+import _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+import _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\n+import _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n+import _Null = Schema_.org.apache.arrow.flatbuf.Null;\n+import _Int = Schema_.org.apache.arrow.flatbuf.Int;\n+import _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\n+import _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\n+import _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\n+import _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\n+import _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\n+import _Date = Schema_.org.apache.arrow.flatbuf.Date;\n+import _Time = Schema_.org.apache.arrow.flatbuf.Time;\n+import _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\n+import _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\n+import _List = Schema_.org.apache.arrow.flatbuf.List;\n+import _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\n+import _Union = Schema_.org.apache.arrow.flatbuf.Union;\n+import _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\n+import _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\n+import _Map = Schema_.org.apache.arrow.flatbuf.Map;\n+\n+import {\n+    IntBitWidth, TimeBitWidth,\n+    Footer, Block, Schema, RecordBatch, DictionaryBatch, Field, DictionaryEncoding, Buffer, FieldNode,\n+    Null, Int, FloatingPoint, Binary, Bool, Utf8, Decimal, Date, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n+} from './types';\n+\n+export function footerFromByteBuffer(bb: ByteBuffer) {\n+    const f = _Footer.getRootAsFooter(bb), s = f.schema()!;\n+    return new Footer(\n+        dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f),\n+        new Schema(f.version(), fieldsFromSchema(s), customMetadata(s), s.endianness())\n+    );\n+}\n+\n+export function messageFromByteBuffer(bb: ByteBuffer) {\n+    const m = _Message.getRootAsMessage(bb)!, type = m.headerType(), version = m.version();\n+    switch (type) {\n+        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema())!);\n+        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m.header(new _RecordBatch())!);\n+        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m.header(new _DictionaryBatch())!);\n+    }\n+    return null;\n+    // throw new Error(`Unrecognized Message type '${type}'`);\n+}\n+\n+function schemaFromMessage(version: MetadataVersion, s: _Schema) {\n+    return new Schema(version, fieldsFromSchema(s), customMetadata(s), s.endianness());\n+}\n+\n+function recordBatchFromMessage(version: MetadataVersion, b: _RecordBatch) {\n+    return new RecordBatch(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version));\n+}\n+\n+function dictionaryBatchFromMessage(version: MetadataVersion, d: _DictionaryBatch) {\n+    return new DictionaryBatch(version, recordBatchFromMessage(version, d.data()!), d.id(), d.isDelta());\n+}\n+\n+function dictionaryBatchesFromFooter(f: _Footer) {\n+    const blocks = [] as Block[];\n+    for (let b: _Block, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n+        if (b = f.dictionaries(i)!) {\n+            blocks.push(new Block(b.metaDataLength(), b.bodyLength(), b.offset()));\n+        }\n+    }\n+    return blocks;\n+}\n+\n+function recordBatchesFromFooter(f: _Footer) {\n+    const blocks = [] as Block[];\n+    for (let b: _Block, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n+        if (b = f.recordBatches(i)!) {\n+            blocks.push(new Block(b.metaDataLength(), b.bodyLength(), b.offset()));\n+        }\n+    }\n+    return blocks;\n+}\n+\n+function fieldsFromSchema(s: _Schema) {\n+    const fields = [] as Field[];\n+    for (let i = -1, n = s && s.fieldsLength(); ++i < n;) {\n+        fields.push(field(s.fields(i)!));\n+    }\n+    return fields;\n+}\n+\n+function fieldsFromField(f: _Field) {\n+    const fields = [] as Field[];\n+    for (let i = -1, n = f && f.childrenLength(); ++i < n;) {\n+        fields.push(field(f.children(i)!));\n+    }\n+    return fields;\n+}\n+\n+function fieldNodesFromRecordBatch(b: _RecordBatch) {\n+    const fieldNodes = [] as FieldNode[];\n+    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n+        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)!));\n+    }\n+    return fieldNodes;\n+}\n+\n+function buffersFromRecordBatch(b: _RecordBatch, version: MetadataVersion) {\n+    const buffers = [] as Buffer[];\n+    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n+        let buffer = b.buffers(i)!;\n+        // If this Arrow buffer was written before version 4,\n+        // advance the buffer's bb_pos 8 bytes to skip past\n+        // the now-removed page id field.\n+        if (version < MetadataVersion.V4) {\n+            buffer.bb_pos += (8 * (i + 1));\n+        }\n+        buffers.push(bufferFromRecordBatch(buffer));\n+    }\n+    return buffers;\n+}\n+\n+function field(f: _Field) {\n+    return new Field(\n+        f.name()!,\n+        typeFromField(f),\n+        f.typeType(),\n+        f.nullable(),\n+        fieldsFromField(f),\n+        customMetadata(f),\n+        dictionaryEncodingFromField(f)\n+    );\n+}\n+\n+function dictionaryEncodingFromField(f: _Field) {\n+    let t: _Int | null;\n+    let e: _DictionaryEncoding | null;\n+    if (e = f.dictionary()) {\n+        if (t = e.indexType()) {\n+            return new DictionaryEncoding(new Int(t.isSigned(), t.bitWidth() as IntBitWidth), e.id(), e.isOrdered());\n+        }\n+        return new DictionaryEncoding(null, e.id(), e.isOrdered());\n+    }\n+    return undefined;\n+}\n+\n+function customMetadata(parent?: _Schema | _Field | null) {\n+    const data = new Map<string, string>();\n+    if (parent) {\n+        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n+            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n+                data.set(key, entry.value()!);\n+            }\n+        }\n+    }\n+    return data;\n+}\n+\n+function fieldNodeFromRecordBatch(f: _FieldNode) {\n+    return new FieldNode(f.length(), f.nullCount());\n+}\n+\n+function bufferFromRecordBatch(b: _Buffer) {\n+    return new Buffer(b.offset(), b.length());\n+}\n+\n+function typeFromField(f: _Field) {\n+    switch (f.typeType()) {\n+        case Type.NONE: return nullFromField(f.type(new _Null())!);\n+        case Type.Null: return nullFromField(f.type(new _Null())!);\n+        case Type.Int: return intFromField(f.type(new _Int())!);\n+        case Type.FloatingPoint: return floatingPointFromField(f.type(new _FloatingPoint())!);\n+        case Type.Binary: return binaryFromField(f.type(new _Binary())!);\n+        case Type.Utf8: return utf8FromField(f.type(new _Utf8())!);\n+        case Type.Bool: return boolFromField(f.type(new _Bool())!);\n+        case Type.Decimal: return decimalFromField(f.type(new _Decimal())!);\n+        case Type.Date: return dateFromField(f.type(new _Date())!);\n+        case Type.Time: return timeFromField(f.type(new _Time())!);\n+        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp())!);\n+        case Type.Interval: return intervalFromField(f.type(new _Interval())!);\n+        case Type.List: return listFromField(f.type(new _List())!);\n+        case Type.Struct_: return structFromField(f.type(new _Struct())!);\n+        case Type.Union: return unionFromField(f.type(new _Union())!);\n+        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary())!);\n+        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList())!);\n+        case Type.Map: return mapFromField(f.type(new _Map())!);\n+    }\n+    throw new Error(`Unrecognized type ${f.typeType()}`);\n+}\n+\n+function nullFromField(_type: _Null) { return new Null(); }\n+function intFromField(_type: _Int) { return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth); }\n+function floatingPointFromField(_type: _FloatingPoint) { return new FloatingPoint(_type.precision()); }\n+function binaryFromField(_type: _Binary) { return new Binary(); }\n+function utf8FromField(_type: _Utf8) { return new Utf8(); }\n+function boolFromField(_type: _Bool) { return new Bool(); }\n+function decimalFromField(_type: _Decimal) { return new Decimal(_type.scale(), _type.precision()); }\n+function dateFromField(_type: _Date) { return new Date(_type.unit()); }\n+function timeFromField(_type: _Time) { return new Time(_type.unit(), _type.bitWidth() as TimeBitWidth); }\n+function timestampFromField(_type: _Timestamp) { return new Timestamp(_type.unit(), _type.timezone()); }\n+function intervalFromField(_type: _Interval) { return new Interval(_type.unit()); }\n+function listFromField(_type: _List) { return new List(); }\n+function structFromField(_type: _Struct) { return new Struct(); }\n+function unionFromField(_type: _Union) { return new Union(_type.mode(), (_type.typeIdsArray() || []) as Type[]); }\n+function fixedSizeBinaryFromField(_type: _FixedSizeBinary) { return new FixedSizeBinary(_type.byteWidth()); }\n+function fixedSizeListFromField(_type: _FixedSizeList) { return new FixedSizeList(_type.listSize()); }\n+function mapFromField(_type: _Map) { return new Map_(_type.keysSorted()); }\ndiff --git a/js/src/format/File.ts b/js/src/format/fb/File.ts\nsimilarity index 100%\nrename from js/src/format/File.ts\nrename to js/src/format/fb/File.ts\ndiff --git a/js/src/format/File_generated.js b/js/src/format/fb/File_generated.js\nsimilarity index 100%\nrename from js/src/format/File_generated.js\nrename to js/src/format/fb/File_generated.js\ndiff --git a/js/src/format/Message.ts b/js/src/format/fb/Message.ts\nsimilarity index 100%\nrename from js/src/format/Message.ts\nrename to js/src/format/fb/Message.ts\ndiff --git a/js/src/format/Message_generated.js b/js/src/format/fb/Message_generated.js\nsimilarity index 100%\nrename from js/src/format/Message_generated.js\nrename to js/src/format/fb/Message_generated.js\ndiff --git a/js/src/format/Schema.ts b/js/src/format/fb/Schema.ts\nsimilarity index 100%\nrename from js/src/format/Schema.ts\nrename to js/src/format/fb/Schema.ts\ndiff --git a/js/src/format/Schema_generated.js b/js/src/format/fb/Schema_generated.js\nsimilarity index 97%\nrename from js/src/format/Schema_generated.js\nrename to js/src/format/fb/Schema_generated.js\nindex f89cf2fa8..ebed8a906 100644\n--- a/js/src/format/Schema_generated.js\n+++ b/js/src/format/fb/Schema_generated.js\n@@ -31,65 +31,65 @@ org.apache.arrow.flatbuf.MetadataVersion = {\n   /**\n    * 0.1.0\n    */\n-  V1: 0, 0: 'V1',\n+  'V1': 0, 0: 'V1',\n \n   /**\n    * 0.2.0\n    */\n-  V2: 1, 1: 'V2',\n+  'V2': 1, 1: 'V2',\n \n   /**\n    * 0.3.0 -> 0.7.1\n    */\n-  V3: 2, 2: 'V3',\n+  'V3': 2, 2: 'V3',\n \n   /**\n    * >= 0.8.0\n    */\n-  V4: 3, 3: 'V4'\n+  'V4': 3, 3: 'V4'\n };\n \n /**\n  * @enum\n  */\n org.apache.arrow.flatbuf.UnionMode = {\n-  Sparse: 0, 0: 'Sparse',\n-  Dense: 1, 1: 'Dense',\n+  'Sparse': 0, 0: 'Sparse',\n+  'Dense': 1, 1: 'Dense',\n };\n \n /**\n  * @enum\n  */\n org.apache.arrow.flatbuf.Precision = {\n-  HALF: 0, 0: 'HALF',\n-  SINGLE: 1, 1: 'SINGLE',\n-  DOUBLE: 2, 2: 'DOUBLE',\n+  'HALF': 0, 0: 'HALF',\n+  'SINGLE': 1, 1: 'SINGLE',\n+  'DOUBLE': 2, 2: 'DOUBLE',\n };\n \n /**\n  * @enum\n  */\n org.apache.arrow.flatbuf.DateUnit = {\n-  DAY: 0, 0: 'DAY',\n-  MILLISECOND: 1, 1: 'MILLISECOND',\n+  'DAY': 0, 0: 'DAY',\n+  'MILLISECOND': 1, 1: 'MILLISECOND',\n };\n \n /**\n  * @enum\n  */\n org.apache.arrow.flatbuf.TimeUnit = {\n-  SECOND: 0, 0: 'SECOND',\n-  MILLISECOND: 1, 1: 'MILLISECOND',\n-  MICROSECOND: 2, 2: 'MICROSECOND',\n-  NANOSECOND: 3, 3: 'NANOSECOND',\n+  'SECOND': 0, 0: 'SECOND',\n+  'MILLISECOND': 1, 1: 'MILLISECOND',\n+  'MICROSECOND': 2, 2: 'MICROSECOND',\n+  'NANOSECOND': 3, 3: 'NANOSECOND',\n };\n \n /**\n  * @enum\n  */\n org.apache.arrow.flatbuf.IntervalUnit = {\n-  YEAR_MONTH: 0, 0: 'YEAR_MONTH',\n-  DAY_TIME: 1, 1: 'DAY_TIME',\n+  'YEAR_MONTH': 0, 0: 'YEAR_MONTH',\n+  'DAY_TIME': 1, 1: 'DAY_TIME',\n };\n \n /**\n@@ -100,24 +100,24 @@ org.apache.arrow.flatbuf.IntervalUnit = {\n  * @enum\n  */\n org.apache.arrow.flatbuf.Type = {\n-  NONE: 0, 0: 'NONE',\n-  Null: 1, 1: 'Null',\n-  Int: 2, 2: 'Int',\n-  FloatingPoint: 3, 3: 'FloatingPoint',\n-  Binary: 4, 4: 'Binary',\n-  Utf8: 5, 5: 'Utf8',\n-  Bool: 6, 6: 'Bool',\n-  Decimal: 7, 7: 'Decimal',\n-  Date: 8, 8: 'Date',\n-  Time: 9, 9: 'Time',\n-  Timestamp: 10, 10: 'Timestamp',\n-  Interval: 11, 11: 'Interval',\n-  List: 12, 12: 'List',\n-  Struct_: 13, 13: 'Struct_',\n-  Union: 14, 14: 'Union',\n-  FixedSizeBinary: 15, 15: 'FixedSizeBinary',\n-  FixedSizeList: 16, 16: 'FixedSizeList',\n-  Map: 17, 17: 'Map'\n+  'NONE': 0, 0: 'NONE',\n+  'Null': 1, 1: 'Null',\n+  'Int': 2, 2: 'Int',\n+  'FloatingPoint': 3, 3: 'FloatingPoint',\n+  'Binary': 4, 4: 'Binary',\n+  'Utf8': 5, 5: 'Utf8',\n+  'Bool': 6, 6: 'Bool',\n+  'Decimal': 7, 7: 'Decimal',\n+  'Date': 8, 8: 'Date',\n+  'Time': 9, 9: 'Time',\n+  'Timestamp': 10, 10: 'Timestamp',\n+  'Interval': 11, 11: 'Interval',\n+  'List': 12, 12: 'List',\n+  'Struct_': 13, 13: 'Struct_',\n+  'Union': 14, 14: 'Union',\n+  'FixedSizeBinary': 15, 15: 'FixedSizeBinary',\n+  'FixedSizeList': 16, 16: 'FixedSizeList',\n+  'Map': 17, 17: 'Map'\n };\n \n /**\n@@ -130,22 +130,22 @@ org.apache.arrow.flatbuf.VectorType = {\n   /**\n    * used in List type, Dense Union and variable length primitive types (String, Binary)\n    */\n-  OFFSET: 0, 0: 'OFFSET',\n+  'OFFSET': 0, 0: 'OFFSET',\n \n   /**\n    * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n    */\n-  DATA: 1, 1: 'DATA',\n+  'DATA': 1, 1: 'DATA',\n \n   /**\n    * Bit vector indicating if each value is null\n    */\n-  VALIDITY: 2, 2: 'VALIDITY',\n+  'VALIDITY': 2, 2: 'VALIDITY',\n \n   /**\n    * Type vector used in Union type\n    */\n-  TYPE: 3, 3: 'TYPE'\n+  'TYPE': 3, 3: 'TYPE'\n };\n \n /**\n@@ -155,8 +155,8 @@ org.apache.arrow.flatbuf.VectorType = {\n  * @enum\n  */\n org.apache.arrow.flatbuf.Endianness = {\n-  Little: 0, 0: 'Little',\n-  Big: 1, 1: 'Big',\n+  'Little': 0, 0: 'Little',\n+  'Big': 1, 1: 'Big',\n };\n \n /**\ndiff --git a/js/src/format/json.ts b/js/src/format/json.ts\nnew file mode 100644\nindex 000000000..3da3db6d5\n--- /dev/null\n+++ b/js/src/format/json.ts\n@@ -0,0 +1,173 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import * as Schema_ from './fb/Schema';\n+import { flatbuffers } from 'flatbuffers';\n+import Long = flatbuffers.Long;\n+import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\n+import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\n+import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\n+import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\n+import {\n+    IntBitWidth, TimeBitWidth,\n+    Schema, RecordBatch, DictionaryBatch, Field, DictionaryEncoding, Buffer, FieldNode,\n+    Null, Int, FloatingPoint, Binary, Bool, Utf8, Decimal, Date, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n+} from './types';\n+\n+export function schemaFromJSON(s: any): Schema {\n+    // todo: metadataFromJSON\n+    return new Schema(\n+        MetadataVersion.V4,\n+        fieldsFromJSON(s['fields']),\n+        customMetadata(s['customMetadata'])\n+    );\n+}\n+\n+export function recordBatchFromJSON(b: any): RecordBatch {\n+    return new RecordBatch(\n+        MetadataVersion.V4,\n+        new Long(b['count'], 0),\n+        fieldNodesFromJSON(b['columns']),\n+        buffersFromJSON(b['columns'])\n+    );\n+}\n+\n+export function dictionaryBatchFromJSON(b: any): DictionaryBatch {\n+    return new DictionaryBatch(\n+        MetadataVersion.V4,\n+        recordBatchFromJSON(b['data']),\n+        new Long(b['id'], 0), b['isDelta']\n+    );\n+}\n+\n+function fieldsFromJSON(fs: any[]): Field[] {\n+    return (fs || []).map(fieldFromJSON);\n+}\n+\n+function fieldNodesFromJSON(xs: any[]): FieldNode[] {\n+    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n+        ...fieldNodes,\n+        new FieldNode(\n+            new Long(column['count'], 0),\n+            new Long(nullCountFromJSON(column['VALIDITY']), 0)\n+        ),\n+        ...fieldNodesFromJSON(column['children'])\n+    ], [] as FieldNode[]);\n+}\n+\n+function buffersFromJSON(xs: any[], buffers: Buffer[] = []): Buffer[] {\n+    for (let i = -1, n = (xs || []).length; ++i < n;) {\n+        const column = xs[i];\n+        column['VALIDITY'] && buffers.push(new Buffer(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n+        column['OFFSET'] && buffers.push(new Buffer(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n+        column['DATA'] && buffers.push(new Buffer(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n+        buffers = buffersFromJSON(column['children'], buffers);\n+    }\n+    return buffers;\n+}\n+\n+function nullCountFromJSON(validity: number[]) {\n+    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n+}\n+\n+function fieldFromJSON(f: any) {\n+    return new Field(\n+        f['name'],\n+        typeFromJSON(f['type']),\n+        namesToTypeMap[f['type']['name']],\n+        f.nullable,\n+        fieldsFromJSON(f['children']),\n+        customMetadata(f['customMetadata']),\n+        dictionaryEncodingFromJSON(f['dictionary'])\n+    );\n+}\n+\n+function dictionaryEncodingFromJSON(d: any) {\n+    return !d ? null : new DictionaryEncoding(\n+        d.indexType ? intFromJSON(d.indexType) : null,\n+        new Long(d.id, 0), d.isOrdered\n+    );\n+}\n+\n+function customMetadata(metadata?: any) {\n+    return new Map<string, string>(Object.entries(metadata || {}));\n+}\n+\n+const namesToTypeMap: { [n: string]: Type }  = {\n+    'NONE': Type.NONE,\n+    'null': Type.Null,\n+    'int': Type.Int,\n+    'floatingpoint': Type.FloatingPoint,\n+    'binary': Type.Binary,\n+    'bool': Type.Bool,\n+    'utf8': Type.Utf8,\n+    'decimal': Type.Decimal,\n+    'date': Type.Date,\n+    'time': Type.Time,\n+    'timestamp': Type.Timestamp,\n+    'interval': Type.Interval,\n+    'list': Type.List,\n+    'struct': Type.Struct_,\n+    'union': Type.Union,\n+    'fixedsizebinary': Type.FixedSizeBinary,\n+    'fixedsizelist': Type.FixedSizeList,\n+    'map': Type.Map,\n+};\n+\n+function typeFromJSON(t: any) {\n+    switch (namesToTypeMap[t['name']]) {\n+        case Type.NONE: return nullFromJSON(t);\n+        case Type.Null: return nullFromJSON(t);\n+        case Type.Int: return intFromJSON(t);\n+        case Type.FloatingPoint: return floatingPointFromJSON(t);\n+        case Type.Binary: return binaryFromJSON(t);\n+        case Type.Utf8: return utf8FromJSON(t);\n+        case Type.Bool: return boolFromJSON(t);\n+        case Type.Decimal: return decimalFromJSON(t);\n+        case Type.Date: return dateFromJSON(t);\n+        case Type.Time: return timeFromJSON(t);\n+        case Type.Timestamp: return timestampFromJSON(t);\n+        case Type.Interval: return intervalFromJSON(t);\n+        case Type.List: return listFromJSON(t);\n+        case Type.Struct_: return structFromJSON(t);\n+        case Type.Union: return unionFromJSON(t);\n+        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n+        case Type.FixedSizeList: return fixedSizeListFromJSON(t);\n+        case Type.Map: return mapFromJSON(t);\n+    }\n+    throw new Error(`Unrecognized type ${t['name']}`);\n+}\n+\n+function nullFromJSON(_type: any) { return new Null(); }\n+function intFromJSON(_type: any) { return new Int(_type['isSigned'], _type['bitWidth'] as IntBitWidth); }\n+function floatingPointFromJSON(_type: any) { return new FloatingPoint(Precision[_type['precision']] as any); }\n+function binaryFromJSON(_type: any) { return new Binary(); }\n+function utf8FromJSON(_type: any) { return new Utf8(); }\n+function boolFromJSON(_type: any) { return new Bool(); }\n+function decimalFromJSON(_type: any) { return new Decimal(_type['scale'], _type['precision']); }\n+function dateFromJSON(_type: any) { return new Date(DateUnit[_type['unit']] as any); }\n+function timeFromJSON(_type: any) { return new Time(TimeUnit[_type['unit']] as any, _type['bitWidth'] as TimeBitWidth); }\n+function timestampFromJSON(_type: any) { return new Timestamp(TimeUnit[_type['unit']] as any, _type['timezone']); }\n+function intervalFromJSON(_type: any) { return new Interval(IntervalUnit[_type['unit']] as any); }\n+function listFromJSON(_type: any) { return new List(); }\n+function structFromJSON(_type: any) { return new Struct(); }\n+function unionFromJSON(_type: any) { return new Union(_type['mode'], (_type['typeIdsArray'] || []) as Type[]); }\n+function fixedSizeBinaryFromJSON(_type: any) { return new FixedSizeBinary(_type['byteWidth']); }\n+function fixedSizeListFromJSON(_type: any) { return new FixedSizeList(_type['listSize']); }\n+function mapFromJSON(_type: any) { return new Map_(_type['keysSorted']); }\ndiff --git a/js/src/format/types.ts b/js/src/format/types.ts\nnew file mode 100644\nindex 000000000..09df8ccbb\n--- /dev/null\n+++ b/js/src/format/types.ts\n@@ -0,0 +1,393 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+/* tslint:disable:class-name */\n+\n+import { align } from '../util/layout';\n+import * as Schema_ from './fb/Schema';\n+import * as Message_ from './fb/Message';\n+import { flatbuffers } from 'flatbuffers';\n+import Long = flatbuffers.Long;\n+import Type = Schema_.org.apache.arrow.flatbuf.Type;\n+import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\n+import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\n+import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\n+import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\n+import Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\n+import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\n+import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\n+import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n+\n+export type IntBitWidth = 8 | 16 | 32 | 64;\n+export type TimeBitWidth = IntBitWidth | 128;\n+\n+export interface VisitorNode {\n+    accept(visitor: Visitor): any;\n+}\n+\n+export abstract class Visitor<T = any> {\n+    visit(node: VisitorNode): T {\n+        return node.accept(this);\n+    }\n+    visitMany(nodes: VisitorNode[]): T[] {\n+        return nodes.map((node) => this.visit(node));\n+    }\n+    abstract visitFooter(node: Footer): any;\n+    abstract visitBlock(node: Block): any;\n+    abstract visitMessage(node: Message): any;\n+    abstract visitSchema(node: Schema): any;\n+    abstract visitField(node: Field): any;\n+    abstract visitBuffer(node: Buffer): any;\n+    abstract visitFieldNode(node: FieldNode): any;\n+    abstract visitRecordBatch(node: RecordBatch): any;\n+    abstract visitDictionaryBatch(node: DictionaryBatch): any;\n+    abstract visitDictionaryEncoding(node: DictionaryEncoding): any;\n+    abstract visitNullFieldType(node: Null): any;\n+    abstract visitIntFieldType(node: Int): any;\n+    abstract visitFloatingPointFieldType(node: FloatingPoint): any;\n+    abstract visitBinaryFieldType(node: Binary): any;\n+    abstract visitBoolFieldType(node: Bool): any;\n+    abstract visitUtf8FieldType(node: Utf8): any;\n+    abstract visitDecimalFieldType(node: Decimal): any;\n+    abstract visitDateFieldType(node: Date): any;\n+    abstract visitTimeFieldType(node: Time): any;\n+    abstract visitTimestampFieldType(node: Timestamp): any;\n+    abstract visitIntervalFieldType(node: Interval): any;\n+    abstract visitListFieldType(node: List): any;\n+    abstract visitStructFieldType(node: Struct): any;\n+    abstract visitUnionFieldType(node: Union): any;\n+    abstract visitFixedSizeBinaryFieldType(node: FixedSizeBinary): any;\n+    abstract visitFixedSizeListFieldType(node: FixedSizeList): any;\n+    abstract visitMapFieldType(node: Map_): any;\n+}\n+\n+export class Footer implements VisitorNode {\n+    constructor(public dictionaryBatches: Block[], public recordBatches: Block[], public schema: Schema) {}\n+    accept(visitor: Visitor): any {\n+        return visitor.visitFooter(this);\n+    }\n+}\n+\n+export class Block implements VisitorNode {\n+    constructor(public metaDataLength: number, public bodyLength: Long, public offset: Long) {}\n+    accept(visitor: Visitor): any {\n+        return visitor.visitBlock(this);\n+    }\n+}\n+\n+export class Message implements VisitorNode {\n+    constructor(public version: MetadataVersion, public bodyLength: Long, public headerType: MessageHeader) {}\n+    isSchema(): this is Schema { return this.headerType === MessageHeader.Schema; }\n+    isRecordBatch(): this is RecordBatch { return this.headerType === MessageHeader.RecordBatch; }\n+    isDictionaryBatch(): this is DictionaryBatch { return this.headerType === MessageHeader.DictionaryBatch; }\n+    accept(visitor: Visitor): any {\n+        visitor.visitMessage(this);\n+    }\n+}\n+\n+export class Schema extends Message {\n+    public dictionaries: Map<string, Field>;\n+    constructor(version: MetadataVersion, public fields: Field[], public customMetadata?: Map<string, string>, public endianness = Endianness.Little) {\n+        super(version, Long.ZERO, MessageHeader.Schema);\n+        const dictionaries = [] as Field[];\n+        for (let f: Field, i = -1, n = fields.length; ++i < n;) {\n+            if ((f = fields[i])) {\n+                f.dictionary && dictionaries.push(f);\n+                dictionaries.push(...f.dictionaries);\n+            }\n+        }\n+        this.dictionaries = new Map<string, Field>(dictionaries.map<[string, Field]>((f) => [\n+            f.dictionary!.dictionaryId.toFloat64().toString(), f\n+        ]));\n+    }\n+    accept(visitor: Visitor): any {\n+        return visitor.visitSchema(this);\n+    }\n+}\n+\n+export class RecordBatch extends Message {\n+    constructor(version: MetadataVersion, public length: Long, public fieldNodes: FieldNode[], public buffers: Buffer[]) {\n+        super(version, new Long(buffers.reduce((s, b) => align(s + b.length.low + (b.offset.low - s), 8), 0), 0), MessageHeader.RecordBatch);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitRecordBatch(this);\n+    }\n+}\n+\n+export class DictionaryBatch extends Message {\n+    constructor(version: MetadataVersion, public dictionary: RecordBatch, public dictionaryId: Long, public isDelta: boolean) {\n+        super(version, dictionary.bodyLength, MessageHeader.DictionaryBatch);\n+    }\n+    get fieldNodes(): FieldNode[] { return this.dictionary.fieldNodes; }\n+    get buffers(): Buffer[] { return this.dictionary.buffers; }\n+    accept(visitor: Visitor) {\n+        return visitor.visitDictionaryBatch(this);\n+    }\n+    static atomicDictionaryId = 0;\n+}\n+\n+export class Field implements VisitorNode {\n+    public dictionaries: Field[];\n+    constructor(public name: string,\n+                public type: FieldType,\n+                public typeType: Type,\n+                public nullable = false,\n+                public children: Field[] = [],\n+                public metadata?: Map<string, string> | null,\n+                public dictionary?: DictionaryEncoding | null) {\n+        const dictionaries = [] as Field[];\n+        for (let f: Field, i = -1, n = children.length; ++i < n;) {\n+            if ((f = children[i])) {\n+                f.dictionary && dictionaries.push(f);\n+                dictionaries.push(...f.dictionaries);\n+            }\n+        }\n+        this.dictionaries = dictionaries;\n+    }\n+    accept(visitor: Visitor): any {\n+        return visitor.visitField(this);\n+    }\n+    indexField() {\n+        return !this.dictionary ? this : new Field(\n+            this.name,\n+            this.dictionary.indexType, this.dictionary.indexType.type,\n+            this.nullable, this.children, this.metadata, this.dictionary\n+        );\n+    }\n+    toString() { return `Field name[${this.name}], nullable[${this.nullable}], type[${this.type.toString()}]`; }\n+}\n+\n+export class Buffer implements VisitorNode {\n+    constructor(public offset: Long, public length: Long) {}\n+    accept(visitor: Visitor) {\n+        return visitor.visitBuffer(this);\n+    }\n+}\n+\n+export class FieldNode implements VisitorNode {\n+    constructor(public length: Long, public nullCount: Long) {}\n+    accept(visitor: Visitor) {\n+        return visitor.visitFieldNode(this);\n+    }\n+}\n+\n+export class DictionaryEncoding implements VisitorNode {\n+    public isOrdered: boolean;\n+    public dictionaryId: Long;\n+    public indexType: Int;\n+    constructor(indexType?: Int | null, dictionaryId?: Long | null, isOrdered?: boolean | null) {\n+        this.isOrdered = isOrdered || false;\n+        /* a dictionary index defaults to signed 32 bit int if unspecified */\n+        this.indexType = indexType || new Int(true, 32);\n+        this.dictionaryId = dictionaryId || new Long(DictionaryBatch.atomicDictionaryId++, 0);\n+    }\n+    accept(visitor: Visitor): any {\n+        return visitor.visitDictionaryEncoding(this);\n+    }\n+}\n+\n+export abstract class FieldType implements VisitorNode {\n+    constructor(public type: Type) {}\n+    abstract accept(visitor: Visitor): any;\n+    isNull(): this is Null { return this.type === Type.Null; }\n+    isInt(): this is Int { return this.type === Type.Int; }\n+    isFloatingPoint(): this is FloatingPoint { return this.type === Type.FloatingPoint; }\n+    isBinary(): this is Binary { return this.type === Type.Binary; }\n+    isUtf8(): this is Utf8 { return this.type === Type.Utf8; }\n+    isBool(): this is Bool { return this.type === Type.Bool; }\n+    isDecimal(): this is Decimal { return this.type === Type.Decimal; }\n+    isDate(): this is Date { return this.type === Type.Date; }\n+    isTime(): this is Time { return this.type === Type.Time; }\n+    isTimestamp(): this is Timestamp { return this.type === Type.Timestamp; }\n+    isInterval(): this is Interval { return this.type === Type.Interval; }\n+    isList(): this is List { return this.type === Type.List; }\n+    isStruct(): this is Struct { return this.type === Type.Struct_; }\n+    isUnion(): this is Union { return this.type === Type.Union; }\n+    isFixedSizeBinary(): this is FixedSizeBinary { return this.type === Type.FixedSizeBinary; }\n+    isFixedSizeList(): this is FixedSizeList { return this.type === Type.FixedSizeList; }\n+    isMap(): this is Map_ { return this.type === Type.Map; }\n+}\n+\n+export class Null extends FieldType {\n+    toString() { return `Null`; }\n+    constructor() {\n+        super(Type.Null);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitNullFieldType(this);\n+    }\n+}\n+\n+export class Int extends FieldType {\n+    toString() { return `Int isSigned[${this.isSigned}], bitWidth[${this.bitWidth}]`; }\n+    constructor(public isSigned: boolean, public bitWidth: IntBitWidth) {\n+        super(Type.Int);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitIntFieldType(this);\n+    }\n+}\n+\n+export class FloatingPoint extends FieldType {\n+    toString() { return `FloatingPoint precision`; }\n+    constructor(public precision: Precision) {\n+        super(Type.FloatingPoint);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitFloatingPointFieldType(this);\n+    }\n+}\n+\n+export class Binary extends FieldType {\n+    toString() { return `Binary`; }\n+    constructor() {\n+        super(Type.Binary);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitBinaryFieldType(this);\n+    }\n+}\n+\n+export class Utf8 extends FieldType {\n+    toString() { return `Utf8`; }\n+    constructor() {\n+        super(Type.Utf8);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitUtf8FieldType(this);\n+    }\n+}\n+\n+export class Bool extends FieldType {\n+    toString() { return `Bool`; }\n+    constructor() {\n+        super(Type.Bool);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitBoolFieldType(this);\n+    }\n+}\n+\n+export class Decimal extends FieldType {\n+    toString() { return `Decimal scale[${this.scale}], precision[${this.precision}]`; }\n+    constructor(public scale: number, public precision: number) {\n+        super(Type.Decimal);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitDecimalFieldType(this);\n+    }\n+}\n+\n+export class Date extends FieldType {\n+    toString() { return `Date unit[${this.unit}]`; }\n+    constructor(public unit: DateUnit) {\n+        super(Type.Date);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitDateFieldType(this);\n+    }\n+}\n+\n+export class Time extends FieldType {\n+    toString() { return `Time unit[${this.unit}], bitWidth[${this.bitWidth}]`; }\n+    constructor(public unit: TimeUnit, public bitWidth: TimeBitWidth) {\n+        super(Type.Time);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitTimeFieldType(this);\n+    }\n+}\n+\n+export class Timestamp extends FieldType {\n+    toString() { return `Timestamp unit[${this.unit}], timezone[${this.timezone}]`; }\n+    constructor(public unit: TimeUnit, public timezone?: string | null) {\n+        super(Type.Timestamp);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitTimestampFieldType(this);\n+    }\n+}\n+\n+export class Interval extends FieldType {\n+    toString() { return `Interval unit[${this.unit}]`; }\n+    constructor(public unit: IntervalUnit) {\n+        super(Type.Interval);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitIntervalFieldType(this);\n+    }\n+}\n+\n+export class List extends FieldType {\n+    toString() { return `List`; }\n+    constructor() {\n+        super(Type.List);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitListFieldType(this);\n+    }\n+}\n+\n+export class Struct extends FieldType {\n+    toString() { return `Struct`; }\n+    constructor() {\n+        super(Type.Struct_);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitStructFieldType(this);\n+    }\n+}\n+\n+export class Union extends FieldType {\n+    toString() { return `Union mode[${this.mode}], typeIds[${this.typeIds}]`; }\n+    constructor(public mode: UnionMode, public typeIds: Type[]) {\n+        super(Type.Union);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitUnionFieldType(this);\n+    }\n+}\n+\n+export class FixedSizeBinary extends FieldType {\n+    toString() { return `FixedSizeBinary byteWidth[${this.byteWidth}]`; }\n+    constructor(public byteWidth: number) {\n+        super(Type.FixedSizeBinary);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitFixedSizeBinaryFieldType(this);\n+    }\n+}\n+\n+export class FixedSizeList extends FieldType {\n+    toString() { return `FixedSizeList listSize[${this.listSize}]`; }\n+    constructor(public listSize: number) {\n+        super(Type.FixedSizeList);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitFixedSizeListFieldType(this);\n+    }\n+}\n+\n+export class Map_ extends FieldType {\n+    toString() { return `Map keysSorted[${this.keysSorted}]`; }\n+    constructor(public keysSorted: boolean) {\n+        super(Type.Map);\n+    }\n+    accept(visitor: Visitor) {\n+        return visitor.visitMapFieldType(this);\n+    }\n+}\ndiff --git a/js/src/reader/arrow.ts b/js/src/reader/arrow.ts\nindex 8d3aafc72..cf8a3d6a2 100644\n--- a/js/src/reader/arrow.ts\n+++ b/js/src/reader/arrow.ts\n@@ -15,181 +15,34 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+import { readJSON } from './json';\n+import { readBuffers, readBuffersAsync } from './buffer';\n+import { readVectors, readVectorsAsync } from './vector';\n import { Vector } from '../vector/vector';\n-import { flatbuffers } from 'flatbuffers';\n-import { readVector, readValueVector } from './vector';\n-import {\n-    readFileFooter, readFileMessages,\n-    readStreamSchema, readStreamMessages\n-} from './format';\n \n-import * as File_ from '../format/File';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n+export { readJSON };\n+export { readBuffers, readBuffersAsync };\n+export { readVectors, readVectorsAsync };\n \n-import ByteBuffer = flatbuffers.ByteBuffer;\n-import Footer = File_.org.apache.arrow.flatbuf.Footer;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import Schema = Schema_.org.apache.arrow.flatbuf.Schema;\n-import Message = Message_.org.apache.arrow.flatbuf.Message;\n-import ArrowBuffer = Schema_.org.apache.arrow.flatbuf.Buffer;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n-import RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\n-import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\n-import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n-import DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\n-import DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n-\n-export type ArrowReaderContext = {\n-    schema?: Schema;\n-    footer?: Footer | null;\n-    dictionaries: Map<string, Vector>;\n-    dictionaryEncodedFields: Map<string, Field>;\n-    readMessages: (bb: ByteBuffer, footer: Footer) => Iterable<Message>;\n-};\n-\n-export interface VectorReaderContext {\n-    offset: number;\n-    bytes: Uint8Array;\n-    batch: RecordBatch;\n-    dictionaries: Map<string, Vector>;\n-    readNextNode(): FieldNode;\n-    readNextBuffer(): ArrowBuffer;\n-}\n-\n-export function* readVectors(buffers: Iterable<Uint8Array | Buffer | string>, context?: ArrowReaderContext) {\n-    const context_ = context || {} as ArrowReaderContext;\n-    for (const buffer of buffers) {\n-        yield* readBuffer(toByteBuffer(buffer), context_);\n+export function* read(sources: Iterable<Uint8Array | Buffer | string> | object | string) {\n+    let input: any = sources;\n+    let batches: Iterable<Vector[]>;\n+    if (typeof input === 'string') {\n+        try { input = JSON.parse(input); }\n+        catch (e) { input = sources; }\n     }\n-}\n-\n-export async function* readVectorsAsync(buffers: AsyncIterable<Uint8Array | Buffer | string>, context?: ArrowReaderContext) {\n-    const context_ = context || {} as ArrowReaderContext;\n-    for await (const buffer of buffers) {\n-        yield* readBuffer(toByteBuffer(buffer), context_);\n-    }\n-}\n-\n-function* readBuffer(bb: ByteBuffer, readerContext: ArrowReaderContext) {\n-\n-    let { schema, footer, readMessages, dictionaryEncodedFields, dictionaries } = readerContext;\n-\n-    if (!schema) {\n-        ({ schema, footer, readMessages, dictionaryEncodedFields } = readSchema(bb));\n-        readerContext.schema = schema;\n-        readerContext.readMessages = readMessages;\n-        readerContext.dictionaryEncodedFields = dictionaryEncodedFields;\n-        readerContext.dictionaries = dictionaries = new Map<string, Vector>();\n-    }\n-\n-    const fieldsLength = schema.fieldsLength();\n-    const context = new BufferReaderContext(bb.bytes(), dictionaries);\n-\n-    for (const message of readMessages(bb, footer!)) {\n-\n-        let id: string;\n-        let field: Field;\n-        let vector: Vector;\n-        let vectors: Array<Vector>;\n-\n-        context.message = message;\n-\n-        if (message.headerType() === MessageHeader.DictionaryBatch) {\n-            let batch: DictionaryBatch;\n-            if (batch = message.header(new DictionaryBatch())!) {\n-                context.batch = batch.data()!;\n-                id = batch.id().toFloat64().toString();\n-                field = dictionaryEncodedFields.get(id)!;\n-                vector = readValueVector(field, context);\n-                if (batch.isDelta() && dictionaries.has(id)) {\n-                    vector = dictionaries.get(id)!.concat(vector);\n-                }\n-                dictionaries.set(id, vector);\n-            }\n-            continue;\n-        }\n-\n-        vectors = new Array<Vector>(fieldsLength);\n-        context.batch = message.header(new RecordBatch())!;\n-\n-        for (let i = -1; ++i < fieldsLength;) {\n-            if ((field = schema.fields(i)!) || (vectors[i] = null as any)) {\n-                vectors[i] = readVector(field, context);\n-            }\n-        }\n-\n-        yield vectors;\n-    }\n-}\n-\n-function readSchema(bb: ByteBuffer) {\n-    let schema: Schema, readMessages, footer = readFileFooter(bb);\n-    if (footer) {\n-        schema = footer.schema()!;\n-        readMessages = readFileMessages;\n-    } else if (schema = readStreamSchema(bb)!) {\n-        readMessages = readStreamMessages;\n+    if (!input || typeof input !== 'object') {\n+        batches = (typeof input === 'string') ? readVectors(readBuffers([input])) : [];\n     } else {\n-        throw new Error('Invalid Arrow buffer');\n-    }\n-    return { schema, footer, readMessages, dictionaryEncodedFields: readDictionaryEncodedFields(schema, new Map<string, Field>()) };\n-}\n-\n-function readDictionaryEncodedFields(parent: Schema | Field, fields: Map<string, Field>) {\n-    let field: Field, encoding: DictionaryEncoding, id: string;\n-    let getField = parent instanceof Field ? parent.children : parent.fields;\n-    let getFieldCount = parent instanceof Field ? parent.childrenLength : parent.fieldsLength;\n-    for (let i = -1, n = getFieldCount.call(parent); ++i < n;) {\n-        if (field = getField.call(parent, i)!) {\n-            if ((encoding = field.dictionary()!) &&\n-                (id = encoding.id().toFloat64().toString())) {\n-                !fields.has(id) && fields.set(id, field);\n-            }\n-            readDictionaryEncodedFields(field, fields);\n-        }\n+        batches = (typeof input[Symbol.iterator] === 'function')\n+            ? readVectors(readBuffers(input))\n+            : readVectors(readJSON(input));\n     }\n-    return fields;\n+    yield* batches;\n }\n \n-function toByteBuffer(bytes?: Uint8Array | Buffer | string) {\n-    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n-    if (typeof bytes === 'string') {\n-        arr = new Uint8Array(bytes.length);\n-        for (let i = -1, n = bytes.length; ++i < n;) {\n-            arr[i] = bytes.charCodeAt(i);\n-        }\n-        return new ByteBuffer(arr);\n+export async function* readAsync(sources: AsyncIterable<Uint8Array | Buffer | string>) {\n+    for await (let vectors of readVectorsAsync(readBuffersAsync(sources))) {\n+        yield vectors;\n     }\n-    return new ByteBuffer(arr);\n }\n-\n-class BufferReaderContext implements VectorReaderContext {\n-    public offset: number;\n-    public batch: RecordBatch;\n-    private nodeIndex: number;\n-    private bufferIndex: number;\n-    private metadataVersion: MetadataVersion;\n-    constructor(public bytes: Uint8Array,\n-                public dictionaries: Map<string, Vector>) {\n-    }\n-    set message(m: Message) {\n-        this.nodeIndex = 0;\n-        this.bufferIndex = 0;\n-        this.offset = m.bb.position();\n-        this.metadataVersion = m.version();\n-    }\n-    public readNextNode() {\n-        return this.batch.nodes(this.nodeIndex++)!;\n-    }\n-    public readNextBuffer() {\n-        const buffer = this.batch.buffers(this.bufferIndex++)!;\n-        // If this Arrow buffer was written before version 4,\n-        // advance the buffer's bb_pos 8 bytes to skip past\n-        // the now-removed page id field.\n-        if (this.metadataVersion < MetadataVersion[`V4`]) {\n-            buffer.bb_pos += (8 * this.bufferIndex);\n-        }\n-        return buffer;\n-    }\n-}\n\\ No newline at end of file\ndiff --git a/js/src/reader/buffer.ts b/js/src/reader/buffer.ts\nnew file mode 100644\nindex 000000000..c7b90507e\n--- /dev/null\n+++ b/js/src/reader/buffer.ts\n@@ -0,0 +1,229 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { flatbuffers } from 'flatbuffers';\n+import { VectorLayoutReader } from './vector';\n+import { TypedArray, TypedArrayConstructor } from '../vector/types';\n+import { footerFromByteBuffer, messageFromByteBuffer } from '../format/fb';\n+import { Footer, Schema, RecordBatch, DictionaryBatch, Field, Buffer, FieldNode } from '../format/arrow';\n+import ByteBuffer = flatbuffers.ByteBuffer;\n+\n+export function* readBuffers<T extends Uint8Array | NodeBuffer | string>(sources: Iterable<T>) {\n+    let schema: Schema | null = null;\n+    let readMessages: ((bb: ByteBuffer) => IterableIterator<RecordBatch | DictionaryBatch>) | null = null;\n+    for (const source of sources) {\n+        const bb = toByteBuffer(source);\n+        if ((!schema && ({ schema, readMessages } = readSchema(bb))) && schema && readMessages) {\n+            for (const message of readMessages(bb)) {\n+                yield {\n+                    schema, message, reader: new BufferVectorLayoutReader(\n+                        bb,\n+                        (function* (fieldNodes) { yield* fieldNodes; })(message.fieldNodes),\n+                        (function* (buffers) { yield* buffers; })(message.buffers)\n+                    ) as VectorLayoutReader\n+                };\n+            }\n+        }\n+    }\n+}\n+\n+export async function* readBuffersAsync<T extends Uint8Array | NodeBuffer | string>(sources: AsyncIterable<T>) {\n+    let schema: Schema | null = null;\n+    let readMessages: ((bb: ByteBuffer) => IterableIterator<RecordBatch | DictionaryBatch>) | null = null;\n+    for await (const source of sources) {\n+        const bb = toByteBuffer(source);\n+        if ((!schema && ({ schema, readMessages } = readSchema(bb))) && schema && readMessages) {\n+            for (const message of readMessages(bb)) {\n+                yield {\n+                    schema, message, reader: new BufferVectorLayoutReader(\n+                        bb,\n+                        (function* (fieldNodes) { yield* fieldNodes; })(message.fieldNodes),\n+                        (function* (buffers) { yield* buffers; })(message.buffers)\n+                    ) as VectorLayoutReader\n+                };\n+            }\n+        }\n+    }\n+}\n+\n+function toByteBuffer(bytes?: Uint8Array | NodeBuffer | string) {\n+    let arr: Uint8Array = bytes as any || new Uint8Array(0);\n+    if (typeof bytes === 'string') {\n+        arr = new Uint8Array(bytes.length);\n+        for (let i = -1, n = bytes.length; ++i < n;) {\n+            arr[i] = bytes.charCodeAt(i);\n+        }\n+        return new ByteBuffer(arr);\n+    }\n+    return new ByteBuffer(arr);\n+}\n+\n+function readSchema(bb: ByteBuffer) {\n+    let schema: Schema, readMessages, footer: Footer | null;\n+    if (footer = readFileSchema(bb)) {\n+        schema = footer.schema!;\n+        readMessages = readFileMessages(footer);\n+    } else if (schema = readStreamSchema(bb)!) {\n+        readMessages = readStreamMessages;\n+    } else {\n+        throw new Error('Invalid Arrow buffer');\n+    }\n+    return { schema, readMessages };\n+}\n+\n+const PADDING = 4;\n+const MAGIC_STR = 'ARROW1';\n+const MAGIC = new Uint8Array(MAGIC_STR.length);\n+for (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n+    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n+}\n+\n+function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n+    for (let i = -1, n = MAGIC.length; ++i < n;) {\n+        if (MAGIC[i] !== buffer[index + i]) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+const magicLength = MAGIC.length;\n+const magicAndPadding = magicLength + PADDING;\n+const magicX2AndPadding = magicLength * 2 + PADDING;\n+\n+function readStreamSchema(bb: ByteBuffer) {\n+    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n+        for (const message of readMessages(bb)) {\n+            if (message.isSchema()) {\n+                return message as Schema;\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+function* readStreamMessages(bb: ByteBuffer) {\n+    for (const message of readMessages(bb)) {\n+        if (message.isRecordBatch()) {\n+            yield message;\n+        } else if (message.isDictionaryBatch()) {\n+            yield message;\n+        } else {\n+            continue;\n+        }\n+        // position the buffer after the body to read the next message\n+        bb.setPosition(bb.position() + message.bodyLength.low);\n+    }\n+}\n+\n+function readFileSchema(bb: ByteBuffer) {\n+    let fileLength = bb.capacity(), footerLength: number, footerOffset: number;\n+    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n+        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n+        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n+        (/*                                                    Invalid footer length  */\n+        (footerLength = bb.readInt32(footerOffset = fileLength - magicAndPadding)) < 1 &&\n+        (footerLength + magicX2AndPadding > fileLength))) {\n+        return null;\n+    }\n+    bb.setPosition(footerOffset - footerLength);\n+    return footerFromByteBuffer(bb);\n+}\n+\n+function readFileMessages(footer: Footer) {\n+    return function* (bb: ByteBuffer) {\n+        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n+            bb.setPosition(batches[i].offset.low);\n+            yield readMessage(bb, bb.readInt32(bb.position())) as DictionaryBatch;\n+        }\n+        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n+            bb.setPosition(batches[i].offset.low);\n+            yield readMessage(bb, bb.readInt32(bb.position())) as RecordBatch;\n+        }\n+    };\n+}\n+\n+function* readMessages(bb: ByteBuffer) {\n+    let length: number, message: Schema | RecordBatch | DictionaryBatch;\n+    while (bb.position() < bb.capacity() &&\n+          (length = bb.readInt32(bb.position())) > 0) {\n+        if (message = readMessage(bb, length)!) {\n+            yield message;\n+        }\n+    }\n+}\n+\n+function readMessage(bb: ByteBuffer, length: number) {\n+    bb.setPosition(bb.position() + PADDING);\n+    const message = messageFromByteBuffer(bb);\n+    bb.setPosition(bb.position() + length);\n+    return message;\n+}\n+\n+class BufferVectorLayoutReader implements VectorLayoutReader {\n+    private offset: number;\n+    private bytes: Uint8Array;\n+    constructor(bb: ByteBuffer, private fieldNodes: Iterator<FieldNode>, private buffers: Iterator<Buffer>) {\n+        this.bytes = bb.bytes();\n+        this.offset = bb.position();\n+    }\n+    readContainerLayout(field: Field) {\n+        const { bytes, offset, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(bytes, field, fieldNode, offset, buffers.next().value)\n+        };\n+    }\n+    readFixedWidthLayout<T extends TypedArray>(field: Field, dataType: TypedArrayConstructor<T>) {\n+        const { bytes, offset, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(bytes, field, fieldNode, offset, buffers.next().value),\n+            data: createTypedArray(bytes, field, fieldNode, offset, buffers.next().value, dataType)\n+        };\n+    }\n+    readBinaryLayout(field: Field) {\n+        const { bytes, offset, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(bytes, field, fieldNode, offset, buffers.next().value),\n+            offsets: createTypedArray(bytes, field, fieldNode, offset, buffers.next().value, Int32Array),\n+            data: createTypedArray(bytes, field, fieldNode, offset, buffers.next().value, Uint8Array)\n+        };\n+    }\n+    readVariableWidthLayout(field: Field) {\n+        const { bytes, offset, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(bytes, field, fieldNode, offset, buffers.next().value),\n+            offsets: createTypedArray(bytes, field, fieldNode, offset, buffers.next().value, Int32Array)\n+        };\n+    }\n+}\n+\n+function createValidityArray(bytes: Uint8Array, field: Field, fieldNode: FieldNode, offset: number, buffer: Buffer) {\n+    return field.nullable && fieldNode.nullCount.low > 0 &&\n+        createTypedArray(bytes, field, fieldNode, offset, buffer, Uint8Array) || null;\n+}\n+\n+function createTypedArray<T extends TypedArray>(bytes: Uint8Array, _field: Field, _fieldNode: FieldNode, offset: number, buffer: Buffer, ArrayConstructor: TypedArrayConstructor<T>): T {\n+    return new ArrayConstructor(\n+        bytes.buffer,\n+        bytes.byteOffset + offset + buffer.offset.low,\n+        buffer.length.low / ArrayConstructor.BYTES_PER_ELEMENT\n+    );\n+}\ndiff --git a/js/src/reader/format.ts b/js/src/reader/format.ts\ndeleted file mode 100644\nindex fd8f1b40d..000000000\n--- a/js/src/reader/format.ts\n+++ /dev/null\n@@ -1,112 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-import { flatbuffers } from 'flatbuffers';\n-import * as File_ from '../format/File';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import ByteBuffer = flatbuffers.ByteBuffer;\n-import Footer = File_.org.apache.arrow.flatbuf.Footer;\n-import Schema = Schema_.org.apache.arrow.flatbuf.Schema;\n-import Message = Message_.org.apache.arrow.flatbuf.Message;\n-import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\n-\n-const PADDING = 4;\n-const MAGIC_STR = 'ARROW1';\n-const MAGIC = new Uint8Array(MAGIC_STR.length);\n-for (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n-    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n-}\n-\n-export function _checkMagic(buffer: Uint8Array, index = 0) {\n-    for (let i = -1, n = MAGIC.length; ++i < n;) {\n-        if (MAGIC[i] !== buffer[index + i]) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-const magicLength = MAGIC.length;\n-const magicAndPadding = magicLength + PADDING;\n-const magicX2AndPadding = magicLength * 2 + PADDING;\n-\n-export function readStreamSchema(bb: ByteBuffer) {\n-    if (!_checkMagic(bb.bytes(), 0)) {\n-        for (const message of readMessages(bb)) {\n-            if (message.headerType() === MessageHeader.Schema) {\n-                return message.header(new Schema());\n-            }\n-        }\n-    }\n-    return null;\n-}\n-\n-export function readFileFooter(bb: ByteBuffer) {\n-    let fileLength = bb.capacity();\n-    let footerLength: number, footerOffset: number;\n-    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n-        (!_checkMagic(bb.bytes(), 0) /*                        Missing magic start    */) ||\n-        (!_checkMagic(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n-        (/*                                                    Invalid footer length  */\n-        (footerLength = bb.readInt32(footerOffset = fileLength - magicAndPadding)) < 1 &&\n-        (footerLength + magicX2AndPadding > fileLength))) {\n-        return null;\n-    }\n-    bb.setPosition(footerOffset - footerLength);\n-    return Footer.getRootAsFooter(bb);\n-}\n-\n-export function* readFileMessages(bb: ByteBuffer, footer: Footer) {\n-    for (let i = -1, n = footer.dictionariesLength(); ++i < n;) {\n-        bb.setPosition(footer.dictionaries(i)!.offset().low);\n-        yield readMessage(bb, bb.readInt32(bb.position()));\n-    }\n-    for (let i = -1, n = footer.recordBatchesLength(); ++i < n;) {\n-        bb.setPosition(footer.recordBatches(i)!.offset().low);\n-        yield readMessage(bb, bb.readInt32(bb.position()));\n-    }\n-}\n-\n-export function readMessage(bb: ByteBuffer, length: number) {\n-    bb.setPosition(bb.position() + PADDING);\n-    const message = Message.getRootAsMessage(bb);\n-    bb.setPosition(bb.position() + length);\n-    return message;\n-}\n-\n-export function* readMessages(bb: ByteBuffer) {\n-    let length;\n-    while (bb.position() < bb.capacity() &&\n-          (length = bb.readInt32(bb.position())) > 0) {\n-        yield readMessage(bb, length);\n-    }\n-}\n-\n-export function* readStreamMessages(bb: ByteBuffer) {\n-    for (const message of readMessages(bb)) {\n-        switch (message.headerType()) {\n-            case MessageHeader.RecordBatch:\n-            case MessageHeader.DictionaryBatch:\n-                yield message;\n-                break;\n-            default: continue;\n-        }\n-        // position the buffer after the body to read the next message\n-        bb.setPosition(bb.position() + message.bodyLength().low);\n-    }\n-}\ndiff --git a/js/src/reader/json.ts b/js/src/reader/json.ts\nnew file mode 100644\nindex 000000000..494314963\n--- /dev/null\n+++ b/js/src/reader/json.ts\n@@ -0,0 +1,176 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import * as Schema_ from '../format/fb/Schema';\n+import { Int64, Int128 } from '../util/int';\n+import { VectorLayoutReader } from './vector';\n+import { TextEncoder } from 'text-encoding-utf-8';\n+import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\n+import { TypedArray, TypedArrayConstructor } from '../vector/types';\n+import { schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from '../format/json';\n+import { Schema, RecordBatch, DictionaryBatch, Field, Buffer, FieldNode } from '../format/arrow';\n+export { Schema, RecordBatch, DictionaryBatch };\n+\n+export function* readJSON(json: any) {\n+    const schema = schemaFromJSON(json['schema']);\n+    for (const batch of (json['dictionaries'] || [])) {\n+        const message = dictionaryBatchFromJSON(batch);\n+        yield {\n+            schema, message, reader: new JSONVectorLayoutReader(\n+                flattenDataSources(batch['data']['columns']),\n+                (function* (fieldNodes) { yield* fieldNodes; })(message.fieldNodes),\n+                (function* (buffers) { yield* buffers; })(message.buffers)\n+            ) as VectorLayoutReader\n+        };\n+    }\n+    for (const batch of (json['batches'] || [])) {\n+        const message = recordBatchFromJSON(batch);\n+        yield {\n+            schema, message, reader: new JSONVectorLayoutReader(\n+                flattenDataSources(batch['columns']),\n+                (function* (fieldNodes) { yield* fieldNodes; })(message.fieldNodes),\n+                (function* (buffers) { yield* buffers; })(message.buffers)\n+            ) as VectorLayoutReader\n+        };\n+    }\n+}\n+\n+function flattenDataSources(xs: any[]): any[][] {\n+    return (xs || []).reduce<any[][]>((buffers, column: any) => [\n+        ...buffers,\n+        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n+        ...(column['OFFSET'] && [column['OFFSET']] || []),\n+        ...(column['DATA'] && [column['DATA']] || []),\n+        ...flattenDataSources(column['children'])\n+    ], [] as any[][]);\n+}\n+\n+class JSONVectorLayoutReader implements VectorLayoutReader {\n+    constructor(private sources: any[][], private fieldNodes: Iterator<FieldNode>, private buffers: Iterator<Buffer>) {}\n+    readContainerLayout(field: Field) {\n+        const { sources, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(sources, field, fieldNode, buffers.next().value)\n+        };\n+    }\n+    readFixedWidthLayout<T extends TypedArray>(field: Field, dataType: TypedArrayConstructor<T>) {\n+        const { sources, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(sources, field, fieldNode, buffers.next().value),\n+            data: createDataArray(sources, field, fieldNode, buffers.next().value, dataType)\n+        };\n+    }\n+    readBinaryLayout(field: Field) {\n+        const { sources, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(sources, field, fieldNode, buffers.next().value),\n+            offsets: new Int32Array(sources[buffers.next().value.offset.low]),\n+            data: createDataArray(sources, field, fieldNode, buffers.next().value, Uint8Array)\n+        };\n+    }\n+    readVariableWidthLayout(field: Field) {\n+        const { sources, buffers } = this, fieldNode = this.fieldNodes.next().value;\n+        return {\n+            field, fieldNode,\n+            validity: createValidityArray(sources, field, fieldNode, buffers.next().value),\n+            offsets: new Int32Array(sources[buffers.next().value.offset.low]),\n+        };\n+    }\n+}\n+\n+function createValidityArray(sources: any[][], field: Field, fieldNode: FieldNode, buffer: Buffer) {\n+    return field.nullable && fieldNode.nullCount.low > 0 &&\n+        booleanFromJSON(sources[buffer.offset.low]) || null;\n+}\n+\n+const encoder = new TextEncoder('utf-8');\n+\n+function createDataArray<T extends TypedArray>(sources: any[][], field: Field, _fieldNode: FieldNode, buffer: Buffer, ArrayConstructor: TypedArrayConstructor<T>): T {\n+    let type = field.type, data: ArrayLike<number> | ArrayBufferLike;\n+    if (type.isTimestamp() === true) {\n+        data = int64sFromJSON(sources[buffer.offset.low] as string[]);\n+    } else if ((type.isInt() || type.isTime()) && type.bitWidth === 64) {\n+        data = int64sFromJSON(sources[buffer.offset.low] as string[]);\n+    } else if (type.isDate() && type.unit === DateUnit.MILLISECOND) {\n+        data = int64sFromJSON(sources[buffer.offset.low] as string[]);\n+    } else if (type.isDecimal() === true) {\n+        data = decimalFromJSON(sources[buffer.offset.low] as string[]);\n+    } else if (type.isBinary() === true) {\n+        data = binaryFromJSON(sources[buffer.offset.low] as string[]);\n+    } else if (type.isBool() === true) {\n+        data = booleanFromJSON(sources[buffer.offset.low] as number[]).buffer;\n+    } else if (type.isUtf8() === true) {\n+        data = encoder.encode((sources[buffer.offset.low] as string[]).join(''));\n+    } else {\n+        data = (sources[buffer.offset.low]).map((x) => +x);\n+    }\n+    return new ArrayConstructor(data);\n+}\n+\n+function int64sFromJSON(values: string[]) {\n+    const data = new Uint32Array(values.length * 2);\n+    for (let i = -1, n = values.length; ++i < n;) {\n+        // Force all values (even numbers) to be parsed as strings since\n+        // pulling out high and low bits seems to lose precision sometimes\n+        // For example:\n+        //     > -4613034156400212000 >>> 0\n+        //     721782784\n+        // The correct lower 32-bits are 721782752\n+        Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n+    }\n+    return data.buffer;\n+}\n+\n+function decimalFromJSON(values: string[]) {\n+    const data = new Uint32Array(values.length * 4);\n+    for (let i = -1, n = values.length; ++i < n;) {\n+        Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n+    }\n+    return data.buffer;\n+}\n+\n+function binaryFromJSON(values: string[]) {\n+    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n+    // There are definitely more efficient ways to do this... but it gets the\n+    // job done.\n+    const joined = values.join('');\n+    const data = new Uint8Array(joined.length / 2);\n+    for (let i = 0; i < joined.length; i += 2) {\n+        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n+    }\n+    return data.buffer;\n+}\n+\n+function booleanFromJSON(arr: number[]) {\n+    let xs = [], n, i = 0;\n+    let bit = 0, byte = 0;\n+    for (const value of arr) {\n+        value && (byte |= 1 << bit);\n+        if (++bit === 8) {\n+            xs[i++] = byte;\n+            byte = bit = 0;\n+        }\n+    }\n+    if (i === 0 || bit > 0) { xs[i++] = byte; }\n+    if (i % 8 && (n = i + 8 - i % 8)) {\n+        do { xs[i] = 0; } while (++i < n);\n+    }\n+    return new Uint8Array(xs);\n+}\ndiff --git a/js/src/reader/vector.ts b/js/src/reader/vector.ts\nindex 0f95b769e..3bd6d2bb6 100644\n--- a/js/src/reader/vector.ts\n+++ b/js/src/reader/vector.ts\n@@ -15,10 +15,10 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { VectorReaderContext } from './arrow';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n+import * as Schema_ from '../format/fb/Schema';\n import { TypedArray, TypedArrayConstructor } from '../vector/types';\n+import { Schema, RecordBatch, DictionaryBatch, Field, FieldNode } from '../format/arrow';\n+import { Int, Date, Time, Timestamp, Decimal, FixedSizeList, FixedSizeBinary, FloatingPoint } from '../format/arrow';\n import {\n     Vector, BoolVector, BinaryVector, DictionaryVector,\n     Int8Vector, Int16Vector, Int32Vector, Int64Vector,\n@@ -28,244 +28,228 @@ import {\n     Date32Vector, Date64Vector, Time32Vector, Time64Vector, TimestampVector,\n } from '../vector/arrow';\n \n-import Int = Schema_.org.apache.arrow.flatbuf.Int;\n-import Date = Schema_.org.apache.arrow.flatbuf.Date;\n-import Time = Schema_.org.apache.arrow.flatbuf.Time;\n import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\n-import Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\n import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\n import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\n-// import Interval = Schema_.org.apache.arrow.flatbuf.Interval;\n-import Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\n-// import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\n import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n-import FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\n-import FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\n-import FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\n+// import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\n \n-export function readVector(field: Field, state: VectorReaderContext) {\n-    return readDictionaryVector(field, state) || readValueVector(field, state);\n+export interface ContainerLayout {\n+    fieldNode: FieldNode;\n+    validity: Uint8Array | null | void;\n }\n \n-/* a dictionary index defaults to signed 32 bit int if unspecified */\n-const defaultDictionaryIndexType = { bitWidth: () => 32, isSigned: () => true } as Int;\n-const intVectors = [\n-    [/* unsigned */ [Uint8Vector,  Uint8Array ],  /* signed */ [Int8Vector , Int8Array ]],\n-    [/* unsigned */ [Uint16Vector, Uint16Array],  /* signed */ [Int16Vector, Int16Array]],\n-    [/* unsigned */ [Uint32Vector, Uint32Array],  /* signed */ [Int32Vector, Int32Array]],,\n-    [/* unsigned */ [Uint64Vector, Uint32Array],  /* signed */ [Int64Vector, Int32Array]]\n-] as [any, TypedArrayConstructor][][];\n-\n-export function readDictionaryVector(field: Field, state: VectorReaderContext) {\n-    const encoding = field.dictionary()!;\n-    if (encoding) {\n-        const type = encoding.indexType() || defaultDictionaryIndexType;\n-        const data = state.dictionaries.get(encoding.id().toFloat64().toString())!;\n-        const [IntVector, IntArray] = intVectors[type.bitWidth() >>> 4]![+type.isSigned()];\n-        const { fieldNode, validity, data: keys } = readNumericBuffers(field, state, IntArray);\n-        return new DictionaryVector({\n-            validity, data, field, fieldNode,\n-            keys: new IntVector({ field, fieldNode, data: keys })\n-        });\n-    }\n-    return null;\n+export interface VariableWidthLayout {\n+    fieldNode: FieldNode;\n+    offsets: Int32Array;\n+    validity: Uint8Array | null | void;\n }\n \n-export function readValueVector(field: Field, state: VectorReaderContext): Vector {\n-    switch (field.typeType()) {\n-        case Type.NONE: return readNullVector();\n-        case Type.Null: return readNullVector();\n-        // case Type.Map: return readMapVector(field, state);\n-        case Type.Int: return readIntVector(field, state);\n-        case Type.Bool: return readBoolVector(field, state);\n-        case Type.Date: return readDateVector(field, state);\n-        case Type.List: return readListVector(field, state);\n-        case Type.Utf8: return readUtf8Vector(field, state);\n-        case Type.Time: return readTimeVector(field, state);\n-        // case Type.Union: return readUnionVector(field, state);\n-        case Type.Binary: return readBinaryVector(field, state);\n-        case Type.Decimal: return readDecimalVector(field, state);\n-        case Type.Struct_: return readStructVector(field, state);\n-        case Type.FloatingPoint: return readFloatVector(field, state);\n-        case Type.Timestamp: return readTimestampVector(field, state);\n-        case Type.FixedSizeList: return readFixedSizeListVector(field, state);\n-        case Type.FixedSizeBinary: return readFixedSizeBinaryVector(field, state);\n-    }\n-    throw new Error(`Unrecognized Vector { name: ${Type[field.typeType()]}, type: ${field.typeType()} }`);\n-}\n-\n-export function readNullVector() {\n-    return new Vector();\n+export interface BinaryLayout extends FixedWidthLayout<Uint8Array> {\n+    offsets: Int32Array;\n }\n \n-export function readBoolVector(field: Field, state: VectorReaderContext) {\n-    return new BoolVector(readNumericBuffers(field, state, Uint8Array));\n+export interface FixedWidthLayout<T extends TypedArray> {\n+    fieldNode: FieldNode;\n+    data: T;\n+    validity: Uint8Array | null | void;\n }\n \n-export function readDateVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new Date())!;\n-    switch (type.unit()) {\n-        case DateUnit.DAY: return new Date32Vector({ ...readNumericBuffers(field, state, Int32Array), unit: DateUnit[type.unit()] });\n-        case DateUnit.MILLISECOND: return new Date64Vector({ ...readNumericBuffers(field, state, Int32Array), unit: DateUnit[type.unit()] });\n+export function* readVectors(messages: Iterable<{ schema: Schema, message: RecordBatch | DictionaryBatch, reader: VectorLayoutReader }>) {\n+    const dictionaries = new Map<string, Vector>();\n+    for (const { schema, message, reader } of messages) {\n+        yield* readMessageVectors(schema, message, new VectorReader(dictionaries, reader));\n     }\n-    throw new Error(`Unrecognized Date { unit: ${type.unit()} }`);\n }\n \n-export function readTimeVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new Time())!;\n-    switch (type.bitWidth()) {\n-        case 32: return new Time32Vector({ ...readNumericBuffers(field, state, Int32Array), unit: TimeUnit[type.unit()] });\n-        case 64: return new Time64Vector({ ...readNumericBuffers(field, state, Uint32Array), unit: TimeUnit[type.unit()] });\n+export async function* readVectorsAsync(messages: AsyncIterable<{ schema: Schema, message: RecordBatch | DictionaryBatch, reader: VectorLayoutReader }>) {\n+    const dictionaries = new Map<string, Vector>();\n+    for await (const { schema, message, reader } of messages) {\n+        yield* readMessageVectors(schema, message, new VectorReader(dictionaries, reader));\n     }\n-    throw new Error(`Unrecognized Time { unit: ${type.unit()}, bitWidth: ${type.bitWidth()} }`);\n }\n \n-export function readTimestampVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new Timestamp())!;\n-    const { fieldNode, validity, data } = readNumericBuffers(field, state, Uint32Array);\n-    return new TimestampVector({\n-        field, fieldNode, validity, data,\n-        timezone: type.timezone()!,\n-        unit: TimeUnit[type.unit()],\n-    });\n-}\n-\n-export function readListVector(field: Field, state: VectorReaderContext) {\n-    const { fieldNode, validity, offsets } = readListBuffers(field, state);\n-    return new ListVector({\n-        field, fieldNode, validity, offsets,\n-        values: readVector(field.children(0)!, state)\n-    });\n-}\n-\n-export function readStructVector(field: Field, state: VectorReaderContext) {\n-    const n = field.childrenLength();\n-    const columns = new Array<Vector>(n);\n-    const fieldNode = state.readNextNode();\n-    const validity = readValidityBuffer(field, fieldNode, state);\n-    for (let i = -1, child: Field; ++i < n;) {\n-        if (child = field.children(i)!) {\n-            columns[i] = readVector(child, state);\n+function* readMessageVectors(schema: Schema, message: RecordBatch | DictionaryBatch, reader: VectorReader) {\n+    if (message.isRecordBatch() === true) {\n+        yield schema.fields.map((field) => reader.readVector(field));\n+    } else if (message.isDictionaryBatch()) {\n+        let id = message.dictionaryId.toFloat64().toString();\n+        let vector = reader.readValueVector(schema.dictionaries.get(id)!);\n+        if (message.isDelta) {\n+            vector = reader.dictionaries.get(id)!.concat(vector);\n         }\n+        reader.dictionaries.set(id, vector);\n     }\n-    return new StructVector({ field, fieldNode, validity, columns });\n-}\n-\n-export function readBinaryVector(field: Field, state: VectorReaderContext) {\n-    return new BinaryVector(readBinaryBuffers(field, state));\n-}\n-\n-export function readDecimalVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new Decimal())!;\n-    const { fieldNode, validity, data } = readNumericBuffers(field, state, Uint32Array);\n-    return new DecimalVector({\n-        scale: type.scale(),\n-        precision: type.precision(),\n-        field, fieldNode, validity, data\n-    });\n-}\n-\n-export function readUtf8Vector(field: Field, state: VectorReaderContext) {\n-    const { fieldNode, validity, offsets, data } = readBinaryBuffers(field, state);\n-    return new Utf8Vector({\n-        field, fieldNode,\n-        values: new BinaryVector({\n-            validity, offsets, data\n-        })\n-    });\n-}\n-\n-export function readFixedSizeListVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new FixedSizeList())!;\n-    const fieldNode = state.readNextNode();\n-    const validity = readValidityBuffer(field, fieldNode, state);\n-    return new FixedSizeListVector({\n-        field, fieldNode, validity,\n-        size: type.listSize(),\n-        values: readVector(field.children(0)!, state)\n-    });\n }\n \n-export function readFixedSizeBinaryVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new FixedSizeBinary())!;\n-    const { fieldNode, validity, data } = readNumericBuffers(field, state, Uint8Array);\n-    return new FixedSizeListVector({\n-        size: type.byteWidth(),\n-        field, fieldNode, validity,\n-        values: new Uint8Vector({ data })\n-    });\n+export interface VectorLayoutReader {\n+    readBinaryLayout(field: Field): BinaryLayout;\n+    readContainerLayout(field: Field): ContainerLayout;\n+    readVariableWidthLayout(field: Field): VariableWidthLayout;\n+    readFixedWidthLayout<T extends TypedArray>(field: Field, TypedArrayConstructor: TypedArrayConstructor<T>): FixedWidthLayout<T>;\n }\n \n-export function readFloatVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new FloatingPoint())!;\n-    switch (type.precision()) {\n-        case Precision.HALF:   return new Float16Vector(readNumericBuffers(field, state, Uint16Array));\n-        case Precision.SINGLE: return new Float32Vector(readNumericBuffers(field, state, Float32Array));\n-        case Precision.DOUBLE: return new Float64Vector(readNumericBuffers(field, state, Float64Array));\n+export class VectorReader implements VectorLayoutReader {\n+    constructor(public dictionaries: Map<string, Vector>, protected layout: VectorLayoutReader) {}\n+    readVector(field: Field): Vector {\n+        return this.readDictionaryVector(field) || this.readValueVector(field);\n     }\n-    throw new Error(`Unrecognized FloatingPoint { precision: ${type.precision()} }`);\n-}\n-\n-export function readIntVector(field: Field, state: VectorReaderContext) {\n-    const type = field.type(new Int())!;\n-    if (type.isSigned()) {\n-        switch (type.bitWidth()) {\n-            case  8: return new  Int8Vector(readNumericBuffers(field, state, Int8Array));\n-            case 16: return new Int16Vector(readNumericBuffers(field, state, Int16Array));\n-            case 32: return new Int32Vector(readNumericBuffers(field, state, Int32Array));\n-            case 64: return new Int64Vector(readNumericBuffers(field, state, Int32Array));\n+    readDictionaryVector(field: Field) {\n+        const encoding = field.dictionary;\n+        if (encoding) {\n+            const keys = this.readIntVector(field.indexField());\n+            const data = this.dictionaries.get(encoding.dictionaryId.toFloat64().toString())!;\n+            return new DictionaryVector({\n+                field, data, keys,\n+                validity: (keys as any).validity,\n+                fieldNode: (keys as any).fieldNode,\n+            });\n         }\n+        return null;\n     }\n-    switch (type.bitWidth()) {\n-        case  8: return new  Uint8Vector(readNumericBuffers(field, state, Uint8Array));\n-        case 16: return new Uint16Vector(readNumericBuffers(field, state, Uint16Array));\n-        case 32: return new Uint32Vector(readNumericBuffers(field, state, Uint32Array));\n-        case 64: return new Uint64Vector(readNumericBuffers(field, state, Uint32Array));\n+    readValueVector(field: Field) {\n+        switch (field.typeType) {\n+            case Type.NONE: return this.readNullVector();\n+            case Type.Null: return this.readNullVector();\n+            // case Type.Map: return this.readMapVector(field);\n+            case Type.Int: return this.readIntVector(field);\n+            case Type.Bool: return this.readBoolVector(field);\n+            case Type.Date: return this.readDateVector(field);\n+            case Type.List: return this.readListVector(field);\n+            case Type.Utf8: return this.readUtf8Vector(field);\n+            case Type.Time: return this.readTimeVector(field);\n+            // case Type.Union: return this.readUnionVector(field);\n+            case Type.Binary: return this.readBinaryVector(field);\n+            case Type.Decimal: return this.readDecimalVector(field);\n+            case Type.Struct_: return this.readStructVector(field);\n+            case Type.FloatingPoint: return this.readFloatVector(field);\n+            case Type.Timestamp: return this.readTimestampVector(field);\n+            case Type.FixedSizeList: return this.readFixedSizeListVector(field);\n+            case Type.FixedSizeBinary: return this.readFixedSizeBinaryVector(field);\n+        }\n+        throw new Error(`Unrecognized ${field.toString()}`);\n+    }\n+    readNullVector() {\n+        return new Vector();\n+    }\n+    readBoolVector(field: Field) {\n+        return new BoolVector(this.readFixedWidthLayout(field, Uint8Array));\n+    }\n+    readDateVector(field: Field) {\n+        const type = field.type as Date;\n+        switch (type.unit) {\n+            case DateUnit.DAY: return new Date32Vector({ ...this.readFixedWidthLayout(field, Int32Array), unit: DateUnit[type.unit] });\n+            case DateUnit.MILLISECOND: return new Date64Vector({ ...this.readFixedWidthLayout(field, Int32Array), unit: DateUnit[type.unit] });\n+        }\n+        throw new Error(`Unrecognized ${type.toString()}`);\n+    }\n+    readTimeVector(field: Field) {\n+        const type = field.type as Time;\n+        switch (type.bitWidth) {\n+            case 32: return new Time32Vector({ ...this.readFixedWidthLayout(field, Int32Array), unit: TimeUnit[type.unit] });\n+            case 64: return new Time64Vector({ ...this.readFixedWidthLayout(field, Uint32Array), unit: TimeUnit[type.unit] });\n+        }\n+        throw new Error(`Unrecognized ${type.toString()}`);\n+    }\n+    readTimestampVector(field: Field) {\n+        const type = field.type as Timestamp;\n+        const { fieldNode, validity, data } = this.readFixedWidthLayout(field, Uint32Array);\n+        return new TimestampVector({\n+            field, fieldNode, validity, data,\n+            timezone: type.timezone!,\n+            unit: TimeUnit[type.unit],\n+        });\n+    }\n+    readListVector(field: Field) {\n+        const { fieldNode, validity, offsets } = this.readVariableWidthLayout(field);\n+        return new ListVector({\n+            field, fieldNode, validity, offsets,\n+            values: this.readVector(field.children[0])\n+        });\n+    }\n+    readStructVector(field: Field) {\n+        const { fieldNode, validity } = this.readContainerLayout(field);\n+        return new StructVector({\n+            field, fieldNode, validity,\n+            columns: field.children.map((field) => this.readVector(field))\n+        });\n+    }\n+    readBinaryVector(field: Field) {\n+        return new BinaryVector(this.readBinaryLayout(field));\n+    }\n+    readDecimalVector(field: Field) {\n+        const type = field.type as Decimal;\n+        const { fieldNode, validity, data } = this.readFixedWidthLayout(field, Uint32Array);\n+        return new DecimalVector({\n+            scale: type.scale,\n+            precision: type.precision,\n+            field, fieldNode, validity, data\n+        });\n+    }\n+    readUtf8Vector(field: Field) {\n+        const { fieldNode, validity, offsets, data } = this.readBinaryLayout(field);\n+        return new Utf8Vector({\n+            field, fieldNode,\n+            values: new BinaryVector({\n+                validity, offsets, data\n+            })\n+        });\n+    }\n+    readFixedSizeListVector(field: Field) {\n+        const type = field.type as FixedSizeList;\n+        const { fieldNode, validity } = this.readContainerLayout(field);\n+        return new FixedSizeListVector({\n+            field, fieldNode, validity,\n+            size: type.listSize,\n+            values: this.readVector(field.children[0])\n+        });\n+    }\n+    readFixedSizeBinaryVector(field: Field) {\n+        const type = field.type as FixedSizeBinary;\n+        const { fieldNode, validity, data } = this.readFixedWidthLayout(field, Uint8Array);\n+        return new FixedSizeListVector({\n+            size: type.byteWidth,\n+            field, fieldNode, validity,\n+            values: new Uint8Vector({ data })\n+        });\n+    }\n+    readFloatVector(field: Field) {\n+        const type = field.type as FloatingPoint;\n+        switch (type.precision) {\n+            case Precision.HALF:   return new Float16Vector(this.readFixedWidthLayout(field, Uint16Array));\n+            case Precision.SINGLE: return new Float32Vector(this.readFixedWidthLayout(field, Float32Array));\n+            case Precision.DOUBLE: return new Float64Vector(this.readFixedWidthLayout(field, Float64Array));\n+        }\n+        throw new Error(`Unrecognized FloatingPoint { precision: ${type.precision} }`);\n+    }\n+    readIntVector(field: Field) {\n+        const type = field.type as Int;\n+        if (type.isSigned) {\n+            switch (type.bitWidth) {\n+                case  8: return new  Int8Vector(this.readFixedWidthLayout(field, Int8Array));\n+                case 16: return new Int16Vector(this.readFixedWidthLayout(field, Int16Array));\n+                case 32: return new Int32Vector(this.readFixedWidthLayout(field, Int32Array));\n+                case 64: return new Int64Vector(this.readFixedWidthLayout(field, Int32Array));\n+            }\n+        }\n+        switch (type.bitWidth) {\n+            case  8: return new  Uint8Vector(this.readFixedWidthLayout(field, Uint8Array));\n+            case 16: return new Uint16Vector(this.readFixedWidthLayout(field, Uint16Array));\n+            case 32: return new Uint32Vector(this.readFixedWidthLayout(field, Uint32Array));\n+            case 64: return new Uint64Vector(this.readFixedWidthLayout(field, Uint32Array));\n+        }\n+        throw new Error(`Unrecognized Int { isSigned: ${type.isSigned}, bitWidth: ${type.bitWidth} }`);\n+    }\n+    readContainerLayout(field: Field) {\n+        return this.layout.readContainerLayout(field);\n+    }\n+    readBinaryLayout(field: Field) {\n+        return this.layout.readBinaryLayout(field);\n+    }\n+    readVariableWidthLayout(field: Field) {\n+        return this.layout.readVariableWidthLayout(field);\n+    }\n+    readFixedWidthLayout<T extends TypedArray>(field: Field, TypedArrayConstructor: TypedArrayConstructor<T>) {\n+        return this.layout.readFixedWidthLayout(field, TypedArrayConstructor);\n     }\n-    throw new Error(`Unrecognized Int { isSigned: ${type.isSigned()}, bitWidth: ${type.bitWidth()} }`);\n-}\n-\n-function readListBuffers(field: Field, state: VectorReaderContext) {\n-    const fieldNode = state.readNextNode();\n-    const validity = readValidityBuffer(field, fieldNode, state);\n-    const offsets = readDataBuffer(Int32Array, state);\n-    return { field, fieldNode, validity, offsets };\n-}\n-\n-function readBinaryBuffers(field: Field, state: VectorReaderContext) {\n-    const fieldNode = state.readNextNode();\n-    const validity = readValidityBuffer(field, fieldNode, state);\n-    const offsets = readDataBuffer(Int32Array, state);\n-    const data = readDataBuffer(Uint8Array, state);\n-    return { field, fieldNode, validity, offsets, data };\n-}\n-\n-function readNumericBuffers<T extends TypedArray>(field: Field, state: VectorReaderContext, ArrayConstructor: TypedArrayConstructor<T>) {\n-    const fieldNode = state.readNextNode();\n-    const validity = readValidityBuffer(field, fieldNode, state);\n-    const data = readDataBuffer(ArrayConstructor, state);\n-    return { field, fieldNode, validity, data };\n-}\n-\n-function readDataBuffer<T extends TypedArray>(ArrayConstructor: TypedArrayConstructor<T>, state: VectorReaderContext) {\n-    return createTypedArray(ArrayConstructor, state.bytes, state.offset, state.readNextBuffer());\n-}\n-\n-function readValidityBuffer(field: Field, fieldNode: FieldNode, state: VectorReaderContext) {\n-    return createValidityArray(field, fieldNode, state.bytes, state.offset, state.readNextBuffer());\n-}\n-\n-function createValidityArray(field: Field, fieldNode: FieldNode, bytes: Uint8Array, offset: number, buffer: Buffer) {\n-    return field.nullable() && fieldNode.nullCount().low > 0 && createTypedArray(Uint8Array, bytes, offset, buffer) || null;\n-}\n-\n-function createTypedArray<T extends TypedArray>(ArrayConstructor: TypedArrayConstructor<T>, bytes: Uint8Array, offset: number, buffer: Buffer) {\n-    return new ArrayConstructor(\n-        bytes.buffer,\n-        bytes.byteOffset + offset + buffer.offset().low,\n-        buffer.length().low / ArrayConstructor.BYTES_PER_ELEMENT\n-    );\n }\ndiff --git a/js/src/util/int.ts b/js/src/util/int.ts\nnew file mode 100644\nindex 000000000..9088e7b99\n--- /dev/null\n+++ b/js/src/util/int.ts\n@@ -0,0 +1,320 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const carryBit16 = 1 << 16;\n+\n+function intAsHex(value: number): string {\n+    if (value < 0) {\n+        value = 0xFFFFFFFF + value + 1;\n+    }\n+    return `0x${value.toString(16)}`;\n+}\n+\n+const kInt32DecimalDigits = 8;\n+const kPowersOfTen = [1,\n+                      10,\n+                      100,\n+                      1000,\n+                      10000,\n+                      100000,\n+                      1000000,\n+                      10000000,\n+                      100000000];\n+\n+export class BaseInt64 {\n+    constructor (protected buffer: Uint32Array) {}\n+\n+    high(): number { return this.buffer[1]; }\n+    low (): number { return this.buffer[0]; }\n+\n+    protected _times(other: BaseInt64) {\n+        // Break the left and right numbers into 16 bit chunks\n+        // so that we can multiply them without overflow.\n+        const L = new Uint32Array([\n+            this.buffer[1] >>> 16,\n+            this.buffer[1] & 0xFFFF,\n+            this.buffer[0] >>> 16,\n+            this.buffer[0] & 0xFFFF\n+        ]);\n+\n+        const R = new Uint32Array([\n+            other.buffer[1] >>> 16,\n+            other.buffer[1] & 0xFFFF,\n+            other.buffer[0] >>> 16,\n+            other.buffer[0] & 0xFFFF\n+        ]);\n+\n+        let product = L[3] * R[3];\n+        this.buffer[0] = product & 0xFFFF;\n+\n+        let sum = product >>> 16;\n+\n+        product = L[2] * R[3];\n+        sum += product;\n+\n+        product = (L[3] * R[2]) >>> 0;\n+        sum += product;\n+\n+        this.buffer[0] += sum << 16;\n+\n+        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n+\n+        this.buffer[1] += sum >>> 16;\n+        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n+        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n+\n+        return this;\n+      }\n+\n+    protected _plus(other: BaseInt64) {\n+        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n+        this.buffer[1] += other.buffer[1];\n+        if (sum < (this.buffer[0] >>> 0)) {\n+          ++this.buffer[1];\n+        }\n+        this.buffer[0] = sum;\n+    }\n+\n+    lessThan(other: BaseInt64): boolean {\n+        return this.buffer[1] < other.buffer[1] ||\n+            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n+    }\n+\n+    equals(other: BaseInt64): boolean {\n+        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n+    }\n+\n+    greaterThan(other: BaseInt64): boolean {\n+        return other.lessThan(this);\n+    }\n+\n+    hex(): string {\n+        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n+    }\n+}\n+\n+export class Uint64 extends BaseInt64 {\n+    times(other: Uint64): Uint64 {\n+        this._times(other);\n+        return this;\n+    }\n+\n+    plus(other: Uint64): Uint64 {\n+        this._plus(other);\n+        return this;\n+    }\n+\n+    static multiply(left: Uint64, right: Uint64): Uint64 {\n+        let rtrn = new Uint64(new Uint32Array(left.buffer));\n+        return rtrn.times(right);\n+    }\n+\n+    static add(left: Uint64, right: Uint64): Uint64 {\n+        let rtrn = new Uint64(new Uint32Array(left.buffer));\n+        return rtrn.plus(right);\n+    }\n+}\n+\n+export class Int64 extends BaseInt64 {\n+    negate(): Int64 {\n+        this.buffer[0] = ~this.buffer[0] + 1;\n+        this.buffer[1] = ~this.buffer[1];\n+\n+        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n+        return this;\n+    }\n+\n+    times(other: Int64): Int64 {\n+        this._times(other);\n+        return this;\n+    }\n+\n+    plus(other: Int64): Int64 {\n+        this._plus(other);\n+        return this;\n+    }\n+\n+    lessThan(other: Int64): boolean {\n+        // force high bytes to be signed\n+        const this_high = this.buffer[1] << 0;\n+        const other_high = other.buffer[1] << 0;\n+        return this_high < other_high ||\n+            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n+    }\n+\n+    static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n+        // TODO: Assert that out_buffer is 0 and length = 2\n+        const negate = str.startsWith('-');\n+        const length = str.length;\n+\n+        let out = new Int64(out_buffer);\n+        for (let posn = negate ? 1 : 0; posn < length;) {\n+            const group = kInt32DecimalDigits < length - posn ?\n+                          kInt32DecimalDigits : length - posn;\n+            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n+            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n+\n+            out.times(multiple);\n+            out.plus(chunk);\n+\n+            posn += group;\n+        }\n+\n+        return negate ? out.negate() : out;\n+    }\n+\n+    static multiply(left: Int64, right: Int64): Int64 {\n+        let rtrn = new Int64(new Uint32Array(left.buffer));\n+        return rtrn.times(right);\n+    }\n+\n+    static add(left: Int64, right: Int64): Int64 {\n+        let rtrn = new Int64(new Uint32Array(left.buffer));\n+        return rtrn.plus(right);\n+    }\n+}\n+\n+export class Int128 {\n+    constructor (private buffer: Uint32Array) {\n+        // buffer[3] MSB (high)\n+        // buffer[2]\n+        // buffer[1]\n+        // buffer[0] LSB (low)\n+    }\n+\n+    high(): Int64 {\n+        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n+    }\n+\n+    low(): Int64 {\n+        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n+    }\n+\n+    negate(): Int128 {\n+        this.buffer[0] = ~this.buffer[0] + 1;\n+        this.buffer[1] = ~this.buffer[1];\n+        this.buffer[2] = ~this.buffer[2];\n+        this.buffer[3] = ~this.buffer[3];\n+\n+        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n+        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n+        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n+        return this;\n+    }\n+\n+    times(other: Int128): Int128 {\n+        // Break the left and right numbers into 32 bit chunks\n+        // so that we can multiply them without overflow.\n+        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n+        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n+        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n+        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n+\n+        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n+        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n+        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n+        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n+\n+        let product = Uint64.multiply(L3, R3);\n+        this.buffer[0] = product.low();\n+\n+        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n+\n+        product = Uint64.multiply(L2, R3);\n+        sum.plus(product);\n+\n+        product = Uint64.multiply(L3, R2);\n+        sum.plus(product);\n+\n+        this.buffer[1] = sum.low();\n+\n+        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n+\n+        this.buffer[2] = sum.high();\n+        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n+\n+        high.plus(Uint64.multiply(L1, R3))\n+            .plus(Uint64.multiply(L2, R2))\n+            .plus(Uint64.multiply(L3, R1));\n+        this.buffer[3] += Uint64.multiply(L0, R3)\n+                        .plus(Uint64.multiply(L1, R2))\n+                        .plus(Uint64.multiply(L2, R1))\n+                        .plus(Uint64.multiply(L3, R0)).low();\n+\n+        return this;\n+    }\n+\n+    plus(other: Int128): Int128 {\n+        let sums = new Uint32Array(4);\n+        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n+        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n+        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n+        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n+\n+        if (sums[0] < (this.buffer[0] >>> 0)) {\n+            ++sums[1];\n+        }\n+        if (sums[1] < (this.buffer[1] >>> 0)) {\n+            ++sums[2];\n+        }\n+        if (sums[2] < (this.buffer[2] >>> 0)) {\n+            ++sums[3];\n+        }\n+\n+        this.buffer[3] = sums[3];\n+        this.buffer[2] = sums[2];\n+        this.buffer[1] = sums[1];\n+        this.buffer[0] = sums[0];\n+\n+        return this;\n+    }\n+\n+    hex(): string {\n+        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n+    }\n+\n+    static multiply(left: Int128, right: Int128): Int128 {\n+        let rtrn = new Int128(new Uint32Array(left.buffer));\n+        return rtrn.times(right);\n+    }\n+\n+    static add(left: Int128, right: Int128): Int128 {\n+        let rtrn = new Int128(new Uint32Array(left.buffer));\n+        return rtrn.plus(right);\n+    }\n+\n+    static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n+        // TODO: Assert that out_buffer is 0 and length = 4\n+        const negate = str.startsWith('-');\n+        const length = str.length;\n+\n+        let out = new Int128(out_buffer);\n+        for (let posn = negate ? 1 : 0; posn < length;) {\n+            const group = kInt32DecimalDigits < length - posn ?\n+                          kInt32DecimalDigits : length - posn;\n+            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n+            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n+\n+            out.times(multiple);\n+            out.plus(chunk);\n+\n+            posn += group;\n+        }\n+\n+        return negate ? out.negate() : out;\n+    }\n+}\ndiff --git a/js/src/util/layout.ts b/js/src/util/layout.ts\nnew file mode 100644\nindex 000000000..c064ee9d7\n--- /dev/null\n+++ b/js/src/util/layout.ts\n@@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { TextEncoder } from 'text-encoding-utf-8';\n+import { TypedArrayConstructor, TypedArray } from '../vector/types';\n+\n+export function align(value: number, alignment: number) {\n+    return value + padding(value, alignment);\n+}\n+\n+export function padding(value: number, alignment: number) {\n+    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n+}\n+\n+export type NullableLayout = { nullCount: number, validity: Uint8Array };\n+export type BufferLayout<TArray = ArrayLike<number>> = { data: TArray };\n+export type DictionaryLayout<TArray = ArrayLike<number>> = { data: TArray, keys: number[] };\n+export type VariableWidthLayout<TArray = ArrayLike<number>> = { data: TArray, offsets: number[] };\n+export type VariableWidthDictionaryLayout<TArray = ArrayLike<number>> = { data: TArray, keys: number[], offsets: number[] };\n+\n+export type values<T, TNull> = ArrayLike<T | TNull | null | undefined>;\n+export type BufferValueWriter<T> = (src: ArrayLike<T>, dst: number[], index: number) => boolean | void;\n+export type BufferWriter<T, TNull> = (values: values<T, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout;\n+export type BufferLayoutWriter<T, TNull> = (write: BufferValueWriter<T>, values: values<T, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout;\n+\n+const writeNumeric64Value = writeFixedWidthValue.bind(null, 64);\n+const writeNumeric128Value = writeFixedWidthValue.bind(null, 128);\n+const utf8Encoder = new TextEncoder() as { encode: (s: string) => Uint8Array };\n+\n+const stride1Encode = writeValidityLayout.bind(null, writeFixedWidthLayoutWithStride.bind(null, 1));\n+const stride1FixedWidth = writeFixedWidthLayout.bind(null, writeValidityLayout.bind(null, stride1Encode));\n+const stride2FixedWidth = writeFixedWidthLayout.bind(null, writeValidityLayout.bind(null, writeFixedWidthLayoutWithStride.bind(null, 2)));\n+const stride4FixedWidth = writeFixedWidthLayout.bind(null, writeValidityLayout.bind(null, writeFixedWidthLayoutWithStride.bind(null, 4)));\n+\n+export const writeBools = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeBooleanValue), Uint8Array)                                                as <TNull>(values: values<boolean | number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Uint8Array>;\n+export const writeInt8s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Int8Array)                                                 as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Int8Array>;\n+export const writeInt16s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Int16Array)                                               as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Int16Array>;\n+export const writeInt32s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Int32Array)                                               as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Int32Array>;\n+export const writeInt64s = writeTypedLayout.bind(null, stride2FixedWidth.bind(null, writeNumeric64Value), Int32Array)                                             as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Int32Array>;\n+export const writeUint8s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Uint8Array)                                               as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Uint8Array>;\n+export const writeUint16s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Uint16Array)                                             as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Uint16Array>;\n+export const writeUint32s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Uint32Array)                                             as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Uint32Array>;\n+export const writeUint64s = writeTypedLayout.bind(null, stride2FixedWidth.bind(null, writeNumeric64Value), Uint32Array)                                           as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Uint32Array>;\n+export const writeDecimals = writeTypedLayout.bind(null, stride4FixedWidth.bind(null, writeNumeric128Value), Uint32Array)                                         as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Uint32Array>;\n+export const writeFloat32s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Float32Array)                                           as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Float32Array>;\n+export const writeFloat64s = writeTypedLayout.bind(null, stride1FixedWidth.bind(null, writeNumericValue), Float64Array)                                           as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => BufferLayout<Float64Array>;\n+export const writeVariableWidth = writeVariableWidthLayout.bind(null, stride1Encode)                                                                              as <T, TNull>(writeValue: BufferValueWriter<T>, values: values<T, TNull>, nulls?: ArrayLike<TNull>) => VariableWidthLayout<Uint8Array>;\n+export const writeBinary = writeTypedLayout.bind(null, writeVariableWidth.bind(null, writeBinaryValue))                                                           as <TNull>(values: values<Iterable<number>, TNull>, nulls?: ArrayLike<TNull>) => VariableWidthLayout<Uint8Array>;\n+export const writeUtf8s = writeTypedLayout.bind(null, writeVariableWidth.bind(null, writeUtf8Value), Uint8Array)                                                  as <TNull>(values: values<string, TNull>, nulls?: ArrayLike<TNull>) => VariableWidthLayout<Uint8Array>;\n+export const writeDictionaryEncoded = writeDictionaryLayout.bind(null, stride1Encode)                                                                             as <T, TNull>(writeValue: BufferValueWriter<T>, values: values<T, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Uint8Array>;\n+export const writeDictionaryEncodedBools = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeBooleanValue), Uint8Array)        as <TNull>(values: values<boolean | number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Uint8Array>;\n+export const writeDictionaryEncodedInt8s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Int8Array)         as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Int8Array>;\n+export const writeDictionaryEncodedInt16s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Int16Array)       as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Int16Array>;\n+export const writeDictionaryEncodedInt32s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Int32Array)       as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Int32Array>;\n+export const writeDictionaryEncodedInt64s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride2FixedWidth, writeNumeric64Value), Int32Array)     as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Int32Array>;\n+export const writeDictionaryEncodedUint8s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Uint8Array)       as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Uint8Array>;\n+export const writeDictionaryEncodedUint16s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Uint16Array)     as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Uint16Array>;\n+export const writeDictionaryEncodedUint32s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Uint32Array)     as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Uint32Array>;\n+export const writeDictionaryEncodedUint64s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride2FixedWidth, writeNumeric64Value), Uint32Array)   as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Uint32Array>;\n+export const writeDictionaryEncodedDecimals = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride4FixedWidth, writeNumeric128Value), Uint32Array) as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Uint32Array>;\n+export const writeDictionaryEncodedFloat32s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Float32Array)   as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Float32Array>;\n+export const writeDictionaryEncodedFloat64s = writeTypedLayout.bind(null, writeDictionaryLayout.bind(null, stride1FixedWidth, writeNumericValue), Float64Array)   as <TNull>(values: values<number, TNull>, nulls?: ArrayLike<TNull>) => DictionaryLayout<Float64Array>;\n+export const writeDictionaryEncodedVariableWidth = writeDictionaryLayout.bind(null, writeVariableWidth)                                                           as <T, TNull>(writeValue: BufferValueWriter<T>, values: values<T, TNull>, nulls?: ArrayLike<TNull>) => VariableWidthDictionaryLayout<Uint8Array>;\n+export const writeDictionaryEncodedBinary = writeTypedLayout.bind(null, writeDictionaryEncodedVariableWidth.bind(null, writeBinaryValue))                         as <TNull>(values: values<Iterable<number>, TNull>, nulls?: ArrayLike<TNull>) => VariableWidthDictionaryLayout<Uint8Array>;\n+export const writeDictionaryEncodedUtf8s = writeTypedLayout.bind(null, writeDictionaryEncodedVariableWidth.bind(null, writeUtf8Value), Uint8Array)                as <TNull>(values: values<string, TNull>, nulls?: ArrayLike<TNull>) => VariableWidthDictionaryLayout<Uint8Array>;\n+\n+function writeFixedWidthLayoutWithStride<T, TNull>(\n+    stride: number,\n+    writeValue: BufferValueWriter<T>,\n+    values: values<T, TNull>\n+) {\n+    let index = -stride;\n+    const data = [] as number[];\n+    const length = values.length;\n+    while ((index += stride) < length) {\n+        writeValue(values as ArrayLike<T>, data, index);\n+    }\n+    return { data: data as ArrayLike<number> };\n+}\n+\n+function writeFixedWidthLayout<T, TNull>(\n+    writeLayout: BufferLayoutWriter<T, TNull>,\n+    writeValue: BufferValueWriter<T>,\n+    values: values<T, TNull>,\n+    nulls?: ArrayLike<TNull>\n+) {\n+    return writeLayout(writeValue, values, nulls);\n+}\n+\n+function writeValidityLayout<T, TNull>(\n+    writeLayout: BufferLayoutWriter<T, TNull>,\n+    writeValue: BufferValueWriter<T>,\n+    values: values<T, TNull>,\n+    nulls?: ArrayLike<TNull>\n+) {\n+    let nullCount = 0;\n+    let nullsLength = nulls && nulls.length || 0;\n+    let validity = new Uint8Array(align(values.length >>> 3, 8)).fill(255);\n+    return {\n+        ...writeLayout(writeValueOrValidity, values),\n+        nullCount, validity: (nullCount > 0 && validity) || new Uint8Array(0)\n+    } as BufferLayout & NullableLayout;\n+    function writeValueOrValidity(src: ArrayLike<T>, dst: number[], index: number) {\n+        writeValue(src, dst, index);\n+        let i = -1, x = src[index] as T | TNull;\n+        let isNull = x === null || x === undefined;\n+        while (!isNull && ++i < nullsLength) {\n+            isNull = x === nulls![i];\n+        }\n+        if (isNull) {\n+            nullCount++;\n+            validity[index >> 3] &= ~(1 << (index % 8));\n+        }\n+    }\n+}\n+\n+function writeVariableWidthLayout<T, TNull>(\n+    writeLayout: BufferLayoutWriter<T, TNull>,\n+    writeValue: BufferValueWriter<T>,\n+    values: values<T, TNull>,\n+    nulls?: ArrayLike<TNull>\n+) {\n+    let offsets = [0], offsetsIndex = 0;\n+    return { ...writeLayout(writeValueAndOffset, values, nulls), offsets } as VariableWidthLayout;\n+    function writeValueAndOffset(src: ArrayLike<T>, dst: number[], index: number) {\n+        if (!writeValue(src, dst, index)) {\n+            offsets[++offsetsIndex] = dst.length;\n+        }\n+    }\n+}\n+\n+function writeDictionaryLayout<T, TNull>(\n+    writeLayout: BufferLayoutWriter<T, TNull>,\n+    writeValue: BufferValueWriter<T>,\n+    values: values<T, TNull>,\n+    nulls?: ArrayLike<TNull>\n+) {\n+    let keys = [] as number[], keysIndex = 0, keysMap = Object.create(null);\n+    return { ...writeLayout(writeKeysOrValues, values, nulls), keys };\n+    function writeKeysOrValues(src: ArrayLike<T>, dst: number[], index: number) {\n+        const x: any = src[index];\n+        if (x in keysMap) {\n+            return (keys[index] = keysMap[x]) || true;\n+        } else if (!writeValue(src, dst, index)) {\n+            keys[index] = keysMap[x] = keysIndex++;\n+        }\n+    }\n+}\n+\n+function writeTypedLayout<T, TNull, TArray extends TypedArray>(\n+    writeBuffers: BufferWriter<T, TNull>,\n+    ArrayBufferView: TypedArrayConstructor<TArray>,\n+    values: values<T, TNull>,\n+    nulls?: ArrayLike<TNull>\n+) {\n+    const result = writeBuffers(values, nulls);\n+    result.data = new ArrayBufferView(result.data);\n+    return result as BufferLayout<TArray>;\n+}\n+\n+function writeBooleanValue(src: ArrayLike<boolean>, dst: number[], index: number) {\n+    if (src[index]) {\n+        let i = index >>> 3;\n+        let b = dst[i] || 0;\n+        dst[i] = b | 1 << (index % 8);\n+    }\n+}\n+\n+function writeNumericValue(src: ArrayLike<number>, dst: number[], index: number) {\n+    dst[index] = +src[index];\n+}\n+\n+function writeFixedWidthValue(bitWidth: number, src: ArrayLike<number>, dst: number[], index: number) {\n+    const bytesLen = bitWidth / 32;\n+    for (let i = -1; ++i < bytesLen;) {\n+        dst[index + i] = src[index + i];\n+    }\n+}\n+\n+function writeUtf8Value(src: ArrayLike<string>, dst: number[], index: number) {\n+    dst.push(...utf8Encoder.encode(src[index]));\n+}\n+\n+function writeBinaryValue(src: ArrayLike<Iterable<number>>, dst: number[], index: number) {\n+    dst.push(...src[index]);\n+}\ndiff --git a/js/src/vector/arrow.ts b/js/src/vector/arrow.ts\nindex 88fec7e44..64a43bdab 100644\n--- a/js/src/vector/arrow.ts\n+++ b/js/src/vector/arrow.ts\n@@ -15,49 +15,19 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n-\n import { Vector } from './vector';\n-import { Utf8Vector as Utf8VectorBase } from './utf8';\n-import { StructVector as StructVectorBase } from './struct';\n-import { DictionaryVector as DictionaryVectorBase } from './dictionary';\n-import {\n-    ListVector as ListVectorBase,\n-    BinaryVector as BinaryVectorBase,\n-    FixedSizeListVector as FixedSizeListVectorBase\n-} from './list';\n-\n-import {\n-    BoolVector as BoolVectorBase,\n-    Int8Vector as Int8VectorBase,\n-    Int16Vector as Int16VectorBase,\n-    Int32Vector as Int32VectorBase,\n-    Int64Vector as Int64VectorBase,\n-    Uint8Vector as Uint8VectorBase,\n-    Uint16Vector as Uint16VectorBase,\n-    Uint32Vector as Uint32VectorBase,\n-    Uint64Vector as Uint64VectorBase,\n-    Float16Vector as Float16VectorBase,\n-    Float32Vector as Float32VectorBase,\n-    Float64Vector as Float64VectorBase,\n-    Date32Vector as Date32VectorBase,\n-    Date64Vector as Date64VectorBase,\n-    Time32Vector as Time32VectorBase,\n-    Time64Vector as Time64VectorBase,\n-    DecimalVector as DecimalVectorBase,\n-    TimestampVector as TimestampVectorBase,\n-} from './numeric';\n-\n-import { nullableMixin, fieldMixin } from './traits';\n+import * as vectors from './traits/vectors';\n+import * as fieldVectors from './traits/field';\n+import * as nullableVectors from './traits/nullable';\n+import * as nullableFieldVectors from './traits/nullablefield';\n+import { Field, FieldNode } from '../format/arrow';\n+import { isFieldArgv, isNullableArgv } from './traits/mixins';\n \n function MixinArrowTraits<T extends Vector<any>, TArgv>(\n     Base: new (argv: TArgv) => T,\n     Field: new (argv: TArgv & { field: Field, fieldNode: FieldNode }) => T,\n     Nullable: new (argv: TArgv & { validity: Uint8Array }) => T,\n-    NullableField: new (argv: TArgv & { validity: Uint8Array, field: Field, fieldNode: FieldNode }) => T,\n+    NullableField: new (argv: TArgv & { validity: Uint8Array, field: Field, fieldNode: FieldNode }) => T\n ) {\n     return function(argv: TArgv | (TArgv & { validity: Uint8Array }) | (TArgv & { field: Field, fieldNode: FieldNode })) {\n         return new (!isFieldArgv(argv)\n@@ -67,179 +37,52 @@ function MixinArrowTraits<T extends Vector<any>, TArgv>(\n     } as any as { new (argv: TArgv | (TArgv & { validity: Uint8Array }) | (TArgv & { field: Field, fieldNode: FieldNode })): T };\n }\n \n-function isFieldArgv(x: any): x is { field: Field, fieldNode: FieldNode } {\n-    return x && x.field instanceof Field && x.fieldNode instanceof FieldNode;\n-}\n-\n-function isNullableArgv(x: any): x is { validity: Uint8Array } {\n-    return x && x.validity && ArrayBuffer.isView(x.validity) && x.validity instanceof Uint8Array;\n-}\n-\n export { Vector };\n-export class ListVector extends MixinArrowTraits(\n-    ListVectorBase,\n-    class ListVector extends fieldMixin(ListVectorBase) {} as any,\n-    class ListVector extends nullableMixin(ListVectorBase) {} as any,\n-    class ListVector extends nullableMixin(fieldMixin(ListVectorBase)) {} as any\n-) {}\n-\n-export class BinaryVector extends MixinArrowTraits(\n-    BinaryVectorBase,\n-    class BinaryVector extends fieldMixin(BinaryVectorBase) {} as any,\n-    class BinaryVector extends nullableMixin(BinaryVectorBase) {} as any,\n-    class BinaryVector extends nullableMixin(fieldMixin(BinaryVectorBase)) {} as any\n-) {}\n-\n-export class Utf8Vector extends MixinArrowTraits(\n-    Utf8VectorBase,\n-    class Utf8Vector extends fieldMixin(Utf8VectorBase) {} as any,\n-    class Utf8Vector extends nullableMixin(Utf8VectorBase) {} as any,\n-    class Utf8Vector extends nullableMixin(fieldMixin(Utf8VectorBase)) {} as any\n-) {}\n-\n-export class BoolVector extends MixinArrowTraits(\n-    BoolVectorBase,\n-    class BoolVector extends fieldMixin(BoolVectorBase) {} as any,\n-    class BoolVector extends nullableMixin(BoolVectorBase) {} as any,\n-    class BoolVector extends nullableMixin(fieldMixin(BoolVectorBase)) {} as any\n-) {}\n-\n-export class Int8Vector extends MixinArrowTraits(\n-    Int8VectorBase,\n-    class Int8Vector extends fieldMixin(Int8VectorBase) {} as any,\n-    class Int8Vector extends nullableMixin(Int8VectorBase) {} as any,\n-    class Int8Vector extends nullableMixin(fieldMixin(Int8VectorBase)) {} as any\n-) {}\n-\n-export class Int16Vector extends MixinArrowTraits(\n-    Int16VectorBase,\n-    class Int16Vector extends fieldMixin(Int16VectorBase) {} as any,\n-    class Int16Vector extends nullableMixin(Int16VectorBase) {} as any,\n-    class Int16Vector extends nullableMixin(fieldMixin(Int16VectorBase)) {} as any\n-) {}\n-\n-export class Int32Vector extends MixinArrowTraits(\n-    Int32VectorBase,\n-    class Int32Vector extends fieldMixin(Int32VectorBase) {} as any,\n-    class Int32Vector extends nullableMixin(Int32VectorBase) {} as any,\n-    class Int32Vector extends nullableMixin(fieldMixin(Int32VectorBase)) {} as any\n-) {}\n-\n-export class Int64Vector extends MixinArrowTraits(\n-    Int64VectorBase,\n-    class Int64Vector extends fieldMixin(Int64VectorBase) {} as any,\n-    class Int64Vector extends nullableMixin(Int64VectorBase) {} as any,\n-    class Int64Vector extends nullableMixin(fieldMixin(Int64VectorBase)) {} as any\n-) {}\n-\n-export class Uint8Vector extends MixinArrowTraits(\n-    Uint8VectorBase,\n-    class Uint8Vector extends fieldMixin(Uint8VectorBase) {} as any,\n-    class Uint8Vector extends nullableMixin(Uint8VectorBase) {} as any,\n-    class Uint8Vector extends nullableMixin(fieldMixin(Uint8VectorBase)) {} as any\n-) {}\n-\n-export class Uint16Vector extends MixinArrowTraits(\n-    Uint16VectorBase,\n-    class Uint16Vector extends fieldMixin(Uint16VectorBase) {} as any,\n-    class Uint16Vector extends nullableMixin(Uint16VectorBase) {} as any,\n-    class Uint16Vector extends nullableMixin(fieldMixin(Uint16VectorBase)) {} as any\n-) {}\n-\n-export class Uint32Vector extends MixinArrowTraits(\n-    Uint32VectorBase,\n-    class Uint32Vector extends fieldMixin(Uint32VectorBase) {} as any,\n-    class Uint32Vector extends nullableMixin(Uint32VectorBase) {} as any,\n-    class Uint32Vector extends nullableMixin(fieldMixin(Uint32VectorBase)) {} as any\n-) {}\n-\n-export class Uint64Vector extends MixinArrowTraits(\n-    Uint64VectorBase,\n-    class Uint64Vector extends fieldMixin(Uint64VectorBase) {} as any,\n-    class Uint64Vector extends nullableMixin(Uint64VectorBase) {} as any,\n-    class Uint64Vector extends nullableMixin(fieldMixin(Uint64VectorBase)) {} as any\n-) {}\n-\n-export class Date32Vector extends MixinArrowTraits(\n-    Date32VectorBase,\n-    class Date32Vector extends fieldMixin(Date32VectorBase) {} as any,\n-    class Date32Vector extends nullableMixin(Date32VectorBase) {} as any,\n-    class Date32Vector extends nullableMixin(fieldMixin(Date32VectorBase)) {} as any\n-) {}\n-\n-export class Date64Vector extends MixinArrowTraits(\n-    Date64VectorBase,\n-    class Date64Vector extends fieldMixin(Date64VectorBase) {} as any,\n-    class Date64Vector extends nullableMixin(Date64VectorBase) {} as any,\n-    class Date64Vector extends nullableMixin(fieldMixin(Date64VectorBase)) {} as any\n-) {}\n-\n-export class Time32Vector extends MixinArrowTraits(\n-    Time32VectorBase,\n-    class Time32Vector extends fieldMixin(Time32VectorBase) {} as any,\n-    class Time32Vector extends nullableMixin(Time32VectorBase) {} as any,\n-    class Time32Vector extends nullableMixin(fieldMixin(Time32VectorBase)) {} as any\n-) {}\n-\n-export class Time64Vector extends MixinArrowTraits(\n-    Time64VectorBase,\n-    class Time64Vector extends fieldMixin(Time64VectorBase) {} as any,\n-    class Time64Vector extends nullableMixin(Time64VectorBase) {} as any,\n-    class Time64Vector extends nullableMixin(fieldMixin(Time64VectorBase)) {} as any\n-) {}\n-\n-export class Float16Vector extends MixinArrowTraits(\n-    Float16VectorBase,\n-    class Float16Vector extends fieldMixin(Float16VectorBase) {} as any,\n-    class Float16Vector extends nullableMixin(Float16VectorBase) {} as any,\n-    class Float16Vector extends nullableMixin(fieldMixin(Float16VectorBase)) {} as any\n-) {}\n-\n-export class Float32Vector extends MixinArrowTraits(\n-    Float32VectorBase,\n-    class Float32Vector extends fieldMixin(Float32VectorBase) {} as any,\n-    class Float32Vector extends nullableMixin(Float32VectorBase) {} as any,\n-    class Float32Vector extends nullableMixin(fieldMixin(Float32VectorBase)) {} as any\n-) {}\n-\n-export class Float64Vector extends MixinArrowTraits(\n-    Float64VectorBase,\n-    class Float64Vector extends fieldMixin(Float64VectorBase) {} as any,\n-    class Float64Vector extends nullableMixin(Float64VectorBase) {} as any,\n-    class Float64Vector extends nullableMixin(fieldMixin(Float64VectorBase)) {} as any\n-) {}\n-\n-export class StructVector extends MixinArrowTraits(\n-    StructVectorBase,\n-    class StructVector extends fieldMixin(StructVectorBase) {} as any,\n-    class StructVector extends nullableMixin(StructVectorBase) {} as any,\n-    class StructVector extends nullableMixin(fieldMixin(StructVectorBase)) {} as any\n-) {}\n-\n-export class DecimalVector extends MixinArrowTraits(\n-    DecimalVectorBase,\n-    class DecimalVector extends fieldMixin(DecimalVectorBase) {} as any,\n-    class DecimalVector extends nullableMixin(DecimalVectorBase) {} as any,\n-    class DecimalVector extends nullableMixin(fieldMixin(DecimalVectorBase)) {} as any\n-) {}\n-\n-export class TimestampVector extends MixinArrowTraits(\n-    TimestampVectorBase,\n-    class TimestampVector extends fieldMixin(TimestampVectorBase) {} as any,\n-    class TimestampVector extends nullableMixin(TimestampVectorBase) {} as any,\n-    class TimestampVector extends nullableMixin(fieldMixin(TimestampVectorBase)) {} as any\n-) {}\n-\n-export class DictionaryVector extends MixinArrowTraits(\n-    DictionaryVectorBase,\n-    class DictionaryVector extends fieldMixin(DictionaryVectorBase) {} as any,\n-    class DictionaryVector extends nullableMixin(DictionaryVectorBase) {} as any,\n-    class DictionaryVector extends nullableMixin(fieldMixin(DictionaryVectorBase)) {} as any\n-) {}\n-\n-export class FixedSizeListVector extends MixinArrowTraits(\n-    FixedSizeListVectorBase,\n-    class FixedSizeListVector extends fieldMixin(FixedSizeListVectorBase) {} as any,\n-    class FixedSizeListVector extends nullableMixin(FixedSizeListVectorBase) {} as any,\n-    class FixedSizeListVector extends nullableMixin(fieldMixin(FixedSizeListVectorBase)) {} as any\n-) {}\n+export const MixinListVector = MixinArrowTraits(vectors.ListVector as any, fieldVectors.ListVector as any, nullableVectors.ListVector as any, nullableFieldVectors.ListVector as any);\n+export class ListVector extends MixinListVector {}\n+export const MixinBinaryVector = MixinArrowTraits(vectors.BinaryVector as any, fieldVectors.BinaryVector as any, nullableVectors.BinaryVector as any, nullableFieldVectors.BinaryVector as any);\n+export class BinaryVector extends MixinBinaryVector {}\n+export const MixinUtf8Vector = MixinArrowTraits(vectors.Utf8Vector as any, fieldVectors.Utf8Vector as any, nullableVectors.Utf8Vector as any, nullableFieldVectors.Utf8Vector as any);\n+export class Utf8Vector extends MixinUtf8Vector {}\n+export const MixinBoolVector = MixinArrowTraits(vectors.BoolVector as any, fieldVectors.BoolVector as any, nullableVectors.BoolVector as any, nullableFieldVectors.BoolVector as any);\n+export class BoolVector extends MixinBoolVector {}\n+export const MixinInt8Vector = MixinArrowTraits(vectors.Int8Vector as any, fieldVectors.Int8Vector as any, nullableVectors.Int8Vector as any, nullableFieldVectors.Int8Vector as any);\n+export class Int8Vector extends MixinInt8Vector {}\n+export const MixinInt16Vector = MixinArrowTraits(vectors.Int16Vector as any, fieldVectors.Int16Vector as any, nullableVectors.Int16Vector as any, nullableFieldVectors.Int16Vector as any);\n+export class Int16Vector extends MixinInt16Vector {}\n+export const MixinInt32Vector = MixinArrowTraits(vectors.Int32Vector as any, fieldVectors.Int32Vector as any, nullableVectors.Int32Vector as any, nullableFieldVectors.Int32Vector as any);\n+export class Int32Vector extends MixinInt32Vector {}\n+export const MixinInt64Vector = MixinArrowTraits(vectors.Int64Vector as any, fieldVectors.Int64Vector as any, nullableVectors.Int64Vector as any, nullableFieldVectors.Int64Vector as any);\n+export class Int64Vector extends MixinInt64Vector {}\n+export const MixinUint8Vector = MixinArrowTraits(vectors.Uint8Vector as any, fieldVectors.Uint8Vector as any, nullableVectors.Uint8Vector as any, nullableFieldVectors.Uint8Vector as any);\n+export class Uint8Vector extends MixinUint8Vector {}\n+export const MixinUint16Vector = MixinArrowTraits(vectors.Uint16Vector as any, fieldVectors.Uint16Vector as any, nullableVectors.Uint16Vector as any, nullableFieldVectors.Uint16Vector as any);\n+export class Uint16Vector extends MixinUint16Vector {}\n+export const MixinUint32Vector = MixinArrowTraits(vectors.Uint32Vector as any, fieldVectors.Uint32Vector as any, nullableVectors.Uint32Vector as any, nullableFieldVectors.Uint32Vector as any);\n+export class Uint32Vector extends MixinUint32Vector {}\n+export const MixinUint64Vector = MixinArrowTraits(vectors.Uint64Vector as any, fieldVectors.Uint64Vector as any, nullableVectors.Uint64Vector as any, nullableFieldVectors.Uint64Vector as any);\n+export class Uint64Vector extends MixinUint64Vector {}\n+export const MixinDate32Vector = MixinArrowTraits(vectors.Date32Vector as any, fieldVectors.Date32Vector as any, nullableVectors.Date32Vector as any, nullableFieldVectors.Date32Vector as any);\n+export class Date32Vector extends MixinDate32Vector {}\n+export const MixinDate64Vector = MixinArrowTraits(vectors.Date64Vector as any, fieldVectors.Date64Vector as any, nullableVectors.Date64Vector as any, nullableFieldVectors.Date64Vector as any);\n+export class Date64Vector extends MixinDate64Vector {}\n+export const MixinTime32Vector = MixinArrowTraits(vectors.Time32Vector as any, fieldVectors.Time32Vector as any, nullableVectors.Time32Vector as any, nullableFieldVectors.Time32Vector as any);\n+export class Time32Vector extends MixinTime32Vector {}\n+export const MixinTime64Vector = MixinArrowTraits(vectors.Time64Vector as any, fieldVectors.Time64Vector as any, nullableVectors.Time64Vector as any, nullableFieldVectors.Time64Vector as any);\n+export class Time64Vector extends MixinTime64Vector {}\n+export const MixinFloat16Vector = MixinArrowTraits(vectors.Float16Vector as any, fieldVectors.Float16Vector as any, nullableVectors.Float16Vector as any, nullableFieldVectors.Float16Vector as any);\n+export class Float16Vector extends MixinFloat16Vector {}\n+export const MixinFloat32Vector = MixinArrowTraits(vectors.Float32Vector as any, fieldVectors.Float32Vector as any, nullableVectors.Float32Vector as any, nullableFieldVectors.Float32Vector as any);\n+export class Float32Vector extends MixinFloat32Vector {}\n+export const MixinFloat64Vector = MixinArrowTraits(vectors.Float64Vector as any, fieldVectors.Float64Vector as any, nullableVectors.Float64Vector as any, nullableFieldVectors.Float64Vector as any);\n+export class Float64Vector extends MixinFloat64Vector {}\n+export const MixinStructVector = MixinArrowTraits(vectors.StructVector as any, fieldVectors.StructVector as any, nullableVectors.StructVector as any, nullableFieldVectors.StructVector as any);\n+export class StructVector extends MixinStructVector {}\n+export const MixinDecimalVector = MixinArrowTraits(vectors.DecimalVector as any, fieldVectors.DecimalVector as any, nullableVectors.DecimalVector as any, nullableFieldVectors.DecimalVector as any);\n+export class DecimalVector extends MixinDecimalVector {}\n+export const MixinTimestampVector = MixinArrowTraits(vectors.TimestampVector as any, fieldVectors.TimestampVector as any, nullableVectors.TimestampVector as any, nullableFieldVectors.TimestampVector as any);\n+export class TimestampVector extends MixinTimestampVector {}\n+export const MixinDictionaryVector = MixinArrowTraits(vectors.DictionaryVector as any, fieldVectors.DictionaryVector as any, nullableVectors.DictionaryVector as any, nullableFieldVectors.DictionaryVector as any);\n+export class DictionaryVector extends MixinDictionaryVector {}\n+export const MixinFixedSizeListVector = MixinArrowTraits(vectors.FixedSizeListVector as any, fieldVectors.FixedSizeListVector as any, nullableVectors.FixedSizeListVector as any, nullableFieldVectors.FixedSizeListVector as any);\n+export class FixedSizeListVector extends MixinFixedSizeListVector {}\ndiff --git a/js/src/vector/table.ts b/js/src/vector/table.ts\nindex b15092a72..ca2b66a22 100644\n--- a/js/src/vector/table.ts\n+++ b/js/src/vector/table.ts\n@@ -17,27 +17,29 @@\n \n import { Vector } from './vector';\n import { StructVector, StructRow } from './struct';\n-import { readVectors, readVectorsAsync } from '../reader/arrow';\n+import { read, readAsync } from '../reader/arrow';\n+\n+function concatVectors(tableVectors: Vector<any>[], batchVectors: Vector<any>[]) {\n+    return tableVectors.length === 0 ? batchVectors : batchVectors.map((vec, i, _vs, col = tableVectors[i]) =>\n+        vec && col && col.concat(vec) || col || vec\n+    ) as Vector<any>[];\n+}\n \n export class Table<T> extends StructVector<T> {\n-    static from(buffers?: Iterable<Uint8Array | Buffer | string>) {\n+    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n         let columns: Vector<any>[] = [];\n-        if (buffers) {\n-            for (let vectors of readVectors(buffers)) {\n-                columns = columns.length === 0 ? vectors : vectors.map((vec, i, _vs, col = columns[i]) =>\n-                    vec && col && col.concat(vec) || col || vec\n-                ) as Vector<any>[];\n+        if (sources) {\n+            for (let vectors of read(sources)) {\n+                columns = concatVectors(columns, vectors);\n             }\n         }\n         return new Table({ columns });\n     }\n-    static async fromAsync(buffers?: AsyncIterable<Uint8Array | Buffer | string>) {\n+    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n         let columns: Vector<any>[] = [];\n-        if (buffers) {\n-            for await (let vectors of readVectorsAsync(buffers)) {\n-                columns = columns.length === 0 ? vectors : vectors.map((vec, i, _vs, col = columns[i]) =>\n-                    vec && col && col.concat(vec) || col || vec\n-                ) as Vector<any>[];\n+        if (sources) {\n+            for await (let vectors of readAsync(sources)) {\n+                columns = columns = concatVectors(columns, vectors);\n             }\n         }\n         return new Table({ columns });\ndiff --git a/js/src/vector/traits/field.ts b/js/src/vector/traits/field.ts\nnew file mode 100644\nindex 000000000..9f68f507c\n--- /dev/null\n+++ b/js/src/vector/traits/field.ts\n@@ -0,0 +1,71 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector } from '../vector';\n+import * as vectors from './vectors';\n+import { fieldMixin } from './mixins';\n+import { Field, FieldNode } from '../../format/arrow';\n+export { Field, FieldNode, Vector };\n+\n+export const FieldListVector = fieldMixin(vectors.ListVector);\n+export class ListVector extends FieldListVector {}\n+export const FieldBinaryVector = fieldMixin(vectors.BinaryVector);\n+export class BinaryVector extends FieldBinaryVector {}\n+export const FieldUtf8Vector = fieldMixin(vectors.Utf8Vector);\n+export class Utf8Vector extends FieldUtf8Vector {}\n+export const FieldBoolVector = fieldMixin(vectors.BoolVector);\n+export class BoolVector extends FieldBoolVector {}\n+export const FieldInt8Vector = fieldMixin(vectors.Int8Vector);\n+export class Int8Vector extends FieldInt8Vector {}\n+export const FieldInt16Vector = fieldMixin(vectors.Int16Vector);\n+export class Int16Vector extends FieldInt16Vector {}\n+export const FieldInt32Vector = fieldMixin(vectors.Int32Vector);\n+export class Int32Vector extends FieldInt32Vector {}\n+export const FieldInt64Vector = fieldMixin(vectors.Int64Vector);\n+export class Int64Vector extends FieldInt64Vector {}\n+export const FieldUint8Vector = fieldMixin(vectors.Uint8Vector);\n+export class Uint8Vector extends FieldUint8Vector {}\n+export const FieldUint16Vector = fieldMixin(vectors.Uint16Vector);\n+export class Uint16Vector extends FieldUint16Vector {}\n+export const FieldUint32Vector = fieldMixin(vectors.Uint32Vector);\n+export class Uint32Vector extends FieldUint32Vector {}\n+export const FieldUint64Vector = fieldMixin(vectors.Uint64Vector);\n+export class Uint64Vector extends FieldUint64Vector {}\n+export const FieldDate32Vector = fieldMixin(vectors.Date32Vector);\n+export class Date32Vector extends FieldDate32Vector {}\n+export const FieldDate64Vector = fieldMixin(vectors.Date64Vector);\n+export class Date64Vector extends FieldDate64Vector {}\n+export const FieldTime32Vector = fieldMixin(vectors.Time32Vector);\n+export class Time32Vector extends FieldTime32Vector {}\n+export const FieldTime64Vector = fieldMixin(vectors.Time64Vector);\n+export class Time64Vector extends FieldTime64Vector {}\n+export const FieldFloat16Vector = fieldMixin(vectors.Float16Vector);\n+export class Float16Vector extends FieldFloat16Vector {}\n+export const FieldFloat32Vector = fieldMixin(vectors.Float32Vector);\n+export class Float32Vector extends FieldFloat32Vector {}\n+export const FieldFloat64Vector = fieldMixin(vectors.Float64Vector);\n+export class Float64Vector extends FieldFloat64Vector {}\n+export const FieldStructVector = fieldMixin(vectors.StructVector);\n+export class StructVector extends FieldStructVector {}\n+export const FieldDecimalVector = fieldMixin(vectors.DecimalVector);\n+export class DecimalVector extends FieldDecimalVector {}\n+export const FieldTimestampVector = fieldMixin(vectors.TimestampVector);\n+export class TimestampVector extends FieldTimestampVector {}\n+export const FieldDictionaryVector = fieldMixin(vectors.DictionaryVector);\n+export class DictionaryVector extends FieldDictionaryVector {}\n+export const FieldFixedSizeListVector = fieldMixin(vectors.FixedSizeListVector);\n+export class FixedSizeListVector extends FieldFixedSizeListVector {}\n\\ No newline at end of file\ndiff --git a/js/src/vector/traits.ts b/js/src/vector/traits/mixins.ts\nsimilarity index 67%\nrename from js/src/vector/traits.ts\nrename to js/src/vector/traits/mixins.ts\nindex ca933f160..011ac3135 100644\n--- a/js/src/vector/traits.ts\n+++ b/js/src/vector/traits/mixins.ts\n@@ -15,13 +15,27 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Vector } from './vector';\n-import { BoolVector } from './numeric';\n-import * as Schema_ from '../format/Schema';\n-import * as Message_ from '../format/Message';\n+import { Vector } from '../vector';\n+import { BoolVector } from '../numeric';\n+import * as Schema_ from '../../format/fb/Schema';\n+import { Field, FieldNode } from '../../format/arrow';\n import Type = Schema_.org.apache.arrow.flatbuf.Type;\n-import Field = Schema_.org.apache.arrow.flatbuf.Field;\n-import FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\n+\n+function isField(x: any): x is Field {\n+    return x instanceof Field;\n+}\n+\n+function isFieldNode(x: any): x is FieldNode {\n+    return x instanceof FieldNode;\n+}\n+\n+export function isFieldArgv(x: any): x is { field: Field, fieldNode: FieldNode } {\n+    return x && isField(x.field) && isFieldNode(x.fieldNode);\n+}\n+\n+export function isNullableArgv(x: any): x is { validity: Uint8Array } {\n+    return x && x.validity && ArrayBuffer.isView(x.validity) && x.validity instanceof Uint8Array;\n+}\n \n type Ctor<TArgv> = new (argv: TArgv) => Vector;\n \n@@ -51,19 +65,11 @@ export const fieldMixin = <T extends Vector, TArgv>(superclass: new (argv: TArgv\n             const { field, fieldNode } = argv;\n             this.field = field;\n             this.fieldNode = fieldNode;\n-            this.nullable = field.nullable();\n-            this.type = Type[field.typeType()];\n-            this.length = fieldNode.length().low | 0;\n-            this.nullCount = fieldNode.nullCount().low;\n-        }\n-        get name() { return this.field.name()!; }\n-        get metadata()  {\n-            const { field } = this, data = new Map<string, string>();\n-            for (let entry, key, i = -1, n = field && field.customMetadataLength() | 0; ++i < n;) {\n-                if ((entry = field.customMetadata(i)) && (key = entry.key()) != null) {\n-                    data.set(key, entry.value()!);\n-                }\n-            }\n-            return data;\n+            this.nullable = field.nullable;\n+            this.type = Type[field.typeType];\n+            this.length = fieldNode.length.low | 0;\n+            this.nullCount = fieldNode.nullCount.low;\n         }\n+        get name() { return this.field.name!; }\n+        get metadata()  { return this.field.metadata!; }\n     };\ndiff --git a/js/src/vector/traits/nullable.ts b/js/src/vector/traits/nullable.ts\nnew file mode 100644\nindex 000000000..1393e5fd1\n--- /dev/null\n+++ b/js/src/vector/traits/nullable.ts\n@@ -0,0 +1,70 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector } from '../vector';\n+import * as vectors from './vectors';\n+import { nullableMixin } from './mixins';\n+\n+export { Vector };\n+export const NullableListVector = nullableMixin(vectors.ListVector);\n+export class ListVector extends NullableListVector {}\n+export const NullableBinaryVector = nullableMixin(vectors.BinaryVector);\n+export class BinaryVector extends NullableBinaryVector {}\n+export const NullableUtf8Vector = nullableMixin(vectors.Utf8Vector);\n+export class Utf8Vector extends NullableUtf8Vector {}\n+export const NullableBoolVector = nullableMixin(vectors.BoolVector);\n+export class BoolVector extends NullableBoolVector {}\n+export const NullableInt8Vector = nullableMixin(vectors.Int8Vector);\n+export class Int8Vector extends NullableInt8Vector {}\n+export const NullableInt16Vector = nullableMixin(vectors.Int16Vector);\n+export class Int16Vector extends NullableInt16Vector {}\n+export const NullableInt32Vector = nullableMixin(vectors.Int32Vector);\n+export class Int32Vector extends NullableInt32Vector {}\n+export const NullableInt64Vector = nullableMixin(vectors.Int64Vector);\n+export class Int64Vector extends NullableInt64Vector {}\n+export const NullableUint8Vector = nullableMixin(vectors.Uint8Vector);\n+export class Uint8Vector extends NullableUint8Vector {}\n+export const NullableUint16Vector = nullableMixin(vectors.Uint16Vector);\n+export class Uint16Vector extends NullableUint16Vector {}\n+export const NullableUint32Vector = nullableMixin(vectors.Uint32Vector);\n+export class Uint32Vector extends NullableUint32Vector {}\n+export const NullableUint64Vector = nullableMixin(vectors.Uint64Vector);\n+export class Uint64Vector extends NullableUint64Vector {}\n+export const NullableDate32Vector = nullableMixin(vectors.Date32Vector);\n+export class Date32Vector extends NullableDate32Vector {}\n+export const NullableDate64Vector = nullableMixin(vectors.Date64Vector);\n+export class Date64Vector extends NullableDate64Vector {}\n+export const NullableTime32Vector = nullableMixin(vectors.Time32Vector);\n+export class Time32Vector extends NullableTime32Vector {}\n+export const NullableTime64Vector = nullableMixin(vectors.Time64Vector);\n+export class Time64Vector extends NullableTime64Vector {}\n+export const NullableFloat16Vector = nullableMixin(vectors.Float16Vector);\n+export class Float16Vector extends NullableFloat16Vector {}\n+export const NullableFloat32Vector = nullableMixin(vectors.Float32Vector);\n+export class Float32Vector extends NullableFloat32Vector {}\n+export const NullableFloat64Vector = nullableMixin(vectors.Float64Vector);\n+export class Float64Vector extends NullableFloat64Vector {}\n+export const NullableStructVector = nullableMixin(vectors.StructVector);\n+export class StructVector extends NullableStructVector {}\n+export const NullableDecimalVector = nullableMixin(vectors.DecimalVector);\n+export class DecimalVector extends NullableDecimalVector {}\n+export const NullableTimestampVector = nullableMixin(vectors.TimestampVector);\n+export class TimestampVector extends NullableTimestampVector {}\n+export const NullableDictionaryVector = nullableMixin(vectors.DictionaryVector);\n+export class DictionaryVector extends NullableDictionaryVector {}\n+export const NullableFixedSizeListVector = nullableMixin(vectors.FixedSizeListVector);\n+export class FixedSizeListVector extends NullableFixedSizeListVector {}\n\\ No newline at end of file\ndiff --git a/js/src/vector/traits/nullablefield.ts b/js/src/vector/traits/nullablefield.ts\nnew file mode 100644\nindex 000000000..8cbee62e4\n--- /dev/null\n+++ b/js/src/vector/traits/nullablefield.ts\n@@ -0,0 +1,71 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector } from '../vector';\n+import * as vectors from './vectors';\n+import { nullableMixin, fieldMixin } from './mixins';\n+import { Field, FieldNode } from '../../format/arrow';\n+export { Vector, Field, FieldNode };\n+\n+export const NullableFieldListVector = nullableMixin(fieldMixin(vectors.ListVector));\n+export class ListVector extends NullableFieldListVector {}\n+export const NullableFieldBinaryVector = nullableMixin(fieldMixin(vectors.BinaryVector));\n+export class BinaryVector extends NullableFieldBinaryVector {}\n+export const NullableFieldUtf8Vector = nullableMixin(fieldMixin(vectors.Utf8Vector));\n+export class Utf8Vector extends NullableFieldUtf8Vector {}\n+export const NullableFieldBoolVector = nullableMixin(fieldMixin(vectors.BoolVector));\n+export class BoolVector extends NullableFieldBoolVector {}\n+export const NullableFieldInt8Vector = nullableMixin(fieldMixin(vectors.Int8Vector));\n+export class Int8Vector extends NullableFieldInt8Vector {}\n+export const NullableFieldInt16Vector = nullableMixin(fieldMixin(vectors.Int16Vector));\n+export class Int16Vector extends NullableFieldInt16Vector {}\n+export const NullableFieldInt32Vector = nullableMixin(fieldMixin(vectors.Int32Vector));\n+export class Int32Vector extends NullableFieldInt32Vector {}\n+export const NullableFieldInt64Vector = nullableMixin(fieldMixin(vectors.Int64Vector));\n+export class Int64Vector extends NullableFieldInt64Vector {}\n+export const NullableFieldUint8Vector = nullableMixin(fieldMixin(vectors.Uint8Vector));\n+export class Uint8Vector extends NullableFieldUint8Vector {}\n+export const NullableFieldUint16Vector = nullableMixin(fieldMixin(vectors.Uint16Vector));\n+export class Uint16Vector extends NullableFieldUint16Vector {}\n+export const NullableFieldUint32Vector = nullableMixin(fieldMixin(vectors.Uint32Vector));\n+export class Uint32Vector extends NullableFieldUint32Vector {}\n+export const NullableFieldUint64Vector = nullableMixin(fieldMixin(vectors.Uint64Vector));\n+export class Uint64Vector extends NullableFieldUint64Vector {}\n+export const NullableFieldDate32Vector = nullableMixin(fieldMixin(vectors.Date32Vector));\n+export class Date32Vector extends NullableFieldDate32Vector {}\n+export const NullableFieldDate64Vector = nullableMixin(fieldMixin(vectors.Date64Vector));\n+export class Date64Vector extends NullableFieldDate64Vector {}\n+export const NullableFieldTime32Vector = nullableMixin(fieldMixin(vectors.Time32Vector));\n+export class Time32Vector extends NullableFieldTime32Vector {}\n+export const NullableFieldTime64Vector = nullableMixin(fieldMixin(vectors.Time64Vector));\n+export class Time64Vector extends NullableFieldTime64Vector {}\n+export const NullableFieldFloat16Vector = nullableMixin(fieldMixin(vectors.Float16Vector));\n+export class Float16Vector extends NullableFieldFloat16Vector {}\n+export const NullableFieldFloat32Vector = nullableMixin(fieldMixin(vectors.Float32Vector));\n+export class Float32Vector extends NullableFieldFloat32Vector {}\n+export const NullableFieldFloat64Vector = nullableMixin(fieldMixin(vectors.Float64Vector));\n+export class Float64Vector extends NullableFieldFloat64Vector {}\n+export const NullableFieldStructVector = nullableMixin(fieldMixin(vectors.StructVector));\n+export class StructVector extends NullableFieldStructVector {}\n+export const NullableFieldDecimalVector = nullableMixin(fieldMixin(vectors.DecimalVector));\n+export class DecimalVector extends NullableFieldDecimalVector {}\n+export const NullableFieldTimestampVector = nullableMixin(fieldMixin(vectors.TimestampVector));\n+export class TimestampVector extends NullableFieldTimestampVector {}\n+export const NullableFieldDictionaryVector = nullableMixin(fieldMixin(vectors.DictionaryVector));\n+export class DictionaryVector extends NullableFieldDictionaryVector {}\n+export const NullableFieldFixedSizeListVector = nullableMixin(fieldMixin(vectors.FixedSizeListVector));\n+export class FixedSizeListVector extends NullableFieldFixedSizeListVector {}\n\\ No newline at end of file\ndiff --git a/js/src/vector/traits/vectors.ts b/js/src/vector/traits/vectors.ts\nnew file mode 100644\nindex 000000000..f9e05fd4e\n--- /dev/null\n+++ b/js/src/vector/traits/vectors.ts\n@@ -0,0 +1,75 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import { Vector } from '../vector';\n+import { Utf8Vector } from '../utf8';\n+import { StructVector } from '../struct';\n+import { DictionaryVector } from '../dictionary';\n+import {\n+    ListVector,\n+    BinaryVector,\n+    FixedSizeListVector\n+} from '../list';\n+\n+import {\n+    BoolVector,\n+    Int8Vector,\n+    Int16Vector,\n+    Int32Vector,\n+    Int64Vector,\n+    Uint8Vector,\n+    Uint16Vector,\n+    Uint32Vector,\n+    Uint64Vector,\n+    Float16Vector,\n+    Float32Vector,\n+    Float64Vector,\n+    Date32Vector,\n+    Date64Vector,\n+    Time32Vector,\n+    Time64Vector,\n+    DecimalVector,\n+    TimestampVector,\n+} from '../numeric';\n+\n+export {\n+    Vector,\n+    BoolVector,\n+    ListVector,\n+    Utf8Vector,\n+    Int8Vector,\n+    Int16Vector,\n+    Int32Vector,\n+    Int64Vector,\n+    Uint8Vector,\n+    Uint16Vector,\n+    Uint32Vector,\n+    Uint64Vector,\n+    Date32Vector,\n+    Date64Vector,\n+    Time32Vector,\n+    Time64Vector,\n+    BinaryVector,\n+    StructVector,\n+    Float16Vector,\n+    Float32Vector,\n+    Float64Vector,\n+    DecimalVector,\n+    TimestampVector,\n+    DictionaryVector,\n+    FixedSizeListVector,\n+};\ndiff --git a/js/src/vector/vector.ts b/js/src/vector/vector.ts\nindex 8047c8992..9565478ad 100644\n--- a/js/src/vector/vector.ts\n+++ b/js/src/vector/vector.ts\n@@ -15,7 +15,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import * as Schema_ from '../format/Schema';\n+import * as Schema_ from '../format/fb/Schema';\n import Type = Schema_.org.apache.arrow.flatbuf.Type;\n \n export interface Vector<T = any> extends Iterable<T | null> {\n@@ -29,6 +29,7 @@ export interface Vector<T = any> extends Iterable<T | null> {\n     concat(...vectors: Vector<T>[]): Vector<T>;\n     slice<R = T[]>(start?: number, end?: number): R;\n }\n+\n export class Vector<T = any> implements Vector<T> {\n     slice<R = T[]>(start?: number, end?: number): R {\n         let { length } = this, from = start! | 0;\ndiff --git a/js/test/Arrow.ts b/js/test/Arrow.ts\nindex 66a5c21ac..87641e52b 100644\n--- a/js/test/Arrow.ts\n+++ b/js/test/Arrow.ts\n@@ -39,6 +39,7 @@ else if (!~targets.indexOf(target)) throwInvalidImportError('target', target, ta\n else if (!~formats.indexOf(format)) throwInvalidImportError('module', format, formats);\n else modulePath = path.join(target, format);\n \n+export { Int64, Uint64, Int128 } from '../src/Arrow';\n export { List } from '../src/Arrow';\n export { TypedArray } from '../src/Arrow';\n export { TypedArrayConstructor } from '../src/Arrow';\n@@ -46,4 +47,4 @@ export { NumericVectorConstructor } from '../src/Arrow';\n \n import * as Arrow_ from '../src/Arrow';\n export let Arrow: typeof Arrow_ = require(path.resolve(`./targets`, modulePath, `Arrow`));\n-export default Arrow;\n\\ No newline at end of file\n+export default Arrow;\ndiff --git a/js/test/test-config.ts b/js/test/integration/test-config.ts\nsimilarity index 100%\nrename from js/test/test-config.ts\nrename to js/test/integration/test-config.ts\ndiff --git a/js/test/integration-tests.ts b/js/test/integration/validate-tests.ts\nsimilarity index 58%\nrename from js/test/integration-tests.ts\nrename to js/test/integration/validate-tests.ts\nindex 4147e862b..c8778ba2b 100644\n--- a/js/test/integration-tests.ts\n+++ b/js/test/integration/validate-tests.ts\n@@ -15,11 +15,31 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import Arrow from './Arrow';\n+import * as fs from 'fs';\n+import * as path from 'path';\n+\n+if (!process.env.JSON_PATH || !process.env.ARROW_PATH) {\n+    throw new Error('Integration tests need paths to both json and arrow files');\n+}\n+\n+const jsonPath = path.resolve(process.env.JSON_PATH + '');\n+const arrowPath = path.resolve(process.env.ARROW_PATH + '');\n+\n+if (!fs.existsSync(jsonPath) || !fs.existsSync(arrowPath)) {\n+    throw new Error('Integration tests need both json and arrow files to exist');\n+}\n+\n+/* tslint:disable */\n+const { parse } = require('json-bignum');\n+\n+const jsonData = parse(fs.readFileSync(jsonPath, 'utf8'));\n+const arrowBuffers: Uint8Array[] = [fs.readFileSync(arrowPath)];\n+\n+import Arrow from '../Arrow';\n import { zip } from 'ix/iterable/zip';\n-import { config, formats } from './test-config';\n+import { toArray } from 'ix/iterable/toArray';\n \n-const { Table, readVectors } = Arrow;\n+const { Table, read } = Arrow;\n \n expect.extend({\n     toEqualVector(v1: any, v2: any) {\n@@ -65,7 +85,7 @@ expect.extend({\n         return {\n             pass: allFailures.every(({ failures }) => failures.length === 0),\n             message: () => [\n-                `${v1.name}: (${format('cpp', 'java', ' !== ')})\\n`,\n+                `${v1.name}: (${format('json', 'arrow', ' !== ')})\\n`,\n                 ...allFailures.map(({ failures, title }) =>\n                     !failures.length ? `` : [`${title}:`, ...failures].join(`\\n`))\n             ].join('\\n')\n@@ -74,41 +94,35 @@ expect.extend({\n });\n \n describe(`Integration`, () => {\n-    for (const format of formats) {\n-        describe(format, () => {\n-            for (const [cppArrow, javaArrow] of zip(config.cpp[format], config.java[format])) {\n-                describe(`${cppArrow.name}`, () => {\n-                    testReaderIntegration(cppArrow.buffers, javaArrow.buffers);\n-                    testTableFromBuffersIntegration(cppArrow.buffers, javaArrow.buffers);\n-                });\n-            }\n-        });\n-    }\n+    testReaderIntegration();\n+    testTableFromBuffersIntegration();\n });\n \n-function testReaderIntegration(cppBuffers: Uint8Array[], javaBuffers: Uint8Array[]) {\n-    test(`cpp and java vectors report the same values`, () => {\n+function testReaderIntegration() {\n+    test(`json and arrow buffers report the same values`, () => {\n         expect.hasAssertions();\n-        for (const [cppVectors, javaVectors] of zip(readVectors(cppBuffers), readVectors(javaBuffers))) {\n-            expect(cppVectors.length).toEqual(javaVectors.length);\n-            for (let i = -1, n = cppVectors.length; ++i < n;) {\n-                (expect(cppVectors[i]) as any).toEqualVector(javaVectors[i]);\n+        const jsonVectors = toArray(read(jsonData));\n+        const binaryVectors = toArray(read(arrowBuffers));\n+        for (const [jVectors, bVectors] of zip(jsonVectors, binaryVectors)) {\n+            expect(jVectors.length).toEqual(bVectors.length);\n+            for (let i = -1, n = jVectors.length; ++i < n;) {\n+                (expect(jVectors[i]) as any).toEqualVector(bVectors[i]);\n             }\n         }\n     });\n }\n \n-function testTableFromBuffersIntegration(cppBuffers: Uint8Array[], javaBuffers: Uint8Array[]) {\n-    test(`cpp and java tables report the same values`, () => {\n+function testTableFromBuffersIntegration() {\n+    test(`json and arrow buffers report the same values`, () => {\n         expect.hasAssertions();\n-        const cppTable = Table.from(cppBuffers);\n-        const javaTable = Table.from(javaBuffers);\n-        const cppVectors = cppTable.columns;\n-        const javaVectors = javaTable.columns;\n-        expect(cppTable.length).toEqual(javaTable.length);\n-        expect(cppVectors.length).toEqual(javaVectors.length);\n-        for (let i = -1, n = cppVectors.length; ++i < n;) {\n-            (expect(cppVectors[i]) as any).toEqualVector(javaVectors[i]);\n+        const jsonTable = Table.from(jsonData);\n+        const binaryTable = Table.from(arrowBuffers);\n+        const jsonVectors = jsonTable.columns;\n+        const binaryVectors = binaryTable.columns;\n+        expect(jsonTable.length).toEqual(binaryTable.length);\n+        expect(jsonVectors.length).toEqual(binaryVectors.length);\n+        for (let i = -1, n = jsonVectors.length; ++i < n;) {\n+            (expect(jsonVectors[i]) as any).toEqualVector(binaryVectors[i]);\n         }\n     });\n }\ndiff --git a/js/test/reader-tests.ts b/js/test/reader-tests.ts\ndeleted file mode 100644\nindex 309cec9e2..000000000\n--- a/js/test/reader-tests.ts\n+++ /dev/null\n@@ -1,69 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-import Arrow from './Arrow';\n-const { readVectors } = Arrow;\n-import { config, sources, formats } from './test-config';\n-\n-describe(`readBuffers`, () => {\n-    for (const source of sources) {\n-        describe(source, () => {\n-            for (const format of formats) {\n-                describe(format, () => {\n-                    for (const { name, buffers } of config[source][format]) {\n-                        describe(name, () => {\n-                            testReaderIterator(buffers);\n-                            testVectorIterator(buffers);\n-                        });\n-                    }\n-                });\n-            }\n-        });\n-    }\n-});\n-\n-function testReaderIterator(buffers: Uint8Array[]) {\n-    test(`reads each batch as an Array of Vectors`, () => {\n-        expect.hasAssertions();\n-        for (const vectors of readVectors(buffers)) {\n-            for (const vector of vectors) {\n-                expect(vector.name).toMatchSnapshot();\n-                expect(vector.type).toMatchSnapshot();\n-                expect(vector.length).toMatchSnapshot();\n-                for (let i = -1, n = vector.length; ++i < n;) {\n-                    expect(vector.get(i)).toMatchSnapshot();\n-                }\n-            }\n-        }\n-    });\n-}\n-\n-function testVectorIterator(buffers: Uint8Array[]) {\n-    test(`vector iterators report the same values as get`, () => {\n-        expect.hasAssertions();\n-        for (const vectors of readVectors(buffers)) {\n-            for (const vector of vectors) {\n-                let i = -1, n = vector.length;\n-                for (let v of vector) {\n-                    expect(++i).toBeLessThan(n);\n-                    expect(v).toEqual(vector.get(i));\n-                }\n-                expect(++i).toEqual(n);\n-            }\n-        }\n-    });\n-}\ndiff --git a/js/test/table-tests.ts b/js/test/table-tests.ts\ndeleted file mode 100644\nindex 5ec04a72f..000000000\n--- a/js/test/table-tests.ts\n+++ /dev/null\n@@ -1,136 +0,0 @@\n-// Licensed to the Apache Software Foundation (ASF) under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  The ASF licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//   http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing,\n-// software distributed under the License is distributed on an\n-// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-// KIND, either express or implied.  See the License for the\n-// specific language governing permissions and limitations\n-// under the License.\n-\n-import Arrow from './Arrow';\n-const { Table, readVectors } = Arrow;\n-import { config, sources, formats } from './test-config';\n-\n-describe(`Table`, () => {\n-    for (const source of sources) {\n-        describe(source, () => {\n-            for (const format of formats) {\n-                describe(format, () => {\n-                    for (const { name, buffers } of config[source][format]) {\n-                        describe(name, () => {\n-                            testTableFromBuffers(buffers);\n-                            testColumnIterators(buffers);\n-                            testReaderVectorsAndTableColumns(buffers);\n-                            testTableRowIterator(buffers);\n-                            testTableRowIteratorCompact(buffers);\n-                            testEmptyTableToString();\n-                            testTableToStringPretty(buffers);\n-                            testTableToStringPrettyWithIndex(buffers);\n-                        });\n-                    }\n-                });\n-            }\n-        });\n-    }\n-});\n-\n-function testTableFromBuffers(buffers: Uint8Array[]) {\n-    test(`creates a Table from Arrow buffers`, () => {\n-        expect.hasAssertions();\n-        const table = Table.from(buffers);\n-        for (const vector of table.columns) {\n-            expect(vector.name).toMatchSnapshot();\n-            expect(vector.type).toMatchSnapshot();\n-            expect(vector.length).toMatchSnapshot();\n-            for (let i = -1, n = vector.length; ++i < n;) {\n-                expect(vector.get(i)).toMatchSnapshot();\n-            }\n-        }\n-    });\n-}\n-\n-function testColumnIterators(buffers: Uint8Array[]) {\n-    test(`vector iterators report the same values as get`, () => {\n-        expect.hasAssertions();\n-        const table = Table.from(buffers);\n-        for (const vector of table.columns) {\n-            let i = -1, n = vector.length;\n-            for (let v of vector) {\n-                expect(++i).toBeLessThan(n);\n-                expect(v).toEqual(vector.get(i));\n-            }\n-            expect(++i).toEqual(n);\n-        }\n-    });\n-}\n-\n-function testReaderVectorsAndTableColumns(buffers: Uint8Array[]) {\n-    test(`batch and Table Vectors report the same values`, () => {\n-        expect.hasAssertions();\n-        let rowsTotal = 0;\n-        let table = Table.from(buffers);\n-        for (let vectors of readVectors(buffers)) {\n-            let rowsNow = Math.max(...vectors.map((v) => v.length));\n-            for (let vi = -1, vn = vectors.length; ++vi < vn;) {\n-                let v1 = vectors[vi];\n-                let v2 = table.columns[vi];\n-                expect(v1.name).toEqual(v2.name);\n-                expect(v1.type).toEqual(v2.type);\n-                for (let i = -1, n = v1.length; ++i < n;) {\n-                    expect(v1.get(i)).toEqual(v2.get(i + rowsTotal));\n-                }\n-            }\n-            rowsTotal += rowsNow;\n-        }\n-    });\n-}\n-\n-function testTableRowIterator(buffers: Uint8Array[]) {\n-    test(`enumerates Table rows`, () => {\n-        expect.hasAssertions();\n-        const table = Table.from(buffers);\n-        expect(table.length).toMatchSnapshot();\n-        expect(table.columns.length).toMatchSnapshot();\n-        for (const row of table) {\n-            expect(row!.toObject()).toMatchSnapshot();\n-        }\n-    });\n-}\n-\n-function testTableRowIteratorCompact(buffers: Uint8Array[]) {\n-    test(`enumerates Table rows compact`, () => {\n-        expect.hasAssertions();\n-        const table = Table.from(buffers);\n-        expect(table.length).toMatchSnapshot();\n-        expect(table.columns.length).toMatchSnapshot();\n-        for (const row of table) {\n-            expect(row!.toArray()).toMatchSnapshot();\n-        }\n-    });\n-}\n-\n-function testEmptyTableToString() {\n-    test(`toString() prints an empty Table`, () => {\n-        expect(Table.from().toString()).toMatchSnapshot();\n-    });\n-}\n-\n-function testTableToStringPretty(buffers: Uint8Array[]) {\n-    test(`toString() prints a pretty Table`, () => {\n-        expect(Table.from(buffers).toString()).toMatchSnapshot();\n-    });\n-}\n-\n-function testTableToStringPrettyWithIndex(buffers: Uint8Array[]) {\n-    test(`toString({ index: true }) prints a pretty Table with an Index column`, () => {\n-        expect(Table.from(buffers).toString({ index: true })).toMatchSnapshot();\n-    });\n-}\n\\ No newline at end of file\ndiff --git a/js/test/unit/int-tests.ts b/js/test/unit/int-tests.ts\nnew file mode 100644\nindex 000000000..74c96e8ef\n--- /dev/null\n+++ b/js/test/unit/int-tests.ts\n@@ -0,0 +1,227 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import {\n+    Int64,\n+    Uint64,\n+    Int128\n+} from '../Arrow';\n+\n+describe(`Uint64`, () => {\n+    test(`gets expected high/low bytes`, () => {\n+        let i = new Uint64(new Uint32Array([5, 0]));\n+        expect(i.high()).toEqual(0);\n+        expect(i.low()).toEqual(5);\n+    });\n+    test(`adds 32-bit numbers`, () => {\n+        let a = new Uint64(new Uint32Array([5, 0]));\n+        let b = new Uint64(new Uint32Array([9, 0]));\n+        let expected = new Uint64(new Uint32Array([14, 0]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`addition overflows 32-bit numbers`, () => {\n+        let a = new Uint64(new Uint32Array([0xffffffff, 0]));\n+        let b = new Uint64(new Uint32Array([9, 0]));\n+        let expected = new Uint64(new Uint32Array([8, 1]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`multiplies 32-bit numbers`, () => {\n+        let a = new Uint64(new Uint32Array([5, 0]));\n+        let b = new Uint64(new Uint32Array([9, 0]));\n+        let expected = new Uint64(new Uint32Array([45, 0]));\n+        expect(a.times(b)).toEqual(expected);\n+    });\n+    test(`multiplication overflows 32-bit numbers`, () => {\n+        let a = new Uint64(new Uint32Array([0x80000000, 0]));\n+        let b = new Uint64(new Uint32Array([3, 0]));\n+        let expected = new Uint64(new Uint32Array([0x80000000, 1]));\n+        expect(a.times(b)).toEqual(expected);\n+    });\n+    test(`multiplication is associative`, () => {\n+        let a = new Uint64(new Uint32Array([0x80000000, 0]));\n+        let b = new Uint64(new Uint32Array([3, 0]));\n+        expect(Uint64.multiply(a, b)).toEqual(Uint64.multiply(b,a));\n+    });\n+    test(`lessThan works on 32-bit numbers`, () => {\n+        let a = new Uint64(new Uint32Array([0x0000abcd, 0]));\n+        let b = new Uint64(new Uint32Array([0x0000abcf, 0]));\n+        expect(a.lessThan(b)).toBeTruthy();\n+    });\n+    test(`lessThan works on 64-bit numbers`, () => {\n+        let a = new Uint64(new Uint32Array([123, 32]));\n+        let b = new Uint64(new Uint32Array([568, 32]));\n+        expect(a.lessThan(b)).toBeTruthy();\n+    });\n+});\n+\n+describe(`Int64`, () => {\n+    test(`gets expected high/low bytes`, () => {\n+        let i = new Int64(new Uint32Array([5, 0]));\n+        expect(i.high()).toEqual(0);\n+        expect(i.low()).toEqual(5);\n+    });\n+    test(`adds 32-bit numbers`, () => {\n+        let a = new Int64(new Uint32Array([5, 0]));\n+        let b = new Int64(new Uint32Array([9, 0]));\n+        let expected = new Int64(new Uint32Array([14, 0]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`adds negative 32-bit numbers`, () => {\n+        let a = new Int64(new Uint32Array([56789 ,  0]));\n+        let b = new Int64(new Uint32Array([-66789, -1]));\n+        let expected = new Int64(new Uint32Array([-10000, -1]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`addition overflows 32-bit numbers`, () => {\n+        let a = new Int64(new Uint32Array([0xffffffff, 0]));\n+        let b = new Int64(new Uint32Array([9, 0]));\n+        let expected = new Int64(new Uint32Array([8, 1]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`multiplies 32-bit numbers`, () => {\n+        let a = new Int64(new Uint32Array([5, 0]));\n+        let b = new Int64(new Uint32Array([9, 0]));\n+        let expected = new Int64(new Uint32Array([45, 0]));\n+        expect(a.times(b)).toEqual(expected);\n+    });\n+    test(`multiplication overflows 32-bit numbers`, () => {\n+        let a = new Int64(new Uint32Array([0x80000000, 0]));\n+        let b = new Int64(new Uint32Array([3, 0]));\n+        let expected = new Int64(new Uint32Array([0x80000000, 1]));\n+        expect(a.times(b)).toEqual(expected);\n+    });\n+    test(`multiplication works on negative numbers`, () => {\n+        let a = new Int64(new Uint32Array([-5, -1]));\n+        let b = new Int64(new Uint32Array([-100, -1]));\n+        expect(a.times(b)).toEqual(new Int64(new Uint32Array([    500,  0])));\n+        expect(a.times(b)).toEqual(new Int64(new Uint32Array([ -50000, -1])));\n+        expect(a.times(b)).toEqual(new Int64(new Uint32Array([5000000,  0])));\n+    });\n+    test(`multiplication is associative`, () => {\n+        let a = new Int64(new Uint32Array([0x80000000, 0]));\n+        let b = new Int64(new Uint32Array([3, 0]));\n+        expect(Int64.multiply(a, b)).toEqual(Int64.multiply(b,a));\n+    });\n+    test(`lessThan works on 32-bit numbers`, () => {\n+        let a = new Int64(new Uint32Array([0x0000abcd, 0]));\n+        let b = new Int64(new Uint32Array([0x0000abcf, 0]));\n+        expect(a.lessThan(b)).toBeTruthy();\n+    });\n+    test(`lessThan works on 64-bit numbers`, () => {\n+        let a = new Int64(new Uint32Array([123, 32]));\n+        let b = new Int64(new Uint32Array([568, 32]));\n+        expect(a.lessThan(b)).toBeTruthy();\n+    });\n+    test(`lessThan works on negative numbers`, () => {\n+        let a = new Int64(new Uint32Array([0,   -158]));\n+        let b = new Int64(new Uint32Array([-3,    -1]));\n+        expect(a.lessThan(b)).toBeTruthy();\n+    });\n+    test(`lessThan works on mixed numbers`, () => {\n+        let a = new Int64(new Uint32Array([-3, -1]));\n+        let b = new Int64(new Uint32Array([ 0,  3]));\n+        expect(a.lessThan(b)).toBeTruthy();\n+    });\n+    test(`negate works on 32-bit number`, () => {\n+        expect (new Int64(new Uint32Array([123456, 0])).negate()).toEqual(new Int64(new Uint32Array([-123456, -1])));\n+    });\n+    test(`double negation is noop`, () => {\n+        let test     = new Int64(new Uint32Array([6789, 12345]));\n+        let expected = new Int64(new Uint32Array([6789, 12345]));\n+        expect(test.negate().negate()).toEqual(expected);\n+    });\n+    test(`negate works on 64-bit number`, () => {\n+        expect (new Int64(new Uint32Array([0xb74abf15, 0x62c])).negate()).toEqual(new Int64(new Uint32Array([0x48b540eb, 0xfffff9d3])));\n+    });\n+    test(`fromString parses string`, () => {\n+        expect(Int64.fromString('6789123456789')).toEqual(new Int64(new Uint32Array([0xb74abf15, 0x62c])));\n+    });\n+    test(`fromString parses negative string`, () => {\n+        expect(Int64.fromString('-6789123456789')).toEqual(new Int64(new Uint32Array([0x48b540eb, 0xfffff9d3])));\n+    });\n+});\n+\n+describe(`Int128`, () => {\n+    test(`gets expected bytes`, () => {\n+        let i = new Int128(new Uint32Array([4, 3, 2, 1]));\n+        expect(i.high().high()).toEqual(1);\n+        expect(i.high().low() ).toEqual(2);\n+        expect(i.low().high() ).toEqual(3);\n+        expect(i.low().low()  ).toEqual(4);\n+    });\n+    test(`adds 32-bit numbers`, () => {\n+        let a = new Int128(new Uint32Array([5, 0, 0, 0]));\n+        let b = new Int128(new Uint32Array([9, 0, 0, 0]));\n+        let expected = new Int128(new Uint32Array([14, 0, 0, 0]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`adds negative 32-bit numbers`, () => {\n+        let a = new Int128(new Uint32Array([56789 ,  0, 0, 0]));\n+        let b = new Int128(new Uint32Array([-66789, -1, -1, -1]));\n+        let expected = new Int128(new Uint32Array([-10000, -1, -1, -1]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`addition overflows 32-bit numbers`, () => {\n+        let a = new Int128(new Uint32Array([0xffffffff, 0, 0, 0]));\n+        let b = new Int128(new Uint32Array([9, 0, 0, 0]));\n+        let expected = new Int128(new Uint32Array([8, 1, 0, 0]));\n+        expect(a.plus(b)).toEqual(expected);\n+    });\n+    test(`multiplies 32-bit numbers`, () => {\n+        let a = new Int128(new Uint32Array([5, 0, 0, 0]));\n+        let b = new Int128(new Uint32Array([9, 0, 0, 0]));\n+        let expected = new Int128(new Uint32Array([45, 0, 0, 0]));\n+        expect(a.times(b)).toEqual(expected);\n+    });\n+    test(`multiplication overflows 32-bit numbers`, () => {\n+        let a = new Int128(new Uint32Array([0x80000000, 0, 0, 0]));\n+        let b = new Int128(new Uint32Array([3, 0, 0, 0]));\n+        let expected = new Int128(new Uint32Array([0x80000000, 1, 0, 0]));\n+        expect(a.times(b)).toEqual(expected);\n+    });\n+    test(`multiplication works on negative numbers`, () => {\n+        let a = new Int128(new Uint32Array([-5, -1, -1, -1]));\n+        let b = new Int128(new Uint32Array([-100, -1, -1, -1]));\n+        expect(a.times(b)).toEqual(new Int128(new Uint32Array([    500,   0,  0,  0])));\n+        expect(a.times(b)).toEqual(new Int128(new Uint32Array([ -50000,  -1, -1, -1])));\n+        expect(a.times(b)).toEqual(new Int128(new Uint32Array([5000000,   0,  0,  0])));\n+    });\n+    test(`multiplication is associative`, () => {\n+        let a = new Int128(new Uint32Array([4, 3, 2, 1]));\n+        let b = new Int128(new Uint32Array([3, 0, 0, 0]));\n+        expect(Int128.multiply(a, b)).toEqual(Int128.multiply(b,a));\n+    });\n+    test(`multiplication can produce 128-bit number`, () => {\n+        let a = new Int128(new Uint32Array([0, 0xf0000000, 0, 0]));\n+        let b = new Int128(new Uint32Array([0, 0x10000000, 0, 0]));\n+        expect(a.times(b)).toEqual(new Int128(new Uint32Array([0x00000000, 0x00000000, 0x00000000, 0xf000000])));\n+    });\n+    test(`fromString parses string`, () => {\n+        expect(Int128.fromString('1002111867823618826746863804903129070'))\n+            .toEqual(new Int64(new Uint32Array([0x00c0ffee,\n+                                               0x00c0ffee,\n+                                               0x00c0ffee,\n+                                               0x00c0ffee])));\n+    });\n+    test(`fromString parses negative string`, () => {\n+        expect(Int128.fromString('-12345678901234567890123456789012345678'))\n+            .toEqual(new Int64(new Uint32Array([0x21c70cb2,\n+                                                0x3bb66faf,\n+                                                0x0ffdccec,\n+                                                0xf6b64f09])));\n+    });\n+});\ndiff --git a/js/test/vector-tests.ts b/js/test/unit/vector-tests.ts\nsimilarity index 99%\nrename from js/test/vector-tests.ts\nrename to js/test/unit/vector-tests.ts\nindex 0aaba19ee..75706229a 100644\n--- a/js/test/vector-tests.ts\n+++ b/js/test/unit/vector-tests.ts\n@@ -15,12 +15,11 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import Arrow from './Arrow';\n-import {\n+import Arrow, {\n     TypedArray,\n     TypedArrayConstructor,\n     NumericVectorConstructor,\n-} from './Arrow';\n+} from '../Arrow';\n \n const {\n     BoolVector,\ndiff --git a/js/tsconfig/tsconfig.es5.cls.json b/js/tsconfig/tsconfig.es5.cls.json\nindex 502432da0..4df18aa59 100644\n--- a/js/tsconfig/tsconfig.es5.cls.json\n+++ b/js/tsconfig/tsconfig.es5.cls.json\n@@ -2,8 +2,10 @@\n {\n   \"extends\": \"./tsconfig.base.json\",\n   \"compilerOptions\": {\n-    \"target\": \"ES5\",\n+    \"target\": \"es2015\",\n     \"module\": \"es2015\",\n-    \"declaration\": false\n+    \"declaration\": false,\n+    \"noEmitHelpers\": true,\n+    \"importHelpers\": true\n   }\n }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-12-19T03:53:38.028+0000",
                    "updated": "2017-12-19T03:53:38.028+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13119434/comment/16296156",
                    "id": "16296156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1343\n[https://github.com/apache/arrow/pull/1343]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-12-19T03:53:43.429+0000",
                    "updated": "2017-12-19T03:53:43.429+0000"
                }
            ],
            "maxResults": 22,
            "total": 22,
            "startAt": 0
        },
        "customfield_12311820": "0|i3myov:",
        "customfield_12314139": null
    }
}