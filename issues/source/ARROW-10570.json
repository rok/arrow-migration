{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13340313",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313",
    "key": "ARROW-10570",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12607629",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12607629",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13314564",
                    "key": "ARROW-9293",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314564",
                    "fields": {
                        "summary": "[R] Add chunk_size to Table$create()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12607628",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12607628",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13239956",
                    "key": "ARROW-5628",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239956",
                    "fields": {
                        "summary": "[R] Converter should be able to ingest part of an Array",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12607627",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12607627",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13186986",
                    "key": "ARROW-3316",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186986",
                    "fields": {
                        "summary": "[R] Multi-threaded conversion from R data.frame to Arrow table / record batch",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12610222",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12610222",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13358678",
                    "key": "ARROW-11631",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13358678",
                    "fields": {
                        "summary": "[R] Implement RPrimitiveConverter for Decimal type",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12607630",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12607630",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13283990",
                    "key": "ARROW-7798",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283990",
                    "fields": {
                        "summary": "[R] Refactor R <-> Array conversion",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10570/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/547996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-773715918\n\n\n   https://issues.apache.org/jira/browse/ARROW-10570\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-05T01:24:02.681+0000",
                    "updated": "2021-02-05T01:24:02.681+0000",
                    "started": "2021-02-05T01:24:02.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "547996",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/548256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-773715918\n\n\n   https://issues.apache.org/jira/browse/ARROW-10570\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-05T10:00:23.132+0000",
                    "updated": "2021-02-05T10:00:23.132+0000",
                    "started": "2021-02-05T10:00:23.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "548256",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/550263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-775979795\n\n\n   It now feels like `vec_to_arrow` is on parity with the older approach (via `Array__from_vector`). Now testing if `Array__from_vector` can be replaced throughout, before we can start deleting code related to `Array__from_vector`\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-09T14:28:32.699+0000",
                    "updated": "2021-02-09T14:28:32.699+0000",
                    "started": "2021-02-09T14:28:32.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550263",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/550339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-776110472\n\n\n   For testing purposes can you use something like `GetBoolOption(\"arrow.use_new_converter\", false)` inside Array__from_vector to toggle old vs new code? That way, we can run more benchmarks on this to confirm that the performance is ok the new way.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-09T17:34:18.612+0000",
                    "updated": "2021-02-09T17:34:18.612+0000",
                    "started": "2021-02-09T17:34:18.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550339",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/550693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-776672347\n\n\n   oops, I only see your message now @nealrichardson, after I essentially went ahead with migration/elimination of code. Can we envision to run the same code with this pull request vs master. Maybe by setting up continuous benchmarking, with https://github.com/r-lib/bench#continuous-benchmarking\r\n   \r\n   I'm arriving at the end of this week's sprint soon, I'll mark this as ready for review and stay vigilant. \r\n   \r\n   Otherwise I can roll back today's commits and add the option \ud83d\ude2c. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-10T12:26:08.350+0000",
                    "updated": "2021-02-10T12:26:08.350+0000",
                    "started": "2021-02-10T12:26:08.350+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550693",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/550697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-776677594\n\n\n   e.g. `dplyr` has this action: https://github.com/tidyverse/dplyr/blob/master/.github/workflows/continuous-benchmarks.yaml \r\n   \r\n   This might need to be adapted to `arrow` 's offering of many actions, but perhaps we can set it up, and then rebase. So that we don't have to deal with options etc ...\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-10T12:36:41.347+0000",
                    "updated": "2021-02-10T12:36:41.347+0000",
                    "started": "2021-02-10T12:36:41.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550697",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/550806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-776869787\n\n\n   No worries, we've been working on some other continuous benchmarking tools and can test things out with them. Thanks for pushing this forward.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-10T17:12:30.424+0000",
                    "updated": "2021-02-10T17:12:30.424+0000",
                    "started": "2021-02-10T17:12:30.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550806",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/550811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#discussion_r573920682\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -0,0 +1,1045 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#include \"./arrow_vctrs.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+#include <arrow/array/builder_base.h>\n+#include <arrow/array/builder_binary.h>\n+#include <arrow/array/builder_decimal.h>\n+#include <arrow/array/builder_dict.h>\n+#include <arrow/array/builder_nested.h>\n+#include <arrow/array/builder_primitive.h>\n+#include <arrow/type_traits.h>\n+#include <arrow/util/bitmap_writer.h>\n+#include <arrow/util/checked_cast.h>\n+#include <arrow/util/converter.h>\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+using internal::Converter;\n+using internal::DictionaryConverter;\n+using internal::ListConverter;\n+using internal::PrimitiveConverter;\n+using internal::StructConverter;\n+\n+using internal::MakeChunker;\n+using internal::MakeConverter;\n+\n+namespace r {\n+\n+struct RConversionOptions {\n+  RConversionOptions() = default;\n+\n+  std::shared_ptr<arrow::DataType> type;\n+  bool strict;\n+  int64_t size;\n+};\n+\n+enum RVectorType {\n+  BOOLEAN,\n+  UINT8,\n+  INT32,\n+  FLOAT64,\n+  INT64,\n+  COMPLEX,\n+  STRING,\n+  DATAFRAME,\n+  DATE_INT,\n+  DATE_DBL,\n+  TIME,\n+  POSIXCT,\n+  POSIXLT,\n+  BINARY,\n+  LIST,\n+  FACTOR,\n+\n+  OTHER\n+};\n+\n+// this flattens out a logical type of what an R object is\n+// because TYPEOF() is not detailed enough\n+// we can't use arrow types though as there is no 1-1 mapping\n+RVectorType GetVectorType(SEXP x) {\n+  switch (TYPEOF(x)) {\n+    case LGLSXP:\n+      return BOOLEAN;\n+    case RAWSXP:\n+      return UINT8;\n+    case INTSXP:\n+      if (Rf_inherits(x, \"factor\")) {\n+        return FACTOR;\n+      } else if (Rf_inherits(x, \"Date\")) {\n+        return DATE_INT;\n+      }\n+      return INT32;\n+    case STRSXP:\n+      return STRING;\n+    case CPLXSXP:\n+      return COMPLEX;\n+    case REALSXP: {\n+      if (Rf_inherits(x, \"Date\")) {\n+        return DATE_DBL;\n+      } else if (Rf_inherits(x, \"integer64\")) {\n+        return INT64;\n+      } else if (Rf_inherits(x, \"POSIXct\")) {\n+        return POSIXCT;\n+      } else if (Rf_inherits(x, \"difftime\")) {\n+        return TIME;\n+      } else {\n+        return FLOAT64;\n+      }\n+    }\n+    case VECSXP: {\n+      if (Rf_inherits(x, \"data.frame\")) {\n+        return DATAFRAME;\n+      }\n+\n+      if (Rf_inherits(x, \"POSIXlt\")) {\n+        return POSIXLT;\n+      }\n+\n+      if (Rf_inherits(x, \"arrow_binary\")) {\n+        return BINARY;\n+      }\n+\n+      return LIST;\n+    }\n+    default:\n+      break;\n+  }\n+  return OTHER;\n+}\n+\n+template <typename T>\n+bool is_NA(T value);\n+\n+template <>\n+bool is_NA<int>(int value) {\n+  return value == NA_INTEGER;\n+}\n+\n+template <>\n+bool is_NA<double>(double value) {\n+  return ISNA(value);\n+}\n+\n+template <>\n+bool is_NA<uint8_t>(uint8_t value) {\n+  return false;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_bool>(cpp11::r_bool value) {\n+  return value == NA_LOGICAL;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_string>(cpp11::r_string value) {\n+  return value == NA_STRING;\n+}\n+\n+template <>\n+bool is_NA<SEXP>(SEXP value) {\n+  return Rf_isNull(value);\n+}\n+\n+template <>\n+bool is_NA<int64_t>(int64_t value) {\n+  return value == NA_INT64;\n+}\n+\n+template <typename T>\n+struct RVectorVisitor {\n+  using data_type =\n+      typename std::conditional<std::is_same<T, int64_t>::value, double, T>::type;\n+  using r_vector_type = cpp11::r_vector<data_type>;\n+\n+  template <typename AppendNull, typename AppendValue>\n+  static Status Visit(SEXP x, int64_t size, AppendNull&& append_null,\n+                      AppendValue&& append_value) {\n+    r_vector_type values(x);\n+    auto it = values.begin();\n+\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      auto value = GetValue(*it);\n+\n+      if (is_NA<T>(value)) {\n+        RETURN_NOT_OK(append_null());\n+      } else {\n+        RETURN_NOT_OK(append_value(value));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  static T GetValue(data_type x) { return x; }\n+};\n+\n+template <>\n+int64_t RVectorVisitor<int64_t>::GetValue(double x) {\n+  int64_t value;\n+  memcpy(&value, &x, sizeof(int64_t));\n+  return value;\n+}\n+\n+class RConverter : public Converter<SEXP, RConversionOptions> {\n+ public:\n+  virtual Status Append(SEXP) { return Status::NotImplemented(\"Append\"); }\n+\n+  virtual Status Extend(SEXP values, int64_t size) {\n+    return Status::NotImplemented(\"ExtendMasked\");\n+  }\n+\n+  virtual Status ExtendMasked(SEXP values, SEXP mask, int64_t size) {\n+    return Status::NotImplemented(\"ExtendMasked\");\n+  }\n+};\n+\n+template <typename T, typename Enable = void>\n+class RPrimitiveConverter;\n+\n+template <typename T>\n+Result<T> CIntFromRScalarImpl(int64_t value) {\n+  if (value < std::numeric_limits<T>::min() || value > std::numeric_limits<T>::max()) {\n+    return Status::Invalid(\"value outside of range\");\n+  }\n+  return static_cast<T>(value);\n+}\n+\n+template <>\n+Result<uint64_t> CIntFromRScalarImpl<uint64_t>(int64_t value) {\n+  if (value < 0) {\n+    return Status::Invalid(\"value outside of range\");\n+  }\n+  return static_cast<uint64_t>(value);\n+}\n+\n+// utility to convert R single values from (int, raw, double and int64) vectors\n+// to arrow integers and floating point\n+struct RConvert {\n+  // ---- convert to an arrow integer\n+  template <typename Type, typename From>\n+  static enable_if_integer<Type, Result<typename Type::c_type>> Convert(Type*,\n+                                                                        From from) {\n+    return CIntFromRScalarImpl<typename Type::c_type>(from);\n+  }\n+\n+  // ---- convert R integer types to double\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const DoubleType>::value &&\n+                         !std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    constexpr int64_t kDoubleMax = 1LL << 53;\n+    constexpr int64_t kDoubleMin = -(1LL << 53);\n+\n+    if (from < kDoubleMin || from > kDoubleMax) {\n+      return Status::Invalid(\"Integer value \", from, \" is outside of the range exactly\",\n+                             \" representable by a IEEE 754 double precision value\");\n+    }\n+    return static_cast<double>(from);\n+  }\n+\n+  // ---- convert double to double\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const DoubleType>::value &&\n+                         std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    return from;\n+  }\n+\n+  // ---- convert R integer types to float\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const FloatType>::value &&\n+                         !std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    constexpr int64_t kFloatMax = 1LL << 24;\n+    constexpr int64_t kFloatMin = -(1LL << 24);\n+\n+    if (from < kFloatMin || from > kFloatMax) {\n+      return Status::Invalid(\"Integer value \", from, \" is outside of the range exactly\",\n+                             \" representable by a IEEE 754 single precision value\");\n+    }\n+    return static_cast<float>(from);\n+  }\n+\n+  // ---- convert double to float\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const FloatType>::value &&\n+                         std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    return static_cast<float>(from);\n+  }\n+\n+  // ---- convert to half float: not implemented\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const HalfFloatType>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    return Status::Invalid(\"Cannot convert to Half Float\");\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_null<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP, int64_t size) override {\n+    return this->primitive_builder_->AppendNulls(size);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<\n+    T, enable_if_t<is_integer_type<T>::value || is_floating_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    auto rtype = GetVectorType(x);\n+    switch (rtype) {\n+      case UINT8:\n+        return AppendRangeDispatch<unsigned char>(x, size);\n+      case INT32:\n+        return AppendRangeDispatch<int>(x, size);\n+      case FLOAT64:\n+        return AppendRangeDispatch<double>(x, size);\n+      case INT64:\n+        return AppendRangeDispatch<int64_t>(x, size);\n+\n+      default:\n+        break;\n+    }\n+    // TODO: mention T in the error\n+    return Status::Invalid(\"cannot convert\");\n+  }\n+\n+ private:\n+  template <typename r_value_type>\n+  Status AppendRangeLoopDifferentType(SEXP x, int64_t size) {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    auto append_value = [this](r_value_type value) {\n+      ARROW_ASSIGN_OR_RAISE(auto converted,\n+                            RConvert::Convert(this->primitive_type_, value));\n+      this->primitive_builder_->UnsafeAppend(converted);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<r_value_type>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  template <typename r_value_type>\n+  Status AppendRangeSameTypeNotALTREP(SEXP x, int64_t size) {\n+    auto p = reinterpret_cast<const r_value_type*>(DATAPTR_RO(x));\n+    auto p_end = p + size;\n+\n+    auto first_na = std::find_if(p, p_end, is_NA<r_value_type>);\n+\n+    if (first_na == p_end) {\n+      // no nulls, so we can use AppendValues() directly\n+      return this->primitive_builder_->AppendValues(p, p_end);\n+    }\n+\n+    // Append all values up until the first NULL\n+    RETURN_NOT_OK(this->primitive_builder_->AppendValues(p, first_na));\n+\n+    // loop for the remaining\n+    RETURN_NOT_OK(this->primitive_builder_->Reserve(p_end - first_na));\n+    p = first_na;\n+    for (; p < p_end; ++p) {\n+      r_value_type value = *p;\n+      if (is_NA<r_value_type>(value)) {\n+        this->primitive_builder_->UnsafeAppendNull();\n+      } else {\n+        this->primitive_builder_->UnsafeAppend(value);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename r_value_type>\n+  Status AppendRangeSameTypeALTREP(SEXP x, int64_t size) {\n+    // if it is altrep, then we use cpp11 looping\n+    // without needing to convert\n+    RETURN_NOT_OK(this->primitive_builder_->Reserve(size));\n+    typename RVectorVisitor<r_value_type>::r_vector_type vec(x);\n+    auto it = vec.begin();\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      r_value_type value = RVectorVisitor<r_value_type>::GetValue(*it);\n+      if (is_NA<r_value_type>(value)) {\n+        this->primitive_builder_->UnsafeAppendNull();\n+      } else {\n+        this->primitive_builder_->UnsafeAppend(value);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename r_value_type>\n+  Status AppendRangeDispatch(SEXP x, int64_t size) {\n+    if (std::is_same<typename T::c_type, r_value_type>::value) {\n+      if (!ALTREP(x)) {\n+        return AppendRangeSameTypeNotALTREP<r_value_type>(x, size);\n+      } else {\n+        return AppendRangeSameTypeALTREP<r_value_type>(x, size);\n+      }\n+    }\n+\n+    // here if underlying types differ so going\n+    return AppendRangeLoopDifferentType<r_value_type>(x, size);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_boolean_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    auto rtype = GetVectorType(x);\n+    if (rtype != BOOLEAN) {\n+      return Status::Invalid(\"Expecting a logical vector\");\n+    }\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    auto append_value = [this](cpp11::r_bool value) {\n+      this->primitive_builder_->UnsafeAppend(value == 1);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<cpp11::r_bool>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_date_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    switch (GetVectorType(x)) {\n+      case DATE_INT:\n+        return AppendRange_Date<int>(x, size);\n+\n+      case DATE_DBL:\n+        return AppendRange_Date<double>(x, size);\n+\n+      case POSIXCT:\n+        return AppendRange_Posixct(x, size);\n+\n+      default:\n+        break;\n+    }\n+\n+    return Status::Invalid(\"cannot convert to date type \");\n+  }\n+\n+ private:\n+  template <typename r_value_type>\n+  Status AppendRange_Date(SEXP x, int64_t size) {\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    auto append_value = [this](r_value_type value) {\n+      this->primitive_builder_->UnsafeAppend(FromRDate(this->primitive_type_, value));\n+      return Status::OK();\n+    };\n+\n+    return RVectorVisitor<r_value_type>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  Status AppendRange_Posixct(SEXP x, int64_t size) {\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    auto append_value = [this](double value) {\n+      this->primitive_builder_->UnsafeAppend(FromPosixct(this->primitive_type_, value));\n+      return Status::OK();\n+    };\n+\n+    return RVectorVisitor<double>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  static int FromRDate(const Date32Type*, int from) { return from; }\n+\n+  static int64_t FromRDate(const Date64Type*, int from) {\n+    constexpr int64_t kMilliSecondsPerDay = 86400000;\n+    return from * kMilliSecondsPerDay;\n+  }\n+\n+  static int FromPosixct(const Date32Type*, double from) {\n+    constexpr int64_t kSecondsPerDay = 86400;\n+    return from / kSecondsPerDay;\n+  }\n+\n+  static int64_t FromPosixct(const Date64Type*, double from) { return from * 1000; }\n+};\n+\n+int64_t get_TimeUnit_multiplier(TimeUnit::type unit) {\n+  switch (unit) {\n+    case TimeUnit::SECOND:\n+      return 1;\n+    case TimeUnit::MILLI:\n+      return 1000;\n+    case TimeUnit::MICRO:\n+      return 1000000;\n+    case TimeUnit::NANO:\n+      return 1000000000;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_time_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+    auto rtype = GetVectorType(x);\n+    if (rtype != TIME) {\n+      return Status::Invalid(\"Invalid conversion to time\");\n+    }\n+\n+    // multiplier to get the number of seconds from the value stored in the R vector\n+    int difftime_multiplier;\n+    std::string unit(CHAR(STRING_ELT(Rf_getAttrib(x, symbols::units), 0)));\n+    if (unit == \"secs\") {\n+      difftime_multiplier = 1;\n+    } else if (unit == \"mins\") {\n+      difftime_multiplier = 60;\n+    } else if (unit == \"hours\") {\n+      difftime_multiplier = 3600;\n+    } else if (unit == \"days\") {\n+      difftime_multiplier = 86400;\n+    } else if (unit == \"weeks\") {\n+      difftime_multiplier = 604800;\n+    } else {\n+      return Status::Invalid(\"unknown difftime unit\");\n+    }\n+\n+    // then multiply the seconds by this to match the time unit\n+    auto multiplier =\n+        get_TimeUnit_multiplier(this->primitive_type_->unit()) * difftime_multiplier;\n+\n+    auto append_value = [this, multiplier](double value) {\n+      auto converted = static_cast<typename T::c_type>(value * multiplier);\n+      this->primitive_builder_->UnsafeAppend(converted);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<double>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_timestamp_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != POSIXCT) {\n+      return Status::Invalid(\"Invalid conversion to timestamp\");\n+    }\n+\n+    int64_t multiplier = get_TimeUnit_multiplier(this->primitive_type_->unit());\n+\n+    auto append_value = [this, multiplier](double value) {\n+      auto converted = static_cast<typename T::c_type>(value * multiplier);\n+      this->primitive_builder_->UnsafeAppend(converted);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<double>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_decimal_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+};\n+\n+Status check_binary(SEXP x, int64_t size) {\n+  RVectorType rtype = GetVectorType(x);\n+  switch (rtype) {\n+    case BINARY:\n+      break;\n+    case LIST: {\n+      // check this is a list of raw vectors\n+      const SEXP* p_x = VECTOR_PTR_RO(x);\n+      for (R_xlen_t i = 0; i < size; i++, ++p_x) {\n+        if (TYPEOF(*p_x) != RAWSXP) {\n+          return Status::Invalid(\"invalid R type to convert to binary\");\n+        }\n+      }\n+      break;\n+    }\n+    default:\n+      return Status::Invalid(\"invalid R type to convert to binary\");\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_binary<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  using OffsetType = typename T::offset_type;\n+\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+    RETURN_NOT_OK(check_binary(x, size));\n+\n+    auto append_value = [this](SEXP raw) {\n+      R_xlen_t n = XLENGTH(raw);\n+      ARROW_RETURN_NOT_OK(this->primitive_builder_->ReserveData(n));\n+      this->primitive_builder_->UnsafeAppend(RAW_RO(raw), static_cast<OffsetType>(n));\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<std::is_same<T, FixedSizeBinaryType>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+    RETURN_NOT_OK(check_binary(x, size));\n+\n+    auto append_value = [this](SEXP raw) {\n+      R_xlen_t n = XLENGTH(raw);\n+\n+      if (n != this->primitive_builder_->byte_width()) {\n+        return Status::Invalid(\"invalid size\");\n+      }\n+      ARROW_RETURN_NOT_OK(this->primitive_builder_->ReserveData(n));\n+      this->primitive_builder_->UnsafeAppend(RAW_RO(raw));\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_string_like<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  using OffsetType = typename T::offset_type;\n+\n+  Status Extend(SEXP x, int64_t size) override {\n+    int64_t start = 0;\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != STRING) {\n+      return Status::Invalid(\"Expecting a character vector\");\n+    }\n+\n+    cpp11::strings s(arrow::r::utf8_strings(x));\n+    RETURN_NOT_OK(this->primitive_builder_->Reserve(s.size()));\n+    auto it = s.begin() + start;\n+\n+    // we know all the R strings are utf8 already, so we can get\n+    // a definite size and then use UnsafeAppend*()\n+    int64_t total_length = 0;\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      cpp11::r_string si = *it;\n+      total_length += cpp11::is_na(si) ? 0 : si.size();\n+    }\n+    RETURN_NOT_OK(this->primitive_builder_->ReserveData(total_length));\n+\n+    // append\n+    it = s.begin() + start;\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      cpp11::r_string si = *it;\n+      if (si == NA_STRING) {\n+        this->primitive_builder_->UnsafeAppendNull();\n+      } else {\n+        this->primitive_builder_->UnsafeAppend(CHAR(si), si.size());\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_duration_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    // TODO: look in lubridate\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+};\n+\n+template <typename T>\n+class RListConverter;\n+\n+template <typename U, typename Enable = void>\n+class RDictionaryConverter;\n+\n+template <typename U>\n+class RDictionaryConverter<U, enable_if_has_c_type<U>>\n+    : public DictionaryConverter<U, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+};\n+\n+template <typename ValueType>\n+class RDictionaryConverter<ValueType, enable_if_has_string_view<ValueType>>\n+    : public DictionaryConverter<ValueType, RConverter> {\n+ public:\n+  using BuilderType = DictionaryBuilder<ValueType>;\n+\n+  Status Extend(SEXP x, int64_t size) override {\n+    // first we need to handle the levels\n+    cpp11::strings levels(Rf_getAttrib(x, R_LevelsSymbol));\n+    auto memo_array = arrow::r::vec_to_arrow(levels, utf8(), false);\n+    RETURN_NOT_OK(this->value_builder_->InsertMemoValues(*memo_array));\n+\n+    // then we can proceed\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != FACTOR) {\n+      return Status::Invalid(\"invalid R type to convert to dictionary\");\n+    }\n+\n+    auto append_value = [this, levels](int value) {\n+      SEXP s = STRING_ELT(levels, value - 1);\n+      return this->value_builder_->Append(CHAR(s));\n+    };\n+    auto append_null = [this]() { return this->value_builder_->AppendNull(); };\n+    return RVectorVisitor<int>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  Result<std::shared_ptr<Array>> ToArray() override {\n+    ARROW_ASSIGN_OR_RAISE(auto result, this->builder_->Finish());\n+\n+    auto result_type = checked_cast<DictionaryType*>(result->type().get());\n+    if (this->dict_type_->ordered() && !result_type->ordered()) {\n+      // TODO: we should not have to do that, there is probably something wrong\n+      //       in the DictionaryBuilder code\n+      result->data()->type =\n+          arrow::dictionary(result_type->index_type(), result_type->value_type(), true);\n+    }\n+\n+    return result;\n+  }\n+};\n+\n+template <typename T, typename Enable = void>\n+struct RConverterTrait;\n+\n+template <typename T>\n+struct RConverterTrait<\n+    T, enable_if_t<!is_nested_type<T>::value && !is_interval_type<T>::value &&\n+                   !is_extension_type<T>::value>> {\n+  using type = RPrimitiveConverter<T>;\n+};\n+\n+template <typename T>\n+struct RConverterTrait<T, enable_if_list_like<T>> {\n+  using type = RListConverter<T>;\n+};\n+\n+template <typename T>\n+class RListConverter : public ListConverter<T, RConverter, RConverterTrait> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != LIST) {\n+      return Status::Invalid(\"Cannot convert to list type\");\n+    }\n+\n+    auto append_value = [this](SEXP value) {\n+      auto n = vctrs::short_vec_size(value);\n+      RETURN_NOT_OK(this->list_builder_->ValidateOverflow(n));\n+      RETURN_NOT_OK(this->list_builder_->Append());\n+      return this->value_converter_.get()->Extend(value, n);\n+    };\n+    auto append_null = [this]() { return this->list_builder_->AppendNull(); };\n+    return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+class RStructConverter;\n+\n+template <>\n+struct RConverterTrait<StructType> {\n+  using type = RStructConverter;\n+};\n+\n+class RStructConverter : public StructConverter<RConverter, RConverterTrait> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    // check that x is compatible\n+    R_xlen_t n_columns = XLENGTH(x);\n+\n+    if (!Rf_inherits(x, \"data.frame\") && !Rf_inherits(x, \"POSIXlt\")) {\n+      return Status::Invalid(\"Can only convert data frames to Struct type\");\n+    }\n+\n+    auto fields = this->struct_type_->fields();\n+    if (n_columns != static_cast<R_xlen_t>(fields.size())) {\n+      return Status::RError(\"Number of fields in struct (\", fields.size(),\n+                            \") incompatible with number of columns in the data frame (\",\n+                            n_columns, \")\");\n+    }\n+\n+    cpp11::strings x_names = Rf_getAttrib(x, R_NamesSymbol);\n+\n+    RETURN_NOT_OK(cpp11::unwind_protect([&] {\n+      for (int i = 0; i < n_columns; i++) {\n+        const char* name_i = arrow::r::unsafe::utf8_string(x_names[i]);\n+        auto field_name = fields[i]->name();\n+        if (field_name != name_i) {\n+          return Status::RError(\n+              \"Field name in position \", i, \" (\", field_name,\n+              \") does not match the name of the column of the data frame (\", name_i, \")\");\n+        }\n+      }\n+\n+      return Status::OK();\n+    }));\n+\n+    for (R_xlen_t i = 0; i < n_columns; i++) {\n+      std::string name(x_names[i]);\n+      if (name != fields[i]->name()) {\n+        return Status::RError(\n+            \"Field name in position \", i, \" (\", fields[i]->name(),\n+            \") does not match the name of the column of the data frame (\", name, \")\");\n+      }\n+    }\n+\n+    for (R_xlen_t i = 0; i < n_columns; i++) {\n+      SEXP x_i = VECTOR_ELT(x, i);\n+      if (vctrs::short_vec_size(x_i) < size) {\n+        return Status::RError(\"Degenerated data frame\");\n+      }\n+    }\n+\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    for (R_xlen_t i = 0; i < size; i++) {\n+      RETURN_NOT_OK(struct_builder_->Append());\n+    }\n+\n+    for (R_xlen_t i = 0; i < n_columns; i++) {\n+      auto status = children_[i]->Extend(VECTOR_ELT(x, i), size);\n+      if (!status.ok()) {\n+        return Status::Invalid(\"Problem with column \", (i + 1), \" (\", fields[i]->name(),\n+                               \"): \", status.ToString());\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  Status Init(MemoryPool* pool) override {\n+    return StructConverter<RConverter, RConverterTrait>::Init(pool);\n+  }\n+};\n+\n+template <>\n+struct RConverterTrait<DictionaryType> {\n+  template <typename T>\n+  using dictionary_type = RDictionaryConverter<T>;\n+};\n+\n+// ---- short circuit the Converter api entirely when we can do zero-copy\n+\n+// in some situations we can just use the memory of the R object in an RBuffer\n+// instead of going through ArrayBuilder, etc ...\n+bool can_reuse_memory(SEXP x, const std::shared_ptr<arrow::DataType>& type) {\n+  // TODO: this probably should be disabled when x is an ALTREP object\n+  //       because MakeSimpleArray below will force materialization\n\nReview comment:\n       Isn't this unavoidable though? We have to get the data into Arrow format somehow.\r\n   \r\n   I guess the one case you might not want to materialize is if you had an ALTREP object that were backed by an Arrow array (which of course we don't do yet)--then you could just grab the Arrow array.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-10T17:18:54.280+0000",
                    "updated": "2021-02-10T17:18:54.280+0000",
                    "started": "2021-02-10T17:18:54.280+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550811",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/551374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#discussion_r574636306\n\n\n\n##########\nFile path: r/src/r_to_arrow.cpp\n##########\n@@ -0,0 +1,1045 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"./arrow_types.h\"\n+#include \"./arrow_vctrs.h\"\n+\n+#if defined(ARROW_R_WITH_ARROW)\n+#include <arrow/array/builder_base.h>\n+#include <arrow/array/builder_binary.h>\n+#include <arrow/array/builder_decimal.h>\n+#include <arrow/array/builder_dict.h>\n+#include <arrow/array/builder_nested.h>\n+#include <arrow/array/builder_primitive.h>\n+#include <arrow/type_traits.h>\n+#include <arrow/util/bitmap_writer.h>\n+#include <arrow/util/checked_cast.h>\n+#include <arrow/util/converter.h>\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::checked_pointer_cast;\n+\n+using internal::Converter;\n+using internal::DictionaryConverter;\n+using internal::ListConverter;\n+using internal::PrimitiveConverter;\n+using internal::StructConverter;\n+\n+using internal::MakeChunker;\n+using internal::MakeConverter;\n+\n+namespace r {\n+\n+struct RConversionOptions {\n+  RConversionOptions() = default;\n+\n+  std::shared_ptr<arrow::DataType> type;\n+  bool strict;\n+  int64_t size;\n+};\n+\n+enum RVectorType {\n+  BOOLEAN,\n+  UINT8,\n+  INT32,\n+  FLOAT64,\n+  INT64,\n+  COMPLEX,\n+  STRING,\n+  DATAFRAME,\n+  DATE_INT,\n+  DATE_DBL,\n+  TIME,\n+  POSIXCT,\n+  POSIXLT,\n+  BINARY,\n+  LIST,\n+  FACTOR,\n+\n+  OTHER\n+};\n+\n+// this flattens out a logical type of what an R object is\n+// because TYPEOF() is not detailed enough\n+// we can't use arrow types though as there is no 1-1 mapping\n+RVectorType GetVectorType(SEXP x) {\n+  switch (TYPEOF(x)) {\n+    case LGLSXP:\n+      return BOOLEAN;\n+    case RAWSXP:\n+      return UINT8;\n+    case INTSXP:\n+      if (Rf_inherits(x, \"factor\")) {\n+        return FACTOR;\n+      } else if (Rf_inherits(x, \"Date\")) {\n+        return DATE_INT;\n+      }\n+      return INT32;\n+    case STRSXP:\n+      return STRING;\n+    case CPLXSXP:\n+      return COMPLEX;\n+    case REALSXP: {\n+      if (Rf_inherits(x, \"Date\")) {\n+        return DATE_DBL;\n+      } else if (Rf_inherits(x, \"integer64\")) {\n+        return INT64;\n+      } else if (Rf_inherits(x, \"POSIXct\")) {\n+        return POSIXCT;\n+      } else if (Rf_inherits(x, \"difftime\")) {\n+        return TIME;\n+      } else {\n+        return FLOAT64;\n+      }\n+    }\n+    case VECSXP: {\n+      if (Rf_inherits(x, \"data.frame\")) {\n+        return DATAFRAME;\n+      }\n+\n+      if (Rf_inherits(x, \"POSIXlt\")) {\n+        return POSIXLT;\n+      }\n+\n+      if (Rf_inherits(x, \"arrow_binary\")) {\n+        return BINARY;\n+      }\n+\n+      return LIST;\n+    }\n+    default:\n+      break;\n+  }\n+  return OTHER;\n+}\n+\n+template <typename T>\n+bool is_NA(T value);\n+\n+template <>\n+bool is_NA<int>(int value) {\n+  return value == NA_INTEGER;\n+}\n+\n+template <>\n+bool is_NA<double>(double value) {\n+  return ISNA(value);\n+}\n+\n+template <>\n+bool is_NA<uint8_t>(uint8_t value) {\n+  return false;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_bool>(cpp11::r_bool value) {\n+  return value == NA_LOGICAL;\n+}\n+\n+template <>\n+bool is_NA<cpp11::r_string>(cpp11::r_string value) {\n+  return value == NA_STRING;\n+}\n+\n+template <>\n+bool is_NA<SEXP>(SEXP value) {\n+  return Rf_isNull(value);\n+}\n+\n+template <>\n+bool is_NA<int64_t>(int64_t value) {\n+  return value == NA_INT64;\n+}\n+\n+template <typename T>\n+struct RVectorVisitor {\n+  using data_type =\n+      typename std::conditional<std::is_same<T, int64_t>::value, double, T>::type;\n+  using r_vector_type = cpp11::r_vector<data_type>;\n+\n+  template <typename AppendNull, typename AppendValue>\n+  static Status Visit(SEXP x, int64_t size, AppendNull&& append_null,\n+                      AppendValue&& append_value) {\n+    r_vector_type values(x);\n+    auto it = values.begin();\n+\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      auto value = GetValue(*it);\n+\n+      if (is_NA<T>(value)) {\n+        RETURN_NOT_OK(append_null());\n+      } else {\n+        RETURN_NOT_OK(append_value(value));\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  static T GetValue(data_type x) { return x; }\n+};\n+\n+template <>\n+int64_t RVectorVisitor<int64_t>::GetValue(double x) {\n+  int64_t value;\n+  memcpy(&value, &x, sizeof(int64_t));\n+  return value;\n+}\n+\n+class RConverter : public Converter<SEXP, RConversionOptions> {\n+ public:\n+  virtual Status Append(SEXP) { return Status::NotImplemented(\"Append\"); }\n+\n+  virtual Status Extend(SEXP values, int64_t size) {\n+    return Status::NotImplemented(\"ExtendMasked\");\n+  }\n+\n+  virtual Status ExtendMasked(SEXP values, SEXP mask, int64_t size) {\n+    return Status::NotImplemented(\"ExtendMasked\");\n+  }\n+};\n+\n+template <typename T, typename Enable = void>\n+class RPrimitiveConverter;\n+\n+template <typename T>\n+Result<T> CIntFromRScalarImpl(int64_t value) {\n+  if (value < std::numeric_limits<T>::min() || value > std::numeric_limits<T>::max()) {\n+    return Status::Invalid(\"value outside of range\");\n+  }\n+  return static_cast<T>(value);\n+}\n+\n+template <>\n+Result<uint64_t> CIntFromRScalarImpl<uint64_t>(int64_t value) {\n+  if (value < 0) {\n+    return Status::Invalid(\"value outside of range\");\n+  }\n+  return static_cast<uint64_t>(value);\n+}\n+\n+// utility to convert R single values from (int, raw, double and int64) vectors\n+// to arrow integers and floating point\n+struct RConvert {\n+  // ---- convert to an arrow integer\n+  template <typename Type, typename From>\n+  static enable_if_integer<Type, Result<typename Type::c_type>> Convert(Type*,\n+                                                                        From from) {\n+    return CIntFromRScalarImpl<typename Type::c_type>(from);\n+  }\n+\n+  // ---- convert R integer types to double\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const DoubleType>::value &&\n+                         !std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    constexpr int64_t kDoubleMax = 1LL << 53;\n+    constexpr int64_t kDoubleMin = -(1LL << 53);\n+\n+    if (from < kDoubleMin || from > kDoubleMax) {\n+      return Status::Invalid(\"Integer value \", from, \" is outside of the range exactly\",\n+                             \" representable by a IEEE 754 double precision value\");\n+    }\n+    return static_cast<double>(from);\n+  }\n+\n+  // ---- convert double to double\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const DoubleType>::value &&\n+                         std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    return from;\n+  }\n+\n+  // ---- convert R integer types to float\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const FloatType>::value &&\n+                         !std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    constexpr int64_t kFloatMax = 1LL << 24;\n+    constexpr int64_t kFloatMin = -(1LL << 24);\n+\n+    if (from < kFloatMin || from > kFloatMax) {\n+      return Status::Invalid(\"Integer value \", from, \" is outside of the range exactly\",\n+                             \" representable by a IEEE 754 single precision value\");\n+    }\n+    return static_cast<float>(from);\n+  }\n+\n+  // ---- convert double to float\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const FloatType>::value &&\n+                         std::is_same<From, double>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    return static_cast<float>(from);\n+  }\n+\n+  // ---- convert to half float: not implemented\n+  template <typename Type, typename From>\n+  static enable_if_t<std::is_same<Type, const HalfFloatType>::value,\n+                     Result<typename Type::c_type>>\n+  Convert(Type*, From from) {\n+    return Status::Invalid(\"Cannot convert to Half Float\");\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_null<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP, int64_t size) override {\n+    return this->primitive_builder_->AppendNulls(size);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<\n+    T, enable_if_t<is_integer_type<T>::value || is_floating_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    auto rtype = GetVectorType(x);\n+    switch (rtype) {\n+      case UINT8:\n+        return AppendRangeDispatch<unsigned char>(x, size);\n+      case INT32:\n+        return AppendRangeDispatch<int>(x, size);\n+      case FLOAT64:\n+        return AppendRangeDispatch<double>(x, size);\n+      case INT64:\n+        return AppendRangeDispatch<int64_t>(x, size);\n+\n+      default:\n+        break;\n+    }\n+    // TODO: mention T in the error\n+    return Status::Invalid(\"cannot convert\");\n+  }\n+\n+ private:\n+  template <typename r_value_type>\n+  Status AppendRangeLoopDifferentType(SEXP x, int64_t size) {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    auto append_value = [this](r_value_type value) {\n+      ARROW_ASSIGN_OR_RAISE(auto converted,\n+                            RConvert::Convert(this->primitive_type_, value));\n+      this->primitive_builder_->UnsafeAppend(converted);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<r_value_type>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  template <typename r_value_type>\n+  Status AppendRangeSameTypeNotALTREP(SEXP x, int64_t size) {\n+    auto p = reinterpret_cast<const r_value_type*>(DATAPTR_RO(x));\n+    auto p_end = p + size;\n+\n+    auto first_na = std::find_if(p, p_end, is_NA<r_value_type>);\n+\n+    if (first_na == p_end) {\n+      // no nulls, so we can use AppendValues() directly\n+      return this->primitive_builder_->AppendValues(p, p_end);\n+    }\n+\n+    // Append all values up until the first NULL\n+    RETURN_NOT_OK(this->primitive_builder_->AppendValues(p, first_na));\n+\n+    // loop for the remaining\n+    RETURN_NOT_OK(this->primitive_builder_->Reserve(p_end - first_na));\n+    p = first_na;\n+    for (; p < p_end; ++p) {\n+      r_value_type value = *p;\n+      if (is_NA<r_value_type>(value)) {\n+        this->primitive_builder_->UnsafeAppendNull();\n+      } else {\n+        this->primitive_builder_->UnsafeAppend(value);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename r_value_type>\n+  Status AppendRangeSameTypeALTREP(SEXP x, int64_t size) {\n+    // if it is altrep, then we use cpp11 looping\n+    // without needing to convert\n+    RETURN_NOT_OK(this->primitive_builder_->Reserve(size));\n+    typename RVectorVisitor<r_value_type>::r_vector_type vec(x);\n+    auto it = vec.begin();\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      r_value_type value = RVectorVisitor<r_value_type>::GetValue(*it);\n+      if (is_NA<r_value_type>(value)) {\n+        this->primitive_builder_->UnsafeAppendNull();\n+      } else {\n+        this->primitive_builder_->UnsafeAppend(value);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename r_value_type>\n+  Status AppendRangeDispatch(SEXP x, int64_t size) {\n+    if (std::is_same<typename T::c_type, r_value_type>::value) {\n+      if (!ALTREP(x)) {\n+        return AppendRangeSameTypeNotALTREP<r_value_type>(x, size);\n+      } else {\n+        return AppendRangeSameTypeALTREP<r_value_type>(x, size);\n+      }\n+    }\n+\n+    // here if underlying types differ so going\n+    return AppendRangeLoopDifferentType<r_value_type>(x, size);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_boolean_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    auto rtype = GetVectorType(x);\n+    if (rtype != BOOLEAN) {\n+      return Status::Invalid(\"Expecting a logical vector\");\n+    }\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    auto append_value = [this](cpp11::r_bool value) {\n+      this->primitive_builder_->UnsafeAppend(value == 1);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<cpp11::r_bool>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_date_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    switch (GetVectorType(x)) {\n+      case DATE_INT:\n+        return AppendRange_Date<int>(x, size);\n+\n+      case DATE_DBL:\n+        return AppendRange_Date<double>(x, size);\n+\n+      case POSIXCT:\n+        return AppendRange_Posixct(x, size);\n+\n+      default:\n+        break;\n+    }\n+\n+    return Status::Invalid(\"cannot convert to date type \");\n+  }\n+\n+ private:\n+  template <typename r_value_type>\n+  Status AppendRange_Date(SEXP x, int64_t size) {\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    auto append_value = [this](r_value_type value) {\n+      this->primitive_builder_->UnsafeAppend(FromRDate(this->primitive_type_, value));\n+      return Status::OK();\n+    };\n+\n+    return RVectorVisitor<r_value_type>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  Status AppendRange_Posixct(SEXP x, int64_t size) {\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    auto append_value = [this](double value) {\n+      this->primitive_builder_->UnsafeAppend(FromPosixct(this->primitive_type_, value));\n+      return Status::OK();\n+    };\n+\n+    return RVectorVisitor<double>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  static int FromRDate(const Date32Type*, int from) { return from; }\n+\n+  static int64_t FromRDate(const Date64Type*, int from) {\n+    constexpr int64_t kMilliSecondsPerDay = 86400000;\n+    return from * kMilliSecondsPerDay;\n+  }\n+\n+  static int FromPosixct(const Date32Type*, double from) {\n+    constexpr int64_t kSecondsPerDay = 86400;\n+    return from / kSecondsPerDay;\n+  }\n+\n+  static int64_t FromPosixct(const Date64Type*, double from) { return from * 1000; }\n+};\n+\n+int64_t get_TimeUnit_multiplier(TimeUnit::type unit) {\n+  switch (unit) {\n+    case TimeUnit::SECOND:\n+      return 1;\n+    case TimeUnit::MILLI:\n+      return 1000;\n+    case TimeUnit::MICRO:\n+      return 1000000;\n+    case TimeUnit::NANO:\n+      return 1000000000;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_time_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+    auto rtype = GetVectorType(x);\n+    if (rtype != TIME) {\n+      return Status::Invalid(\"Invalid conversion to time\");\n+    }\n+\n+    // multiplier to get the number of seconds from the value stored in the R vector\n+    int difftime_multiplier;\n+    std::string unit(CHAR(STRING_ELT(Rf_getAttrib(x, symbols::units), 0)));\n+    if (unit == \"secs\") {\n+      difftime_multiplier = 1;\n+    } else if (unit == \"mins\") {\n+      difftime_multiplier = 60;\n+    } else if (unit == \"hours\") {\n+      difftime_multiplier = 3600;\n+    } else if (unit == \"days\") {\n+      difftime_multiplier = 86400;\n+    } else if (unit == \"weeks\") {\n+      difftime_multiplier = 604800;\n+    } else {\n+      return Status::Invalid(\"unknown difftime unit\");\n+    }\n+\n+    // then multiply the seconds by this to match the time unit\n+    auto multiplier =\n+        get_TimeUnit_multiplier(this->primitive_type_->unit()) * difftime_multiplier;\n+\n+    auto append_value = [this, multiplier](double value) {\n+      auto converted = static_cast<typename T::c_type>(value * multiplier);\n+      this->primitive_builder_->UnsafeAppend(converted);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<double>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_timestamp_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != POSIXCT) {\n+      return Status::Invalid(\"Invalid conversion to timestamp\");\n+    }\n+\n+    int64_t multiplier = get_TimeUnit_multiplier(this->primitive_type_->unit());\n+\n+    auto append_value = [this, multiplier](double value) {\n+      auto converted = static_cast<typename T::c_type>(value * multiplier);\n+      this->primitive_builder_->UnsafeAppend(converted);\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<double>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_decimal_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+};\n+\n+Status check_binary(SEXP x, int64_t size) {\n+  RVectorType rtype = GetVectorType(x);\n+  switch (rtype) {\n+    case BINARY:\n+      break;\n+    case LIST: {\n+      // check this is a list of raw vectors\n+      const SEXP* p_x = VECTOR_PTR_RO(x);\n+      for (R_xlen_t i = 0; i < size; i++, ++p_x) {\n+        if (TYPEOF(*p_x) != RAWSXP) {\n+          return Status::Invalid(\"invalid R type to convert to binary\");\n+        }\n+      }\n+      break;\n+    }\n+    default:\n+      return Status::Invalid(\"invalid R type to convert to binary\");\n+  }\n+  return Status::OK();\n+}\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_binary<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  using OffsetType = typename T::offset_type;\n+\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+    RETURN_NOT_OK(check_binary(x, size));\n+\n+    auto append_value = [this](SEXP raw) {\n+      R_xlen_t n = XLENGTH(raw);\n+      ARROW_RETURN_NOT_OK(this->primitive_builder_->ReserveData(n));\n+      this->primitive_builder_->UnsafeAppend(RAW_RO(raw), static_cast<OffsetType>(n));\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<std::is_same<T, FixedSizeBinaryType>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+    RETURN_NOT_OK(check_binary(x, size));\n+\n+    auto append_value = [this](SEXP raw) {\n+      R_xlen_t n = XLENGTH(raw);\n+\n+      if (n != this->primitive_builder_->byte_width()) {\n+        return Status::Invalid(\"invalid size\");\n+      }\n+      ARROW_RETURN_NOT_OK(this->primitive_builder_->ReserveData(n));\n+      this->primitive_builder_->UnsafeAppend(RAW_RO(raw));\n+      return Status::OK();\n+    };\n+    auto append_null = [this]() {\n+      this->primitive_builder_->UnsafeAppendNull();\n+      return Status::OK();\n+    };\n+    return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_string_like<T>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  using OffsetType = typename T::offset_type;\n+\n+  Status Extend(SEXP x, int64_t size) override {\n+    int64_t start = 0;\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != STRING) {\n+      return Status::Invalid(\"Expecting a character vector\");\n+    }\n+\n+    cpp11::strings s(arrow::r::utf8_strings(x));\n+    RETURN_NOT_OK(this->primitive_builder_->Reserve(s.size()));\n+    auto it = s.begin() + start;\n+\n+    // we know all the R strings are utf8 already, so we can get\n+    // a definite size and then use UnsafeAppend*()\n+    int64_t total_length = 0;\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      cpp11::r_string si = *it;\n+      total_length += cpp11::is_na(si) ? 0 : si.size();\n+    }\n+    RETURN_NOT_OK(this->primitive_builder_->ReserveData(total_length));\n+\n+    // append\n+    it = s.begin() + start;\n+    for (R_xlen_t i = 0; i < size; i++, ++it) {\n+      cpp11::r_string si = *it;\n+      if (si == NA_STRING) {\n+        this->primitive_builder_->UnsafeAppendNull();\n+      } else {\n+        this->primitive_builder_->UnsafeAppend(CHAR(si), si.size());\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename T>\n+class RPrimitiveConverter<T, enable_if_t<is_duration_type<T>::value>>\n+    : public PrimitiveConverter<T, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    // TODO: look in lubridate\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+};\n+\n+template <typename T>\n+class RListConverter;\n+\n+template <typename U, typename Enable = void>\n+class RDictionaryConverter;\n+\n+template <typename U>\n+class RDictionaryConverter<U, enable_if_has_c_type<U>>\n+    : public DictionaryConverter<U, RConverter> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    return Status::NotImplemented(\"Extend\");\n+  }\n+};\n+\n+template <typename ValueType>\n+class RDictionaryConverter<ValueType, enable_if_has_string_view<ValueType>>\n+    : public DictionaryConverter<ValueType, RConverter> {\n+ public:\n+  using BuilderType = DictionaryBuilder<ValueType>;\n+\n+  Status Extend(SEXP x, int64_t size) override {\n+    // first we need to handle the levels\n+    cpp11::strings levels(Rf_getAttrib(x, R_LevelsSymbol));\n+    auto memo_array = arrow::r::vec_to_arrow(levels, utf8(), false);\n+    RETURN_NOT_OK(this->value_builder_->InsertMemoValues(*memo_array));\n+\n+    // then we can proceed\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != FACTOR) {\n+      return Status::Invalid(\"invalid R type to convert to dictionary\");\n+    }\n+\n+    auto append_value = [this, levels](int value) {\n+      SEXP s = STRING_ELT(levels, value - 1);\n+      return this->value_builder_->Append(CHAR(s));\n+    };\n+    auto append_null = [this]() { return this->value_builder_->AppendNull(); };\n+    return RVectorVisitor<int>::Visit(x, size, append_null, append_value);\n+  }\n+\n+  Result<std::shared_ptr<Array>> ToArray() override {\n+    ARROW_ASSIGN_OR_RAISE(auto result, this->builder_->Finish());\n+\n+    auto result_type = checked_cast<DictionaryType*>(result->type().get());\n+    if (this->dict_type_->ordered() && !result_type->ordered()) {\n+      // TODO: we should not have to do that, there is probably something wrong\n+      //       in the DictionaryBuilder code\n+      result->data()->type =\n+          arrow::dictionary(result_type->index_type(), result_type->value_type(), true);\n+    }\n+\n+    return result;\n+  }\n+};\n+\n+template <typename T, typename Enable = void>\n+struct RConverterTrait;\n+\n+template <typename T>\n+struct RConverterTrait<\n+    T, enable_if_t<!is_nested_type<T>::value && !is_interval_type<T>::value &&\n+                   !is_extension_type<T>::value>> {\n+  using type = RPrimitiveConverter<T>;\n+};\n+\n+template <typename T>\n+struct RConverterTrait<T, enable_if_list_like<T>> {\n+  using type = RListConverter<T>;\n+};\n+\n+template <typename T>\n+class RListConverter : public ListConverter<T, RConverter, RConverterTrait> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    RVectorType rtype = GetVectorType(x);\n+    if (rtype != LIST) {\n+      return Status::Invalid(\"Cannot convert to list type\");\n+    }\n+\n+    auto append_value = [this](SEXP value) {\n+      auto n = vctrs::short_vec_size(value);\n+      RETURN_NOT_OK(this->list_builder_->ValidateOverflow(n));\n+      RETURN_NOT_OK(this->list_builder_->Append());\n+      return this->value_converter_.get()->Extend(value, n);\n+    };\n+    auto append_null = [this]() { return this->list_builder_->AppendNull(); };\n+    return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\n+  }\n+};\n+\n+class RStructConverter;\n+\n+template <>\n+struct RConverterTrait<StructType> {\n+  using type = RStructConverter;\n+};\n+\n+class RStructConverter : public StructConverter<RConverter, RConverterTrait> {\n+ public:\n+  Status Extend(SEXP x, int64_t size) override {\n+    // check that x is compatible\n+    R_xlen_t n_columns = XLENGTH(x);\n+\n+    if (!Rf_inherits(x, \"data.frame\") && !Rf_inherits(x, \"POSIXlt\")) {\n+      return Status::Invalid(\"Can only convert data frames to Struct type\");\n+    }\n+\n+    auto fields = this->struct_type_->fields();\n+    if (n_columns != static_cast<R_xlen_t>(fields.size())) {\n+      return Status::RError(\"Number of fields in struct (\", fields.size(),\n+                            \") incompatible with number of columns in the data frame (\",\n+                            n_columns, \")\");\n+    }\n+\n+    cpp11::strings x_names = Rf_getAttrib(x, R_NamesSymbol);\n+\n+    RETURN_NOT_OK(cpp11::unwind_protect([&] {\n+      for (int i = 0; i < n_columns; i++) {\n+        const char* name_i = arrow::r::unsafe::utf8_string(x_names[i]);\n+        auto field_name = fields[i]->name();\n+        if (field_name != name_i) {\n+          return Status::RError(\n+              \"Field name in position \", i, \" (\", field_name,\n+              \") does not match the name of the column of the data frame (\", name_i, \")\");\n+        }\n+      }\n+\n+      return Status::OK();\n+    }));\n+\n+    for (R_xlen_t i = 0; i < n_columns; i++) {\n+      std::string name(x_names[i]);\n+      if (name != fields[i]->name()) {\n+        return Status::RError(\n+            \"Field name in position \", i, \" (\", fields[i]->name(),\n+            \") does not match the name of the column of the data frame (\", name, \")\");\n+      }\n+    }\n+\n+    for (R_xlen_t i = 0; i < n_columns; i++) {\n+      SEXP x_i = VECTOR_ELT(x, i);\n+      if (vctrs::short_vec_size(x_i) < size) {\n+        return Status::RError(\"Degenerated data frame\");\n+      }\n+    }\n+\n+    RETURN_NOT_OK(this->Reserve(size));\n+\n+    for (R_xlen_t i = 0; i < size; i++) {\n+      RETURN_NOT_OK(struct_builder_->Append());\n+    }\n+\n+    for (R_xlen_t i = 0; i < n_columns; i++) {\n+      auto status = children_[i]->Extend(VECTOR_ELT(x, i), size);\n+      if (!status.ok()) {\n+        return Status::Invalid(\"Problem with column \", (i + 1), \" (\", fields[i]->name(),\n+                               \"): \", status.ToString());\n+      }\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  Status Init(MemoryPool* pool) override {\n+    return StructConverter<RConverter, RConverterTrait>::Init(pool);\n+  }\n+};\n+\n+template <>\n+struct RConverterTrait<DictionaryType> {\n+  template <typename T>\n+  using dictionary_type = RDictionaryConverter<T>;\n+};\n+\n+// ---- short circuit the Converter api entirely when we can do zero-copy\n+\n+// in some situations we can just use the memory of the R object in an RBuffer\n+// instead of going through ArrayBuilder, etc ...\n+bool can_reuse_memory(SEXP x, const std::shared_ptr<arrow::DataType>& type) {\n+  // TODO: this probably should be disabled when x is an ALTREP object\n+  //       because MakeSimpleArray below will force materialization\n\nReview comment:\n       Maybe that's a reach, but perhaps there are cases where this would mean only arrow materialize without R materialize. For example if the arrow data type is not representable in R, e.g. `uint32`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-11T16:20:31.738+0000",
                    "updated": "2021-02-11T16:20:31.738+0000",
                    "started": "2021-02-11T16:20:31.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "551374",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/558815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-786940734\n\n\n   I've been helping out benchmark these changes against the 3.0 release and everything I'm seeing is in line: no performance regressions. I've used a handful of our real-world datasets along with some synthetic datasets made up of individual types and they are all in line with the 3.0 release performance wise, which is great. I've been adding the benchmarks to arrowbench and are currently [in a PR there](https://github.com/ursa-labs/arrowbench/pull/9) in case you're curious about them.\r\n   \r\n   One thing I did notice is that simple feature columns are having issues that aren't there in the release.\r\n   \r\n   Here's a test that exercises the issue (I dug a bit to see if I could find the bug but haven't yet). The structure of the list column is meant to be minimal but is based off of the failure I saw with a real sf tibble (see below)\r\n   \r\n   ```\r\n   test_that(\"sf-like list columns\", {\r\n     df <- tibble::tibble(col = list(structure(list(1), class = c(\"one\"))))\r\n     expect_array_roundtrip(df)\r\n   })\r\n   ``` \r\n   \r\n   the error+traceback is:\r\n   \r\n   ```\r\n   <error/vctrs_error_scalar_type>\r\n   Input must be a vector, not a `one` object.\r\n   Backtrace:\r\n       \u2588\r\n    1. \u251c\u2500Table$create(df)\r\n    2. \u2502 \u2514\u2500arrow:::Table__from_dots(dots, schema)\r\n    3. \u2514\u2500vctrs:::stop_scalar_type(...)\r\n    4.   \u2514\u2500vctrs:::stop_vctrs(msg, \"vctrs_error_scalar_type\", actual = x)\r\n   ```\r\n   \r\n   A more naturalistic example of this is the following which works in 3.0, but not on this branch\r\n   \r\n   ```\r\n   df_simple <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\"))\r\n   tab_simple <- Table$create(df_simple)\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-26T23:03:49.125+0000",
                    "updated": "2021-02-26T23:03:49.125+0000",
                    "started": "2021-02-26T23:03:49.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "558815",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-787787258\n\n\n   slightly simpler reprex:  \r\n   \r\n   ``` r\r\n   arrow::Array$create(list(structure(list(1), class = c(\"one\"))))\r\n   #> Error: Input must be a vector, not a `one` object.\r\n   ```\r\n   \r\n   <sup>Created on 2021-03-01 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T09:09:22.205+0000",
                    "updated": "2021-03-01T09:09:22.205+0000",
                    "started": "2021-03-01T09:09:22.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559280",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-787798752\n\n\n   Which essentially is: \r\n   \r\n   ``` r\r\n   vctrs::vec_size(structure(list(1), class = c(\"one\")))\r\n   #> Error: Input must be a vector, not a `one` object.\r\n   ```\r\n   \r\n   <sup>Created on 2021-03-01 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>\r\n   \r\n   as used in the `ListConverter`: \r\n   \r\n   ```cpp\r\n   template <typename T>\r\n   class RListConverter : public ListConverter<T, RConverter, RConverterTrait> {\r\n    public:\r\n     Status Extend(SEXP x, int64_t size) override {\r\n       RETURN_NOT_OK(this->Reserve(size));\r\n   \r\n       RVectorType rtype = GetVectorType(x);\r\n       if (rtype != LIST) {\r\n         return Status::Invalid(\"Cannot convert to list type\");\r\n       }\r\n   \r\n       auto append_value = [this](SEXP value) {\r\n         auto n = vctrs::short_vec_size(value);\r\n         RETURN_NOT_OK(this->list_builder_->ValidateOverflow(n));\r\n         RETURN_NOT_OK(this->list_builder_->Append());\r\n         return this->value_converter_.get()->Extend(value, n);\r\n       };\r\n       auto append_null = [this]() { return this->list_builder_->AppendNull(); };\r\n       return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\r\n     }\r\n   };\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T09:25:04.276+0000",
                    "updated": "2021-03-01T09:25:04.276+0000",
                    "started": "2021-03-01T09:25:04.276+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559284",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois edited a comment on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-787798752\n\n\n   Which essentially is: \r\n   \r\n   ``` r\r\n   vctrs::vec_size(structure(list(1), class = c(\"one\")))\r\n   #> Error: Input must be a vector, not a `one` object.\r\n   ```\r\n   \r\n   <sup>Created on 2021-03-01 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>\r\n   \r\n   as used in the `ListConverter`: \r\n   \r\n   ```cpp\r\n   template <typename T>\r\n   class RListConverter : public ListConverter<T, RConverter, RConverterTrait> {\r\n    public:\r\n     Status Extend(SEXP x, int64_t size) override {\r\n       RETURN_NOT_OK(this->Reserve(size));\r\n   \r\n       RVectorType rtype = GetVectorType(x);\r\n       if (rtype != LIST) {\r\n         return Status::Invalid(\"Cannot convert to list type\");\r\n       }\r\n   \r\n       auto append_value = [this](SEXP value) {\r\n         auto n = vctrs::short_vec_size(value);    // <---------- HERE\r\n         RETURN_NOT_OK(this->list_builder_->ValidateOverflow(n));\r\n         RETURN_NOT_OK(this->list_builder_->Append());\r\n         return this->value_converter_.get()->Extend(value, n);\r\n       };\r\n       auto append_null = [this]() { return this->list_builder_->AppendNull(); };\r\n       return RVectorVisitor<SEXP>::Visit(x, size, append_null, append_value);\r\n     }\r\n   };\r\n   ```\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T09:25:18.225+0000",
                    "updated": "2021-03-01T09:25:18.225+0000",
                    "started": "2021-03-01T09:25:18.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559285",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-787858188\n\n\n   In terms of the `sf` example, I get: \r\n   \r\n   ``` r\r\n   df_simple <- sf::read_sf(system.file(\"shape/nc.shp\", package = \"sf\"))\r\n   vctrs::vec_size(df_simple$geometry)\r\n   #> [1] 100\r\n   class(df_simple$geometry)\r\n   #> [1] \"sfc_MULTIPOLYGON\" \"sfc\"\r\n   \r\n   vctrs::vec_size(df_simple$geometry[[1]])\r\n   #> Error: Input must be a vector, not a `XY/MULTIPOLYGON/sfg` object.\r\n   class(df_simple$geometry[[1]])\r\n   #> [1] \"XY\"           \"MULTIPOLYGON\" \"sfg\"\r\n   ```\r\n   \r\n   <sup>Created on 2021-03-01 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>\r\n   \r\n   I'm not sure this is a `vctrs` or an `sf` issue. cc @lionel- @edzer \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T10:59:22.885+0000",
                    "updated": "2021-03-01T10:59:22.885+0000",
                    "started": "2021-03-01T10:59:22.884+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559307",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-787890349\n\n\n   I've put a fix in place, at least momentarily\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T11:53:24.183+0000",
                    "updated": "2021-03-01T11:53:24.183+0000",
                    "started": "2021-03-01T11:53:24.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559336",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-788404473\n\n\n   Ok, I've looked at this more, and my first reprex was a bit _too_ minimal it looks like. Here is another example/test we could/should add to exercise this (I'm happy to push a commit including it to this branch if you would like):\r\n   \r\n   ```\r\n   test_that(\"sf-like list columns\", {\r\n     df <- structure(list(col = structure(list(structure(list(list(structure(1))), class = \"inner\")), class = \"outer\")), class = \"data.frame\")\r\n     expect_array_roundtrip(df)\r\n   })\r\n   ```\r\n   \r\n   The fix that you made does fix an error on the `inner` \"class\", but I believe that https://github.com/apache/arrow/blob/fe1c774813e9ce7123f6bb02c43bca1664e8370b/r/src/r_to_arrow.cpp#L1014 is tripping on the `outer` \"class\".\r\n   \r\n   This was extra-fun to debug (and explains why the sf example above worked) because it looks like sf [registers some vctrs](https://github.com/r-spatial/sf/blob/master/R/tidyverse-vctrs.R) methods which mean that these will work so long as those have been registered (i.e. whenever `sf` is used). \r\n   \r\n   I suspect that it would be very infrequent to have someone want to round-trip a parquet file including sf data without also having sf loaded (so in practice the current state would be fine), attempting to debug what's going on is super complicated (and any other non-standard vctrs that use that outer level style classing would similarly fail).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-01T23:42:45.252+0000",
                    "updated": "2021-03-01T23:42:45.252+0000",
                    "started": "2021-03-01T23:42:45.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559643",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559651",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson closed pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T00:03:19.322+0000",
                    "updated": "2021-03-02T00:03:19.322+0000",
                    "started": "2021-03-02T00:03:19.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559651",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/559655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-788416300\n\n\n   Followup is ARROW-11832. Thanks @jonkeane for digging!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-02T00:06:36.187+0000",
                    "updated": "2021-03-02T00:06:36.187+0000",
                    "started": "2021-03-02T00:06:36.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "559655",
                    "issueId": "13340313"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/worklog/577537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8650:\nURL: https://github.com/apache/arrow/pull/8650#issuecomment-814086802\n\n\n   `df` above is not a valid data frame, so that's ok, however, it indeed looks like there is a follow up problem: \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   df <- structure(list(col = structure(list(structure(list(list(structure(1))), class = \"inner\")), class = \"outer\")), class = \"data.frame\")\r\n   nrow(df)\r\n   #> [1] 0\r\n   vctrs::vec_size(df)\r\n   #> Error: Corrupt data frame: row.names are missing\r\n   Array$create(df)\r\n   #> Error: Corrupt data frame: row.names are missing\r\n   \r\n   df <- structure(list(col = structure(list(structure(list(list(structure(1))), class = \"inner\")), class = \"outer\")), class = \"data.frame\", row.names = c(NA, -1L))\r\n   nrow(df)\r\n   #> [1] 1\r\n   vctrs::vec_size(df)\r\n   #> [1] 1\r\n   Array$create(df)\r\n   #> Error: Input must be a vector, not a <outer> object.\r\n   ```\r\n   \r\n   <sup>Created on 2021-04-06 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T12:39:38.979+0000",
                    "updated": "2021-04-06T12:39:38.979+0000",
                    "started": "2021-04-06T12:39:38.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577537",
                    "issueId": "13340313"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3bc87475[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27acfd71[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6436312b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@24b11fa9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6aff1e9f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5a42abe3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fa876e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@23486ce2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31d195f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7e833d98[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32d0139f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@521f465b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 02 00:03:08 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-02T00:03:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10570/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-12T18:13:42.000+0000",
        "updated": "2021-04-06T12:39:40.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Use Converter API to convert SEXP to Array/ChunkedArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340313/comment/17293253",
                    "id": "17293253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 8650\n[https://github.com/apache/arrow/pull/8650]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-03-02T00:03:08.256+0000",
                    "updated": "2021-03-02T00:03:08.256+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kjcg:",
        "customfield_12314139": null
    }
}