{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13442511",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511",
    "key": "ARROW-16413",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
            "name": "Blocker",
            "id": "1"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16413/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 41,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/764325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#issuecomment-1113490406\n\n   https://issues.apache.org/jira/browse/ARROW-16413\n\n\n",
                    "created": "2022-04-29T16:12:41.949+0000",
                    "updated": "2022-04-29T16:12:41.949+0000",
                    "started": "2022-04-29T16:12:41.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764325",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/764326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#issuecomment-1113490422\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-29T16:12:43.894+0000",
                    "updated": "2022-04-29T16:12:43.894+0000",
                    "started": "2022-04-29T16:12:43.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764326",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/764414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r862066616\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2562,6 +2562,43 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_inspect_file_fsspec(s3_server):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n+    from pyarrow.fs import S3FileSystem, _ensure_filesystem\n+    import pyarrow.dataset as ds\n+\n+    host, port, access_key, secret_key = s3_server['connection']\n+\n+    # create bucket + file with pyarrow\n+    fs = S3FileSystem(\n+        access_key=access_key,\n+        secret_key=secret_key,\n+        endpoint_override='{}:{}'.format(host, port),\n+        scheme='http'\n+    )\n+    fs.create_dir(\"mybucket\")\n+    table = pa.table({'a': [1, 2, 3]})\n+    path = \"mybucket/data.parquet\"\n+    with fs.open_output_stream(path) as out:\n+        pq.write_table(table, out)\n+\n+    # read using fsspec filesystem\n+    import s3fs\n+    fsspec_fs = s3fs.S3FileSystem(\n+        key=access_key, secret=secret_key,\n+        client_kwargs={\"endpoint_url\": f\"http://{host}:{port}\"}\n+    )\n+    assert fsspec_fs.ls(\"mybucket\") == ['mybucket/data.parquet']\n+\n+    # inspect using dataset file format\n+    format = ds.ParquetFileFormat()\n+    filesystem = _ensure_filesystem(fsspec_fs)\n+    schema = format.inspect(path, filesystem)\n+    assert schema.equals(table.schema)\n\nReview Comment:\n   should we also test the other two updated methods here?\n\n\n\n",
                    "created": "2022-04-29T18:50:58.813+0000",
                    "updated": "2022-04-29T18:50:58.813+0000",
                    "started": "2022-04-29T18:50:58.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764414",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/764985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r862933302\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2562,6 +2562,43 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_inspect_file_fsspec(s3_server):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n+    from pyarrow.fs import S3FileSystem, _ensure_filesystem\n+    import pyarrow.dataset as ds\n+\n+    host, port, access_key, secret_key = s3_server['connection']\n+\n+    # create bucket + file with pyarrow\n+    fs = S3FileSystem(\n+        access_key=access_key,\n+        secret_key=secret_key,\n+        endpoint_override='{}:{}'.format(host, port),\n+        scheme='http'\n+    )\n+    fs.create_dir(\"mybucket\")\n+    table = pa.table({'a': [1, 2, 3]})\n+    path = \"mybucket/data.parquet\"\n+    with fs.open_output_stream(path) as out:\n+        pq.write_table(table, out)\n+\n+    # read using fsspec filesystem\n+    import s3fs\n+    fsspec_fs = s3fs.S3FileSystem(\n+        key=access_key, secret=secret_key,\n+        client_kwargs={\"endpoint_url\": f\"http://{host}:{port}\"}\n+    )\n+    assert fsspec_fs.ls(\"mybucket\") == ['mybucket/data.parquet']\n+\n+    # inspect using dataset file format\n+    format = ds.ParquetFileFormat()\n+    filesystem = _ensure_filesystem(fsspec_fs)\n+    schema = format.inspect(path, filesystem)\n+    assert schema.equals(table.schema)\n\nReview Comment:\n   Yes, for now I only did a quick PR already putting in the test that I was working with to reproduce it, but I should certainly expand that.\n\n\n\n",
                    "created": "2022-05-02T15:12:59.178+0000",
                    "updated": "2022-05-02T15:12:59.178+0000",
                    "started": "2022-05-02T15:12:59.178+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764985",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863578249\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -783,11 +787,17 @@ cdef class FileFormat(_Weakrefable):\n         if partition_expression is None:\n             partition_expression = _true\n \n-        c_source = _make_file_source(file, filesystem)\n-        c_fragment = <shared_ptr[CFragment]> GetResultValue(\n-            self.format.MakeFragment(move(c_source),\n-                                     partition_expression.unwrap(),\n-                                     <shared_ptr[CSchema]>nullptr))\n+        cdef:\n+            CFileSource c_source = _make_file_source(file, filesystem)\n+            CResult[shared_ptr[CFileFragment]] c_result\n+            CExpression c_partition_expression = partition_expression.unwrap()\n+\n+        with nogil:\n+            c_result = self.format.MakeFragment(\n\nReview Comment:\n   I wasn't able to write a test that needs this change for `make_fragment`. But I also suppose it doesn't hurt to add the `with nogil` ?\n\n\n\n",
                    "created": "2022-05-03T08:42:46.263+0000",
                    "updated": "2022-05-03T08:42:46.263+0000",
                    "started": "2022-05-03T08:42:46.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765327",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#issuecomment-1115983867\n\n   Did you find out where the code was hanging previously?\n\n\n",
                    "created": "2022-05-03T11:17:08.936+0000",
                    "updated": "2022-05-03T11:17:08.936+0000",
                    "started": "2022-05-03T11:17:08.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765364",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863678348\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -3058,25 +3108,52 @@ def test_feather_format(tempdir, dataset_reader):\n         dataset_reader.to_table(ds.dataset(basedir, format=\"feather\"))\n \n \n-def _create_parquet_dataset_simple(root_path):\n+def _write_metadata_filesystem(\n+    schema, path, filesystem, metadata_collector=None, **kwargs\n+):\n     \"\"\"\n-    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    Version of pq.write_metadata that works with a filesystem\n     \"\"\"\n+    with filesystem.open_output_stream(path) as sink:\n+        writer = pq.ParquetWriter(sink, schema, **kwargs)\n+        writer.close()\n \n+    if metadata_collector is not None:\n+        # ParquetWriter doesn't expose the metadata until it's written. Write\n+        # it and read it again.\n+        with filesystem.open_input_file(path) as source:\n+            metadata = pq.read_metadata(source)\n+        for m in metadata_collector:\n+            metadata.append_row_groups(m)\n+        with filesystem.open_output_stream(path) as sink:\n+            metadata.write_metadata_file(sink)\n+\n+\n+def _create_parquet_dataset_simple(root_path, filesystem=None):\n+    \"\"\"\n+    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    \"\"\"\n     metadata_collector = []\n\nReview Comment:\n   If `metadata_collector` is an empty list then `metadata.append_row_groups` is never called above? Am I reading this wrong?\n\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2582,6 +2600,38 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_file_format_inspect_fsspec(s3_filesystem):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n+    from pyarrow.fs import _ensure_filesystem\n+\n+    fs, (host, port, access_key, secret_key) = s3_filesystem\n+\n+    # create bucket + file with pyarrow\n+    table = pa.table({'a': [1, 2, 3]})\n+    path = \"mybucket/data.parquet\"\n+    with fs.open_output_stream(path) as out:\n+        pq.write_table(table, out)\n+\n+    # read using fsspec filesystem\n+    import s3fs\n\nReview Comment:\n   Does this test get skipped if `s3fs` is not installed?\n\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -3092,6 +3169,30 @@ def test_parquet_dataset_factory(tempdir):\n     assert result.num_rows == 40\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_parquet_dataset_factory_fsspec(s3_filesystem):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n+    fs, (host, port, access_key, secret_key) = s3_filesystem\n+\n+    # create dataset with pyarrow\n+    root_path = \"mybucket/test_parquet_dataset\"\n+    metadata_path, table = _create_parquet_dataset_simple(root_path, fs)\n+\n+    # read using fsspec filesystem\n+    import s3fs\n\nReview Comment:\n   Same question re: skipping.\n\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -3058,25 +3108,52 @@ def test_feather_format(tempdir, dataset_reader):\n         dataset_reader.to_table(ds.dataset(basedir, format=\"feather\"))\n \n \n-def _create_parquet_dataset_simple(root_path):\n+def _write_metadata_filesystem(\n+    schema, path, filesystem, metadata_collector=None, **kwargs\n+):\n     \"\"\"\n-    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    Version of pq.write_metadata that works with a filesystem\n     \"\"\"\n+    with filesystem.open_output_stream(path) as sink:\n+        writer = pq.ParquetWriter(sink, schema, **kwargs)\n+        writer.close()\n \n+    if metadata_collector is not None:\n+        # ParquetWriter doesn't expose the metadata until it's written. Write\n+        # it and read it again.\n+        with filesystem.open_input_file(path) as source:\n+            metadata = pq.read_metadata(source)\n+        for m in metadata_collector:\n+            metadata.append_row_groups(m)\n+        with filesystem.open_output_stream(path) as sink:\n+            metadata.write_metadata_file(sink)\n+\n+\n+def _create_parquet_dataset_simple(root_path, filesystem=None):\n+    \"\"\"\n+    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    \"\"\"\n     metadata_collector = []\n \n     for i in range(4):\n         table = pa.table({'f1': [i] * 10, 'f2': np.random.randn(10)})\n         pq.write_to_dataset(\n-            table, str(root_path), metadata_collector=metadata_collector\n+            table, str(root_path), filesystem=filesystem,\n+            metadata_collector=metadata_collector\n         )\n \n-    metadata_path = str(root_path / '_metadata')\n+    metadata_path = str(root_path) + '/_metadata'\n\nReview Comment:\n   This should be the same thing?\n\n\n\n",
                    "created": "2022-05-03T11:23:01.399+0000",
                    "updated": "2022-05-03T11:23:01.399+0000",
                    "started": "2022-05-03T11:23:01.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765367",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765369",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863680671\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2582,6 +2600,38 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_file_format_inspect_fsspec(s3_filesystem):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n+    from pyarrow.fs import _ensure_filesystem\n+\n+    fs, (host, port, access_key, secret_key) = s3_filesystem\n+\n+    # create bucket + file with pyarrow\n+    table = pa.table({'a': [1, 2, 3]})\n+    path = \"mybucket/data.parquet\"\n+    with fs.open_output_stream(path) as out:\n+        pq.write_table(table, out)\n+\n+    # read using fsspec filesystem\n+    import s3fs\n\nReview Comment:\n   Good catch, need to add some skips for this\n\n\n\n",
                    "created": "2022-05-03T11:25:51.612+0000",
                    "updated": "2022-05-03T11:25:51.612+0000",
                    "started": "2022-05-03T11:25:51.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765369",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863681116\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -3058,25 +3108,52 @@ def test_feather_format(tempdir, dataset_reader):\n         dataset_reader.to_table(ds.dataset(basedir, format=\"feather\"))\n \n \n-def _create_parquet_dataset_simple(root_path):\n+def _write_metadata_filesystem(\n+    schema, path, filesystem, metadata_collector=None, **kwargs\n+):\n     \"\"\"\n-    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    Version of pq.write_metadata that works with a filesystem\n     \"\"\"\n+    with filesystem.open_output_stream(path) as sink:\n+        writer = pq.ParquetWriter(sink, schema, **kwargs)\n+        writer.close()\n \n+    if metadata_collector is not None:\n+        # ParquetWriter doesn't expose the metadata until it's written. Write\n+        # it and read it again.\n+        with filesystem.open_input_file(path) as source:\n+            metadata = pq.read_metadata(source)\n+        for m in metadata_collector:\n+            metadata.append_row_groups(m)\n+        with filesystem.open_output_stream(path) as sink:\n+            metadata.write_metadata_file(sink)\n+\n+\n+def _create_parquet_dataset_simple(root_path, filesystem=None):\n+    \"\"\"\n+    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    \"\"\"\n     metadata_collector = []\n\nReview Comment:\n   This list gets passed to (and populated by) `write_to_dataset` a few lines below. It's not the greatest API, but that is how it is currently needs to be done.\n\n\n\n",
                    "created": "2022-05-03T11:26:41.674+0000",
                    "updated": "2022-05-03T11:26:41.674+0000",
                    "started": "2022-05-03T11:26:41.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765371",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863681683\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -3058,25 +3108,52 @@ def test_feather_format(tempdir, dataset_reader):\n         dataset_reader.to_table(ds.dataset(basedir, format=\"feather\"))\n \n \n-def _create_parquet_dataset_simple(root_path):\n+def _write_metadata_filesystem(\n+    schema, path, filesystem, metadata_collector=None, **kwargs\n+):\n     \"\"\"\n-    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    Version of pq.write_metadata that works with a filesystem\n     \"\"\"\n+    with filesystem.open_output_stream(path) as sink:\n+        writer = pq.ParquetWriter(sink, schema, **kwargs)\n+        writer.close()\n \n+    if metadata_collector is not None:\n+        # ParquetWriter doesn't expose the metadata until it's written. Write\n+        # it and read it again.\n+        with filesystem.open_input_file(path) as source:\n+            metadata = pq.read_metadata(source)\n+        for m in metadata_collector:\n+            metadata.append_row_groups(m)\n+        with filesystem.open_output_stream(path) as sink:\n+            metadata.write_metadata_file(sink)\n+\n+\n+def _create_parquet_dataset_simple(root_path, filesystem=None):\n+    \"\"\"\n+    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    \"\"\"\n     metadata_collector = []\n \n     for i in range(4):\n         table = pa.table({'f1': [i] * 10, 'f2': np.random.randn(10)})\n         pq.write_to_dataset(\n-            table, str(root_path), metadata_collector=metadata_collector\n+            table, str(root_path), filesystem=filesystem,\n+            metadata_collector=metadata_collector\n         )\n \n-    metadata_path = str(root_path / '_metadata')\n+    metadata_path = str(root_path) + '/_metadata'\n\nReview Comment:\n   For S3, we are not using a pathlib.Path anymore, so the `/` version doesn't work. I should maybe use `os.path.join` to make it more robust though instead of hardcoding the `/`\n\n\n\n",
                    "created": "2022-05-03T11:27:36.737+0000",
                    "updated": "2022-05-03T11:27:36.737+0000",
                    "started": "2022-05-03T11:27:36.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765372",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863685450\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -3058,25 +3108,52 @@ def test_feather_format(tempdir, dataset_reader):\n         dataset_reader.to_table(ds.dataset(basedir, format=\"feather\"))\n \n \n-def _create_parquet_dataset_simple(root_path):\n+def _write_metadata_filesystem(\n+    schema, path, filesystem, metadata_collector=None, **kwargs\n+):\n     \"\"\"\n-    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    Version of pq.write_metadata that works with a filesystem\n     \"\"\"\n+    with filesystem.open_output_stream(path) as sink:\n+        writer = pq.ParquetWriter(sink, schema, **kwargs)\n+        writer.close()\n \n+    if metadata_collector is not None:\n+        # ParquetWriter doesn't expose the metadata until it's written. Write\n+        # it and read it again.\n+        with filesystem.open_input_file(path) as source:\n+            metadata = pq.read_metadata(source)\n+        for m in metadata_collector:\n+            metadata.append_row_groups(m)\n+        with filesystem.open_output_stream(path) as sink:\n+            metadata.write_metadata_file(sink)\n+\n+\n+def _create_parquet_dataset_simple(root_path, filesystem=None):\n+    \"\"\"\n+    Creates a simple (flat files, no nested partitioning) Parquet dataset\n+    \"\"\"\n     metadata_collector = []\n \n     for i in range(4):\n         table = pa.table({'f1': [i] * 10, 'f2': np.random.randn(10)})\n         pq.write_to_dataset(\n-            table, str(root_path), metadata_collector=metadata_collector\n+            table, str(root_path), filesystem=filesystem,\n+            metadata_collector=metadata_collector\n         )\n \n-    metadata_path = str(root_path / '_metadata')\n+    metadata_path = str(root_path) + '/_metadata'\n\nReview Comment:\n   Ah, no, if it's an abstract path then it needs `/` indeed.\n\n\n\n",
                    "created": "2022-05-03T11:33:42.387+0000",
                    "updated": "2022-05-03T11:33:42.387+0000",
                    "started": "2022-05-03T11:33:42.387+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765377",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#issuecomment-1116007214\n\n   The issue was caused by the gil being held?\n\n\n",
                    "created": "2022-05-03T11:46:32.139+0000",
                    "updated": "2022-05-03T11:46:32.139+0000",
                    "started": "2022-05-03T11:46:32.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765378",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#issuecomment-1116012291\n\n   Basically: the main thread in Python would call Inspect() without releasing the GIL; the Parquet Inspect() implementation would kick off a file read in a background thread and block, waiting for the future to complete. The background thread would try to call into Python to complete the read but would get stuck acquiring the GIL since the main thread was still holding it.\r\n   \r\n   Short term we can release the GIL, longer term it might be nice if we could avoid a background thread for synchronous situations like this.\n\n\n",
                    "created": "2022-05-03T11:53:18.197+0000",
                    "updated": "2022-05-03T11:53:18.197+0000",
                    "started": "2022-05-03T11:53:18.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765381",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863698300\n\n\n##########\nci/scripts/integration_dask.sh:\n##########\n@@ -39,3 +39,4 @@ pytest -v --pyargs dask.dataframe.io.tests.test_orc\n # test_pandas_timestamp_overflow_pyarrow is skipped because of ARROW-15720 - can be removed once 2022.02.1 is out\n pytest -v --pyargs dask.dataframe.io.tests.test_parquet \\\n   -k \"not test_to_parquet_pyarrow_w_inconsistent_schema_by_partition_fails_by_default and not test_timeseries_nulls_in_schema and not test_pandas_timestamp_overflow_pyarrow\"\n+pytest -v --pyargs dask.bytes.tests.test_s3\n\nReview Comment:\n   Add a comment explaining why we do this?\n\n\n\n",
                    "created": "2022-05-03T11:55:45.011+0000",
                    "updated": "2022-05-03T11:55:45.011+0000",
                    "started": "2022-05-03T11:55:45.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765383",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863698934\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -783,11 +787,17 @@ cdef class FileFormat(_Weakrefable):\n         if partition_expression is None:\n             partition_expression = _true\n \n-        c_source = _make_file_source(file, filesystem)\n-        c_fragment = <shared_ptr[CFragment]> GetResultValue(\n-            self.format.MakeFragment(move(c_source),\n-                                     partition_expression.unwrap(),\n-                                     <shared_ptr[CSchema]>nullptr))\n+        cdef:\n+            CFileSource c_source = _make_file_source(file, filesystem)\n+            CResult[shared_ptr[CFileFragment]] c_result\n+            CExpression c_partition_expression = partition_expression.unwrap()\n+\n+        with nogil:\n+            c_result = self.format.MakeFragment(\n\nReview Comment:\n   If `MakeFragment` is self-contained and doesn't call into arbitrary IO code then it shouldn't be necessary.\n\n\n\n",
                    "created": "2022-05-03T11:56:39.481+0000",
                    "updated": "2022-05-03T11:56:39.481+0000",
                    "started": "2022-05-03T11:56:39.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765385",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863699273\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2582,6 +2600,38 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_file_format_inspect_fsspec(s3_filesystem):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n\nReview Comment:\n   Can we simply use a fsspec local filesystem to avoid the S3 scaffolding?\n\n\n\n",
                    "created": "2022-05-03T11:57:14.533+0000",
                    "updated": "2022-05-03T11:57:14.533+0000",
                    "started": "2022-05-03T11:57:14.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765387",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863699918\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2582,6 +2600,38 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_file_format_inspect_fsspec(s3_filesystem):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n\nReview Comment:\n   I was just trying exactly the same :)\n\n\n\n",
                    "created": "2022-05-03T11:58:09.610+0000",
                    "updated": "2022-05-03T11:58:09.610+0000",
                    "started": "2022-05-03T11:58:09.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765389",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863710252\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2582,6 +2600,38 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_file_format_inspect_fsspec(s3_filesystem):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n\nReview Comment:\n   So it does work (I checked the test hangs with a local fs as well, before applying the fix), with the caveat that I need to manually construct the PyFileSystem with FSSpecHandler, because if you pass an actual fsspec local filesystem, we internally convert it into a arrow native local filesystem:\r\n   \r\n   https://github.com/apache/arrow/blob/7a0f00c16e084d194ae53d209b33b809cfc8f2d5/python/pyarrow/fs.py#L109-L113\n\n\n\n",
                    "created": "2022-05-03T12:12:30.515+0000",
                    "updated": "2022-05-03T12:12:30.515+0000",
                    "started": "2022-05-03T12:12:30.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765394",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863711082\n\n\n##########\npython/pyarrow/tests/test_dataset.py:\n##########\n@@ -2582,6 +2600,38 @@ def test_open_dataset_from_fsspec(tempdir):\n     assert dataset.schema.equals(table.schema)\n \n \n+@pytest.mark.parquet\n+@pytest.mark.s3\n+def test_file_format_inspect_fsspec(s3_filesystem):\n+    # https://issues.apache.org/jira/browse/ARROW-16413\n\nReview Comment:\n   That's actually also the reason that our nightly integration tests with dask didn't catch this, because we only were running the main parquet tests that didn't use S3 but only a local filesystem\n\n\n\n",
                    "created": "2022-05-03T12:13:10.563+0000",
                    "updated": "2022-05-03T12:13:10.563+0000",
                    "started": "2022-05-03T12:13:10.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765396",
                    "issueId": "13442511"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/worklog/765400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13033:\nURL: https://github.com/apache/arrow/pull/13033#discussion_r863720613\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -783,11 +787,17 @@ cdef class FileFormat(_Weakrefable):\n         if partition_expression is None:\n             partition_expression = _true\n \n-        c_source = _make_file_source(file, filesystem)\n-        c_fragment = <shared_ptr[CFragment]> GetResultValue(\n-            self.format.MakeFragment(move(c_source),\n-                                     partition_expression.unwrap(),\n-                                     <shared_ptr[CSchema]>nullptr))\n+        cdef:\n+            CFileSource c_source = _make_file_source(file, filesystem)\n+            CResult[shared_ptr[CFileFragment]] c_result\n+            CExpression c_partition_expression = partition_expression.unwrap()\n+\n+        with nogil:\n+            c_result = self.format.MakeFragment(\n\nReview Comment:\n   Indeed, it seems that `MakeFragment` just takes the input path / source and filesystem and puts that in a FileFragment, and for example doesn't actually check the file for the schema (that is only done the first time when accessing the schema in `ReadPhysicalSchema`, and that part in cython is correctly releasing the GIL)\n\n\n\n",
                    "created": "2022-05-03T12:26:21.662+0000",
                    "updated": "2022-05-03T12:26:21.662+0000",
                    "started": "2022-05-03T12:26:21.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765400",
                    "issueId": "13442511"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 24600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@20fee76f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f8f74b2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c6611c3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5868d019[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@771cf173[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e93df7b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32372163[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2cc1c724[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c462ca6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5c4e5452[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57794a81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@75234fad[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 24600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 03 16:50:28 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-05-03T16:50:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16413/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-04-29T12:51:43.000+0000",
        "updated": "2022-07-27T12:55:06.000+0000",
        "timeoriginalestimate": null,
        "description": "See https://github.com/dask/dask/pull/8993 for details. \r\n\r\nWhen using an fsspec filesystem (or maybe more generally a PyFileSystem), inspecting a file through the FileFormat.inspect is hanging (this eg happens in ParquetDatasetFactory)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 24600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] FileFormat::GetReaderAsync hangs with an fsspec filesystem",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13442511/comment/17531293",
                    "id": "17531293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 13033\n[https://github.com/apache/arrow/pull/13033]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2022-05-03T16:50:28.721+0000",
                    "updated": "2022-05-03T16:50:28.721+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z11y3k:",
        "customfield_12314139": null
    }
}