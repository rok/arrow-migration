{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13111172",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172",
    "key": "ARROW-1705",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1705/votes",
            "votes": 2,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5064f3e0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69edbfd3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7286ddb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@33f59ca[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@200de59e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@73a490c8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37a66dd2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4eae93e5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c0bebb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@56b55c9b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52797362[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@68f2e373[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jan 31 15:48:10 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-01-30T20:06:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1705/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2017-10-21T16:31:16.000+0000",
        "updated": "2018-01-31T15:48:24.000+0000",
        "timeoriginalestimate": null,
        "description": "See https://github.com/apache/arrow/issues/1217",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Create StructArray from sequence of dicts given a known data type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16214016",
                    "id": "16214016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Github user wesm commented on the issue:\n\n    https://github.com/apache/arrow/issues/1217\n  \n    Hi, we do not yet support the syntax you are using for creating an array of structs. After adding missing square brackets:\r\n    \r\n    ```\r\n    In [2]: pa.array([{\"foo\":\"bar\"}, {\"foo\":\"bar\"}, {\"foo\":\"bar\"}])\r\n    ---------------------------------------------------------------------------\r\n    ArrowNotImplementedError                  Traceback (most recent call last)\r\n    <ipython-input-2-5383db65d4fd> in <module>()\r\n    ----> 1 pa.array([{\"foo\":\"bar\"}, {\"foo\":\"bar\"}, {\"foo\":\"bar\"}])\r\n    \r\n    /home/wesm/code/arrow/python/pyarrow/array.pxi in pyarrow.lib.array (/home/wesm/code/arrow/python/build/temp.linux-x86_64-3.5/lib.cxx:25024)()\r\n    \r\n    /home/wesm/code/arrow/python/pyarrow/array.pxi in pyarrow.lib._sequence_to_array (/home/wesm/code/arrow/python/build/temp.linux-x86_64-3.5/lib.cxx:23628)()\r\n    \r\n    /home/wesm/code/arrow/python/pyarrow/error.pxi in pyarrow.lib.check_status (/home/wesm/code/arrow/python/build/temp.linux-x86_64-3.5/lib.cxx:8242)()\r\n    \r\n    ArrowNotImplementedError: /home/wesm/code/arrow/cpp/src/arrow/python/builtin_convert.cc:740 code: InferArrowTypeAndSize(obj, &size, &type)\r\n    /home/wesm/code/arrow/cpp/src/arrow/python/builtin_convert.cc:319 code: InferArrowType(obj, out_type)\r\n    /home/wesm/code/arrow/cpp/src/arrow/python/builtin_convert.cc:299 code: seq_visitor.Visit(obj)\r\n    /home/wesm/code/arrow/cpp/src/arrow/python/builtin_convert.cc:180 code: VisitElem(ref, level)\r\n    No type inference for dicts\r\n    ```\r\n    \r\n    I would like to support this, but implementing it is quite some work. Patches are welcome. I opened https://issues.apache.org/jira/browse/ARROW-1705 to track the feature request. \n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-21T16:31:35.781+0000",
                    "updated": "2017-10-21T16:31:35.781+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16336094",
                    "id": "16336094",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Before this, do we need to first add struct type support to the `pa.array` factory function? Currently it doesn't seem supported:\r\n\r\n{code}\r\n>>> ty = pa.struct([pa.field('key', pa.int32()), pa.field('value', pa.float64())])\r\n>>> pa.array([[1, 2], [3, 4]], type=ty)\r\nTraceback (most recent call last):\r\n  File \"<ipython-input-29-f5e8f7daa504>\", line 1, in <module>\r\n    pa.array([[1, 2], [3, 4]], type=ty)\r\n  File \"array.pxi\", line 174, in pyarrow.lib.array\r\n  File \"array.pxi\", line 29, in pyarrow.lib._sequence_to_array\r\n  File \"error.pxi\", line 85, in pyarrow.lib.check_status\r\nArrowNotImplementedError: No type converter implemented for struct<key: int32, value: double>\r\n{code}\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-23T17:14:04.119+0000",
                    "updated": "2018-01-23T17:17:13.715+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16336505",
                    "id": "16336505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "That's right. For a struct type {{pyarrow.array}} will need to be able to accept\r\n\r\n* tuples\r\n* lists\r\n* dicts\r\n\r\nbut it's probably fair to disallow a mix of these. The dict case seems to be the one that comes up the most often so far",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-23T22:54:03.223+0000",
                    "updated": "2018-01-23T22:54:03.223+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16343654",
                    "id": "16343654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ok, another question. Is there a reason {{Status AppendNull()}} is defined on all ArrayBuilder subclasses but not ArrayBuilder itself?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-29T17:19:41.350+0000",
                    "updated": "2018-01-29T17:19:41.350+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16343694",
                    "id": "16343694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1530: [WIP] ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530\n \n \n   Accept passing a list of dicts to pa.array() if a struct type is given.\r\n   \r\n   Based on PR #1513.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-29T17:41:31.517+0000",
                    "updated": "2018-01-29T17:41:31.517+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16344482",
                    "id": "16344482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: [WIP] ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164638046\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -369,63 +384,55 @@ class TypedConverter : public SeqConverter {\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    // static_cast<> below devirtualizes the method calls (for performance?)\n+    if (obj == Py_None) {\n+      return static_cast<Derived*>(this)->AppendNull();\n+    } else {\n+      return static_cast<Derived*>(this)->AppendItem(obj);\n+    }\n+  }\n+\n+  Status AppendMultiple(PyObject* obj, int64_t size) override {\n     /// Ensure we've allocated enough space\n     RETURN_NOT_OK(this->typed_builder_->Reserve(size));\n     // Iterate over the items adding each one\n     if (PySequence_Check(obj)) {\n       for (int64_t i = 0; i < size; ++i) {\n         OwnedRef ref(PySequence_GetItem(obj, i));\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-      }\n-    } else if (PyObject_HasAttrString(obj, \"__iter__\")) {\n-      PyObject* iter = PyObject_GetIter(obj);\n-      OwnedRef iter_ref(iter);\n-      PyObject* item;\n-      int64_t i = 0;\n-      // To allow people with long generators to only convert a subset, stop\n-      // consuming at size.\n-      while ((item = PyIter_Next(iter)) && i < size) {\n-        OwnedRef ref(item);\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-        ++i;\n-      }\n-      if (size != i) {\n-        RETURN_NOT_OK(this->typed_builder_->Resize(i));\n+        RETURN_NOT_OK(static_cast<Derived*>(this)->AppendSingle(ref.obj()));\n       }\n     } else {\n-      return Status::TypeError(\"Object is not a sequence or iterable\");\n+      return Status::TypeError(\"Object is not a sequence\");\n     }\n     return Status::OK();\n   }\n+\n+ protected:\n+  // Append a non-missing item\n+  virtual Status AppendItem(PyObject* obj) = 0;\n \n Review comment:\n   Making this virtual has performance implications because of inlining (this module is using CRTP to simulate virtual functions without the dynamic dispatch); in practice it may not matter, though\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T04:26:34.806+0000",
                    "updated": "2018-01-30T04:26:34.806+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16344967",
                    "id": "16344967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: [WIP] ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164724035\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -369,63 +384,55 @@ class TypedConverter : public SeqConverter {\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    // static_cast<> below devirtualizes the method calls (for performance?)\n+    if (obj == Py_None) {\n+      return static_cast<Derived*>(this)->AppendNull();\n+    } else {\n+      return static_cast<Derived*>(this)->AppendItem(obj);\n+    }\n+  }\n+\n+  Status AppendMultiple(PyObject* obj, int64_t size) override {\n     /// Ensure we've allocated enough space\n     RETURN_NOT_OK(this->typed_builder_->Reserve(size));\n     // Iterate over the items adding each one\n     if (PySequence_Check(obj)) {\n       for (int64_t i = 0; i < size; ++i) {\n         OwnedRef ref(PySequence_GetItem(obj, i));\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-      }\n-    } else if (PyObject_HasAttrString(obj, \"__iter__\")) {\n-      PyObject* iter = PyObject_GetIter(obj);\n-      OwnedRef iter_ref(iter);\n-      PyObject* item;\n-      int64_t i = 0;\n-      // To allow people with long generators to only convert a subset, stop\n-      // consuming at size.\n-      while ((item = PyIter_Next(iter)) && i < size) {\n-        OwnedRef ref(item);\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-        ++i;\n-      }\n-      if (size != i) {\n-        RETURN_NOT_OK(this->typed_builder_->Resize(i));\n+        RETURN_NOT_OK(static_cast<Derived*>(this)->AppendSingle(ref.obj()));\n       }\n     } else {\n-      return Status::TypeError(\"Object is not a sequence or iterable\");\n+      return Status::TypeError(\"Object is not a sequence\");\n     }\n     return Status::OK();\n   }\n+\n+ protected:\n+  // Append a non-missing item\n+  virtual Status AppendItem(PyObject* obj) = 0;\n \n Review comment:\n   Actually this PR is not ondoing the CRTP trick, so I don't think it has performance implications?\r\n   \r\n   I was adding this for two reasons:\r\n   1) for consistency with `AppendNull` which has a default version defined on `TypedConverterVisitor` (it only needs to be specialized for struct types)\r\n   2) for documentation, since it makes it more obvious that subclasses are supposed to define `AppendItem`\r\n   \r\n   Should I remove it? Or is there a way to have a non-virtual unimplemented base method?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T12:19:58.452+0000",
                    "updated": "2018-01-30T12:19:58.452+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345208",
                    "id": "16345208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361626370\n \n \n   Rebased\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:20:38.366+0000",
                    "updated": "2018-01-30T15:20:38.366+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345214",
                    "id": "16345214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361627049\n \n \n   Did you use a specific git incantation for rebasing? Or do you just fix all conflicts by hand?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:22:39.429+0000",
                    "updated": "2018-01-30T15:22:39.429+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345219",
                    "id": "16345219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361628155\n \n \n   In this case I had to fix by hand. What I usually do in the case of interdependent branches:\r\n   \r\n   * Base dependent branch B on a `git rebase -i` version of base branch A\r\n   * Branch A gets merged\r\n   * Base B will now `git rebase` cleanly\r\n   \r\n   This works well as a result of the way we are merging PRs (by always rolling them up into an atomic patch)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:26:03.826+0000",
                    "updated": "2018-01-30T15:26:03.826+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345222",
                    "id": "16345222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361628155\n \n \n   In this case I had to fix by hand. What I usually do in the case of interdependent branches:\r\n   \r\n   * Base dependent branch B on a `git rebase -i` version of base branch A\r\n   * Branch A gets merged\r\n   * Branch B will now `git rebase` cleanly\r\n   \r\n   This works well as a result of the way we are merging PRs (by always rolling them up into an atomic patch)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:27:25.445+0000",
                    "updated": "2018-01-30T15:27:25.445+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345239",
                    "id": "16345239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164780782\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -369,63 +384,55 @@ class TypedConverter : public SeqConverter {\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    // static_cast<> below devirtualizes the method calls (for performance?)\n+    if (obj == Py_None) {\n+      return static_cast<Derived*>(this)->AppendNull();\n+    } else {\n+      return static_cast<Derived*>(this)->AppendItem(obj);\n+    }\n+  }\n+\n+  Status AppendMultiple(PyObject* obj, int64_t size) override {\n     /// Ensure we've allocated enough space\n     RETURN_NOT_OK(this->typed_builder_->Reserve(size));\n     // Iterate over the items adding each one\n     if (PySequence_Check(obj)) {\n       for (int64_t i = 0; i < size; ++i) {\n         OwnedRef ref(PySequence_GetItem(obj, i));\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-      }\n-    } else if (PyObject_HasAttrString(obj, \"__iter__\")) {\n-      PyObject* iter = PyObject_GetIter(obj);\n-      OwnedRef iter_ref(iter);\n-      PyObject* item;\n-      int64_t i = 0;\n-      // To allow people with long generators to only convert a subset, stop\n-      // consuming at size.\n-      while ((item = PyIter_Next(iter)) && i < size) {\n-        OwnedRef ref(item);\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-        ++i;\n-      }\n-      if (size != i) {\n-        RETURN_NOT_OK(this->typed_builder_->Resize(i));\n+        RETURN_NOT_OK(static_cast<Derived*>(this)->AppendSingle(ref.obj()));\n       }\n     } else {\n-      return Status::TypeError(\"Object is not a sequence or iterable\");\n+      return Status::TypeError(\"Object is not a sequence\");\n     }\n     return Status::OK();\n   }\n+\n+ protected:\n+  // Append a non-missing item\n+  virtual Status AppendItem(PyObject* obj) = 0;\n \n Review comment:\n   Hmm, actually you may be right that even the `static_cast<>` won't be enough to devirtualize the method call (since we may be given a derived type defined somewhere).\r\n   \r\n   I ran a simple micro-benchmark:\r\n   ```\r\n   $ python -m timeit -s \"import pyarrow as pa; ty=pa.int64(); data=[42]*1000000\" \"pa.array(data, type=ty)\"\r\n   ```\r\n   * before: 10 loops, best of 3: 42.4 msec per loop\r\n   * after: 10 loops, best of 3: 45.5 msec per loop\r\n   \r\n   So there is a slight slowdown indeed...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:38:24.452+0000",
                    "updated": "2018-01-30T15:38:24.452+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345260",
                    "id": "16345260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361636026\n \n \n   Sorry, I messed things up (I fixed the commit authorship in master)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:48:59.974+0000",
                    "updated": "2018-01-30T15:48:59.974+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345261",
                    "id": "16345261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164783172\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n+      RETURN_IF_PYERROR();\n+      RETURN_NOT_OK(value_converters_[i]->AppendSingle(valueobj ? valueobj : Py_None));\n \n Review comment:\n   I'm not sure how much of a measurable performance impact it will have (it would be good to know for future reference), but I made a separate vector of raw pointers to the internal builders for `RecordBatchBuilder` to avoid the extra shared_ptr overhead on the inner loop https://github.com/apache/arrow/blob/master/cpp/src/arrow/table_builder.h#L105\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:49:52.082+0000",
                    "updated": "2018-01-30T15:49:52.082+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345262",
                    "id": "16345262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164779529\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -380,44 +385,55 @@ class TypedConverter : public SeqConverter {\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    // static_cast<> below devirtualizes the method calls (for performance?)\n \n Review comment:\n   This is the CRTP; if you call the method from the derived class I don't know whether the call is still virtual or not. I doubt the performance difference is enough to really matter. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:49:52.257+0000",
                    "updated": "2018-01-30T15:49:52.257+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345263",
                    "id": "16345263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164780664\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -369,63 +384,55 @@ class TypedConverter : public SeqConverter {\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    // static_cast<> below devirtualizes the method calls (for performance?)\n+    if (obj == Py_None) {\n+      return static_cast<Derived*>(this)->AppendNull();\n+    } else {\n+      return static_cast<Derived*>(this)->AppendItem(obj);\n+    }\n+  }\n+\n+  Status AppendMultiple(PyObject* obj, int64_t size) override {\n     /// Ensure we've allocated enough space\n     RETURN_NOT_OK(this->typed_builder_->Reserve(size));\n     // Iterate over the items adding each one\n     if (PySequence_Check(obj)) {\n       for (int64_t i = 0; i < size; ++i) {\n         OwnedRef ref(PySequence_GetItem(obj, i));\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-      }\n-    } else if (PyObject_HasAttrString(obj, \"__iter__\")) {\n-      PyObject* iter = PyObject_GetIter(obj);\n-      OwnedRef iter_ref(iter);\n-      PyObject* item;\n-      int64_t i = 0;\n-      // To allow people with long generators to only convert a subset, stop\n-      // consuming at size.\n-      while ((item = PyIter_Next(iter)) && i < size) {\n-        OwnedRef ref(item);\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-        ++i;\n-      }\n-      if (size != i) {\n-        RETURN_NOT_OK(this->typed_builder_->Resize(i));\n+        RETURN_NOT_OK(static_cast<Derived*>(this)->AppendSingle(ref.obj()));\n       }\n     } else {\n-      return Status::TypeError(\"Object is not a sequence or iterable\");\n+      return Status::TypeError(\"Object is not a sequence\");\n     }\n     return Status::OK();\n   }\n+\n+ protected:\n+  // Append a non-missing item\n+  virtual Status AppendItem(PyObject* obj) = 0;\n \n Review comment:\n   This is OK as is; when we can demonstrate real performance benefits to using non-virtual calls we can do some refactoring later\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:49:52.276+0000",
                    "updated": "2018-01-30T15:49:52.276+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345264",
                    "id": "16345264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164784373\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -504,3 +504,28 @@ def test_structarray():\n \n     pylist = arr.to_pylist()\n     assert pylist == expected, (pylist, expected)\n+\n+\n+def test_struct_from_dicts():\n+    ty = pa.struct([pa.field('a', pa.int32()),\n+                    pa.field('b', pa.string()),\n+                    pa.field('c', pa.bool_())])\n+    arr = pa.array([], type=ty)\n+    assert arr.to_pylist() == []\n+\n+    data = [{'a': 5, 'b': 'foo', 'c': True},\n+            {'a': 6, 'b': 'bar', 'c': False}]\n+    arr = pa.array(data, type=ty)\n+    assert arr.to_pylist() == data\n+\n+    # With omitted values\n+    data = [{'a': 5, 'c': True},\n+            None,\n+            {},\n+            {'a': None, 'b': 'bar'}]\n+    arr = pa.array(data, type=ty)\n+    expected = [{'a': 5, 'b': None, 'c': True},\n+                None,\n+                {'a': None, 'b': None, 'c': None},\n+                {'a': None, 'b': 'bar', 'c': None}]\n+    assert arr.to_pylist() == expected\n \n Review comment:\n   Add a test that raises a KeyError for a missing field? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:49:52.310+0000",
                    "updated": "2018-01-30T15:49:52.310+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345265",
                    "id": "16345265",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164783634\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -809,6 +858,39 @@ Status ListConverter::Init(ArrayBuilder* builder) {\n   return value_converter_->Init(typed_builder_->value_builder());\n }\n \n+Status StructConverter::Init(ArrayBuilder* builder) {\n+  builder_ = builder;\n+  typed_builder_ = static_cast<StructBuilder*>(builder);\n+  StructType* struct_type = static_cast<StructType*>(builder->type().get());\n+\n+  num_fields_ = typed_builder_->num_fields();\n+  assert(num_fields_ == struct_type->num_children());\n \n Review comment:\n   `DCHECK_EQ`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:49:52.344+0000",
                    "updated": "2018-01-30T15:49:52.344+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345266",
                    "id": "16345266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164782063\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n \n Review comment:\n   At some point we may set null if a particular key is not found, raising KeyError seems OK right now\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:49:52.388+0000",
                    "updated": "2018-01-30T15:49:52.388+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345267",
                    "id": "16345267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164779529\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -380,44 +385,55 @@ class TypedConverter : public SeqConverter {\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    // static_cast<> below devirtualizes the method calls (for performance?)\n \n Review comment:\n   This is the CRTP; if you call the method from the derived class I don't know whether the call is still virtual or not. I doubt the performance difference is enough to really matter. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:49:59.459+0000",
                    "updated": "2018-01-30T15:49:59.459+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345268",
                    "id": "16345268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164784990\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -369,63 +384,55 @@ class TypedConverter : public SeqConverter {\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    // static_cast<> below devirtualizes the method calls (for performance?)\n+    if (obj == Py_None) {\n+      return static_cast<Derived*>(this)->AppendNull();\n+    } else {\n+      return static_cast<Derived*>(this)->AppendItem(obj);\n+    }\n+  }\n+\n+  Status AppendMultiple(PyObject* obj, int64_t size) override {\n     /// Ensure we've allocated enough space\n     RETURN_NOT_OK(this->typed_builder_->Reserve(size));\n     // Iterate over the items adding each one\n     if (PySequence_Check(obj)) {\n       for (int64_t i = 0; i < size; ++i) {\n         OwnedRef ref(PySequence_GetItem(obj, i));\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-      }\n-    } else if (PyObject_HasAttrString(obj, \"__iter__\")) {\n-      PyObject* iter = PyObject_GetIter(obj);\n-      OwnedRef iter_ref(iter);\n-      PyObject* item;\n-      int64_t i = 0;\n-      // To allow people with long generators to only convert a subset, stop\n-      // consuming at size.\n-      while ((item = PyIter_Next(iter)) && i < size) {\n-        OwnedRef ref(item);\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n-        ++i;\n-      }\n-      if (size != i) {\n-        RETURN_NOT_OK(this->typed_builder_->Resize(i));\n+        RETURN_NOT_OK(static_cast<Derived*>(this)->AppendSingle(ref.obj()));\n       }\n     } else {\n-      return Status::TypeError(\"Object is not a sequence or iterable\");\n+      return Status::TypeError(\"Object is not a sequence\");\n     }\n     return Status::OK();\n   }\n+\n+ protected:\n+  // Append a non-missing item\n+  virtual Status AppendItem(PyObject* obj) = 0;\n \n Review comment:\n   Ok, I undid this. We're now down to 43.3 msec per loop in the micro-benchmark above (so a tiny bit slower than master, but presumably good enough).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:50:03.915+0000",
                    "updated": "2018-01-30T15:50:03.915+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345270",
                    "id": "16345270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164785302\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n \n Review comment:\n   `PyDict_GetItem` doesn't raise KeyError, it simply returns NULL when the key isn't found (see also the tests which exercise this case).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:51:04.950+0000",
                    "updated": "2018-01-30T15:51:04.950+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345271",
                    "id": "16345271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164785736\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -504,3 +504,28 @@ def test_structarray():\n \n     pylist = arr.to_pylist()\n     assert pylist == expected, (pylist, expected)\n+\n+\n+def test_struct_from_dicts():\n+    ty = pa.struct([pa.field('a', pa.int32()),\n+                    pa.field('b', pa.string()),\n+                    pa.field('c', pa.bool_())])\n+    arr = pa.array([], type=ty)\n+    assert arr.to_pylist() == []\n+\n+    data = [{'a': 5, 'b': 'foo', 'c': True},\n+            {'a': 6, 'b': 'bar', 'c': False}]\n+    arr = pa.array(data, type=ty)\n+    assert arr.to_pylist() == data\n+\n+    # With omitted values\n+    data = [{'a': 5, 'c': True},\n+            None,\n+            {},\n+            {'a': None, 'b': 'bar'}]\n+    arr = pa.array(data, type=ty)\n+    expected = [{'a': 5, 'b': None, 'c': True},\n+                None,\n+                {'a': None, 'b': None, 'c': None},\n+                {'a': None, 'b': 'bar', 'c': None}]\n+    assert arr.to_pylist() == expected\n \n Review comment:\n   Well, it doesn't, that's the point... unless I'm misunderstanding you here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:52:12.166+0000",
                    "updated": "2018-01-30T15:52:12.166+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345272",
                    "id": "16345272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164785770\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n+      RETURN_IF_PYERROR();\n+      RETURN_NOT_OK(value_converters_[i]->AppendSingle(valueobj ? valueobj : Py_None));\n \n Review comment:\n   I'll give a try.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T15:52:18.415+0000",
                    "updated": "2018-01-30T15:52:18.415+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345292",
                    "id": "16345292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164792503\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n+      RETURN_IF_PYERROR();\n+      RETURN_NOT_OK(value_converters_[i]->AppendSingle(valueobj ? valueobj : Py_None));\n \n Review comment:\n   Ok, I tried it with the following micro-benchmark:\r\n   ```\r\n   $ python -m timeit -s \"import pyarrow as pa; ty=pa.struct([pa.field('x', pa.int32())]); data=[None]*1000000\" \"pa.array(data, type=ty)\"\r\n   ```\r\n   \r\n   * unpatched: 49.3 msec per loop\r\n   * with unique_ptr instead of shared_ptr: 44.3 msec per loop\r\n   * with raw pointers in addition to shared_ptr: 43.6 msec per loop\r\n   \r\n   Since an additional array of raw pointers adds some complication, I'm tempted to go with the unique_ptr solution (which AFAICS looks sane).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:10:10.635+0000",
                    "updated": "2018-01-30T16:10:10.635+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345310",
                    "id": "16345310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164796043\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n+      RETURN_IF_PYERROR();\n+      RETURN_NOT_OK(value_converters_[i]->AppendSingle(valueobj ? valueobj : Py_None));\n \n Review comment:\n   SGTM\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:20:11.266+0000",
                    "updated": "2018-01-30T16:20:11.266+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345312",
                    "id": "16345312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164796355\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n \n Review comment:\n   Noted, thank you =)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:21:03.298+0000",
                    "updated": "2018-01-30T16:21:03.298+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345315",
                    "id": "16345315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164796903\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -504,3 +504,28 @@ def test_structarray():\n \n     pylist = arr.to_pylist()\n     assert pylist == expected, (pylist, expected)\n+\n+\n+def test_struct_from_dicts():\n+    ty = pa.struct([pa.field('a', pa.int32()),\n+                    pa.field('b', pa.string()),\n+                    pa.field('c', pa.bool_())])\n+    arr = pa.array([], type=ty)\n+    assert arr.to_pylist() == []\n+\n+    data = [{'a': 5, 'b': 'foo', 'c': True},\n+            {'a': 6, 'b': 'bar', 'c': False}]\n+    arr = pa.array(data, type=ty)\n+    assert arr.to_pylist() == data\n+\n+    # With omitted values\n+    data = [{'a': 5, 'c': True},\n+            None,\n+            {},\n+            {'a': None, 'b': 'bar'}]\n+    arr = pa.array(data, type=ty)\n+    expected = [{'a': 5, 'b': None, 'c': True},\n+                None,\n+                {'a': None, 'b': None, 'c': None},\n+                {'a': None, 'b': 'bar', 'c': None}]\n+    assert arr.to_pylist() == expected\n \n Review comment:\n   We're all good (per my misunderstanding about `PyDict_GetItem`)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:22:35.184+0000",
                    "updated": "2018-01-30T16:22:35.184+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345318",
                    "id": "16345318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#discussion_r164797224\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -722,25 +736,60 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  Status AppendItem(PyObject* obj) override {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n   std::shared_ptr<SeqConverter> value_converter_;\n };\n \n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  Status AppendItem(PyObject* obj) override {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n+      RETURN_IF_PYERROR();\n+      RETURN_NOT_OK(value_converters_[i]->AppendSingle(valueobj ? valueobj : Py_None));\n \n Review comment:\n   Ok, I migrated the code to unique_ptr.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:23:25.744+0000",
                    "updated": "2018-01-30T16:23:25.744+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345319",
                    "id": "16345319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361648577\n \n \n   +1, this looks good to go once the build runs. thanks @pitrou!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:24:45.896+0000",
                    "updated": "2018-01-30T16:24:45.896+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345321",
                    "id": "16345321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361648966\n \n \n   (as a side note, who has the right to retry failed jobs on Travis? there are `apt` failures again :-))\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:25:51.191+0000",
                    "updated": "2018-01-30T16:25:51.191+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345334",
                    "id": "16345334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361652785\n \n \n   Folks with write access to the git repo (me, Uwe, @cpcloud, others) -- anyone on http://arrow.apache.org/committers/. I restarted the jobs. Not sure why apt on Travis has been so flaky lately\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T16:37:09.551+0000",
                    "updated": "2018-01-30T16:37:09.551+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345481",
                    "id": "16345481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361670413\n \n \n   Restarted the failed Travis CI build. Can you enable Appveyor on your fork so we can potentially get some faster builds to look at there? Thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T17:31:10.724+0000",
                    "updated": "2018-01-30T17:31:10.724+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345496",
                    "id": "16345496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530#issuecomment-361673162\n \n \n   Ok, there's an AppVeyor build starting at https://ci.appveyor.com/project/pitrou/arrow/build/1.0.2\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T17:39:46.764+0000",
                    "updated": "2018-01-30T17:39:46.764+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345714",
                    "id": "16345714",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1530: ARROW-1705: [Python] allow building array from dicts\nURL: https://github.com/apache/arrow/pull/1530\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex b41c55d9c..be03c7c11 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -23,6 +23,8 @@\n #include <limits>\n #include <sstream>\n #include <string>\n+#include <utility>\n+#include <vector>\n \n #include \"arrow/python/builtin_convert.h\"\n \n@@ -356,7 +358,11 @@ class SeqConverter {\n     return Status::OK();\n   }\n \n-  virtual Status AppendData(PyObject* seq, int64_t size) = 0;\n+  // Append a single (non-sequence) Python datum to the underlying builder\n+  virtual Status AppendSingle(PyObject* obj) = 0;\n+\n+  // Append the contents of a Python sequence to the underlying builder\n+  virtual Status AppendMultiple(PyObject* seq, int64_t size) = 0;\n \n   virtual ~SeqConverter() = default;\n \n@@ -377,47 +383,57 @@ class TypedConverter : public SeqConverter {\n   BuilderType* typed_builder_;\n };\n \n+// We use the CRTP trick here to devirtualize the AppendItem() and AppendNull()\n+// method calls.\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n-  Status AppendData(PyObject* obj, int64_t size) override {\n+  Status AppendSingle(PyObject* obj) override {\n+    if (obj == Py_None) {\n+      return static_cast<Derived*>(this)->AppendNull();\n+    } else {\n+      return static_cast<Derived*>(this)->AppendItem(obj);\n+    }\n+  }\n+\n+  Status AppendMultiple(PyObject* obj, int64_t size) override {\n     /// Ensure we've allocated enough space\n     RETURN_NOT_OK(this->typed_builder_->Reserve(size));\n     // Iterate over the items adding each one\n     if (PySequence_Check(obj)) {\n       for (int64_t i = 0; i < size; ++i) {\n         OwnedRef ref(PySequence_GetItem(obj, i));\n-        if (ref.obj() == Py_None) {\n-          RETURN_NOT_OK(this->typed_builder_->AppendNull());\n-        } else {\n-          RETURN_NOT_OK(static_cast<Derived*>(this)->AppendItem(ref));\n-        }\n+        RETURN_NOT_OK(static_cast<Derived*>(this)->AppendSingle(ref.obj()));\n       }\n     } else {\n       return Status::TypeError(\"Object is not a sequence\");\n     }\n     return Status::OK();\n   }\n+\n+  // Append a missing item (default implementation)\n+  Status AppendNull() { return this->typed_builder_->AppendNull(); }\n };\n \n class NullConverter : public TypedConverterVisitor<NullBuilder, NullConverter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     return Status::Invalid(\"NullConverter: passed non-None value\");\n   }\n };\n \n class BoolConverter : public TypedConverterVisitor<BooleanBuilder, BoolConverter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    return typed_builder_->Append(item.obj() == Py_True);\n-  }\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) { return typed_builder_->Append(obj == Py_True); }\n };\n \n class Int8Converter : public TypedConverterVisitor<Int8Builder, Int8Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(obj));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<int8_t>::max() ||\n                             val < std::numeric_limits<int8_t>::min())) {\n@@ -432,8 +448,9 @@ class Int8Converter : public TypedConverterVisitor<Int8Builder, Int8Converter> {\n \n class Int16Converter : public TypedConverterVisitor<Int16Builder, Int16Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(obj));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<int16_t>::max() ||\n                             val < std::numeric_limits<int16_t>::min())) {\n@@ -448,8 +465,9 @@ class Int16Converter : public TypedConverterVisitor<Int16Builder, Int16Converter\n \n class Int32Converter : public TypedConverterVisitor<Int32Builder, Int32Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(obj));\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<int32_t>::max() ||\n                             val < std::numeric_limits<int32_t>::min())) {\n@@ -464,8 +482,9 @@ class Int32Converter : public TypedConverterVisitor<Int32Builder, Int32Converter\n \n class Int64Converter : public TypedConverterVisitor<Int64Builder, Int64Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<int64_t>(PyLong_AsLongLong(obj));\n     RETURN_IF_PYERROR();\n     return typed_builder_->Append(val);\n   }\n@@ -473,8 +492,9 @@ class Int64Converter : public TypedConverterVisitor<Int64Builder, Int64Converter\n \n class UInt8Converter : public TypedConverterVisitor<UInt8Builder, UInt8Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(obj));\n     RETURN_IF_PYERROR();\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<uint8_t>::max())) {\n@@ -488,8 +508,9 @@ class UInt8Converter : public TypedConverterVisitor<UInt8Builder, UInt8Converter\n \n class UInt16Converter : public TypedConverterVisitor<UInt16Builder, UInt16Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(obj));\n     RETURN_IF_PYERROR();\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<uint16_t>::max())) {\n@@ -503,8 +524,9 @@ class UInt16Converter : public TypedConverterVisitor<UInt16Builder, UInt16Conver\n \n class UInt32Converter : public TypedConverterVisitor<UInt32Builder, UInt32Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<uint64_t>(PyLong_AsLongLong(obj));\n     RETURN_IF_PYERROR();\n \n     if (ARROW_PREDICT_FALSE(val > std::numeric_limits<uint32_t>::max())) {\n@@ -518,8 +540,9 @@ class UInt32Converter : public TypedConverterVisitor<UInt32Builder, UInt32Conver\n \n class UInt64Converter : public TypedConverterVisitor<UInt64Builder, UInt64Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    const auto val = static_cast<int64_t>(PyLong_AsUnsignedLongLong(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    const auto val = static_cast<int64_t>(PyLong_AsUnsignedLongLong(obj));\n     RETURN_IF_PYERROR();\n     return typed_builder_->Append(val);\n   }\n@@ -527,13 +550,14 @@ class UInt64Converter : public TypedConverterVisitor<UInt64Builder, UInt64Conver\n \n class Date32Converter : public TypedConverterVisitor<Date32Builder, Date32Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     int32_t t;\n-    if (PyDate_Check(item.obj())) {\n-      auto pydate = reinterpret_cast<PyDateTime_Date*>(item.obj());\n+    if (PyDate_Check(obj)) {\n+      auto pydate = reinterpret_cast<PyDateTime_Date*>(obj);\n       t = static_cast<int32_t>(PyDate_to_s(pydate));\n     } else {\n-      const auto casted_val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+      const auto casted_val = static_cast<int64_t>(PyLong_AsLongLong(obj));\n       RETURN_IF_PYERROR();\n       if (casted_val > std::numeric_limits<int32_t>::max()) {\n         return Status::Invalid(\"Integer as date32 larger than INT32_MAX\");\n@@ -546,13 +570,14 @@ class Date32Converter : public TypedConverterVisitor<Date32Builder, Date32Conver\n \n class Date64Converter : public TypedConverterVisitor<Date64Builder, Date64Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     int64_t t;\n-    if (PyDate_Check(item.obj())) {\n-      auto pydate = reinterpret_cast<PyDateTime_Date*>(item.obj());\n+    if (PyDate_Check(obj)) {\n+      auto pydate = reinterpret_cast<PyDateTime_Date*>(obj);\n       t = PyDate_to_ms(pydate);\n     } else {\n-      t = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+      t = static_cast<int64_t>(PyLong_AsLongLong(obj));\n       RETURN_IF_PYERROR();\n     }\n     return typed_builder_->Append(t);\n@@ -564,10 +589,11 @@ class TimestampConverter\n  public:\n   explicit TimestampConverter(TimeUnit::type unit) : unit_(unit) {}\n \n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     int64_t t;\n-    if (PyDateTime_Check(item.obj())) {\n-      auto pydatetime = reinterpret_cast<PyDateTime_DateTime*>(item.obj());\n+    if (PyDateTime_Check(obj)) {\n+      auto pydatetime = reinterpret_cast<PyDateTime_DateTime*>(obj);\n \n       switch (unit_) {\n         case TimeUnit::SECOND:\n@@ -583,10 +609,10 @@ class TimestampConverter\n           t = PyDateTime_to_ns(pydatetime);\n           break;\n       }\n-    } else if (PyArray_CheckAnyScalarExact(item.obj())) {\n+    } else if (PyArray_CheckAnyScalarExact(obj)) {\n       // numpy.datetime64\n       std::shared_ptr<DataType> type;\n-      RETURN_NOT_OK(NumPyDtypeToArrow(PyArray_DescrFromScalar(item.obj()), &type));\n+      RETURN_NOT_OK(NumPyDtypeToArrow(PyArray_DescrFromScalar(obj), &type));\n       if (type->id() != Type::TIMESTAMP) {\n         std::ostringstream ss;\n         ss << \"Expected np.datetime64 but got: \";\n@@ -599,10 +625,9 @@ class TimestampConverter\n             \"Cannot convert NumPy datetime64 objects with differing unit\");\n       }\n \n-      PyDatetimeScalarObject* obj = reinterpret_cast<PyDatetimeScalarObject*>(item.obj());\n-      t = obj->obval;\n+      t = reinterpret_cast<PyDatetimeScalarObject*>(obj)->obval;\n     } else {\n-      t = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+      t = static_cast<int64_t>(PyLong_AsLongLong(obj));\n       RETURN_IF_PYERROR();\n     }\n     return typed_builder_->Append(t);\n@@ -614,8 +639,9 @@ class TimestampConverter\n \n class Float32Converter : public TypedConverterVisitor<FloatBuilder, Float32Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    float val = static_cast<float>(PyFloat_AsDouble(item.obj()));\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    float val = static_cast<float>(PyFloat_AsDouble(obj));\n     RETURN_IF_PYERROR();\n     return typed_builder_->Append(val);\n   }\n@@ -623,8 +649,9 @@ class Float32Converter : public TypedConverterVisitor<FloatBuilder, Float32Conve\n \n class DoubleConverter : public TypedConverterVisitor<DoubleBuilder, DoubleConverter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n-    double val = PyFloat_AsDouble(item.obj());\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    double val = PyFloat_AsDouble(obj);\n     RETURN_IF_PYERROR();\n     return typed_builder_->Append(val);\n   }\n@@ -632,22 +659,23 @@ class DoubleConverter : public TypedConverterVisitor<DoubleBuilder, DoubleConver\n \n class BytesConverter : public TypedConverterVisitor<BinaryBuilder, BytesConverter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     PyObject* bytes_obj;\n     const char* bytes;\n     Py_ssize_t length;\n     OwnedRef tmp;\n \n-    if (PyUnicode_Check(item.obj())) {\n-      tmp.reset(PyUnicode_AsUTF8String(item.obj()));\n+    if (PyUnicode_Check(obj)) {\n+      tmp.reset(PyUnicode_AsUTF8String(obj));\n       RETURN_IF_PYERROR();\n       bytes_obj = tmp.obj();\n-    } else if (PyBytes_Check(item.obj())) {\n-      bytes_obj = item.obj();\n+    } else if (PyBytes_Check(obj)) {\n+      bytes_obj = obj;\n     } else {\n       std::stringstream ss;\n       ss << \"Error converting to Binary type: \";\n-      RETURN_NOT_OK(InvalidConversion(item.obj(), \"bytes\", &ss));\n+      RETURN_NOT_OK(InvalidConversion(obj, \"bytes\", &ss));\n       return Status::Invalid(ss.str());\n     }\n     // No error checking\n@@ -660,22 +688,23 @@ class BytesConverter : public TypedConverterVisitor<BinaryBuilder, BytesConverte\n class FixedWidthBytesConverter\n     : public TypedConverterVisitor<FixedSizeBinaryBuilder, FixedWidthBytesConverter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     PyObject* bytes_obj;\n     OwnedRef tmp;\n     Py_ssize_t expected_length =\n         std::dynamic_pointer_cast<FixedSizeBinaryType>(typed_builder_->type())\n             ->byte_width();\n-    if (PyUnicode_Check(item.obj())) {\n-      tmp.reset(PyUnicode_AsUTF8String(item.obj()));\n+    if (PyUnicode_Check(obj)) {\n+      tmp.reset(PyUnicode_AsUTF8String(obj));\n       RETURN_IF_PYERROR();\n       bytes_obj = tmp.obj();\n-    } else if (PyBytes_Check(item.obj())) {\n-      bytes_obj = item.obj();\n+    } else if (PyBytes_Check(obj)) {\n+      bytes_obj = obj;\n     } else {\n       std::stringstream ss;\n       ss << \"Error converting to FixedSizeBinary type: \";\n-      RETURN_NOT_OK(InvalidConversion(item.obj(), \"bytes\", &ss));\n+      RETURN_NOT_OK(InvalidConversion(obj, \"bytes\", &ss));\n       return Status::Invalid(ss.str());\n     }\n     // No error checking\n@@ -687,13 +716,13 @@ class FixedWidthBytesConverter\n \n class UTF8Converter : public TypedConverterVisitor<StringBuilder, UTF8Converter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     PyObject* bytes_obj;\n     OwnedRef tmp;\n     const char* bytes;\n     Py_ssize_t length;\n \n-    PyObject* obj = item.obj();\n     if (PyBytes_Check(obj)) {\n       tmp.reset(\n           PyUnicode_FromStringAndSize(PyBytes_AS_STRING(obj), PyBytes_GET_SIZE(obj)));\n@@ -722,75 +751,114 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n   Status Init(ArrayBuilder* builder) override;\n \n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     RETURN_NOT_OK(typed_builder_->Append());\n-    PyObject* item_obj = item.obj();\n-    const auto list_size = static_cast<int64_t>(PySequence_Size(item_obj));\n-    return value_converter_->AppendData(item_obj, list_size);\n+    const auto list_size = static_cast<int64_t>(PySequence_Size(obj));\n+    return value_converter_->AppendMultiple(obj, list_size);\n   }\n \n  protected:\n-  std::shared_ptr<SeqConverter> value_converter_;\n+  std::unique_ptr<SeqConverter> value_converter_;\n+};\n+\n+class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n+ public:\n+  Status Init(ArrayBuilder* builder) override;\n+\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    RETURN_NOT_OK(typed_builder_->Append());\n+    if (!PyDict_Check(obj)) {\n+      return Status::TypeError(\"dict value expected for struct type\");\n+    }\n+    // NOTE we're ignoring any extraneous dict items\n+    for (int i = 0; i < num_fields_; i++) {\n+      PyObject* nameobj = PyList_GET_ITEM(field_name_list_.obj(), i);\n+      PyObject* valueobj = PyDict_GetItem(obj, nameobj);  // borrowed\n+      RETURN_IF_PYERROR();\n+      RETURN_NOT_OK(value_converters_[i]->AppendSingle(valueobj ? valueobj : Py_None));\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  // Append a missing item\n+  Status AppendNull() {\n+    RETURN_NOT_OK(typed_builder_->AppendNull());\n+    // Need to also insert a missing item on all child builders\n+    // (compare with ListConverter)\n+    for (int i = 0; i < num_fields_; i++) {\n+      RETURN_NOT_OK(value_converters_[i]->AppendSingle(Py_None));\n+    }\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  std::vector<std::unique_ptr<SeqConverter>> value_converters_;\n+  OwnedRef field_name_list_;\n+  int num_fields_;\n };\n \n class DecimalConverter\n     : public TypedConverterVisitor<arrow::Decimal128Builder, DecimalConverter> {\n  public:\n-  Status AppendItem(const OwnedRef& item) {\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n     /// TODO(phillipc): Check for nan?\n     Decimal128 value;\n     const auto& type = static_cast<const DecimalType&>(*typed_builder_->type());\n-    RETURN_NOT_OK(internal::DecimalFromPythonDecimal(item.obj(), type, &value));\n+    RETURN_NOT_OK(internal::DecimalFromPythonDecimal(obj, type, &value));\n     return typed_builder_->Append(value);\n   }\n };\n \n // Dynamic constructor for sequence converters\n-std::shared_ptr<SeqConverter> GetConverter(const std::shared_ptr<DataType>& type) {\n+std::unique_ptr<SeqConverter> GetConverter(const std::shared_ptr<DataType>& type) {\n   switch (type->id()) {\n     case Type::NA:\n-      return std::make_shared<NullConverter>();\n+      return std::unique_ptr<SeqConverter>(new NullConverter);\n     case Type::BOOL:\n-      return std::make_shared<BoolConverter>();\n+      return std::unique_ptr<SeqConverter>(new BoolConverter);\n     case Type::INT8:\n-      return std::make_shared<Int8Converter>();\n+      return std::unique_ptr<SeqConverter>(new Int8Converter);\n     case Type::INT16:\n-      return std::make_shared<Int16Converter>();\n+      return std::unique_ptr<SeqConverter>(new Int16Converter);\n     case Type::INT32:\n-      return std::make_shared<Int32Converter>();\n+      return std::unique_ptr<SeqConverter>(new Int32Converter);\n     case Type::INT64:\n-      return std::make_shared<Int64Converter>();\n+      return std::unique_ptr<SeqConverter>(new Int64Converter);\n     case Type::UINT8:\n-      return std::make_shared<UInt8Converter>();\n+      return std::unique_ptr<SeqConverter>(new UInt8Converter);\n     case Type::UINT16:\n-      return std::make_shared<UInt16Converter>();\n+      return std::unique_ptr<SeqConverter>(new UInt16Converter);\n     case Type::UINT32:\n-      return std::make_shared<UInt32Converter>();\n+      return std::unique_ptr<SeqConverter>(new UInt32Converter);\n     case Type::UINT64:\n-      return std::make_shared<UInt64Converter>();\n+      return std::unique_ptr<SeqConverter>(new UInt64Converter);\n     case Type::DATE32:\n-      return std::make_shared<Date32Converter>();\n+      return std::unique_ptr<SeqConverter>(new Date32Converter);\n     case Type::DATE64:\n-      return std::make_shared<Date64Converter>();\n+      return std::unique_ptr<SeqConverter>(new Date64Converter);\n     case Type::TIMESTAMP:\n-      return std::make_shared<TimestampConverter>(\n-          static_cast<const TimestampType&>(*type).unit());\n+      return std::unique_ptr<SeqConverter>(\n+          new TimestampConverter(static_cast<const TimestampType&>(*type).unit()));\n     case Type::FLOAT:\n-      return std::make_shared<Float32Converter>();\n+      return std::unique_ptr<SeqConverter>(new Float32Converter);\n     case Type::DOUBLE:\n-      return std::make_shared<DoubleConverter>();\n+      return std::unique_ptr<SeqConverter>(new DoubleConverter);\n     case Type::BINARY:\n-      return std::make_shared<BytesConverter>();\n+      return std::unique_ptr<SeqConverter>(new BytesConverter);\n     case Type::FIXED_SIZE_BINARY:\n-      return std::make_shared<FixedWidthBytesConverter>();\n+      return std::unique_ptr<SeqConverter>(new FixedWidthBytesConverter);\n     case Type::STRING:\n-      return std::make_shared<UTF8Converter>();\n+      return std::unique_ptr<SeqConverter>(new UTF8Converter);\n     case Type::LIST:\n-      return std::make_shared<ListConverter>();\n-    case Type::DECIMAL: {\n-      return std::make_shared<DecimalConverter>();\n-    }\n+      return std::unique_ptr<SeqConverter>(new ListConverter);\n     case Type::STRUCT:\n+      return std::unique_ptr<SeqConverter>(new StructConverter);\n+    case Type::DECIMAL:\n+      return std::unique_ptr<SeqConverter>(new DecimalConverter);\n     default:\n       return nullptr;\n   }\n@@ -809,17 +877,50 @@ Status ListConverter::Init(ArrayBuilder* builder) {\n   return value_converter_->Init(typed_builder_->value_builder());\n }\n \n+Status StructConverter::Init(ArrayBuilder* builder) {\n+  builder_ = builder;\n+  typed_builder_ = static_cast<StructBuilder*>(builder);\n+  StructType* struct_type = static_cast<StructType*>(builder->type().get());\n+\n+  num_fields_ = typed_builder_->num_fields();\n+  DCHECK_EQ(num_fields_, struct_type->num_children());\n+\n+  field_name_list_.reset(PyList_New(num_fields_));\n+  RETURN_IF_PYERROR();\n+\n+  // Initialize the child converters and field names\n+  for (int i = 0; i < num_fields_; i++) {\n+    const std::string& field_name(struct_type->child(i)->name());\n+    std::shared_ptr<DataType> field_type(struct_type->child(i)->type());\n+\n+    auto value_converter = GetConverter(field_type);\n+    if (value_converter == nullptr) {\n+      return Status::NotImplemented(\"value type not implemented\");\n+    }\n+    RETURN_NOT_OK(value_converter->Init(typed_builder_->field_builder(i)));\n+    value_converters_.push_back(std::move(value_converter));\n+\n+    // Store the field name as a PyObject, for dict matching\n+    PyObject* nameobj =\n+        PyUnicode_FromStringAndSize(field_name.c_str(), field_name.size());\n+    RETURN_IF_PYERROR();\n+    PyList_SET_ITEM(field_name_list_.obj(), i, nameobj);\n+  }\n+\n+  return Status::OK();\n+}\n+\n Status AppendPySequence(PyObject* obj, int64_t size,\n                         const std::shared_ptr<DataType>& type, ArrayBuilder* builder) {\n   PyDateTime_IMPORT;\n-  std::shared_ptr<SeqConverter> converter = GetConverter(type);\n+  auto converter = GetConverter(type);\n   if (converter == nullptr) {\n     std::stringstream ss;\n     ss << \"No type converter implemented for \" << type->ToString();\n     return Status::NotImplemented(ss.str());\n   }\n   RETURN_NOT_OK(converter->Init(builder));\n-  return converter->AppendData(obj, size);\n+  return converter->AppendMultiple(obj, size);\n }\n \n static Status ConvertPySequenceReal(PyObject* obj, int64_t size,\ndiff --git a/python/pyarrow/tests/test_convert_builtin.py b/python/pyarrow/tests/test_convert_builtin.py\nindex 2b317dfbc..bbdf6e71e 100644\n--- a/python/pyarrow/tests/test_convert_builtin.py\n+++ b/python/pyarrow/tests/test_convert_builtin.py\n@@ -504,3 +504,28 @@ def test_structarray():\n \n     pylist = arr.to_pylist()\n     assert pylist == expected, (pylist, expected)\n+\n+\n+def test_struct_from_dicts():\n+    ty = pa.struct([pa.field('a', pa.int32()),\n+                    pa.field('b', pa.string()),\n+                    pa.field('c', pa.bool_())])\n+    arr = pa.array([], type=ty)\n+    assert arr.to_pylist() == []\n+\n+    data = [{'a': 5, 'b': 'foo', 'c': True},\n+            {'a': 6, 'b': 'bar', 'c': False}]\n+    arr = pa.array(data, type=ty)\n+    assert arr.to_pylist() == data\n+\n+    # With omitted values\n+    data = [{'a': 5, 'c': True},\n+            None,\n+            {},\n+            {'a': None, 'b': 'bar'}]\n+    arr = pa.array(data, type=ty)\n+    expected = [{'a': 5, 'b': None, 'c': True},\n+                None,\n+                {'a': None, 'b': None, 'c': None},\n+                {'a': None, 'b': 'bar', 'c': None}]\n+    assert arr.to_pylist() == expected\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-30T20:05:25.730+0000",
                    "updated": "2018-01-30T20:05:25.730+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16345718",
                    "id": "16345718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1530\n[https://github.com/apache/arrow/pull/1530]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-30T20:06:03.984+0000",
                    "updated": "2018-01-30T20:06:03.984+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16346785",
                    "id": "16346785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Now that this is done, what should be the followup be for struct types and `pa.array`?\r\n * accept a sequence of tuples?\r\n * accept a dict of sequences?\r\n * automatically infer a struct type when passed a sequence of dicts?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-01-31T13:09:30.303+0000",
                    "updated": "2018-01-31T13:09:30.303+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111172/comment/16347041",
                    "id": "16347041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Definitely sequence of tuples/lists. For the 2nd bullet point, there is {{StructArray.from_arrays}} already, but we could make that accept a dict/OrderedDict also (I have a PR for ARROW-1706 pending). Having type inference would be an additional nice thing to have. Let's create some JIRAs for these so we don't forget. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-31T15:48:10.979+0000",
                    "updated": "2018-01-31T15:48:24.777+0000"
                }
            ],
            "maxResults": 38,
            "total": 38,
            "startAt": 0
        },
        "customfield_12311820": "0|i3ljtr:",
        "customfield_12314139": null
    }
}