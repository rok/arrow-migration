{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13244633",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633",
    "key": "ARROW-5929",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/7",
            "id": "7",
            "description": "Later",
            "name": "Later"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12565266",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12565266",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13244661",
                    "key": "ARROW-5931",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244661",
                    "fields": {
                        "summary": "[C++] Extend extension types facility to provide for serialization and deserialization in IPC roundtrips",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5929/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/277454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889\n \n \n   As being discussed on the mailing list, a possible use case for ExtensionVector involves having the Arrow buffers contain pointer-type values referring to memory outside of the Arrow memory heap. In IPC, such vectors would need to be serialized to a wholly Arrow-resident form, such as a VarBinaryVector. We do not have an API to allow for this, so this JIRA proposes to add new functions that can indicate to the IPC layer that an ExtensionVector requires additional serialization to a native Arrow type (in such case, the extension type metadata would be discarded)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-16T11:53:29.940+0000",
                    "updated": "2019-07-16T11:53:29.940+0000",
                    "started": "2019-07-16T11:53:29.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "277454",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512639212\n \n \n   hi @liyafan82 -- I think we need to reconcile this as it relates to the prior work of https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/ExtensionTypeVector.java. What I was thinking is that we would add some additional APIs so that an implementer of ExtensionTypeVector can indicate that further serialization / type conversion is required during the IPC phase (e.g. from a StructVector having pointer and size, or FixedSizeBinary, to VarCharVector).\r\n   \r\n   As an example:\r\n   \r\n   * In-memory representation: FixedSizeBinary(12), where each value is a packed `struct { int64_t* address; int32_t length; }`. Essentially a heap string\r\n   * On wire representation: String (aka VarCharVector)\r\n   \r\n   This can use the existing extension types machinery that we have just had a vote to add to the Arrow format:\r\n   \r\n   https://github.com/apache/arrow/blob/master/docs/source/format/Metadata.rst#extension-types\r\n   \r\n   @lidavidm @emkornfield can you provide some feedback on this from the Java perspective?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T02:27:50.851+0000",
                    "updated": "2019-07-18T02:27:50.851+0000",
                    "started": "2019-07-18T02:27:50.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278663",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512639212\n \n \n   hi @liyafan82 -- I think we need to reconcile this as it relates to the prior work of https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/ExtensionTypeVector.java. What I was thinking is that we would add some additional APIs so that an implementer of ExtensionTypeVector can indicate that further serialization / type conversion is required during the IPC phase (e.g. from a StructVector having pointer and size, or FixedSizeBinary, to VarCharVector).\r\n   \r\n   As an example:\r\n   \r\n   * In-memory representation: FixedSizeBinary(12), where each value is a packed `struct { int64_t* address; int32_t length; }`. Essentially a heap string\r\n   * On wire representation: String (aka VarCharVector)\r\n   \r\n   Whether readers want to deserialize back to the original in-memory implementation should be configurable. Once you've serialized to VarCharVector, for example, there's not much need to go back in many cases\r\n   \r\n   This can use the existing extension types machinery that we have just had a vote to add to the Arrow format:\r\n   \r\n   https://github.com/apache/arrow/blob/master/docs/source/format/Metadata.rst#extension-types\r\n   \r\n   @lidavidm @emkornfield can you provide some feedback on this from the Java perspective?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T02:31:08.928+0000",
                    "updated": "2019-07-18T02:31:08.928+0000",
                    "started": "2019-07-18T02:31:08.927+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278665",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512663568\n \n \n   > hi @liyafan82 -- I think we need to reconcile this as it relates to the prior work of https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/ExtensionTypeVector.java. What I was thinking is that we would add some additional APIs so that an implementer of ExtensionTypeVector can indicate that further serialization / type conversion is required during the IPC phase (e.g. from a StructVector having pointer and size, or FixedSizeBinary, to VarCharVector).\r\n   > \r\n   > As an example:\r\n   > \r\n   > * In-memory representation: FixedSizeBinary(12), where each value is a packed `struct { int64_t* address; int32_t length; }`. Essentially a heap string\r\n   > * On wire representation: String (aka VarCharVector)\r\n   > \r\n   > Whether readers want to deserialize back to the original in-memory implementation should be configurable. Once you've serialized to VarCharVector, for example, there's not much need to go back in many cases\r\n   > \r\n   > This can use the existing extension types machinery that we have just had a vote to add to the Arrow format:\r\n   > \r\n   > https://github.com/apache/arrow/blob/master/docs/source/format/Metadata.rst#extension-types\r\n   > \r\n   > @lidavidm @emkornfield can you provide some feedback on this from the Java perspective?\r\n   \r\n   @wesm Thanks a lot for your valuable comments.\r\n   \r\n   I think it is a good suggestion that the new vector should be a sub-class of FixedSizeBinaryVector or wrapped in an ExtensionTypeVector as a FixedSizeBinaryVector.\r\n   \r\n   IMO, the key points include (maybe the problem is more tricky than I have realized):\r\n   1. We should add some extension to the metadata (as you have indicated), so the receiver (VectorUnloader) knows how to reconstruct the vector correctly.\r\n   2. Implement the getBuffers method properly, to send each string as a separate buffer. So the sender (VectorLoader) will send the vector correctly (without changing existing logic).\r\n   3. Add proper APIs to the vector to access the data as byte[] or String.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T04:49:15.821+0000",
                    "updated": "2019-07-18T04:49:15.821+0000",
                    "started": "2019-07-18T04:49:15.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278696",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512663568\n \n \n   > hi @liyafan82 -- I think we need to reconcile this as it relates to the prior work of https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/ExtensionTypeVector.java. What I was thinking is that we would add some additional APIs so that an implementer of ExtensionTypeVector can indicate that further serialization / type conversion is required during the IPC phase (e.g. from a StructVector having pointer and size, or FixedSizeBinary, to VarCharVector).\r\n   > \r\n   > As an example:\r\n   > \r\n   > * In-memory representation: FixedSizeBinary(12), where each value is a packed `struct { int64_t* address; int32_t length; }`. Essentially a heap string\r\n   > * On wire representation: String (aka VarCharVector)\r\n   > \r\n   > Whether readers want to deserialize back to the original in-memory implementation should be configurable. Once you've serialized to VarCharVector, for example, there's not much need to go back in many cases\r\n   > \r\n   > This can use the existing extension types machinery that we have just had a vote to add to the Arrow format:\r\n   > \r\n   > https://github.com/apache/arrow/blob/master/docs/source/format/Metadata.rst#extension-types\r\n   > \r\n   > @lidavidm @emkornfield can you provide some feedback on this from the Java perspective?\r\n   \r\n   @wesm Thanks a lot for your valuable comments.\r\n   \r\n   I think it is a good suggestion that the new vector should be a sub-class of FixedSizeBinaryVector or wrapped in an ExtensionTypeVector as a FixedSizeBinaryVector.\r\n   \r\n   IMO, the key points include (maybe the problem is more tricky than I have realized):\r\n   1. We should add some extension to the metadata (as you have indicated), so the receiver (VectorUnloader) knows how to reconstruct the vector correctly.\r\n   2. Implement the getBuffers method properly, to send each string as a separate buffer. So the sender (VectorLoader) will send the vector correctly (without changing existing logic).\r\n   3. Add proper APIs to the vector to access the data as byte[] or String.\r\n   \r\n   What do you think?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T04:54:36.468+0000",
                    "updated": "2019-07-18T04:54:36.468+0000",
                    "started": "2019-07-18T04:54:36.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278702",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512663568\n \n \n   > hi @liyafan82 -- I think we need to reconcile this as it relates to the prior work of https://github.com/apache/arrow/blob/master/java/vector/src/main/java/org/apache/arrow/vector/ExtensionTypeVector.java. What I was thinking is that we would add some additional APIs so that an implementer of ExtensionTypeVector can indicate that further serialization / type conversion is required during the IPC phase (e.g. from a StructVector having pointer and size, or FixedSizeBinary, to VarCharVector).\r\n   > \r\n   > As an example:\r\n   > \r\n   > * In-memory representation: FixedSizeBinary(12), where each value is a packed `struct { int64_t* address; int32_t length; }`. Essentially a heap string\r\n   > * On wire representation: String (aka VarCharVector)\r\n   > \r\n   > Whether readers want to deserialize back to the original in-memory implementation should be configurable. Once you've serialized to VarCharVector, for example, there's not much need to go back in many cases\r\n   > \r\n   > This can use the existing extension types machinery that we have just had a vote to add to the Arrow format:\r\n   > \r\n   > https://github.com/apache/arrow/blob/master/docs/source/format/Metadata.rst#extension-types\r\n   > \r\n   > @lidavidm @emkornfield can you provide some feedback on this from the Java perspective?\r\n   \r\n   @wesm Thanks a lot for your valuable comments.\r\n   \r\n   I think it is a good suggestion that the new vector should be a sub-class of FixedSizeBinaryVector or wrapped in an ExtensionTypeVector as a FixedSizeBinaryVector.\r\n   \r\n   IMO, the key points include (maybe the problem is more tricky than I have realized):\r\n   1. We should add some extension to the metadata (as you have indicated), so the receiver (VectorUnloader) knows how to reconstruct the vector correctly.\r\n   2. Implement the getBuffers and loadFieldBuffers methods properly, to send and receive each string as a separate buffer. So the sender (VectorUnLoader) and receiver (VectorLoader) will send and receive the vector correctly (without changing existing logic).\r\n   3. Add proper APIs to the vector to access the data as byte[] or String.\r\n   \r\n   What do you think?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T06:17:57.186+0000",
                    "updated": "2019-07-18T06:17:57.186+0000",
                    "started": "2019-07-18T06:17:57.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278752",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512707188\n \n \n   @liyafan82 @wesm  @lidavidm might have a better perspective, but I think this is how I would approach the non-contiguous varchar case (this might expose some rought edges or fixes needed to the current implementation:\r\n   \r\n   1.  Create a class that extends ExtensionType.  Something like StringViewExtensionType.  The on the wire format type would be VarCharType.  When deserializing if necessary you can use metadata to determine if determine whether to return a VarCharVector or the extension type defined below.\r\n   2.  Create a new class that extends ExtensionTypeVector<StructVector> or ExtensionTypeVector<VarCharVector> .  Something like StringViewExtensionTypeVector.  On this class, add what-ever method you want to use to interact with the object (e.g. set(bytes[] b, index).  Override the getBuffers and the getChildren to return translate the internal data-structure to buffers needed for on-the-wire format of VarChar.    \r\n   \r\n   the main open questions which I think will only be answered when trying to implement this:\r\n   1.  Do we need to extract an interface for either ExtensionTypeVector or VarCharVector to get the functionality needed for the new in memory representation?\r\n   2.  Can we dynamically choose whether to instantiate the ExtensionTypeVector or VarCharVector (looking at the APIs this should be possible)?\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T07:54:14.054+0000",
                    "updated": "2019-07-18T07:54:14.054+0000",
                    "started": "2019-07-18T07:54:14.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278798",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512766016\n \n \n   > @liyafan82 @wesm @lidavidm might have a better perspective, but I think this is how I would approach the non-contiguous varchar case (this might expose some rought edges or fixes needed to the current implementation:\r\n   > \r\n   > 1. Create a class that extends ExtensionType.  Something like StringViewExtensionType.  The on the wire format type would be VarCharType.  When deserializing if necessary you can use metadata to determine if determine whether to return a VarCharVector or the extension type defined below.\r\n   > 2. Create a new class that extends ExtensionTypeVector or ExtensionTypeVector .  Something like StringViewExtensionTypeVector.  On this class, add what-ever method you want to use to interact with the object (e.g. set(bytes[] b, index).  Override the getBuffers and the getChildren to return translate the internal data-structure to buffers needed for on-the-wire format of VarChar.\r\n   > \r\n   > the main open questions which I think will only be answered when trying to implement this:\r\n   > \r\n   > 1. Do we need to extract an interface for either ExtensionTypeVector or VarCharVector to get the functionality needed for the new in memory representation?\r\n   > 2. Can we dynamically choose whether to instantiate the ExtensionTypeVector or VarCharVector (looking at the APIs this should be possible)?\r\n   \r\n   @emkornfield thanks for your valuable feedback.\r\n   \r\n   I agree that it is a good idea to create a new ExtensionType. For vector type, I would prefer extending the FixedSizeWidthVector (as suggested by @wesm), because essentially it is a fixed-width vector (8 bytes address & 4 bytes length), and many functionalities for BaseFixedWidthVector can be reused.\r\n   \r\n   I have an additional question (may be this is already solved?):\r\n   How to merge multiple consecutive ArrowBuf into one?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T10:48:21.710+0000",
                    "updated": "2019-07-18T10:48:21.710+0000",
                    "started": "2019-07-18T10:48:21.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278889",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512784884\n \n \n   And actually, if we never care about reconstructing the \"Extension type\" on the other side of the wire we don't need to use the extension type mechanism at all.  We probably just need to have a new interface/base method which with something like \"convertToWireTu[e\" which is maybe what @liyafan82 meant in his original comment.\r\n   \r\n   > I have an additional question (may be this is already solved?):\r\n   How to merge multiple consecutive ArrowBuf into one?\r\n   \r\n   I'm not aware of functionality that does this.  I'm also not sure what is meant by consecutive.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T11:55:43.071+0000",
                    "updated": "2019-07-18T11:55:43.071+0000",
                    "started": "2019-07-18T11:55:43.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278926",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512784884\n \n \n   And actually, if we never care about reconstructing the \"Extension type\" on the other side of the wire we don't need to use the extension type mechanism at all.  We probably just need to have a new interface/base method which with something like \"convertToWireTu[e\" which is maybe what @liyafan82 meant in his original comment.  It would be good to distinguish between actual memory representation and wire based representation.\r\n   \r\n   > I have an additional question (may be this is already solved?):\r\n   How to merge multiple consecutive ArrowBuf into one?\r\n   \r\n   I'm not aware of functionality that does this.  I'm also not sure what is meant by consecutive.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T11:56:30.117+0000",
                    "updated": "2019-07-18T11:56:30.117+0000",
                    "started": "2019-07-18T11:56:30.116+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278927",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512797438\n \n \n   > And actually, if we never care about reconstructing the \"Extension type\" on the other side of the wire we don't need to use the extension type mechanism at all. We probably just need to have a new interface/base method which with something like \"convertToWireTu[e\" which is maybe what @liyafan82 meant in his original comment. It would be good to distinguish between actual memory representation and wire based representation.\r\n   > \r\n   > > I have an additional question (may be this is already solved?):\r\n   > > How to merge multiple consecutive ArrowBuf into one?\r\n   > \r\n   > I'm not aware of functionality that does this. I'm also not sure what is meant by consecutive.\r\n   \r\n   Maybe we need to solve the problem of merging ArrowBufs. \r\n   By consecutive I mean the ArrowBufs are in a continuous memory region, that is:\r\n   \r\n   ArrowBuf1.address + ArrowBuf1.capacity = ArrowBuf2.address\r\n   ArrowBuf2.address + ArrowBuf2.capacity = ArrowBuf3.address\r\n   ...\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T12:38:23.110+0000",
                    "updated": "2019-07-18T12:38:23.110+0000",
                    "started": "2019-07-18T12:38:23.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278956",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/278970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512797438\n \n \n   > And actually, if we never care about reconstructing the \"Extension type\" on the other side of the wire we don't need to use the extension type mechanism at all. We probably just need to have a new interface/base method which with something like \"convertToWireTu[e\" which is maybe what @liyafan82 meant in his original comment. It would be good to distinguish between actual memory representation and wire based representation.\r\n   > \r\n   > > I have an additional question (may be this is already solved?):\r\n   > > How to merge multiple consecutive ArrowBuf into one?\r\n   > \r\n   > I'm not aware of functionality that does this. I'm also not sure what is meant by consecutive.\r\n   \r\n   Maybe we need to solve the problem of merging ArrowBufs. \r\n   By consecutive I mean the ArrowBufs are in a continuous memory region, that is:\r\n   \r\n   ArrowBuf1.address + ArrowBuf1.capacity == ArrowBuf2.address\r\n   ArrowBuf2.address + ArrowBuf2.capacity == ArrowBuf3.address\r\n   ...\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T12:49:22.023+0000",
                    "updated": "2019-07-18T12:49:22.023+0000",
                    "started": "2019-07-18T12:49:22.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "278970",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/279104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512884614\n \n \n   > Maybe we need to solve the problem of merging ArrowBufs.\r\n   > By consecutive I mean the ArrowBufs are in a continuous memory region, that is:\r\n   >\r\n   > ArrowBuf1.address + ArrowBuf1.capacity == ArrowBuf2.address\r\n   > ArrowBuf2.address + ArrowBuf2.capacity == ArrowBuf3.address\r\n   \r\n   I'm not sure how this relates to this problem. We have\r\n   \r\n   * Initial in-memory representation: some built-in Arrow vector type (like FixedSizeBinary)\r\n   * On-wire representation: a different built-in Arrow vector type (like String/VarChar)\r\n   \r\n   You (the user, or we could have StringViewExtensionVector in the library, too) define a function to convert from the former to the latter, so the ArrowBuf handling should all be taken care of by the built-in types\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T16:14:30.072+0000",
                    "updated": "2019-07-18T16:14:30.072+0000",
                    "started": "2019-07-18T16:14:30.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279104",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/279110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-512888084\n \n \n   Merging arrow bufs is should be straightforward with the existing APIs.\n   \n   ArrowBuf is basically three things: address, length, reference manager. The\n   first two are easy to fill. For the third, you'll have to implement a new\n   ReferenceManager that understands all the reference semantics associated\n   with a merged buffer (which possibly includes other merged buffers).\n   \n   I haven't thought through how to implement all the ReferenceManager\n   behaviors with a merged buffer so there may be some gotchas there.\n   Release/retain calls should be straightforward but transfer semantics, nio,\n   etc will likely have to do unmerge/operate/remerge type behaviors.\n   \n   On Thu, Jul 18, 2019 at 9:14 AM Wes McKinney <notifications@github.com>\n   wrote:\n   \n   > Maybe we need to solve the problem of merging ArrowBufs.\n   > By consecutive I mean the ArrowBufs are in a continuous memory region,\n   > that is:\n   >\n   > ArrowBuf1.address + ArrowBuf1.capacity == ArrowBuf2.address\n   > ArrowBuf2.address + ArrowBuf2.capacity == ArrowBuf3.address\n   >\n   > I'm not sure how this relates to this problem. We have\n   >\n   >    - Initial in-memory representation: some built-in Arrow vector type\n   >    (like FixedSizeBinary)\n   >    - On-wire representation: a different built-in Arrow vector type (like\n   >    String/VarChar)\n   >\n   > You (the user, or we could have StringViewExtensionVector in the library,\n   > too) define a function to convert from the former to the latter, so the\n   > ArrowBuf handling should all be taken care of by the built-in types\n   >\n   > \u2014\n   > You are receiving this because you are subscribed to this thread.\n   > Reply to this email directly, view it on GitHub\n   > <https://github.com/apache/arrow/pull/4889?email_source=notifications&email_token=AABMYNRIQ7KTJPUIQVYVD3DQACJGNA5CNFSM4IEADRU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2I77BQ#issuecomment-512884614>,\n   > or mute the thread\n   > <https://github.com/notifications/unsubscribe-auth/AABMYNR7QV26YFRG636YXTDQACJGNANCNFSM4IEADRUQ>\n   > .\n   >\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-18T16:24:05.875+0000",
                    "updated": "2019-07-18T16:24:05.875+0000",
                    "started": "2019-07-18T16:24:05.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279110",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/279438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-513066837\n \n \n   @jacques-n Thanks a lot for your help suggestion. I will take a closer look at ReferenceManager.\r\n   \r\n   @wesm Thanks for your feedback. Sorry I did not make it clear enough.\r\n   \r\n   I think the main point for StringViewExtensionVector is to avoid memory copy. So before sending through IPC, it should not be converted to a VarCharVector, because that will incurs memory copy and performance overhead. Instead, the memory copy can be hidden through the IPC, as illustrated by the figure below:\r\n   \r\n   In the sender side, the strings are in un-continuous memory segments. In the transport wire, they are sent consecutively, so in the receiver side, the buffers are in a continuous memory region. If we can merge these buffers into one, we can easily convert it to a VarCharVector, without extra performance penalty.\r\n   \r\n   ![image](https://user-images.githubusercontent.com/42827532/61505147-614ac700-aa10-11e9-9aeb-1d2924b10863.png)\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-19T02:35:09.285+0000",
                    "updated": "2019-07-19T02:35:09.285+0000",
                    "started": "2019-07-19T02:35:09.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279438",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/279753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-513233326\n \n \n   That's tricky right now because the IPC layer works directly with a sequence of ArrowBuf. For example, the size of the entire body needs to be computed. So you would need to add some new abstractions to allow the code to reason about the IPC payload while deferring the assembly of these heap strings onto the wire until the very end. If you start doing some refactoring around this, I suggest having a discussion about it on the mailing list since the potential performance implications are very sensitive\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-19T13:42:32.822+0000",
                    "updated": "2019-07-19T13:42:32.822+0000",
                    "started": "2019-07-19T13:42:32.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "279753",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/280201",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-513618691\n \n \n   > That's tricky right now because the IPC layer works directly with a sequence of ArrowBuf. For example, the size of the entire body needs to be computed. So you would need to add some new abstractions to allow the code to reason about the IPC payload while deferring the assembly of these heap strings onto the wire until the very end. If you start doing some refactoring around this, I suggest having a discussion about it on the mailing list since the potential performance implications are very sensitive\r\n   \r\n   @wesm I see. Thanks a lot for your kind reminder.\r\n   \r\n   I think the changes may be minor than we have expected (Maybe I am wrong). IMO, we only need to override the getFieldBuffers method, so each string corresponds to a single ArrowBuf. We send the ArrowBufs in sequence, and in the receiver side, they naturally reside in continuous memory (if there is a head for each ArrowBuf, we can discard the duplicated ones).\r\n   \r\n   I am now looking at the IPC scenario, hoping the changes are minor. If I meet some difficulty, I hope to discuss with you.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-22T02:37:48.100+0000",
                    "updated": "2019-07-22T02:37:48.100+0000",
                    "started": "2019-07-22T02:37:48.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280201",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/280273",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-513697836\n \n \n   @wesm @emkornfield \r\n   Now I have verified the new vector (BinaryPointerVector) in the IPC scenario. So far, we only support decoding the vector as a BinaryPointerVector in the receiver side, as the problem of merging ArrowBufs deserves a separate issue. \r\n   \r\n   The new vector has 2 additional meta-data int the field type:\r\n   \r\n   - binary.pointer.type: when this is set to \"true\", it indicates the FixedSizeBinaryVector is a BinaryPointerVector.\r\n   - binary.pointer.encode.type: the type to be decoded in the receiver side. Now we only support \"BinaryPointer\"\r\n   \r\n   The changes for IPC communication is relatively minor:\r\n   1. The getFieldBuffers and loadFieldBuffers methods must be implemented properly to encapsulate each data element in a separate ArrowBuf.\r\n   2. The VectorLoader and VectorUnLoader are revised to account for the dynamically determined number of ArrowBufs. \r\n   \r\n   Would you please take a look, and give your valuable feedback?\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-22T08:39:22.481+0000",
                    "updated": "2019-07-22T08:39:22.481+0000",
                    "started": "2019-07-22T08:39:22.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280273",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/280274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-513697836\n \n \n   @wesm @emkornfield \r\n   Now I have verified the new vector (BinaryPointerVector) in the IPC scenario. So far, we only support decoding the vector as a BinaryPointerVector in the receiver side, as the problem of merging ArrowBufs deserves a separate issue. \r\n   \r\n   The new vector has 2 additional meta-data in the field type:\r\n   \r\n   - binary.pointer.type: when this is set to \"true\", it indicates the FixedSizeBinaryVector is a BinaryPointerVector.\r\n   - binary.pointer.encode.type: the type to be decoded in the receiver side. Now we only support \"BinaryPointer\"\r\n   \r\n   The changes for IPC communication is relatively minor:\r\n   1. The getFieldBuffers and loadFieldBuffers methods must be implemented properly to encapsulate each data element in a separate ArrowBuf.\r\n   2. The VectorLoader and VectorUnLoader are revised to account for the dynamically determined number of ArrowBufs. \r\n   \r\n   Would you please take a look, and give your valuable feedback?\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-22T08:39:52.522+0000",
                    "updated": "2019-07-22T08:39:52.522+0000",
                    "started": "2019-07-22T08:39:52.522+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280274",
                    "issueId": "13244633"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/worklog/280275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on issue #4889: ARROW-5929: [Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC\nURL: https://github.com/apache/arrow/pull/4889#issuecomment-513697836\n \n \n   @wesm @emkornfield \r\n   Now I have verified the new vector (BinaryPointerVector) in the IPC scenario. So far, we only support decoding the vector as a BinaryPointerVector in the receiver side, as the problem of merging ArrowBufs deserves a separate issue. \r\n   \r\n   The new vector has 2 additional meta-data in the field type:\r\n   \r\n   - binary.pointer.type: when this is set to \"true\", it indicates the FixedSizeBinaryVector is a BinaryPointerVector.\r\n   - binary.pointer.encode.type: the type to be decoded in the receiver side. Now we only support \"BinaryPointer\"\r\n   \r\n   The changes for IPC communication are relatively minor:\r\n   1. The getFieldBuffers and loadFieldBuffers methods must be implemented properly to encapsulate each data element in a separate ArrowBuf.\r\n   2. The VectorLoader and VectorUnLoader are revised to account for the dynamically determined number of ArrowBufs. \r\n   \r\n   Would you please take a look, and give your valuable feedback?\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-22T08:40:17.864+0000",
                    "updated": "2019-07-22T08:40:17.864+0000",
                    "started": "2019-07-22T08:40:17.863+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "280275",
                    "issueId": "13244633"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@26385e71[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54c43851[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15e54ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@742de261[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@474079a1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@28f3e8ae[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bfb1a17[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@40ded5e3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4173128[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@33160f9c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@303e804b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6793a62[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jul 15 01:53:56 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-13T01:27:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5929/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-07-12T14:30:11.000+0000",
        "updated": "2020-02-13T01:27:43.000+0000",
        "timeoriginalestimate": null,
        "description": "As being discussed on the mailing list, a possible use case for ExtensionVector involves having the Arrow buffers contain pointer-type values referring to memory outside of the Arrow memory heap. In IPC, such vectors would need to be serialized to a wholly Arrow-resident form, such as a VarBinaryVector. We do not have an API to allow for this, so this JIRA proposes to add new functions that can indicate to the IPC layer that an ExtensionVector requires additional serialization to a native Arrow type (in such case, the extension type metadata would be discarded)",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Define API for ExtensionVector whose data must be serialized prior to being sent via IPC",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13244633/comment/16884803",
                    "id": "16884803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~wesmckinn], many thanks for opening this issue.\r\n\r\nI think\u00a0this is a useful feature covering many important use cases.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
                        "name": "fan_li_ya",
                        "key": "fan_li_ya",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Liya Fan",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2019-07-15T01:53:56.662+0000",
                    "updated": "2019-07-15T01:53:56.662+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z04mbc:",
        "customfield_12314139": null
    }
}