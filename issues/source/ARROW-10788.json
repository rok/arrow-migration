{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13343758",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343758",
    "key": "ARROW-10788",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12604115",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12604115",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13306558",
                    "key": "ARROW-8884",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306558",
                    "fields": {
                        "summary": "[C++] Listing files with S3FileSystem is slow",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10788/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343758/worklog/519061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #8818:\nURL: https://github.com/apache/arrow/pull/8818\n\n\n   Use the AWS SDK async APIs to launch child directory reads concurrently as soon\r\n   as we get the required information from a parent read.\r\n   \r\n   Also, similarly issue directory tree deletion commands in parallel.\r\n   \r\n   On this machine, listing the entire directory tree at \"s3://mf-nwp-models/arome-france/v2/2020-12-02\"\r\n   goes down from 12 seconds to 2 seconds (a 6x speedup).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-02T15:08:43.742+0000",
                    "updated": "2020-12-02T15:08:43.742+0000",
                    "started": "2020-12-02T15:08:43.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519061",
                    "issueId": "13343758"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343758/worklog/519082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8818:\nURL: https://github.com/apache/arrow/pull/8818#issuecomment-737316598\n\n\n   https://issues.apache.org/jira/browse/ARROW-10788\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-02T15:49:17.711+0000",
                    "updated": "2020-12-02T15:49:17.711+0000",
                    "started": "2020-12-02T15:49:17.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "519082",
                    "issueId": "13343758"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343758/worklog/521351",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8818:\nURL: https://github.com/apache/arrow/pull/8818#discussion_r537767675\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1080,6 +1082,134 @@ void FileObjectToInfo(const S3Model::Object& obj, FileInfo* info) {\n   info->set_mtime(FromAwsDatetime(obj.GetLastModified()));\n }\n \n+struct TreeWalker : public std::enable_shared_from_this<TreeWalker> {\n+  using ResultHandler = std::function<Status(const std::string& prefix,\n+                                             const S3Model::ListObjectsV2Result&)>;\n+  using ErrorHandler = std::function<Status(const AWSError<S3Errors>& error)>;\n+  using RecursionHandler = std::function<Result<bool>(int32_t nesting_depth)>;\n+\n+  Aws::S3::S3Client* client_;\n+  const std::string bucket_;\n+  const std::string base_dir_;\n+  const int32_t max_keys_;\n+  const ResultHandler result_handler_;\n+  const ErrorHandler error_handler_;\n+  const RecursionHandler recursion_handler_;\n+\n+  template <typename... Args>\n+  static Status Walk(Args&&... args) {\n+    auto self = std::make_shared<TreeWalker>(std::forward<Args>(args)...);\n+    return self->DoWalk();\n+  }\n+\n+  TreeWalker(Aws::S3::S3Client* client, std::string bucket, std::string base_dir,\n+             int32_t max_keys, ResultHandler result_handler, ErrorHandler error_handler,\n+             RecursionHandler recursion_handler)\n+      : client_(std::move(client)),\n+        bucket_(std::move(bucket)),\n+        base_dir_(std::move(base_dir)),\n+        max_keys_(max_keys),\n+        result_handler_(std::move(result_handler)),\n+        error_handler_(std::move(error_handler)),\n+        recursion_handler_(std::move(recursion_handler)) {}\n+\n+ private:\n+  std::mutex mutex_;\n+  Future<> future_;\n+  std::atomic<int32_t> num_in_flight_;\n+\n+  Status DoWalk() {\n+    future_ = decltype(future_)::Make();\n+    num_in_flight_ = 0;\n+    WalkChild(base_dir_, /*nesting_depth=*/0);\n+    // When this returns, ListObjectsV2 tasks either have finished or will exit early\n+    return future_.status();\n+  }\n+\n+  bool is_finished() const { return future_.is_finished(); }\n+\n+  void ListObjectsFinished(Status st) {\n+    const auto in_flight = --num_in_flight_;\n+    if (!st.ok() || !in_flight) {\n+      future_.MarkFinished(std::move(st));\n+    }\n+  }\n+\n+  struct ListObjectsV2Handler {\n+    std::shared_ptr<TreeWalker> walker;\n+    std::string prefix;\n+    int32_t nesting_depth;\n+    S3Model::ListObjectsV2Request req;\n+\n+    void operator()(const Aws::S3::S3Client*, const S3Model::ListObjectsV2Request&,\n+                    const S3Model::ListObjectsV2Outcome& outcome,\n+                    const std::shared_ptr<const Aws::Client::AsyncCallerContext>&) {\n\nReview comment:\n       Nit: this would be more readable if you rewrote as \r\n   ```c++\r\n   Result<bool> DoHandle(... args);\r\n   \r\n   void operator()(... args) {\r\n     std::unique_lock<std::mutex> guard(walker->mutex_);\r\n     auto maybe_truncated = DoHandle(args...);\r\n     if (maybe_truncated.ok() && *maybe_truncated) {\r\n       DCHECK(!result.GetNextContinuationToken().empty());\r\n       req.SetContinuationToken(result.GetNextContinuationToken());\r\n       walker->client_->ListObjectsV2Async(req, *this);\r\n       return;\r\n     }\r\n     walker->ListObjectsFinished(std::move(maybetruncated).status());\r\n   }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1242,27 +1372,45 @@ class S3FileSystem::Impl {\n   // Recursive workhorse for GetTargetStats(FileSelector...)\n   Status Walk(const FileSelector& select, const std::string& bucket,\n               const std::string& key, std::vector<FileInfo>* out) {\n-    int32_t nesting_depth = 0;\n-    return Walk(select, bucket, key, nesting_depth, out);\n-  }\n+    bool is_empty = true;\n \n-  Status Walk(const FileSelector& select, const std::string& bucket,\n-              const std::string& key, int32_t nesting_depth, std::vector<FileInfo>* out) {\n-    if (nesting_depth >= kMaxNestingDepth) {\n-      return Status::IOError(\"S3 filesystem tree exceeds maximum nesting depth (\",\n-                             kMaxNestingDepth, \")\");\n-    }\n+    auto handle_error = [&](const AWSError<S3Errors>& error) -> Status {\n+      if (select.allow_not_found && IsNotFound(error)) {\n+        return Status::OK();\n+      }\n+      return ErrorToStatus(std::forward_as_tuple(\"When listing objects under key '\", key,\n+                                                 \"' in bucket '\", bucket, \"': \"),\n+                           error);\n+    };\n \n-    bool is_empty = true;\n-    std::vector<std::string> child_keys;\n+    auto handle_recursion = [&](int32_t nesting_depth) -> Result<bool> {\n+      if (nesting_depth >= kMaxNestingDepth) {\n+        return Status::IOError(\"S3 filesystem tree exceeds maximum nesting depth (\",\n+                               kMaxNestingDepth, \")\");\n+      }\n\nReview comment:\n       since this is common to any recursive walk, should it be inlined in ListObjectsV2Handler::DoHandle or so?\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1080,6 +1082,134 @@ void FileObjectToInfo(const S3Model::Object& obj, FileInfo* info) {\n   info->set_mtime(FromAwsDatetime(obj.GetLastModified()));\n }\n \n+struct TreeWalker : public std::enable_shared_from_this<TreeWalker> {\n+  using ResultHandler = std::function<Status(const std::string& prefix,\n+                                             const S3Model::ListObjectsV2Result&)>;\n+  using ErrorHandler = std::function<Status(const AWSError<S3Errors>& error)>;\n+  using RecursionHandler = std::function<Result<bool>(int32_t nesting_depth)>;\n+\n+  Aws::S3::S3Client* client_;\n+  const std::string bucket_;\n+  const std::string base_dir_;\n+  const int32_t max_keys_;\n+  const ResultHandler result_handler_;\n+  const ErrorHandler error_handler_;\n+  const RecursionHandler recursion_handler_;\n+\n+  template <typename... Args>\n+  static Status Walk(Args&&... args) {\n+    auto self = std::make_shared<TreeWalker>(std::forward<Args>(args)...);\n+    return self->DoWalk();\n+  }\n+\n+  TreeWalker(Aws::S3::S3Client* client, std::string bucket, std::string base_dir,\n+             int32_t max_keys, ResultHandler result_handler, ErrorHandler error_handler,\n+             RecursionHandler recursion_handler)\n+      : client_(std::move(client)),\n+        bucket_(std::move(bucket)),\n+        base_dir_(std::move(base_dir)),\n+        max_keys_(max_keys),\n+        result_handler_(std::move(result_handler)),\n+        error_handler_(std::move(error_handler)),\n+        recursion_handler_(std::move(recursion_handler)) {}\n+\n+ private:\n+  std::mutex mutex_;\n+  Future<> future_;\n+  std::atomic<int32_t> num_in_flight_;\n+\n+  Status DoWalk() {\n+    future_ = decltype(future_)::Make();\n+    num_in_flight_ = 0;\n+    WalkChild(base_dir_, /*nesting_depth=*/0);\n+    // When this returns, ListObjectsV2 tasks either have finished or will exit early\n+    return future_.status();\n+  }\n+\n+  bool is_finished() const { return future_.is_finished(); }\n+\n+  void ListObjectsFinished(Status st) {\n+    const auto in_flight = --num_in_flight_;\n+    if (!st.ok() || !in_flight) {\n+      future_.MarkFinished(std::move(st));\n+    }\n+  }\n+\n+  struct ListObjectsV2Handler {\n+    std::shared_ptr<TreeWalker> walker;\n+    std::string prefix;\n+    int32_t nesting_depth;\n+    S3Model::ListObjectsV2Request req;\n+\n+    void operator()(const Aws::S3::S3Client*, const S3Model::ListObjectsV2Request&,\n+                    const S3Model::ListObjectsV2Outcome& outcome,\n+                    const std::shared_ptr<const Aws::Client::AsyncCallerContext>&) {\n+      // Serialize calls to operation-specific handlers\n+      std::unique_lock<std::mutex> guard(walker->mutex_);\n+      if (walker->is_finished()) {\n+        // Early exit: avoid executing handlers if DoWalk() returned\n+        return;\n+      }\n+      if (!outcome.IsSuccess()) {\n+        Status st = walker->error_handler_(outcome.GetError());\n+        walker->ListObjectsFinished(std::move(st));\n+        return;\n+      }\n+      const auto& result = outcome.GetResult();\n+      bool recurse = result.GetCommonPrefixes().size() > 0;\n+      if (recurse) {\n+        auto maybe_recurse = walker->recursion_handler_(nesting_depth + 1);\n+        if (!maybe_recurse.ok()) {\n+          walker->ListObjectsFinished(maybe_recurse.status());\n+          return;\n+        }\n+        recurse &= *maybe_recurse;\n+      }\n+      Status st = walker->result_handler_(prefix, result);\n+      if (!st.ok()) {\n+        walker->ListObjectsFinished(std::move(st));\n+        return;\n+      }\n+      if (recurse) {\n+        walker->WalkChildren(result, nesting_depth + 1);\n+      }\n+      if (result.GetIsTruncated()) {\n+        DCHECK(!result.GetNextContinuationToken().empty());\n+        req.SetContinuationToken(result.GetNextContinuationToken());\n+        walker->client_->ListObjectsV2Async(req, *this);\n+      } else {\n+        walker->ListObjectsFinished(Status::OK());\n+      }\n+    }\n+\n+    void Start() {\n+      req.SetBucket(ToAwsString(walker->bucket_));\n+      if (!prefix.empty()) {\n+        req.SetPrefix(ToAwsString(prefix) + kSep);\n+      }\n+      req.SetDelimiter(Aws::String() + kSep);\n+      req.SetMaxKeys(walker->max_keys_);\n+      walker->client_->ListObjectsV2Async(req, *this);\n+    }\n+  };\n+\n+  void WalkChild(std::string key, int32_t nesting_depth) {\n+    ListObjectsV2Handler handler{shared_from_this(), std::move(key), nesting_depth, {}};\n+    ++num_in_flight_;\n+    handler.Start();\n\nReview comment:\n       Nit: having a Start method on a handler is counter intuitive. I'd prefer it be inlined here and `req` not be a member. (It's referenced in `ListObjectsV2Handler::operator()` but it still doesn't need to be a member since the same ListObjectsV2Request is passed as an argument)\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1317,36 +1434,24 @@ class S3FileSystem::Impl {\n         return PathNotFound(bucket, key);\n       }\n     }\n+    // TODO sort results for convenience?\n\nReview comment:\n       I think we probably should, if only to establish consistency for testing\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1379,23 +1520,16 @@ class S3FileSystem::Impl {\n       }\n       req.SetBucket(ToAwsString(bucket));\n       req.SetDelete(std::move(del));\n-      auto outcome = client_->DeleteObjects(req);\n-      if (!outcome.IsSuccess()) {\n-        return ErrorToStatus(outcome.GetError());\n-      }\n-      // Also need to check per-key errors, even on successful outcome\n-      // See\n-      // https://docs.aws.amazon.com/fr_fr/AmazonS3/latest/API/multiobjectdeleteapi.html\n-      const auto& errors = outcome.GetResult().GetErrors();\n-      if (!errors.empty()) {\n-        std::stringstream ss;\n-        ss << \"Got the following \" << errors.size()\n-           << \" errors when deleting objects in S3 bucket '\" << bucket << \"':\\n\";\n-        for (const auto& error : errors) {\n-          ss << \"- key '\" << error.GetKey() << \"': \" << error.GetMessage() << \"\\n\";\n-        }\n-        return Status::IOError(ss.str());\n-      }\n+      deleters.emplace_back();\n+      client_->DeleteObjectsAsync(req, deleters.back());\n+    }\n+\n+    std::vector<Future<>*> futures(deleters.size());\n+    std::transform(deleters.begin(), deleters.end(), futures.begin(),\n+                   [](Deleter& del) { return &del.future; });\n\nReview comment:\n       ```suggestion\r\n         futures.push_back(&deleters.back().future);\r\n       }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1357,20 +1462,56 @@ class S3FileSystem::Impl {\n                            error);\n     };\n \n-    RETURN_NOT_OK(\n-        ListObjectsV2(bucket, key, std::move(handle_results), std::move(handle_error)));\n+    auto handle_recursion = [&](int32_t nesting_depth) -> Result<bool> {\n+      if (nesting_depth >= kMaxNestingDepth) {\n+        return Status::IOError(\"S3 filesystem tree exceeds maximum nesting depth (\",\n+                               kMaxNestingDepth, \")\");\n+      }\n+      return true;  // Recurse\n+    };\n \n-    // Recurse\n-    for (const auto& child_key : child_keys) {\n-      RETURN_NOT_OK(\n-          WalkForDeleteDir(bucket, child_key, nesting_depth + 1, file_keys, dir_keys));\n-    }\n-    return Status::OK();\n+    return TreeWalker::Walk(client_.get(), bucket, key, kListObjectsMaxKeys,\n+                            handle_results, handle_error, handle_recursion);\n   }\n \n   // Delete multiple objects at once\n   Status DeleteObjects(const std::string& bucket, const std::vector<std::string>& keys) {\n+    struct Deleter {\n+      Future<> future;\n+\n+      Deleter() : future(Future<>::Make()) {}\n\nReview comment:\n       ```suggestion\r\n       struct DeleteHandler {\r\n         Future<> future = Future<>::Make();\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T19:48:12.298+0000",
                    "updated": "2020-12-07T19:48:12.298+0000",
                    "started": "2020-12-07T19:48:12.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521351",
                    "issueId": "13343758"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343758/worklog/521613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8818:\nURL: https://github.com/apache/arrow/pull/8818#discussion_r538196698\n\n\n\n##########\nFile path: cpp/src/arrow/filesystem/s3fs.cc\n##########\n@@ -1080,6 +1082,134 @@ void FileObjectToInfo(const S3Model::Object& obj, FileInfo* info) {\n   info->set_mtime(FromAwsDatetime(obj.GetLastModified()));\n }\n \n+struct TreeWalker : public std::enable_shared_from_this<TreeWalker> {\n+  using ResultHandler = std::function<Status(const std::string& prefix,\n+                                             const S3Model::ListObjectsV2Result&)>;\n+  using ErrorHandler = std::function<Status(const AWSError<S3Errors>& error)>;\n+  using RecursionHandler = std::function<Result<bool>(int32_t nesting_depth)>;\n+\n+  Aws::S3::S3Client* client_;\n+  const std::string bucket_;\n+  const std::string base_dir_;\n+  const int32_t max_keys_;\n+  const ResultHandler result_handler_;\n+  const ErrorHandler error_handler_;\n+  const RecursionHandler recursion_handler_;\n+\n+  template <typename... Args>\n+  static Status Walk(Args&&... args) {\n+    auto self = std::make_shared<TreeWalker>(std::forward<Args>(args)...);\n+    return self->DoWalk();\n+  }\n+\n+  TreeWalker(Aws::S3::S3Client* client, std::string bucket, std::string base_dir,\n+             int32_t max_keys, ResultHandler result_handler, ErrorHandler error_handler,\n+             RecursionHandler recursion_handler)\n+      : client_(std::move(client)),\n+        bucket_(std::move(bucket)),\n+        base_dir_(std::move(base_dir)),\n+        max_keys_(max_keys),\n+        result_handler_(std::move(result_handler)),\n+        error_handler_(std::move(error_handler)),\n+        recursion_handler_(std::move(recursion_handler)) {}\n+\n+ private:\n+  std::mutex mutex_;\n+  Future<> future_;\n+  std::atomic<int32_t> num_in_flight_;\n+\n+  Status DoWalk() {\n+    future_ = decltype(future_)::Make();\n+    num_in_flight_ = 0;\n+    WalkChild(base_dir_, /*nesting_depth=*/0);\n+    // When this returns, ListObjectsV2 tasks either have finished or will exit early\n+    return future_.status();\n+  }\n+\n+  bool is_finished() const { return future_.is_finished(); }\n+\n+  void ListObjectsFinished(Status st) {\n+    const auto in_flight = --num_in_flight_;\n+    if (!st.ok() || !in_flight) {\n+      future_.MarkFinished(std::move(st));\n+    }\n+  }\n+\n+  struct ListObjectsV2Handler {\n+    std::shared_ptr<TreeWalker> walker;\n+    std::string prefix;\n+    int32_t nesting_depth;\n+    S3Model::ListObjectsV2Request req;\n+\n+    void operator()(const Aws::S3::S3Client*, const S3Model::ListObjectsV2Request&,\n+                    const S3Model::ListObjectsV2Outcome& outcome,\n+                    const std::shared_ptr<const Aws::Client::AsyncCallerContext>&) {\n+      // Serialize calls to operation-specific handlers\n+      std::unique_lock<std::mutex> guard(walker->mutex_);\n+      if (walker->is_finished()) {\n+        // Early exit: avoid executing handlers if DoWalk() returned\n+        return;\n+      }\n+      if (!outcome.IsSuccess()) {\n+        Status st = walker->error_handler_(outcome.GetError());\n+        walker->ListObjectsFinished(std::move(st));\n+        return;\n+      }\n+      const auto& result = outcome.GetResult();\n+      bool recurse = result.GetCommonPrefixes().size() > 0;\n+      if (recurse) {\n+        auto maybe_recurse = walker->recursion_handler_(nesting_depth + 1);\n+        if (!maybe_recurse.ok()) {\n+          walker->ListObjectsFinished(maybe_recurse.status());\n+          return;\n+        }\n+        recurse &= *maybe_recurse;\n+      }\n+      Status st = walker->result_handler_(prefix, result);\n+      if (!st.ok()) {\n+        walker->ListObjectsFinished(std::move(st));\n+        return;\n+      }\n+      if (recurse) {\n+        walker->WalkChildren(result, nesting_depth + 1);\n+      }\n+      if (result.GetIsTruncated()) {\n+        DCHECK(!result.GetNextContinuationToken().empty());\n+        req.SetContinuationToken(result.GetNextContinuationToken());\n+        walker->client_->ListObjectsV2Async(req, *this);\n+      } else {\n+        walker->ListObjectsFinished(Status::OK());\n+      }\n+    }\n+\n+    void Start() {\n+      req.SetBucket(ToAwsString(walker->bucket_));\n+      if (!prefix.empty()) {\n+        req.SetPrefix(ToAwsString(prefix) + kSep);\n+      }\n+      req.SetDelimiter(Aws::String() + kSep);\n+      req.SetMaxKeys(walker->max_keys_);\n+      walker->client_->ListObjectsV2Async(req, *this);\n+    }\n+  };\n+\n+  void WalkChild(std::string key, int32_t nesting_depth) {\n+    ListObjectsV2Handler handler{shared_from_this(), std::move(key), nesting_depth, {}};\n+    ++num_in_flight_;\n+    handler.Start();\n\nReview comment:\n       `ListObjectsV2Handler::operator()` gets the request as a const-ref, though. On the contrary, `WalkChild` doesn't have any need for the request object except to pass it to the handler.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-08T09:57:27.316+0000",
                    "updated": "2020-12-08T09:57:27.316+0000",
                    "started": "2020-12-08T09:57:27.316+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521613",
                    "issueId": "13343758"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343758/worklog/521649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8818:\nURL: https://github.com/apache/arrow/pull/8818\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-08T12:18:36.520+0000",
                    "updated": "2020-12-08T12:18:36.520+0000",
                    "started": "2020-12-08T12:18:36.520+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521649",
                    "issueId": "13343758"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2bc8b1b6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c9d8fbe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@425c07db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@52ac9051[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@750b43a6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@63dd4bb3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@411dfacc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7705d4a6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58bcaf93[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@51b5f7e4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f50bc84[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2629e72c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 08 12:18:23 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-08T12:18:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10788/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-12-02T12:41:48.000+0000",
        "updated": "2020-12-08T12:18:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Doing a recursive S3 directory walk using GetFileInfo(Selector) currently lists all encountered directories serially, waiting for the results of one directory listing (or portion thereof) before launching the next one. Instead, we should use the Async APIs provided by the AWS SDK to parallelize HTTP requests as much as possible.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Make S3 recursive walks parallel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343758/comment/17245856",
                    "id": "17245856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8818\n[https://github.com/apache/arrow/pull/8818]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-12-08T12:18:23.348+0000",
                    "updated": "2020-12-08T12:18:23.348+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0l4k8:",
        "customfield_12314139": null
    }
}