{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13200821",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821",
    "key": "ARROW-3890",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "parquet",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jafournier",
            "name": "jafournier",
            "key": "jafournier",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "jacques",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jafournier",
            "name": "jafournier",
            "key": "jafournier",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "jacques",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3890/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063\n \n \n   I'm not sure if all compilers will be smart enough to do loop unswitching here. If it ends up being a bottleneck I suggest rewriting in a follow up patch.\r\n   \r\n   The BinaryArray overflow issue (ChunkedArray is not being produced) is still present here. We will need to address that in ARROW-2970\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-30T23:34:53.059+0000",
                    "updated": "2018-11-30T23:34:53.059+0000",
                    "started": "2018-11-30T23:34:53.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171239",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#issuecomment-443385664\n \n \n   On windows:\r\n   \r\n   ```\r\n   src\\arrow\\python\\CMakeFiles\\arrow_python_shared.dir\\serialize.cc.obj /out:release\\arrow_python.dll /implib:release\\arrow_python.lib /pdb:release\\arrow_python.pdb /dll /version:12.0 /machine:x64 /INCREMENTAL:NO release\\arrow.lib C:\\Miniconda36-x64\\envs\\arrow\\libs\\Python36.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:release\\arrow_python.dll.manifest\" failed (exit code 1120) with the following output:\r\n      Creating library release\\arrow_python.lib and object release\\arrow_python.exp\r\n   numpy_to_arrow.cc.obj : error LNK2019: unresolved external symbol \"unsigned short * arrow::util::internal::utf8_large_table\" (?utf8_large_table@internal@util@arrow@@3PAGA) referenced in function \"unsigned short __cdecl arrow::util::internal::ValidateOneUTF8Byte(unsigned char,unsigned short)\" (?ValidateOneUTF8Byte@internal@util@arrow@@YAGEG@Z)\r\n   release\\arrow_python.dll : fatal error LNK1120: 1 unresolved externals\r\n   [262/341] Building CXX object src\\parquet\\CMakeFiles\\parquet_static.dir\\column_writer.cc.obj\r\n   [263/341] Building CXX object src\\arrow\\python\\CMakeFiles\\python-test.dir\\python-test.cc.obj\r\n   ```\r\n   \r\n   Static members across DLLs in Windows is a bit zany, taking a look...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-01T01:12:21.007+0000",
                    "updated": "2018-12-01T01:12:21.007+0000",
                    "started": "2018-12-01T01:12:21.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171260",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#issuecomment-443386912\n \n \n   Hm, so I'm surprised we haven't hit this issue yet, but it seems unfortunately that we need to use different visibility macros for `libarrow_python`. The issue is that we need `__declspec(dllexport)` to be set for arrow_python.dll APIs but `__declspec(dllimport)` set for arrow.dll APIs when we are compiling the arrow_python library. If `__declspec(dllimport)` is not set on global data members (like `arrow::util::internal::utf8_table_large`) then they will not be properly imported. \r\n   \r\n   It seems this is a well known problem; I think other C++ projects address this by just not having a lot of DLL artifacts, see https://blog.kitware.com/create-dlls-on-windows-without-declspec-using-new-cmake-export-all-feature/. Using `WINDOWS_EXPORT_ALL_SYMBOLS` is not a panacea since\r\n   \r\n   > For global data symbols, `__declspec(dllimport)` must still be used when compiling against the code in the DLL. \r\n   \r\n   Darn. Well, it is what it is. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-01T01:24:22.079+0000",
                    "updated": "2018-12-01T01:24:22.079+0000",
                    "started": "2018-12-01T01:24:22.079+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171262",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm edited a comment on issue #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#issuecomment-443386912\n \n \n   Hm, so I'm surprised we haven't hit this issue yet, but it seems unfortunately that we need to use different visibility macros for `libarrow_python`. The issue is that we need `__declspec(dllexport)` to be set for arrow_python.dll APIs but `__declspec(dllimport)` set for arrow.dll APIs when we are compiling the arrow_python library. If `__declspec(dllimport)` is not set on global data members (like `arrow::util::internal::utf8_large_table`) then they will not be properly imported. \r\n   \r\n   It seems this is a well known problem; I think other C++ projects address this by just not having a lot of DLL artifacts, see https://blog.kitware.com/create-dlls-on-windows-without-declspec-using-new-cmake-export-all-feature/. Using `WINDOWS_EXPORT_ALL_SYMBOLS` is not a panacea since\r\n   \r\n   > For global data symbols, `__declspec(dllimport)` must still be used when compiling against the code in the DLL. \r\n   \r\n   Darn. Well, it is what it is. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-01T01:24:56.048+0000",
                    "updated": "2018-12-01T01:24:56.048+0000",
                    "started": "2018-12-01T01:24:56.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171263",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#issuecomment-443476313\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3063?src=pr&el=h1) Report\n   > Merging [#3063](https://codecov.io/gh/apache/arrow/pull/3063?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/a667fca3b71772886bb2595986266d2039823dcc?src=pr&el=desc) will **increase** coverage by `1.05%`.\n   > The diff coverage is `94.11%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3063/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3063?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##           master   #3063      +/-   ##\n   =========================================\n   + Coverage   87.15%   88.2%   +1.05%     \n   =========================================\n     Files         489     431      -58     \n     Lines       69161   65470    -3691     \n   =========================================\n   - Hits        60275   57748    -2527     \n   + Misses       8787    7722    -1065     \n   + Partials       99       0      -99\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3063?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/python/arrow\\_to\\_pandas.h](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vYXJyb3dfdG9fcGFuZGFzLmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/helpers.h](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaGVscGVycy5o) | `90% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/common.h](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vY29tbW9uLmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/decimal.h](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vZGVjaW1hbC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/python\\_to\\_arrow.h](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vcHl0aG9uX3RvX2Fycm93Lmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/inference.cc](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW5mZXJlbmNlLmNj) | `54.95% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/\\_\\_init\\_\\_.py](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX19pbml0X18ucHk=) | `69.23% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/serialize.h](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vc2VyaWFsaXplLmg=) | `0% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/numpy\\_to\\_arrow.cc](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vbnVtcHlfdG9fYXJyb3cuY2M=) | `93.73% <100%> (+0.19%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_array.py](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9hcnJheS5weQ==) | `99.1% <100%> (+0.02%)` | :arrow_up: |\n   | ... and [60 more](https://codecov.io/gh/apache/arrow/pull/3063/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3063?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3063?src=pr&el=footer). Last update [a667fca...dac4995](https://codecov.io/gh/apache/arrow/pull/3063?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-02T02:48:10.130+0000",
                    "updated": "2018-12-02T02:48:10.130+0000",
                    "started": "2018-12-02T02:48:10.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171327",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#issuecomment-443521517\n \n \n   +1. I want to get to work on the overflow issues. @pitrou or @xhochy if you have comments on these changes please let me know and I'll incorporate into the upcoming patches\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-02T16:41:13.628+0000",
                    "updated": "2018-12-02T16:41:13.628+0000",
                    "started": "2018-12-02T16:41:13.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171379",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/CMakeLists.txt b/cpp/src/arrow/python/CMakeLists.txt\nindex ff63eb0567..7f4603ae5d 100644\n--- a/cpp/src/arrow/python/CMakeLists.txt\n+++ b/cpp/src/arrow/python/CMakeLists.txt\n@@ -76,7 +76,7 @@ ADD_ARROW_LIB(arrow_python\n \n foreach(LIB_TARGET ${ARROW_PYTHON_LIBRARIES})\n   target_compile_definitions(${LIB_TARGET}\n-    PRIVATE ARROW_EXPORTING)\n+    PRIVATE ARROW_PYTHON_EXPORTING)\n endforeach()\n \n if (ARROW_BUILD_STATIC AND MSVC)\n@@ -112,6 +112,7 @@ install(FILES\n   pyarrow.h\n   serialize.h\n   type_traits.h\n+  visibility.h\n   DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/arrow/python\")\n \n # pkg-config support\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.h b/cpp/src/arrow/python/arrow_to_pandas.h\nindex 138b010515..753bf48235 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.h\n+++ b/cpp/src/arrow/python/arrow_to_pandas.h\n@@ -27,7 +27,7 @@\n #include <string>\n #include <unordered_set>\n \n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n namespace arrow {\n \n@@ -57,16 +57,16 @@ struct PandasOptions {\n         use_threads(false) {}\n };\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ConvertArrayToPandas(PandasOptions options, const std::shared_ptr<Array>& arr,\n                             PyObject* py_ref, PyObject** out);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ConvertChunkedArrayToPandas(PandasOptions options,\n                                    const std::shared_ptr<ChunkedArray>& col,\n                                    PyObject* py_ref, PyObject** out);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ConvertColumnToPandas(PandasOptions options, const std::shared_ptr<Column>& col,\n                              PyObject* py_ref, PyObject** out);\n \n@@ -76,7 +76,7 @@ Status ConvertColumnToPandas(PandasOptions options, const std::shared_ptr<Column\n // BlockManager structure of the pandas.DataFrame used as of pandas 0.19.x.\n //\n // tuple item: (indices: ndarray[int32], block: ndarray[TYPE, ndim=2])\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ConvertTableToPandas(PandasOptions options, const std::shared_ptr<Table>& table,\n                             MemoryPool* pool, PyObject** out);\n \n@@ -84,7 +84,7 @@ Status ConvertTableToPandas(PandasOptions options, const std::shared_ptr<Table>&\n ///\n /// Explicitly name columns that should be a categorical\n /// This option is only used on conversions that are applied to a table.\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ConvertTableToPandas(PandasOptions options,\n                             const std::unordered_set<std::string>& categorical_columns,\n                             const std::shared_ptr<Table>& table, MemoryPool* pool,\ndiff --git a/cpp/src/arrow/python/benchmark.h b/cpp/src/arrow/python/benchmark.h\nindex f88b6b432b..caaff32b36 100644\n--- a/cpp/src/arrow/python/benchmark.h\n+++ b/cpp/src/arrow/python/benchmark.h\n@@ -20,7 +20,7 @@\n \n #include \"arrow/python/platform.h\"\n \n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n namespace arrow {\n namespace py {\n@@ -29,7 +29,7 @@ namespace benchmark {\n // Micro-benchmark routines for use from ASV\n \n // Run PandasObjectIsNull() once over every object in *list*\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n void Benchmark_PandasObjectIsNull(PyObject* list);\n \n }  // namespace benchmark\ndiff --git a/cpp/src/arrow/python/common.h b/cpp/src/arrow/python/common.h\nindex 5779ef0976..6587bd328f 100644\n--- a/cpp/src/arrow/python/common.h\n+++ b/cpp/src/arrow/python/common.h\n@@ -26,8 +26,8 @@\n #include \"arrow/python/config.h\"\n \n #include \"arrow/buffer.h\"\n+#include \"arrow/python/visibility.h\"\n #include \"arrow/util/macros.h\"\n-#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n@@ -35,7 +35,7 @@ class MemoryPool;\n \n namespace py {\n \n-ARROW_EXPORT Status ConvertPyError(StatusCode code = StatusCode::UnknownError);\n+ARROW_PYTHON_EXPORT Status ConvertPyError(StatusCode code = StatusCode::UnknownError);\n \n // Catch a pending Python exception and return the corresponding Status.\n // If no exception is pending, Status::OK() is returned.\n@@ -47,14 +47,14 @@ inline Status CheckPyError(StatusCode code = StatusCode::UnknownError) {\n   }\n }\n \n-ARROW_EXPORT Status PassPyError();\n+ARROW_PYTHON_EXPORT Status PassPyError();\n \n // TODO(wesm): We can just let errors pass through. To be explored later\n #define RETURN_IF_PYERROR() ARROW_RETURN_NOT_OK(CheckPyError());\n \n #define PY_RETURN_IF_ERROR(CODE) ARROW_RETURN_NOT_OK(CheckPyError(CODE));\n \n-class ARROW_EXPORT PyAcquireGIL {\n+class ARROW_PYTHON_EXPORT PyAcquireGIL {\n  public:\n   PyAcquireGIL() : acquired_gil_(false) { acquire(); }\n \n@@ -85,7 +85,7 @@ class ARROW_EXPORT PyAcquireGIL {\n \n // A RAII primitive that DECREFs the underlying PyObject* when it\n // goes out of scope.\n-class ARROW_EXPORT OwnedRef {\n+class ARROW_PYTHON_EXPORT OwnedRef {\n  public:\n   OwnedRef() : obj_(NULLPTR) {}\n   OwnedRef(OwnedRef&& other) : OwnedRef(other.detach()) {}\n@@ -126,7 +126,7 @@ class ARROW_EXPORT OwnedRef {\n // Same as OwnedRef, but ensures the GIL is taken when it goes out of scope.\n // This is for situations where the GIL is not always known to be held\n // (e.g. if it is released in the middle of a function for performance reasons)\n-class ARROW_EXPORT OwnedRefNoGIL : public OwnedRef {\n+class ARROW_PYTHON_EXPORT OwnedRefNoGIL : public OwnedRef {\n  public:\n   OwnedRefNoGIL() : OwnedRef() {}\n   OwnedRefNoGIL(OwnedRefNoGIL&& other) : OwnedRef(other.detach()) {}\n@@ -226,10 +226,10 @@ struct PyBytesView {\n };\n \n // Return the common PyArrow memory pool\n-ARROW_EXPORT void set_default_memory_pool(MemoryPool* pool);\n-ARROW_EXPORT MemoryPool* get_memory_pool();\n+ARROW_PYTHON_EXPORT void set_default_memory_pool(MemoryPool* pool);\n+ARROW_PYTHON_EXPORT MemoryPool* get_memory_pool();\n \n-class ARROW_EXPORT PyBuffer : public Buffer {\n+class ARROW_PYTHON_EXPORT PyBuffer : public Buffer {\n  public:\n   /// While memoryview objects support multi-dimensional buffers, PyBuffer only supports\n   /// one-dimensional byte buffers.\ndiff --git a/cpp/src/arrow/python/config.h b/cpp/src/arrow/python/config.h\nindex c2b089d382..5649ffe55c 100644\n--- a/cpp/src/arrow/python/config.h\n+++ b/cpp/src/arrow/python/config.h\n@@ -21,7 +21,7 @@\n #include \"arrow/python/platform.h\"\n \n #include \"arrow/python/numpy_interop.h\"\n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n #if PY_MAJOR_VERSION >= 3\n #define PyString_Check PyUnicode_Check\n@@ -30,10 +30,10 @@\n namespace arrow {\n namespace py {\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n extern PyObject* numpy_nan;\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n void set_numpy_nan(PyObject* obj);\n \n }  // namespace py\ndiff --git a/cpp/src/arrow/python/decimal.h b/cpp/src/arrow/python/decimal.h\nindex dd382d14e0..80727954e0 100644\n--- a/cpp/src/arrow/python/decimal.h\n+++ b/cpp/src/arrow/python/decimal.h\n@@ -20,8 +20,8 @@\n \n #include <string>\n \n+#include \"arrow/python/visibility.h\"\n #include \"arrow/type.h\"\n-#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n@@ -38,21 +38,21 @@ class OwnedRef;\n namespace internal {\n \n // \\brief Import the Python Decimal type\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ImportDecimalType(OwnedRef* decimal_type);\n \n // \\brief Convert a Python Decimal object to a C++ string\n // \\param[in] python_decimal A Python decimal.Decimal instance\n // \\param[out] The string representation of the Python Decimal instance\n // \\return The status of the operation\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n \n // \\brief Convert a C++ std::string to a Python Decimal instance\n // \\param[in] decimal_constructor The decimal type object\n // \\param[in] decimal_string A decimal string\n // \\return An instance of decimal.Decimal\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n \n@@ -61,21 +61,21 @@ PyObject* DecimalFromString(PyObject* decimal_constructor,\n // \\param[in] arrow_type An instance of arrow::DecimalType\n // \\param[out] out A pointer to a Decimal128\n // \\return The status of the operation\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n \n // \\brief Check whether obj is an instance of Decimal\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool PyDecimal_Check(PyObject* obj);\n \n // \\brief Check whether obj is nan. This function will abort the program if the argument\n // is not a Decimal instance\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool PyDecimal_ISNAN(PyObject* obj);\n \n // \\brief Helper class to track and update the precision and scale of a decimal\n-class ARROW_EXPORT DecimalMetadata {\n+class ARROW_PYTHON_EXPORT DecimalMetadata {\n  public:\n   DecimalMetadata();\n   DecimalMetadata(int32_t precision, int32_t scale);\ndiff --git a/cpp/src/arrow/python/deserialize.h b/cpp/src/arrow/python/deserialize.h\nindex 754765a682..b9c4984a3b 100644\n--- a/cpp/src/arrow/python/deserialize.h\n+++ b/cpp/src/arrow/python/deserialize.h\n@@ -23,8 +23,8 @@\n #include <vector>\n \n #include \"arrow/python/serialize.h\"\n+#include \"arrow/python/visibility.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n@@ -43,7 +43,7 @@ namespace py {\n /// \\param[in] src a RandomAccessFile\n /// \\param[out] out the reconstructed data\n /// \\return Status\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ReadSerializedObject(io::RandomAccessFile* src, SerializedPyObject* out);\n \n /// \\brief Reconstruct SerializedPyObject from representation produced by\n@@ -56,7 +56,7 @@ Status ReadSerializedObject(io::RandomAccessFile* src, SerializedPyObject* out);\n /// num_tensors * 2 + num_buffers in length\n /// \\param[out] out the reconstructed object\n /// \\return Status\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status GetSerializedFromComponents(int num_tensors, int num_ndarrays, int num_buffers,\n                                    PyObject* data, SerializedPyObject* out);\n \n@@ -72,7 +72,7 @@ Status GetSerializedFromComponents(int num_tensors, int num_ndarrays, int num_bu\n /// \\param[out] out The returned object\n /// \\return Status\n /// This acquires the GIL\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status DeserializeObject(PyObject* context, const SerializedPyObject& object,\n                          PyObject* base, PyObject** out);\n \n@@ -80,10 +80,10 @@ Status DeserializeObject(PyObject* context, const SerializedPyObject& object,\n /// \\param[in] object Object to deserialize\n /// \\param[out] out The deserialized tensor\n /// \\return Status\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status DeserializeNdarray(const SerializedPyObject& object, std::shared_ptr<Tensor>* out);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status NdarrayFromBuffer(std::shared_ptr<Buffer> src, std::shared_ptr<Tensor>* out);\n \n }  // namespace py\ndiff --git a/cpp/src/arrow/python/helpers.h b/cpp/src/arrow/python/helpers.h\nindex 4a7c8f12c1..2d44feea5a 100644\n--- a/cpp/src/arrow/python/helpers.h\n+++ b/cpp/src/arrow/python/helpers.h\n@@ -27,9 +27,9 @@\n \n #include <numpy/halffloat.h>\n \n+#include \"arrow/python/visibility.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/macros.h\"\n-#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n@@ -40,20 +40,20 @@ class OwnedRef;\n // \\brief Get an arrow DataType instance from Arrow's Type::type enum\n // \\param[in] type One of the values of Arrow's Type::type enum\n // \\return A shared pointer to DataType\n-ARROW_EXPORT std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n+ARROW_PYTHON_EXPORT std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n \n // \\brief Construct a np.float16 object from a npy_half value.\n-ARROW_EXPORT PyObject* PyHalf_FromHalf(npy_half value);\n+ARROW_PYTHON_EXPORT PyObject* PyHalf_FromHalf(npy_half value);\n \n // \\brief Convert a Python object to a npy_half value.\n-ARROW_EXPORT Status PyFloat_AsHalf(PyObject* obj, npy_half* out);\n+ARROW_PYTHON_EXPORT Status PyFloat_AsHalf(PyObject* obj, npy_half* out);\n \n namespace internal {\n \n // \\brief Import a Python module\n // \\param[in] module_name The name of the module\n // \\param[out] ref The OwnedRef containing the module PyObject*\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ImportModule(const std::string& module_name, OwnedRef* ref);\n \n // \\brief Import an object from a Python module\n@@ -61,7 +61,7 @@ Status ImportModule(const std::string& module_name, OwnedRef* ref);\n // \\param[in] name The name of the object to import\n // \\param[out] ref The OwnedRef containing the \\c name attribute of the Python module \\c\n // module\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRef* ref);\n \n // \\brief Check whether obj is an integer, independent of Python versions.\n@@ -74,11 +74,11 @@ inline bool IsPyInteger(PyObject* obj) {\n }\n \n // \\brief Use pandas missing value semantics to check if a value is null\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool PandasObjectIsNull(PyObject* obj);\n \n // \\brief Check whether obj is a floating-point NaN\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool PyFloat_IsNaN(PyObject* obj);\n \n inline bool IsPyBinary(PyObject* obj) {\n@@ -93,19 +93,19 @@ template <typename Int>\n Status CIntFromPython(PyObject* obj, Int* out, const std::string& overflow_message = \"\");\n \n // \\brief Convert a Python unicode string to a std::string\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status PyUnicode_AsStdString(PyObject* obj, std::string* out);\n \n // \\brief Convert a Python bytes object to a std::string\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n std::string PyBytes_AsStdString(PyObject* obj);\n \n // \\brief Call str() on the given object and return the result as a std::string\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status PyObject_StdStringStr(PyObject* obj, std::string* out);\n \n // \\brief Return the repr() of the given object (always succeeds)\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n std::string PyObject_StdStringRepr(PyObject* obj);\n \n // \\brief Cast the given size to int32_t, with error checking\n@@ -121,12 +121,12 @@ inline Status CastSize(Py_ssize_t size, int32_t* out,\n \n // \\brief Print the Python object's __str__ form along with the passed error\n // message\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status InvalidValue(PyObject* obj, const std::string& why);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status IntegerScalarToDoubleSafe(PyObject* obj, double* result);\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status IntegerScalarToFloat32Safe(PyObject* obj, float* result);\n \n }  // namespace internal\ndiff --git a/cpp/src/arrow/python/inference.cc b/cpp/src/arrow/python/inference.cc\nindex e619a64eb8..0f1d85ead2 100644\n--- a/cpp/src/arrow/python/inference.cc\n+++ b/cpp/src/arrow/python/inference.cc\n@@ -583,13 +583,13 @@ Status InferArrowTypeAndSize(PyObject* obj, int64_t* size,\n   return Status::OK();\n }\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool IsPyBool(PyObject* obj) { return internal::PyBoolScalar_Check(obj); }\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool IsPyInt(PyObject* obj) { return internal::PyIntScalar_Check(obj); }\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool IsPyFloat(PyObject* obj) { return internal::PyFloatScalar_Check(obj); }\n \n }  // namespace py\ndiff --git a/cpp/src/arrow/python/inference.h b/cpp/src/arrow/python/inference.h\nindex 2cffa17ac2..f2e2305e34 100644\n--- a/cpp/src/arrow/python/inference.h\n+++ b/cpp/src/arrow/python/inference.h\n@@ -27,9 +27,9 @@\n #include <ostream>\n #include <string>\n \n+#include \"arrow/python/visibility.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/macros.h\"\n-#include \"arrow/util/visibility.h\"\n \n #include \"arrow/python/common.h\"\n \n@@ -41,23 +41,23 @@ class Status;\n namespace py {\n \n // These three functions take a sequence input, not arbitrary iterables\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n arrow::Status InferArrowType(PyObject* obj, std::shared_ptr<arrow::DataType>* out_type);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n arrow::Status InferArrowTypeAndSize(PyObject* obj, int64_t* size,\n                                     std::shared_ptr<arrow::DataType>* out_type);\n \n /// Checks whether the passed Python object is a boolean scalar\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool IsPyBool(PyObject* obj);\n \n /// Checks whether the passed Python object is an integer scalar\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool IsPyInt(PyObject* obj);\n \n /// Checks whether the passed Python object is a float scalar\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool IsPyFloat(PyObject* obj);\n \n }  // namespace py\ndiff --git a/cpp/src/arrow/python/init.h b/cpp/src/arrow/python/init.h\nindex 1daa5a3d26..34d19b21fd 100644\n--- a/cpp/src/arrow/python/init.h\n+++ b/cpp/src/arrow/python/init.h\n@@ -19,10 +19,10 @@\n #define ARROW_PYTHON_INIT_H\n \n #include \"arrow/python/platform.h\"\n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n extern \"C\" {\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n int arrow_init_numpy();\n }\n \ndiff --git a/cpp/src/arrow/python/io.h b/cpp/src/arrow/python/io.h\nindex 73d96f5f40..d3b7c999eb 100644\n--- a/cpp/src/arrow/python/io.h\n+++ b/cpp/src/arrow/python/io.h\n@@ -22,7 +22,7 @@\n \n #include \"arrow/io/interfaces.h\"\n #include \"arrow/io/memory.h\"\n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n #include \"arrow/python/config.h\"\n \n@@ -36,7 +36,7 @@ namespace py {\n \n class ARROW_NO_EXPORT PythonFile;\n \n-class ARROW_EXPORT PyReadableFile : public io::RandomAccessFile {\n+class ARROW_PYTHON_EXPORT PyReadableFile : public io::RandomAccessFile {\n  public:\n   explicit PyReadableFile(PyObject* file);\n   ~PyReadableFile() override;\n@@ -64,7 +64,7 @@ class ARROW_EXPORT PyReadableFile : public io::RandomAccessFile {\n   std::unique_ptr<PythonFile> file_;\n };\n \n-class ARROW_EXPORT PyOutputStream : public io::OutputStream {\n+class ARROW_PYTHON_EXPORT PyOutputStream : public io::OutputStream {\n  public:\n   explicit PyOutputStream(PyObject* file);\n   ~PyOutputStream() override;\n@@ -87,7 +87,7 @@ class ARROW_EXPORT PyOutputStream : public io::OutputStream {\n // Keeping the reference in a Python wrapper would be incorrect as\n // the Python wrapper can get destroyed even though the wrapped C++\n // buffer is still alive (ARROW-2270).\n-class ARROW_EXPORT PyForeignBuffer : public Buffer {\n+class ARROW_PYTHON_EXPORT PyForeignBuffer : public Buffer {\n  public:\n   static Status Make(const uint8_t* data, int64_t size, PyObject* base,\n                      std::shared_ptr<Buffer>* out);\ndiff --git a/cpp/src/arrow/python/numpy_convert.h b/cpp/src/arrow/python/numpy_convert.h\nindex dfdb1acd12..dce5fe522d 100644\n--- a/cpp/src/arrow/python/numpy_convert.h\n+++ b/cpp/src/arrow/python/numpy_convert.h\n@@ -27,7 +27,7 @@\n #include <string>\n \n #include \"arrow/buffer.h\"\n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n namespace arrow {\n \n@@ -38,7 +38,7 @@ class Tensor;\n \n namespace py {\n \n-class ARROW_EXPORT NumPyBuffer : public Buffer {\n+class ARROW_PYTHON_EXPORT NumPyBuffer : public Buffer {\n  public:\n   explicit NumPyBuffer(PyObject* arr);\n   virtual ~NumPyBuffer();\n@@ -48,25 +48,25 @@ class ARROW_EXPORT NumPyBuffer : public Buffer {\n };\n \n // Handle misbehaved types like LONGLONG and ULONGLONG\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n int cast_npy_type_compat(int type_num);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n bool is_contiguous(PyObject* array);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status NumPyDtypeToArrow(PyObject* dtype, std::shared_ptr<DataType>* out);\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status NumPyDtypeToArrow(PyArray_Descr* descr, std::shared_ptr<DataType>* out);\n \n Status GetTensorType(PyObject* dtype, std::shared_ptr<DataType>* out);\n Status GetNumPyType(const DataType& type, int* type_num);\n \n-ARROW_EXPORT Status NdarrayToTensor(MemoryPool* pool, PyObject* ao,\n-                                    std::shared_ptr<Tensor>* out);\n+ARROW_PYTHON_EXPORT Status NdarrayToTensor(MemoryPool* pool, PyObject* ao,\n+                                           std::shared_ptr<Tensor>* out);\n \n-ARROW_EXPORT Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor, PyObject* base,\n-                                    PyObject** out);\n+ARROW_PYTHON_EXPORT Status TensorToNdarray(const std::shared_ptr<Tensor>& tensor,\n+                                           PyObject* base, PyObject** out);\n \n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 37141d7642..f9a5ea1b0d 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -41,6 +41,8 @@\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/string.h\"\n+#include \"arrow/util/utf8.h\"\n #include \"arrow/visitor_inline.h\"\n \n #include \"arrow/compute/context.h\"\n@@ -634,30 +636,48 @@ Status AppendUTF32(const char* data, int itemsize, int byteorder,\n }  // namespace\n \n Status NumPyConverter::Visit(const StringType& type) {\n+  util::InitializeUTF8();\n+\n   StringBuilder builder(pool_);\n \n-  auto data = reinterpret_cast<const char*>(PyArray_DATA(arr_));\n+  auto data = reinterpret_cast<const uint8_t*>(PyArray_DATA(arr_));\n \n-  char numpy_byteorder = PyArray_DESCR(arr_)->byteorder;\n+  char numpy_byteorder = dtype_->byteorder;\n \n   // For Python C API, -1 is little-endian, 1 is big-endian\n   int byteorder = numpy_byteorder == '>' ? 1 : -1;\n \n   PyAcquireGIL gil_lock;\n \n+  const bool is_binary_type = dtype_->type_num == NPY_STRING;\n+\n+  auto AppendNonNullValue = [&](const uint8_t* data) {\n+    if (is_binary_type) {\n+      if (ARROW_PREDICT_TRUE(util::ValidateUTF8(data, itemsize_))) {\n+        return builder.Append(data, itemsize_);\n+      } else {\n+        std::stringstream ss;\n+        ss << \"Encountered non-UTF8 binary value: \" << HexEncode(data, itemsize_);\n+        return Status::Invalid(ss.str());\n+      }\n+    } else {\n+      return AppendUTF32(reinterpret_cast<const char*>(data), itemsize_, byteorder,\n+                         &builder);\n+    }\n+  };\n   if (mask_ != nullptr) {\n     Ndarray1DIndexer<uint8_t> mask_values(mask_);\n     for (int64_t i = 0; i < length_; ++i) {\n       if (mask_values[i]) {\n         RETURN_NOT_OK(builder.AppendNull());\n       } else {\n-        RETURN_NOT_OK(AppendUTF32(data, itemsize_, byteorder, &builder));\n+        RETURN_NOT_OK(AppendNonNullValue(data));\n       }\n       data += stride_;\n     }\n   } else {\n     for (int64_t i = 0; i < length_; ++i) {\n-      RETURN_NOT_OK(AppendUTF32(data, itemsize_, byteorder, &builder));\n+      RETURN_NOT_OK(AppendNonNullValue(data));\n       data += stride_;\n     }\n   }\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.h b/cpp/src/arrow/python/numpy_to_arrow.h\nindex 5e1c088264..4edc7669bb 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.h\n+++ b/cpp/src/arrow/python/numpy_to_arrow.h\n@@ -25,7 +25,7 @@\n #include <memory>\n \n #include \"arrow/compute/kernels/cast.h\"\n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n namespace arrow {\n \n@@ -48,7 +48,7 @@ namespace py {\n /// \\param[in] type a specific type to cast to, may be null\n /// \\param[in] cast_options casting options\n /// \\param[out] out a ChunkedArray, to accommodate chunked output\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pandas,\n                       const std::shared_ptr<DataType>& type,\n                       const compute::CastOptions& cast_options,\n@@ -64,7 +64,7 @@ Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pa\n /// whether values are null\n /// \\param[in] type a specific type to cast to, may be null\n /// \\param[out] out a ChunkedArray, to accommodate chunked output\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status NdarrayToArrow(MemoryPool* pool, PyObject* ao, PyObject* mo, bool from_pandas,\n                       const std::shared_ptr<DataType>& type,\n                       std::shared_ptr<ChunkedArray>* out);\ndiff --git a/cpp/src/arrow/python/pyarrow.h b/cpp/src/arrow/python/pyarrow.h\nindex e637627006..a5a3910847 100644\n--- a/cpp/src/arrow/python/pyarrow.h\n+++ b/cpp/src/arrow/python/pyarrow.h\n@@ -22,7 +22,7 @@\n \n #include <memory>\n \n-#include \"arrow/util/visibility.h\"\n+#include \"arrow/python/visibility.h\"\n \n namespace arrow {\n \n@@ -39,44 +39,46 @@ class Tensor;\n \n namespace py {\n \n-ARROW_EXPORT int import_pyarrow();\n+ARROW_PYTHON_EXPORT int import_pyarrow();\n \n-ARROW_EXPORT bool is_buffer(PyObject* buffer);\n-ARROW_EXPORT Status unwrap_buffer(PyObject* buffer, std::shared_ptr<Buffer>* out);\n-ARROW_EXPORT PyObject* wrap_buffer(const std::shared_ptr<Buffer>& buffer);\n+ARROW_PYTHON_EXPORT bool is_buffer(PyObject* buffer);\n+ARROW_PYTHON_EXPORT Status unwrap_buffer(PyObject* buffer, std::shared_ptr<Buffer>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_buffer(const std::shared_ptr<Buffer>& buffer);\n \n-ARROW_EXPORT bool is_data_type(PyObject* data_type);\n-ARROW_EXPORT Status unwrap_data_type(PyObject* data_type, std::shared_ptr<DataType>* out);\n-ARROW_EXPORT PyObject* wrap_data_type(const std::shared_ptr<DataType>& type);\n+ARROW_PYTHON_EXPORT bool is_data_type(PyObject* data_type);\n+ARROW_PYTHON_EXPORT Status unwrap_data_type(PyObject* data_type,\n+                                            std::shared_ptr<DataType>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_data_type(const std::shared_ptr<DataType>& type);\n \n-ARROW_EXPORT bool is_field(PyObject* field);\n-ARROW_EXPORT Status unwrap_field(PyObject* field, std::shared_ptr<Field>* out);\n-ARROW_EXPORT PyObject* wrap_field(const std::shared_ptr<Field>& field);\n+ARROW_PYTHON_EXPORT bool is_field(PyObject* field);\n+ARROW_PYTHON_EXPORT Status unwrap_field(PyObject* field, std::shared_ptr<Field>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_field(const std::shared_ptr<Field>& field);\n \n-ARROW_EXPORT bool is_schema(PyObject* schema);\n-ARROW_EXPORT Status unwrap_schema(PyObject* schema, std::shared_ptr<Schema>* out);\n-ARROW_EXPORT PyObject* wrap_schema(const std::shared_ptr<Schema>& schema);\n+ARROW_PYTHON_EXPORT bool is_schema(PyObject* schema);\n+ARROW_PYTHON_EXPORT Status unwrap_schema(PyObject* schema, std::shared_ptr<Schema>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_schema(const std::shared_ptr<Schema>& schema);\n \n-ARROW_EXPORT bool is_array(PyObject* array);\n-ARROW_EXPORT Status unwrap_array(PyObject* array, std::shared_ptr<Array>* out);\n-ARROW_EXPORT PyObject* wrap_array(const std::shared_ptr<Array>& array);\n+ARROW_PYTHON_EXPORT bool is_array(PyObject* array);\n+ARROW_PYTHON_EXPORT Status unwrap_array(PyObject* array, std::shared_ptr<Array>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_array(const std::shared_ptr<Array>& array);\n \n-ARROW_EXPORT bool is_tensor(PyObject* tensor);\n-ARROW_EXPORT Status unwrap_tensor(PyObject* tensor, std::shared_ptr<Tensor>* out);\n-ARROW_EXPORT PyObject* wrap_tensor(const std::shared_ptr<Tensor>& tensor);\n+ARROW_PYTHON_EXPORT bool is_tensor(PyObject* tensor);\n+ARROW_PYTHON_EXPORT Status unwrap_tensor(PyObject* tensor, std::shared_ptr<Tensor>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_tensor(const std::shared_ptr<Tensor>& tensor);\n \n-ARROW_EXPORT bool is_column(PyObject* column);\n-ARROW_EXPORT Status unwrap_column(PyObject* column, std::shared_ptr<Column>* out);\n-ARROW_EXPORT PyObject* wrap_column(const std::shared_ptr<Column>& column);\n+ARROW_PYTHON_EXPORT bool is_column(PyObject* column);\n+ARROW_PYTHON_EXPORT Status unwrap_column(PyObject* column, std::shared_ptr<Column>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_column(const std::shared_ptr<Column>& column);\n \n-ARROW_EXPORT bool is_table(PyObject* table);\n-ARROW_EXPORT Status unwrap_table(PyObject* table, std::shared_ptr<Table>* out);\n-ARROW_EXPORT PyObject* wrap_table(const std::shared_ptr<Table>& table);\n+ARROW_PYTHON_EXPORT bool is_table(PyObject* table);\n+ARROW_PYTHON_EXPORT Status unwrap_table(PyObject* table, std::shared_ptr<Table>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_table(const std::shared_ptr<Table>& table);\n \n-ARROW_EXPORT bool is_record_batch(PyObject* batch);\n-ARROW_EXPORT Status unwrap_record_batch(PyObject* batch,\n-                                        std::shared_ptr<RecordBatch>* out);\n-ARROW_EXPORT PyObject* wrap_record_batch(const std::shared_ptr<RecordBatch>& batch);\n+ARROW_PYTHON_EXPORT bool is_record_batch(PyObject* batch);\n+ARROW_PYTHON_EXPORT Status unwrap_record_batch(PyObject* batch,\n+                                               std::shared_ptr<RecordBatch>* out);\n+ARROW_PYTHON_EXPORT PyObject* wrap_record_batch(\n+    const std::shared_ptr<RecordBatch>& batch);\n \n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/python_to_arrow.h b/cpp/src/arrow/python/python_to_arrow.h\nindex d133089f97..f9d97569ef 100644\n--- a/cpp/src/arrow/python/python_to_arrow.h\n+++ b/cpp/src/arrow/python/python_to_arrow.h\n@@ -26,9 +26,9 @@\n #include <cstdint>\n #include <memory>\n \n+#include \"arrow/python/visibility.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/macros.h\"\n-#include \"arrow/util/visibility.h\"\n \n #include \"arrow/python/common.h\"\n \n@@ -68,12 +68,12 @@ struct PyConversionOptions {\n /// \\param[in] options various conversion options\n /// \\param[out] out a ChunkedArray containing one or more chunks\n /// \\return Status\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ConvertPySequence(PyObject* obj, PyObject* mask,\n                          const PyConversionOptions& options,\n                          std::shared_ptr<ChunkedArray>* out);\n \n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status ConvertPySequence(PyObject* obj, const PyConversionOptions& options,\n                          std::shared_ptr<ChunkedArray>* out);\n \ndiff --git a/cpp/src/arrow/python/serialize.h b/cpp/src/arrow/python/serialize.h\nindex 2759d0c9f1..9a9cc65087 100644\n--- a/cpp/src/arrow/python/serialize.h\n+++ b/cpp/src/arrow/python/serialize.h\n@@ -21,8 +21,8 @@\n #include <memory>\n #include <vector>\n \n+#include \"arrow/python/visibility.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/util/visibility.h\"\n \n // Forward declaring PyObject, see\n // https://mail.python.org/pipermail/python-dev/2003-August/037601.html\n@@ -47,7 +47,7 @@ class OutputStream;\n \n namespace py {\n \n-struct ARROW_EXPORT SerializedPyObject {\n+struct ARROW_PYTHON_EXPORT SerializedPyObject {\n   std::shared_ptr<RecordBatch> batch;\n   std::vector<std::shared_ptr<Tensor>> tensors;\n   std::vector<std::shared_ptr<Tensor>> ndarrays;\n@@ -86,14 +86,14 @@ struct ARROW_EXPORT SerializedPyObject {\n /// \\return Status\n ///\n /// Release GIL before calling\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status SerializeObject(PyObject* context, PyObject* sequence, SerializedPyObject* out);\n \n /// \\brief Serialize an Arrow Tensor as a SerializedPyObject.\n /// \\param[in] tensor Tensor to be serialized\n /// \\param[out] out The serialized representation\n /// \\return Status\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status SerializeTensor(std::shared_ptr<Tensor> tensor, py::SerializedPyObject* out);\n \n /// \\brief Write the Tensor metadata header to an OutputStream.\n@@ -102,7 +102,7 @@ Status SerializeTensor(std::shared_ptr<Tensor> tensor, py::SerializedPyObject* o\n /// \\param[in] tensor_num_bytes The lengh of the Tensor data in bytes\n /// \\param[in] dst The OutputStream to write the Tensor header to\n /// \\return Status\n-ARROW_EXPORT\n+ARROW_PYTHON_EXPORT\n Status WriteNdarrayHeader(std::shared_ptr<DataType> dtype,\n                           const std::vector<int64_t>& shape, int64_t tensor_num_bytes,\n                           io::OutputStream* dst);\ndiff --git a/cpp/src/arrow/python/visibility.h b/cpp/src/arrow/python/visibility.h\nnew file mode 100644\nindex 0000000000..c0b343c70e\n--- /dev/null\n+++ b/cpp/src/arrow/python/visibility.h\n@@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#if defined(_WIN32) || defined(__CYGWIN__)  // Windows\n+#if defined(_MSC_VER)\n+#pragma warning(disable : 4251)\n+#else\n+#pragma GCC diagnostic ignored \"-Wattributes\"\n+#endif\n+\n+#ifdef ARROW_STATIC\n+#define ARROW_PYTHON_EXPORT\n+#elif defined(ARROW_PYTHON_EXPORTING)\n+#define ARROW_PYTHON_EXPORT __declspec(dllexport)\n+#else\n+#define ARROW_PYTHON_EXPORT __declspec(dllimport)\n+#endif\n+\n+#else  // Not Windows\n+#ifndef ARROW_PYTHON_EXPORT\n+#define ARROW_PYTHON_EXPORT __attribute__((visibility(\"default\")))\n+#endif\n+#endif  // Non-Windows\ndiff --git a/python/pyarrow/__init__.py b/python/pyarrow/__init__.py\nindex 12c2285f2d..63ed53e0eb 100644\n--- a/python/pyarrow/__init__.py\n+++ b/python/pyarrow/__init__.py\n@@ -192,7 +192,7 @@ def get_libraries():\n     Return list of library names to include in the `libraries` argument for C\n     or Cython extensions using pyarrow\n     \"\"\"\n-    return ['arrow_python']\n+    return ['arrow', 'arrow_python']\n \n \n def get_library_dirs():\ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex 1350ad636a..f9bd06ee04 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n # Licensed to the Apache Software Foundation (ASF) under one\n # or more contributor license agreements.  See the NOTICE file\n # distributed with this work for additional information\n@@ -1221,3 +1222,29 @@ def test_nested_dictionary_array():\n     dict_arr = pa.DictionaryArray.from_arrays([0, 1, 0], ['a', 'b'])\n     dict_arr2 = pa.DictionaryArray.from_arrays([0, 1, 2, 1, 0], dict_arr)\n     assert dict_arr2.to_pylist() == ['a', 'b', 'a', 'b', 'a']\n+\n+\n+def test_array_from_numpy_str_utf8():\n+    # ARROW-3890 -- in Python 3, NPY_UNICODE arrays are produced, but in Python\n+    # 2 they are NPY_STRING (binary), so we must do UTF-8 validation\n+    vec = np.array([\"toto\", \"tata\"])\n+    vec2 = np.array([\"toto\", \"tata\"], dtype=object)\n+\n+    arr = pa.array(vec, pa.string())\n+    arr2 = pa.array(vec2, pa.string())\n+    expected = pa.array([u\"toto\", u\"tata\"])\n+    assert arr.equals(expected)\n+    assert arr2.equals(expected)\n+\n+    # with mask, separate code path\n+    mask = np.array([False, False], dtype=bool)\n+    arr = pa.array(vec, pa.string(), mask=mask)\n+    assert arr.equals(expected)\n+\n+    # UTF8 validation failures\n+    vec = np.array([(u'ma\u00f1ana').encode('utf-16-le')])\n+    with pytest.raises(ValueError):\n+        pa.array(vec, pa.string())\n+\n+    with pytest.raises(ValueError):\n+        pa.array(vec, pa.string(), mask=np.array([False]))\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-02T16:41:40.544+0000",
                    "updated": "2018-12-02T16:41:40.544+0000",
                    "started": "2018-12-02T16:41:40.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171380",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#discussion_r238269511\n \n \n\n ##########\n File path: cpp/src/arrow/python/visibility.h\n ##########\n @@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#if defined(_WIN32) || defined(__CYGWIN__)  // Windows\n+#if defined(_MSC_VER)\n+#pragma warning(disable : 4251)\n+#else\n+#pragma GCC diagnostic ignored \"-Wattributes\"\n+#endif\n+\n+#ifdef ARROW_STATIC\n+#define ARROW_PYTHON_EXPORT\n+#elif defined(ARROW_PYTHON_EXPORTING)\n+#define ARROW_PYTHON_EXPORT __declspec(dllexport)\n \n Review comment:\n   Is there an explanation why we need those separate macros?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T13:39:00.113+0000",
                    "updated": "2018-12-03T13:39:00.113+0000",
                    "started": "2018-12-03T13:39:00.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171580",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#discussion_r238271500\n \n \n\n ##########\n File path: cpp/src/arrow/python/visibility.h\n ##########\n @@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#if defined(_WIN32) || defined(__CYGWIN__)  // Windows\n+#if defined(_MSC_VER)\n+#pragma warning(disable : 4251)\n+#else\n+#pragma GCC diagnostic ignored \"-Wattributes\"\n+#endif\n+\n+#ifdef ARROW_STATIC\n+#define ARROW_PYTHON_EXPORT\n+#elif defined(ARROW_PYTHON_EXPORTING)\n+#define ARROW_PYTHON_EXPORT __declspec(dllexport)\n \n Review comment:\n   Yes, I wrote in the comments. So the issue is that we need ARROW_EXPORT to mean dllimport when we are compiling arrow_python.dll, or global data members from arrow.dll cannot be imported. So we need a separate dllexport macro for this separate DLL\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T13:41:54.835+0000",
                    "updated": "2018-12-03T13:41:54.835+0000",
                    "started": "2018-12-03T13:41:54.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171581",
                    "issueId": "13200821"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/worklog/171583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3063: ARROW-3890: [Python] Handle NumPy binary arrays with UTF-8 validation when converting to StringArray\nURL: https://github.com/apache/arrow/pull/3063#discussion_r238272032\n \n \n\n ##########\n File path: cpp/src/arrow/python/visibility.h\n ##########\n @@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#if defined(_WIN32) || defined(__CYGWIN__)  // Windows\n+#if defined(_MSC_VER)\n+#pragma warning(disable : 4251)\n+#else\n+#pragma GCC diagnostic ignored \"-Wattributes\"\n+#endif\n+\n+#ifdef ARROW_STATIC\n+#define ARROW_PYTHON_EXPORT\n+#elif defined(ARROW_PYTHON_EXPORTING)\n+#define ARROW_PYTHON_EXPORT __declspec(dllexport)\n \n Review comment:\n   Whether or not there are global data members in arrow.dll, it is the more correct thing to have different export macros for each distinct DLL. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-03T13:43:25.764+0000",
                    "updated": "2018-12-03T13:43:25.764+0000",
                    "started": "2018-12-03T13:43:25.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "171583",
                    "issueId": "13200821"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@53e7d83c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@357b6068[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@181b371d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@768d6c56[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32574dc9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@464e190f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72c7d04[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1a5e4e6b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@126f61ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@245f94cf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40ff091d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@28ba3a7f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Dec 02 16:41:29 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-02T16:41:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3890/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-11-27T10:37:15.000+0000",
        "updated": "2018-12-03T13:43:25.000+0000",
        "timeoriginalestimate": null,
        "description": "Pyarrow arrays of string cannot be created from numpy arrays of string anymore for versions pyarrow>=0.8.0 (this includes pyarrow==0.11.1).\r\n\r\nPlease find below a quick repro:\r\n{code:python}\r\nimport numpy as np\r\nimport pyarrow as pa\r\nvec = np.array([\"toto\", \"tata\"])\r\npa.array(vec, pa.string())\r\n{code}\r\n\r\nRuning this I get the following:\r\n\r\n{code:python}\r\n---------------------------------------------------------------------------\r\nArrowInvalid                              Traceback (most recent call last)\r\n<ipython-input-4-e753fb3a8193> in <module>()\r\n----> 1 pa.array(vec, pa.string())\r\n\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/lib.so in pyarrow.lib.array()\r\n\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/lib.so in pyarrow.lib._ndarray_to_array()\r\n\r\n/usr/local/lib/python2.7/dist-packages/pyarrow/lib.so in pyarrow.lib.check_status()\r\n\r\nArrowInvalid: 'utf32' codec can't decode bytes in position 0-3: code point not in range(0x110000)\r\n{code}\r\n\r\nHowever, this code snippet was working fine with pyarrow==0.7.1.\r\n\r\nWas there any behavior change with string in pyarrow since 0.7.1?\r\nDo you have any workaround for this?\r\n\r\nJacques\r\n\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Creating Array with explicit string type fails on Python 2.7",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/comment/16700515",
                    "id": "16700515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Hm, this works fine for me\r\n\r\n{code}\r\nIn [1]: paste\r\nimport numpy as np\r\nimport pyarrow as pa\r\nvec = np.array([\"toto\", \"tata\"])\r\npa.array(vec, pa.string())\r\n\r\n## -- End pasted text --\r\nOut[1]: \r\n<pyarrow.lib.StringArray object at 0x7f777aa4b728>\r\n[\r\n  \"toto\",\r\n  \"tata\"\r\n]\r\n{code}\r\n\r\nCould you let us know more information about your environment?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-27T14:41:23.379+0000",
                    "updated": "2018-11-27T14:41:23.379+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/comment/16701615",
                    "id": "16701615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathieude",
                        "name": "mathieude",
                        "key": "mathieude",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Mathieu DESPRIEE",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ok, that's a python2/python3 problem. \r\nThere's effectively a regression in py2, and it's working fine in py3. \r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mathieude",
                        "name": "mathieude",
                        "key": "mathieude",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Mathieu DESPRIEE",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-28T09:42:58.994+0000",
                    "updated": "2018-11-28T09:42:58.994+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/comment/16701900",
                    "id": "16701900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Thanks, I renamed the issue. PRs welcome",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-28T13:45:49.270+0000",
                    "updated": "2018-11-28T13:45:49.270+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/comment/16705391",
                    "id": "16705391",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This is actually an issue converting NumPy binary arrays. Here is the trace with {{-DARROW_EXTRA_ERROR_CONTEXT=on}}:\r\n\r\n{code}\r\n>   raise ArrowInvalid(message)\r\nE   ArrowInvalid: ../src/arrow/python/numpy_to_arrow.cc:795 code: converter.Convert()\r\nE   ../src/arrow/python/numpy_to_arrow.cc:660 code: AppendUTF32(data, itemsize_, byteorder, &builder)\r\nE   ../src/arrow/python/numpy_to_arrow.cc:620 code: CheckPyError()\r\nE   'utf32' codec can't decode bytes in position 0-3: code point not in range(0x110000)\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-30T23:02:00.486+0000",
                    "updated": "2018-11-30T23:02:00.486+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200821/comment/16706393",
                    "id": "16706393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3063\n[https://github.com/apache/arrow/pull/3063]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-02T16:41:29.908+0000",
                    "updated": "2018-12-02T16:41:29.908+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|s00wls:",
        "customfield_12314139": null
    }
}