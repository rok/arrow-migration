{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13382510",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510",
    "key": "ARROW-12992",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
            "name": "thisisnic",
            "key": "thisisnic",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
            },
            "displayName": "Nicola Crane",
            "active": true,
            "timeZone": "Africa/Casablanca"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12992/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/616755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pachadotdev opened a new pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T22:17:54.905+0000",
                    "updated": "2021-06-29T22:17:54.905+0000",
                    "started": "2021-06-29T22:17:54.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616755",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/616756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#issuecomment-870956307\n\n\n   https://issues.apache.org/jira/browse/ARROW-12992\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T22:18:18.622+0000",
                    "updated": "2021-06-29T22:18:18.622+0000",
                    "started": "2021-06-29T22:18:18.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616756",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/618688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r662899545\n\n\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -32,6 +32,8 @@\n   \"str_to_upper\" = \"utf8_upper\",\n   \"str_reverse\" = \"utf8_reverse\",\n   # str_trim is defined in dplyr-functions.R\n+  # str_sub is defined in dplyr-functions.R\n+  # substr is defined in dplyr-functions.R\n   \"year\" = \"year\",\n\nReview comment:\n       Should we mention `substring` here as well?\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n\nReview comment:\n       No need to set up string \"Apache Arrow\" via variable `foo` as it's already been set up as variable `x`.\r\n   ```suggestion\r\n           bar1 = substr(x, 1, 6), # Apache\r\n           bar2 = substr(x, 0, 6), # Apache\r\n           bar3 = substr(x, -1, 6), # Apache\r\n           bar4 = substr(x, 6, 1), # \"\"\r\n           bar5 = substr(x, -1, -2), # \"\"\r\n           bar6 = substr(x, 8, 12) # Arrow\r\n   ```\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +280,45 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"Start of length != 1 not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"End of length != 1 not supported in Arrow\"\n+  )\n+\n+  if (start > stop) {\n+    start <- 0\n+    stop <- 0\n+  } else {\n+    start <- max(0, start - 1)\n+    stop <- max(0, stop)\n+    start_stop <- c(min(start, stop), max(start, stop))\n+    start <- start_stop[1]\n+    stop <- start_stop[2]\n+  }\n\nReview comment:\n       I'm a little confused here - please can you give me an example of values that could be supplied as `start` and `stop` which would make it necessary to use `min()` and `max()` here to put the values back in the correct order? \n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n\nReview comment:\n       Please can you split these out into separate tests?  It makes it easier to follow and fix issues.\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n\nReview comment:\n       ```suggestion\r\n   \r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-05T15:05:58.712+0000",
                    "updated": "2021-07-05T15:05:58.712+0000",
                    "started": "2021-07-05T15:05:58.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618688",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/618733",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r663049290\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n\nReview comment:\n       Please can you split these out into separate tests?  It makes it easier to follow and fix issues.\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n\nReview comment:\n       ```suggestion\r\n   \r\n   ```\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n\nReview comment:\n       No need to set up string \"Apache Arrow\" via variable `foo` as it's already been set up as variable `x`.\r\n   ```suggestion\r\n           bar1 = substr(x, 1, 6), # Apache\r\n           bar2 = substr(x, 0, 6), # Apache\r\n           bar3 = substr(x, -1, 6), # Apache\r\n           bar4 = substr(x, 6, 1), # \"\"\r\n           bar5 = substr(x, -1, -2), # \"\"\r\n           bar6 = substr(x, 8, 12) # Arrow\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-05T16:27:07.662+0000",
                    "updated": "2021-07-05T16:27:07.662+0000",
                    "started": "2021-07-05T16:27:07.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618733",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/618734",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r664040870\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substring(foo, 1, 6), # Apache\n+        bar2 = substring(foo, 0, 6), # Apache\n+        bar3 = substring(foo, -1, 6), # Apache\n+        bar4 = substring(foo, 6, 1), # \"\"\n+        bar5 = substring(foo, -1, -2), # \"\"\n+        bar6 = substring(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = str_sub(foo, 1, 6), # Apache\n+        bar2 = str_sub(foo, 0, 6), # Apache\n+        bar3 = str_sub(foo, -1, 6), # Apache\n+        bar4 = str_sub(foo, 6, 1), # \"\"\n+        bar5 = str_sub(foo, -1, -2), # \"\"\n+        bar6 = str_sub(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n+      collect(),\n+    df\n+  )\n+})\n\nReview comment:\n       ```suggestion\r\n   test_that(\"substrings\", {\r\n     df <- tibble(\r\n       x = \"Apache Arrow\"\r\n     )\r\n     \r\n     # substr\r\n   \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 1, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 0, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, -1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 6, 1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, -1, -2)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x,  8, 12)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, -5, -1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n   \r\n     # substring\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 1, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 0, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, -1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 6, 1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, -1, -2)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x,  8, 12)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, -5, -1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n   \r\n     # str_sub\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 0, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, -1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 6, 1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, -1, -2)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x,  8, 12)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, -5, -1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n   })\r\n   \r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-05T16:28:01.118+0000",
                    "updated": "2021-07-05T16:28:01.118+0000",
                    "started": "2021-07-05T16:28:01.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618734",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/619069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r662899545\n\n\n\n##########\nFile path: r/R/expression.R\n##########\n@@ -32,6 +32,8 @@\n   \"str_to_upper\" = \"utf8_upper\",\n   \"str_reverse\" = \"utf8_reverse\",\n   # str_trim is defined in dplyr-functions.R\n+  # str_sub is defined in dplyr-functions.R\n+  # substr is defined in dplyr-functions.R\n   \"year\" = \"year\",\n\nReview comment:\n       Should we mention `substring` here as well?\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n\nReview comment:\n       No need to set up string \"Apache Arrow\" via variable `foo` as it's already been set up as variable `x`.\r\n   ```suggestion\r\n           bar1 = substr(x, 1, 6), # Apache\r\n           bar2 = substr(x, 0, 6), # Apache\r\n           bar3 = substr(x, -1, 6), # Apache\r\n           bar4 = substr(x, 6, 1), # \"\"\r\n           bar5 = substr(x, -1, -2), # \"\"\r\n           bar6 = substr(x, 8, 12) # Arrow\r\n   ```\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +280,45 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"Start of length != 1 not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"End of length != 1 not supported in Arrow\"\n+  )\n+\n+  if (start > stop) {\n+    start <- 0\n+    stop <- 0\n+  } else {\n+    start <- max(0, start - 1)\n+    stop <- max(0, stop)\n+    start_stop <- c(min(start, stop), max(start, stop))\n+    start <- start_stop[1]\n+    stop <- start_stop[2]\n+  }\n\nReview comment:\n       I'm a little confused here - please can you give me an example of values that could be supplied as `start` and `stop` which would make it necessary to use `min()` and `max()` here to put the values back in the correct order? \n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n\nReview comment:\n       Please can you split these out into separate tests?  It makes it easier to follow and fix issues.\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n\nReview comment:\n       ```suggestion\r\n   \r\n   ```\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n\nReview comment:\n       Please can you split these out into separate tests?  It makes it easier to follow and fix issues.\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n\nReview comment:\n       ```suggestion\r\n   \r\n   ```\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n\nReview comment:\n       No need to set up string \"Apache Arrow\" via variable `foo` as it's already been set up as variable `x`.\r\n   ```suggestion\r\n           bar1 = substr(x, 1, 6), # Apache\r\n           bar2 = substr(x, 0, 6), # Apache\r\n           bar3 = substr(x, -1, 6), # Apache\r\n           bar4 = substr(x, 6, 1), # \"\"\r\n           bar5 = substr(x, -1, -2), # \"\"\r\n           bar6 = substr(x, 8, 12) # Arrow\r\n   ```\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -866,3 +866,57 @@ test_that(\"str_like\", {\n     df\n   )\n })\n+\n+test_that(\"substrings\", {\n+  df <- tibble(\n+    x = \"Apache Arrow\"\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substr(foo, 1, 6), # Apache\n+        bar2 = substr(foo, 0, 6), # Apache\n+        bar3 = substr(foo, -1, 6), # Apache\n+        bar4 = substr(foo, 6, 1), # \"\"\n+        bar5 = substr(foo, -1, -2), # \"\"\n+        bar6 = substr(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = substring(foo, 1, 6), # Apache\n+        bar2 = substring(foo, 0, 6), # Apache\n+        bar3 = substring(foo, -1, 6), # Apache\n+        bar4 = substring(foo, 6, 1), # \"\"\n+        bar5 = substring(foo, -1, -2), # \"\"\n+        bar6 = substring(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        foo = \"Apache Arrow\",\n+        bar1 = str_sub(foo, 1, 6), # Apache\n+        bar2 = str_sub(foo, 0, 6), # Apache\n+        bar3 = str_sub(foo, -1, 6), # Apache\n+        bar4 = str_sub(foo, 6, 1), # \"\"\n+        bar5 = str_sub(foo, -1, -2), # \"\"\n+        bar6 = str_sub(foo, 8, 12) # Arrow\n+      ) %>%\n+      select(bar1:bar6) %>%\n+      collect(),\n+    df\n+  )\n+})\n\nReview comment:\n       ```suggestion\r\n   test_that(\"substrings\", {\r\n     df <- tibble(\r\n       x = \"Apache Arrow\"\r\n     )\r\n     \r\n     # substr\r\n   \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 1, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 0, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, -1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 6, 1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, -1, -2)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x,  8, 12)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substr(x, -5, -1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n   \r\n     # substring\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 1, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 0, 6)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, -1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 6, 1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, -1, -2)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x,  8, 12)) %>%\r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = substring(x, -5, -1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n   \r\n     # str_sub\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 0, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, -1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 6, 1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, -1, -2)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, 1, 6)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x,  8, 12)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n     expect_dplyr_equal(\r\n       input %>%\r\n         mutate(y = str_sub(x, -5, -1)) %>% \r\n         collect(),\r\n       df\r\n     )\r\n     \r\n   })\r\n   \r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T11:10:40.702+0000",
                    "updated": "2021-07-06T11:10:40.702+0000",
                    "started": "2021-07-06T11:10:40.702+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619069",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/619356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pachadotdev commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r664559978\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +280,45 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"Start of length != 1 not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"End of length != 1 not supported in Arrow\"\n+  )\n+\n+  if (start > stop) {\n+    start <- 0\n+    stop <- 0\n+  } else {\n+    start <- max(0, start - 1)\n+    stop <- max(0, stop)\n+    start_stop <- c(min(start, stop), max(start, stop))\n+    start <- start_stop[1]\n+    stop <- start_stop[2]\n+  }\n\nReview comment:\n       it's more a verification than a formal requirement\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T13:34:02.934+0000",
                    "updated": "2021-07-06T13:34:02.934+0000",
                    "started": "2021-07-06T13:34:02.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619356",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/619384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r664603120\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +280,45 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"Start of length != 1 not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"End of length != 1 not supported in Arrow\"\n+  )\n+\n+  if (start > stop) {\n+    start <- 0\n+    stop <- 0\n+  } else {\n+    start <- max(0, start - 1)\n+    stop <- max(0, stop)\n+    start_stop <- c(min(start, stop), max(start, stop))\n+    start <- start_stop[1]\n+    stop <- start_stop[2]\n+  }\n\nReview comment:\n       Sorry, I'm still confused, could you explain a bit more? Just that it seems a bit dangerous to be swapping parameters around unless we have reason to, right?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T14:23:32.949+0000",
                    "updated": "2021-07-06T14:23:32.949+0000",
                    "started": "2021-07-06T14:23:32.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619384",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/621398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pachadotdev commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r667533252\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +280,45 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"Start of length != 1 not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"End of length != 1 not supported in Arrow\"\n+  )\n+\n+  if (start > stop) {\n+    start <- 0\n+    stop <- 0\n+  } else {\n+    start <- max(0, start - 1)\n+    stop <- max(0, stop)\n+    start_stop <- c(min(start, stop), max(start, stop))\n+    start <- start_stop[1]\n+    stop <- start_stop[2]\n+  }\n\nReview comment:\n       hmmm.... maybe it's just a bad try from me to avoid situations where start > end\r\n   i'l lremove this\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-11T20:44:50.874+0000",
                    "updated": "2021-07-11T20:44:50.874+0000",
                    "started": "2021-07-11T20:44:50.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621398",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/621527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pachadotdev commented on pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#issuecomment-878423203\n\n\n   > This needs tests. I'd like this included in 5.0 if possible.\r\n   \r\n   thx, I re-added some of the tests\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T19:48:43.430+0000",
                    "updated": "2021-07-12T19:48:43.430+0000",
                    "started": "2021-07-12T19:48:43.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621527",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/621619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r667773505\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -286,8 +286,8 @@ nse_funcs$substr <- function(string, start, stop) {\n     msg = \"Start of length != 1 not supported in Arrow\"\n   )\n   assert_that(\n-    length(end) == 1,\n-    msg = \"End of length != 1 not supported in Arrow\"\n+    length(stop) == 1,\n+    msg = \"Stop of length != 1 not supported in Arrow\"\n\nReview comment:\n       ```suggestion\r\n       msg = \"`stop` must be length 1 - other lengths are not supported in Arrow\"\r\n   ```\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -313,10 +313,33 @@ nse_funcs$substring <- function(text, first, last = 1000000L) {\n }\n \n nse_funcs$str_sub <- function(string, start = 1L, end = -1L) {\n-  if (start < 0 || end < 0) {\n-    warning(\"Negative counts not yet implemented for strings\")\n+  if(end <= -1) end <- .Machine$integer.max\n+\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"Start of length != 1 not supported in Arrow\"\n\nReview comment:\n       ```suggestion\r\n       msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\r\n   ```\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -313,10 +313,33 @@ nse_funcs$substring <- function(text, first, last = 1000000L) {\n }\n \n nse_funcs$str_sub <- function(string, start = 1L, end = -1L) {\n-  if (start < 0 || end < 0) {\n-    warning(\"Negative counts not yet implemented for strings\")\n+  if(end <= -1) end <- .Machine$integer.max\n+\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"Start of length != 1 not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"end of length != 1 not supported in Arrow\"\n\nReview comment:\n       ```suggestion\r\n       msg = \"`end` must be length 1 - other lengths are not supported in Arrow\"\r\n   ```\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -316,6 +316,19 @@ std::shared_ptr<arrow::compute::FunctionOptions> make_compute_options(\n     return std::make_shared<Options>(max_splits, reverse);\n   }\n \n+  if (func_name == \"utf8_slice_codeunits\") {\n+    using Options = arrow::compute::SliceOptions;\n+    int64_t start = 1;\n+    int64_t stop = -1;\n\nReview comment:\n       I think this still may need updating to reflect the default value of stop supplied by C++ \n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -868,42 +868,76 @@ test_that(\"str_like\", {\n })\n \n test_that(\"str_pad\", {\n-  \n+\n   df <- tibble(x = c(\"Foo and bar\", \"baz and qux and quux\"))\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 31)) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 30, side = \"right\")) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 31, side = \"left\", pad = \"+\")) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 10, side = \"left\", pad = \"+\")) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 31, side = \"both\")) %>%\n       collect(),\n     df\n   )\n-  \n+})\n+\n+test_that(\"substr, substring, str_sub\", {\n+\n+  df <- tibble(x1 = \"Apache Arrow\")\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        x2 = substr(x1, 1, 6), # Apache\n+        x3 = substr(x1, 8, 12) # Arrow\n+      ) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        x2 = substring(x1, 1, 6), # Apache\n+        x3 = substring(x1, 8, 12) # Arrow\n+      ) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        x2 = str_sub(x1, 1, 6), # Apache\n+        x3 = str_sub(x1, 8, 12) # Arrow\n+      ) %>%\n+      collect(),\n+    df\n+  )\n })\n\nReview comment:\n       The tests are now way shorter than they were before and don't include any of those awkward test cases like negative numbers that we were discussing on the ticket - maybe we should add them back in?\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -316,6 +316,19 @@ std::shared_ptr<arrow::compute::FunctionOptions> make_compute_options(\n     return std::make_shared<Options>(max_splits, reverse);\n   }\n \n+  if (func_name == \"utf8_slice_codeunits\") {\n+    using Options = arrow::compute::SliceOptions;\n+    int64_t start = 1;\n+    int64_t stop = -1;\n\nReview comment:\n       See the final comment here for more info but happy to explain if that doesn't make sense: https://issues.apache.org/jira/browse/ARROW-13259 \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T19:58:53.303+0000",
                    "updated": "2021-07-12T19:58:53.303+0000",
                    "started": "2021-07-12T19:58:53.303+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621619",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/621708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pachadotdev commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r668221668\n\n\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -868,42 +868,76 @@ test_that(\"str_like\", {\n })\n \n test_that(\"str_pad\", {\n-  \n+\n   df <- tibble(x = c(\"Foo and bar\", \"baz and qux and quux\"))\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 31)) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 30, side = \"right\")) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 31, side = \"left\", pad = \"+\")) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 10, side = \"left\", pad = \"+\")) %>%\n       collect(),\n     df\n   )\n-  \n+\n   expect_dplyr_equal(\n     input %>%\n       mutate(x = str_pad(x, width = 31, side = \"both\")) %>%\n       collect(),\n     df\n   )\n-  \n+})\n+\n+test_that(\"substr, substring, str_sub\", {\n+\n+  df <- tibble(x1 = \"Apache Arrow\")\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        x2 = substr(x1, 1, 6), # Apache\n+        x3 = substr(x1, 8, 12) # Arrow\n+      ) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        x2 = substring(x1, 1, 6), # Apache\n+        x3 = substring(x1, 8, 12) # Arrow\n+      ) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(\n+        x2 = str_sub(x1, 1, 6), # Apache\n+        x3 = str_sub(x1, 8, 12) # Arrow\n+      ) %>%\n+      collect(),\n+    df\n+  )\n })\n\nReview comment:\n       yes !! i have no idea what happened here, but i'll re-add or re-write those\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T20:09:16.258+0000",
                    "updated": "2021-07-12T20:09:16.258+0000",
                    "started": "2021-07-12T20:09:16.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621708",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/621710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pachadotdev commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r668226798\n\n\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -316,6 +316,19 @@ std::shared_ptr<arrow::compute::FunctionOptions> make_compute_options(\n     return std::make_shared<Options>(max_splits, reverse);\n   }\n \n+  if (func_name == \"utf8_slice_codeunits\") {\n+    using Options = arrow::compute::SliceOptions;\n+    int64_t start = 1;\n+    int64_t stop = -1;\n\nReview comment:\n       yes !!!! \r\n   at the moment, I have added the additional \"+1\" to the R functions\r\n   if the backend changes, I\u013al adapt the functions\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T20:17:43.422+0000",
                    "updated": "2021-07-12T20:17:43.422+0000",
                    "started": "2021-07-12T20:17:43.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621710",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/621725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pachadotdev commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r668242367\n\n\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -316,6 +316,19 @@ std::shared_ptr<arrow::compute::FunctionOptions> make_compute_options(\n     return std::make_shared<Options>(max_splits, reverse);\n   }\n \n+  if (func_name == \"utf8_slice_codeunits\") {\n+    using Options = arrow::compute::SliceOptions;\n+    int64_t start = 1;\n+    int64_t stop = -1;\n\nReview comment:\n       ready !! i added new tests and I commented the expected results\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-12T20:43:30.058+0000",
                    "updated": "2021-07-12T20:43:30.058+0000",
                    "started": "2021-07-12T20:43:30.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "621725",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/622266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r669142885\n\n\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -316,6 +316,19 @@ std::shared_ptr<arrow::compute::FunctionOptions> make_compute_options(\n     return std::make_shared<Options>(max_splits, reverse);\n   }\n \n+  if (func_name == \"utf8_slice_codeunits\") {\n+    using Options = arrow::compute::SliceOptions;\n+    int64_t start = 1;\n+    int64_t stop = -1;\n\nReview comment:\n       Sorry, I didn't explain this properly, my fault!  What I mean is that here stop has been set to `-1` but the default C++ value isn't `-1`, so the default value here probably shouldn't be `-1` either.\r\n   \r\n   Check out this line of code here that shows the default value of `stop` in the C++: https://github.com/apache/arrow/blob/7114c4b6fdb63 9b3500d77cfd66649af8c5c5e6b/cpp/src/arrow/compute/api_scalar.h#L205-L206 \r\n   \r\n   The default value of `stop` is `std::numeric_limits<int64_t>::max()` which is the biggest int64.  So if you don't supply a value for `stop` and just use the default, this allows you to slice to the end of the string.\r\n   \r\n   In some of the other functions in this file, this line has been used to set the default values to the ones from the C++ code:\r\n   `std::make_shared<Options>(Options::Defaults());`\r\n   \r\n   Maybe instead of manually setting the value of stop to `-1`, if you use the line above, it might make it easier to fix some of the failing tests as now you'll be able to slice to the end of a string.  If this doesn't make sense, let me know!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-13T22:08:37.163+0000",
                    "updated": "2021-07-13T22:08:37.163+0000",
                    "started": "2021-07-13T22:08:37.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622266",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/622538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r669142885\n\n\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -316,6 +316,19 @@ std::shared_ptr<arrow::compute::FunctionOptions> make_compute_options(\n     return std::make_shared<Options>(max_splits, reverse);\n   }\n \n+  if (func_name == \"utf8_slice_codeunits\") {\n+    using Options = arrow::compute::SliceOptions;\n+    int64_t start = 1;\n+    int64_t stop = -1;\n\nReview comment:\n       Sorry, I didn't explain this properly, my fault!  What I mean is that here stop has been set to `-1` but the default C++ value isn't `-1`, so the default value here probably shouldn't be `-1` either.\r\n   \r\n   Check out this line of code here that shows the default value of `stop` in the C++: https://github.com/apache/arrow/blob/7114c4b6fdb639b3500d77cfd66649af8c5c5e6b/cpp/src/arrow/compute/api_scalar.h#L205-L206 \r\n   \r\n   The default value of `stop` is `std::numeric_limits<int64_t>::max()` which is the biggest int64.  So if you don't supply a value for `stop` and just use the default, this allows you to slice to the end of the string.\r\n   \r\n   In some of the other functions in this file, this line has been used to set the default values to the ones from the C++ code:\r\n   `std::make_shared<Options>(Options::Defaults());`\r\n   \r\n   Maybe instead of manually setting the value of stop to `-1`, if you use the line above, it might make it easier to fix some of the failing tests as now you'll be able to slice to the end of a string.  If this doesn't make sense, let me know!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T15:05:00.012+0000",
                    "updated": "2021-07-14T15:05:00.012+0000",
                    "started": "2021-07-14T15:05:00.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622538",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/622637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#issuecomment-880113887\n\n\n   This PR now also contains some unrelated styling changes as I ran styler on the files I changed before pushing my changes.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T18:25:26.027+0000",
                    "updated": "2021-07-14T18:25:26.027+0000",
                    "started": "2021-07-14T18:25:26.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622637",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/622646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#issuecomment-880129596\n\n\n   @nealrichardson - have made some updates; please could you re-review this when you have a chance?  Tomorrow I'm going to add in the tests for warnings/errors raised when incorrect parameter values are supplied but is there anything else that needs updating in this PR?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T18:51:08.353+0000",
                    "updated": "2021-07-14T18:51:08.353+0000",
                    "started": "2021-07-14T18:51:08.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622646",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/622696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r669913235\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +284,81 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(stop) == 1,\n+    msg = \"`stop` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start <= 0) {\n+    start <- 1\n+  }\n+\n+  if (stop < start) {\n+    stop <- 0\n\nReview comment:\n       Can you explain these? It's not obvious why this is correct, and the base R code and docs don't discuss these cases.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +284,81 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(stop) == 1,\n+    msg = \"`stop` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start <= 0) {\n+    start <- 1\n+  }\n+\n+  if (stop < start) {\n+    stop <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    string,\n+    options = list(start = start - 1L, stop = stop)\n+  )\n+}\n+\n+nse_funcs$substring <- function(text, first, last = 1000000L) {\n\nReview comment:\n       You could just implement this one by calling nse_funcs$substr. The validation messages won't be exactly right because the argument names are different, but per the docs this function is only kept for compatibility with S, so I don't think it's a big deal.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +284,81 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(stop) == 1,\n+    msg = \"`stop` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start <= 0) {\n+    start <- 1\n+  }\n+\n+  if (stop < start) {\n+    stop <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    string,\n+    options = list(start = start - 1L, stop = stop)\n+  )\n+}\n+\n+nse_funcs$substring <- function(text, first, last = 1000000L) {\n+  assert_that(\n+    length(first) == 1,\n+    msg = \"`first` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(last) == 1,\n+    msg = \"`last` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (first <= 0) {\n+    first <- 1\n+  }\n+\n+  if (last < first) {\n+    last <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    text,\n+    options = list(start = first - 1L, stop = last)\n+  )\n+}\n+\n+nse_funcs$str_sub <- function(string, start = 1L, end = -1L) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"`end` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start == 0) start <- 1\n+\n+  if (end == -1) end <- .Machine$integer.max\n+\n+  if (end < start) end <- 0\n+\n+  if (start > 0) start <- start - 1L\n\nReview comment:\n       Why does this version subtract 1 up here but the others don't? Why only if start > 0? Is start <= 0 valid?\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -391,7 +470,7 @@ nse_funcs$str_split <- function(string, pattern, n = Inf, simplify = FALSE) {\n     string,\n     options = list(\n       pattern =\n-      opts$pattern,\n+        opts$pattern,\n\nReview comment:\n       I know this is just linting but IDK why opts$pattern is on its own line instead of next to = above it.\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +284,81 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(stop) == 1,\n+    msg = \"`stop` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start <= 0) {\n+    start <- 1\n+  }\n+\n+  if (stop < start) {\n+    stop <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    string,\n+    options = list(start = start - 1L, stop = stop)\n\nReview comment:\n       Why do we only subtract 1 from start but not stop?\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +284,81 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(stop) == 1,\n+    msg = \"`stop` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start <= 0) {\n+    start <- 1\n+  }\n+\n+  if (stop < start) {\n+    stop <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    string,\n+    options = list(start = start - 1L, stop = stop)\n+  )\n+}\n+\n+nse_funcs$substring <- function(text, first, last = 1000000L) {\n+  assert_that(\n+    length(first) == 1,\n+    msg = \"`first` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(last) == 1,\n+    msg = \"`last` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (first <= 0) {\n+    first <- 1\n+  }\n+\n+  if (last < first) {\n+    last <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    text,\n+    options = list(start = first - 1L, stop = last)\n+  )\n+}\n+\n+nse_funcs$str_sub <- function(string, start = 1L, end = -1L) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"`end` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start == 0) start <- 1\n\nReview comment:\n       Please use braces even for short if statements\n\n##########\nFile path: r/tests/testthat/test-dplyr-string-functions.R\n##########\n@@ -909,5 +896,206 @@ test_that(\"str_pad\", {\n       collect(),\n     df\n   )\n+})\n+\n+test_that(\"substr\", {\n+  df <- tibble(x = \"Apache Arrow\")\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, 1, 6)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, 0, 6)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, -1, 6)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, 6, 1)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, -1, -2)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, 9, 6)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, 1, 6)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, 8, 12)) %>%\n+      collect(),\n+    df\n+  )\n+\n+  expect_dplyr_equal(\n+    input %>%\n+      mutate(y = substr(x, -5, -1)) %>%\n+      collect(),\n+    df\n+  )\n+})\n+\n+test_that(\"substring\", {\n\nReview comment:\n       If you made substring just call substr then you could delete all but one of these tests.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-14T20:09:29.004+0000",
                    "updated": "2021-07-14T20:09:29.004+0000",
                    "started": "2021-07-14T20:09:29.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622696",
                    "issueId": "13382510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/worklog/622908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thisisnic commented on a change in pull request #10624:\nURL: https://github.com/apache/arrow/pull/10624#discussion_r670254295\n\n\n\n##########\nFile path: r/R/dplyr-functions.R\n##########\n@@ -280,6 +284,81 @@ nse_funcs$str_trim <- function(string, side = c(\"both\", \"left\", \"right\")) {\n   Expression$create(trim_fun, string)\n }\n \n+nse_funcs$substr <- function(string, start, stop) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(stop) == 1,\n+    msg = \"`stop` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start <= 0) {\n+    start <- 1\n+  }\n+\n+  if (stop < start) {\n+    stop <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    string,\n+    options = list(start = start - 1L, stop = stop)\n+  )\n+}\n+\n+nse_funcs$substring <- function(text, first, last = 1000000L) {\n+  assert_that(\n+    length(first) == 1,\n+    msg = \"`first` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(last) == 1,\n+    msg = \"`last` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (first <= 0) {\n+    first <- 1\n+  }\n+\n+  if (last < first) {\n+    last <- 0\n+  }\n+\n+  Expression$create(\n+    \"utf8_slice_codeunits\",\n+    text,\n+    options = list(start = first - 1L, stop = last)\n+  )\n+}\n+\n+nse_funcs$str_sub <- function(string, start = 1L, end = -1L) {\n+  assert_that(\n+    length(start) == 1,\n+    msg = \"`start` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+  assert_that(\n+    length(end) == 1,\n+    msg = \"`end` must be length 1 - other lengths are not supported in Arrow\"\n+  )\n+\n+  if (start == 0) start <- 1\n+\n+  if (end == -1) end <- .Machine$integer.max\n+\n+  if (end < start) end <- 0\n+\n+  if (start > 0) start <- start - 1L\n\nReview comment:\n       The subtracting of 1 is done in this code block in this function, because it's conditional on `start` being greater than 0.\r\n   \r\n   The other versions don't allow using negative values to count from the end backwards, so while in the others start <= 0 isn't valid, here it is.\r\n   \r\n   We only subtract 1 from start when start is > 0 because:\r\n   * we normally need to subtract 1 from `start` because C++ is 0-based and R is 1-based so they're counting from different points\r\n   * we don't need to subtract 1 from `end` as R counts inclusively (i.e. returned string includes the item at position `end`) whereas C++ counts exclusively (i.e. returned string includes *up to* the item at position `end` which effectively cancels out the difference due to indexing\r\n   * `str_sub` treats a `start` value of 0 or 1 as the same thing, which is why here, the subtraction is not done when `start` == 0 (and so resulting in them both passing a `start` value of 0 being passed to `utf8_slice_codeunits`)\r\n   * a `start` value < 0 is valid as both `str_sub` and `utf8_slice_codeunits` can count backwards from the end with -1 being the final character in the string, -2 being the second to last character, etc. \r\n   \r\n   I'll add some of this to the code in the form of a comment\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-15T08:35:58.636+0000",
                    "updated": "2021-07-15T08:35:58.636+0000",
                    "started": "2021-07-15T08:35:58.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "622908",
                    "issueId": "13382510"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@29b62623[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1469b917[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c63d79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5a3e8d17[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fcdb858[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@287ba941[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ae464c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@349c04bc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2601750f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5345f12f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6abe5df1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3ed31dfe[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jul 15 18:08:45 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-15T18:08:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12992/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-06-07T15:43:32.000+0000",
        "updated": "2021-07-15T18:09:01.000+0000",
        "timeoriginalestimate": null,
        "description": "Followup to ARROW-10557, which implemented the C++\r\n\r\ncurrent state:\r\n{code:r}\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\nlibrary(stringr)\r\n\r\n# get animal products, year 20919\r\nopen_dataset(\r\n  \"../cepii-datasets-arrow/parquet/baci_hs92\",\r\n  partitioning = c(\"year\", \"reporter_iso\")\r\n) %>% \r\n  filter(\r\n    year == 2019,\r\n    str_sub(product_code, 1, 2) == \"01\"\r\n  ) %>% \r\n  collect()\r\n\r\nError: Filter expression not supported for Arrow Datasets: str_sub(product_code, 1, 2) == \"01\"\r\nCall collect() first to pull data into R.\r\n{code}\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] bindings for substr(), substring(), str_sub()",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/comment/17371572",
                    "id": "17371572",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pachamaltese",
                        "name": "pachamaltese",
                        "key": "pachamaltese",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pachamaltese&avatarId=45930",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pachamaltese&avatarId=45930",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pachamaltese&avatarId=45930",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pachamaltese&avatarId=45930"
                        },
                        "displayName": "Mauricio 'Pach\u00e1' Vargas Sep\u00falveda",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I have a bad sub_str. I'll complete it and send it. This can be a 1/3 2/3 Pr with [~thisisnic] ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pachamaltese",
                        "name": "pachamaltese",
                        "key": "pachamaltese",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pachamaltese&avatarId=45930",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pachamaltese&avatarId=45930",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pachamaltese&avatarId=45930",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pachamaltese&avatarId=45930"
                        },
                        "displayName": "Mauricio 'Pach\u00e1' Vargas Sep\u00falveda",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-29T18:30:20.910+0000",
                    "updated": "2021-06-29T18:30:20.910+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/comment/17371744",
                    "id": "17371744",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pachamaltese",
                        "name": "pachamaltese",
                        "key": "pachamaltese",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pachamaltese&avatarId=45930",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pachamaltese&avatarId=45930",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pachamaltese&avatarId=45930",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pachamaltese&avatarId=45930"
                        },
                        "displayName": "Mauricio 'Pach\u00e1' Vargas Sep\u00falveda",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "ok to the moment\r\n\r\n{code:r}\r\nd %>% \r\n  mutate(\r\n    foo = \"Hadley Wickham\",\r\n    bar1 = str_sub(foo, 1, 6), # Hadley - OK\r\n    bar2 = str_sub(foo, end = 6), # Hadley - OK\r\n    bar3 = str_sub(foo, 8, 14), # Wickham - OK\r\n    bar4 = str_sub(foo, 8), # Wickham - BAD\r\n    bar5 = str_sub(foo, -1), # m - BAD\r\n    bar6 = str_sub(foo, -7), # Wickham - BAD\r\n    bar7 = str_sub(foo, end = -7) # Hadley W - BAD\r\n  ) %>% \r\n  filter(\r\n    year == 2000\r\n  ) %>% \r\n  select(bar1:bar7) %>% \r\n  collect()\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pachamaltese",
                        "name": "pachamaltese",
                        "key": "pachamaltese",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pachamaltese&avatarId=45930",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pachamaltese&avatarId=45930",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pachamaltese&avatarId=45930",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pachamaltese&avatarId=45930"
                        },
                        "displayName": "Mauricio 'Pach\u00e1' Vargas Sep\u00falveda",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-06-30T00:26:34.968+0000",
                    "updated": "2021-06-30T00:26:34.968+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/comment/17371985",
                    "id": "17371985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "body": "[~pachamaltese] Feel free to finish the other bits of this one off if you like - will be easier from a GitHub point of view, and saves duplication of effort seeing as you've already begun thinking about it.\u00a0 I'll assign it to you :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=thisisnic",
                        "name": "thisisnic",
                        "key": "thisisnic",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39937",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39937",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39937",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39937"
                        },
                        "displayName": "Nicola Crane",
                        "active": true,
                        "timeZone": "Africa/Casablanca"
                    },
                    "created": "2021-06-30T12:55:25.407+0000",
                    "updated": "2021-06-30T12:55:25.407+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382510/comment/17381508",
                    "id": "17381508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10624\n[https://github.com/apache/arrow/pull/10624]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-07-15T18:08:45.810+0000",
                    "updated": "2021-07-15T18:08:45.810+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rq6g:",
        "customfield_12314139": null
    }
}