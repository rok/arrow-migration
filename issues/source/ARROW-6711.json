{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13259069",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069",
    "key": "ARROW-6711",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6711/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/324465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594\n \n \n   - Remove Filter; replace with Expression\r\n   - Add helpers for filtering iterators of record batches against an expression\r\n   - Add non predicate push down filtering to ParquetFragment \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-07T15:39:42.030+0000",
                    "updated": "2019-10-07T15:39:42.030+0000",
                    "started": "2019-10-07T15:39:42.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324465",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/324466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#issuecomment-539077569\n \n \n   https://issues.apache.org/jira/browse/ARROW-6711\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-07T15:46:30.415+0000",
                    "updated": "2019-10-07T15:46:30.415+0000",
                    "started": "2019-10-07T15:46:30.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324466",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/325672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r332987105\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet_test.cc\n ##########\n @@ -186,5 +183,41 @@ TEST_F(TestParquetFileFormat, Inspect) {\n   EXPECT_EQ(*actual, *schema_);\n }\n \n+TEST_F(TestParquetFileFormat, FilterRecordBatch) {\n \n Review comment:\n   Move this according to refactor.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T12:50:41.655+0000",
                    "updated": "2019-10-09T12:50:41.655+0000",
                    "started": "2019-10-09T12:50:41.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325672",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/325673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r332988685\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -117,18 +86,95 @@ class ARROW_DS_EXPORT Expression {\n \n   bool Equals(const std::shared_ptr<Expression>& other) const;\n \n+  /// Overload for the common case of checking for equality to a specific scalar.\n+  template <typename T, typename Enable = decltype(MakeScalar(std::declval<T>()))>\n+  bool Equals(T&& t) const;\n+\n+  /// If true, this Expression is a ScalarExpression wrapping a null scalar.\n+  bool IsNull() const;\n+\n   /// Validate this expression for execution against a schema. This will check that all\n   /// reference fields are present (fields not in the schema will be replaced with null)\n   /// and all subexpressions are executable. Returns the type to which this expression\n   /// will evaluate.\n   virtual Result<std::shared_ptr<DataType>> Validate(const Schema& schema) const = 0;\n \n-  /// Return a simplified form of this expression given some known conditions.\n-  /// For example, (a > 3).Assume(a == 5) == (true). This can be used to do less work\n-  /// in ExpressionFilter when partition conditions guarantee some of this expression.\n-  /// In the example above, *no* filtering need be done on record batches in the\n-  /// partition since (a == 5).\n-  virtual Result<std::shared_ptr<Expression>> Assume(const Expression& given) const {\n+  Status Validate(const Schema& schema, std::shared_ptr<DataType>* out) const {\n+    return Validate(schema).Value(out);\n+  }\n+\n+  /// \\brief Simplify to an equivalent Expression given assumed constraints on input.\n \n Review comment:\n   In the future, I think we should make Optimization/Simplification it's own class.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T12:50:41.739+0000",
                    "updated": "2019-10-09T12:50:41.739+0000",
                    "started": "2019-10-09T12:50:41.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325673",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/325674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r332971091\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -42,31 +45,42 @@ class ParquetScanTask : public ScanTask {\n  public:\n   static Status Make(RowGroupSet row_groups, const std::vector<int>& columns_projection,\n                      std::shared_ptr<parquet::arrow::FileReader> reader,\n-                     ScanTaskPtr* out) {\n+                     std::shared_ptr<ScanOptions> options,\n+                     std::shared_ptr<ScanContext> context, ScanTaskPtr* out) {\n     RecordBatchReaderPtr record_batch_reader;\n     // TODO(fsaintjacques): Ensure GetRecordBatchReader is truly streaming and\n     // not using a TableBatchReader (materializing the full partition instead\n     // of streaming).\n     RETURN_NOT_OK(reader->GetRecordBatchReader(row_groups, columns_projection,\n                                                &record_batch_reader));\n \n-    out->reset(new ParquetScanTask(row_groups, std::move(reader),\n-                                   std::move(record_batch_reader)));\n+    *out = internal::make_unique<ParquetScanTask>(row_groups, std::move(reader),\n+                                                  std::move(record_batch_reader),\n+                                                  std::move(options), std::move(context));\n     return Status::OK();\n   }\n \n   RecordBatchIterator Scan() {\n-    return MakePointerIterator(std::move(record_batch_reader_));\n+    auto record_batch_it = MakePointerIterator(std::move(record_batch_reader_));\n \n Review comment:\n   DataFragments shouldn't be concerned with filtering RecordBatch -> RecordBatch filtering. This is already done in SimpleScanTask?\r\n   \r\n   OTOH, the filter must still be passed to the DataFragment because it can do pushdown predicate, e.g. parquet and RowGroup/Page statistics.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T12:50:41.742+0000",
                    "updated": "2019-10-09T12:50:41.742+0000",
                    "started": "2019-10-09T12:50:41.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325674",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/325675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r332980135\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -972,5 +868,33 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n+RecordBatchIterator FilterBatches(RecordBatchIterator unfiltered,\n \n Review comment:\n   I think it's time to refactor the filter: RecordBatch -> RecordBatch into a separate interface. \r\n   \r\n   - Remove Expression::Evaluate. The expression class shouldn't know about RecordBatch.\r\n   - Move the FilterBatches as the basic implementation of this new class. The interface shouldn't know about Iterator<RecordBatch>, just RecordBatch -> RecordBatch.\r\n   \r\n   An example:\r\n   ```\r\n   // Find a better name\r\n   class FilterOperator {\r\n       virtual Result<std::shared_ptr<RecordBatch> Filter(const std::shared_ptr<RecordBatch>& in) = 0;\r\n       std::shared_ptr<Expression> predicate() const { return predicate_; }\r\n     protected:\r\n       std::shared_ptr<Expression> predicate_;\r\n   }\r\n   \r\n   class StaticComputeKernelFilter : FilterOperator;\r\n   class GandivaFilter: FilterOperator;\r\n   ```\r\n   \r\n   This way the scheduling class, e.g. Scanner, wraps the ScanTaskIterator with a new ScanTask which applies an transparent FilterOperator. This way, we can toggle in the scanner builder (gandiva or compute, filter record batch or not).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T12:50:41.753+0000",
                    "updated": "2019-10-09T12:50:41.753+0000",
                    "started": "2019-10-09T12:50:41.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325675",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/325682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333007280\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -42,31 +45,42 @@ class ParquetScanTask : public ScanTask {\n  public:\n   static Status Make(RowGroupSet row_groups, const std::vector<int>& columns_projection,\n                      std::shared_ptr<parquet::arrow::FileReader> reader,\n-                     ScanTaskPtr* out) {\n+                     std::shared_ptr<ScanOptions> options,\n+                     std::shared_ptr<ScanContext> context, ScanTaskPtr* out) {\n     RecordBatchReaderPtr record_batch_reader;\n     // TODO(fsaintjacques): Ensure GetRecordBatchReader is truly streaming and\n     // not using a TableBatchReader (materializing the full partition instead\n     // of streaming).\n     RETURN_NOT_OK(reader->GetRecordBatchReader(row_groups, columns_projection,\n                                                &record_batch_reader));\n \n-    out->reset(new ParquetScanTask(row_groups, std::move(reader),\n-                                   std::move(record_batch_reader)));\n+    *out = internal::make_unique<ParquetScanTask>(row_groups, std::move(reader),\n+                                                  std::move(record_batch_reader),\n+                                                  std::move(options), std::move(context));\n     return Status::OK();\n   }\n \n   RecordBatchIterator Scan() {\n-    return MakePointerIterator(std::move(record_batch_reader_));\n+    auto record_batch_it = MakePointerIterator(std::move(record_batch_reader_));\n \n Review comment:\n   I've updated the PR comment to be more accurate: this filtering is being done in ParquetScanTask (and SimpleScanTask, as you mentioned). Indeed we might want to add a predicate push down hook for DataFragments but that's out of scope for this PR\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T13:17:58.670+0000",
                    "updated": "2019-10-09T13:17:58.670+0000",
                    "started": "2019-10-09T13:17:58.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325682",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/325690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333011992\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -972,5 +868,33 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n+RecordBatchIterator FilterBatches(RecordBatchIterator unfiltered,\n \n Review comment:\n   I disagree. IMHO it makes more sense to have filtering logic (both predicate push down via `Assume` and other via `Evaluate`) for a given expression type resident in the class which corresponds to that expression type. I'd implement evaluation against Gandiva as an overload of `Evaluate`.\r\n   \r\n   The alternative involves a proliferation of switch statements on `ExpressionType` outside of `filter.cc` (or equivalently adding a visitor interface for `Expression` trees). If we can avoid that by keeping `Evaluate` and `Assume` as methods then that seems the better design to me.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T13:27:38.374+0000",
                    "updated": "2019-10-09T13:27:38.374+0000",
                    "started": "2019-10-09T13:27:38.374+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325690",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/325874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333177249\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -972,5 +868,33 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n+RecordBatchIterator FilterBatches(RecordBatchIterator unfiltered,\n \n Review comment:\n   On top of separation of concerns, there's also a handful of other implementation we will explore:\r\n   \r\n   - CachingOperator (caching selection vector of sub-expressions), e.g. database cracking.\r\n   - AccountingOperator a bit like MemoryPool statistics\r\n   - Reordering evaluation of predicates to exploit statistics on predicate\r\n   \r\n   These optimizations/utilities have no reason living under Expression implementation. Moving this in a concrete class is a first step to enable seamless gandiva integration.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T18:52:36.266+0000",
                    "updated": "2019-10-09T18:52:36.266+0000",
                    "started": "2019-10-09T18:52:36.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325874",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333651052\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/dataset.cc\n ##########\n @@ -31,21 +31,28 @@ namespace dataset {\n \n SimpleDataFragment::SimpleDataFragment(\n     std::vector<std::shared_ptr<RecordBatch>> record_batches)\n-    : record_batches_(std::move(record_batches)) {}\n+    : SimpleDataFragment(std::move(record_batches), ScanOptions::Defaults()) {}\n+\n+SimpleDataFragment::SimpleDataFragment(\n+    std::vector<std::shared_ptr<RecordBatch>> record_batches,\n+    std::shared_ptr<ScanOptions> options)\n+    : record_batches_(std::move(record_batches)), options_(std::move(options)) {}\n \n Status SimpleDataFragment::Scan(std::shared_ptr<ScanContext> scan_context,\n                                 ScanTaskIterator* out) {\n   // Make an explicit copy of record_batches_ to ensure Scan can be called\n   // multiple times.\n-  auto it = MakeVectorIterator(record_batches_);\n+  auto batches_it = MakeVectorIterator(record_batches_);\n \n   // RecordBatch -> ScanTask\n-  auto fn = [](std::shared_ptr<RecordBatch> batch) -> std::unique_ptr<ScanTask> {\n+  auto options = options_;\n+  auto fn = [=](std::shared_ptr<RecordBatch> batch) -> std::unique_ptr<ScanTask> {\n     std::vector<std::shared_ptr<RecordBatch>> batches{batch};\n-    return ::arrow::internal::make_unique<SimpleScanTask>(std::move(batches));\n+    return ::arrow::internal::make_unique<SimpleScanTask>(\n+        std::move(batches), std::move(options), std::move(scan_context));\n \n Review comment:\n   As per comment above, you might want to copy instead of move (it's only a shared_ptr anyway). There's no test for it, and I'm not sure this behavior should be preserved.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T17:43:35.431+0000",
                    "updated": "2019-10-10T17:43:35.431+0000",
                    "started": "2019-10-10T17:43:35.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326474",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333683329\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/scanner.cc\n ##########\n @@ -80,7 +93,8 @@ ScannerBuilder* ScannerBuilder::IncludePartitionKeys(bool include) {\n }\n \n Status ScannerBuilder::Finish(std::unique_ptr<Scanner>* out) const {\n-  auto options = std::make_shared<ScanOptions>();\n+  auto options = ScanOptions::Defaults();\n \n Review comment:\n   Move this in the constructor.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T19:09:35.240+0000",
                    "updated": "2019-10-10T19:09:35.240+0000",
                    "started": "2019-10-10T19:09:35.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326511",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333651310\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/dataset.h\n ##########\n @@ -60,14 +60,18 @@ class ARROW_DS_EXPORT SimpleDataFragment : public DataFragment {\n  public:\n   explicit SimpleDataFragment(std::vector<std::shared_ptr<RecordBatch>> record_batches);\n \n+  SimpleDataFragment(std::vector<std::shared_ptr<RecordBatch>> record_batches,\n+                     std::shared_ptr<ScanOptions> options);\n+\n   Status Scan(std::shared_ptr<ScanContext> scan_context, ScanTaskIterator* out) override;\n \n   bool splittable() const override { return false; }\n \n-  std::shared_ptr<ScanOptions> scan_options() const override { return NULLPTR; }\n+  std::shared_ptr<ScanOptions> scan_options() const override { return options_; }\n \n Review comment:\n   I wonder if this should just be moved in the base class.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T19:09:35.260+0000",
                    "updated": "2019-10-10T19:09:35.260+0000",
                    "started": "2019-10-10T19:09:35.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326512",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333681591\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -972,5 +758,182 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n+RecordBatchIterator ExpressionEvaluator::FilterBatches(\n+    RecordBatchIterator unfiltered, std::shared_ptr<Expression> filter) {\n+  auto filter_batches = [filter, this](const std::shared_ptr<RecordBatch>& unfiltered,\n+                                       std::shared_ptr<RecordBatch>* filtered) {\n+    ARROW_ASSIGN_OR_RAISE(auto selection, Evaluate(*filter, *unfiltered));\n+    return Filter(selection, unfiltered, filtered);\n+  };\n+\n+  return MakeMaybeMapIterator(std::move(filter_batches), std::move(unfiltered));\n+}\n+\n+std::shared_ptr<ExpressionEvaluator> ExpressionEvaluator::Null() {\n+  struct Impl : ExpressionEvaluator {\n+    Result<Datum> Evaluate(const Expression& expr,\n+                           const RecordBatch& batch) const override {\n+      ARROW_ASSIGN_OR_RAISE(auto type, expr.Validate(*batch.schema()));\n+      std::shared_ptr<Scalar> out;\n+      RETURN_NOT_OK(MakeNullScalar(type, &out));\n+      return Datum(std::move(out));\n+    }\n+\n+    Result<std::shared_ptr<RecordBatch>> Filter(\n+        const Datum& selection,\n+        const std::shared_ptr<RecordBatch>& batch) const override {\n+      return batch;\n+    }\n+  };\n+\n+  return std::make_shared<Impl>();\n+}\n+\n+struct DepthFirstEvaluator::Impl {\n+  template <typename E>\n+  Result<Datum> operator()(const E& expr) const {\n+    return this_->Evaluate(expr, batch_);\n+  }\n+\n+  const DepthFirstEvaluator* this_;\n+  const RecordBatch& batch_;\n+};\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const Expression& expr,\n+                                            const RecordBatch& batch) const {\n+  return VisitExpression(expr, Impl{this, batch});\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const ScalarExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  return Datum(expr.value());\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const FieldExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  auto column = batch.GetColumnByName(expr.name());\n+  if (column == nullptr) {\n+    return NullDatum();\n+  }\n+  return std::move(column);\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const NotExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  ARROW_ASSIGN_OR_RAISE(auto to_invert, Evaluate(*expr.operand(), batch));\n+  if (IsNullDatum(to_invert)) {\n+    return NullDatum();\n+  }\n+\n+  if (to_invert.is_scalar()) {\n+    bool trivial_condition =\n+        checked_cast<const BooleanScalar&>(*to_invert.scalar()).value;\n+    return Datum(std::make_shared<BooleanScalar>(!trivial_condition));\n+  }\n+\n+  DCHECK(to_invert.is_array());\n+  Datum out;\n+  RETURN_NOT_OK(arrow::compute::Invert(ctx_, to_invert, &out));\n+  return std::move(out);\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const AndExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  ARROW_ASSIGN_OR_RAISE(auto lhs, Evaluate(*expr.left_operand(), batch));\n+  ARROW_ASSIGN_OR_RAISE(auto rhs, Evaluate(*expr.right_operand(), batch));\n+\n+  if (IsNullDatum(lhs) || IsNullDatum(rhs)) {\n+    return NullDatum();\n+  }\n+\n+  if (lhs.is_array() && rhs.is_array()) {\n+    Datum out;\n+    RETURN_NOT_OK(arrow::compute::And(ctx_, lhs, rhs, &out));\n+    return std::move(out);\n+  }\n+\n+  if (lhs.is_scalar() && rhs.is_scalar()) {\n+    return Datum(checked_cast<const BooleanScalar&>(*lhs.scalar()).value &&\n+                 checked_cast<const BooleanScalar&>(*rhs.scalar()).value);\n+  }\n+\n+  // One scalar, one array\n+  bool scalar_operand =\n+      checked_cast<const BooleanScalar&>(*(lhs.is_scalar() ? lhs : rhs).scalar()).value;\n+  if (!scalar_operand) {\n+    return Datum(false);\n+  }\n+\n+  return lhs.is_array() ? std::move(lhs) : std::move(rhs);\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const OrExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  ARROW_ASSIGN_OR_RAISE(auto lhs, Evaluate(*expr.left_operand(), batch));\n+  ARROW_ASSIGN_OR_RAISE(auto rhs, Evaluate(*expr.right_operand(), batch));\n+\n+  if (IsNullDatum(lhs) || IsNullDatum(rhs)) {\n+    return NullDatum();\n+  }\n+\n+  if (lhs.is_array() && rhs.is_array()) {\n+    Datum out;\n+    RETURN_NOT_OK(arrow::compute::Or(ctx_, lhs, rhs, &out));\n+    return std::move(out);\n+  }\n+\n+  if (lhs.is_scalar() && rhs.is_scalar()) {\n+    return Datum(checked_cast<const BooleanScalar&>(*lhs.scalar()).value &&\n+                 checked_cast<const BooleanScalar&>(*rhs.scalar()).value);\n+  }\n+\n+  // One scalar, one array\n+  bool scalar_operand =\n+      checked_cast<const BooleanScalar&>(*(lhs.is_scalar() ? lhs : rhs).scalar()).value;\n+  if (!scalar_operand) {\n+    return Datum(true);\n+  }\n+\n+  return lhs.is_array() ? std::move(lhs) : std::move(rhs);\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const ComparisonExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  ARROW_ASSIGN_OR_RAISE(auto lhs, Evaluate(*expr.left_operand(), batch));\n+  ARROW_ASSIGN_OR_RAISE(auto rhs, Evaluate(*expr.right_operand(), batch));\n+\n+  if (IsNullDatum(lhs) || IsNullDatum(rhs)) {\n+    return NullDatum();\n+  }\n+\n+  DCHECK(lhs.is_array());\n+\n+  Datum out;\n+  RETURN_NOT_OK(arrow::compute::Compare(ctx_, lhs, rhs,\n+                                        arrow::compute::CompareOptions(expr.op()), &out));\n+  return std::move(out);\n+}\n+\n+Result<std::shared_ptr<RecordBatch>> DepthFirstEvaluator::Filter(\n+    const compute::Datum& selection, const std::shared_ptr<RecordBatch>& batch) const {\n+  if (selection.is_array()) {\n+    auto selection_array = selection.make_array();\n+    std::shared_ptr<RecordBatch> filtered;\n+    RETURN_NOT_OK(compute::Filter(ctx_, *batch, *selection_array, &filtered));\n+    return std::move(filtered);\n+  }\n+\n+  if (!selection.is_scalar() || selection.type()->id() != Type::BOOL) {\n+    return Status::NotImplemented(\"Filtering batches against DatumKind::\",\n+                                  selection.kind(), \" of type \", *selection.type());\n+  }\n+\n+  if (BooleanScalar(true).Equals(selection.scalar())) {\n+    return batch;\n+  }\n+\n+  return batch->Slice(0, 0);\n \n Review comment:\n   I'm puzzled by how one can get here. Would it be better to return nullptr and make FilterBatches ignore said empty batches?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T19:09:35.371+0000",
                    "updated": "2019-10-10T19:09:35.371+0000",
                    "started": "2019-10-10T19:09:35.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326513",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333654455\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -391,12 +405,126 @@ inline FieldExpression operator\"\" _(const char* name, size_t name_length) {\n }\n }  // namespace string_literals\n \n-ARROW_DS_EXPORT Result<std::shared_ptr<Expression>> SelectorAssume(\n-    const std::shared_ptr<DataSelector>& selector,\n-    const std::shared_ptr<Expression>& given);\n+template <typename T, typename Enable>\n+bool Expression::Equals(T&& t) const {\n+  if (type_ != ExpressionType::SCALAR) {\n+    return false;\n+  }\n+  auto s = MakeScalar(std::forward<T>(t));\n+  return internal::checked_cast<const ScalarExpression&>(*this).value()->Equals(s);\n+}\n+\n+template <typename Visitor>\n+auto VisitExpression(const Expression& expr, Visitor&& visitor)\n+    -> decltype(visitor(expr)) {\n+  switch (expr.type()) {\n+    case ExpressionType::FIELD:\n+      return visitor(internal::checked_cast<const FieldExpression&>(expr));\n+\n+    case ExpressionType::SCALAR:\n+      return visitor(internal::checked_cast<const ScalarExpression&>(expr));\n+\n+    case ExpressionType::NOT:\n+      return visitor(internal::checked_cast<const NotExpression&>(expr));\n+\n+    case ExpressionType::AND:\n+      return visitor(internal::checked_cast<const AndExpression&>(expr));\n+\n+    case ExpressionType::OR:\n+      return visitor(internal::checked_cast<const OrExpression&>(expr));\n+\n+    case ExpressionType::COMPARISON:\n+      return visitor(internal::checked_cast<const ComparisonExpression&>(expr));\n+\n+    case ExpressionType::CUSTOM:\n+      return visitor(internal::checked_cast<const CustomExpression&>(expr));\n+\n+    default:\n+      break;\n+  }\n+  return visitor(expr);\n+}\n+\n+/// Interface for evaluation of expressions against record batches.\n+class ARROW_DS_EXPORT ExpressionEvaluator {\n+ public:\n+  virtual ~ExpressionEvaluator() = default;\n+\n+  /// Evaluate expr against each row of a RecordBatch.\n+  /// Returned Datum will be of either SCALAR or ARRAY kind.\n+  /// A return value of ARRAY kind will have length == batch.num_rows()\n+  /// An return value of SCALAR kind is equivalent to an array of the same type whose\n+  /// slots contain a single repeated value.\n+  ///\n+  /// expr must be validated against the schema of batch before calling this method.\n+  virtual Result<compute::Datum> Evaluate(const Expression& expr,\n+                                          const RecordBatch& batch) const = 0;\n \n-ARROW_DS_EXPORT std::shared_ptr<DataSelector> ExpressionSelector(\n-    std::shared_ptr<Expression> e);\n+  Status Evaluate(const Expression& expr, const RecordBatch& batch,\n+                  compute::Datum* out) const {\n+    return Evaluate(expr, batch).Value(out);\n+  }\n+\n+  virtual Result<std::shared_ptr<RecordBatch>> Filter(\n+      const compute::Datum& selection,\n+      const std::shared_ptr<RecordBatch>& batch) const = 0;\n+\n+  Status Filter(const compute::Datum& selection,\n+                const std::shared_ptr<RecordBatch>& batch,\n+                std::shared_ptr<RecordBatch>* out) const {\n+    return Filter(selection, batch).Value(out);\n+  }\n+\n+  /// Wrap an iterator of record batches with a filter expression. The resulting\n+  /// iterator will yield record batches filtered by the given expression.\n+  virtual RecordBatchIterator FilterBatches(RecordBatchIterator unfiltered,\n+                                            std::shared_ptr<Expression> filter);\n+\n+  /// construct an Evaluator which evaluates all expressions to null and does no\n+  /// filtering\n+  static std::shared_ptr<ExpressionEvaluator> Null();\n+};\n+\n+/// construct an Evaluator which uses compute kernels to evaluate expressions and\n+/// filter record batches in depth first order\n+class ARROW_DS_EXPORT DepthFirstEvaluator : public ExpressionEvaluator {\n+ public:\n+  explicit DepthFirstEvaluator(compute::FunctionContext* ctx) : ctx_(ctx) {}\n+\n+  Result<compute::Datum> Evaluate(const Expression& expr,\n \n Review comment:\n   Can you move the pattern match in the pimpl class?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T19:09:35.373+0000",
                    "updated": "2019-10-10T19:09:35.373+0000",
                    "started": "2019-10-10T19:09:35.373+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326514",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333654998\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -391,12 +405,126 @@ inline FieldExpression operator\"\" _(const char* name, size_t name_length) {\n }\n }  // namespace string_literals\n \n-ARROW_DS_EXPORT Result<std::shared_ptr<Expression>> SelectorAssume(\n-    const std::shared_ptr<DataSelector>& selector,\n-    const std::shared_ptr<Expression>& given);\n+template <typename T, typename Enable>\n+bool Expression::Equals(T&& t) const {\n+  if (type_ != ExpressionType::SCALAR) {\n+    return false;\n+  }\n+  auto s = MakeScalar(std::forward<T>(t));\n+  return internal::checked_cast<const ScalarExpression&>(*this).value()->Equals(s);\n+}\n+\n+template <typename Visitor>\n+auto VisitExpression(const Expression& expr, Visitor&& visitor)\n+    -> decltype(visitor(expr)) {\n+  switch (expr.type()) {\n+    case ExpressionType::FIELD:\n+      return visitor(internal::checked_cast<const FieldExpression&>(expr));\n+\n+    case ExpressionType::SCALAR:\n+      return visitor(internal::checked_cast<const ScalarExpression&>(expr));\n+\n+    case ExpressionType::NOT:\n+      return visitor(internal::checked_cast<const NotExpression&>(expr));\n+\n+    case ExpressionType::AND:\n+      return visitor(internal::checked_cast<const AndExpression&>(expr));\n+\n+    case ExpressionType::OR:\n+      return visitor(internal::checked_cast<const OrExpression&>(expr));\n+\n+    case ExpressionType::COMPARISON:\n+      return visitor(internal::checked_cast<const ComparisonExpression&>(expr));\n+\n+    case ExpressionType::CUSTOM:\n+      return visitor(internal::checked_cast<const CustomExpression&>(expr));\n+\n+    default:\n+      break;\n+  }\n+  return visitor(expr);\n+}\n+\n+/// Interface for evaluation of expressions against record batches.\n+class ARROW_DS_EXPORT ExpressionEvaluator {\n+ public:\n+  virtual ~ExpressionEvaluator() = default;\n+\n+  /// Evaluate expr against each row of a RecordBatch.\n+  /// Returned Datum will be of either SCALAR or ARRAY kind.\n+  /// A return value of ARRAY kind will have length == batch.num_rows()\n+  /// An return value of SCALAR kind is equivalent to an array of the same type whose\n+  /// slots contain a single repeated value.\n+  ///\n+  /// expr must be validated against the schema of batch before calling this method.\n+  virtual Result<compute::Datum> Evaluate(const Expression& expr,\n+                                          const RecordBatch& batch) const = 0;\n \n-ARROW_DS_EXPORT std::shared_ptr<DataSelector> ExpressionSelector(\n-    std::shared_ptr<Expression> e);\n+  Status Evaluate(const Expression& expr, const RecordBatch& batch,\n+                  compute::Datum* out) const {\n+    return Evaluate(expr, batch).Value(out);\n+  }\n+\n+  virtual Result<std::shared_ptr<RecordBatch>> Filter(\n+      const compute::Datum& selection,\n+      const std::shared_ptr<RecordBatch>& batch) const = 0;\n+\n+  Status Filter(const compute::Datum& selection,\n+                const std::shared_ptr<RecordBatch>& batch,\n+                std::shared_ptr<RecordBatch>* out) const {\n+    return Filter(selection, batch).Value(out);\n+  }\n+\n+  /// Wrap an iterator of record batches with a filter expression. The resulting\n+  /// iterator will yield record batches filtered by the given expression.\n+  virtual RecordBatchIterator FilterBatches(RecordBatchIterator unfiltered,\n+                                            std::shared_ptr<Expression> filter);\n+\n+  /// construct an Evaluator which evaluates all expressions to null and does no\n+  /// filtering\n+  static std::shared_ptr<ExpressionEvaluator> Null();\n+};\n+\n+/// construct an Evaluator which uses compute kernels to evaluate expressions and\n+/// filter record batches in depth first order\n+class ARROW_DS_EXPORT DepthFirstEvaluator : public ExpressionEvaluator {\n \n Review comment:\n   `TreeEvaluator`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T19:09:35.408+0000",
                    "updated": "2019-10-10T19:09:35.408+0000",
                    "started": "2019-10-10T19:09:35.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326515",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r333675478\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -972,5 +758,182 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n+RecordBatchIterator ExpressionEvaluator::FilterBatches(\n+    RecordBatchIterator unfiltered, std::shared_ptr<Expression> filter) {\n+  auto filter_batches = [filter, this](const std::shared_ptr<RecordBatch>& unfiltered,\n+                                       std::shared_ptr<RecordBatch>* filtered) {\n+    ARROW_ASSIGN_OR_RAISE(auto selection, Evaluate(*filter, *unfiltered));\n+    return Filter(selection, unfiltered, filtered);\n+  };\n+\n+  return MakeMaybeMapIterator(std::move(filter_batches), std::move(unfiltered));\n+}\n+\n+std::shared_ptr<ExpressionEvaluator> ExpressionEvaluator::Null() {\n+  struct Impl : ExpressionEvaluator {\n+    Result<Datum> Evaluate(const Expression& expr,\n+                           const RecordBatch& batch) const override {\n+      ARROW_ASSIGN_OR_RAISE(auto type, expr.Validate(*batch.schema()));\n+      std::shared_ptr<Scalar> out;\n+      RETURN_NOT_OK(MakeNullScalar(type, &out));\n+      return Datum(std::move(out));\n+    }\n+\n+    Result<std::shared_ptr<RecordBatch>> Filter(\n+        const Datum& selection,\n+        const std::shared_ptr<RecordBatch>& batch) const override {\n+      return batch;\n+    }\n+  };\n+\n+  return std::make_shared<Impl>();\n+}\n+\n+struct DepthFirstEvaluator::Impl {\n+  template <typename E>\n+  Result<Datum> operator()(const E& expr) const {\n+    return this_->Evaluate(expr, batch_);\n+  }\n+\n+  const DepthFirstEvaluator* this_;\n+  const RecordBatch& batch_;\n+};\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const Expression& expr,\n+                                            const RecordBatch& batch) const {\n+  return VisitExpression(expr, Impl{this, batch});\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const ScalarExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  return Datum(expr.value());\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const FieldExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  auto column = batch.GetColumnByName(expr.name());\n+  if (column == nullptr) {\n \n Review comment:\n   Should this fail instead? The caller shouldn't provide malformed expressions, either failed at construction (which require an \u00e0 priori Schema) or fail here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T19:09:35.510+0000",
                    "updated": "2019-10-10T19:09:35.510+0000",
                    "started": "2019-10-10T19:09:35.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326516",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326942",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r334028708\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/dataset.h\n ##########\n @@ -60,14 +60,18 @@ class ARROW_DS_EXPORT SimpleDataFragment : public DataFragment {\n  public:\n   explicit SimpleDataFragment(std::vector<std::shared_ptr<RecordBatch>> record_batches);\n \n+  SimpleDataFragment(std::vector<std::shared_ptr<RecordBatch>> record_batches,\n+                     std::shared_ptr<ScanOptions> options);\n+\n   Status Scan(std::shared_ptr<ScanContext> scan_context, ScanTaskIterator* out) override;\n \n   bool splittable() const override { return false; }\n \n-  std::shared_ptr<ScanOptions> scan_options() const override { return NULLPTR; }\n+  std::shared_ptr<ScanOptions> scan_options() const override { return options_; }\n \n Review comment:\n   That sounds fine\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T14:46:41.491+0000",
                    "updated": "2019-10-11T14:46:41.491+0000",
                    "started": "2019-10-11T14:46:41.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326942",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r334031762\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -391,12 +405,126 @@ inline FieldExpression operator\"\" _(const char* name, size_t name_length) {\n }\n }  // namespace string_literals\n \n-ARROW_DS_EXPORT Result<std::shared_ptr<Expression>> SelectorAssume(\n-    const std::shared_ptr<DataSelector>& selector,\n-    const std::shared_ptr<Expression>& given);\n+template <typename T, typename Enable>\n+bool Expression::Equals(T&& t) const {\n+  if (type_ != ExpressionType::SCALAR) {\n+    return false;\n+  }\n+  auto s = MakeScalar(std::forward<T>(t));\n+  return internal::checked_cast<const ScalarExpression&>(*this).value()->Equals(s);\n+}\n+\n+template <typename Visitor>\n+auto VisitExpression(const Expression& expr, Visitor&& visitor)\n+    -> decltype(visitor(expr)) {\n+  switch (expr.type()) {\n+    case ExpressionType::FIELD:\n+      return visitor(internal::checked_cast<const FieldExpression&>(expr));\n+\n+    case ExpressionType::SCALAR:\n+      return visitor(internal::checked_cast<const ScalarExpression&>(expr));\n+\n+    case ExpressionType::NOT:\n+      return visitor(internal::checked_cast<const NotExpression&>(expr));\n+\n+    case ExpressionType::AND:\n+      return visitor(internal::checked_cast<const AndExpression&>(expr));\n+\n+    case ExpressionType::OR:\n+      return visitor(internal::checked_cast<const OrExpression&>(expr));\n+\n+    case ExpressionType::COMPARISON:\n+      return visitor(internal::checked_cast<const ComparisonExpression&>(expr));\n+\n+    case ExpressionType::CUSTOM:\n+      return visitor(internal::checked_cast<const CustomExpression&>(expr));\n+\n+    default:\n+      break;\n+  }\n+  return visitor(expr);\n+}\n+\n+/// Interface for evaluation of expressions against record batches.\n+class ARROW_DS_EXPORT ExpressionEvaluator {\n+ public:\n+  virtual ~ExpressionEvaluator() = default;\n+\n+  /// Evaluate expr against each row of a RecordBatch.\n+  /// Returned Datum will be of either SCALAR or ARRAY kind.\n+  /// A return value of ARRAY kind will have length == batch.num_rows()\n+  /// An return value of SCALAR kind is equivalent to an array of the same type whose\n+  /// slots contain a single repeated value.\n+  ///\n+  /// expr must be validated against the schema of batch before calling this method.\n+  virtual Result<compute::Datum> Evaluate(const Expression& expr,\n+                                          const RecordBatch& batch) const = 0;\n \n-ARROW_DS_EXPORT std::shared_ptr<DataSelector> ExpressionSelector(\n-    std::shared_ptr<Expression> e);\n+  Status Evaluate(const Expression& expr, const RecordBatch& batch,\n+                  compute::Datum* out) const {\n+    return Evaluate(expr, batch).Value(out);\n+  }\n+\n+  virtual Result<std::shared_ptr<RecordBatch>> Filter(\n+      const compute::Datum& selection,\n+      const std::shared_ptr<RecordBatch>& batch) const = 0;\n+\n+  Status Filter(const compute::Datum& selection,\n+                const std::shared_ptr<RecordBatch>& batch,\n+                std::shared_ptr<RecordBatch>* out) const {\n+    return Filter(selection, batch).Value(out);\n+  }\n+\n+  /// Wrap an iterator of record batches with a filter expression. The resulting\n+  /// iterator will yield record batches filtered by the given expression.\n+  virtual RecordBatchIterator FilterBatches(RecordBatchIterator unfiltered,\n+                                            std::shared_ptr<Expression> filter);\n+\n+  /// construct an Evaluator which evaluates all expressions to null and does no\n+  /// filtering\n+  static std::shared_ptr<ExpressionEvaluator> Null();\n+};\n+\n+/// construct an Evaluator which uses compute kernels to evaluate expressions and\n+/// filter record batches in depth first order\n+class ARROW_DS_EXPORT DepthFirstEvaluator : public ExpressionEvaluator {\n+ public:\n+  explicit DepthFirstEvaluator(compute::FunctionContext* ctx) : ctx_(ctx) {}\n+\n+  Result<compute::Datum> Evaluate(const Expression& expr,\n \n Review comment:\n   Not a critical concern, but I designed it this way to make it easier for subclasses of `DepthFirstEvaluator` to override things (like [here](https://github.com/apache/arrow/pull/5594/files#diff-157d3e1f58273646705b1760a1f09770R316-R333))\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T14:53:08.360+0000",
                    "updated": "2019-10-11T14:53:08.360+0000",
                    "started": "2019-10-11T14:53:08.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326947",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r334031812\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.h\n ##########\n @@ -391,12 +405,126 @@ inline FieldExpression operator\"\" _(const char* name, size_t name_length) {\n }\n }  // namespace string_literals\n \n-ARROW_DS_EXPORT Result<std::shared_ptr<Expression>> SelectorAssume(\n-    const std::shared_ptr<DataSelector>& selector,\n-    const std::shared_ptr<Expression>& given);\n+template <typename T, typename Enable>\n+bool Expression::Equals(T&& t) const {\n+  if (type_ != ExpressionType::SCALAR) {\n+    return false;\n+  }\n+  auto s = MakeScalar(std::forward<T>(t));\n+  return internal::checked_cast<const ScalarExpression&>(*this).value()->Equals(s);\n+}\n+\n+template <typename Visitor>\n+auto VisitExpression(const Expression& expr, Visitor&& visitor)\n+    -> decltype(visitor(expr)) {\n+  switch (expr.type()) {\n+    case ExpressionType::FIELD:\n+      return visitor(internal::checked_cast<const FieldExpression&>(expr));\n+\n+    case ExpressionType::SCALAR:\n+      return visitor(internal::checked_cast<const ScalarExpression&>(expr));\n+\n+    case ExpressionType::NOT:\n+      return visitor(internal::checked_cast<const NotExpression&>(expr));\n+\n+    case ExpressionType::AND:\n+      return visitor(internal::checked_cast<const AndExpression&>(expr));\n+\n+    case ExpressionType::OR:\n+      return visitor(internal::checked_cast<const OrExpression&>(expr));\n+\n+    case ExpressionType::COMPARISON:\n+      return visitor(internal::checked_cast<const ComparisonExpression&>(expr));\n+\n+    case ExpressionType::CUSTOM:\n+      return visitor(internal::checked_cast<const CustomExpression&>(expr));\n+\n+    default:\n+      break;\n+  }\n+  return visitor(expr);\n+}\n+\n+/// Interface for evaluation of expressions against record batches.\n+class ARROW_DS_EXPORT ExpressionEvaluator {\n+ public:\n+  virtual ~ExpressionEvaluator() = default;\n+\n+  /// Evaluate expr against each row of a RecordBatch.\n+  /// Returned Datum will be of either SCALAR or ARRAY kind.\n+  /// A return value of ARRAY kind will have length == batch.num_rows()\n+  /// An return value of SCALAR kind is equivalent to an array of the same type whose\n+  /// slots contain a single repeated value.\n+  ///\n+  /// expr must be validated against the schema of batch before calling this method.\n+  virtual Result<compute::Datum> Evaluate(const Expression& expr,\n+                                          const RecordBatch& batch) const = 0;\n \n-ARROW_DS_EXPORT std::shared_ptr<DataSelector> ExpressionSelector(\n-    std::shared_ptr<Expression> e);\n+  Status Evaluate(const Expression& expr, const RecordBatch& batch,\n+                  compute::Datum* out) const {\n+    return Evaluate(expr, batch).Value(out);\n+  }\n+\n+  virtual Result<std::shared_ptr<RecordBatch>> Filter(\n+      const compute::Datum& selection,\n+      const std::shared_ptr<RecordBatch>& batch) const = 0;\n+\n+  Status Filter(const compute::Datum& selection,\n+                const std::shared_ptr<RecordBatch>& batch,\n+                std::shared_ptr<RecordBatch>* out) const {\n+    return Filter(selection, batch).Value(out);\n+  }\n+\n+  /// Wrap an iterator of record batches with a filter expression. The resulting\n+  /// iterator will yield record batches filtered by the given expression.\n+  virtual RecordBatchIterator FilterBatches(RecordBatchIterator unfiltered,\n+                                            std::shared_ptr<Expression> filter);\n+\n+  /// construct an Evaluator which evaluates all expressions to null and does no\n+  /// filtering\n+  static std::shared_ptr<ExpressionEvaluator> Null();\n+};\n+\n+/// construct an Evaluator which uses compute kernels to evaluate expressions and\n+/// filter record batches in depth first order\n+class ARROW_DS_EXPORT DepthFirstEvaluator : public ExpressionEvaluator {\n \n Review comment:\n   Will do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T14:53:14.889+0000",
                    "updated": "2019-10-11T14:53:14.889+0000",
                    "started": "2019-10-11T14:53:14.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326948",
                    "issueId": "13259069"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/worklog/326949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5594: ARROW-6711: [C++] Consolidate Filter and Expression\nURL: https://github.com/apache/arrow/pull/5594#discussion_r334034288\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/filter.cc\n ##########\n @@ -972,5 +758,182 @@ Result<std::shared_ptr<DataType>> FieldExpression::Validate(const Schema& schema\n   return null();\n }\n \n+RecordBatchIterator ExpressionEvaluator::FilterBatches(\n+    RecordBatchIterator unfiltered, std::shared_ptr<Expression> filter) {\n+  auto filter_batches = [filter, this](const std::shared_ptr<RecordBatch>& unfiltered,\n+                                       std::shared_ptr<RecordBatch>* filtered) {\n+    ARROW_ASSIGN_OR_RAISE(auto selection, Evaluate(*filter, *unfiltered));\n+    return Filter(selection, unfiltered, filtered);\n+  };\n+\n+  return MakeMaybeMapIterator(std::move(filter_batches), std::move(unfiltered));\n+}\n+\n+std::shared_ptr<ExpressionEvaluator> ExpressionEvaluator::Null() {\n+  struct Impl : ExpressionEvaluator {\n+    Result<Datum> Evaluate(const Expression& expr,\n+                           const RecordBatch& batch) const override {\n+      ARROW_ASSIGN_OR_RAISE(auto type, expr.Validate(*batch.schema()));\n+      std::shared_ptr<Scalar> out;\n+      RETURN_NOT_OK(MakeNullScalar(type, &out));\n+      return Datum(std::move(out));\n+    }\n+\n+    Result<std::shared_ptr<RecordBatch>> Filter(\n+        const Datum& selection,\n+        const std::shared_ptr<RecordBatch>& batch) const override {\n+      return batch;\n+    }\n+  };\n+\n+  return std::make_shared<Impl>();\n+}\n+\n+struct DepthFirstEvaluator::Impl {\n+  template <typename E>\n+  Result<Datum> operator()(const E& expr) const {\n+    return this_->Evaluate(expr, batch_);\n+  }\n+\n+  const DepthFirstEvaluator* this_;\n+  const RecordBatch& batch_;\n+};\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const Expression& expr,\n+                                            const RecordBatch& batch) const {\n+  return VisitExpression(expr, Impl{this, batch});\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const ScalarExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  return Datum(expr.value());\n+}\n+\n+Result<Datum> DepthFirstEvaluator::Evaluate(const FieldExpression& expr,\n+                                            const RecordBatch& batch) const {\n+  auto column = batch.GetColumnByName(expr.name());\n+  if (column == nullptr) {\n \n Review comment:\n   This isn't necessarily a failure; the expression may be applied to record batches with a missing column (and caught by a to-be-implemented coalesce expression). As an alternative we could require that record batches already be augmented with null columns at this point\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T14:58:09.843+0000",
                    "updated": "2019-10-11T14:58:09.843+0000",
                    "started": "2019-10-11T14:58:09.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326949",
                    "issueId": "13259069"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@10516c6d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bb6a35a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18598402[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6eb4820[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16461f38[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1020f77f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@440d18ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@187bf204[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ee281ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@296e0240[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@588adf0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@42248497[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 11 18:24:13 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-11T18:24:12.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6711/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-26T14:23:39.000+0000",
        "updated": "2019-10-11T18:24:13.000+0000",
        "timeoriginalestimate": null,
        "description": "There is unnecessary boilerplate required when using the Filter/Expression classes. Filter is no longer necessary; it (and FilterVector) can be replaced with Expression. Expression is sufficiently general that it can be subclassed to provide any custom functionality which would have been added through a GenericFilter (add some tests for this).\r\n\r\nAdditionally rows within RecordBatches yielded from a scan are not currently filtered using Expression::Evaluate(). (Add tests ensuring both row filtering and pruning obey Kleene logic)\r\n\r\nAdd some comments on the mechanism of {{Assume()}} too, and refactor it not to return a Result (its failure modes are covered by {{Validate()}})",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Consolidate Filter and Expression classes",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13259069/comment/16949700",
                    "id": "16949700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5594\n[https://github.com/apache/arrow/pull/5594]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-11T18:24:13.036+0000",
                    "updated": "2019-10-11T18:24:13.036+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z071vc:",
        "customfield_12314139": null
    }
}