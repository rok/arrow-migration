{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13064305",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305",
    "key": "ARROW-840",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12563266",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12563266",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13239533",
                    "key": "ARROW-5610",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239533",
                    "fields": {
                        "summary": "[Python] Define extension type API in Python to \"receive\" or \"send\" a foreign extension type",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12562990",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12562990",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13151095",
                    "key": "ARROW-2428",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151095",
                    "fields": {
                        "summary": "[Python]\u00a0Add API to map Arrow types (including extension types) to pandas ExtensionArray instances for to_pandas conversions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-840/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/258875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T16:43:08.704+0000",
                    "updated": "2019-06-12T16:43:08.704+0000",
                    "started": "2019-06-12T16:43:08.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258875",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/258879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501360502\n \n \n   @wesm You may want to give opinions on the general design before I finish this PR.\r\n   \r\n   Note that we can't store a strong reference to the Python type from the C++ ExtensionType, as that would create an unreclaimable reference cycle between Python and C++. So instead the C++ ExtensionType stores a weak reference to the Python type, as well as a serialized string to reconstruct the Python type if it disappears. This forces the Python type to implement `__reduce__` (serialization is done by pickling).\r\n   Additionally, there's some subtlely around two-step initialization because we need to link objects in both directions.\r\n   \r\n   You may also want to read the tests to check if the API looks reasonable to you.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T16:48:39.090+0000",
                    "updated": "2019-06-12T16:48:39.090+0000",
                    "started": "2019-06-12T16:48:39.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258879",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/258920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501377026\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4532?src=pr&el=h1) Report\n   > Merging [#4532](https://codecov.io/gh/apache/arrow/pull/4532?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/ac4a9ef1096128a1a4b563eaf83f1503e1db953f?src=pr&el=desc) will **decrease** coverage by `12.8%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4532/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4532?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #4532       +/-   ##\n   ===========================================\n   - Coverage   88.15%   75.34%   -12.81%     \n   ===========================================\n     Files         852       56      -796     \n     Lines      106398     3192   -103206     \n     Branches     1253        0     -1253     \n   ===========================================\n   - Hits        93794     2405    -91389     \n   + Misses      12359      787    -11572     \n   + Partials      245        0      -245\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4532?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/arrow/csv/chunker-test.cc](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY2h1bmtlci10ZXN0LmNj) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/arrow/array/builder\\_decimal.cc](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS9idWlsZGVyX2RlY2ltYWwuY2M=) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | [cpp/src/arrow/util/int-util-test.cc](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2ludC11dGlsLXRlc3QuY2M=) | | |\n   | [cpp/src/arrow/python/io.cc](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vaW8uY2M=) | | |\n   | [python/pyarrow/hdfs.py](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaGRmcy5weQ==) | | |\n   | ... and [779 more](https://codecov.io/gh/apache/arrow/pull/4532/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4532?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4532?src=pr&el=footer). Last update [ac4a9ef...998f6f2](https://codecov.io/gh/apache/arrow/pull/4532?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T17:29:50.359+0000",
                    "updated": "2019-06-12T17:29:50.359+0000",
                    "started": "2019-06-12T17:29:50.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258920",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/258982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#discussion_r293054107\n \n \n\n ##########\n File path: cpp/src/arrow/python/extension_type.cc\n ##########\n @@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+\n+#include \"arrow/python/extension_type.h\"\n+#include \"arrow/python/helpers.h\"\n+#include \"arrow/python/pyarrow.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace py {\n+\n+namespace {\n+\n+// Serialize a Python ExtensionType instance\n+Status SerializeExtInstance(PyObject* type_instance, std::string* out) {\n+  OwnedRef res(PyObject_CallMethod(type_instance, \"__arrow_ext_serialize__\", nullptr));\n+  if (!res) {\n+    return ConvertPyError();\n+  }\n+  if (!PyBytes_Check(res.obj())) {\n+    return Status::TypeError(\n+        \"__arrow_ext_serialize__ should return bytes object, \"\n+        \"got \",\n+        internal::PyObject_StdStringRepr(res.obj()));\n+  }\n+  *out = internal::PyBytes_AsStdString(res.obj());\n+  return Status::OK();\n+}\n+\n+// Deserialize a Python ExtensionType instance\n+PyObject* DeserializeExtInstance(PyObject* type_class,\n+                                 std::shared_ptr<DataType> storage_type,\n+                                 const std::string& serialized_data) {\n+  OwnedRef storage_ref(wrap_data_type(storage_type));\n+  if (!storage_ref) {\n+    return nullptr;\n+  }\n+  OwnedRef data_ref(PyBytes_FromStringAndSize(\n+      serialized_data.data(), static_cast<Py_ssize_t>(serialized_data.size())));\n+  if (!data_ref) {\n+    return nullptr;\n+  }\n+\n+  return PyObject_CallMethod(type_class, \"__arrow_ext_deserialize__\", \"OO\",\n+                             storage_ref.obj(), data_ref.obj());\n+}\n+\n+}  // namespace\n+\n+static const char* kExtensionName = \"arrow.py_extension_type\";\n \n Review comment:\n   Since registering a type happens based on the name, does that mean that from the C++ point of view, there can only be a single PyExtensionType? \r\n   But then it are different instances of this class that ensure you can have different types? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T18:23:27.315+0000",
                    "updated": "2019-06-12T18:23:27.315+0000",
                    "started": "2019-06-12T18:23:27.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258982",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/258983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#discussion_r293037546\n \n \n\n ##########\n File path: cpp/src/arrow/python/extension_type.cc\n ##########\n @@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+\n+#include \"arrow/python/extension_type.h\"\n+#include \"arrow/python/helpers.h\"\n+#include \"arrow/python/pyarrow.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace py {\n+\n+namespace {\n+\n+// Serialize a Python ExtensionType instance\n+Status SerializeExtInstance(PyObject* type_instance, std::string* out) {\n+  OwnedRef res(PyObject_CallMethod(type_instance, \"__arrow_ext_serialize__\", nullptr));\n+  if (!res) {\n+    return ConvertPyError();\n+  }\n+  if (!PyBytes_Check(res.obj())) {\n+    return Status::TypeError(\n+        \"__arrow_ext_serialize__ should return bytes object, \"\n+        \"got \",\n+        internal::PyObject_StdStringRepr(res.obj()));\n+  }\n+  *out = internal::PyBytes_AsStdString(res.obj());\n+  return Status::OK();\n+}\n+\n+// Deserialize a Python ExtensionType instance\n+PyObject* DeserializeExtInstance(PyObject* type_class,\n+                                 std::shared_ptr<DataType> storage_type,\n+                                 const std::string& serialized_data) {\n+  OwnedRef storage_ref(wrap_data_type(storage_type));\n+  if (!storage_ref) {\n+    return nullptr;\n+  }\n+  OwnedRef data_ref(PyBytes_FromStringAndSize(\n+      serialized_data.data(), static_cast<Py_ssize_t>(serialized_data.size())));\n+  if (!data_ref) {\n+    return nullptr;\n+  }\n+\n+  return PyObject_CallMethod(type_class, \"__arrow_ext_deserialize__\", \"OO\",\n+                             storage_ref.obj(), data_ref.obj());\n+}\n+\n+}  // namespace\n+\n+static const char* kExtensionName = \"arrow.py_extension_type\";\n \n Review comment:\n   I assume this needs to be a constant, or is there a possibility to specify a custom name in the python class?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T18:23:32.079+0000",
                    "updated": "2019-06-12T18:23:32.079+0000",
                    "started": "2019-06-12T18:23:32.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "258983",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259139",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#discussion_r293147936\n \n \n\n ##########\n File path: cpp/src/arrow/python/extension_type.cc\n ##########\n @@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+\n+#include \"arrow/python/extension_type.h\"\n+#include \"arrow/python/helpers.h\"\n+#include \"arrow/python/pyarrow.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace py {\n+\n+namespace {\n+\n+// Serialize a Python ExtensionType instance\n+Status SerializeExtInstance(PyObject* type_instance, std::string* out) {\n+  OwnedRef res(PyObject_CallMethod(type_instance, \"__arrow_ext_serialize__\", nullptr));\n+  if (!res) {\n+    return ConvertPyError();\n+  }\n+  if (!PyBytes_Check(res.obj())) {\n+    return Status::TypeError(\n+        \"__arrow_ext_serialize__ should return bytes object, \"\n+        \"got \",\n+        internal::PyObject_StdStringRepr(res.obj()));\n+  }\n+  *out = internal::PyBytes_AsStdString(res.obj());\n+  return Status::OK();\n+}\n+\n+// Deserialize a Python ExtensionType instance\n+PyObject* DeserializeExtInstance(PyObject* type_class,\n+                                 std::shared_ptr<DataType> storage_type,\n+                                 const std::string& serialized_data) {\n+  OwnedRef storage_ref(wrap_data_type(storage_type));\n+  if (!storage_ref) {\n+    return nullptr;\n+  }\n+  OwnedRef data_ref(PyBytes_FromStringAndSize(\n+      serialized_data.data(), static_cast<Py_ssize_t>(serialized_data.size())));\n+  if (!data_ref) {\n+    return nullptr;\n+  }\n+\n+  return PyObject_CallMethod(type_class, \"__arrow_ext_deserialize__\", \"OO\",\n+                             storage_ref.obj(), data_ref.obj());\n+}\n+\n+}  // namespace\n+\n+static const char* kExtensionName = \"arrow.py_extension_type\";\n \n Review comment:\n   Registering a _type class_ happens based on the name, but you can have multiple instances with distinct serializations. So it shouldn't be a problem (though I must still add tests for this).\r\n   \r\n   Note: registering a type class happens through a dummy instance...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-12T22:47:48.723+0000",
                    "updated": "2019-06-12T22:47:48.723+0000",
                    "started": "2019-06-12T22:47:48.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259139",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on issue #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501611318\n \n \n   > Registering a type class happens based on the name, but you can have multiple instances with distinct serializations. So it shouldn't be a problem (though I must still add tests for this).\r\n   \r\n   (trying to think through an application here) So assume that I want to implement an extension type from Python and send it through IPC to another application. What the other application sees is the custom_metadata's 'ARROW:extension:name' and 'ARROW:extension:metadata' keys. AFAIU, for extension types created from python, the name will always be \"arrow.py_extension_type\", and the metadata is the serialized representation (which is the pickled class, so python specific). But is there then a way for the other application to know what kind of extension type it is? For example, to use the tests example, to know that it is representing a UUID?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T08:48:58.400+0000",
                    "updated": "2019-06-13T08:48:58.400+0000",
                    "started": "2019-06-13T08:48:58.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259366",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on issue #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501611318\n \n \n   > Registering a type class happens based on the name, but you can have multiple instances with distinct serializations. So it shouldn't be a problem (though I must still add tests for this).\r\n   \r\n   (trying to think through an application here) So assume that I want to implement an extension type from Python and send it through IPC to another application. What the other application sees is the custom_metadata's 'ARROW:extension:name' and 'ARROW:extension:metadata' keys. AFAIU, for extension types created from python, the name will always be \"arrow.py_extension_type\", and the metadata is the serialized representation (which is the pickled class, so python specific). But is there then a way for the other application to know what kind of extension type it is? For example, to use the tests example, to know that it is representing a UUID? \r\n   Or will that only be possible if you actually implement an extension type in C++ and wrap that from python?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T08:49:26.655+0000",
                    "updated": "2019-06-13T08:49:26.655+0000",
                    "started": "2019-06-13T08:49:26.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259367",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4532: [WIP] ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501612579\n \n \n   > Or will that only be possible if you actually implement an extension type in C++ and wrap that from python?\r\n   \r\n   This, or if you read the data from Python which should give you out the right ExtensionType subclass (assuming the subclass is reachable by unpickling, otherwise it will fail).\r\n   I don't know if this limitation is a problem. @wesm \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T08:52:32.273+0000",
                    "updated": "2019-06-13T08:52:32.273+0000",
                    "started": "2019-06-13T08:52:32.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259370",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501726660\n \n \n   This PR doesn't test using C++ extension types from Python. We would have to expose a C++ extension type from one of our DLLs... Should we have a specific Cython extension linking with `libarrow_testing` (that would require a `FindArrowTesting.cmake`... yuck :-/)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T14:27:12.082+0000",
                    "updated": "2019-06-13T14:27:12.082+0000",
                    "started": "2019-06-13T14:27:12.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259630",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501728000\n \n \n   Yeah, I was thinking that we should move the couple of extension types that we have to libarrow_testing and then link to these from Cython. If you'd like me to set that up I'm OK to do it, it also gives us a path for exposing other testing utilities that don't need to go in libarrow\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T14:30:12.716+0000",
                    "updated": "2019-06-13T14:30:12.716+0000",
                    "started": "2019-06-13T14:30:12.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259636",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501731431\n \n \n   Perhaps we can address C++-extension-types-from-Python in a separate PR to keep the scope manageable\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T14:38:13.778+0000",
                    "updated": "2019-06-13T14:38:13.778+0000",
                    "started": "2019-06-13T14:38:13.777+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259643",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501731702\n \n \n   > If you'd like me to set that up I'm OK to do it, it also gives us a path for exposing other testing utilities that don't need to go in libarrow\r\n   \r\n   As you prefer. I can also do it myself through copy-paste.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T14:38:52.479+0000",
                    "updated": "2019-06-13T14:38:52.479+0000",
                    "started": "2019-06-13T14:38:52.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259645",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501731744\n \n \n   Looking at this now to give feedback on the issues you cited\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T14:38:56.831+0000",
                    "updated": "2019-06-13T14:38:56.831+0000",
                    "started": "2019-06-13T14:38:56.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259646",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#discussion_r293415916\n \n \n\n ##########\n File path: cpp/src/arrow/extension_type.cc\n ##########\n @@ -41,7 +45,21 @@ std::string ExtensionType::ToString() const {\n \n std::string ExtensionType::name() const { return \"extension\"; }\n \n+ExtensionArray::ExtensionArray(const std::shared_ptr<ArrayData>& data) { SetData(data); }\n+\n+ExtensionArray::ExtensionArray(const std::shared_ptr<DataType>& type,\n+                               const std::shared_ptr<Array>& storage) {\n+  DCHECK_EQ(type->id(), Type::EXTENSION);\n+  DCHECK(\n+      storage->type()->Equals(*checked_cast<const ExtensionType&>(*type).storage_type()));\n+  auto data = storage->data()->Copy();\n+  // XXX This pointer is reverted below in SetData()...\n \n Review comment:\n   Definitely a bit awkward, this can be refactored later, though\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T15:09:37.238+0000",
                    "updated": "2019-06-13T15:09:37.238+0000",
                    "started": "2019-06-13T15:09:37.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259676",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#discussion_r293427322\n \n \n\n ##########\n File path: cpp/src/arrow/python/extension_type.cc\n ##########\n @@ -0,0 +1,196 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+\n+#include \"arrow/python/extension_type.h\"\n+#include \"arrow/python/helpers.h\"\n+#include \"arrow/python/pyarrow.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace py {\n+\n+namespace {\n+\n+// Serialize a Python ExtensionType instance\n+Status SerializeExtInstance(PyObject* type_instance, std::string* out) {\n+  OwnedRef res(PyObject_CallMethod(type_instance, \"__arrow_ext_serialize__\", nullptr));\n+  if (!res) {\n+    return ConvertPyError();\n+  }\n+  if (!PyBytes_Check(res.obj())) {\n+    return Status::TypeError(\n+        \"__arrow_ext_serialize__ should return bytes object, \"\n+        \"got \",\n+        internal::PyObject_StdStringRepr(res.obj()));\n+  }\n+  *out = internal::PyBytes_AsStdString(res.obj());\n+  return Status::OK();\n+}\n+\n+// Deserialize a Python ExtensionType instance\n+PyObject* DeserializeExtInstance(PyObject* type_class,\n+                                 std::shared_ptr<DataType> storage_type,\n+                                 const std::string& serialized_data) {\n+  OwnedRef storage_ref(wrap_data_type(storage_type));\n+  if (!storage_ref) {\n+    return nullptr;\n+  }\n+  OwnedRef data_ref(PyBytes_FromStringAndSize(\n+      serialized_data.data(), static_cast<Py_ssize_t>(serialized_data.size())));\n+  if (!data_ref) {\n+    return nullptr;\n+  }\n+\n+  return PyObject_CallMethod(type_class, \"__arrow_ext_deserialize__\", \"OO\",\n+                             storage_ref.obj(), data_ref.obj());\n+}\n+\n+}  // namespace\n+\n+static const char* kExtensionName = \"arrow.py_extension_type\";\n+\n+PyExtensionType::PyExtensionType(std::shared_ptr<DataType> storage_type, PyObject* typ,\n+                                 PyObject* inst)\n+    : ExtensionType(storage_type), type_class_(typ), type_instance_(inst) {}\n+\n+std::string PyExtensionType::extension_name() const { return kExtensionName; }\n+\n+bool PyExtensionType::ExtensionEquals(const ExtensionType& other) const {\n+  PyAcquireGIL lock;\n+\n+  if (other.extension_name() != extension_name()) {\n+    return false;\n+  }\n+  const auto& other_ext = checked_cast<const PyExtensionType&>(other);\n+  int res = -1;\n+  if (!type_instance_) {\n+    if (other_ext.type_instance_) {\n+      return false;\n+    }\n+    // Compare Python types\n+    res = PyObject_RichCompareBool(type_class_.obj(), other_ext.type_class_.obj(), Py_EQ);\n+  } else {\n+    if (!other_ext.type_instance_) {\n+      return false;\n+    }\n+    // Compare Python instances\n+    OwnedRef left(GetInstance());\n+    OwnedRef right(other_ext.GetInstance());\n+    if (!left || !right) {\n+      goto error;\n+    }\n+    res = PyObject_RichCompareBool(left.obj(), right.obj(), Py_EQ);\n+  }\n+  if (res == -1) {\n+    goto error;\n+  }\n+  return res == 1;\n+\n+error:\n+  // Cannot propagate error\n+  PyErr_WriteUnraisable(nullptr);\n+  return false;\n+}\n+\n+std::shared_ptr<Array> PyExtensionType::MakeArray(std::shared_ptr<ArrayData> data) const {\n+  DCHECK_EQ(data->type->id(), Type::EXTENSION);\n+  DCHECK_EQ(kExtensionName,\n+            checked_cast<const ExtensionType&>(*data->type).extension_name());\n+  return std::make_shared<ExtensionArray>(data);\n+}\n+\n+std::string PyExtensionType::Serialize() const {\n+  DCHECK(type_instance_);\n+  return serialized_;\n+}\n+\n+Status PyExtensionType::Deserialize(std::shared_ptr<DataType> storage_type,\n+                                    const std::string& serialized_data,\n+                                    std::shared_ptr<DataType>* out) const {\n+  PyAcquireGIL lock;\n+\n+  if (import_pyarrow()) {\n+    return ConvertPyError();\n+  }\n+  OwnedRef res(DeserializeExtInstance(type_class_.obj(), storage_type, serialized_data));\n+  if (!res) {\n+    return ConvertPyError();\n+  }\n+  return unwrap_data_type(res.obj(), out);\n+}\n+\n+PyObject* PyExtensionType::GetInstance() const {\n+  if (!type_instance_) {\n+    PyErr_SetString(PyExc_TypeError, \"Not an instance\");\n+    return nullptr;\n+  }\n+  DCHECK(PyWeakref_CheckRef(type_instance_.obj()));\n+  PyObject* inst = PyWeakref_GET_OBJECT(type_instance_.obj());\n+  if (inst != Py_None) {\n+    // Cached instance still alive\n+    Py_INCREF(inst);\n+    return inst;\n+  } else {\n+    // Must reconstruct from serialized form\n+    // XXX cache again?\n \n Review comment:\n   I guess in this esoteric scenario the performance implications are not that important\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T15:09:42.215+0000",
                    "updated": "2019-06-13T15:09:42.215+0000",
                    "started": "2019-06-13T15:09:42.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259677",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#discussion_r293419676\n \n \n\n ##########\n File path: python/pyarrow/tests/test_extension_type.py\n ##########\n @@ -0,0 +1,219 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import pickle\n+import weakref\n+\n+import pyarrow as pa\n+\n+import pytest\n+\n+\n+class UuidType(pa.ExtensionType):\n+\n+    def __init__(self):\n+        pa.ExtensionType.__init__(self, pa.binary(16))\n+\n+    def __reduce__(self):\n+        return UuidType, ()\n+\n+\n+class ParamExtType(pa.ExtensionType):\n+\n+    def __init__(self, width):\n+        self.width = width\n+        pa.ExtensionType.__init__(self, pa.binary(width))\n+\n+    def __reduce__(self):\n+        return ParamExtType, (self.width,)\n+\n+\n+def ipc_write_batch(batch):\n+    stream = pa.BufferOutputStream()\n+    writer = pa.RecordBatchStreamWriter(stream, batch.schema)\n+    writer.write_batch(batch)\n+    writer.close()\n+    return stream.getvalue()\n+\n+\n+def ipc_read_batch(buf):\n+    reader = pa.RecordBatchStreamReader(buf)\n+    return reader.read_next_batch()\n+\n+\n+def test_ext_type_basics():\n+    ty = UuidType()\n+    assert ty.extension_name == \"arrow.py_extension_type\"\n+\n+\n+def test_ext_type__lifetime():\n+    ty = UuidType()\n+    wr = weakref.ref(ty)\n+    del ty\n+    assert wr() is None\n+\n+\n+def test_ext_type__storage_type():\n+    ty = UuidType()\n+    assert ty.storage_type == pa.binary(16)\n+    assert ty.__class__ is UuidType\n+    ty = ParamExtType(5)\n+    assert ty.storage_type == pa.binary(5)\n+    assert ty.__class__ is ParamExtType\n+\n+\n+def test_uuid_type_pickle():\n+    for proto in range(0, pickle.HIGHEST_PROTOCOL + 1):\n+        ty = UuidType()\n+        ser = pickle.dumps(ty, protocol=proto)\n+        del ty\n+        ty = pickle.loads(ser)\n+        wr = weakref.ref(ty)\n+        assert ty.extension_name == \"arrow.py_extension_type\"\n+        del ty\n+        assert wr() is None\n+\n+\n+def test_ext_type_equality():\n+    a = ParamExtType(5)\n+    b = ParamExtType(6)\n+    c = ParamExtType(6)\n+    assert a != b\n+    assert b == c\n+    d = UuidType()\n+    e = UuidType()\n+    assert a != d\n+    assert d == e\n+\n+\n+def test_ext_array_basics():\n+    ty = ParamExtType(3)\n+    storage = pa.array([b\"foo\", b\"bar\"], type=pa.binary(3))\n+    arr = pa.ExtensionArray.from_storage(ty, storage)\n+    arr.validate()\n+    assert arr.type is ty\n+    assert arr.storage.equals(storage)\n+\n+\n+def test_ext_array_lifetime():\n+    ty = ParamExtType(3)\n+    storage = pa.array([b\"foo\", b\"bar\"], type=pa.binary(3))\n+    arr = pa.ExtensionArray.from_storage(ty, storage)\n+\n+    refs = [weakref.ref(obj) for obj in (ty, arr, storage)]\n+    del ty, storage, arr\n+    for ref in refs:\n+        assert ref() is None\n+\n+\n+def test_ext_array_errors():\n+    ty = ParamExtType(4)\n+    storage = pa.array([b\"foo\", b\"bar\"], type=pa.binary(3))\n+    with pytest.raises(TypeError, match=\"Incompatible storage type\"):\n+        pa.ExtensionArray.from_storage(ty, storage)\n+\n+\n+def test_ext_array_equality():\n+    storage1 = pa.array([b\"0123456789abcdef\"], type=pa.binary(16))\n+    storage2 = pa.array([b\"0123456789abcdef\"], type=pa.binary(16))\n+    storage3 = pa.array([], type=pa.binary(16))\n+    ty1 = UuidType()\n+    ty2 = ParamExtType(16)\n+\n+    a = pa.ExtensionArray.from_storage(ty1, storage1)\n+    b = pa.ExtensionArray.from_storage(ty1, storage2)\n+    assert a.equals(b)\n+    c = pa.ExtensionArray.from_storage(ty1, storage3)\n+    assert not a.equals(c)\n+    d = pa.ExtensionArray.from_storage(ty2, storage1)\n+    assert not a.equals(d)\n+    e = pa.ExtensionArray.from_storage(ty2, storage2)\n+    assert d.equals(e)\n+    f = pa.ExtensionArray.from_storage(ty2, storage3)\n+    assert not d.equals(f)\n+\n+\n+def test_ext_array_pickling():\n+    for proto in range(0, pickle.HIGHEST_PROTOCOL + 1):\n+        ty = ParamExtType(3)\n+        storage = pa.array([b\"foo\", b\"bar\"], type=pa.binary(3))\n+        arr = pa.ExtensionArray.from_storage(ty, storage)\n+        ser = pickle.dumps(arr, protocol=proto)\n+        del ty, storage, arr\n+        arr = pickle.loads(ser)\n+        arr.validate()\n+        assert isinstance(arr, pa.ExtensionArray)\n+        assert arr.type == ParamExtType(3)\n+        assert arr.type.storage_type == pa.binary(3)\n+        assert arr.storage.type == pa.binary(3)\n+        assert arr.storage.to_pylist() == [b\"foo\", b\"bar\"]\n+\n+\n+def example_batch():\n+    ty = ParamExtType(3)\n+    storage = pa.array([b\"foo\", b\"bar\"], type=pa.binary(3))\n+    arr = pa.ExtensionArray.from_storage(ty, storage)\n+    return pa.RecordBatch.from_arrays([arr], [\"exts\"])\n+\n+\n+def check_example_batch(batch):\n+    arr = batch.column(0)\n+    assert isinstance(arr, pa.ExtensionArray)\n+    assert arr.type.storage_type == pa.binary(3)\n+    assert arr.storage.to_pylist() == [b\"foo\", b\"bar\"]\n+    return arr\n+\n+\n+def test_ipc():\n+    batch = example_batch()\n+    buf = ipc_write_batch(batch)\n+    del batch\n+\n+    batch = ipc_read_batch(buf)\n+    arr = check_example_batch(batch)\n+    assert arr.type == ParamExtType(3)\n+\n+\n+def test_ipc_unknown_type():\n \n Review comment:\n   We'll have to think about what we want to do for unrecognized C++ extension types -- I can see arguments for returning \"unboxed\" storage versus a `UnknownNativeExtensionArray` or similar\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T15:09:42.562+0000",
                    "updated": "2019-06-13T15:09:42.562+0000",
                    "started": "2019-06-13T15:09:42.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259678",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501748762\n \n \n   > As one high level matter, it is currently not possible to subclass pyarrow.ExtensionArray and endow it with custom logic. \r\n   \r\n   I think that can be deferred to a follow-up PR. It shouldn't it be too difficult to implement.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T15:18:48.750+0000",
                    "updated": "2019-06-13T15:18:48.750+0000",
                    "started": "2019-06-13T15:18:48.750+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259687",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501749745\n \n \n   @wesm How about the extension name question that @jorisvandenbossche raised above?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T15:21:13.226+0000",
                    "updated": "2019-06-13T15:21:13.226+0000",
                    "started": "2019-06-13T15:21:13.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259689",
                    "issueId": "13064305"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/worklog/259732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4532: ARROW-840: [Python] Expose extension types\nURL: https://github.com/apache/arrow/pull/4532#issuecomment-501777124\n \n \n   I think there only needs to be one `PyExtensionType` instance because it's ultimately dispatching to `pickle.dumps` / `pickle.loads`, do I have that right? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-13T16:28:49.528+0000",
                    "updated": "2019-06-13T16:28:49.528+0000",
                    "started": "2019-06-13T16:28:49.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "259732",
                    "issueId": "13064305"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@45119566[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f287d67[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ae1f0b3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@16fe6fcd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4887a411[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5cf9b8fc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1958afb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7c3d2b59[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9efbfe3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@18c0c87a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@443991b5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@514b1d88[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jun 14 12:53:47 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-14T12:53:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-840/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-04-16T23:38:46.000+0000",
        "updated": "2019-06-14T13:22:17.000+0000",
        "timeoriginalestimate": null,
        "description": "The user will provide:\n\n* Data type subclass that can indicate the physical storage type\n* \"get state\" and \"set state\" functions for serializing custom metadata to bytes\n* An optional function for \"boxing\" scalar values from the physical array storage\n\nInternally, this will build on an analogous C++ API for defining user data types",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Provide Python API for creating user-defined data types that can survive Arrow IPC",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/15970558",
                    "id": "15970558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=robertnishihara",
                        "name": "robertnishihara",
                        "key": "robertnishihara",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Robert Nishihara",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Is \"user-defined\" data types intended to include arbitrary custom Python classes?\n\n{code}\nclass Foo(object):\n  def __init__(self):\n    ...\n{code}\n\nFor example, if we wish to pass a {{Foo}} object through Arrow IPC, what would the custom metadata be? Would it be the pickled class definition? Would it be something like the string {{\"Foo\"}}?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=robertnishihara",
                        "name": "robertnishihara",
                        "key": "robertnishihara",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Robert Nishihara",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-04-16T23:55:54.607+0000",
                    "updated": "2017-04-16T23:55:54.607+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/15970570",
                    "id": "15970570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yeah, the idea is to embed basically anything that can be serialized to and from a bytestring. So you could use pickle to do the metadata serialization, but it would go into the IPC metadata as opaque bytes in https://github.com/apache/arrow/blob/master/format/Schema.fbs#L250",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-04-17T01:02:14.072+0000",
                    "updated": "2017-04-17T01:02:14.072+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16805966",
                    "id": "16805966",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This is within reach now because of the C++ extension types",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-03-30T20:22:44.385+0000",
                    "updated": "2019-03-30T20:22:44.385+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16861428",
                    "id": "16861428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~jorisvandenbossche] [~pitrou] what do you think is the path ahead for this project? There are two distinct areas of work:\r\n\r\n* Defining extension types in Python and providing Python exposure for already C++-defined types\r\n* Bridging between extension types (which may be C++ or Python-defined) and pandas\r\n\r\nThis issue ARROW-840 covers the former but not the latter. It would be nice to have this feature available in 0.14.0. I'm concerned from today's date (June 11) that we may miss the window for 0.14.0 though",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-11T20:00:02.029+0000",
                    "updated": "2019-06-11T20:00:02.029+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16861454",
                    "id": "16861454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "It looks the former should be reasonably doable. I have no idea about the latter.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-11T20:18:56.730+0000",
                    "updated": "2019-06-11T20:18:56.730+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16861459",
                    "id": "16861459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think it becomes a pure Python exercise at that point, shouldn't really be any C++ development required. It looks like it's already ARROW-2428",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-11T20:20:59.681+0000",
                    "updated": "2019-06-11T20:20:59.681+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16861465",
                    "id": "16861465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Actually, I'm wrong about that, because the mapped types have to be serialized in arrow_to_pandas.cc, so there is some C++ development work to do there",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-11T20:23:24.601+0000",
                    "updated": "2019-06-11T20:23:24.601+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16861515",
                    "id": "16861515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "So the first bullet point (enabling \"defining extension types in Python) requires to implement a C++ PythonExtensionType that can translate python function callbacks to the actual ExtensionType methods?\r\n\r\nI looked into that a bit some time ago, and I think it is above my current C++ skill level (at least to start it). [~pitrou] is that something that you might want to look at? \r\nOnce the basics are there, I am very much interested to further help with this and do further work to enable pandas ExtensionArray interaction.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2019-06-11T21:32:34.668+0000",
                    "updated": "2019-06-11T21:32:34.668+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16862115",
                    "id": "16862115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Just a heads up that I'm working on the first point.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-12T13:41:57.726+0000",
                    "updated": "2019-06-12T13:41:57.726+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16862143",
                    "id": "16862143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Cool -- that's this JIRA so I assigned it to you",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-12T14:13:53.705+0000",
                    "updated": "2019-06-12T14:13:53.705+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13064305/comment/16864028",
                    "id": "16864028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4532\n[https://github.com/apache/arrow/pull/4532]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-06-14T12:53:47.131+0000",
                    "updated": "2019-06-14T12:53:47.131+0000"
                }
            ],
            "maxResults": 11,
            "total": 11,
            "startAt": 0
        },
        "customfield_12311820": "0|i3dodb:",
        "customfield_12314139": null
    }
}