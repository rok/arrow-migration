{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13170644",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644",
    "key": "ARROW-2806",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2806/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy opened a new pull request #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270\n \n \n   I'll take care of the cast issues mentioned in the ticket in a separate PR, already opened https://issues.apache.org/jira/browse/ARROW-2854 for them.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-15T14:20:41.899+0000",
                    "updated": "2018-07-15T14:20:41.899+0000",
                    "started": "2018-07-15T14:20:41.898+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123408",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#discussion_r202622961\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -523,18 +539,37 @@ class TimestampConverter\n   TimeUnit::type unit_;\n };\n \n+template <bool from_pandas = true>\n class Float16Converter\n-    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter> {\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<from_pandas>> {\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n     npy_half val;\n     RETURN_NOT_OK(PyFloat_AsHalf(obj, &val));\n-    return typed_builder_->Append(val);\n+    return this->typed_builder_->Append(val);\n+  }\n+};\n+\n+template <>\n+class Float16Converter<false>\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) override {\n \n Review comment:\n   It's a bit of a pity that we're repeating a lot of code here (both `AppendSingle` and the type-specific `AppendItem` implementations). C++ doesn't help us, but is there a simple way to avoid that repetition (perhaps inheriting some mixins)?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-16T09:40:42.866+0000",
                    "updated": "2018-07-16T09:40:42.866+0000",
                    "started": "2018-07-16T09:40:42.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123554",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#discussion_r202624387\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -310,13 +344,46 @@ def test_sequence_double():\n \n @parametrize_with_iterable_types\n @pytest.mark.parametrize(\"np_scalar\", [np.float16, np.float32, np.float64])\n-def test_sequence_numpy_double(seq, np_scalar):\n-    data = [np_scalar(1.5), np_scalar(1), None, np_scalar(2.5), None, None]\n-    arr = pa.array(seq(data))\n+@pytest.mark.parametrize(\"from_pandas\", [True, False])\n+def test_sequence_numpy_double(seq, np_scalar, from_pandas):\n+    data = [np_scalar(1.5), np_scalar(1), None, np_scalar(2.5), None, np.nan]\n+    arr = pa.array(seq(data), from_pandas=from_pandas)\n     assert len(arr) == 6\n-    assert arr.null_count == 3\n+    if from_pandas:\n+        assert arr.null_count == 3\n+    else:\n+        assert arr.null_count == 2\n     assert arr.type == pa.float64()\n-    assert arr.to_pylist() == data\n+\n+    assert arr.to_pylist()[:4] == data[:4]\n+    if from_pandas:\n+        assert arr.to_pylist()[5] is None\n+    else:\n+        assert np.isnan(arr.to_pylist()[5])\n+\n+\n+@pytest.mark.parametrize(\"from_pandas\", [True, False])\n+@pytest.mark.parametrize(\"inner_seq\", [np.array, list])\n+def test_ndarray_nested_numpy_double(from_pandas, inner_seq):\n+    # ARROW-2806\n+    data = np.array([\n+        inner_seq([1., 2.]),\n+        inner_seq([1., 2., 3.]),\n+        inner_seq([np.nan]),\n+        None\n+    ])\n+    arr = pa.array(data, from_pandas=from_pandas)\n+    assert len(arr) == 4\n+    assert arr.null_count == 1\n+    assert arr.type == pa.list_(pa.float64())\n+    if from_pandas:\n+        assert arr.to_pylist() == [[1.0, 2.0], [1.0, 2.0, 3.0], [None], None]\n+    else:\n+        assert arr.to_pylist()[:2] == [[1.0, 2.0], [1.0, 2.0, 3.0]]\n+        assert len(arr.to_pylist()[2]) == 1\n \n Review comment:\n   I think you can simply use `np.testing.assert_equal`:\r\n   ```python\r\n   >>> np.testing.assert_equal([[1.0, np.nan]], [[1.0, np.nan]])\r\n   >>> np.testing.assert_equal([[1.0, 2.0]], [[1.0, np.nan]])\r\n   [...]\r\n   AssertionError: \r\n   Items are not equal:\r\n   item=1\r\n   item=0\r\n   \r\n    ACTUAL: 2.0\r\n    DESIRED: nan\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-16T09:40:42.901+0000",
                    "updated": "2018-07-16T09:40:42.901+0000",
                    "started": "2018-07-16T09:40:42.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123555",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#issuecomment-405195507\n \n \n   Also, looks like there's a C++ linting failure.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-16T09:41:10.085+0000",
                    "updated": "2018-07-16T09:41:10.085+0000",
                    "started": "2018-07-16T09:41:10.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123556",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#discussion_r202756748\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -523,18 +539,37 @@ class TimestampConverter\n   TimeUnit::type unit_;\n };\n \n+template <bool from_pandas = true>\n class Float16Converter\n-    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter> {\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<from_pandas>> {\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n     npy_half val;\n     RETURN_NOT_OK(PyFloat_AsHalf(obj, &val));\n-    return typed_builder_->Append(val);\n+    return this->typed_builder_->Append(val);\n+  }\n+};\n+\n+template <>\n+class Float16Converter<false>\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) override {\n \n Review comment:\n   Quite possible, I will look more closely and see if any ideas\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-16T17:01:53.212+0000",
                    "updated": "2018-07-16T17:01:53.212+0000",
                    "started": "2018-07-16T17:01:53.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123704",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#issuecomment-405316039\n \n \n   I will review this today also, thanks for working on this @xhochy \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-16T17:02:22.761+0000",
                    "updated": "2018-07-16T17:02:22.761+0000",
                    "started": "2018-07-16T17:02:22.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123705",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#discussion_r202881799\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -523,18 +539,37 @@ class TimestampConverter\n   TimeUnit::type unit_;\n };\n \n+template <bool from_pandas = true>\n class Float16Converter\n-    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter> {\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<from_pandas>> {\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n     npy_half val;\n     RETURN_NOT_OK(PyFloat_AsHalf(obj, &val));\n-    return typed_builder_->Append(val);\n+    return this->typed_builder_->Append(val);\n+  }\n+};\n+\n+template <>\n+class Float16Converter<false>\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) override {\n \n Review comment:\n   I'm not 100% sure (not being a C++ guru yet) but I think you may to be able to templatize `TypedConverterVisitor::AppendSingle`. Could experiment in a subsequent PR\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-17T03:22:23.578+0000",
                    "updated": "2018-07-17T03:22:23.578+0000",
                    "started": "2018-07-17T03:22:23.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123903",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#issuecomment-405448707\n \n \n   see https://issues.apache.org/jira/browse/ARROW-2865\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-17T03:31:45.958+0000",
                    "updated": "2018-07-17T03:31:45.958+0000",
                    "started": "2018-07-17T03:31:45.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123908",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/123925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#issuecomment-405453264\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2270?src=pr&el=h1) Report\n   > Merging [#2270](https://codecov.io/gh/apache/arrow/pull/2270?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/ebc8dabec52fa03c4424e56edf9a236417b26d84?src=pr&el=desc) will **increase** coverage by `2.41%`.\n   > The diff coverage is `96.49%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2270/graphs/tree.svg?src=pr&width=650&token=LpTCFbqVT1&height=150)](https://codecov.io/gh/apache/arrow/pull/2270?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2270      +/-   ##\n   ==========================================\n   + Coverage    84.2%   86.62%   +2.41%     \n   ==========================================\n     Files         288      232      -56     \n     Lines       44091    41422    -2669     \n   ==========================================\n   - Hits        37127    35881    -1246     \n   + Misses       6933     5541    -1392     \n   + Partials       31        0      -31\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2270?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/python/numpy\\_to\\_arrow.cc](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vbnVtcHlfdG9fYXJyb3cuY2M=) | `89.06% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/array.pxi](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvYXJyYXkucHhp) | `66.04% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_convert\\_builtin.py](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9jb252ZXJ0X2J1aWx0aW4ucHk=) | `99.62% <100%> (+0.02%)` | :arrow_up: |\n   | [cpp/src/arrow/python/python-test.cc](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vcHl0aG9uLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/python/builtin\\_convert.cc](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vYnVpbHRpbl9jb252ZXJ0LmNj) | `90.26% <93.54%> (-1.84%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | | |\n   | [go/arrow/math/float64.go](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0Lmdv) | | |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | | |\n   | [go/arrow/datatype\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbnVtZXJpYy5nZW4uZ28=) | | |\n   | ... and [54 more](https://codecov.io/gh/apache/arrow/pull/2270/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2270?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2270?src=pr&el=footer). Last update [ebc8dab...418f3fb](https://codecov.io/gh/apache/arrow/pull/2270?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-17T04:06:51.647+0000",
                    "updated": "2018-07-17T04:06:51.647+0000",
                    "started": "2018-07-17T04:06:51.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123925",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/124065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on a change in pull request #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270#discussion_r203005214\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -523,18 +539,37 @@ class TimestampConverter\n   TimeUnit::type unit_;\n };\n \n+template <bool from_pandas = true>\n class Float16Converter\n-    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter> {\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<from_pandas>> {\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n     npy_half val;\n     RETURN_NOT_OK(PyFloat_AsHalf(obj, &val));\n-    return typed_builder_->Append(val);\n+    return this->typed_builder_->Append(val);\n+  }\n+};\n+\n+template <>\n+class Float16Converter<false>\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) override {\n \n Review comment:\n   Tried to do this at first but did not find a solution to this. Then I revert to using these more verbose class specifications.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-17T12:44:24.306+0000",
                    "updated": "2018-07-17T12:44:24.306+0000",
                    "started": "2018-07-17T12:44:24.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "124065",
                    "issueId": "13170644"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/worklog/124067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2270: ARROW-2806: [C++/Python]\u00a0More consistent null/nan handling\nURL: https://github.com/apache/arrow/pull/2270\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/cmake_modules/FindClangTools.cmake b/cpp/cmake_modules/FindClangTools.cmake\nindex 7d1d2d19e7..215a5cd94e 100644\n--- a/cpp/cmake_modules/FindClangTools.cmake\n+++ b/cpp/cmake_modules/FindClangTools.cmake\n@@ -86,12 +86,10 @@ if (CLANG_FORMAT_VERSION)\n \n         if (\"${CLANG_FORMAT_BIN}\" STREQUAL \"CLANG_FORMAT_BIN-NOTFOUND\")\n           # binary was still not found, look into Cellar\n-          # TODO: This currently only works for '.0' patch releases as\n-          #       find_program does not support regular expressions\n-          #       in the paths.\n+          file(GLOB CLANG_FORMAT_PATH \"${HOMEBREW_PREFIX}/Cellar/llvm/${CLANG_FORMAT_VERSION}.*\")\n           find_program(CLANG_FORMAT_BIN\n             NAMES clang-format\n-            PATHS \"${HOMEBREW_PREFIX}/Cellar/llvm/${CLANG_FORMAT_VERSION}.0/bin\"\n+            PATHS \"${CLANG_FORMAT_PATH}/bin\"\n                   NO_DEFAULT_PATH\n           )\n         endif()\ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex 49f2b31ab4..f1939611b8 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -427,7 +427,7 @@ class BoolConverter : public TypedConverterVisitor<BooleanBuilder, BoolConverter\n   }\n };\n \n-template <typename IntType>\n+template <typename IntType, bool from_pandas = true>\n class TypedIntConverter\n     : public TypedConverterVisitor<NumericBuilder<IntType>, TypedIntConverter<IntType>> {\n  public:\n@@ -439,6 +439,23 @@ class TypedIntConverter\n   }\n };\n \n+template <typename IntType>\n+class TypedIntConverter<IntType, false>\n+    : public TypedConverterVisitor<NumericBuilder<IntType>,\n+                                   TypedIntConverter<IntType, false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) {\n+    return (obj == Py_None) ? this->AppendNull() : this->AppendItem(obj);\n+  }\n+\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    typename IntType::c_type value;\n+    RETURN_NOT_OK(internal::CIntFromPython(obj, &value));\n+    return this->typed_builder_->Append(value);\n+  }\n+};\n+\n class Date32Converter : public TypedConverterVisitor<Date32Builder, Date32Converter> {\n  public:\n   // Append a non-missing item\n@@ -523,18 +540,37 @@ class TimestampConverter\n   TimeUnit::type unit_;\n };\n \n+template <bool from_pandas = true>\n class Float16Converter\n-    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter> {\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<from_pandas>> {\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n     npy_half val;\n     RETURN_NOT_OK(PyFloat_AsHalf(obj, &val));\n-    return typed_builder_->Append(val);\n+    return this->typed_builder_->Append(val);\n+  }\n+};\n+\n+template <>\n+class Float16Converter<false>\n+    : public TypedConverterVisitor<HalfFloatBuilder, Float16Converter<false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) override {\n+    return (obj == Py_None) ? this->AppendNull() : this->AppendItem(obj);\n+  }\n+\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    npy_half val;\n+    RETURN_NOT_OK(PyFloat_AsHalf(obj, &val));\n+    return this->typed_builder_->Append(val);\n   }\n };\n \n-class Float32Converter : public TypedConverterVisitor<FloatBuilder, Float32Converter> {\n+template <bool from_pandas = true>\n+class Float32Converter\n+    : public TypedConverterVisitor<FloatBuilder, Float32Converter<true>> {\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n@@ -544,7 +580,25 @@ class Float32Converter : public TypedConverterVisitor<FloatBuilder, Float32Conve\n   }\n };\n \n-class DoubleConverter : public TypedConverterVisitor<DoubleBuilder, DoubleConverter> {\n+template <>\n+class Float32Converter<false>\n+    : public TypedConverterVisitor<FloatBuilder, Float32Converter<false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) override {\n+    return (obj == Py_None) ? this->AppendNull() : this->AppendItem(obj);\n+  }\n+\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    float val = static_cast<float>(PyFloat_AsDouble(obj));\n+    RETURN_IF_PYERROR();\n+    return this->typed_builder_->Append(val);\n+  }\n+};\n+\n+template <bool from_pandas = true>\n+class DoubleConverter\n+    : public TypedConverterVisitor<DoubleBuilder, DoubleConverter<true>> {\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n@@ -554,6 +608,22 @@ class DoubleConverter : public TypedConverterVisitor<DoubleBuilder, DoubleConver\n   }\n };\n \n+template <>\n+class DoubleConverter<false>\n+    : public TypedConverterVisitor<DoubleBuilder, DoubleConverter<false>> {\n+ public:\n+  Status AppendSingle(PyObject* obj) override {\n+    return (obj == Py_None) ? this->AppendNull() : this->AppendItem(obj);\n+  }\n+\n+  // Append a non-missing item\n+  Status AppendItem(PyObject* obj) {\n+    double val = PyFloat_AsDouble(obj);\n+    RETURN_IF_PYERROR();\n+    return this->typed_builder_->Append(val);\n+  }\n+};\n+\n class BytesConverter : public TypedConverterVisitor<BinaryBuilder, BytesConverter> {\n  public:\n   // Append a non-missing item\n@@ -581,6 +651,8 @@ class UTF8Converter : public TypedConverterVisitor<StringBuilder, UTF8Converter>\n \n class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n  public:\n+  explicit ListConverter(bool from_pandas) : from_pandas_(from_pandas) {}\n+\n   Status Init(ArrayBuilder* builder) override;\n \n   // Append a non-missing item\n@@ -595,10 +667,13 @@ class ListConverter : public TypedConverterVisitor<ListBuilder, ListConverter> {\n \n  protected:\n   std::unique_ptr<SeqConverter> value_converter_;\n+  bool from_pandas_;\n };\n \n class StructConverter : public TypedConverterVisitor<StructBuilder, StructConverter> {\n  public:\n+  explicit StructConverter(bool from_pandas) : from_pandas_(from_pandas) {}\n+\n   Status Init(ArrayBuilder* builder) override;\n \n   // Append a non-missing item\n@@ -660,6 +735,7 @@ class StructConverter : public TypedConverterVisitor<StructBuilder, StructConver\n   int num_fields_;\n   // Whether we're converting from a sequence of dicts or tuples\n   enum { UNKNOWN, DICTS, TUPLES } source_kind_ = UNKNOWN;\n+  bool from_pandas_;\n };\n \n class DecimalConverter\n@@ -674,29 +750,39 @@ class DecimalConverter\n   }\n };\n \n+#define INT_CONVERTER(ArrowType)                                                     \\\n+  {                                                                                  \\\n+    if (from_pandas) {                                                               \\\n+      return std::unique_ptr<SeqConverter>(new TypedIntConverter<ArrowType, true>);  \\\n+    } else {                                                                         \\\n+      return std::unique_ptr<SeqConverter>(new TypedIntConverter<ArrowType, false>); \\\n+    }                                                                                \\\n+  }\n+\n // Dynamic constructor for sequence converters\n-std::unique_ptr<SeqConverter> GetConverter(const std::shared_ptr<DataType>& type) {\n+std::unique_ptr<SeqConverter> GetConverter(const std::shared_ptr<DataType>& type,\n+                                           bool from_pandas) {\n   switch (type->id()) {\n     case Type::NA:\n       return std::unique_ptr<SeqConverter>(new NullConverter);\n     case Type::BOOL:\n       return std::unique_ptr<SeqConverter>(new BoolConverter);\n     case Type::INT8:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<Int8Type>);\n+      INT_CONVERTER(Int8Type)\n     case Type::INT16:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<Int16Type>);\n+      INT_CONVERTER(Int16Type)\n     case Type::INT32:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<Int32Type>);\n+      INT_CONVERTER(Int32Type)\n     case Type::INT64:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<Int64Type>);\n+      INT_CONVERTER(Int64Type)\n     case Type::UINT8:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<UInt8Type>);\n+      INT_CONVERTER(UInt8Type)\n     case Type::UINT16:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<UInt16Type>);\n+      INT_CONVERTER(UInt16Type)\n     case Type::UINT32:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<UInt32Type>);\n+      INT_CONVERTER(UInt32Type)\n     case Type::UINT64:\n-      return std::unique_ptr<SeqConverter>(new TypedIntConverter<UInt64Type>);\n+      INT_CONVERTER(UInt64Type)\n     case Type::DATE32:\n       return std::unique_ptr<SeqConverter>(new Date32Converter);\n     case Type::DATE64:\n@@ -704,12 +790,27 @@ std::unique_ptr<SeqConverter> GetConverter(const std::shared_ptr<DataType>& type\n     case Type::TIMESTAMP:\n       return std::unique_ptr<SeqConverter>(\n           new TimestampConverter(checked_cast<const TimestampType&>(*type).unit()));\n-    case Type::HALF_FLOAT:\n-      return std::unique_ptr<SeqConverter>(new Float16Converter);\n-    case Type::FLOAT:\n-      return std::unique_ptr<SeqConverter>(new Float32Converter);\n-    case Type::DOUBLE:\n-      return std::unique_ptr<SeqConverter>(new DoubleConverter);\n+    case Type::HALF_FLOAT: {\n+      if (from_pandas) {\n+        return std::unique_ptr<SeqConverter>(new Float16Converter<true>);\n+      } else {\n+        return std::unique_ptr<SeqConverter>(new Float16Converter<false>);\n+      }\n+    }\n+    case Type::FLOAT: {\n+      if (from_pandas) {\n+        return std::unique_ptr<SeqConverter>(new Float32Converter<true>);\n+      } else {\n+        return std::unique_ptr<SeqConverter>(new Float32Converter<false>);\n+      }\n+    }\n+    case Type::DOUBLE: {\n+      if (from_pandas) {\n+        return std::unique_ptr<SeqConverter>(new DoubleConverter<true>);\n+      } else {\n+        return std::unique_ptr<SeqConverter>(new DoubleConverter<false>);\n+      }\n+    }\n     case Type::BINARY:\n       return std::unique_ptr<SeqConverter>(new BytesConverter);\n     case Type::FIXED_SIZE_BINARY:\n@@ -717,9 +818,9 @@ std::unique_ptr<SeqConverter> GetConverter(const std::shared_ptr<DataType>& type\n     case Type::STRING:\n       return std::unique_ptr<SeqConverter>(new UTF8Converter);\n     case Type::LIST:\n-      return std::unique_ptr<SeqConverter>(new ListConverter);\n+      return std::unique_ptr<SeqConverter>(new ListConverter(from_pandas));\n     case Type::STRUCT:\n-      return std::unique_ptr<SeqConverter>(new StructConverter);\n+      return std::unique_ptr<SeqConverter>(new StructConverter(from_pandas));\n     case Type::DECIMAL:\n       return std::unique_ptr<SeqConverter>(new DecimalConverter);\n     default:\n@@ -731,8 +832,8 @@ Status ListConverter::Init(ArrayBuilder* builder) {\n   builder_ = builder;\n   typed_builder_ = checked_cast<ListBuilder*>(builder);\n \n-  value_converter_ =\n-      GetConverter(checked_cast<const ListType&>(*builder->type()).value_type());\n+  value_converter_ = GetConverter(\n+      checked_cast<const ListType&>(*builder->type()).value_type(), from_pandas_);\n   if (value_converter_ == nullptr) {\n     return Status::NotImplemented(\"value type not implemented\");\n   }\n@@ -756,7 +857,7 @@ Status StructConverter::Init(ArrayBuilder* builder) {\n     const std::string& field_name(struct_type.child(i)->name());\n     std::shared_ptr<DataType> field_type(struct_type.child(i)->type());\n \n-    auto value_converter = GetConverter(field_type);\n+    auto value_converter = GetConverter(field_type, from_pandas_);\n     if (value_converter == nullptr) {\n       return Status::NotImplemented(\"value type not implemented\");\n     }\n@@ -774,9 +875,10 @@ Status StructConverter::Init(ArrayBuilder* builder) {\n }\n \n Status AppendPySequence(PyObject* obj, int64_t size,\n-                        const std::shared_ptr<DataType>& type, ArrayBuilder* builder) {\n+                        const std::shared_ptr<DataType>& type, ArrayBuilder* builder,\n+                        bool from_pandas) {\n   PyDateTime_IMPORT;\n-  auto converter = GetConverter(type);\n+  auto converter = GetConverter(type, from_pandas);\n   if (converter == nullptr) {\n     std::stringstream ss;\n     ss << \"No type converter implemented for \" << type->ToString();\n@@ -788,7 +890,8 @@ Status AppendPySequence(PyObject* obj, int64_t size,\n \n static Status ConvertPySequenceReal(PyObject* obj, int64_t size,\n                                     const std::shared_ptr<DataType>* type,\n-                                    MemoryPool* pool, std::shared_ptr<Array>* out) {\n+                                    MemoryPool* pool, bool from_pandas,\n+                                    std::shared_ptr<Array>* out) {\n   PyAcquireGIL lock;\n \n   PyObject* seq;\n@@ -814,28 +917,30 @@ static Status ConvertPySequenceReal(PyObject* obj, int64_t size,\n   // Give the sequence converter an array builder\n   std::unique_ptr<ArrayBuilder> builder;\n   RETURN_NOT_OK(MakeBuilder(pool, real_type, &builder));\n-  RETURN_NOT_OK(AppendPySequence(seq, size, real_type, builder.get()));\n+  RETURN_NOT_OK(AppendPySequence(seq, size, real_type, builder.get(), from_pandas));\n   return builder->Finish(out);\n }\n \n-Status ConvertPySequence(PyObject* obj, MemoryPool* pool, std::shared_ptr<Array>* out) {\n-  return ConvertPySequenceReal(obj, -1, nullptr, pool, out);\n+Status ConvertPySequence(PyObject* obj, MemoryPool* pool, bool from_pandas,\n+                         std::shared_ptr<Array>* out) {\n+  return ConvertPySequenceReal(obj, -1, nullptr, pool, from_pandas, out);\n }\n \n Status ConvertPySequence(PyObject* obj, const std::shared_ptr<DataType>& type,\n-                         MemoryPool* pool, std::shared_ptr<Array>* out) {\n-  return ConvertPySequenceReal(obj, -1, &type, pool, out);\n+                         MemoryPool* pool, bool from_pandas,\n+                         std::shared_ptr<Array>* out) {\n+  return ConvertPySequenceReal(obj, -1, &type, pool, from_pandas, out);\n }\n \n-Status ConvertPySequence(PyObject* obj, int64_t size, MemoryPool* pool,\n+Status ConvertPySequence(PyObject* obj, int64_t size, MemoryPool* pool, bool from_pandas,\n                          std::shared_ptr<Array>* out) {\n-  return ConvertPySequenceReal(obj, size, nullptr, pool, out);\n+  return ConvertPySequenceReal(obj, size, nullptr, pool, from_pandas, out);\n }\n \n Status ConvertPySequence(PyObject* obj, int64_t size,\n                          const std::shared_ptr<DataType>& type, MemoryPool* pool,\n-                         std::shared_ptr<Array>* out) {\n-  return ConvertPySequenceReal(obj, size, &type, pool, out);\n+                         bool from_pandas, std::shared_ptr<Array>* out) {\n+  return ConvertPySequenceReal(obj, size, &type, pool, from_pandas, out);\n }\n \n }  // namespace py\ndiff --git a/cpp/src/arrow/python/builtin_convert.h b/cpp/src/arrow/python/builtin_convert.h\nindex 7a32bec89e..d9b5ecd0bb 100644\n--- a/cpp/src/arrow/python/builtin_convert.h\n+++ b/cpp/src/arrow/python/builtin_convert.h\n@@ -47,27 +47,29 @@ ARROW_EXPORT arrow::Status InferArrowTypeAndSize(\n \n ARROW_EXPORT arrow::Status AppendPySequence(PyObject* obj, int64_t size,\n                                             const std::shared_ptr<arrow::DataType>& type,\n-                                            arrow::ArrayBuilder* builder);\n+                                            arrow::ArrayBuilder* builder,\n+                                            bool from_pandas);\n \n // Type and size inference\n ARROW_EXPORT\n-Status ConvertPySequence(PyObject* obj, MemoryPool* pool, std::shared_ptr<Array>* out);\n+Status ConvertPySequence(PyObject* obj, MemoryPool* pool, bool from_pandas,\n+                         std::shared_ptr<Array>* out);\n \n // Type inference only\n ARROW_EXPORT\n-Status ConvertPySequence(PyObject* obj, int64_t size, MemoryPool* pool,\n+Status ConvertPySequence(PyObject* obj, int64_t size, MemoryPool* pool, bool from_pandas,\n                          std::shared_ptr<Array>* out);\n \n // Size inference only\n ARROW_EXPORT\n Status ConvertPySequence(PyObject* obj, const std::shared_ptr<DataType>& type,\n-                         MemoryPool* pool, std::shared_ptr<Array>* out);\n+                         MemoryPool* pool, bool from_pandas, std::shared_ptr<Array>* out);\n \n // No inference\n ARROW_EXPORT\n Status ConvertPySequence(PyObject* obj, int64_t size,\n                          const std::shared_ptr<DataType>& type, MemoryPool* pool,\n-                         std::shared_ptr<Array>* out);\n+                         bool from_pandas, std::shared_ptr<Array>* out);\n \n ARROW_EXPORT\n Status InvalidConversion(PyObject* obj, const std::string& expected_type_name,\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex e18ccedc63..09926ba615 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -1273,7 +1273,8 @@ inline Status NumPyConverter::ConvertTypedLists(const std::shared_ptr<DataType>&\n         ss << inferred_type->ToString() << \" cannot be converted to \" << type->ToString();\n         return Status::TypeError(ss.str());\n       }\n-      return AppendPySequence(object, size, type, value_builder);\n+      return AppendPySequence(object, size, type, value_builder,\n+                              use_pandas_null_sentinels_);\n     } else {\n       return Status::TypeError(\"Unsupported Python type for list items\");\n     }\n@@ -1368,7 +1369,8 @@ inline Status NumPyConverter::ConvertTypedLists<NPY_OBJECT, BinaryType>(\n         ss << inferred_type->ToString() << \" cannot be converted to BINARY.\";\n         return Status::TypeError(ss.str());\n       }\n-      return AppendPySequence(object, size, type, value_builder);\n+      return AppendPySequence(object, size, type, value_builder,\n+                              use_pandas_null_sentinels_);\n     } else {\n       return Status::TypeError(\"Unsupported Python type for list items\");\n     }\n@@ -1425,7 +1427,8 @@ inline Status NumPyConverter::ConvertTypedLists<NPY_OBJECT, StringType>(\n         ss << inferred_type->ToString() << \" cannot be converted to STRING.\";\n         return Status::TypeError(ss.str());\n       }\n-      return AppendPySequence(object, size, type, value_builder);\n+      return AppendPySequence(object, size, type, value_builder,\n+                              use_pandas_null_sentinels_);\n     } else {\n       return Status::TypeError(\"Unsupported Python type for list items\");\n     }\ndiff --git a/cpp/src/arrow/python/python-test.cc b/cpp/src/arrow/python/python-test.cc\nindex abe93b04f9..9763bef000 100644\n--- a/cpp/src/arrow/python/python-test.cc\n+++ b/cpp/src/arrow/python/python-test.cc\n@@ -269,7 +269,7 @@ TEST(BuiltinConversionTest, TestMixedTypeFails) {\n   ASSERT_EQ(PyList_SetItem(list, 1, integer), 0);\n   ASSERT_EQ(PyList_SetItem(list, 2, doub), 0);\n \n-  ASSERT_RAISES(TypeError, ConvertPySequence(list, pool, &arr));\n+  ASSERT_RAISES(TypeError, ConvertPySequence(list, pool, false, &arr));\n }\n \n TEST_F(DecimalTest, FromPythonDecimalRescaleNotTruncateable) {\n@@ -349,7 +349,7 @@ TEST_F(DecimalTest, TestNoneAndNaN) {\n \n   MemoryPool* pool = default_memory_pool();\n   std::shared_ptr<Array> arr;\n-  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_OK(ConvertPySequence(list, pool, false, &arr));\n   ASSERT_TRUE(arr->IsValid(0));\n   ASSERT_TRUE(arr->IsNull(1));\n   ASSERT_TRUE(arr->IsNull(2));\n@@ -374,7 +374,7 @@ TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n \n   MemoryPool* pool = default_memory_pool();\n   std::shared_ptr<Array> arr;\n-  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_OK(ConvertPySequence(list, pool, false, &arr));\n   const auto& type = checked_cast<const DecimalType&>(*arr->type());\n \n   int32_t expected_precision = 9;\n@@ -402,7 +402,7 @@ TEST_F(DecimalTest, TestMixedPrecisionAndScaleSequenceConvert) {\n   ASSERT_EQ(PyList_SetItem(list, 0, value1), 0);\n   ASSERT_EQ(PyList_SetItem(list, 1, value2), 0);\n \n-  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_OK(ConvertPySequence(list, pool, false, &arr));\n \n   const auto& type = checked_cast<const Decimal128Type&>(*arr->type());\n   ASSERT_EQ(3, type.precision());\n@@ -438,7 +438,7 @@ TEST(PythonTest, ConstructStringArrayWithLeadingZeros) {\n \n   std::shared_ptr<Array> out;\n   auto pool = default_memory_pool();\n-  ASSERT_OK(ConvertPySequence(list, pool, &out));\n+  ASSERT_OK(ConvertPySequence(list, pool, false, &out));\n }\n \n }  // namespace py\ndiff --git a/python/doc/source/data.rst b/python/doc/source/data.rst\nindex 07172604a3..3f4169cce6 100644\n--- a/python/doc/source/data.rst\n+++ b/python/doc/source/data.rst\n@@ -198,6 +198,21 @@ Arrays can be sliced without copying:\n \n    arr[1:3]\n \n+None values and NAN handling\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+As mentioned in the above section, the Python object ``None`` is always\n+converted to an Arrow null element on the conversion to ``pyarrow.Array``. For\n+the float NaN value which is either represented by the Python object\n+``float('nan')`` or ``numpy.nan`` we normally convert it to a *valid* float\n+value during the conversion. If an integer input is supplied to\n+``pyarrow.array`` that contains ``np.nan``, ``ValueError`` is raised.\n+\n+To handle better compability with Pandas, we support interpreting NaN values as\n+null elements. This is enabled automatically on all ``from_pandas`` function and\n+can be enable on the other conversion functions by passing ``from_pandas=True``\n+as a function parameter.\n+\n List arrays\n ~~~~~~~~~~~\n \ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex 9d14e1edda..de5950940a 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -17,25 +17,29 @@\n \n \n cdef _sequence_to_array(object sequence, object size, DataType type,\n-                        CMemoryPool* pool):\n+                        CMemoryPool* pool, c_bool from_pandas):\n     cdef shared_ptr[CArray] out\n     cdef int64_t c_size\n     if type is None:\n         if size is None:\n             with nogil:\n-                check_status(ConvertPySequence(sequence, pool, &out))\n+                check_status(\n+                    ConvertPySequence(sequence, pool, from_pandas, &out)\n+                )\n         else:\n             c_size = size\n             with nogil:\n                 check_status(\n-                    ConvertPySequence(sequence, c_size, pool, &out)\n+                    ConvertPySequence(\n+                        sequence, c_size, pool, from_pandas, &out\n+                    )\n                 )\n     else:\n         if size is None:\n             with nogil:\n                 check_status(\n                     ConvertPySequence(\n-                        sequence, type.sp_type, pool, &out,\n+                        sequence, type.sp_type, pool, from_pandas, &out,\n                     )\n                 )\n         else:\n@@ -43,7 +47,8 @@ cdef _sequence_to_array(object sequence, object size, DataType type,\n             with nogil:\n                 check_status(\n                     ConvertPySequence(\n-                        sequence, c_size, type.sp_type, pool, &out,\n+                        sequence, c_size, type.sp_type, pool, from_pandas,\n+                        &out,\n                     )\n                 )\n \n@@ -178,7 +183,7 @@ def array(object obj, type=None, mask=None,\n     else:\n         if mask is not None:\n             raise ValueError(\"Masks only supported with ndarray-like inputs\")\n-        return _sequence_to_array(obj, size, type, pool)\n+        return _sequence_to_array(obj, size, type, pool, from_pandas)\n \n \n def asarray(values, type=None):\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex d617986ed3..dc8470f562 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -938,14 +938,17 @@ cdef extern from \"arrow/python/api.h\" namespace \"arrow::py\" nogil:\n     object PyHalf_FromHalf(npy_half value)\n \n     CStatus ConvertPySequence(object obj, CMemoryPool* pool,\n+                              c_bool from_pandas,\n                               shared_ptr[CArray]* out)\n     CStatus ConvertPySequence(object obj, const shared_ptr[CDataType]& type,\n-                              CMemoryPool* pool, shared_ptr[CArray]* out)\n-    CStatus ConvertPySequence(object obj, int64_t size, CMemoryPool* pool,\n+                              CMemoryPool* pool, c_bool from_pandas,\n                               shared_ptr[CArray]* out)\n+    CStatus ConvertPySequence(object obj, int64_t size, CMemoryPool* pool,\n+                              c_bool from_pandas, shared_ptr[CArray]* out)\n     CStatus ConvertPySequence(object obj, int64_t size,\n                               const shared_ptr[CDataType]& type,\n                               CMemoryPool* pool,\n+                              c_bool from_pandas,\n                               shared_ptr[CArray]* out)\n \n     CStatus NumPyDtypeToArrow(object dtype, shared_ptr[CDataType]* type)\ndiff --git a/python/pyarrow/tests/test_convert_builtin.py b/python/pyarrow/tests/test_convert_builtin.py\nindex 31228b41e0..7c7918e116 100644\n--- a/python/pyarrow/tests/test_convert_builtin.py\n+++ b/python/pyarrow/tests/test_convert_builtin.py\n@@ -225,6 +225,40 @@ def test_sequence_integer(seq, np_scalar_pa_type):\n     assert arr.to_pylist() == expected\n \n \n+@parametrize_with_iterable_types\n+@pytest.mark.parametrize(\"np_scalar_pa_type\", int_type_pairs)\n+def test_sequence_integer_np_nan(seq, np_scalar_pa_type):\n+    # ARROW-2806: numpy.nan is a double value and thus should produce\n+    # a double array.\n+    _, pa_type = np_scalar_pa_type\n+    with pytest.raises(ValueError):\n+        pa.array(seq([np.nan]), type=pa_type, from_pandas=False)\n+\n+    arr = pa.array(seq([np.nan]), type=pa_type, from_pandas=True)\n+    expected = [None]\n+    assert len(arr) == 1\n+    assert arr.null_count == 1\n+    assert arr.type == pa_type\n+    assert arr.to_pylist() == expected\n+\n+\n+@parametrize_with_iterable_types\n+@pytest.mark.parametrize(\"np_scalar_pa_type\", int_type_pairs)\n+def test_sequence_integer_nested_np_nan(seq, np_scalar_pa_type):\n+    # ARROW-2806: numpy.nan is a double value and thus should produce\n+    # a double array.\n+    _, pa_type = np_scalar_pa_type\n+    with pytest.raises(ValueError):\n+        pa.array(seq([[np.nan]]), type=pa.list_(pa_type), from_pandas=False)\n+\n+    arr = pa.array(seq([[np.nan]]), type=pa.list_(pa_type), from_pandas=True)\n+    expected = [[None]]\n+    assert len(arr) == 1\n+    assert arr.null_count == 0\n+    assert arr.type == pa.list_(pa_type)\n+    assert arr.to_pylist() == expected\n+\n+\n @parametrize_with_iterable_types\n def test_sequence_integer_inferred(seq):\n     expected = [1, None, 3, None]\n@@ -310,13 +344,43 @@ def test_sequence_double():\n \n @parametrize_with_iterable_types\n @pytest.mark.parametrize(\"np_scalar\", [np.float16, np.float32, np.float64])\n-def test_sequence_numpy_double(seq, np_scalar):\n-    data = [np_scalar(1.5), np_scalar(1), None, np_scalar(2.5), None, None]\n-    arr = pa.array(seq(data))\n+@pytest.mark.parametrize(\"from_pandas\", [True, False])\n+def test_sequence_numpy_double(seq, np_scalar, from_pandas):\n+    data = [np_scalar(1.5), np_scalar(1), None, np_scalar(2.5), None, np.nan]\n+    arr = pa.array(seq(data), from_pandas=from_pandas)\n     assert len(arr) == 6\n-    assert arr.null_count == 3\n+    if from_pandas:\n+        assert arr.null_count == 3\n+    else:\n+        assert arr.null_count == 2\n     assert arr.type == pa.float64()\n-    assert arr.to_pylist() == data\n+\n+    assert arr.to_pylist()[:4] == data[:4]\n+    if from_pandas:\n+        assert arr.to_pylist()[5] is None\n+    else:\n+        assert np.isnan(arr.to_pylist()[5])\n+\n+\n+@pytest.mark.parametrize(\"from_pandas\", [True, False])\n+@pytest.mark.parametrize(\"inner_seq\", [np.array, list])\n+def test_ndarray_nested_numpy_double(from_pandas, inner_seq):\n+    # ARROW-2806\n+    data = np.array([\n+        inner_seq([1., 2.]),\n+        inner_seq([1., 2., 3.]),\n+        inner_seq([np.nan]),\n+        None\n+    ])\n+    arr = pa.array(data, from_pandas=from_pandas)\n+    assert len(arr) == 4\n+    assert arr.null_count == 1\n+    assert arr.type == pa.list_(pa.float64())\n+    if from_pandas:\n+        assert arr.to_pylist() == [[1.0, 2.0], [1.0, 2.0, 3.0], [None], None]\n+    else:\n+        np.testing.assert_equal(arr.to_pylist(),\n+                                [[1., 2.], [1., 2., 3.], [np.nan], None])\n \n \n def test_sequence_unicode():\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-17T12:54:40.859+0000",
                    "updated": "2018-07-17T12:54:40.859+0000",
                    "started": "2018-07-17T12:54:40.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "124067",
                    "issueId": "13170644"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2a1e876f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e2641c5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36e293d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7fba68fc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ab68576[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5891c5af[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ac42841[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@615586d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1896f0ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4efcf2ec[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45714d52[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@690bb3a1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 17 12:54:48 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-07-17T12:54:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2806/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-07-07T15:28:44.000+0000",
        "updated": "2018-07-17T12:54:48.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently we handle {{np.nan}} differently between having a list or a numpy array as an input to {{pa.array()}}:\r\n\r\n{code}\r\n>>> pa.array(np.array([1, np.nan]))\r\n<pyarrow.lib.DoubleArray object at 0x11680bea8>\r\n[\r\n  1.0,\r\n  nan\r\n]\r\n\r\n>>> pa.array([1., np.nan])\r\nOut[9]:\r\n<pyarrow.lib.DoubleArray object at 0x10bdacbd8>\r\n[\r\n  1.0,\r\n  NA\r\n]\r\n{code}\r\n\r\nI would actually think the last one is the correct one. Especially once one casts this to an integer column. There the first one produces a column with INT_MIN and the second one produces a real null.\r\n\r\nBut, in {{test_array_conversions_no_sentinel_values}}\u00a0we check that {{np.nan}}\u00a0does not produce a Null.\r\n\r\nEven weirder: \r\n\r\n{code}\r\n>>> df = pd.DataFrame({'a': [1., None]})\r\n>>> df\r\n     a\r\n0  1.0\r\n1  NaN\r\n>>> pa.Table.from_pandas(df).column(0)\r\n<Column name='a' type=DataType(double)>\r\nchunk 0: <pyarrow.lib.DoubleArray object at 0x104bbf958>\r\n[\r\n  1.0,\r\n  NA\r\n]\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python]\u00a0Inconsistent handling of np.nan",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16535803",
                    "id": "16535803",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "[~wesmckinn]\u00a0Would it be ok for you to change the test so that {{np.nan}}\u00a0is always a null indicator for Arrow?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-07-07T15:35:19.304+0000",
                    "updated": "2018-07-07T15:35:19.304+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16535872",
                    "id": "16535872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Oof, I actually think {{pa.array([1, NaN])}} should either raise an exception or return a DoubleArray with a NaN, unless {{from_pandas=True}}.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-07T19:00:46.427+0000",
                    "updated": "2018-07-07T19:00:46.427+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16535873",
                    "id": "16535873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "And {{pa.array([1., NaN])}} should preserve the NaN",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-07T19:03:12.309+0000",
                    "updated": "2018-07-07T19:03:12.309+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16536393",
                    "id": "16536393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Do we have a well-supported reasoning why we should have this behaviour? I'm asking because this is quite a breaking change now and my feeling was that we wanted to achieve the opposite for quite some. Therefore I would like to document our approach with the appropriate reasoning in the docs.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-07-08T19:43:51.702+0000",
                    "updated": "2018-07-08T19:43:51.702+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16536421",
                    "id": "16536421",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "In the context of basically any database-type system (PostgreSQL, Spark SQL, etc.), NaN is just another floating point value. It only happens to be that we use NaN as a null sentinel in pandas. When we pass {{from_pandas=True}}, then we should treat it as null because those are the pandas semantics. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-08T22:00:11.224+0000",
                    "updated": "2018-07-08T22:00:11.224+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16537272",
                    "id": "16537272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "This makes sense. I can adapt the things to adhere to this principle. \r\n\r\nWhat should be the result of {{pa.array(np.array([np.nan])).cast(pa.int64())}} then?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-07-09T17:07:47.109+0000",
                    "updated": "2018-07-09T17:07:47.109+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16537289",
                    "id": "16537289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I guess it should raise unless {{safe=False}}. What do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-09T17:18:47.819+0000",
                    "updated": "2018-07-09T17:18:47.819+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16537309",
                    "id": "16537309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Closely related https://issues.apache.org/jira/browse/ARROW-488",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-07-09T17:35:25.275+0000",
                    "updated": "2018-07-09T17:35:25.275+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170644/comment/16546549",
                    "id": "16546549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2270\n[https://github.com/apache/arrow/pull/2270]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-07-17T12:54:48.314+0000",
                    "updated": "2018-07-17T12:54:48.314+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|i3vn1z:",
        "customfield_12314139": null
    }
}