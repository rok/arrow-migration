{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13327686",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686",
    "key": "ARROW-10016",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12599330",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12599330",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13327889",
                    "key": "ARROW-10025",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327889",
                    "fields": {
                        "summary": "[Rust] Filter kernel relies on bits outside of valid len of boolean array",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jhorstmann",
            "name": "jhorstmann",
            "key": "jhorstmann",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "J\u00f6rn Horstmann",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10016/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/485111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#issuecomment-693377243\n\n\n   https://issues.apache.org/jira/browse/ARROW-10016\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-16T12:38:54.512+0000",
                    "updated": "2020-09-16T12:38:54.512+0000",
                    "started": "2020-09-16T12:38:54.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "485111",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/485238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#issuecomment-693526565\n\n\n   The `IS NULL` and probably also the `NOT` kernel seem to have some unexpected interactions with the filter kernel, which accesses bits outside of the len. I created a ticket for that at https://issues.apache.org/jira/browse/ARROW-10025\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-16T16:42:22.686+0000",
                    "updated": "2020-09-16T16:42:22.686+0000",
                    "started": "2020-09-16T16:42:22.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "485238",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/485503",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#discussion_r489891307\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1331,6 +1331,82 @@ pub fn not(arg: Arc<dyn PhysicalExpr>) -> Arc<dyn PhysicalExpr> {\n     Arc::new(NotExpr::new(arg))\n }\n \n+/// IS NULL expression\n+#[derive(Debug)]\n+pub struct IsNullExpr {\n+    arg: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl IsNullExpr {\n+    /// Create new not expression\n+    pub fn new(arg: Arc<dyn PhysicalExpr>) -> Self {\n+        Self { arg }\n+    }\n+}\n+\n+impl fmt::Display for IsNullExpr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{} IS NULL\", self.arg)\n+    }\n+}\n+impl PhysicalExpr for IsNullExpr {\n+    fn data_type(&self, _input_schema: &Schema) -> Result<DataType> {\n+        return Ok(DataType::Boolean);\n+    }\n+\n+    fn nullable(&self, _input_schema: &Schema) -> Result<bool> {\n+        Ok(false)\n+    }\n+\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n+        let arg = self.arg.evaluate(batch)?;\n+        return Ok(Arc::new(arrow::compute::is_null(&arg)?));\n+    }\n+}\n+\n+/// Create an IS NULL expression\n+pub fn is_null(arg: Arc<dyn PhysicalExpr>) -> Result<Arc<dyn PhysicalExpr>> {\n+    Ok(Arc::new(IsNullExpr::new(arg)))\n+}\n+\n+/// IS NULL expression\n+#[derive(Debug)]\n+pub struct IsNotNullExpr {\n+    arg: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl IsNotNullExpr {\n+    /// Create new not expression\n+    pub fn new(arg: Arc<dyn PhysicalExpr>) -> Self {\n+        Self { arg }\n+    }\n+}\n+\n+impl fmt::Display for IsNotNullExpr {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{} IS NULL\", self.arg)\n\nReview comment:\n       `IS NOT NULL`?\n\n##########\nFile path: rust/arrow/src/compute/kernels/boolean.rs\n##########\n@@ -266,4 +334,150 @@ mod tests {\n         assert_eq!(false, c.value(2));\n         assert_eq!(true, c.value(3));\n     }\n+\n+    #[test]\n+    fn test_nonnull_array_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![1, 2, 3, 4]));\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(false, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(false, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nonnull_array_with_offset_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![\n+            1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1,\n+        ]));\n+        let a = a.slice(8, 4);\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(false, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(false, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nonnull_array_is_not_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![1, 2, 3, 4]));\n+\n+        let res = is_not_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(true, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(true, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nonnull_array_with_offset_is_not_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![\n+            1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1,\n+        ]));\n+        let a = a.slice(8, 4);\n+\n+        let res = is_not_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(true, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(true, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nullable_array_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![Some(1), None, Some(3), None]));\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nullable_array_with_offset_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            Some(1),\n+            None,\n+            Some(2),\n+            None,\n+            Some(3),\n+            Some(4),\n+            None,\n+            None,\n+        ]));\n+        let a = a.slice(8, 4);\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nullable_array_is_not_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![Some(1), None, Some(3), None]));\n+\n+        let res = is_not_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(true, res.value(0));\n+        assert_eq!(false, res.value(1));\n+        assert_eq!(true, res.value(2));\n+        assert_eq!(false, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nullable_array_with_offset_is_not_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            Some(1),\n\nReview comment:\n       `// offset 8 starts here` ? ^_^\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -797,3 +797,51 @@ fn to_timstamp() -> Result<()> {\n     assert_eq!(expected, actual);\n     Ok(())\n }\n+\n+#[test]\n+fn query_is_null() -> Result<()> {\n+    let schema = Arc::new(Schema::new(vec![Field::new(\"c1\", DataType::Float64, true)]));\n+\n+    let data = RecordBatch::try_new(\n+        schema.clone(),\n+        vec![Arc::new(Float64Array::from(vec![\n+            Some(1.0),\n+            None,\n+            Some(f64::NAN),\n\nReview comment:\n       \ud83d\udcaf nan is not null :)\n\n##########\nFile path: rust/arrow/src/compute/kernels/boolean.rs\n##########\n@@ -266,4 +334,150 @@ mod tests {\n         assert_eq!(false, c.value(2));\n         assert_eq!(true, c.value(3));\n     }\n+\n+    #[test]\n+    fn test_nonnull_array_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![1, 2, 3, 4]));\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(false, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(false, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nonnull_array_with_offset_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![\n+            1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1,\n+        ]));\n+        let a = a.slice(8, 4);\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(false, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(false, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nonnull_array_is_not_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![1, 2, 3, 4]));\n+\n+        let res = is_not_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(true, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(true, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nonnull_array_with_offset_is_not_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![\n+            1, 2, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 3, 2, 1,\n+        ]));\n+        let a = a.slice(8, 4);\n+\n+        let res = is_not_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(true, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(true, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nullable_array_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![Some(1), None, Some(3), None]));\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nullable_array_with_offset_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            None,\n+            Some(1),\n+            None,\n+            Some(2),\n+            None,\n+            Some(3),\n+            Some(4),\n+            None,\n+            None,\n+        ]));\n+        let a = a.slice(8, 4);\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n+        assert_eq!(false, res.value(0));\n+        assert_eq!(true, res.value(1));\n+        assert_eq!(false, res.value(2));\n+        assert_eq!(true, res.value(3));\n+    }\n+\n+    #[test]\n+    fn test_nullable_array_is_not_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![Some(1), None, Some(3), None]));\n+\n+        let res = is_not_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n\nReview comment:\n       assert no null counts?\n\n##########\nFile path: rust/arrow/src/compute/kernels/boolean.rs\n##########\n@@ -266,4 +334,150 @@ mod tests {\n         assert_eq!(false, c.value(2));\n         assert_eq!(true, c.value(3));\n     }\n+\n+    #[test]\n+    fn test_nonnull_array_is_null() {\n+        let a: ArrayRef = Arc::new(Int32Array::from(vec![1, 2, 3, 4]));\n+\n+        let res = is_null(&a).unwrap();\n+\n+        assert_eq!(4, res.len());\n\nReview comment:\n       assert no null counts?\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -2499,4 +2574,56 @@ mod tests {\n \n         Ok(())\n     }\n+\n+    #[test]\n+    fn is_null_op() -> Result<()> {\n+        let schema = Schema::new(vec![Field::new(\"a\", DataType::Utf8, true)]);\n+        let a = StringArray::from(vec![Some(\"foo\"), None]);\n+        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+\n+        // expression: \"a is null\"\n+        let expr = is_null(col(\"a\")).unwrap();\n+        let result = expr.evaluate(&batch)?;\n+\n+        let expected = vec![false, true];\n+\n+        let result = result\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"failed to downcast to BooleanArray\");\n+\n+        assert_eq!(result.len(), expected.len());\n+\n+        for i in 0..expected.len() {\n+            assert_eq!(result.value(i), expected[i]);\n+        }\n+\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn is_not_null_op() -> Result<()> {\n+        let schema = Schema::new(vec![Field::new(\"a\", DataType::Utf8, true)]);\n+        let a = StringArray::from(vec![Some(\"foo\"), None]);\n+        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+\n+        // expression: \"a is null\"\n\nReview comment:\n       not null?\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -2499,4 +2574,56 @@ mod tests {\n \n         Ok(())\n     }\n+\n+    #[test]\n+    fn is_null_op() -> Result<()> {\n+        let schema = Schema::new(vec![Field::new(\"a\", DataType::Utf8, true)]);\n+        let a = StringArray::from(vec![Some(\"foo\"), None]);\n+        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+\n+        // expression: \"a is null\"\n+        let expr = is_null(col(\"a\")).unwrap();\n+        let result = expr.evaluate(&batch)?;\n+\n+        let expected = vec![false, true];\n+\n+        let result = result\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"failed to downcast to BooleanArray\");\n+\n+        assert_eq!(result.len(), expected.len());\n+\n+        for i in 0..expected.len() {\n+            assert_eq!(result.value(i), expected[i]);\n+        }\n+\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn is_not_null_op() -> Result<()> {\n+        let schema = Schema::new(vec![Field::new(\"a\", DataType::Utf8, true)]);\n+        let a = StringArray::from(vec![Some(\"foo\"), None]);\n+        let batch = RecordBatch::try_new(Arc::new(schema.clone()), vec![Arc::new(a)])?;\n+\n+        // expression: \"a is null\"\n+        let expr = is_not_null(col(\"a\")).unwrap();\n+        let result = expr.evaluate(&batch)?;\n+\n+        let expected = vec![true, false];\n+\n+        let result = result\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"failed to downcast to BooleanArray\");\n+\n+        assert_eq!(result.len(), expected.len());\n+\n\nReview comment:\n       If we use\r\n   ```\r\n   let expected = &BooleanArray::from(vec![true, false]);\r\n   ```\r\n   \r\n   then we can use \r\n   \r\n   ```\r\n   assert_eq!(result, expected);\r\n   ```\r\n   \r\n   here, which may be more expressive of our intent.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-17T02:35:40.715+0000",
                    "updated": "2020-09-17T02:35:40.715+0000",
                    "started": "2020-09-17T02:35:40.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "485503",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/486157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#discussion_r490852595\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -241,11 +241,21 @@ impl FilterContext {\n         let filter_mask: Vec<u64> = (0..64).map(|x| 1u64 << x).collect();\n         let filter_bytes = filter_array.data_ref().buffers()[0].data();\n         let filtered_count = bit_util::count_set_bits(filter_bytes);\n+\n         // transmute filter_bytes to &[u64]\n         let mut u64_buffer = MutableBuffer::new(filter_bytes.len());\n-        u64_buffer\n-            .write_bytes(filter_bytes, u64_buffer.capacity() - filter_bytes.len())?;\n-        let filter_u64 = u64_buffer.typed_data_mut::<u64>().to_owned();\n+        // add to the resulting len so is is a multiple of the size of u64\n+        let pad_addional_len = 8 - filter_bytes.len() % 8;\n+        u64_buffer.write_bytes(filter_bytes, pad_addional_len)?;\n+        let mut filter_u64 = u64_buffer.typed_data_mut::<u64>().to_owned();\n+\n+        // mask of any bits outside of the given len\n+        if filter_array.len() % 64 != 0 {\n+            let last_idx = filter_u64.len() - 1;\n+            let mask = u64::MAX >> (64 - filter_array.len() % 64);\n+            filter_u64[last_idx] &= mask;\n\nReview comment:\n       This fixes the issue I reported about accessing bits outside of len in https://issues.apache.org/jira/browse/ARROW-10025\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T10:27:07.476+0000",
                    "updated": "2020-09-18T10:27:07.476+0000",
                    "started": "2020-09-18T10:27:07.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486157",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/486158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#discussion_r490853068\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/filter.rs\n##########\n@@ -241,11 +241,21 @@ impl FilterContext {\n         let filter_mask: Vec<u64> = (0..64).map(|x| 1u64 << x).collect();\n         let filter_bytes = filter_array.data_ref().buffers()[0].data();\n         let filtered_count = bit_util::count_set_bits(filter_bytes);\n+\n         // transmute filter_bytes to &[u64]\n         let mut u64_buffer = MutableBuffer::new(filter_bytes.len());\n-        u64_buffer\n-            .write_bytes(filter_bytes, u64_buffer.capacity() - filter_bytes.len())?;\n-        let filter_u64 = u64_buffer.typed_data_mut::<u64>().to_owned();\n+        // add to the resulting len so is is a multiple of the size of u64\n+        let pad_addional_len = 8 - filter_bytes.len() % 8;\n\nReview comment:\n       The previous code padded to a multiple of 64 bytes which does not seem necessary and makes masking of the last element more difficult.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T10:28:00.995+0000",
                    "updated": "2020-09-18T10:28:00.995+0000",
                    "started": "2020-09-18T10:28:00.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486158",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/486160",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#discussion_r490853034\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/boolean.rs\n##########\n@@ -123,9 +125,78 @@ pub fn not(left: &BooleanArray) -> Result<BooleanArray> {\n     Ok(BooleanArray::from(Arc::new(data)))\n }\n \n+pub fn is_null(input: &ArrayRef) -> Result<BooleanArray> {\n+    if input.offset() % 8 != 0 {\n\nReview comment:\n       Is this limitation fine, or is there a potential way around it? Does it mean that `array[len = 30].slice(5, 20).is_null()` would fail?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T10:34:21.102+0000",
                    "updated": "2020-09-18T10:34:21.102+0000",
                    "started": "2020-09-18T10:34:21.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486160",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/486163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#discussion_r490863732\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/boolean.rs\n##########\n@@ -123,9 +125,78 @@ pub fn not(left: &BooleanArray) -> Result<BooleanArray> {\n     Ok(BooleanArray::from(Arc::new(data)))\n }\n \n+pub fn is_null(input: &ArrayRef) -> Result<BooleanArray> {\n+    if input.offset() % 8 != 0 {\n\nReview comment:\n       This is currently a limitation of several kernels that operate on boolean arrays or null bitmaps because we try to operate on whole bytes (or larger) instead of individual bits for performance reasons. We would need a nicer abstraction for those bit packed buffers to iterate over chunks, regardless of offsets. I think it makes sense to look into such an implementation together with @jorgecarleitao proposal for an iterator interface.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T10:50:08.620+0000",
                    "updated": "2020-09-18T10:50:08.620+0000",
                    "started": "2020-09-18T10:50:08.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486163",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/486174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#discussion_r490879919\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/boolean.rs\n##########\n@@ -123,9 +125,78 @@ pub fn not(left: &BooleanArray) -> Result<BooleanArray> {\n     Ok(BooleanArray::from(Arc::new(data)))\n }\n \n+pub fn is_null(input: &ArrayRef) -> Result<BooleanArray> {\n+    if input.offset() % 8 != 0 {\n\nReview comment:\n       Oh yes, I remember that now. I tried looking at bit manipulation that would address this, but I can't remember where; maybe as part of the Parquet writer \ud83e\udd14\r\n   \r\n   It's def something that we need to do, if I have more time in the coming months I'll look into it. We could also take inspiration from c++ as I think they have this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-18T11:22:07.110+0000",
                    "updated": "2020-09-18T11:22:07.110+0000",
                    "started": "2020-09-18T11:22:07.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "486174",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/488283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#issuecomment-696744882\n\n\n   @jhorstmann Looks like there is cargo fmt issue\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-22T14:06:34.877+0000",
                    "updated": "2020-09-22T14:06:34.877+0000",
                    "started": "2020-09-22T14:06:34.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488283",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/488941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#issuecomment-696744882\n\n\n   @jhorstmann Looks like there is cargo fmt issue\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-23T04:21:51.830+0000",
                    "updated": "2020-09-23T04:21:51.830+0000",
                    "started": "2020-09-23T04:21:51.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "488941",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/489425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204#issuecomment-697172063\n\n\n   @andygrove format issue is solved\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-23T06:55:17.708+0000",
                    "updated": "2020-09-23T06:55:17.708+0000",
                    "started": "2020-09-23T06:55:17.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "489425",
                    "issueId": "13327686"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/worklog/489524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me closed pull request #8204:\nURL: https://github.com/apache/arrow/pull/8204\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-23T11:03:58.749+0000",
                    "updated": "2020-09-23T11:03:58.749+0000",
                    "started": "2020-09-23T11:03:58.749+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "489524",
                    "issueId": "13327686"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@269b8b4b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b4bc109[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@334a9179[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@665c5d90[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@615991f7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@243b4871[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@439dc4d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@47a9b1e8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ad246c3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@14d4e328[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39423e10[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@336efe21[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 23 11:03:46 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-23T11:03:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10016/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-09-15T14:01:26.000+0000",
        "updated": "2020-09-24T18:16:55.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, DataFusion has the logical operator `isNull` and `IsNotNull`, but that operator has no physical implementation. Consequently, this operator cannot be used.\r\n\r\nThe goal of this improvement is to add support to this operator on the physical plan.\r\n\r\nNote that these operators only care about the null bitmap, and thus should be implementable to all types supported by Arrow.\r\n\r\nBoth operators should probably return a non-null `BooleanArray`.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement IsNull and IsNotNull",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/comment/17196816",
                    "id": "17196816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jhorstmann",
                        "name": "jhorstmann",
                        "key": "jhorstmann",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "J\u00f6rn Horstmann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "[~jorgecarleitao] I would like to contribute this, if you haven't started already, since I already have an implementation of the kernels outside arrow. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jhorstmann",
                        "name": "jhorstmann",
                        "key": "jhorstmann",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "J\u00f6rn Horstmann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2020-09-16T09:21:36.695+0000",
                    "updated": "2020-09-16T09:21:36.695+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/comment/17196825",
                    "id": "17196825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "That is great! Go crazy, and let me know if you need any help :)\r\n\r\nI am not working on tasks that I am not assigned to, by design. Feel free to assign yourself to it, so that others know.\r\n\r\nThis way, we can build a backlog of items that anyone can pick if they want to (which was the direction I was trying to head with the comment on github about placing the `array_size` and others as issues here).\u00a0:)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-09-16T09:34:17.280+0000",
                    "updated": "2020-09-16T09:34:17.280+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327686/comment/17200735",
                    "id": "17200735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8204\n[https://github.com/apache/arrow/pull/8204]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-09-23T11:03:46.910+0000",
                    "updated": "2020-09-23T11:03:46.910+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0img8:",
        "customfield_12314139": null
    }
}