{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13381920",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920",
    "key": "ARROW-12948",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12616686",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616686",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13042654",
                    "key": "ARROW-555",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042654",
                    "fields": {
                        "summary": "[C++] String algorithm library for StringArray/BinaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12616685",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616685",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13339965",
                    "key": "ARROW-10557",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339965",
                    "fields": {
                        "summary": "[C++] Add scalar string slicing/substring extract kernel ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12948/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/worklog/609145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10494:\nURL: https://github.com/apache/arrow/pull/10494\n\n\n   This adds a slice_replace kernel mimicking Pandas's str.slice_replace. There are both ascii and UTF8 variants, indexing respectively with bytes and codepoints. The ascii variant also works on binary arrays.\r\n   \r\n   I know the string kernels are getting refactored, so I can update this PR once that lands.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-09T13:49:54.862+0000",
                    "updated": "2021-06-09T13:49:54.862+0000",
                    "started": "2021-06-09T13:49:54.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609145",
                    "issueId": "13381920"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/worklog/609169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10494:\nURL: https://github.com/apache/arrow/pull/10494#issuecomment-857740519\n\n\n   https://issues.apache.org/jira/browse/ARROW-12948\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-09T14:25:46.442+0000",
                    "updated": "2021-06-09T14:25:46.442+0000",
                    "started": "2021-06-09T14:25:46.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609169",
                    "issueId": "13381920"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/worklog/609283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10494:\nURL: https://github.com/apache/arrow/pull/10494#issuecomment-857897413\n\n\n   Needs rebasing onto #10496.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-09T17:36:49.261+0000",
                    "updated": "2021-06-09T17:36:49.261+0000",
                    "started": "2021-06-09T17:36:49.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609283",
                    "issueId": "13381920"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/worklog/609558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10494:\nURL: https://github.com/apache/arrow/pull/10494#discussion_r648955618\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2288,6 +2288,164 @@ const FunctionDoc replace_substring_regex_doc(\n     {\"strings\"}, \"ReplaceSubstringOptions\");\n #endif\n \n+// ----------------------------------------------------------------------\n+// Replace slice\n+\n+struct ReplaceSliceTransformBase : public StringTransformBase {\n+  using State = OptionsWrapper<ReplaceSliceOptions>;\n+\n+  const ReplaceSliceOptions* options;\n+\n+  explicit ReplaceSliceTransformBase(const ReplaceSliceOptions& options)\n+      : options{&options} {}\n+\n+  int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits) override {\n+    return ninputs * options->replacement.size() + input_ncodeunits;\n+  }\n+};\n+\n+struct AsciiReplaceSliceTransform : ReplaceSliceTransformBase {\n+  using ReplaceSliceTransformBase::ReplaceSliceTransformBase;\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    uint8_t* output) {\n+    const auto& opts = *options;\n+    int64_t before_slice = 0;\n+    int64_t after_slice = 0;\n+    uint8_t* output_start = output;\n+\n+    if (opts.start >= 0) {\n+      // Count from left\n+      before_slice = std::min<int64_t>(input_string_ncodeunits, opts.start);\n+    } else {\n+      // Count from right\n+      before_slice = std::max<int64_t>(0, input_string_ncodeunits + opts.start);\n+    }\n+    // Mimic Pandas: if stop would be before start, treat as 0-length slice\n+    if (opts.stop >= 0) {\n+      // Count from left\n+      after_slice =\n+          std::min<int64_t>(input_string_ncodeunits, std::max(opts.start, opts.stop));\n+    } else {\n+      // Count from right\n+      after_slice = std::max<int64_t>(before_slice, input_string_ncodeunits + opts.stop);\n+    }\n+    output = std::copy(input, input + before_slice, output);\n+    output = std::copy(opts.replacement.begin(), opts.replacement.end(), output);\n+    output = std::copy(input + after_slice, input + input_string_ncodeunits, output);\n+    return std::distance(output_start, output);\n+  }\n+};\n+\n+struct Utf8ReplaceSliceTransform : ReplaceSliceTransformBase {\n+  using ReplaceSliceTransformBase::ReplaceSliceTransformBase;\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    uint8_t* output) {\n+    const auto& opts = *options;\n+    const uint8_t* begin = input;\n+    const uint8_t* end = input + input_string_ncodeunits;\n+    const uint8_t *begin_sliced, *end_sliced;\n+    uint8_t* output_start = output;\n+\n+    // Mimic Pandas: if stop would be before start, treat as 0-length slice\n+    if (opts.start >= 0) {\n+      // Count from left\n+      if (!arrow::util::UTF8AdvanceCodepoints(begin, end, &begin_sliced, opts.start)) {\n+        return kTransformError;\n+      }\n+      if (opts.stop > options->start) {\n+        // Continue counting from left\n+        const int64_t length = opts.stop - options->start;\n+        if (!arrow::util::UTF8AdvanceCodepoints(begin_sliced, end, &end_sliced, length)) {\n+          return kTransformError;\n+        }\n+      } else if (opts.stop < 0) {\n+        // Count from right\n+        if (!arrow::util::UTF8AdvanceCodepointsReverse(begin_sliced, end, &end_sliced,\n+                                                       -opts.stop)) {\n+          return kTransformError;\n+        }\n+      } else {\n+        // Zero-length slice\n+        end_sliced = begin_sliced;\n+      }\n+    } else {\n+      // Count from right\n+      if (!arrow::util::UTF8AdvanceCodepointsReverse(begin, end, &begin_sliced,\n+                                                     -opts.start)) {\n+        return kTransformError;\n+      }\n+      if (opts.stop >= 0) {\n+        // Restart counting from left\n+        if (!arrow::util::UTF8AdvanceCodepoints(begin, end, &end_sliced, opts.stop)) {\n+          return kTransformError;\n+        }\n+        if (end_sliced <= begin_sliced) {\n+          // Zero-length slice\n+          end_sliced = begin_sliced;\n+        }\n+      } else if ((opts.stop < 0) && (options->stop > options->start)) {\n+        // Count from right\n+        if (!arrow::util::UTF8AdvanceCodepointsReverse(begin_sliced, end, &end_sliced,\n+                                                       -opts.stop)) {\n+          return kTransformError;\n+        }\n+      } else {\n+        // zero-length slice\n+        end_sliced = begin_sliced;\n+      }\n+    }\n+    output = std::copy(begin, begin_sliced, output);\n+    output = std::copy(opts.replacement.begin(), options->replacement.end(), output);\n+    output = std::copy(end_sliced, end, output);\n+    return std::distance(output_start, output);\n+  }\n+};\n+\n+template <typename Type>\n+using AsciiReplaceSlice = StringTransformExecWithState<Type, AsciiReplaceSliceTransform>;\n+template <typename Type>\n+using Utf8ReplaceSlice = StringTransformExecWithState<Type, Utf8ReplaceSliceTransform>;\n+\n+const FunctionDoc ascii_replace_slice_doc(\n+    \"Replace a slice of a string with `replacement`\",\n+    (\"For each string in `strings`, replace a slice of the string defined by `start`\"\n+     \"and `stop` with `replacement`. `start` is inclusive and `stop` is exclusive, \"\n+     \"and both are measured in bytes.\\n\"\n+     \"Null values emit null.\"),\n+    {\"strings\"}, \"ReplaceSliceOptions\");\n+\n+const FunctionDoc utf8_replace_slice_doc(\n+    \"Replace a slice of a string with `replacement`\",\n+    (\"For each string in `strings`, replace a slice of the string defined by `start`\"\n+     \"and `stop` with `replacement`. `start` is inclusive and `stop` is exclusive, \"\n+     \"and both are measured in codeunits.\\n\"\n+     \"Null values emit null.\"),\n+    {\"strings\"}, \"ReplaceSliceOptions\");\n+\n+void AddReplaceSlice(FunctionRegistry* registry) {\n+  {\n+    auto func = std::make_shared<ScalarFunction>(\"ascii_replace_slice\", Arity::Unary(),\n+                                                 &ascii_replace_slice_doc);\n\nReview comment:\n       Should probably be called `binary_replace_slice` since it works on non-Ascii input as well (it just slices in byte units, not codeunits).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2288,6 +2288,164 @@ const FunctionDoc replace_substring_regex_doc(\n     {\"strings\"}, \"ReplaceSubstringOptions\");\n #endif\n \n+// ----------------------------------------------------------------------\n+// Replace slice\n+\n+struct ReplaceSliceTransformBase : public StringTransformBase {\n+  using State = OptionsWrapper<ReplaceSliceOptions>;\n+\n+  const ReplaceSliceOptions* options;\n+\n+  explicit ReplaceSliceTransformBase(const ReplaceSliceOptions& options)\n+      : options{&options} {}\n+\n+  int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits) override {\n+    return ninputs * options->replacement.size() + input_ncodeunits;\n+  }\n+};\n+\n+struct AsciiReplaceSliceTransform : ReplaceSliceTransformBase {\n+  using ReplaceSliceTransformBase::ReplaceSliceTransformBase;\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    uint8_t* output) {\n+    const auto& opts = *options;\n+    int64_t before_slice = 0;\n+    int64_t after_slice = 0;\n+    uint8_t* output_start = output;\n+\n+    if (opts.start >= 0) {\n+      // Count from left\n+      before_slice = std::min<int64_t>(input_string_ncodeunits, opts.start);\n+    } else {\n+      // Count from right\n+      before_slice = std::max<int64_t>(0, input_string_ncodeunits + opts.start);\n+    }\n+    // Mimic Pandas: if stop would be before start, treat as 0-length slice\n+    if (opts.stop >= 0) {\n+      // Count from left\n+      after_slice =\n+          std::min<int64_t>(input_string_ncodeunits, std::max(opts.start, opts.stop));\n+    } else {\n+      // Count from right\n+      after_slice = std::max<int64_t>(before_slice, input_string_ncodeunits + opts.stop);\n+    }\n+    output = std::copy(input, input + before_slice, output);\n+    output = std::copy(opts.replacement.begin(), opts.replacement.end(), output);\n+    output = std::copy(input + after_slice, input + input_string_ncodeunits, output);\n+    return std::distance(output_start, output);\n\nReview comment:\n       This looks a bit pedantic. Just `output - output_start`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2288,6 +2288,164 @@ const FunctionDoc replace_substring_regex_doc(\n     {\"strings\"}, \"ReplaceSubstringOptions\");\n #endif\n \n+// ----------------------------------------------------------------------\n+// Replace slice\n+\n+struct ReplaceSliceTransformBase : public StringTransformBase {\n+  using State = OptionsWrapper<ReplaceSliceOptions>;\n+\n+  const ReplaceSliceOptions* options;\n+\n+  explicit ReplaceSliceTransformBase(const ReplaceSliceOptions& options)\n+      : options{&options} {}\n+\n+  int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits) override {\n+    return ninputs * options->replacement.size() + input_ncodeunits;\n+  }\n+};\n+\n+struct AsciiReplaceSliceTransform : ReplaceSliceTransformBase {\n+  using ReplaceSliceTransformBase::ReplaceSliceTransformBase;\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    uint8_t* output) {\n+    const auto& opts = *options;\n+    int64_t before_slice = 0;\n+    int64_t after_slice = 0;\n+    uint8_t* output_start = output;\n+\n+    if (opts.start >= 0) {\n+      // Count from left\n+      before_slice = std::min<int64_t>(input_string_ncodeunits, opts.start);\n+    } else {\n+      // Count from right\n+      before_slice = std::max<int64_t>(0, input_string_ncodeunits + opts.start);\n+    }\n+    // Mimic Pandas: if stop would be before start, treat as 0-length slice\n+    if (opts.stop >= 0) {\n+      // Count from left\n+      after_slice =\n+          std::min<int64_t>(input_string_ncodeunits, std::max(opts.start, opts.stop));\n+    } else {\n+      // Count from right\n+      after_slice = std::max<int64_t>(before_slice, input_string_ncodeunits + opts.stop);\n+    }\n+    output = std::copy(input, input + before_slice, output);\n+    output = std::copy(opts.replacement.begin(), opts.replacement.end(), output);\n+    output = std::copy(input + after_slice, input + input_string_ncodeunits, output);\n+    return std::distance(output_start, output);\n+  }\n+};\n+\n+struct Utf8ReplaceSliceTransform : ReplaceSliceTransformBase {\n+  using ReplaceSliceTransformBase::ReplaceSliceTransformBase;\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    uint8_t* output) {\n+    const auto& opts = *options;\n+    const uint8_t* begin = input;\n+    const uint8_t* end = input + input_string_ncodeunits;\n+    const uint8_t *begin_sliced, *end_sliced;\n+    uint8_t* output_start = output;\n+\n+    // Mimic Pandas: if stop would be before start, treat as 0-length slice\n+    if (opts.start >= 0) {\n+      // Count from left\n+      if (!arrow::util::UTF8AdvanceCodepoints(begin, end, &begin_sliced, opts.start)) {\n+        return kTransformError;\n+      }\n+      if (opts.stop > options->start) {\n+        // Continue counting from left\n+        const int64_t length = opts.stop - options->start;\n+        if (!arrow::util::UTF8AdvanceCodepoints(begin_sliced, end, &end_sliced, length)) {\n+          return kTransformError;\n+        }\n+      } else if (opts.stop < 0) {\n+        // Count from right\n+        if (!arrow::util::UTF8AdvanceCodepointsReverse(begin_sliced, end, &end_sliced,\n+                                                       -opts.stop)) {\n+          return kTransformError;\n+        }\n+      } else {\n+        // Zero-length slice\n+        end_sliced = begin_sliced;\n+      }\n+    } else {\n+      // Count from right\n+      if (!arrow::util::UTF8AdvanceCodepointsReverse(begin, end, &begin_sliced,\n+                                                     -opts.start)) {\n+        return kTransformError;\n+      }\n+      if (opts.stop >= 0) {\n+        // Restart counting from left\n+        if (!arrow::util::UTF8AdvanceCodepoints(begin, end, &end_sliced, opts.stop)) {\n+          return kTransformError;\n+        }\n+        if (end_sliced <= begin_sliced) {\n+          // Zero-length slice\n+          end_sliced = begin_sliced;\n+        }\n+      } else if ((opts.stop < 0) && (options->stop > options->start)) {\n+        // Count from right\n+        if (!arrow::util::UTF8AdvanceCodepointsReverse(begin_sliced, end, &end_sliced,\n+                                                       -opts.stop)) {\n+          return kTransformError;\n+        }\n+      } else {\n+        // zero-length slice\n+        end_sliced = begin_sliced;\n+      }\n+    }\n+    output = std::copy(begin, begin_sliced, output);\n+    output = std::copy(opts.replacement.begin(), options->replacement.end(), output);\n+    output = std::copy(end_sliced, end, output);\n+    return std::distance(output_start, output);\n+  }\n+};\n+\n+template <typename Type>\n+using AsciiReplaceSlice = StringTransformExecWithState<Type, AsciiReplaceSliceTransform>;\n+template <typename Type>\n+using Utf8ReplaceSlice = StringTransformExecWithState<Type, Utf8ReplaceSliceTransform>;\n+\n+const FunctionDoc ascii_replace_slice_doc(\n+    \"Replace a slice of a string with `replacement`\",\n\nReview comment:\n       \"binary string\"?\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -77,6 +77,18 @@ struct ARROW_EXPORT SplitPatternOptions : public SplitOptions {\n   std::string pattern;\n };\n \n+struct ARROW_EXPORT ReplaceSliceOptions : public FunctionOptions {\n+  explicit ReplaceSliceOptions(int64_t start, int64_t stop, std::string replacement)\n+      : start(start), stop(stop), replacement(std::move(replacement)) {}\n+\n+  /// Index to start slicing at\n+  int64_t start = 0;\n+  /// Index to stop slicing at\n+  int64_t stop = std::numeric_limits<int64_t>::max();\n\nReview comment:\n       Hmm... I'm not sure the default values will be picked up. Is it just for documentation?\n\n##########\nFile path: python/pyarrow/tests/test_compute.py\n##########\n@@ -693,6 +693,24 @@ def test_string_py_compat_boolean(function_name, variant):\n             assert arrow_func(ar)[0].as_py() == getattr(c, py_name)()\n \n \n+def test_replace_slice():\n+    arr = pa.array([None, '', 'a', 'ab', 'abc', 'abcd'])\n+    res = pc.ascii_replace_slice(arr, start=1, stop=3, replacement='XX')\n+    assert res.tolist() == [None, 'XX', 'aXX', 'aXX', 'aXX', 'aXXd']\n+    res = pc.ascii_replace_slice(arr, start=-2, stop=3, replacement='XX')\n+    assert res.tolist() == [None, 'XX', 'XX', 'XX', 'aXX', 'abXXd']\n+    res = pc.ascii_replace_slice(arr, start=-3, stop=-2, replacement='XX')\n+    assert res.tolist() == [None, 'XX', 'XXa', 'XXab', 'XXbc', 'aXXcd']\n+\n+    arr = pa.array([None, '', '\u03c0', '\u03c0b', '\u03c0b\u03b8', '\u03c0b\u03b8d'])\n+    res = pc.utf8_replace_slice(arr, start=1, stop=3, replacement='\u03c7\u03c7')\n+    assert res.tolist() == [None, '\u03c7\u03c7', '\u03c0\u03c7\u03c7', '\u03c0\u03c7\u03c7', '\u03c0\u03c7\u03c7', '\u03c0\u03c7\u03c7d']\n+    res = pc.utf8_replace_slice(arr, start=-2, stop=3, replacement='\u03c7\u03c7')\n+    assert res.tolist() == [None, '\u03c7\u03c7', '\u03c7\u03c7', '\u03c7\u03c7', '\u03c0\u03c7\u03c7', '\u03c0b\u03c7\u03c7d']\n+    res = pc.utf8_replace_slice(arr, start=-3, stop=-2, replacement='\u03c7\u03c7')\n+    assert res.tolist() == [None, '\u03c7\u03c7', '\u03c7\u03c7\u03c0', '\u03c7\u03c7\u03c0b', '\u03c7\u03c7b\u03b8', '\u03c0\u03c7\u03c7\u03b8d']\n\nReview comment:\n       It's not really useful to re-write the same tests in Python. What you could do is generate slices as in `test_slice_compatibility` to check Pandas compatibility.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2288,6 +2288,164 @@ const FunctionDoc replace_substring_regex_doc(\n     {\"strings\"}, \"ReplaceSubstringOptions\");\n #endif\n \n+// ----------------------------------------------------------------------\n+// Replace slice\n+\n+struct ReplaceSliceTransformBase : public StringTransformBase {\n+  using State = OptionsWrapper<ReplaceSliceOptions>;\n+\n+  const ReplaceSliceOptions* options;\n+\n+  explicit ReplaceSliceTransformBase(const ReplaceSliceOptions& options)\n+      : options{&options} {}\n+\n+  int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits) override {\n+    return ninputs * options->replacement.size() + input_ncodeunits;\n+  }\n+};\n+\n+struct AsciiReplaceSliceTransform : ReplaceSliceTransformBase {\n+  using ReplaceSliceTransformBase::ReplaceSliceTransformBase;\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    uint8_t* output) {\n+    const auto& opts = *options;\n+    int64_t before_slice = 0;\n+    int64_t after_slice = 0;\n+    uint8_t* output_start = output;\n+\n+    if (opts.start >= 0) {\n+      // Count from left\n+      before_slice = std::min<int64_t>(input_string_ncodeunits, opts.start);\n+    } else {\n+      // Count from right\n+      before_slice = std::max<int64_t>(0, input_string_ncodeunits + opts.start);\n+    }\n+    // Mimic Pandas: if stop would be before start, treat as 0-length slice\n+    if (opts.stop >= 0) {\n+      // Count from left\n+      after_slice =\n+          std::min<int64_t>(input_string_ncodeunits, std::max(opts.start, opts.stop));\n\nReview comment:\n       `opts.start` can be negative, so you should perhaps use `before_slice` instead.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T08:25:04.797+0000",
                    "updated": "2021-06-10T08:25:04.797+0000",
                    "started": "2021-06-10T08:25:04.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609558",
                    "issueId": "13381920"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/worklog/609710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10494:\nURL: https://github.com/apache/arrow/pull/10494#discussion_r649203237\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2288,6 +2288,164 @@ const FunctionDoc replace_substring_regex_doc(\n     {\"strings\"}, \"ReplaceSubstringOptions\");\n #endif\n \n+// ----------------------------------------------------------------------\n+// Replace slice\n+\n+struct ReplaceSliceTransformBase : public StringTransformBase {\n+  using State = OptionsWrapper<ReplaceSliceOptions>;\n+\n+  const ReplaceSliceOptions* options;\n+\n+  explicit ReplaceSliceTransformBase(const ReplaceSliceOptions& options)\n+      : options{&options} {}\n+\n+  int64_t MaxCodeunits(int64_t ninputs, int64_t input_ncodeunits) override {\n+    return ninputs * options->replacement.size() + input_ncodeunits;\n+  }\n+};\n+\n+struct AsciiReplaceSliceTransform : ReplaceSliceTransformBase {\n+  using ReplaceSliceTransformBase::ReplaceSliceTransformBase;\n+  int64_t Transform(const uint8_t* input, int64_t input_string_ncodeunits,\n+                    uint8_t* output) {\n+    const auto& opts = *options;\n+    int64_t before_slice = 0;\n+    int64_t after_slice = 0;\n+    uint8_t* output_start = output;\n+\n+    if (opts.start >= 0) {\n+      // Count from left\n+      before_slice = std::min<int64_t>(input_string_ncodeunits, opts.start);\n+    } else {\n+      // Count from right\n+      before_slice = std::max<int64_t>(0, input_string_ncodeunits + opts.start);\n+    }\n+    // Mimic Pandas: if stop would be before start, treat as 0-length slice\n+    if (opts.stop >= 0) {\n+      // Count from left\n+      after_slice =\n+          std::min<int64_t>(input_string_ncodeunits, std::max(opts.start, opts.stop));\n\nReview comment:\n       Good catch. I added a test case for this too.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T13:51:33.800+0000",
                    "updated": "2021-06-10T13:51:33.800+0000",
                    "started": "2021-06-10T13:51:33.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609710",
                    "issueId": "13381920"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/worklog/609719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10494:\nURL: https://github.com/apache/arrow/pull/10494#discussion_r649217125\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -451,29 +451,33 @@ The third set of functions examines string elements on a byte-per-byte basis:\n String transforms\n ~~~~~~~~~~~~~~~~~\n \n-+--------------------------+------------+-------------------------+---------------------+-------------------------------------------------+\n-| Function name            | Arity      | Input types             | Output type         | Notes   | Options class                         |\n-+==========================+============+=========================+=====================+=========+=======================================+\n-| ascii_lower              | Unary      | String-like             | String-like         | \\(1)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| ascii_reverse            | Unary      | String-like             | String-like         | \\(2)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| ascii_upper              | Unary      | String-like             | String-like         | \\(1)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| binary_length            | Unary      | Binary- or String-like  | Int32 or Int64      | \\(3)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| replace_substring        | Unary      | String-like             | String-like         | \\(4)    | :struct:`ReplaceSubstringOptions`     |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| replace_substring_regex  | Unary      | String-like             | String-like         | \\(5)    | :struct:`ReplaceSubstringOptions`     |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| utf8_length              | Unary      | String-like             | Int32 or Int64      | \\(6)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| utf8_lower               | Unary      | String-like             | String-like         | \\(7)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| utf8_reverse             | Unary      | String-like             | String-like         | \\(8)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n-| utf8_upper               | Unary      | String-like             | String-like         | \\(7)    |                                       |\n-+--------------------------+------------+-------------------------+---------------------+---------+---------------------------------------+\n++--------------------------+------------+-------------------------+------------------------+-------------------------------------------------+\n+| Function name            | Arity      | Input types             | Output type            | Notes   | Options class                         |\n++==========================+============+=========================+========================+=========+=======================================+\n+| ascii_lower              | Unary      | String-like             | String-like            | \\(1)    |                                       |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| ascii_reverse            | Unary      | String-like             | String-like            | \\(2)    |                                       |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| ascii_upper              | Unary      | String-like             | String-like            | \\(1)    |                                       |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| binary_length            | Unary      | Binary- or String-like  | Int32 or Int64         | \\(3)    |                                       |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| binary_replace_slice     | Unary      | String-like             | Binary- or String-like | \\(4)    | :struct:`ReplaceSliceOptions`         |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| replace_substring        | Unary      | String-like             | String-like            | \\(5)    | :struct:`ReplaceSubstringOptions`     |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| replace_substring_regex  | Unary      | String-like             | String-like            | \\(6)    | :struct:`ReplaceSubstringOptions`     |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| utf8_length              | Unary      | String-like             | Int32 or Int64         | \\(7)    |                                       |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| utf8_lower               | Unary      | String-like             | String-like            | \\(8)    |                                       |\n++--------------------------+------------+-------------------------+------------------------+---------+---------------------------------------+\n+| utf8_replace_slice       | Unary      | String-like             | String-like            | \\(2)    | :struct:`ReplaceSliceOptions`         |\n\nReview comment:\n       I believe the note number should be (4)?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T14:06:21.049+0000",
                    "updated": "2021-06-10T14:06:21.049+0000",
                    "started": "2021-06-10T14:06:21.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609719",
                    "issueId": "13381920"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/worklog/609817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #10494:\nURL: https://github.com/apache/arrow/pull/10494\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T16:47:46.904+0000",
                    "updated": "2021-06-10T16:47:46.904+0000",
                    "started": "2021-06-10T16:47:46.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609817",
                    "issueId": "13381920"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5559f72f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@524568ce[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7109d0ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@873c55a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cd97787[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3a4f2445[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5fc1719[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@13335be9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14516347[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@577f1084[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32de91ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3b3b680c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 10 16:47:44 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-10T16:47:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12948/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-03T14:46:59.000+0000",
        "updated": "2021-06-10T16:47:48.000+0000",
        "timeoriginalestimate": null,
        "description": "This should implement substring positional replacement, like {{[pandas.Series.str.slice_replace|https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.slice_replace.html]}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add string slice replace kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381920/comment/17361079",
                    "id": "17361079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10494\n[https://github.com/apache/arrow/pull/10494]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-10T16:47:44.851+0000",
                    "updated": "2021-06-10T16:47:44.851+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rmjc:",
        "customfield_12314139": null
    }
}