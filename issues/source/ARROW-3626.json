{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13194442",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442",
    "key": "ARROW-3626",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3626/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/160607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet opened a new pull request #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872\n \n \n   needs #2871 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T13:02:31.940+0000",
                    "updated": "2018-10-30T13:02:31.940+0000",
                    "started": "2018-10-30T13:02:31.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160607",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/160608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-434292184\n \n \n   PTAL @stuartcarnie \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T13:02:49.954+0000",
                    "updated": "2018-10-30T13:02:49.954+0000",
                    "started": "2018-10-30T13:02:49.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160608",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/160628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-434311281\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=h1) Report\n   > Merging [#2872](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5fafd81f48578c92e8118700457e82224aab13d?src=pr&el=desc) will **decrease** coverage by `21.54%`.\n   > The diff coverage is `68.29%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2872/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #2872       +/-   ##\n   ==========================================\n   - Coverage   87.55%     66%   -21.55%     \n   ==========================================\n     Files         411      56      -355     \n     Lines       63818    3342    -60476     \n   ==========================================\n   - Hits        55874    2206    -53668     \n   + Misses       7870    1041     -6829     \n   - Partials       74      95       +21\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/memory/checked\\_allocator.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2NoZWNrZWRfYWxsb2NhdG9yLmdv) | `42.85% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [go/arrow/memory/go\\_allocator.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2dvX2FsbG9jYXRvci5nbw==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | `87.03% <0%> (-3.35%)` | :arrow_down: |\n   | [go/arrow/array/struct.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RydWN0Lmdv) | `72.64% <0%> (-10.16%)` | :arrow_down: |\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | `42.3% <0%> (-42.31%)` | :arrow_down: |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `68.29% <0%> (+6.3%)` | :arrow_up: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `45.77% <0%> (-39.68%)` | :arrow_down: |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | `79.51% <0%> (+5.44%)` | :arrow_up: |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | ... and [377 more](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=footer). Last update [b5fafd8...d10e519](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T13:58:18.656+0000",
                    "updated": "2018-10-30T13:58:18.656+0000",
                    "started": "2018-10-30T13:58:18.654+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160628",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/160642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-434311281\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=h1) Report\n   > Merging [#2872](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/b5fafd81f48578c92e8118700457e82224aab13d?src=pr&el=desc) will **decrease** coverage by `21.06%`.\n   > The diff coverage is `68.97%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2872/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2872       +/-   ##\n   ===========================================\n   - Coverage   87.55%   66.48%   -21.07%     \n   ===========================================\n     Files         411       56      -355     \n     Lines       63818     3342    -60476     \n   ===========================================\n   - Hits        55874     2222    -53652     \n   + Misses       7870     1030     -6840     \n   - Partials       74       90       +16\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/memory/checked\\_allocator.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2NoZWNrZWRfYWxsb2NhdG9yLmdv) | `42.85% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [go/arrow/memory/go\\_allocator.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L2dvX2FsbG9jYXRvci5nbw==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | `87.03% <0%> (-3.35%)` | :arrow_down: |\n   | [go/arrow/array/struct.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RydWN0Lmdv) | `72.64% <0%> (-10.16%)` | :arrow_down: |\n   | [go/arrow/array/boolean.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYm9vbGVhbi5nbw==) | `42.3% <0%> (-42.31%)` | :arrow_down: |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | `68.29% <0%> (+6.3%)` | :arrow_up: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `45.77% <0%> (-39.68%)` | :arrow_down: |\n   | [go/arrow/array/binarybuilder.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5YnVpbGRlci5nbw==) | `79.51% <0%> (+5.44%)` | :arrow_up: |\n   | [go/arrow/array/data.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvZGF0YS5nbw==) | `84.31% <0%> (-3.45%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | ... and [390 more](https://codecov.io/gh/apache/arrow/pull/2872/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=footer). Last update [b5fafd8...2b1f0d9](https://codecov.io/gh/apache/arrow/pull/2872?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-30T14:22:32.182+0000",
                    "updated": "2018-10-30T14:22:32.182+0000",
                    "started": "2018-10-30T14:22:32.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "160642",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/161286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-434811492\n \n \n   @stuartcarnie thanks :)\r\n   @wesm: how do you want to proceed? merge this one (and this should automatically close all the other open PRs) or merge all the other PRs in order and I iteratively rebase PR n+1?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T19:10:04.875+0000",
                    "updated": "2018-10-31T19:10:04.875+0000",
                    "started": "2018-10-31T19:10:04.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161286",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/161315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-434850625\n \n \n   I'll merge each patch in succession, just give me a little time (have been afk today)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:16:08.829+0000",
                    "updated": "2018-10-31T21:16:08.829+0000",
                    "started": "2018-10-31T21:16:08.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161315",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/161332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-434858605\n \n \n   OK, I have rebased and merged every Go patch but this. GitHub is pretty bad at allowing incremental diffs, and since we've at > 4000 lines of Go code added, it would be valuable to have some more detailed code review. We can't be rubber-stamping patches, even if it means slowing down the pace of development =)\r\n   \r\n   I will merge this, but now that I have rebased each of the patches that have gone in today, they can be reviewed in isolation if anyone wishes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:44:19.051+0000",
                    "updated": "2018-10-31T21:44:19.051+0000",
                    "started": "2018-10-31T21:44:19.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161332",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/161333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/arrow/array/boolean.go b/go/arrow/array/boolean.go\nindex 27441fb945..19a692345e 100644\n--- a/go/arrow/array/boolean.go\n+++ b/go/arrow/array/boolean.go\n@@ -72,3 +72,7 @@ func (a *Boolean) setData(data *Data) {\n \t\ta.values = vals.Bytes()\n \t}\n }\n+\n+var (\n+\t_ Interface = (*Boolean)(nil)\n+)\ndiff --git a/go/arrow/array/builder.go b/go/arrow/array/builder.go\nindex 0b32d03f93..2a0ab8b92d 100644\n--- a/go/arrow/array/builder.go\n+++ b/go/arrow/array/builder.go\n@@ -31,6 +31,10 @@ const (\n \n // Builder provides an interface to build arrow arrays.\n type Builder interface {\n+\t// Retain increases the reference count by 1.\n+\t// Retain may be called simultaneously from multiple goroutines.\n+\tRetain()\n+\n \t// Release decreases the reference count by 1.\n \tRelease()\n \n@@ -47,6 +51,14 @@ type Builder interface {\n \t// AppendNull adds a new null value to the array being built.\n \tAppendNull()\n \n+\t// Reserve ensures there is enough space for appending n elements\n+\t// by checking the capacity and calling Resize if necessary.\n+\tReserve(n int)\n+\n+\t// Resize adjusts the space allocated by b to n elements. If n is greater than b.Cap(),\n+\t// additional memory will be allocated. If n is smaller, the allocated memory may reduced.\n+\tResize(n int)\n+\n \t// NewArray creates a new array from the memory buffers used\n \t// by the builder and resets the Builder so it can be used to build\n \t// a new array.\ndiff --git a/go/arrow/array/null.go b/go/arrow/array/null.go\nindex 5cab192f38..346445d5be 100644\n--- a/go/arrow/array/null.go\n+++ b/go/arrow/array/null.go\n@@ -86,10 +86,13 @@ func (b *NullBuilder) AppendNull() {\n \tb.builder.nulls++\n }\n \n+func (*NullBuilder) Reserve(size int) {}\n+func (*NullBuilder) Resize(size int)  {}\n+\n func (*NullBuilder) init(cap int)                       {}\n func (*NullBuilder) resize(newBits int, init func(int)) {}\n \n-// NewArray creates a List array from the memory buffers used by the builder and resets the NullBuilder\n+// NewArray creates a Null array from the memory buffers used by the builder and resets the NullBuilder\n // so it can be used to build a new array.\n func (b *NullBuilder) NewArray() Interface {\n \treturn b.NewNullArray()\ndiff --git a/go/arrow/array/record.go b/go/arrow/array/record.go\nindex cc2f3e5581..ac70b9c27e 100644\n--- a/go/arrow/array/record.go\n+++ b/go/arrow/array/record.go\n@@ -23,6 +23,7 @@ import (\n \n \t\"github.com/apache/arrow/go/arrow\"\n \t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n )\n \n // RecordReader reads a stream of records.\n@@ -115,6 +116,8 @@ type Record interface {\n \n \tNumRows() int64\n \tNumCols() int64\n+\n+\tColumns() []Interface\n \tColumn(i int) Interface\n \tColumnName(i int) string\n \n@@ -217,6 +220,7 @@ func (rec *simpleRecord) Release() {\n func (rec *simpleRecord) Schema() *arrow.Schema   { return rec.schema }\n func (rec *simpleRecord) NumRows() int64          { return rec.rows }\n func (rec *simpleRecord) NumCols() int64          { return int64(len(rec.arrs)) }\n+func (rec *simpleRecord) Columns() []Interface    { return rec.arrs }\n func (rec *simpleRecord) Column(i int) Interface  { return rec.arrs[i] }\n func (rec *simpleRecord) ColumnName(i int) string { return rec.schema.Field(i).Name }\n \n@@ -239,6 +243,91 @@ func (rec *simpleRecord) NewSlice(i, j int64) Record {\n \treturn NewRecord(rec.schema, arrs, j-i)\n }\n \n+// RecordBuilder eases the process of building a Record, iteratively, from\n+// a known Schema.\n+type RecordBuilder struct {\n+\trefCount int64\n+\tmem      memory.Allocator\n+\tschema   *arrow.Schema\n+\tfields   []Builder\n+}\n+\n+// NewRecordBuilder returns a builder, using the provided memory allocator and a schema.\n+func NewRecordBuilder(mem memory.Allocator, schema *arrow.Schema) *RecordBuilder {\n+\tb := &RecordBuilder{\n+\t\trefCount: 1,\n+\t\tmem:      mem,\n+\t\tschema:   schema,\n+\t\tfields:   make([]Builder, len(schema.Fields())),\n+\t}\n+\n+\tfor i, f := range schema.Fields() {\n+\t\tb.fields[i] = newBuilder(b.mem, f.Type)\n+\t}\n+\n+\treturn b\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (b *RecordBuilder) Retain() {\n+\tatomic.AddInt64(&b.refCount, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+func (b *RecordBuilder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tfor _, f := range b.fields {\n+\t\tf.Release()\n+\t}\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tb.fields = nil\n+\t}\n+}\n+\n+func (b *RecordBuilder) Schema() *arrow.Schema { return b.schema }\n+func (b *RecordBuilder) Fields() []Builder     { return b.fields }\n+func (b *RecordBuilder) Field(i int) Builder   { return b.fields[i] }\n+\n+func (b *RecordBuilder) Reserve(size int) {\n+\tfor _, f := range b.fields {\n+\t\tf.Reserve(size)\n+\t}\n+}\n+\n+// NewRecord creates a new record from the memory buffers and resets the\n+// RecordBuilder so it can be used to build a new record.\n+//\n+// The returned Record must be Release()'d after use.\n+//\n+// NewRecord panics if the fields' builder do not have the same length.\n+func (b *RecordBuilder) NewRecord() Record {\n+\tcols := make([]Interface, len(b.fields))\n+\trows := int64(0)\n+\n+\tdefer func(cols []Interface) {\n+\t\tfor _, col := range cols {\n+\t\t\tif col == nil {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tcol.Release()\n+\t\t}\n+\t}(cols)\n+\n+\tfor i, f := range b.fields {\n+\t\tcols[i] = f.NewArray()\n+\t\tirow := int64(cols[i].Len())\n+\t\tif i > 0 && irow != rows {\n+\t\t\tpanic(fmt.Errorf(\"arrow/array: field %d has %d rows. want=%d\", i, irow, rows))\n+\t\t}\n+\t\trows = irow\n+\t}\n+\n+\treturn NewRecord(b.schema, cols, rows)\n+}\n+\n var (\n \t_ Record       = (*simpleRecord)(nil)\n \t_ RecordReader = (*simpleRecords)(nil)\ndiff --git a/go/arrow/array/record_test.go b/go/arrow/array/record_test.go\nindex 1b0b2e59eb..56bf2c42e1 100644\n--- a/go/arrow/array/record_test.go\n+++ b/go/arrow/array/record_test.go\n@@ -72,6 +72,9 @@ func TestRecord(t *testing.T) {\n \tif got, want := rec.NumCols(), int64(2); got != want {\n \t\tt.Fatalf(\"invalid number of columns: got=%d, want=%d\", got, want)\n \t}\n+\tif got, want := rec.Columns()[0], cols[0]; got != want {\n+\t\tt.Fatalf(\"invalid column: got=%q, want=%q\", got, want)\n+\t}\n \tif got, want := rec.Column(0), cols[0]; got != want {\n \t\tt.Fatalf(\"invalid column: got=%q, want=%q\", got, want)\n \t}\n@@ -345,3 +348,43 @@ func TestRecordReader(t *testing.T) {\n \t\t})\n \t}\n }\n+\n+func TestRecordBuilder(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\n+\tb := array.NewRecordBuilder(mem, schema)\n+\tdefer b.Release()\n+\n+\tb.Retain()\n+\tb.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{1, 2, 3, 4, 5, 6}, nil)\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{7, 8, 9, 10}, nil)\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\n+\trec := b.NewRecord()\n+\tdefer rec.Release()\n+\n+\tif got, want := rec.Schema(), schema; !got.Equal(want) {\n+\t\tt.Fatalf(\"invalid schema: got=%#v, want=%#v\", got, want)\n+\t}\n+\n+\tif got, want := rec.NumRows(), int64(10); got != want {\n+\t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := rec.NumCols(), int64(2); got != want {\n+\t\tt.Fatalf(\"invalid number of columns: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := rec.ColumnName(0), schema.Field(0).Name; got != want {\n+\t\tt.Fatalf(\"invalid column name: got=%q, want=%q\", got, want)\n+\t}\n+}\ndiff --git a/go/arrow/array/table.go b/go/arrow/array/table.go\nindex 3040e160be..98ef364fe1 100644\n--- a/go/arrow/array/table.go\n+++ b/go/arrow/array/table.go\n@@ -246,6 +246,32 @@ func NewTable(schema *arrow.Schema, cols []Column, rows int64) *simpleTable {\n \treturn &tbl\n }\n \n+// NewTableFromRecords returns a new basic, non-lazy in-memory table.\n+//\n+// NewTableFromRecords panics if the records and schema are inconsistent.\n+func NewTableFromRecords(schema *arrow.Schema, recs []Record) *simpleTable {\n+\tarrs := make([]Interface, len(recs))\n+\tcols := make([]Column, len(schema.Fields()))\n+\n+\tdefer func(cols []Column) {\n+\t\tfor i := range cols {\n+\t\t\tcols[i].Release()\n+\t\t}\n+\t}(cols)\n+\n+\tfor i := range cols {\n+\t\tfield := schema.Field(i)\n+\t\tfor j, rec := range recs {\n+\t\t\tarrs[j] = rec.Column(i)\n+\t\t}\n+\t\tchunk := NewChunked(field.Type, arrs)\n+\t\tcols[i] = *NewColumn(field, chunk)\n+\t\tchunk.Release()\n+\t}\n+\n+\treturn NewTable(schema, cols, -1)\n+}\n+\n func (tbl *simpleTable) Schema() *arrow.Schema { return tbl.schema }\n func (tbl *simpleTable) NumRows() int64        { return tbl.rows }\n func (tbl *simpleTable) NumCols() int64        { return int64(len(tbl.cols)) }\ndiff --git a/go/arrow/array/table_test.go b/go/arrow/array/table_test.go\nindex cb4abefb4b..48f402a483 100644\n--- a/go/arrow/array/table_test.go\n+++ b/go/arrow/array/table_test.go\n@@ -556,6 +556,52 @@ func TestTable(t *testing.T) {\n \t}\n }\n \n+func TestTableFromRecords(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\n+\tb := array.NewRecordBuilder(mem, schema)\n+\tdefer b.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{1, 2, 3, 4, 5, 6}, nil)\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{7, 8, 9, 10}, []bool{true, true, false, true})\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\n+\trec1 := b.NewRecord()\n+\tdefer rec1.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\n+\trec2 := b.NewRecord()\n+\tdefer rec2.Release()\n+\n+\ttbl := array.NewTableFromRecords(schema, []array.Record{rec1, rec2})\n+\tdefer tbl.Release()\n+\n+\tif got, want := tbl.Schema(), schema; !got.Equal(want) {\n+\t\tt.Fatalf(\"invalid schema: got=%#v, want=%#v\", got, want)\n+\t}\n+\n+\tif got, want := tbl.NumRows(), int64(20); got != want {\n+\t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := tbl.NumCols(), int64(2); got != want {\n+\t\tt.Fatalf(\"invalid number of columns: got=%d, want=%d\", got, want)\n+\t}\n+\tif got, want := tbl.Column(0).Name(), schema.Field(0).Name; got != want {\n+\t\tt.Fatalf(\"invalid column: got=%q, want=%q\", got, want)\n+\t}\n+}\n+\n func TestTableReader(t *testing.T) {\n \tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n \tdefer mem.AssertSize(t, 0)\ndiff --git a/go/arrow/csv/csv.go b/go/arrow/csv/csv.go\nnew file mode 100644\nindex 0000000000..0e6d6e3bd6\n--- /dev/null\n+++ b/go/arrow/csv/csv.go\n@@ -0,0 +1,291 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+// Package csv reads CSV files and presents the extracted data as records.\n+package csv\n+\n+// TODO: implement a row chunker to accumulate N rows into the current record.\n+\n+import (\n+\t\"encoding/csv\"\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"strconv\"\n+\t\"sync/atomic\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/array\"\n+\t\"github.com/apache/arrow/go/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+var (\n+\tErrMismatchFields = errors.New(\"arrow/csv: number of records mismatch\")\n+)\n+\n+// Reader wraps encoding/csv.Reader and creates array.Records from a schema.\n+type Reader struct {\n+\tR      *csv.Reader\n+\tschema *arrow.Schema\n+\n+\trefs int64\n+\tbld  *array.RecordBuilder\n+\tcur  array.Record\n+\terr  error\n+}\n+\n+// NewReader returns a reader that reads from the CSV file and creates\n+// array.Records from the given schema.\n+//\n+// NewReader panics if the given schema contains fields that have types that are not\n+// primitive types.\n+func NewReader(r io.Reader, mem memory.Allocator, schema *arrow.Schema) *Reader {\n+\tvalidate(schema)\n+\treturn &Reader{\n+\t\tR:      csv.NewReader(r),\n+\t\tschema: schema,\n+\t\trefs:   1,\n+\t\tbld:    array.NewRecordBuilder(mem, schema),\n+\t}\n+}\n+\n+// Err returns the last error encountered during the iteration over the\n+// underlying CSV file.\n+func (r *Reader) Err() error { return r.err }\n+\n+func (r *Reader) Schema() *arrow.Schema { return r.schema }\n+\n+// Record returns the current record that has been extracted from the\n+// underlying CSV file.\n+// It is valid until the next call to Next.\n+func (r *Reader) Record() array.Record { return r.cur }\n+\n+// Next returns whether a Record could be extracted from the underlying CSV file.\n+//\n+// Next panics if the number of records extracted from a CSV row does not match\n+// the number of fields of the associated schema.\n+func (r *Reader) Next() bool {\n+\tif r.cur != nil {\n+\t\tr.cur.Release()\n+\t\tr.cur = nil\n+\t}\n+\n+\tif r.err != nil {\n+\t\treturn false\n+\t}\n+\n+\tvar recs []string\n+\trecs, r.err = r.R.Read()\n+\tif r.err != nil {\n+\t\tif r.err == io.EOF {\n+\t\t\tr.err = nil\n+\t\t}\n+\t\treturn false\n+\t}\n+\n+\tr.validate(recs)\n+\tr.read(recs)\n+\n+\treturn r.err == nil\n+}\n+\n+func (r *Reader) validate(recs []string) {\n+\tif r.err != nil {\n+\t\treturn\n+\t}\n+\n+\tif len(recs) != len(r.schema.Fields()) {\n+\t\tr.err = ErrMismatchFields\n+\t\treturn\n+\t}\n+}\n+\n+func (r *Reader) read(recs []string) {\n+\tfor i, str := range recs {\n+\t\tswitch r.schema.Field(i).Type.(type) {\n+\t\tcase *arrow.BooleanType:\n+\t\t\tvar v bool\n+\t\t\tswitch str {\n+\t\t\tcase \"false\", \"False\", \"0\":\n+\t\t\t\tv = false\n+\t\t\tcase \"true\", \"True\", \"1\":\n+\t\t\t\tv = true\n+\t\t\t}\n+\t\t\tr.bld.Field(i).(*array.BooleanBuilder).Append(v)\n+\t\tcase *arrow.Int8Type:\n+\t\t\tv := r.readI8(str)\n+\t\t\tr.bld.Field(i).(*array.Int8Builder).Append(v)\n+\t\tcase *arrow.Int16Type:\n+\t\t\tv := r.readI16(str)\n+\t\t\tr.bld.Field(i).(*array.Int16Builder).Append(v)\n+\t\tcase *arrow.Int32Type:\n+\t\t\tv := r.readI32(str)\n+\t\t\tr.bld.Field(i).(*array.Int32Builder).Append(v)\n+\t\tcase *arrow.Int64Type:\n+\t\t\tv := r.readI64(str)\n+\t\t\tr.bld.Field(i).(*array.Int64Builder).Append(v)\n+\t\tcase *arrow.Uint8Type:\n+\t\t\tv := r.readU8(str)\n+\t\t\tr.bld.Field(i).(*array.Uint8Builder).Append(v)\n+\t\tcase *arrow.Uint16Type:\n+\t\t\tv := r.readU16(str)\n+\t\t\tr.bld.Field(i).(*array.Uint16Builder).Append(v)\n+\t\tcase *arrow.Uint32Type:\n+\t\t\tv := r.readU32(str)\n+\t\t\tr.bld.Field(i).(*array.Uint32Builder).Append(v)\n+\t\tcase *arrow.Uint64Type:\n+\t\t\tv := r.readU64(str)\n+\t\t\tr.bld.Field(i).(*array.Uint64Builder).Append(v)\n+\t\tcase *arrow.Float32Type:\n+\t\t\tv := r.readF32(str)\n+\t\t\tr.bld.Field(i).(*array.Float32Builder).Append(v)\n+\t\tcase *arrow.Float64Type:\n+\t\t\tv := r.readF64(str)\n+\t\t\tr.bld.Field(i).(*array.Float64Builder).Append(v)\n+\t\tcase *arrow.StringType:\n+\t\t\tr.bld.Field(i).(*array.StringBuilder).Append(str)\n+\t\t}\n+\t}\n+\tr.cur = r.bld.NewRecord()\n+}\n+\n+func (r *Reader) readI8(str string) int8 {\n+\tv, err := strconv.ParseInt(str, 10, 8)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn int8(v)\n+}\n+\n+func (r *Reader) readI16(str string) int16 {\n+\tv, err := strconv.ParseInt(str, 10, 16)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn int16(v)\n+}\n+\n+func (r *Reader) readI32(str string) int32 {\n+\tv, err := strconv.ParseInt(str, 10, 32)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn int32(v)\n+}\n+\n+func (r *Reader) readI64(str string) int64 {\n+\tv, err := strconv.ParseInt(str, 10, 64)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn int64(v)\n+}\n+\n+func (r *Reader) readU8(str string) uint8 {\n+\tv, err := strconv.ParseUint(str, 10, 8)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn uint8(v)\n+}\n+\n+func (r *Reader) readU16(str string) uint16 {\n+\tv, err := strconv.ParseUint(str, 10, 16)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn uint16(v)\n+}\n+\n+func (r *Reader) readU32(str string) uint32 {\n+\tv, err := strconv.ParseUint(str, 10, 32)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn uint32(v)\n+}\n+\n+func (r *Reader) readU64(str string) uint64 {\n+\tv, err := strconv.ParseUint(str, 10, 64)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn uint64(v)\n+}\n+\n+func (r *Reader) readF32(str string) float32 {\n+\tv, err := strconv.ParseFloat(str, 32)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn float32(v)\n+}\n+\n+func (r *Reader) readF64(str string) float64 {\n+\tv, err := strconv.ParseFloat(str, 64)\n+\tif err != nil && r.err == nil {\n+\t\tr.err = err\n+\t\treturn 0\n+\t}\n+\treturn float64(v)\n+}\n+\n+// Retain increases the reference count by 1.\n+// Retain may be called simultaneously from multiple goroutines.\n+func (r *Reader) Retain() {\n+\tatomic.AddInt64(&r.refs, 1)\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+// Release may be called simultaneously from multiple goroutines.\n+func (r *Reader) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&r.refs) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&r.refs, -1) == 0 {\n+\t\tif r.cur != nil {\n+\t\t\tr.cur.Release()\n+\t\t}\n+\t}\n+}\n+\n+func validate(schema *arrow.Schema) {\n+\tfor i, f := range schema.Fields() {\n+\t\tswitch ft := f.Type.(type) {\n+\t\tcase *arrow.BooleanType:\n+\t\tcase *arrow.Int8Type, *arrow.Int16Type, *arrow.Int32Type, *arrow.Int64Type:\n+\t\tcase *arrow.Uint8Type, *arrow.Uint16Type, *arrow.Uint32Type, *arrow.Uint64Type:\n+\t\tcase *arrow.Float32Type, *arrow.Float64Type:\n+\t\tcase *arrow.StringType:\n+\t\tdefault:\n+\t\t\tpanic(fmt.Errorf(\"arrow/csv: field %d (%s) has invalid data type %T\", i, f.Name, ft))\n+\t\t}\n+\t}\n+}\n+\n+var (\n+\t_ array.RecordReader = (*Reader)(nil)\n+)\ndiff --git a/go/arrow/csv/csv_test.go b/go/arrow/csv/csv_test.go\nnew file mode 100644\nindex 0000000000..87b803b007\n--- /dev/null\n+++ b/go/arrow/csv/csv_test.go\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package csv_test\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/csv\"\n+\t\"github.com/apache/arrow/go/arrow/memory\"\n+)\n+\n+func Example() {\n+\tf, err := os.Open(\"testdata/simple.csv\")\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tdefer f.Close()\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"i64\", Type: arrow.PrimitiveTypes.Int64},\n+\t\t\tarrow.Field{Name: \"f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t\tarrow.Field{Name: \"str\", Type: arrow.BinaryTypes.String},\n+\t\t},\n+\t\tnil,\n+\t)\n+\tr := csv.NewReader(f, memory.NewGoAllocator(), schema)\n+\tr.R.Comment = '#'\n+\tr.R.Comma = ';'\n+\tdefer r.Release()\n+\n+\tn := 0\n+\tfor r.Next() {\n+\t\trec := r.Record()\n+\t\tfor i, col := range rec.Columns() {\n+\t\t\tfmt.Printf(\"rec[%d][%q]: %v\\n\", i, rec.ColumnName(i), col)\n+\t\t}\n+\t\tn++\n+\t}\n+\n+\t// Output:\n+\t// rec[0][\"i64\"]: [0]\n+\t// rec[1][\"f64\"]: [0]\n+\t// rec[2][\"str\"]: [\"str-0\"]\n+\t// rec[0][\"i64\"]: [1]\n+\t// rec[1][\"f64\"]: [1]\n+\t// rec[2][\"str\"]: [\"str-1\"]\n+\t// rec[0][\"i64\"]: [2]\n+\t// rec[1][\"f64\"]: [2]\n+\t// rec[2][\"str\"]: [\"str-2\"]\n+\t// rec[0][\"i64\"]: [3]\n+\t// rec[1][\"f64\"]: [3]\n+\t// rec[2][\"str\"]: [\"str-3\"]\n+\t// rec[0][\"i64\"]: [4]\n+\t// rec[1][\"f64\"]: [4]\n+\t// rec[2][\"str\"]: [\"str-4\"]\n+\t// rec[0][\"i64\"]: [5]\n+\t// rec[1][\"f64\"]: [5]\n+\t// rec[2][\"str\"]: [\"str-5\"]\n+\t// rec[0][\"i64\"]: [6]\n+\t// rec[1][\"f64\"]: [6]\n+\t// rec[2][\"str\"]: [\"str-6\"]\n+\t// rec[0][\"i64\"]: [7]\n+\t// rec[1][\"f64\"]: [7]\n+\t// rec[2][\"str\"]: [\"str-7\"]\n+\t// rec[0][\"i64\"]: [8]\n+\t// rec[1][\"f64\"]: [8]\n+\t// rec[2][\"str\"]: [\"str-8\"]\n+\t// rec[0][\"i64\"]: [9]\n+\t// rec[1][\"f64\"]: [9]\n+\t// rec[2][\"str\"]: [\"str-9\"]\n+}\n+\n+func TestCSVReader(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\traw, err := ioutil.ReadFile(\"testdata/types.csv\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"bool\", Type: arrow.FixedWidthTypes.Boolean},\n+\t\t\tarrow.Field{Name: \"i8\", Type: arrow.PrimitiveTypes.Int8},\n+\t\t\tarrow.Field{Name: \"i16\", Type: arrow.PrimitiveTypes.Int16},\n+\t\t\tarrow.Field{Name: \"i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"i64\", Type: arrow.PrimitiveTypes.Int64},\n+\t\t\tarrow.Field{Name: \"u8\", Type: arrow.PrimitiveTypes.Uint8},\n+\t\t\tarrow.Field{Name: \"u16\", Type: arrow.PrimitiveTypes.Uint16},\n+\t\t\tarrow.Field{Name: \"u32\", Type: arrow.PrimitiveTypes.Uint32},\n+\t\t\tarrow.Field{Name: \"u64\", Type: arrow.PrimitiveTypes.Uint64},\n+\t\t\tarrow.Field{Name: \"f32\", Type: arrow.PrimitiveTypes.Float32},\n+\t\t\tarrow.Field{Name: \"f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t\tarrow.Field{Name: \"str\", Type: arrow.BinaryTypes.String},\n+\t\t},\n+\t\tnil,\n+\t)\n+\tr := csv.NewReader(bytes.NewReader(raw), mem, schema)\n+\tr.R.Comment = '#'\n+\tr.R.Comma = ';'\n+\tdefer r.Release()\n+\n+\tr.Retain()\n+\tr.Release()\n+\n+\tif got, want := r.Schema(), schema; !got.Equal(want) {\n+\t\tt.Fatalf(\"invalid schema: got=%v, want=%v\", got, want)\n+\t}\n+\n+\tout := new(bytes.Buffer)\n+\n+\tn := 0\n+\tfor r.Next() {\n+\t\trec := r.Record()\n+\t\tfor i, col := range rec.Columns() {\n+\t\t\tfmt.Fprintf(out, \"rec[%d][%q]: %v\\n\", i, rec.ColumnName(i), col)\n+\t\t}\n+\t\tn++\n+\t}\n+\n+\tif got, want := n, 2; got != want {\n+\t\tt.Fatalf(\"invalid number of rows: got=%d, want=%d\", got, want)\n+\t}\n+\n+\twant := `rec[0][\"bool\"]: [true]\n+rec[1][\"i8\"]: [-1]\n+rec[2][\"i16\"]: [-1]\n+rec[3][\"i32\"]: [-1]\n+rec[4][\"i64\"]: [-1]\n+rec[5][\"u8\"]: [1]\n+rec[6][\"u16\"]: [1]\n+rec[7][\"u32\"]: [1]\n+rec[8][\"u64\"]: [1]\n+rec[9][\"f32\"]: [1.1]\n+rec[10][\"f64\"]: [1.1]\n+rec[11][\"str\"]: [\"str-1\"]\n+rec[0][\"bool\"]: [false]\n+rec[1][\"i8\"]: [-2]\n+rec[2][\"i16\"]: [-2]\n+rec[3][\"i32\"]: [-2]\n+rec[4][\"i64\"]: [-2]\n+rec[5][\"u8\"]: [2]\n+rec[6][\"u16\"]: [2]\n+rec[7][\"u32\"]: [2]\n+rec[8][\"u64\"]: [2]\n+rec[9][\"f32\"]: [2.2]\n+rec[10][\"f64\"]: [2.2]\n+rec[11][\"str\"]: [\"str-2\"]\n+`\n+\n+\tif got, want := out.String(), want; got != want {\n+\t\tt.Fatalf(\"invalid output:\\ngot= %s\\nwant=%s\\n\", got, want)\n+\t}\n+\n+\tif r.Err() != nil {\n+\t\tt.Fatalf(\"unexpected error: %v\", r.Err())\n+\t}\n+\n+\t// test error modes\n+\t{\n+\t\tr := csv.NewReader(bytes.NewReader(raw), mem, schema)\n+\t\tr.R.Comment = '#'\n+\t\tr.R.Comma = ';'\n+\n+\t\tr.Next()\n+\t\tr.Record()\n+\n+\t\tr.Release()\n+\t}\n+}\ndiff --git a/go/arrow/csv/testdata/simple.csv b/go/arrow/csv/testdata/simple.csv\nnew file mode 100644\nindex 0000000000..4f0969d547\n--- /dev/null\n+++ b/go/arrow/csv/testdata/simple.csv\n@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+## a simple set of data: int64;float64;string\n+0;0;str-0\n+1;1;str-1\n+2;2;str-2\n+3;3;str-3\n+4;4;str-4\n+5;5;str-5\n+6;6;str-6\n+7;7;str-7\n+8;8;str-8\n+9;9;str-9\ndiff --git a/go/arrow/csv/testdata/types.csv b/go/arrow/csv/testdata/types.csv\nnew file mode 100644\nindex 0000000000..bb4e33144a\n--- /dev/null\n+++ b/go/arrow/csv/testdata/types.csv\n@@ -0,0 +1,20 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+## supported types: bool;int8;int16;int32;int64;uint8;uint16;uint32;uint64;float32;float64;string\n+true;-1;-1;-1;-1;1;1;1;1;1.1;1.1;str-1\n+false;-2;-2;-2;-2;2;2;2;2;2.2;2.2;str-2\ndiff --git a/go/arrow/example_test.go b/go/arrow/example_test.go\nindex 00d4b582b2..9172a5b58c 100644\n--- a/go/arrow/example_test.go\n+++ b/go/arrow/example_test.go\n@@ -18,6 +18,7 @@ package arrow_test\n \n import (\n \t\"fmt\"\n+\t\"log\"\n \n \t\"github.com/apache/arrow/go/arrow\"\n \t\"github.com/apache/arrow/go/arrow/array\"\n@@ -409,3 +410,135 @@ func Example_float64Tensor2x5ColMajor() {\n \t// arr[1 3] = 8\n \t// arr[1 4] = 10\n }\n+\n+func Example_record() {\n+\tpool := memory.NewGoAllocator()\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\n+\tb := array.NewRecordBuilder(pool, schema)\n+\tdefer b.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{1, 2, 3, 4, 5, 6}, nil)\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{7, 8, 9, 10}, []bool{true, true, false, true})\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\n+\trec := b.NewRecord()\n+\tdefer rec.Release()\n+\n+\tfor i, col := range rec.Columns() {\n+\t\tfmt.Printf(\"column[%d] %q: %v\\n\", i, rec.ColumnName(i), col)\n+\t}\n+\n+\t// Output:\n+\t// column[0] \"f1-i32\": [1 2 3 4 5 6 7 8 (null) 10]\n+\t// column[1] \"f2-f64\": [1 2 3 4 5 6 7 8 9 10]\n+}\n+\n+func Example_recordReader() {\n+\tpool := memory.NewGoAllocator()\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\n+\tb := array.NewRecordBuilder(pool, schema)\n+\tdefer b.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{1, 2, 3, 4, 5, 6}, nil)\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{7, 8, 9, 10}, []bool{true, true, false, true})\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\n+\trec1 := b.NewRecord()\n+\tdefer rec1.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\n+\trec2 := b.NewRecord()\n+\tdefer rec2.Release()\n+\n+\titr, err := array.NewRecordReader(schema, []array.Record{rec1, rec2})\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+\tdefer itr.Release()\n+\n+\tn := 0\n+\tfor itr.Next() {\n+\t\trec := itr.Record()\n+\t\tfor i, col := range rec.Columns() {\n+\t\t\tfmt.Printf(\"rec[%d][%q]: %v\\n\", n, rec.ColumnName(i), col)\n+\t\t}\n+\t\tn++\n+\t}\n+\n+\t// Output:\n+\t// rec[0][\"f1-i32\"]: [1 2 3 4 5 6 7 8 (null) 10]\n+\t// rec[0][\"f2-f64\"]: [1 2 3 4 5 6 7 8 9 10]\n+\t// rec[1][\"f1-i32\"]: [11 12 13 14 15 16 17 18 19 20]\n+\t// rec[1][\"f2-f64\"]: [11 12 13 14 15 16 17 18 19 20]\n+}\n+\n+func Example_table() {\n+\tpool := memory.NewGoAllocator()\n+\n+\tschema := arrow.NewSchema(\n+\t\t[]arrow.Field{\n+\t\t\tarrow.Field{Name: \"f1-i32\", Type: arrow.PrimitiveTypes.Int32},\n+\t\t\tarrow.Field{Name: \"f2-f64\", Type: arrow.PrimitiveTypes.Float64},\n+\t\t},\n+\t\tnil,\n+\t)\n+\n+\tb := array.NewRecordBuilder(pool, schema)\n+\tdefer b.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{1, 2, 3, 4, 5, 6}, nil)\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{7, 8, 9, 10}, []bool{true, true, false, true})\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, nil)\n+\n+\trec1 := b.NewRecord()\n+\tdefer rec1.Release()\n+\n+\tb.Field(0).(*array.Int32Builder).AppendValues([]int32{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\tb.Field(1).(*array.Float64Builder).AppendValues([]float64{11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, nil)\n+\n+\trec2 := b.NewRecord()\n+\tdefer rec2.Release()\n+\n+\ttbl := array.NewTableFromRecords(schema, []array.Record{rec1, rec2})\n+\tdefer tbl.Release()\n+\n+\ttr := array.NewTableReader(tbl, 5)\n+\tdefer tr.Release()\n+\n+\tn := 0\n+\tfor tr.Next() {\n+\t\trec := tr.Record()\n+\t\tfor i, col := range rec.Columns() {\n+\t\t\tfmt.Printf(\"rec[%d][%q]: %v\\n\", n, rec.ColumnName(i), col)\n+\t\t}\n+\t\tn++\n+\t}\n+\n+\t// Output:\n+\t// rec[0][\"f1-i32\"]: [1 2 3 4 5]\n+\t// rec[0][\"f2-f64\"]: [1 2 3 4 5]\n+\t// rec[1][\"f1-i32\"]: [6 7 8 (null) 10]\n+\t// rec[1][\"f2-f64\"]: [6 7 8 9 10]\n+\t// rec[2][\"f1-i32\"]: [11 12 13 14 15]\n+\t// rec[2][\"f2-f64\"]: [11 12 13 14 15]\n+\t// rec[3][\"f1-i32\"]: [16 17 18 19 20]\n+\t// rec[3][\"f2-f64\"]: [16 17 18 19 20]\n+}\ndiff --git a/go/arrow/memory/checked_allocator.go b/go/arrow/memory/checked_allocator.go\nindex 4cce89f244..24dc8dfd24 100644\n--- a/go/arrow/memory/checked_allocator.go\n+++ b/go/arrow/memory/checked_allocator.go\n@@ -68,3 +68,7 @@ func (c *CheckedAllocatorScope) CheckSize(t TestingT) {\n \t\tt.Errorf(\"invalid memory size exp=%d, got=%d\", c.sz, c.alloc.sz)\n \t}\n }\n+\n+var (\n+\t_ Allocator = (*CheckedAllocator)(nil)\n+)\ndiff --git a/go/arrow/memory/go_allocator.go b/go/arrow/memory/go_allocator.go\nindex a85baee713..1dea4a8d23 100644\n--- a/go/arrow/memory/go_allocator.go\n+++ b/go/arrow/memory/go_allocator.go\n@@ -42,3 +42,7 @@ func (a *GoAllocator) Reallocate(size int, b []byte) []byte {\n }\n \n func (a *GoAllocator) Free(b []byte) {}\n+\n+var (\n+\t_ Allocator = (*GoAllocator)(nil)\n+)\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:45:10.748+0000",
                    "updated": "2018-10-31T21:45:10.748+0000",
                    "started": "2018-10-31T21:45:10.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161333",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/161334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-434858929\n \n \n   To propagate a comment from another PR here: can we move the Go TODO list to JIRA and out of the README?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:45:31.151+0000",
                    "updated": "2018-10-31T21:45:31.151+0000",
                    "started": "2018-10-31T21:45:31.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161334",
                    "issueId": "13194442"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/worklog/161506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2872: ARROW-3626: [Go] implement CSV reader\nURL: https://github.com/apache/arrow/pull/2872#issuecomment-435004340\n \n \n   done: https://github.com/apache/arrow/pull/2890\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-01T10:52:03.931+0000",
                    "updated": "2018-11-01T10:52:03.931+0000",
                    "started": "2018-11-01T10:52:03.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161506",
                    "issueId": "13194442"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7ae90720[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1705a9d5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@283f0161[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@124e4eb2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43bd5206[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@373c1251[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67d839de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@783d049[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e079fdd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@79febed6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f4e7efe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4656ecc6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 31 21:44:58 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-31T21:44:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3626/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-26T15:06:20.000+0000",
        "updated": "2018-11-01T10:52:03.000+0000",
        "timeoriginalestimate": null,
        "description": "assuming ARROW-3621 goes in, it should be relatively straightforward to implement a TableReader off a CSV file, using `encoding/csv`.\r\n\r\nalso drawing inspiration from:\r\n- https://github.com/apache/arrow/blob/master/cpp/src/arrow/csv/reader.h\r\n- https://github.com/apache/arrow/blob/master/cpp/src/arrow/csv/reader.cc",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] add a CSV TableReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13194442/comment/16670804",
                    "id": "16670804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2872\n[https://github.com/apache/arrow/pull/2872]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-31T21:44:58.802+0000",
                    "updated": "2018-10-31T21:44:58.802+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zoon:",
        "customfield_12314139": null
    }
}