{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13169297",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297",
    "key": "ARROW-2767",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342901",
                "id": "12342901",
                "description": "",
                "name": "JS-0.4.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-02-11"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332552",
                "id": "12332552",
                "name": "JavaScript"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
            "name": "bhulette",
            "key": "bhulette",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Brian Hulette",
            "active": true,
            "timeZone": "America/Vancouver"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2767/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/122165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit opened a new pull request #2256: ARROW-2767[JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-12T05:08:40.679+0000",
                    "updated": "2018-07-12T05:08:40.679+0000",
                    "started": "2018-07-12T05:08:40.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "122165",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/123768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on a change in pull request #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256#discussion_r202829387\n \n \n\n ##########\n File path: js/src/table.ts\n ##########\n @@ -242,7 +243,7 @@ class FilteredDataFrame implements DataFrame {\n         }\n         return sum;\n     }\n-    public *[Symbol.iterator](): IterableIterator<Struct['TValue']> {\n+    public *[Symbol.iterator](): IterableIterator<StructValue<T>> {\n \n Review comment:\n   @TheNeuralBit since the `Struct` type now takes a generic parameter of `StructData`, I think this can be `Struct<T>['TValue']` right?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-16T21:23:55.433+0000",
                    "updated": "2018-07-16T21:23:55.433+0000",
                    "started": "2018-07-16T21:23:55.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "123768",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/124080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on a change in pull request #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256#discussion_r203040307\n \n \n\n ##########\n File path: js/src/table.ts\n ##########\n @@ -242,7 +243,7 @@ class FilteredDataFrame implements DataFrame {\n         }\n         return sum;\n     }\n-    public *[Symbol.iterator](): IterableIterator<Struct['TValue']> {\n+    public *[Symbol.iterator](): IterableIterator<StructValue<T>> {\n \n Review comment:\n   Ah yeah good point! That will be a more correct typing anyway since it'll include the Row Proxy and the View https://github.com/apache/arrow/pull/2256/files/e82a6935d7c18b477c0ee74295e060e01c91ee65#diff-9b37287b5d48e60adf673234c17c04c5R363\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-07-17T14:18:43.047+0000",
                    "updated": "2018-07-17T14:18:43.047+0000",
                    "started": "2018-07-17T14:18:43.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "124080",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/134843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256#issuecomment-413093176\n \n \n   @trxcllnt what do you think?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-15T04:47:20.152+0000",
                    "updated": "2018-08-15T04:47:20.152+0000",
                    "started": "2018-08-15T04:47:20.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "134843",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/148995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "TheNeuralBit commented on issue #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256#issuecomment-425292384\n \n \n   @trxcllnt are you ok merging this? I'm not sure if it'll interfere with your data refactor\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-28T01:33:09.102+0000",
                    "updated": "2018-09-28T01:33:09.102+0000",
                    "started": "2018-09-28T01:33:09.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148995",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/158462",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "guyrt commented on issue #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256#issuecomment-432897296\n \n \n   I really like this idea! Is there any reason why it isn't being merged?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T02:59:36.819+0000",
                    "updated": "2018-10-25T02:59:36.819+0000",
                    "started": "2018-10-25T02:59:36.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158462",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/158506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256#issuecomment-432923413\n \n \n   @trxcllnt ? If I don't hear anything within a few days I'm just going to merge this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T05:52:05.592+0000",
                    "updated": "2018-10-25T05:52:05.592+0000",
                    "started": "2018-10-25T05:52:05.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158506",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/158832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "trxcllnt commented on issue #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256#issuecomment-433152336\n \n \n   Sorry for the delay @wesm, this looks great to me. The refactor branch already includes this feature, and extends it to apply to the List and Map types as well, so I don't think there should be any conflict with that. \ud83d\udc4d to merge from me.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-25T18:12:32.513+0000",
                    "updated": "2018-10-25T18:12:32.513+0000",
                    "started": "2018-10-25T18:12:32.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158832",
                    "issueId": "13169297"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/worklog/159114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2256: ARROW-2767: [JS] Add generic to Table for column names\nURL: https://github.com/apache/arrow/pull/2256\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/js/src/ipc/writer/binary.ts b/js/src/ipc/writer/binary.ts\nindex 8b5206a576..df7c586d94 100644\n--- a/js/src/ipc/writer/binary.ts\n+++ b/js/src/ipc/writer/binary.ts\n@@ -37,7 +37,7 @@ import {\n export function* serializeStream(table: Table) {\n     yield serializeMessage(table.schema).buffer;\n     for (const [id, field] of table.schema.dictionaries) {\n-        const vec = table.getColumn(field.name) as DictionaryVector;\n+        const vec = table.getColumn(field.name) as any as DictionaryVector;\n         if (vec && vec.dictionary) {\n             yield serializeDictionaryBatch(vec.dictionary, id).buffer;\n         }\n@@ -64,7 +64,7 @@ export function* serializeFile(table: Table) {\n     yield buffer;\n \n     for (const [id, field] of table.schema.dictionaries) {\n-        const vec = table.getColumn(field.name) as DictionaryVector;\n+        const vec = table.getColumn(field.name) as any as DictionaryVector;\n         if (vec && vec.dictionary) {\n             ({ metadataLength, bodyLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n             dictionaryBatches.push(new FileBlock(metadataLength, bodyLength, byteLength));\ndiff --git a/js/src/recordbatch.ts b/js/src/recordbatch.ts\nindex 0515278f33..91ea5cfbff 100644\n--- a/js/src/recordbatch.ts\n+++ b/js/src/recordbatch.ts\n@@ -15,7 +15,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import { Schema, Struct, DataType } from './type';\n+import { Schema, Struct, StructData, DataType } from './type';\n import { flatbuffers } from 'flatbuffers';\n import { View, Vector, StructVector } from './vector';\n import { Data, NestedData } from './data';\n@@ -24,9 +24,9 @@ import { valueToString, leftPad } from './util/pretty';\n \n import Long = flatbuffers.Long;\n \n-export class RecordBatch extends StructVector {\n-    public static from(vectors: Vector[]) {\n-        return new RecordBatch(Schema.from(vectors),\n+export class RecordBatch<T extends StructData = StructData> extends StructVector<T> {\n+    public static from<R extends StructData = StructData>(vectors: Vector[]) {\n+        return new RecordBatch<R>(Schema.from(vectors),\n             Math.max(...vectors.map((v) => v.length)),\n             vectors\n         );\n@@ -34,11 +34,11 @@ export class RecordBatch extends StructVector {\n     public readonly schema: Schema;\n     public readonly length: number;\n     public readonly numCols: number;\n-    constructor(schema: Schema, data: Data<Struct>, view: View<Struct>);\n+    constructor(schema: Schema, data: Data<Struct<T>>, view: View<Struct<T>>);\n     constructor(schema: Schema, numRows: Long | number, cols: Data<any> | Vector[]);\n     constructor(...args: any[]) {\n         if (typeof args[1] !== 'number') {\n-            const data = args[1] as Data<Struct>;\n+            const data = args[1] as Data<Struct<T>>;\n             super(data, args[2]);\n             this.schema = args[0];\n             this.length = data.length;\n@@ -49,13 +49,13 @@ export class RecordBatch extends StructVector {\n                 const col: Data<any> | Vector = cols[index];\n                 childData[index] = col instanceof Vector ? col.data : col;\n             }\n-            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n+            super(new NestedData(new Struct<T>(schema.fields), numRows, null, childData));\n             this.schema = schema;\n             this.length = numRows;\n         }\n         this.numCols = this.schema.fields.length;\n     }\n-    public clone<R extends Struct>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n+    public clone<R extends Struct<T>>(data: Data<R>, view: View<R> = this.view.clone(data)): this {\n         return new RecordBatch(this.schema, data as any, view) as any;\n     }\n     public getChildAt<R extends DataType = DataType>(index: number): Vector<R> | null {\n@@ -69,7 +69,7 @@ export class RecordBatch extends StructVector {\n             this.childData.filter((_, i) => namesToKeep[fields[i].name])\n         );\n     }\n-    public rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []) {\n+    public rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths: number[] = []): PipeIterator<string> {\n         return new PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');\n     }\n }\ndiff --git a/js/src/table.ts b/js/src/table.ts\nindex e09e2068fa..634092f0e4 100644\n--- a/js/src/table.ts\n+++ b/js/src/table.ts\n@@ -17,7 +17,7 @@\n \n import { RecordBatch } from './recordbatch';\n import { Col, Predicate } from './predicate';\n-import { Schema, Field, Struct } from './type';\n+import { DataType, Schema, Field, Struct, StructData, Int } from './type';\n import { read, readAsync } from './ipc/reader/arrow';\n import { writeTableBinary } from './ipc/writer/arrow';\n import { PipeIterator } from './util/node';\n@@ -28,29 +28,29 @@ import { ChunkedView } from './vector/chunked';\n export type NextFunc = (idx: number, batch: RecordBatch) => void;\n export type BindFunc = (batch: RecordBatch) => void;\n \n-export interface DataFrame {\n+export interface DataFrame<T extends StructData = StructData> {\n     count(): number;\n-    filter(predicate: Predicate): DataFrame;\n+    filter(predicate: Predicate): DataFrame<T>;\n     scan(next: NextFunc, bind?: BindFunc): void;\n     countBy(col: (Col|string)): CountByResult;\n-    [Symbol.iterator](): IterableIterator<Struct['TValue']>;\n+    [Symbol.iterator](): IterableIterator<Struct<T>['TValue']>;\n }\n \n-export class Table implements DataFrame {\n-    static empty() { return new Table(new Schema([]), []); }\n-    static from(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n+export class Table<T extends StructData = StructData> implements DataFrame {\n+    static empty<R extends StructData = StructData>() { return new Table<R>(new Schema([]), []); }\n+    static from<R extends StructData = StructData>(sources?: Iterable<Uint8Array | Buffer | string> | object | string) {\n         if (sources) {\n             let schema: Schema | undefined;\n-            let recordBatches: RecordBatch[] = [];\n+            let recordBatches: RecordBatch<R>[] = [];\n             for (let recordBatch of read(sources)) {\n                 schema = schema || recordBatch.schema;\n-                recordBatches.push(recordBatch);\n+                recordBatches.push(recordBatch as RecordBatch<R>);\n             }\n-            return new Table(schema || new Schema([]), recordBatches);\n+            return new Table<R>(schema || new Schema([]), recordBatches);\n         }\n-        return Table.empty();\n+        return Table.empty<R>();\n     }\n-    static async fromAsync(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n+    static async fromAsync<R extends StructData = StructData>(sources?: AsyncIterable<Uint8Array | Buffer | string>) {\n         if (isAsyncIterable(sources)) {\n             let schema: Schema | undefined;\n             let recordBatches: RecordBatch[] = [];\n@@ -64,21 +64,21 @@ export class Table implements DataFrame {\n         } else if (sources) {\n             return Table.from(sources);\n         }\n-        return Table.empty();\n+        return Table.empty<R>();\n     }\n-    static fromStruct(struct: StructVector) {\n+    static fromStruct<R extends StructData = StructData>(struct: StructVector<R>) {\n         const schema = new Schema(struct.type.children);\n         const chunks = struct.view instanceof ChunkedView ?\n-                            (struct.view.chunkVectors as StructVector[]) :\n+                            (struct.view.chunkVectors as StructVector<R>[]) :\n                             [struct];\n-        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n+        return new Table<R>(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n     }\n \n     public readonly schema: Schema;\n     public readonly length: number;\n     public readonly numCols: number;\n     // List of inner RecordBatches\n-    public readonly batches: RecordBatch[];\n+    public readonly batches: RecordBatch<T>[];\n     // List of inner Vectors, possibly spanning batches\n     protected readonly _columns: Vector<any>[] = [];\n     // Union of all inner RecordBatches into one RecordBatch, possibly chunked.\n@@ -86,12 +86,12 @@ export class Table implements DataFrame {\n     // If the Table has multiple inner RecordBatches, then this is a Chunked view\n     // over the list of RecordBatches. This allows us to delegate the responsibility\n     // of indexing, iterating, slicing, and visiting to the Nested/Chunked Data/Views.\n-    public readonly batchesUnion: RecordBatch;\n+    public readonly batchesUnion: RecordBatch<T>;\n \n-    constructor(batches: RecordBatch[]);\n-    constructor(...batches: RecordBatch[]);\n-    constructor(schema: Schema, batches: RecordBatch[]);\n-    constructor(schema: Schema, ...batches: RecordBatch[]);\n+    constructor(batches: RecordBatch<T>[]);\n+    constructor(...batches: RecordBatch<T>[]);\n+    constructor(schema: Schema, batches: RecordBatch<T>[]);\n+    constructor(schema: Schema, ...batches: RecordBatch<T>[]);\n     constructor(...args: any[]) {\n \n         let schema: Schema = null!;\n@@ -102,7 +102,7 @@ export class Table implements DataFrame {\n \n         let batches = args.reduce(function flatten(xs: any[], x: any): any[] {\n             return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n-        }, []).filter((x: any): x is RecordBatch => x instanceof RecordBatch);\n+        }, []).filter((x: any): x is RecordBatch<T> => x instanceof RecordBatch);\n \n         if (!schema && !(schema = batches[0] && batches[0].schema)) {\n             throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');\n@@ -111,16 +111,16 @@ export class Table implements DataFrame {\n         this.schema = schema;\n         this.batches = batches;\n         this.batchesUnion = batches.length == 0 ?\n-            new RecordBatch(schema, 0, []) :\n+            new RecordBatch<T>(schema, 0, []) :\n             batches.reduce((union, batch) => union.concat(batch));\n         this.length = this.batchesUnion.length;\n         this.numCols = this.batchesUnion.numCols;\n     }\n \n-    public get(index: number): Struct['TValue'] {\n+    public get(index: number): Struct<T>['TValue'] {\n         return this.batchesUnion.get(index)!;\n     }\n-    public getColumn(name: string) {\n+    public getColumn<R extends keyof T>(name: R): Vector<T[R]>|null {\n         return this.getColumnAt(this.getColumnIndex(name));\n     }\n     public getColumnAt(index: number) {\n@@ -129,10 +129,10 @@ export class Table implements DataFrame {\n             : this._columns[index] || (\n               this._columns[index] = this.batchesUnion.getChildAt(index)!);\n     }\n-    public getColumnIndex(name: string) {\n+    public getColumnIndex<R extends keyof T>(name: R) {\n         return this.schema.fields.findIndex((f) => f.name === name);\n     }\n-    public [Symbol.iterator](): IterableIterator<Struct['TValue']> {\n+    public [Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n         return this.batchesUnion[Symbol.iterator]() as any;\n     }\n     public filter(predicate: Predicate): DataFrame {\n@@ -194,15 +194,15 @@ export class Table implements DataFrame {\n     public serialize(encoding = 'binary', stream = true) {\n         return writeTableBinary(this, stream);\n     }\n-    public rowsToString(separator = ' | ') {\n+    public rowsToString(separator = ' | '): PipeIterator<string|undefined> {\n         return new PipeIterator(tableRowsToString(this, separator), 'utf8');\n     }\n }\n \n-class FilteredDataFrame implements DataFrame {\n+class FilteredDataFrame<T extends StructData = StructData> implements DataFrame<T> {\n     private predicate: Predicate;\n-    private batches: RecordBatch[];\n-    constructor (batches: RecordBatch[], predicate: Predicate) {\n+    private batches: RecordBatch<T>[];\n+    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n         this.batches = batches;\n         this.predicate = predicate;\n     }\n@@ -248,7 +248,7 @@ class FilteredDataFrame implements DataFrame {\n         }\n         return sum;\n     }\n-    public *[Symbol.iterator](): IterableIterator<Struct['TValue']> {\n+    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n         // inlined version of this:\n         // this.parent.scan((idx, columns) => {\n         //     if (this.predicate(idx, columns)) next(idx, columns);\n@@ -268,8 +268,8 @@ class FilteredDataFrame implements DataFrame {\n             }\n         }\n     }\n-    public filter(predicate: Predicate): DataFrame {\n-        return new FilteredDataFrame(\n+    public filter(predicate: Predicate): DataFrame<T> {\n+        return new FilteredDataFrame<T>(\n             this.batches,\n             this.predicate.and(predicate)\n         );\n@@ -304,10 +304,10 @@ class FilteredDataFrame implements DataFrame {\n     }\n }\n \n-export class CountByResult extends Table implements DataFrame {\n-    constructor(values: Vector, counts: IntVector<any>) {\n+export class CountByResult<T extends DataType = DataType> extends Table<{'values': T, 'counts': Int}> {\n+    constructor(values: Vector, counts: IntVector) {\n         super(\n-            new RecordBatch(new Schema([\n+            new RecordBatch<{'values': T, 'counts': Int}>(new Schema([\n                 new Field('values', values.type),\n                 new Field('counts', counts.type)\n             ]),\ndiff --git a/js/src/type.ts b/js/src/type.ts\nindex f8493e4e9f..811086c938 100644\n--- a/js/src/type.ts\n+++ b/js/src/type.ts\n@@ -369,8 +369,12 @@ export class List<T extends DataType = any> extends DataType<Type.List> {\n     })(List.prototype);\n }\n \n-export interface Struct extends DataType<Type.Struct> { TArray: any; TValue: View<any>; }\n-export class Struct extends DataType<Type.Struct> {\n+export type StructData = {[name: string]: DataType}\n+export type StructValue<T extends StructData> = {\n+    [P in keyof T]: T[P]['TValue'];\n+}\n+export interface Struct<T extends StructData = StructData> extends DataType<Type.Struct> { TArray: any; TValue: StructValue<T> & View<any>; }\n+export class Struct<T extends StructData = StructData> extends DataType<Type.Struct> {\n     constructor(public children: Field[]) {\n         super(Type.Struct, children);\n     }\ndiff --git a/js/src/vector.ts b/js/src/vector.ts\nindex b01f4207cc..4b76fc629b 100644\n--- a/js/src/vector.ts\n+++ b/js/src/vector.ts\n@@ -178,7 +178,7 @@ export abstract class NestedVector<T extends NestedType> extends Vector<T>  {\n import { List, Binary, Utf8, Bool, } from './type';\n import { Null, Int, Float, Decimal, Date_, Time, Timestamp, Interval } from './type';\n import { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\n-import { Struct, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n+import { Struct, StructData, Union, SparseUnion, DenseUnion, FixedSizeBinary, FixedSizeList, Map_, Dictionary } from './type';\n \n import { ChunkedView } from './vector/chunked';\n import { ValidityView } from './vector/validity';\n@@ -405,8 +405,8 @@ export class MapVector extends NestedVector<Map_> {\n     }\n }\n \n-export class StructVector extends NestedVector<Struct> {\n-    constructor(data: Data<Struct>, view: View<Struct> = new StructView(data)) {\n+export class StructVector<T extends StructData = StructData> extends NestedVector<Struct<T>> {\n+    constructor(data: Data<Struct<T>>, view: View<Struct<T>> = new StructView<T>(data)) {\n         super(data, view);\n     }\n     public asMap(keysSorted: boolean = false) {\ndiff --git a/js/src/vector/nested.ts b/js/src/vector/nested.ts\nindex 31bbee4916..f980028527 100644\n--- a/js/src/vector/nested.ts\n+++ b/js/src/vector/nested.ts\n@@ -19,7 +19,7 @@ import { Data } from '../data';\n import { View, Vector } from '../vector';\n import { IterableArrayLike } from '../type';\n import { valueToString } from '../util/pretty';\n-import { DataType, NestedType, DenseUnion, SparseUnion, Struct, Map_ } from '../type';\n+import { DataType, NestedType, DenseUnion, SparseUnion, Struct, StructData, StructValue, Map_ } from '../type';\n \n export abstract class NestedView<T extends NestedType> implements View<T> {\n     public length: number;\n@@ -128,16 +128,15 @@ export class DenseUnionView extends UnionView<DenseUnion> {\n     }\n }\n \n-type RowProxy = {[name: string]: any};\n-interface RowViewConstructor<T extends RowProxy = RowProxy> {\n-    readonly prototype: T & RowView;\n-    new (data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number): T & RowView;\n+interface RowViewConstructor<T extends StructData = StructData> {\n+    readonly prototype: StructValue<T> & RowView;\n+    new (data: Data<SparseUnion> & NestedView<any>, children?: Vector<any>[], rowIndex?: number): StructValue<T> & RowView;\n }\n \n-export class StructView extends NestedView<Struct> {\n-    private RowView: RowViewConstructor;\n+export class StructView<T extends StructData = StructData> extends NestedView<Struct<T>> {\n+    private RowView: RowViewConstructor<T>;\n \n-    constructor(data: Data<Struct>, children?: Vector<any>[]) {\n+    constructor(data: Data<Struct<T>>, children?: Vector<any>[]) {\n         super(data, children);\n \n         // Make a customized RowView that includes proxies for\n@@ -156,10 +155,10 @@ export class StructView extends NestedView<Struct> {\n \n         this.RowView = (RowProxy as any);\n     }\n-    protected getNested(self: StructView, index: number) {\n+    protected getNested(self: StructView<T>, index: number) {\n         return new self.RowView(self as any, self._children, index);\n     }\n-    protected setNested(self: StructView, index: number, value: any): void {\n+    protected setNested(self: StructView<T>, index: number, value: any): void {\n         let idx = -1, len = self.numChildren, child: Vector | null;\n         if (!(value instanceof NestedView || value instanceof Vector)) {\n             while (++idx < len) {\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-26T10:35:17.786+0000",
                    "updated": "2018-10-26T10:35:17.786+0000",
                    "started": "2018-10-26T10:35:17.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "159114",
                    "issueId": "13169297"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1468edc4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3201bd2d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e6ae455[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@71bdd060[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13b564f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7709ca80[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e58d078[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@71f92303[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49d31369[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@70379d19[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58c45877[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@609d8957[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 26 10:35:17 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-26T10:35:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2767/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-06-30T00:21:06.000+0000",
        "updated": "2018-10-26T10:35:34.000+0000",
        "timeoriginalestimate": null,
        "description": "Requested by [~domoritz]\r\nSomething like:\r\n\r\n{code:javascript}\r\nclass Table<ColName extends string = string> {\r\n    ...\r\n    getColumn(name: ColName): Vector<any> {\r\n    }\r\n    ...\r\n}\r\n{code}\r\n\r\nIt would be even better if we could find a way to map the column names to the actual vector data types, but one thing at a time.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[JS] Add generic to Table for column names",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/comment/16528408",
                    "id": "16528408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
                        "name": "domoritz",
                        "key": "domoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
                        },
                        "displayName": "Dominik Moritz",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "One thing I realized later is that the `getColumn(name)` function can then guarantee to return a column rather than returning `Column | null`. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=domoritz",
                        "name": "domoritz",
                        "key": "domoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=domoritz&avatarId=46688",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=domoritz&avatarId=46688",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=domoritz&avatarId=46688",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=domoritz&avatarId=46688"
                        },
                        "displayName": "Dominik Moritz",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-06-30T00:25:57.270+0000",
                    "updated": "2018-06-30T00:25:57.270+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/comment/16529304",
                    "id": "16529304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "body": "We could also do\r\n{code:javascript}\r\nclass Table<T extends {[name: string]: any}> {\r\n    ...\r\n    getColumn(name: keyof T): Vector<T[name]> {\r\n    }\r\n    ...\r\n}\r\n{code}\r\n\r\nAlthough I'm not sure the {{T[name]}} lookup will actually work.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bhulette",
                        "name": "bhulette",
                        "key": "bhulette",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Brian Hulette",
                        "active": true,
                        "timeZone": "America/Vancouver"
                    },
                    "created": "2018-07-02T01:11:17.939+0000",
                    "updated": "2018-07-02T01:11:34.184+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13169297/comment/16665000",
                    "id": "16665000",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2256\n[https://github.com/apache/arrow/pull/2256]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-26T10:35:17.375+0000",
                    "updated": "2018-10-26T10:35:17.375+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3verj:",
        "customfield_12314139": null
    }
}